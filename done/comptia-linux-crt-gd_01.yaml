- en: Configuring the Hardware Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers viewing interrupts. It focuses on `/proc/interrupts`, CPU
    info viewing (`/proc/cpuinfo`), and viewing the physical memory installed. It
    also looks at `/proc/meminfo`, the `free` command, viewing swap memory, and adding
    and removing additional swap memory using the `dd`, `mkswap`, `swapon`, and `swapoff`
    commands. The raid status (`viewing/proc/mdstat`) is outlined, as is the devices
    directory `/dev`, the `/proc` virtual directory, the `lsmod` command and usage,
    the `modprobe` command and its usage, and the `lspci` command and usage. The `/proc`
    directory is a virtual filesystem that is created upon boot up which stores various
    items of hardware information about a system.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's get all of the smokescreens out of the picture. Navigating through
    the various directories and using these commands is very informative, and allows
    you to retrieve hardware information in a Linux environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing CPU, RAM, and swap info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interrupts and devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing CPU, RAM, and swap info
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at how we can view CPU, RAM, and swap info on a Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will focus our attention on gaining information on a CPU, so we will
    look at the `/proc/cpuinfo` file. We can garner detailed information about the
    CPU, ranging from the vendor ID, the CPU family, the model name, the CPU rate
    in MHZ, its cache size, and the number of cores, to name a few. Here is an excerpt
    from running the `cat` command alongside `/proc/cpuinfo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more information is given here about the CPU:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see detailed information pertaining to the
    CPU that we ran the `cat /proc/cpuinfo` command against.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's take a look at how we can gather information on the amount of physical
    memory, the **Random Access Memory** (**RAM**), installed in a system. We will
    focus on two commands, the `cat /proc/meminfo` and the `free` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Linux system for demonstration once again, we will look at the output
    of the `/cat /proc/meminfo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more memory usage information is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see some important fields, namely the first
    three fields (`MemTotal`, `MemFree`, and `MemAvailable`), which reflect the current
    status of our physical memory (RAM).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at another command, the `free` command. This command will give
    us the memory information in a more human-readable format. Using our test Linux
    system, we will run the `free` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the `free` command on its own yields the preceding results in kilobytes.
    We can tag some options onto the `free` command to be even more explicit. Here
    is a list of options that we can use with the `free` command, using an Ubuntu
    distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'These are some more options that we can pass with the `free` command on an
    Ubuntu distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, if we take a look at the main page of the `free` command on a CentOS
    7 distribution, we can see similar options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more options that we can pass with the `free` command on a CentOS 7 distro
    are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try a few of the options with the `free` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding output is by far one of the most commonly used options (`-h`)
    with the `free` command. We can even take it a step further by tagging on the
    (`-g`) option to display the total amount of physical memory in gigabytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even see the low and high memory statistics by using yet another fantastic
    option, the (`-l`) option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we are not just shown the RAM information, but
    also our swap memory. It is displayed in the last row. We can use another command
    if we prefer to see only the swap memory. We can use the `swapon` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some options that can be used with the `swapon` command from the main
    page of `swapon` on an Ubuntu distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more options that can be passed with the `swapon` command on an Ubuntu
    distro are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some options that can be used with the `swapon` command from the main
    page of `swapon` on a CentOS 7 distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more options that can be passed with the `swapon` command on a CentOS
    7 distro are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see swap information from within the `/proc` directory, specifically
    in `/proc/swaps`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see that the swap space is using the `/dev/sda4`
    partition. Now, if for some reason we run out of physical memory and we have maxed
    out our swap space, then we can either add more physical memory or add more swap
    space. So, let's focus on the steps to add more swap space.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to create a blank file using the `dd` command. Note that you need
    root access to run this command at the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we can see that we got a `Permission denied` message,
    so let''s switch to the root and try to rerun that command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There we go; we''ve just created a `swap` file using the name `myswapfile.` Now
    we need to run the `mkswap` command and call the `swap` file that we just created
    at the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the last step is to turn on the `swap` file so that the system uses it
    as needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve got that warning message telling us about insecure permissions. We will
    discuss permissions in a later chapter. For now, we will continue to use the existing
    permissions. The last step is to verify that the `swap` file is indeed available
    to our system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And, voila, we now have the newly created `swap` file at our system''s disposal.
    We can also run the `free` command, and we will now find that the swap memory
    has increased by one gigabyte:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In order for the changes to be safe upon reboot, you will need to add an entry
    in `/etc/fstab`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Should we no longer want to use a `swap` file, we can use the `swapoff` command
    to remove `myswapfile` from the swap memory. Here is how we would accomplish this
    at the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s rerun the `swapon` command followed by the `free` command to verify
    that `myswapfile` is indeed removed from swap usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, `myswapfile` is no longer available for use as swap memory.
    Here are the options we can use with the `swapoff` command on an Ubuntu distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more options that can be passed with the `swapoff` command are shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the options we can use with the `swapoff` command on a CentOS 7 distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more options that can be passed with the `swapoff` command are shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Interrupts and devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s switch gears and look at the **Interrupt Requests** (**IRQs**) and
    devices that are available in our Linux system. You can think of an interrupt
    as a service hotline that we would use whenever we need a particular item. We
    would ring a service hotline. The theory remains the same for devices within a
    Linux system; whenever it requires the CPU''s attention, it sends out signals
    via interrupts. Traditional 32-bit architectures support up to 16 interrupts:
    0–15\. Newer architectures support far more than 16 interrupts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `/proc` directory once again, homing in on `/proc/interrupts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'More interrupts are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more interrupts are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see that there are far more interrupts available.
    The output is read from left to right, where left represents the interrupt number,
    and moving to the right indicates the devices or services that are using the interrupts.
    We can see that the timer is using interrupt `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s turn our attention to devices. When we work with devices in a Linux
    system, the devices are represented by files. This enables us to communicate with
    the actual hardware in the system. There are some commonly used devices, such
    as hard disk, DVDs, and USBs, to name a few. Hard disks are represented as `sd(n)`; for
    example: `/dev/sda`, `/dev/sdb`, `/dev/sdc`, and so on. Hard disk partitions are
    represented in the form of `sd(n)`; for example: `/dev/sda1`, `/dev/sda2`, `/dev/sdb1`,
    and so on. Similarly, floppy disks are represented as `fd.` There are some special
    use-case files, such as `/dev/null`, `/dev/zero`, and `/dev/tty*`. You would use
    `/dev/null` when you want to send output from another command and the output is
    not needed. This is known as redirecting. `/dev/zero` is used in conjunction with
    the `dd` command that we covered earlier, for creating blank files. `/dev/tty*`
    is used for remote logins. Let''s take a look at how devices are shown in the
    Linux environment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will take a look at `/proc/devices` using our test Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding output, the hard disk and partition are represented in the
    format of `/dev/sdXY`, where `X` represents the hard disk and `Y` represents the
    partition. We can tell the `ls` command to filter the output to only the hard
    disk and partition information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever wondered what happened to the term *drivers* in a Linux environment?
    Well, wonder no more. Most people coming from a Microsoft Windows background are
    accustomed to interacting with hardware through the use of drivers. Well, in Linux,
    we refer to drivers as modules. It's not as scary as it sounds. We load and unload
    modules whenever we are working with a piece of hardware. For example, when we
    plug in a USB drive, a module is loaded into the backend and is unloaded automatically
    when we remove the USB drive. It's that flexible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can view the modules that are installed in the
    Linux system, using the `lsmod` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'More modules that are available for use are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can see that a number of modules are available
    for use in this Linux system. We read the output from left to right, where we
    see a `0` value under the `Used by` column. It means that the module is not currently
    in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at the process to remove a module using the `rmmod` command.
    We will remove the `usbhid` module, since it''s not currently in use. We can quickly
    verify this is not in use by using `lsmod | grep usbhid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Let''s go ahead and remove that module using the `rmmod` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There we go; the `usbhid` module is no longer loaded in the Linux system. It
    still, however, resides there because it was compiled in the kernel. There are
    only a few options to pass with `rmmod`. Here, they are on an Ubuntu distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, here are the options to pass with the `rmmod` on a CentOS 7 distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order for us to reinstall this `usbhid` module, we will use another popular
    command, `insmod`. Let''s see how `insmod` works at the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, based on the preceding output, it may seem to be contradictory that the
    `insmod` command is unable to find the `usbhid` module. Don't worry, this module
    is compiled in the kernel. That being said, we can use yet another helpful command,
    `modprobe`. This by far, is more popular than `insmod`, as `modprobe` actually
    calls `insmod` in the backend whenever we add a module using `modprobe`. Interestingly
    enough, `modprobe` can be used to remove module(s) too. It does this by calling
    `rmmod` in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: We can use `insmod` itself to install the `usbhid` module. The only catch is
    that you have to specify the absolute path to the module. `mobprobe`, on the other
    hand, uses the modules directory, namely `/lib/modules/$(KERNEL_RELEASE)/`, for
    modules, and loads modules based on the rules defined in the `/etc/modprobe.d/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's use `modprobe` to install the `usbhid` module at the shell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We used the (`-v`) option with `modprobe` because, by default, it will not
    show what is happening in the background. As you can see, `modprobe` is indeed
    calling `insmod` in the backend. Now we can remove this `usbhid` module using
    `modprobe`, and we will see that it is indeed calling `rmmod` in the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, it is evident that `modprobe` is indeed calling `rmmod`
    to remove a module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some options that can be used with the `modprobe` command on an Ubuntu
    distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'More options that can be passed with the `modprobe` command are shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more options that can be passed with the `modprobe` command are shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And here are some options that can be used with the `modprobe` command on a
    CentOS 7 distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more options that can be passed with the `modprobe` command are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'More options that can be passed with the `modprobe` command are shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on hardware settings, looking at the CPU, RAM, and
    swap information in the various directories. We used a variety of commands. Also,
    we touched on IRQs and the various interrupts available in a Linux system. We
    then looked at devices, in the context of files. Finally, we worked with modules.
    We saw the various modules currently available in a Linux system, and learned
    the steps to install and remove a module.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on the process of booting the system. Moreover,
    the various boot managers will be covered. This is another critical aspect for
    every Linux engineer to get to grips with. Simply put, without a boot manager,
    the system won't be able to boot unless we boot off some form of media. Gaining
    the knowledge will put you, as a Linux engineer, ahead of other so-called engineers.
    You will be at a greater advantage regarding certification after completing the
    next chapter. I hope to see you soon.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which directory is created as a virtual file system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/dev`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/lib`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/proc`
  prefs: []
  type: TYPE_NORMAL
- en: D. None of the above
  prefs: []
  type: TYPE_NORMAL
- en: What is the command to view the CPU info?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `less /proc`
  prefs: []
  type: TYPE_NORMAL
- en: B. `more /proc`
  prefs: []
  type: TYPE_NORMAL
- en: C. `cat /proc`
  prefs: []
  type: TYPE_NORMAL
- en: D. `cat /proc/cpuinfo`
  prefs: []
  type: TYPE_NORMAL
- en: What is the command to view RAM inside the `/proc` directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `tail /proc/free`
  prefs: []
  type: TYPE_NORMAL
- en: B. `less /proc/free`
  prefs: []
  type: TYPE_NORMAL
- en: C. `cat /proc/meminfo`
  prefs: []
  type: TYPE_NORMAL
- en: D. `cat /proc/RAM`
  prefs: []
  type: TYPE_NORMAL
- en: Which option with the `free` command displays the memory info in a friendly
    format?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `free -F`
  prefs: []
  type: TYPE_NORMAL
- en: B. `free -L`
  prefs: []
  type: TYPE_NORMAL
- en: C. `free -h`
  prefs: []
  type: TYPE_NORMAL
- en: D. `free –free`
  prefs: []
  type: TYPE_NORMAL
- en: What command is used to tell the system that a file is a `swap` file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `doswap`
  prefs: []
  type: TYPE_NORMAL
- en: B. `format swap`
  prefs: []
  type: TYPE_NORMAL
- en: C. `mkswap`
  prefs: []
  type: TYPE_NORMAL
- en: D. `swap`
  prefs: []
  type: TYPE_NORMAL
- en: What command is used to activate a `swap` file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `Swap`
  prefs: []
  type: TYPE_NORMAL
- en: B. `onSwap`
  prefs: []
  type: TYPE_NORMAL
- en: C. `swap`
  prefs: []
  type: TYPE_NORMAL
- en: D. `swapon`
  prefs: []
  type: TYPE_NORMAL
- en: What command is used to display the swap partition info?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `mkswap`
  prefs: []
  type: TYPE_NORMAL
- en: B. `swapon`
  prefs: []
  type: TYPE_NORMAL
- en: C. `swap`
  prefs: []
  type: TYPE_NORMAL
- en: D. `swapoff`
  prefs: []
  type: TYPE_NORMAL
- en: Which devices file can redirect messages to be sent for discard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/dev/discard`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/dev/null`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/dev/redirect`
  prefs: []
  type: TYPE_NORMAL
- en: D. `None of the above`
  prefs: []
  type: TYPE_NORMAL
- en: What command is used to display currently available modules in a Linux system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `insmod`
  prefs: []
  type: TYPE_NORMAL
- en: B. `depmod`
  prefs: []
  type: TYPE_NORMAL
- en: C. `rmmod`
  prefs: []
  type: TYPE_NORMAL
- en: D. `lsmod`
  prefs: []
  type: TYPE_NORMAL
- en: What command is used to install a module without having to specify the absolute
    path?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `rmmod`
  prefs: []
  type: TYPE_NORMAL
- en: B. `modules`
  prefs: []
  type: TYPE_NORMAL
- en: C. `modrm`
  prefs: []
  type: TYPE_NORMAL
- en: D. `modprobe`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This website will give you all of the necessary information about the current
    CompTIA Linux+ certification: [https://www.comptia.org/](https://www.comptia.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This website will give you details relating to LPI exams, specifically the LPIC
    - Level 1 that you earn by passing both CompTIA Linux+ exams: [http://www.lpi.org/](http://www.lpi.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This last website gives you details about the various Linux kernels available: [https://www.kernel.org/](https://www.kernel.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
