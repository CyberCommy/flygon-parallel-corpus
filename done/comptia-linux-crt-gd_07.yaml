- en: Using YUM Package Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, package management was our focal point. We learned
    about the Debian package manager. There are a number of ways of installing packages
    inside a Debian environment. Our attention was focused on the common methods of
    managing packages within a Debian environment.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we continue our journey. This time we focus on the Red Hat
    approach toward package management. We begin with the very popular **Yellowdog Updater,
    Modified**, also known as **YUM**. Next, we turn our attention toward the `dnf`
    utility. The `dnf` utility acts similar to YUM. This is followed by the `rpm`
    utility for managing packages. Finally, the `yumex` utility will be covered.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yum`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dnf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yumex`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YUM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Yellowdog Updater, Modified**, is commonly known as **YUM**. YUM is an open
    source command-line method for package management for systems using a Red Hat
    distribution. YUM enables us as Linux administrators to perform automatic updates
    and package and dependency management on RPM-based distributions. YUM is similar
    in nature to its Debian counterpart APT. The YUM utility makes use of various
    software repositories.'
  prefs: []
  type: TYPE_NORMAL
- en: A software repo, as it is commonly called, stores a variety of packages. One
    of the main reasons for using YUM is that it detects whether any dependency files
    are needed for a particular package. It then prompts the user of the needed files
    and offers to install them as part of the package installation, which the user
    should have initiated from the get-go.
  prefs: []
  type: TYPE_NORMAL
- en: An interesting point to note is the fact that YUM works with RPM packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we can view the available packages in the YUM database by using
    the `list` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, the repo data is old, precisely two-weeks old. This
    can be solved by running `makecache fast` with YUM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are faced with this message whilst attempting to update the cache, then
    we can remove the lock file, which will remedy this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! We can see that the cache has been updated. We can further narrow
    down the packages being displayed by YUM; to do this, we use the `installed` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'From the output, the packages are displayed by package name, package version,
    and installer. We can also view packages in a group format. We use the `grouplist`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! To view information about a particular package, we can use the `info`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, there is a lot of useful information pertaining to
    the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can identify a package for a file by using the `provides` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the output, it is clear that `/etc/my.cnf` belongs to `mariadb-libs-5.5.56-2.el7.x86_64`.
    We can also search for a package by using the `search` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now to update our system, we first use the `clean all` option:'
  prefs: []
  type: TYPE_NORMAL
- en: You need root privilege before doing package maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we use the `check-update` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. We can also install a package by
    using the `install` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! We can also remove a package in the reverse order. To do this, we
    use the `remove` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If, for some reason, we want to update all packages on the system, we use the
    `update` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can view the YUM repo by passing the `repolist` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: DNF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dandified YUM** or DNF is the name of the package management utility. DNF
    is the next-generation version of YUM. It''s used in RPM-based distributions.
    DNF was introduced in Fedora 18, and has been the default package manager for
    Fedora since version 22\. In fact, when we run YUM commands in later releases
    of Fedora, we are actually running `dnf` in the background. The `dnf` utility
    offers, among other things, performance, memory usages, and dependency resolution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we can check the version of `dnf` on our Fedora 28 system,
    we use the `--version` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, we have version 2.7.5 of the `dnf` utility installed.
    We can even view the repositories on our system by passing the `repolist` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to this, we can even expose the YUM command in Fedora 28 to prove
    that it is an alias to the `dnf` utility. We can do a listing of `/usr/bin` and
    search for YUM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, YUM is an alias inside the Fedora 28 system.
    We can also check to see whether repositories are enabled or not. For this, we
    use the `repolist all` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, to view all the available packages on our system, we use the `list` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can perform searches similar to YUM; for this, we use the `search` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Furthermore, to view which package provides a particular utility,
    we use the `provides` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to this, we can view information for a specific package, using
    the `info` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding screenshot, we can see a lot of useful information for
    a given package. We can also check for system updates by using the `check-update`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To install a package, we use the `install` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! As you can see by now, the options are similar to their older YUM
    counterparts. Similarly, to remove a package, we use the `remove` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also remove packages that were only needed to satisfy dependencies.
    To do so, we use the `autoremove` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If we would like to see the various `dnf` commands that were executed, we can
    use the `history` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is very useful when we''re trying to track what has changed in our system.
    Before we perform any update to our system, it''s always a good idea to do some
    housekeeping. We can use the `clean all` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to update all packages on the system, we use the `update` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also pass the `upgrade` option, which is newer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the process is identical.
  prefs: []
  type: TYPE_NORMAL
- en: RPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '** Red Hat Package Manager**, also known as **RPM**, is a program for installing,
    uninstalling, and managing software packages in RPM-based Linux distributions.
    There are various utilities that make use of the `rpm` utility in the backend,
    such as `yum` and `dnf`, to name two. It''s similar in nature to its counterpart,
    the `dpkg` utility. Whenever there are dependency requirements, you usually have
    to go out and manually find the necessary files and install them. The packages
    that `rpm` manages all end with an `rpm` extension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we can check for an `rpm` signature against a package, and we
    use the `--check-sig` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the signatures have passed the checks using
    the `rpm` utility. We can also check for dependencies for a particular package.
    We use the `qpR` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note that `q` means to query and `p` means to list the capabilities the package
    provides, and `R` means to list the capabilities on which the package depends.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to view all packages, which were recently installed, we can use `qa`
    in combination with `--last`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also search for a specific package by passing the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we search for the `ntp` package. We can get more information
    about a particular package. We can pass the `qi` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Interestingly, before we install a package, we can actually get information
    on the said package and then make a decision as to whether to abort or continue
    installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We queried for the GNOME calculator because it came preinstalled in this CentOS
    7 system. We then removed the package and queried once again. Now we''ll pass `qip`
    on the `rpm` package, which we downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'And viola! As we can see, the `rpm` utility is very powerful. To install a
    package, we use the `-i` or `--install` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see that our package was successfully installed
    using the `rpm` utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view all of the files for a particular package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, we can remove a package by passing the `-e` option. We can also view
    the process of removing a package by adding the `-v` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Finally, we can determine which package a particular configuration
    file belongs to, using the `-qf` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: yumex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**YUM extender**, or **yumex** for short, is a frontend to the `yum` and `dnf`
    utilities. Be default, `yumex` does not come preinstalled with Fedora 28\. This
    can easily be addressed by installing the `yumex` utility at the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, installing `yumex` on Fedora 28 is fairly simple. For CentOS
    7, we first install the **Extra Packages for Enterprise Linux** (**EPEL**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we install the actual `yumex` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The steps illustrated for installing `yumex` on CentOS 7 are fairly similar
    to those for Fedora 28\. Finally, we can launch the `yumex` utility, either at
    the shell or via the GUI. We''ll demonstrate the shell method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, there is a clear indication that we should not run
    the `yumex` utility as a root. Instead, we''ll run the `yumex` utility as a non-root
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Ironically, we''re being prompted for the root password—yes, it may seem confusing
    for some, but not us. This is because we started the `yumex` utility as a non-root
    user. For the `yemex` utility to run, we need root privileges. The reason being,
    it manages packages. A non-root user is unable to manage packages by default.
    So, we''ll authenticate and then we will be greeted with the `nifty yumex` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We notice right off the bat that we have a nice user-friendly GUI with which
    we can work. There is a menu bar at the top and a search field for finding a particular
    package. We simply type the name of a package, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! We get a nice description for a given package, we can select the check
    box and then click Apply**,** and the package will be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we really dived deep into package management within the Red
    Hat world;  particularly, the `yum`, `dnf`, `rpm`, and `yumex` utilities. We first
    covered `yum` and viewed the packages available; next, the `yum` cache needed
    to be updated, and so we updated it. After that, we formatted the packages to
    be displayed in a group format.
  prefs: []
  type: TYPE_NORMAL
- en: Following this, we exposed the information for a given package. We then did
    some reverse engineering by selecting a file and discovering which package it
    came from. This was followed by demonstrating the steps to searching for a package.
    After this, we removed unneeded files before performing an update to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we did a demo on installing a package, followed up on the flip
    side by illustrating the steps to remove a package. Finally, we performed a system
    update using YUM. We then covered the `dnf` utility and saw the similarities between
    `dnf` and `yum`. The Fedora 28 demo showed that `yum` is merely an alias to `dnf`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we looked at the method of viewing the `repo` list using `dnf`, and at
    the method for searching for a given package. Similar to `yum`, using a configuration
    file, we located the corresponding package for the configuration file. Ultimately
    a demo was done on how to add a package using `yum`. The reverse side of removing
    a package was also demonstrated.
  prefs: []
  type: TYPE_NORMAL
- en: Working with `rpm`, we saw how to check the signature of a package. Also, we
    exposed information for a given package, and there was an illustration of installing
    and removing a package using the `rpm` utility. Finally, the focus was on `yumex`.
    The `yumex` utility is a frontend to `yum` and `dnf`. It is not preinstalled by
    default. There was a demo on installing `yumex` in a Fedora 28 environment; likewise,
    we saw the necessary steps needed to install the `yumex` utility in CentOS 7\.
    In the end, we navigated the `yumex` utility, performing a search for a given
    package and seeing a description for that package.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will work with various utilities in the shell. You will
    be better prepared to navigate the filesystem, create files, directories, and
    so on. We will look at file permissions, viewing hidden files and directories,
    and performing searches inside the shell. The skill sets covered in the next chapter
    are essential for any Linux engineer to work efficiently in a command-line environment.
    You will be more confident with file management after completing the next chapter.
    This will enable you to conquer another milestone in your quest for certification.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which option with the `yum` command is used to display the packages on the system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `yum --display`
  prefs: []
  type: TYPE_NORMAL
- en: B. `yum --list`
  prefs: []
  type: TYPE_NORMAL
- en: C. `yum list`
  prefs: []
  type: TYPE_NORMAL
- en: D. `yum --verbose`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to update `cache`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `yum makecache fast`
  prefs: []
  type: TYPE_NORMAL
- en: B. `yum cache --update`
  prefs: []
  type: TYPE_NORMAL
- en: C. `yum –update --cache`
  prefs: []
  type: TYPE_NORMAL
- en: D. `yum –make --list`
  prefs: []
  type: TYPE_NORMAL
- en: Which command can be passed to identify a package from a configuration file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `yum --get-information`
  prefs: []
  type: TYPE_NORMAL
- en: B. `yum --display-information`
  prefs: []
  type: TYPE_NORMAL
- en: C. `yum --provides`
  prefs: []
  type: TYPE_NORMAL
- en: D. `yum provides`
  prefs: []
  type: TYPE_NORMAL
- en: Which option is used to display packages that are installed with the `dpkg`
    command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dpkg --get-selections`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dpkg –set-selections`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dpkg –get-selection`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dpkg-query –get-selection`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to remove any `temp` files that are no longer needed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `yum remove cache`
  prefs: []
  type: TYPE_NORMAL
- en: B. `yum clean all`
  prefs: []
  type: TYPE_NORMAL
- en: C. `yum clean temp`
  prefs: []
  type: TYPE_NORMAL
- en: D. `yum remove temp`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to update the system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `yum update`
  prefs: []
  type: TYPE_NORMAL
- en: B. `yum auto-update`
  prefs: []
  type: TYPE_NORMAL
- en: C. `yum clean update`
  prefs: []
  type: TYPE_NORMAL
- en: D. `yum purge update`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to display both enabled and disabled repositories?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dnf --repo-list`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dnf repolist all`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dnf list repo`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dnf --repo-list --all`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to check for updates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `dnf check-update`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dnf --update-check`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dnf --list-update`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dnf --get-list -updates`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to expose information for a package before it is installed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `rpm -qa`
  prefs: []
  type: TYPE_NORMAL
- en: B. `rpm -qic`
  prefs: []
  type: TYPE_NORMAL
- en: C. `rpm -qip`
  prefs: []
  type: TYPE_NORMAL
- en: D. `rpm -qe`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used to remove a package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `rpm --remove`
  prefs: []
  type: TYPE_NORMAL
- en: B. `rpm --erase`
  prefs: []
  type: TYPE_NORMAL
- en: C. `rpm --delete`
  prefs: []
  type: TYPE_NORMAL
- en: D. `aptitude --purge`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get more info about the CentOS distributions such as installing, configuration
    best practices, and so on at [https://centos.](https://centos.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about Fedora and to download a copy and get some hands-on
    experience, see: [https://getfedora.org](https://getfedora.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
