- en: Changing Runlevels and Boot Targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we focused on the booting process. Afterward, the focus
    was switched to the various boot managers available in Linux distributions. In
    particular, we worked with GRUB and GRUB2, which are by far the most popular boot
    managers available. We looked at their respective configuration files, focusing
    on the timer, default boot entry, and passing arguments at the GRUB/GRUB2 boot
    menu. Finally, separate illustrations were created in order to add a customer
    boot entry in the boot menu for both GRUB and GRUB2. This chapter focuses on the
    introduction of runlevels and boot targets, the types of runlevels and boot targets
    available in the Linux distributions, and the differences between runlevels and
    boot targets. We will also look at working with runlevels and boot targets at
    the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to runlevels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to boot targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with runlevels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with boot targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to runlevels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of runlevels goes back to the SysV days of, runlevel for a purpose.
    Different tasks require various daemons to be running upon system boot. This is
    particularly useful in server environments, where we try to minimize as much overhead
    as possible in our servers. We are usually going dedicate a role to a server.
    In doing so, we cut down on the amount of applications that are required to be
    installed on a given server. For instance, a web server would usually have an
    application that serves up content to users and a database used for lookup(s).
  prefs: []
  type: TYPE_NORMAL
- en: Another typical use case is a print server. This is only usually used for managing
    print jobs. That being said, from the perspective of runlevels, we would usually
    scale down on the amount of services that are running inside a given server. For
    those coming from a Windows background, think about Safe Mode. Usually, we would
    boot in to Safe Mode to minimize the programs and drivers that are loaded. Runlevels
    take that idea further, whereby we can tell a Linux distribution what we would
    like to start/stop in a given runlevel. The cool part is that we have a number
    of runlevels that we can use in a Linux distribution. You will find runlevels
    in Linux distributions that use SysV init.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Runlevel ** | **0  ** | ** 1   ** | **2** | **3** | **4** | **5** | **6**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Daemon** | **off** | **on** | **on** | **on** | **on** | **on** | **off**
    |'
  prefs: []
  type: TYPE_TB
- en: Based on the preceding table, whenever a daemon is **off**, it means that the
    daemon is not going to run in that runlevel. Similarly, whenever a daemon is **on**,
    it is configured to run in the particular runlevel(s).
  prefs: []
  type: TYPE_NORMAL
- en: A daemon and a service are typically used interchangeably.
  prefs: []
  type: TYPE_NORMAL
- en: 'Runlevels usually have various start/stop scripts that are run whenever a runlevel
    has been selected in a Linux distribution that supports `init`. We can take a
    look at a CentOS 6.5 system to see which runlevel is in use. We will look at the
    `/etc/inittab` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, there are seven runlevels supported on the CentOS
    distribution. In particular, runlevel 5 is the runlevel that presents a graphical
    user interface to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The other popular runlevels are `0` for halting or shutting down the system,
    `1` for single user mode (often used for recovery) and `6` for rebooting the system.
    The line that says `id:5:initdefault:` is the line that tells CentOS which runlevel
    to use upon system boot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at `/etc/inittab` on an Ubuntu 6.06 distribution that
    supports `init`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we can focus on the line that says `id:2:initdefault:`.
    The `2` tells the Linux kernel to use runlevel 2 upon system boot. Ubuntu 6.06
    is using runlevel 2, by default. In fact, in Ubuntu, runlevels 2-5 are considered
    to be multi-users; there is no distinction between runlevels 2-5.
  prefs: []
  type: TYPE_NORMAL
- en: 'In CentOS 6.5, we can check which daemons are running in the various runlevels
    by using the `chkconfig` command; this will give a nice summary of the various
    services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see a variety of services. Some are running
    in multiple runlevels, while some are turned off entirely. Take, for example,
    the network service; it is set to `0:off 1:off 2:on 3:on 4:on 5:on 6:off`. This
    tells the system to start the network service in runlevels 2-5, leaving the network
    service off on runlevels 0-1 and 6\. Most of the services are set to run only
    in runlevels 2-5.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can look inside the `/etc/rc.d/` to see the various scripts that are set
    up to either start/stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, there are various directories for each of the
    respective runlevels, 0-6\. Additionally, we can go even further down the filesystem
    hierarchy and expose the child directories. Let''s pick `/etc/rc.d/rc5.d` and
    expose its content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Throughout the chapter, some output is omitted for the sake of brevity.
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding output, there are a number of daemons for runlevel 5\. The
    way by which we identify the daemon would be by the naming convention in use.
    The files that start with `K` are used to kill/stop the process and the files
    that start with `S` are used to start a process. Also, most of the scripts are
    symbolic links pointing to the `/etc/rc.d/init.d/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can expose the various start/stop scripts in a later CentOS distribution.
    For instance, let''s choose CentOS 6.5 and dissect one of its directories. On
    the CentOS 6.5 system, here is one of the stop scripts being displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the scripts are a lot more involved. Moving down, we can see
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finally, from the preceding output, we can clearly see that the scripts are
    programmatic in nature.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to boot targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The concept of boot targets is a whole new ball game. Boot targets are used
    when working with `systemd`. We can see increased performance, because only requests
    for a particular socket are started as needed. Also, `systemd` emulates `init`
    for compatibility, while in the background `systemd` is doing the work. When we
    use boot targets, we work with units. For a given boot target, a number of daemons
    reside. Let''s see the available boot targets in an Ubuntu distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, only the targets that are currently loaded will
    be displayed. The `graphical.target` is similar to runlevel 5 in `init`. To see
    all of the boot targets, we would do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see the boot targets that are active and also
    those that are inactive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s say we want to see the actual daemons associated with a given target.
    We would run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding output, we can see a number of daemons in `graphical.target`.
    One such daemon is the `NetworkManager.service`, which is used for networking
    within our system. The way to read this would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Green circle**: Indicates that the service is currently running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Red circle**: Indicates that the service is not presently running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with runlevels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use various runlevels for various tasks, as we''ve seen earlier in this
    chapter. Let''s use the CentOS 6.5 distribution. To see the runlevel at the shell
    in real time, we can use the `runlevel` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, the `N` means the previous runlevel. In our case,
    we have not changed the runlevel. The `5` indicates we are currently in runlevel
    5\. We can also run another command to display the runlevel. We can use the `who`
    command with the `-r` option, as can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see a further description, namely `run-level
    5` using the `who –r` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can change the runlevel in our CentOS 6.5 distribution by leveraging
    the `init` or `telinit` commands. Let''s see how we would change from runlevel
    5 to runlevel 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get an error when we press *Enter*; the reason being, we need root
    permission to change runlevel 5 to runlevel 1 in the CentOS 6.5 distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s authenticate as the root user and retry the `init 1` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will be placed into runlevel 1, which removes the GUI and takes us
    directly into the shell. This runlevel 1 is typically known as a **single user**,
    which we would use for recovery:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.gif)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, we have run the `runlevel` and `who -r` commands
    and verified that we are indeed in runlevel 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s bring back up the system into GUI state, namely runlevel 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when we run the `runlevel` command in the GUI, we will see the previous
    runlevel 1 replacing the `N` with an `S` in the `runlevel` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can run the `who` command with the `-r` option to see more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s say we want to turn on a daemon in some runlevel. We will use `dnsmasq`
    for demonstration. First, let''s verify that the `dnsmasq` service is presently
    off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Let''s now turn on the `dnsmasq` daemon only for runlevels 3-5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we get an error because we need root privilege to
    turn on/off the daemon in the respective runlevels. Let''s retry as the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now let''s rerun the `chkconfig` command and only look for the `dnsmasq`
    daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see that the `dnsmasq` daemon is now set to
    `on` in runlevels 3-5.
  prefs: []
  type: TYPE_NORMAL
- en: Working with boot targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can work with boot targets using the `systemctl` command. We touched on
    `systemctl` earlier in this chapter. Let''s use the Ubuntu distribution. We can
    check which `target` is currently the default and running in the shell in real
    time by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we can see that `graphical.target` is the default
    running target. Now, if we want to change between targets, we can use the `systemctl`
    command. Let''s change to `multi-user.target`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as we press the *Enter* key, the system will ask us to authenticate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also run `systemctl` to verify the status of `multi-user.target`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'We can return the system to the GUI environment by using the `systemctl` command
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00056.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, we can take a look at one of the targets to see its structure, using
    the `systemctl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, one of the key values is `WantedBy`. This tells us
    who relies on the `network.target`. We can see that `NetworkManager.service` relies
    on the `network.target`. There are also details regarding `StateChangeTimestamp`, `Documentation`,
    `LoadState`, and `Description`, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we interacted with runlevels. We saw the various runlevels
    available, and we switched between runlevels. We saw the default runlevel (runlevel
    5), and we made usage of the `runlevel`, `who`, and `init` commands for interaction.
    We then focused on boot targets. We looked at the default boot targets, and saw
    the various units under each boot target. We then changed between boot targets,
    and saw that authentication was required. We used the `systemctl` commands with
    various options, and the `runlevel` and `who` commands. We verified we are indeed
    in another boot target. We derived that the `graphical.target` is similar to runlevel
    5 and that `mutli-user.target` is similar to runlevel 3\. Finally, we took a brief
    looked at the structure of a boot target.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on the design of a hard disk layout. The
    hard disk layout is critical before any deployment is carried out. Hence, this
    next chapter carries a lot of weight in that a lot of thought needs to be placed
    on how we manage our hard disks. The `fdisk` and `parted`, to name are few mentioned,
    are going to be covered. The techniques that you will grasp from the next chapter
    will aid you in your future deployments as a Linux engineer. This empowerment
    gained from the next chapter is a key factor in building confidence for your future
    success in terms of certification.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which runlevel is a GUI presented in a CentOS distribution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '1'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '3'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command to print the current runlevel in an Ubuntu distribution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`run-level`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemdctl`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`runlevel`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`who –b`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which alternate command displays the runlevel information?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`who -v`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`who -l`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`who -b`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`who –r`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the *N* refer to when reading the runlevel output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The current runlevel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous runlevel before it was changed to the current runlevel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous current runlevel before it was changed to the previous runlevel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The runlevel that is in use currently
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the *S* refer to when reading the runlevel output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Single sign-on user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Super user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Single-entry super user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Single user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command is used to change the runlevel?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`init`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`runlevel`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`change-run-level`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which other command can be used to change the runlevel?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`runlevel`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`shutdown`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`telinit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`telnit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command is used to view the default boot target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl get-default`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl set-default`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl-default`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl-get-default`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command can be used to list the daemons for a given target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl list-dependencies`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl list-dependencies –type list`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl list-dependencies –type target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl list-dependencies target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command switches to between targets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl isolate target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl isolate multi-user.target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl isolate-target-multi-user`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl isolate-multiuser.target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command displays the status of a target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl status multi-user.target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl status-multi-user.target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl-status multi-user.target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`systemctl-status-multiuser.target`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get more information about the CentOS distributions, such as installing,
    configuration best practices, and so on at [https://www.centos.org.](https://www.centos.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following website gives you a lot of useful tips and best practices from
    users in the Linux community, particularly for the Debian distributions, such
    as Ubuntu: [https://askubuntu.com.](https://askubuntu.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following link gives you information in general that relates to various
    commands that work on both CentOS and Ubuntu. You can post your questions at the
    following link and other community members will respond: [https://www.linuxquestions.org](https://www.linuxquestions.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
