- en: Network Configuration and Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we took quite an in-depth look into the world of Internet
    Protocol version 4 or IPv4, and Internet Protocol version 6 or (IPv6). In addition
    to this, we then covered subnet masks. After this, we covered subnetting. Finally,
    we worked with well-known protocols. We covered some of the most widely used protocols
    and their port numbers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, our focus moves into the configuration of IPv4 and IPv6\. First,
    we will work with ways of configuring an IPv4 address along with its subnet mask.
    Next, we will look at the routing table in a Linux system; particularly looking
    at configuring a static route, and ending with a default route configuration.
    This is then followed with the configuration of an IPv6 address inside a Linux
    system; followed by the routing table for IPv6\. This is then followed by configuring
    an IPv6 route; ending off with the configuration of a default route for IPv6\.
    After this, our focus switches over to the configuration of DNS; particularly,
    configuring DNS IP addresses pointing to DNS servers within a Linux environment.
    Finally, this chapter concludes with network troubleshooting; we look at various
    command-line tools that we can use in order to aid us in troubleshooting a potential
    connection related issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: IPv4 configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPv6 configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network troubleshooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPv4 configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various ways of configuring an IPv4 address within a Linux system.
    First, we can use a GUI utility to perform IPv4 configuration. Let's look at our
    Ubuntu 18 system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can select the network icon and then select the drop-down arrow and select
    Wired Settings, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome! Based on what we can see in the previous example, when we select Wired
    Settings, it will open up the Settings dialog box; after this, we should select
    the gear icon. This would then open network settings. In order to configure the
    IPv4 settings, we would select the IPv4 tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on the previous example, we can see that the default method for the IPv4
    addressing is Automatic (DHCP); this means that the system is going to acquire
    its IPv4 addressing information via a server out on the network that is configured
    to issue IPv4 addressing information dynamically. For the purpose of demonstration,
    we want to assign our IPv4 address using the Manual method. After we have selected
    Manual, an Addresses field will appear, allowing us to enter the IPv4 addressing
    information, as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Excellent! Based on the previous screenshot, we can see that we are given the
    opportunity to enter the IPv4 information. We''ve entered an IPv4 address; additionally,
    we will see a text box titled Netmask, this is another name for a subnet mask.
    Once we have finished entering the IPv4 address information, we would then select
    the Apply button. An important thing to keep in mind is the fact that we''re allowed
    to configure multiple IPv4 addresses on an interface. Yes! We can simply click
    inside the text box in the second row and enter an IPv4 address of our choice,
    as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Based on what we have seen in the previous example, as we enter the second IPv4
    address, another text box should appear in the third row; this would happen again
    if we were to enter an IPv4 address in the third row. Once we're satisfied with
    our configuration, we should then select the Apply button in order to save our
    changes. Another way to manage the IPv4 addressing is through the shell; we can
    add and remove IPv4 addresses using various commands at the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: The ifconfig command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ifconfig` command can be used to manage IPv4 addressing information at
    the command line. We can run the `ifconfig` command without any options and it
    will display only active interfaces, as seen in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have found in the preceding command, we see that the `ifconfig`
    utility is not installed in Ubuntu 18 by default; this can easily be remedied
    by running either the `apt` or `apt-get` command, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. Now we can run the `ifconfig` command
    once again, as shown in the following :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Based on what we have found in the preceding code, we can see that
    we get a wealth of information; particularly, that the IPv4 addressing is located
    in the `inet` section. We can filter through to display only the IPv4 addressing
    information, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the previous code, we can see the IPv4 addressing information in addition
    to some IPv6\. We had previously configured two more IPv4 addresses; however,
    they''re not displayed because, by default, only the primary IPv4 address will
    be displayed. We will see in the next command how we can easily view those additional
    IPv4 addresses. In addition to viewing only active interfaces, we can also view
    inactive interfaces; we would pass the `-a` option, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we can see in the previous example, only one physical interface
    is on this system so the output is the same as running the `ifconfig` command
    without any option. Furthermore, we can choose which interface we want to be displayed
    using the `ifconfig` command; we would specify the interface as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! This is useful in situations where the system may have a lot of interfaces
    and you''re only interested in a particular interface. We can assign an IPv4 address
    using the `ifconfig` command; we would simply pass the interface and the IPv4
    address, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have found in the preceding code, we can see that the primary
    IPv4 address has been changed to the IPv4 address we specified. So what if we
    did not want to remove the previous IPv4 address? We can satisfy this requirement
    by creating an alias interface; it''s merely a logical interface. We would then
    assign the second IPv4 address onto the alias interface. Here is how we would
    accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the that, we can now see that we''ve got the original IPv4
    on the physical interface in addition to the creation of an alias interface that
    has the secondary IPv4 address. A point to note is the fact that when we specified
    the IPv4 address for the alias interface, we did not specify any subnet mask.
    The system auto-detected the subnet mask based on the first octet; the subnet
    mask was set to a Class B subnet mask of `255.255.0.0` or `/16`. We can remedy
    this by either removing the IPv4 address and then adding the IPv4 address with
    the subnet mask in CIDR notation, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! Based on what we have found in the preceding code, in order to remove
    the IPv4 address, we could disable the interface by typing `down`. We should then
    add the IPv4 address with the subnet mask in CIDR notation. Added to this, the
    broadcast address was set for us and the system calculated the broadcast address
    based on the subnet mask. However, we can set the broadcast using the `ifconfig`
    command, and thus we would pass the `broadcast` option, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have found in the preceding code, we can see that the broadcast
    address was changed using the address which we supplied. Let''s fix this by changing
    it back to its correct broadcast address, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to remove the IPv4 address, is to pass the `del` option with the
    `ifconfig` command, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! In the previous example, we saw that the IPv4 address was removed
    successfully. When we''ve finished working with the alias, we can remove its configuration
    by passing the `down` option as seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! Looking at the previous example, we can see that the interface is
    no longer recognized with the `ifconfig` command.
  prefs: []
  type: TYPE_NORMAL
- en: The ifup command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ifup` command is used to bring up or enable an interface. The interface
    is then able to send and receive packets.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, only interfaces which are listed in `/etc/network/interfaces` are
    recognized by the `ifup` command. Let''s shut down the `ens33` interface and use
    the `ifup` command to bring back up the `ens33` interface. Here is how we would
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, the `ifup` does not recognize
    the `ens33` interface. This is due to the fact that the `ens33` interface is not
    listed in the `/etc/network/interfaces`. We can add this entry and then it will
    work with the `ifup` command. This can be seen in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! Based on what we have seen in the previous example, the `ifup` command
    has successfully brought up the `ens33` interface. Moreover, the IPv4 address
    which was assigned was the IPv4 address which we configured via the GUI network
    settings.In Ubuntu 18, by default all of the network settings are handled by the
    network-manager service; whenever we make a change via the command prompt, if
    the system is restarted or the network-manager service is restarted, then all
    of changes via the command prompt are lost and only changes that reside in the
    `network-manager.service` are used. To work around  this we would to stop the
    `network-manger.service` and then disable the network-manager service. Be aware
    that doing this could leave your system without connectivity if you don't save
    the changes for your network settings in the `/etc/network/interfaces` (these
    include the IP, subnet mask default gateway, DNS and IPs) for the Ubuntu 18 system.
  prefs: []
  type: TYPE_NORMAL
- en: Do not stop the `network-manager.service` unless you're sure that you've saved
    the network configuration in the `/etc/network/interfaces` file.
  prefs: []
  type: TYPE_NORMAL
- en: The ifdown command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ifdown` command can be used to bring down or disable an interface; again,
    only interfaces that are listed in the `/etc/network/interfaces` are recognized.
    Let''s bring down the `ens33` interface using the `ifdown` command, as seen in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! In the previous example, the `ifdown` command successfully brought
    down the `ens33` interface due to the fact that we added the `ens33` interface
    inside the `/etc/network/interfaces` file.
  prefs: []
  type: TYPE_NORMAL
- en: The ip command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ip` command is far more scalable than the `ifconfig` command. For instance,
    we can view all of the secondary IPv4 addresses that are configured on every interface
    with the ip command. Without any option, the `ip` command will display the options
    that can be used; this can be seen in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the previous example, we can see a number of options that can be passed;
    one such option is the `a` option. This displays all of the addressing information,
    as seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Looking at the previous example, right away we can see multiple IPv4
    addresses for the `ens33` interface. We can add an IPv4 address using the `ip`
    command; we would pass the `add` option, as can be seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! So now we can see that the IPv4 address has been added. Similarly,
    we can remove and IPv4 address; we would pass the `del` option, as can be seen
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on that, we can see that the IPv4 address that we specified with the
    `del` option, has been removed. Also, we used `show` option, this enabled us to
    specify the interface that we''re interested in seeing. It is also possible to
    specify a broadcast address similar to the `ifconfig` command. To do this, we
    would pass either the `brd` or `broadcast` option, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the previous example, we can see that the broadcast address
    has been assigned for the IPv4 address. Added to this, it possible to shut down
    or enable an interface with the `ip` command. To do this, we would use pass the
    `link` option of the `ip` command, as can be seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'By looking at the previous example, we can see that the link has been brought
    down. Similarly, we can bring up an interface by passing the `up` option, as seen
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Based on the previous example, we can see that the interface was brought
    back up. We can also work with an alias using the IP command; we would pass the
    `a` or `add` option with the `ip` command. This can be seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Based on the previous example, we can see the alias being listed under
    `ens33` with the `ip` command. However, when we use the `ifconfig` command, we
    see the `ens33:1` listed as a separate logical interface. Once we''ve finished
    using the alias, we can remove the alias by passing the `del` option with the
    `ip` command, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output as been omitted for brevity. Based the previous example, we can
    see that the alias interface has been removed. In environments where the network
    is using VLANs or Virtual LANs, it is possible to create sub-interfaces that can
    map to a VLAN, effectively making the Linux system able to handle VLAN traffic
    that is tagged. You would need to configure the network switch to tag the traffic,
    which will then send the traffic inside the VLAN to the Linux system. The link
    between the Linux system and the switch is then treated as a `trunk` port because
    it can send multiple VLANs across its physical link, and the Linux system can
    handle the traffic because it is aware of the VLANs that we create. We would use
    the `ip link` with the `add` option. Here is how we would create a sub-interface
    and map it to a VLAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on what we have seen in the previous example, the interface
    was created and is being treated as a separate interface. To check this out, we
    can assign an IPv4 address just as we would a physical interface, as shown in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! The last step would be to bring up the interface. To do this, we would
    pass the `up` option to the `ip link` command, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the previous example, we can see that the sub-interface that maps
    to VLAN 100 is now up. We can make add and remove IP addressing information similar
    to that of a physical interface. When we''ve finished working with the sub-interface,
    we can remove it by passing the `del` option to the `ip link` command, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Wonderful! Looking at that example, we can see that the sub-interface is no
    longer present. Another useful purpose of the `ip` command is the ability to view
    the statistics of an interface. We would pass the `-s` and the `ls` option with
    the `ip link` command, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the previous example, we can see statistics regarding packets received
    and transmitted; we can even see frame, missed, and CRC errors by adding another
    `-s` option to the current command, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! Based on the previous example, we can see counters pertaining to
    CRC, frames, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring IPv4 routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve been assigning IPv4 addressing information but we''ve not specified
    any type of routing information. We can view the current routing table by using
    a number of commands. For instance, we can use the `route` command to display
    the routing table, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, only connected routes that
    map to the configured IPv4 addresses are displayed. It is also possible to display
    the routing table using the `ip` command; we would pass the `route` option, as
    shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the previous example, we can see similar information to that of the
    route command. Another command that can be used to print the routing table is
    the `netstat` command; to do this, we would pass the `-r` option, as shown in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! In the previous example, the routing table has been printed once
    again. We have not configured a default route; a default route is used for reaching
    hosts who are not on the same subnet, or who reside outside of the LAN. We will
    use the `ip route` command with the `add` and `default` options to define a default
    route. The following example shows how this would look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Based on the previous example, we can see that a default route has
    been added. When we ran the `route` command, we saw the word `_gateway` instead
    of the IPv4 address; we can pass the `-n` option to view the numerical value of
    the default gateway. The following example demonstrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! We can also create a static route by specifying the subnet that
    we are trying to reach. Here is how we would accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the previous example, we can now see the static route added
    for the `10.20.0.0/24` subnet via `172.16.30.1`. When we no longer desire a route,
    we can remove it using the `ip route` command with the `del` option, as shown
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the previous example, the static route for `10.20.0.0/24` is
    no longer present in our routing table.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can configure IPv6 addressing information in a similar way to that used
    for IPv4\. To view only IPv6 addresses, we can use the `ip` command and pass the
    `-6` option, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the previous example, we can see only IPv6 information, particularly
    the link-local address, which starts with `fe80`. We can add an IPv6 address using
    the `ip` command. We would add an IPv6 address in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! In the previous example, we can see that the IPv6 address was assigned
    to the `ens33` interface. Also, we could use the `ifconfig` command to display
    the IPv6 addressing information, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the previous example, we can see the IPv6 information in the `inet6`
    section. It is also possible to configure multiple IPv6 addresses; we would simply
    use the `ip` with `-6` command, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on that example, we can see that the second IPv6 address has been added.
    When we no longer need an IPv6 address, we can pass the `del` option with the
    `ip` command, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! In the previous example, the IPv6 address was removed, which we specified
    with the `del` option.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring IPv6 routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve looked at the IPv4 routing table but there is also an IPv6 routing table.
    We can use the same `ip route` command with the `-6` option, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have seen in the previous example, only the IPv6 routing information
    is being displayed. There is currently no default gateway configured for IPv6
    in this system. We can fix this by using the `ip route` command and passing the
    `-6` and `add` options, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! In the previous example, we can see that a default route was added
    for IPv6\. We can also see the IPv6 routing information using the route command;
    we would pass the `-6` option, as shown in the next example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the previous example, we can see the IPv6 address of the
    default gateway. It is also possible to configure a static route for an IPv6 subnet,
    which is on a different IPv6 subnet, or outside the LAN. Here is how we would
    add a static route for an IPv6 subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! In the previous example, you can see that we''ve added a static
    route for an IPv6 subnet. Similarly, we can remove a static route for an IPv6
    subnet by passing the `del` option with the `ip route` command, as shown in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: Client-side DNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up to this point, we''ve assigned addressing information (IPv4 & IPv6) in our
    system for connectivity on the network. However, in order for us to be able to
    browse the internet, we''re going to have to configure DNS  in the system; particularly,
    we need to tell the Linux system which DNS server to use when attempting to go
    out to the internet. As we''ve seen earlier in this chapter, there are various
    text boxes that we can fill out for IPv4, IPv6, gateway and DNS information using
    a GUI utility. Here, we will look at configuring the DNS information at the command
    prompt; particularly the `/etc/resolv.conf` file. Here is the content of the `/etc/resolv.conf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. As can be seen in the previous example,
    the format for defining DNS server in Ubuntu 18 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on that code, we can specify our DNS server IPs in this file. Let''s
    see if we can browse the internet, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on what we have seen in the previous example, we''re unable to reach
    out onto the internet. Let''s put in a DNS server''s IP address inside `/etc/resolv.conf`
    by using an editor such as vi or nano; the following entry is what we want to
    put in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have seen in the previous example, we''ve added a DNS entry. Now, when
    we refresh the page, we will see the content start to populate the page as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Excellent! We can also create local DNS entries for local name resolution inside
    the `/etc/hosts` file. Here is the content of the `/etc/hosts file`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We could edit this file and add an entry for the Fedora 28 system using a text
    editor such as vi or nano. Here is a sample entry that we have add to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Now we would be able to meet the Fedora 28 system by using either
    its IP address or its name, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: Network troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use a number of tools to aid us in troubleshooting a network connection
    issue, ranging from GUI utilities to command-line tools. Our focus will be troubleshooting
    using the command-line tools available to us.
  prefs: []
  type: TYPE_NORMAL
- en: The ping command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ping` utility uses the ICMP protocol to send out requests and receive
    replies. We can use the ping utility to test for basic reachability between systems
    locally or out on the internet. The basic syntax for the ping utility is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, we can now try out the
    `ping` utility, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: As we have seen in the previous example, the `ping` utility will run until it
    is stopped by the user using *CTRL* + *C*; this is different in a Windows environment,
    where only four ICMP echo request/replies are seen.
  prefs: []
  type: TYPE_NORMAL
- en: The ping6 command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to test for potential connectivity issues for IPv6\. We
    would use the `ping6` command; the syntax for the `ping6` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, we would simply need to
    specify either the DNS name or IPv6 address of the target system. Here is how
    we use the `ping6` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: The traceroute command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the `traceroute` command to test for potential connectivity issues.
    The `traceroute` command displays each device that is on the path of the destination
    system; each device is considered a `hop`. The basic syntax for the `traceroute`
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we simply need to specify either the DNS name or IPv4 address
    of the target system. This is shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have seen in the previous example, the `traceroute` utility is not installed
    by default in Ubuntu 18; we quickly remedied this by installing the `inetutils-traceroute`
    package. Now let''s try to run the `traceroute` command once again, as shown in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! Based on the previous example, we can see that the device is one hop
    away from the Ubuntu system.
  prefs: []
  type: TYPE_NORMAL
- en: The traceroute6 command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to test for a potential bottleneck between systems for
    IPv6 using the `traceroute6` command. The basic syntax for the `traceroute6` command
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, we would simply specify
    either the DNS name or IPv6 address of the target system. The following example
    shows how we would use the `traceroute6` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: So we can see that the `traceroute6` command works in a similar way to that
    of the `traceroute` command.
  prefs: []
  type: TYPE_NORMAL
- en: The netstat command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the `netstat` command to troubleshoot a number of different issues.
    We''ve seen earlier in this chapter, when we covered routing, that we needed to
    pass the `-r` option to view the routing table. Well, we can also use the `netstat`
    command to view active connections. This is especially useful in server environments
    when we are running various programs utilizing various ports; these ports could
    be either TCP or UDP ports. We can pass the `-n` option, which shows numerical
    address(s); the `-t` option, which shows TCP connections; the `-l`, which shows
    what sockets are listening; and the `-p` option, which shows the program ID and
    program name. These options work well together when trying to narrow down your
    TCP ports. Here is how this would look for TCP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Excellent! Looking at the previous example, we can see a number of programs
    running, including `dns`, `sshd`, `ryslogd`, to name a few. Similarly, we can
    view UDP connections; we would pass the `nulp` options. The `-u` means UDP, as
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Excellent! Looking at the previous example, we can see quite a few services
    listening for connection, the `systemd-resolve` (port `53`) being one of them.
  prefs: []
  type: TYPE_NORMAL
- en: The tracepath command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `tracepath` command is another method for testing potential bottlenecks
    between systems. It works in a similar way to the `traceroute` command. The basic
    syntax for the `tracepath` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, we would simply need to
    specify either the DNS name or IPv4 address in order to use the `tracepath` command.
    This is shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, the `pmtu` or `Path MTU` is shown in addition to number
    of hop(s) to the destination device.
  prefs: []
  type: TYPE_NORMAL
- en: The tracepath -6 command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to the `tracepath` command, `tracepath` with the `-6` option is another
    method for testing potential bottlenecks between systems using IPv6 addressing.
    The basic syntax for the `tracepath` with the `-6` option is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, we would simply need to
    specify either the DNS name or IPv6 address in order to use `tracepath` with the
    `-6` option. This is shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! Based on what we have seen in the previous example, we can see that
    the `tracepath` with the `-6` option works in a similar way to the `tracepath`
    command for IPv4.
  prefs: []
  type: TYPE_NORMAL
- en: The nmap command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Network Mapper, or nmap, can also troubleshoot potential connection issues
    by using the `nmap` command; this command scans a given system and displays services
    and their respective port numbers which are open for the system specified with
    the `nmap` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax for the `nmap` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on what we have seen in the previous example, we would specify the option
    and the IP of the destination system that we are troubleshooting as shown in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Excellent! Based on the previous example, we can see which service and their
    respective port number is running on the destination system. The `-A` option is
    used to display OS and version detection; the `-T4` option is used for faster
    execution. You should seek permission from the owner or administrator of the destination
    system or network prior to running the `nmap` command; this is true especially
    in corporate environments where there are policies governing the use of a given
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Always seek permission before performing any kind of port scans in a network.
  prefs: []
  type: TYPE_NORMAL
- en: The dig command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve looked at ways of troubleshooting connectivity issues, but DNS
    issues could pose a risk too. We can use the `dig` utility to perform DNS lookups
    for a given domain. The basic syntax for the `dig` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we simply specify the domain that we want to perform a lookup
    against.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we would perform a simple lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the previous example, we can see the DNS record for the
    given domain; in particular we can see the `A` records. The server that answered
    our query is `8.8.8.8`, which we configured in the `/etc/resolv.conf`. However,
    we can use a different DNS server by passing the `@` with the `dig` command, as
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see from the previous example, we have specified a different DNS
    server to answer our query. Adding to this, we can also look for particular DNS
    information such as the name server or NS by passing `NS` with the `dig` command,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Excellent!  In the previous example, we can see the name servers for the given
    domain.
  prefs: []
  type: TYPE_NORMAL
- en: The whois command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to gain information for a domain using the `whois` command.
    The basic syntax for the `whois` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus we can simply pass a domain name with the `whois` command and get valuable
    information for a given domain, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! Some output has been omitted for brevity. The previous example shows
    that we are given a  wealth of information for the given domain.
  prefs: []
  type: TYPE_NORMAL
- en: The hostname command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command is simply used for setting or returning the DNS name of the system
    and the IP address of the system. The basic syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The example shows that, if we simply enter the `hostname` command, it will
    yield the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we can see the DNS name of the system. We can also pass the `-i` option
    to view the IP associated with the `hostname`, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Based on the previous example, we can see an IP from the loopback
    range of `127.0.0.0/8`. We can change the `hostname` by passing a new `hostname`
    value, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the previous example, we can see that the `hostname` command indicates
    that the `hostname` has been changed but it has not updated the prompt. We can
    exit out of root and sign back in and we will see the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent! Now we can see that the hostname was changed to reflect the name
    that we specified. However, when we reboot the system the hostname will be set
    back to the value specified in the `/etc/hostname` file, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'We can fix this by editing the `/etc/hostname` file using a text editor such
    as vi or nano and place the value as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we configured IPv4, IPv6 configuration, client-side DNS and
    network troubleshooting. First, we worked with IPv4, and we looked at various
    ways with which we would manage IPv4 addressing. Next, we covered IPv4 routing;
    we saw how we would add a default route in addition to adding static routes for
    subnets not directly connected. This was then followed with IPv6 configuration;
    we saw how we would manage our IPv6 infrastructure using various tools available
    via the command line. Following this, we looked at configuring routing for IPv6,
    particularly focusing on default routes and static routes for subnets not directly
    connected. Next, we covered client-side DNS. We looked at ways of configuring
    the DNS servers' IP addressing. We then tested our DNS configuration by browsing
    out to the internet. Finally, we covered network troubleshooting; we covered a
    number of tools available at the command line to assist us in troubleshooting
    potential network connectivity issues.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on security; particularly, host security,
    SSH, and encryption. The next chapter is critical because of the many security
    risks that exist in today's environments. I hope to see you in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which option with the `ifconfig` command displays all interfaces active and
    inactive?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-s`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-d`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-A`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-a`
  prefs: []
  type: TYPE_NORMAL
- en: Which keyword is used with the `ip` route command when creating a gateway of
    last resort?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `default`
  prefs: []
  type: TYPE_NORMAL
- en: B. `0.0.0.0`
  prefs: []
  type: TYPE_NORMAL
- en: C. gateway
  prefs: []
  type: TYPE_NORMAL
- en: D. None of the above
  prefs: []
  type: TYPE_NORMAL
- en: Which protocol does `ping` use to send and receive messages between source and
    destination?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. FTP
  prefs: []
  type: TYPE_NORMAL
- en: B. TFTP
  prefs: []
  type: TYPE_NORMAL
- en: C. ICMP
  prefs: []
  type: TYPE_NORMAL
- en: D. SSH.1.1
  prefs: []
  type: TYPE_NORMAL
- en: Which file holds the `hostname` value for the system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/etc/hosts`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/etc/hostname`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/etc/hostname/hosts`
  prefs: []
  type: TYPE_NORMAL
- en: D. `/var/log/hosts`
  prefs: []
  type: TYPE_NORMAL
- en: Which command performs a trace and outputs the hops along with the `pmtu` value?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `traceroute`
  prefs: []
  type: TYPE_NORMAL
- en: B. `trace`
  prefs: []
  type: TYPE_NORMAL
- en: C. `tracepath`
  prefs: []
  type: TYPE_NORMAL
- en: D. `tracert`
  prefs: []
  type: TYPE_NORMAL
- en: Which command performs a DNS query for a given domain?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `ping`
  prefs: []
  type: TYPE_NORMAL
- en: B. `traceroute`
  prefs: []
  type: TYPE_NORMAL
- en: C. `dnsq`
  prefs: []
  type: TYPE_NORMAL
- en: D. `dig`
  prefs: []
  type: TYPE_NORMAL
- en: Which command adds a default route for IPv6?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `ip -6 route add default via 2001:db8:0:f101::2`
  prefs: []
  type: TYPE_NORMAL
- en: B. `iproute add default via 2001:db8:0:f101::2`
  prefs: []
  type: TYPE_NORMAL
- en: C. `ip-6 route add default via 2001:db8:0:f101::2`
  prefs: []
  type: TYPE_NORMAL
- en: D. `ip -6 add default via 2001:db8:0:f101::2`
  prefs: []
  type: TYPE_NORMAL
- en: Which options with the netstat command displays the IP address and port numbers
    for UDP connections which are open, and program ID, and program name?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-t`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-u`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-udp`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-ulp`
  prefs: []
  type: TYPE_NORMAL
- en: Which command is used for scanning a system in order to expose the services
    and their respective port numbers being used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `traceroute`
  prefs: []
  type: TYPE_NORMAL
- en: B. `dig`
  prefs: []
  type: TYPE_NORMAL
- en: C. `nmap`
  prefs: []
  type: TYPE_NORMAL
- en: D. `ip`
  prefs: []
  type: TYPE_NORMAL
- en: Which command displays registry information for a given domain?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `who`
  prefs: []
  type: TYPE_NORMAL
- en: B. `whois`
  prefs: []
  type: TYPE_NORMAL
- en: C. `whoami`
  prefs: []
  type: TYPE_NORMAL
- en: D. `w`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This site gives useful information about configuring IPv4 and IPv6: [https://superuser.com](https://superuser.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This site gives useful information about configuring client-side DNS: [https://unix.stackexchange.com](https://unix.stackexchange.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This site gives useful information about troubleshooting: [https://www.computernetworkingnotes.com](https://www.computernetworkingnotes.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
