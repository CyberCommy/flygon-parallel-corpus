- en: Modifying Process Execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, various methods to expose processes currently running
    in the shell were exposed. Furthermore, we saw how to pull memory and CPU information,
    and we saw how to terminate a process using the `ps` command in combination with
    the `kill` command. Next, we touched on the `pstree` command. Following this,
    we touched on the `pgrep` command; also known as Process Grep. Following this,
    we touched on the `pkill` command; as its name suggests, it is used to terminate
    a process. After this, we worked with the `top` command. Next, we worked with
    the `service` command. Finally, we worked with the `systemctl` command.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is small in comparison to the previous ones, but its contents are
    of great importance when it comes to managing our resources. First, managing processes
    is further discussed, this time focusing on the importance of a process within
    the context of the process scheduler (sometimes you may hear the term kernel scheduler;
    they mean the same thing). Often, we are faced with challenges with regard to
    resource limitations. This will be addressed in a number of ways. With that in
    mind, we will explore the various guidelines that should be followed when attempting
    to change a process's priority within the confines of a Linux distribution. The
    first section focuses on the `nice` command. This is followed by the `renice`
    command. Finally, the focus will be on foreground processes versus background
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `nice` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `renice` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foreground processes versus background processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nice command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In its simplest terms, the `nice` command is used for manipulating process niceness
    with regard to CPU resource availability. When we say *niceness*, this is referring
    to the attention or priority given to a particular process for the CPU resources.
    We can increase or decrease priority for a given process. This becomes relevant
    whenever the CPU is being bogged down by a number of processes, each fighting
    for its own attention. By changing the niceness for a particular process, we are
    affecting the process scheduling.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the current `nice` value for processes using the `ps` command;
    we would pass the `al` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Some output has been omitted for brevity. Based on the preceding output, the
    `NI` column represents the current niceness for processes. You''ll notice that
    most processes'' niceness value is set to `0`. We can also filter the output of
    the `ps` command; we can use the `grep` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! Based on this, we can see that there are some processes whose
    niceness value is not `0`, by default. Interestingly enough, we can also leverage
    another command to view the current niceness of processes; we can use the `top`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The fourth column, `NI`, represents the niceness for each process. Another key
    column is the third column, `PR`; this represents the actual priority which the
    Linux kernel sees. The `PRI` column is not user configurable. Also, the `rt` under
    the `PRI` column indicates that those processes' priorities are handled in real-time
    scheduling.
  prefs: []
  type: TYPE_NORMAL
- en: We cannot change values under the `PRI` column.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the syntax of the `nice` command by passing the `--help` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Your shell may have its own version of `nice`, which usually supersedes the
    version described here. Please refer to your shell's documentation for details
    about the options it supports.
  prefs: []
  type: TYPE_NORMAL
- en: 'GNU coreutils online help can be found at: [http://www.gnu.org/software/coreutils](http://www.gnu.org/software/coreutils)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full documentation can be found at: [http://www.gnu.org/software/coreutils/nice](http://www.gnu.org/software/coreutils/nice)'
  prefs: []
  type: TYPE_NORMAL
- en: 'or available locally via: info ''(coreutils) nice invocation'''
  prefs: []
  type: TYPE_NORMAL
- en: '`root@ubuntu:/home/philip#`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the preceding syntax, the range that we can set is between `-19(most
    priority) to 20(least priority)`. Let''s run the `nice` command without any options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! The value `0` represents the priority with which the shell was started.
    Keep in mind that a normal user cannot change the niceness of another user''s
    process; only the root user can change the niceness for any user. By default,
    if we run the `nice` command without specifying a niceness value, then the niceness
    will be set to `10`. Let''s verify this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the `NI` value was not changed. This is due
    to the fact that the process had already been started. The `nice` command can''t
    change the niceness of currently running processes. We can work around this by
    stopping the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try to the start the `cron` process using the `nice` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! We can clearly see that the `NI` value has been changed to `10`,
    even though we did not specify a niceness value. If we want to specify a value,
    then we pass it by placing a `-` in front of the number. Let''s use the `cron`
    process once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, you may run into an error similar to this while stopping a process.
    You can use the `systemctl` command or the `service` command, but the process
    will still be running. We can easily fix this by using what we''ve learned in
    the previous chapter; we can call the `kill` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! Now let''s try to start up the `cron` process with a niceness value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'But there is a problem. If we run the `system1` command to check the status,
    we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason why we get this error is because, when we are working with a Linux
    distribution that uses `systemd`, we need to edit the service file in `/lib/systemd/system/`.
    In our case, it would be `/lib/systemd/system/cron.service`. This is the `/lib/systemd/system/cron.service`
    configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `[Service]` section is where we would put `Nice=value`. Here is how we
    would store the niceness for the `cron` process and remove the aching error that
    the `systemctl` is generating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, once we''ve made any changes to a `systemd` service, we will need to run
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome job! Also, you want to place `Nice=` before `ExecStart`, because, if
    you place it after, then it will have no effect on the process. We will now stop
    the existing `cron` process and use the `systemctl` to start `cron`; the errors
    will go away and `systemctl` will be happy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! We can now see that the `cron` process `NI` is set to `15`. This
    is only for system services such as `cron` and so on. Another method is to pass
    the `--adjustment=` option; we would specify a niceness value following the equal
    (`=`) sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, `systemctl` will complain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'But we can easily remedy this using the technique we have just learned; by
    specifying the declaration inside `/lib/systemd/system/cron.service`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Awesome job!
  prefs: []
  type: TYPE_NORMAL
- en: Be very cautious when modifying system processes as seen in these demos.
  prefs: []
  type: TYPE_NORMAL
- en: The renice command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we work with the `nice` command, it''s clear that it can''t change the
    scheduling priority of running processes; as we''ve just seen, we would need to
    stop and then start the process. This is where the `renice` command shines. We
    can leverage the `renice` command to change the niceness while the process is
    running. To see the syntax, we would pass the `--help` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'First off, let''s use the `ps` command to see the niceness of a process and
    then change its niceness:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding output, the `renice` command expects a PID of a process.
    In addition to this, when we specify a `-` followed by a number, it interprets
    it as a negative `-` sign and assigns a negative value. Also, the `systemctl`
    command is not going to complain because it''s not required to stop and start
    the process to apply the changes when using the `renice` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! We can also change the niceness for a specific user; we would pass
    the `-u` option. Let''s change the niceness for all the processes owned by a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Great job! The niceness has been changed for each process that is owned by the
    user we specified.
  prefs: []
  type: TYPE_NORMAL
- en: Foreground processes versus background processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working in the shell, we are in fact working in what is known as the foreground;
    we aren''t able to carry out any other tasks unless we stop the current process.
    There are times when you are going to want to send some processes to the background
    for processing; this will allow you to continue to work in the shell, while, at
    the same time, the process in the background is also running. To verify whether
    there are any processes running in the background, we can use the `jobs` command.
    Let''s try this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding output, we can see that there are no jobs currently running
    in the background. To see how a process could affect you from working in the shell,
    let''s look at the `yes` utility; this can be found in most Linux distributions.
    The `yes` utility will run until we suspend or stop it; when we execute the `yes`
    utility, it will prevent us from executing any commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop this utility, we would use a combination of *Ctrl* + *C*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This will inadvertently stop the `yes` utility. The syntax for the `yes` utility
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yes <STRING>`: If we leave off the string, it will spit out a `y` as shown
    in the preceding code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yes <OPTIONS>`: The available options are version and help'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we rerun the `yes` utility, and, instead of stopping it, we decide we would
    like to suspend it, we would use a combination of *Ctrl* + *Z.* This will, in
    effect, place the `yes` utility in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, when we run the `jobs` command, we will see there is a job listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This has suspended the `yes` utility and placed it in the background, allowing
    us to continue to work at the Command Prompt. Another example to illustrate the
    concept of a foreground process halting the shell, thus preventing us from executing
    any other commands, would be where we started a utility, such as `vim` or any
    GUI program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s pick a GUI to demonstrate; this will drive home the point. We will start
    the `gedit` utility from the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on the preceding output, the shell is preventing us from typing any other
    commands until we either suspend or close the `gedit` utility. Let''s suspend
    the `gedit` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding output, you''ll notice that the `gedit` utility is frozen,
    meaning we''re unable to do anything from within the `gedit` utility. Now let''s
    run the `jobs` command once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Great job! There are now two jobs listed. If we decide that we would like to
    resume working with one of these jobs, we can use yet another powerful command:
    the `fg` command. The syntax for the `fg` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To see this in action, let''s resume the `gedit` utility from its stopped state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome job! Now we''re able to work within the `gedit` utility that was started
    from the Command Prompt. However, there is a problem. When we do *Ctrl* + *Z*,
    the program is stopped. In a real environment, we would want the process that
    we are sending to the background to continue to run. This would speed up our productivity,
    enabling us to carry out simultaneous jobs. Rest assured that this is, in fact,
    possible by way of yet another technique, which we can use whenever we''re executing
    a command in the shell. The `&` is for starting a process and sending it to the
    background. Let''s close both the `gedit` and `yes` utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll use `&` to start the `gedit` utility and send it straight to the
    background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great job! Now we can work in either the `gedit` utility, or we can continue
    to work at the Command Prompt. Also, when we run the `jobs` command, we will see
    the `gedit` utility''s status is `running`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! There is another way to resume the jobs that are stopped in the background
    and instruct them to run in the background. This is made possible by leveraging
    yet another powerful command: the `bg` command. Here is how we would resume the
    `gedit` program, if we had stopped it, and instruct it to resume but run in the
    background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great job! The `bg` command did two things. First, it resumed the `gedit` utility.
    It then placed `&` at the end of the command. As we saw earlier, `&` instructs
    a process to run in the background. If there are multiple jobs, we would specify
    either the job ID or the job name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! We can see that both of the utilities are open and can be used simultaneously
    alongside the Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered a variety of methods for handling processes.
    First, we focused on scheduling processes using the `nice` command. Whenever the
    workload on your CPU is rising, various processes are contending for the CPU's
    resources. The niceness for each process was exposed using various commands, such
    as: `ps` and `top`. Next, we did some demos on how we would go about setting the
    niceness for the processes. This took us to systems that run `systemd`; we saw
    the problem of changing the niceness of a process on a `systemd` system. This
    led to us modifying the configuration file for a process so that `systemd` could
    recognize the niceness when we started the process. After this, we moved on to
    the `renice` command, particularly dealing with processes that are currently running
    and the method to change the niceness of running processes. This was illustrated
    by changing the niceness, not only for a given process, but, also, we were able
    to change the niceness for all processes owned by a user. The `systemd` recognized
    the changes of the running process without us having to modify any particular
    configuration. However, if the process is stopped and started or restarted then
    the niceness which we set would be removed. To work around this and have the niceness
    persisting would mean editing the configuration file for a given process. Finally,
    we worked with processes in the context of foreground verses background. The concept
    of foreground processes affects us from working at the Command Prompt until the
    foreground process is suspended or closed. This greatly reduces productivity when
    we are tasked to carry out a number of operations. The fix is to have the processes
    running in the background, thereby allowing you to effectively carry out functions
    at the Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will shift our attention towards the world of display
    managers. Often, most users are comfortable working within a GUI environment.
    Therefore, the focus will cover the common display managers that are prevalent
    in today's Linux distributions, also, those which are on the current Linux+ exam
    objectives. First, we will touch on the **X Display Manager** (**XDM**). Next,
    the KDE Display Manager will be discussed. This will be followed by the **Gnome
    Display Manager** (**GDM**). Finally, the chapter will cover the **Light Display
    Manager** (**LDM**). This next chapter is vital for your exam preparation, as
    are all of the previous chapters. This will empower you to be able to work with
    the various display managers common in today's Linux environments.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which option with the `ps` command prints the niceness for each process?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. *n*
  prefs: []
  type: TYPE_NORMAL
- en: B. *l*
  prefs: []
  type: TYPE_NORMAL
- en: C. *a*
  prefs: []
  type: TYPE_NORMAL
- en: D. *x*
  prefs: []
  type: TYPE_NORMAL
- en: Which column represents the niceness for each process using the `ps` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `NI`
  prefs: []
  type: TYPE_NORMAL
- en: B. `ni`
  prefs: []
  type: TYPE_NORMAL
- en: C. `N1`
  prefs: []
  type: TYPE_NORMAL
- en: D. `nice`
  prefs: []
  type: TYPE_NORMAL
- en: Which column represents the niceness for each process using the `top` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `ni`
  prefs: []
  type: TYPE_NORMAL
- en: B. `PNI`
  prefs: []
  type: TYPE_NORMAL
- en: C. `pnic`
  prefs: []
  type: TYPE_NORMAL
- en: D. `NI`
  prefs: []
  type: TYPE_NORMAL
- en: Which value is not a valid value to set when using the `nice` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-20`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-19`
  prefs: []
  type: TYPE_NORMAL
- en: C. `20`
  prefs: []
  type: TYPE_NORMAL
- en: D. `19`
  prefs: []
  type: TYPE_NORMAL
- en: Which niceness value has the highest priority?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `-21`
  prefs: []
  type: TYPE_NORMAL
- en: B. `-32`
  prefs: []
  type: TYPE_NORMAL
- en: C. `-19`
  prefs: []
  type: TYPE_NORMAL
- en: D. `-20`
  prefs: []
  type: TYPE_NORMAL
- en: In which directory are the configuration files for processes using `systemd`
    stored?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `/usr/lib/systemd/system`
  prefs: []
  type: TYPE_NORMAL
- en: B. `/lib/systemd/system`
  prefs: []
  type: TYPE_NORMAL
- en: C. `/lib/systemd/system/service`
  prefs: []
  type: TYPE_NORMAL
- en: D. `/lib/systemd/service`
  prefs: []
  type: TYPE_NORMAL
- en: Which command needs to be run after editing a service file using `systemd`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `systemctl daemon-reload`
  prefs: []
  type: TYPE_NORMAL
- en: B. `systemctl --daemon-reload`
  prefs: []
  type: TYPE_NORMAL
- en: C. `systemctl daemon --reload`
  prefs: []
  type: TYPE_NORMAL
- en: D. `systemctl daemonreload`
  prefs: []
  type: TYPE_NORMAL
- en: When using the `renice` command, what is expected after specifying the niceness
    value?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `Process name`
  prefs: []
  type: TYPE_NORMAL
- en: B. `PID`
  prefs: []
  type: TYPE_NORMAL
- en: C. `Process name + PID`
  prefs: []
  type: TYPE_NORMAL
- en: D. None of the above
  prefs: []
  type: TYPE_NORMAL
- en: Which command resumes a process from the background and prevents you from executing
    any other commands until the current process has ended?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. fg
  prefs: []
  type: TYPE_NORMAL
- en: B. bg
  prefs: []
  type: TYPE_NORMAL
- en: C. jobs
  prefs: []
  type: TYPE_NORMAL
- en: D. job
  prefs: []
  type: TYPE_NORMAL
- en: Which command resumes a process from the background, but places it in the background,
    allowing you to execute other commands at the Command Prompt?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. `fg`
  prefs: []
  type: TYPE_NORMAL
- en: B. `jobs`
  prefs: []
  type: TYPE_NORMAL
- en: C. `bg`
  prefs: []
  type: TYPE_NORMAL
- en: D. `CTRL+C`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get more info about managing processes by checking out [https://www.tecmint.com](https://www.tecmint.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This next website gives you a lot of useful tips and best practices for handling
    processes: [https://www.digitalocean.com](https://www.digitalocean.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This last link gives you information in general that relates to various commands
    that work on both CentOS and Ubuntu. You can post your questions there and other
    community members will be able to respond: [https://www.linuxquestions.org](https://www.linuxquestions.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
