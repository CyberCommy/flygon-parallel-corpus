- en: Working with Secure Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned about web-development technologies, data-finding techniques,
    and Python libraries that we can use to access and scrape web content.
  prefs: []
  type: TYPE_NORMAL
- en: Various forms of web-based security measures exist nowadays that protect us
    against unauthenticated usage and unauthorized access to sensitive web content.
    A number of tools and technologies exist that are applied by websites; some target user-based
    actions, while some target a website's contents and their availability.
  prefs: []
  type: TYPE_NORMAL
- en: Secure web (or web-based security-enabled features) is considered to be one
    of the technologies that's implemented by websites and utilized by end users who
    want to use or view a website's contents. We will be covering a few basic concepts
    that deal with such features from a web scraping perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to secure web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML `<form>` processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling user authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with cookies and sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A web browser (Google Chrome or Mozilla Firefox) is required for this chapter.
    We will be using the following Python libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`requests`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyquery`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these libraries don't exist in your current Python setup, refer to [Chapter
    2](b9919ebf-2d5c-4721-aa76-5c1378262473.xhtml), *Python and the Web – Using urllib
    and Requests*, the *Setting things up* section for more information on their installation
    and how to set them up.
  prefs: []
  type: TYPE_NORMAL
- en: The code files for this chapter are available in this book's GitHub repository
    at [https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to secure web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The implementation of web-based security features (or features that are used
    to maintain a secure state of access) to access information is rapidly growing,
    day by day. With ever-growing web-based technologies, websites and web applications
    deploy secure mechanisms that are basic or highly sophisticated.
  prefs: []
  type: TYPE_NORMAL
- en: Secure web-enabled content is often challenging from a crawling and scraping
    perspective. In this section, you will be introduced to a few basic security-based
    concepts. We will explore these concepts, along with their implementation, in
    the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections will talk about a few security-enabled concepts or concepts
    that are vulnerable to security. These concepts can be implemented independently
    and collaboratively in websites using a number of underlying tools or measures.
  prefs: []
  type: TYPE_NORMAL
- en: Form processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is also known as HTML `<form>` processing, form handling, or form submission.
    This method processes and handles data inside an HTML `<form>`.
  prefs: []
  type: TYPE_NORMAL
- en: HTML `<form>` or elements inside a `<form>` tag, such as `<input>`, `<option>`,
    `<button>`, `<textarea>`, and so on, with certain specific attributes, are normally
    used to collect and submit data. Please visit the W3School HTML form ([https://www.w3schools.com/html/html_forms.asp](https://www.w3schools.com/html/html_forms.asp)) for
    practical examples and detailed information on HTML form.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP methods or request methods, such as `GET`, `POST`, `PUT`, and so on, are
    used to access or submit data across web pages. For more information on HTTP,
    please visit [https://www.w3.org/Protocols/](https://www.w3.org/Protocols/).
  prefs: []
  type: TYPE_NORMAL
- en: From a security point of view, HTML `<form>` can contain dynamic and hidden
    or system-generated values that manage validation, provide value to fields, or
    perform security-based implementation during form submission. Forms with fields
    such as `<input type="hidden"...>` might not be visible to users in pages. The
    user must get help from the page source or browser-based developer tools in such
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: A web page with a form might be displaying in certain fields and asking for
    input, and can contain a few more fields on the backend or in the source, which
    can contain user-or system-based information. Such information is collected and
    processed behind the scenes for web-based analysis, marketing, user and system
    identification, managing security, and more.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on form processing, please refer to [Chapter 3](9e1ad029-726f-4ed3-897a-c68bcd61f71e.xhtml),
    *Using LXML, XPath, and CSS Selectors*, *Using web browser developer tools for
    accessing web content* section.
  prefs: []
  type: TYPE_NORMAL
- en: Cookies and sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access cookie and session values that have been set by browsed websites,
    please refer to [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml), *Web
    Scraping Fundamentals*, the *Data finding techniques* section of the *Developer
    tools* section. Now, let's get an idea of what cookies and sessions are.
  prefs: []
  type: TYPE_NORMAL
- en: Cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cookies are data that's generated and stored by websites on your system or computer.
    Data in cookies helps identify web requests from the user to the website. Data
    in cookies is stored in `key:value` pairs. Data that's stored in cookies helps
    websites access that data and transfer certain saved values in the form of a quick
    interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Cookies also allow websites to track user profiles, their web habits, and so
    on, and use such information for indexing, page ads, and marketing activities.
  prefs: []
  type: TYPE_NORMAL
- en: Cookie-based data can last for a session (that is, from the time that a web
    page is loaded until the browser is closed) forming what are known as a session
    cookies, or for days, weeks, or months, which are known as permanent or stored
    cookies. Cookies can also contain expiry values in seconds and are expired or
    deleted from the system once the period of time expressed in this value elapses.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on cookies, please refer to [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml),
    *Web Scraping Fundamentals*, the *Understanding Web Development and Technologies*
    section of the *HTTP* section. You can also visit [https://www.aboutcookies.org/](https://www.aboutcookies.org/) and [http://www.allaboutcookies.org/](http://www.allaboutcookies.org/) for
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: Sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sessions are properties that enforce state-based communication between two systems.
    A session is used to store user information temporarily and is also deleted as
    soon as the user quits the browser or leaves the website.
  prefs: []
  type: TYPE_NORMAL
- en: A session is used for maintaining security activity. A unique identification
    number, also known as a session ID or session key, is generated by the website
    and is used to track their users or security-based features independently. In
    most cases of session availability, it can be traced using cookies too.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User authentication deals with handling and managing user-based identification
    processes. Websites offer user registration through their registration page and
    thereby collect user inputs for required or available fields. A user's details
    are saved in secure places such as the cloud or server-based databases, or any
    other secure system.
  prefs: []
  type: TYPE_NORMAL
- en: Registered users are verified and are permitted to log in and log out from their
    system, and are identified by their username, password, and email address.
  prefs: []
  type: TYPE_NORMAL
- en: Form processing, cookies, session management, and other security-based measures
    can be deployed either individually or collaboratively for this process.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we explored and tackled various scenarios based on
    information availability, accessing web pages, applying various HTTP methods,
    and so on to extract data. The sections in this chapter deal with various measures
    and situations that can be implemented or that might be faced during web scraping.
  prefs: []
  type: TYPE_NORMAL
- en: HTML <form> processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be handling form processing or form submission in order
    to search for an activity from [http://toscrape.com](http://toscrape.com) (ViewState).
    ViewState is an AJAX-based filter form.
  prefs: []
  type: TYPE_NORMAL
- en: 'This particular form submission is performed in multiple steps with the help
    of AJAX ([https://www.w3schools.com/js/js_ajax_intro.asp](https://www.w3schools.com/js/js_ajax_intro.asp)).
    For more information on AJAX, please visit [W3Schools AJAX](https://www.w3schools.com/js/js_ajax_intro.asp):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/03ddba00-4ba4-4ab0-8f5d-62a9bcfa6239.png)'
  prefs: []
  type: TYPE_IMG
- en: http://toscrape.com with various endpoints in the Quotes section
  prefs: []
  type: TYPE_NORMAL
- en: Let's set up the code. The `pyquery` and `requests` libraries need to be imported
    and the required URLs need to be collected so that they can be used. The `processRequests()` function,
    along with positional and named arguments, is used for processing requests to
    the provided `url`, with the HTTP `POST` and `GET` methods based on the `params` argument returning a
    PyQuery object as a response.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also interested in iterating `authorTags` and collecting the `quoteAuthor`
    and `message`, respectively. In a similar way, any information that''s obtained
    from a page can be extracted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the content of the `searchurl` page, as defined
    in the preceding code. Two separate drop-downs exist, each with options for the
    author and their tags, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6bc86d6b-01ca-4b74-baa0-214515abe53c.png)'
  prefs: []
  type: TYPE_IMG
- en: http://quotes.toscrape.com/search.aspx searchurl with author and tag
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s load `searchurl`, as shown in the following code, and select an author
    from the Author drop-down. The `<option>` tag is generated using AJAX for the
    selected `<option>` of the Author:'
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [Chapter 3](9e1ad029-726f-4ed3-897a-c68bcd61f71e.xhtml), *Using
    LXML, XPath, and CSS Selectors*, the *Using web browser developer tools for accessing
    web content* section, and [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml),
    *Web Scraping Fundamentals*, the *Data finding techniques* and *Developer tools*
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `processRequests()` function is called using an HTTP `GET`
    to `searchurl` and will be returning a response as an object of PyQuery. From
    `searchResponse`, let''s collect the necessary form fields. Fields such as `author`,
    `viewstate`, and `tag` are collected, and the values that were obtained for the
    fields on each iteration are shown in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding output, we can see that `viewstate (<input id="__VIEWSTATE"..>)` contains
    unique values on both iterations for `authorTags`.
  prefs: []
  type: TYPE_NORMAL
- en: '`ViewState` is a unique and random value that''s generated by websites to identify
    individual states of the page, which are often found as a hidden `<input>` value.
    This `<form>` value exists in most websites that use `<form>` and built-in ASP
    or ASP.NET technologies. The `ViewState` value is used on the client side, and
    it preserves or retains the value of the `<form>` elements, alongside page identity.
    Use of `ViewState` is one of the techniques related to state management. For more
    information, please visit the article from C#Corner found at [https://www.c-sharpcorner.com/article/Asp-Net-state-management-techniques/](https://www.c-sharpcorner.com/article/Asp-Net-state-management-techniques/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of `ViewState` is compulsory for obtaining the `<option>` tag for
    the selected Author. As we can see in the following code, `params` is created
    with `author`, `tag`, and `__VIEWSTATE`, and is posted or submitted to `filterurl`
    using HTTP `POST` and `customheaders` by obtaining `filterResponse`. The following
    code shows what happens when `filterurl` has been loaded with the author and default
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterating the preceding code will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://quotes.toscrape.com/filter.aspx` with the selected author (`Thomas
    A. Edison`) and tag (`inspirational`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`http://quotes.toscrape.com/filter.aspx` with the selected author (`Albert
    Einstein`) and tag (`success`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have obtained all the filter `<form>`-based parameters for each
    `authorTags`, the final step is to submit these parameters—that is, `params` to
    `filterurl`—using `HTTP POST` and extract the resulting information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, `finalResponse` is a PyQuery object that''s returned by `processRequests()`
    and is parsed to obtain the `quote`*,* `quoteAuthor`*,* and `message`, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9643fb0e-196e-454a-9c83-8b5f876c893c.png)'
  prefs: []
  type: TYPE_IMG
- en: http://quotes.toscrape.com/filter.aspx with results for Author and Tag
  prefs: []
  type: TYPE_NORMAL
- en: 'The output from iteration number one using the preceding code with `Author`
    and `Message` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot for iteration number two:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b0b2458d-0504-46bf-b958-96352d940f17.png)'
  prefs: []
  type: TYPE_IMG
- en: http://quotes.toscrape.com/filter.aspx with results for Author and Tag
  prefs: []
  type: TYPE_NORMAL
- en: 'The output from iteration number two using the preceding code with `Author`
    and `Message` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Form processing with searching and filtering actions, alongside the use of hidden
    fields, is shown in the preceding code. The `ViewState` value is used by the system
    behind the scenes to identify the selected option and filter the tags associated
    with it, resulting in quotes by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The total number of HTTP `POST` parameters for the final form submission is
    four, whereas the page only displays or allows you to interact with two options.
    If any changes are made to a value, such as `viewstate`, or if `viewstate` is
    missing from `params`*,* it will result in empty quotes, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Form submission is not only dependent on the required parameters that are selected
    from visible `<form>` elements in the page—there can also be hidden values and
    dynamically generated state representation that should be processed and handled
    effectively for successful output.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be dealing with form submission and user authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Handling user authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be exploring a task that's used to process basic user
    authentication, which is available from [http://testing-ground.scraping.pro/login](http://testing-ground.scraping.pro/login).
    User authentication is often processed with a unique combination of information,
    such as username, password, email, and so on, to identify the user on the website.
  prefs: []
  type: TYPE_NORMAL
- en: The code in this section deals with logging in and changing the login credentials,
    as well as with obtaining the respective messages from the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in the following screenshot, the HTML `<form>` exists with two
    `<input>` boxes that accept the username and password (that is, the login credentials)
    that are required to login. Login credentials are private and secure information,
    but for this particular testing site, the values are visible, predefined, and
    provided—namely, `Username = "admin"` and `Password = "12345"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/49bb51c9-b821-430e-bca9-d5412494ebb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Login page
  prefs: []
  type: TYPE_NORMAL
- en: 'To process logging in with these credentials on [http://testing-ground.scraping.pro/login](http://testing-ground.scraping.pro/login),
    we need to find the `<form>` attributes—that is, `action` and `method`—that were
    used on the page to process the entered credentials. As we can see, the HTTP `POST`
    method will be applied to perform form submission on [http://testing-ground.scraping.pro/login?mode=login](http://testing-ground.scraping.pro/login?mode=login):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8794ba7-eb6f-4496-98c5-61887b4e1267.png)'
  prefs: []
  type: TYPE_IMG
- en: Inspecting <form> elements
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on and set up the code. The `pyquery` and `requests` libraries
    need to be imported and the required URLs need to be collected so that they can
    be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the following code, the `responseCookies()` function will accept
    response objects that are obtained from `requests.get()` before printing the headers
    and cookies information. Similarly, the `processParams()` function accepts `<form>`-based
    parameters that will be posted and prints the message that''s obtained from the
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s request `logoutUrl` to clean the cookies and sessions, if they
    exist. Alternatively, for a completely new process, we can request `mainUrl` and
    `loginUrl`, respectively, and check the message that was received from `responseCookies()`. Here
    is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding output, cookies is empty for both `mainUrl` and `loginUrl` and
    no other unique header pairs are available except `Set-Cookie`, with a value of `tdsess=deleted;
    expires=Thu, 01-Jan-1970 00:00:01 GMT` from `loginUrl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that `responseA` from the `loginUrl` `<form>` elements attribute name has
    been collected as `username` and `password`, this information will be used to
    create the `paramsCorrect` and `paramsIncorrect` parameter strings, which will
    be posted to `postUrl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A successful form submission with the provided `paramsCorrect` parameter string
    will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding output is extracted from the response of `postUrl`, which in
    this test case is actually a redirected page with a URL of [http://testing-ground.scraping.pro/login?mode=welcome](http://testing-ground.scraping.pro/login?mode=welcome):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1f353c77-6902-4aa9-9a58-ca1eff7a36ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Successful form submission with valid login credentials
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue with form submission, but with invalid credentials. The `paramsIncorrect` phrase
    contains an invalid value for `password`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding output can also be found in the `loginUrl` itself, and no redirection
    takes place this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e971860f-eeac-4803-849b-e51502af1922.png)'
  prefs: []
  type: TYPE_IMG
- en: Access Denied! (processed with wrong credentials)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, user authentication and form submission work in tandem. With
    the use of proper login credentials and by being able to handle the form submission
    process using Python, we can obtain a successful output or deal with the related
    output that's returned from a website.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be performing form submission and user authentication
    by handling cookies that contain a session.
  prefs: []
  type: TYPE_NORMAL
- en: Working with cookies and sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be handling form processing for user authentication
    and managing cookies and sessions for [http://quotes.toscrape.com/login](http://quotes.toscrape.com/login)
    from [http://toscrape.com](http://toscrape.com)
  prefs: []
  type: TYPE_NORMAL
- en: In order to log in, you need to log in with a CSRF token (any username/password
    works).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set up the code. The `pyquery` and `requests` libraries need to be imported
    and the required URLs will be collected and used. The `getCustomHeaders()` function, together
    with the `cookieHeader` argument, is used to set the cookie value for the URL
    request headers. The `responseCookies()` function, together with the `response`
    argument, displays the `headers` and `cookies`, and also returns the `Set-Cookie` value
    from `cookies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For more information on HTTP and HTTP headers, please visit [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml),
    *Web Scraping Fundamentals*, the *Understanding Web Development and Technologies* and
    *HTTP* sections. For more details on cookies, please visit [https://www.aboutcookies.org/](https://www.aboutcookies.org/)
    or [allaboutcookies.org](http://www.allaboutcookies.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s begin by loading `mainUrl` and `loginUrl`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what a login page looks like when using `loginUrl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/88f29d88-64ba-485a-88da-f87935e8d359.png)'
  prefs: []
  type: TYPE_IMG
- en: Login page from http://quotes.toscrape.com/login
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as  `loginUrl` is loaded, we can inspect or use browser-based developer
    tools to find the request headers and confirm whether any cookies exist. We receive
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/28116440-b923-469d-9963-f06bec877377.png)'
  prefs: []
  type: TYPE_IMG
- en: Network panel Doc-based headers tab from browser developer tools
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code accepts cookies from `response` and is used in headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see from the preceding screenshot, Request Headers contains `key=Cookie` with
    a value beginning with `sessio=....`, also known as the session ID. This information
    is found in both `response.headers` and `response.cookies`, and the `responseCookies()` function
    returns the cookie value from `response.headers` before printing the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A session ID is a unique number that a website's server assigns to a specific
    user for a certain duration or for a session. This ID can be stored in certain
    `<form>` fields or cookies, or even appended to a URL query string.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've received the cookie-based session value, we need to maintain
    this value so that we have a successful login procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s collect the `<form>`-based fields and more information on form submission:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4f8f7602-a524-4357-9a0a-79149630efe1.png)'
  prefs: []
  type: TYPE_IMG
- en: Elements panel from Browser Developer Tools with page source
  prefs: []
  type: TYPE_NORMAL
- en: As we can see from the preceding screenshot, `<form>` is using HTTP `POST` to
    submit form fields to `loginUrl`, and there's also a hidden `<input>` field with `csrf_token`,
    along with the fields accepting the login credentials.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery **(**CSRF**) or session riding is a security measure
    that is used to identify each individual request between a user and a website.
    Generally, `CSRF_TOKEN` or a token is used to manage such a mechanism. A token
    is a random string generated by websites when a request to the page is made by
    a user. A token value is required to process any form of HTTP request to the website.
    The token value keeps changing for each successful request. An HTML `<form>` containing
    a token value can be processed with either an updated or deleted token, which
    are not accepted by websites.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, `username` and `password` are open string values, and `test` has
    been used for both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The form fields with the existing value and name are collected and `params`
    is configured, which results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The parameters to be submitted via a form action are built using the `name`
    attribute of the `<form>` element as a key and default, respectively, and is required
    to receive values as their value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `requests.post()` phrase implements a HTTP `POST` request to `loginURL` with the `params` and `customHeaders` that
    have been setup. A `customHeaders` is created with the `setCookie` value that
    we received earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we receive a successful output, along with the redirected URL and
    information regarding the logout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the successful authentication with the information
    verified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/df2cafab-f73f-449c-804f-546c5b7b2580.png)'
  prefs: []
  type: TYPE_IMG
- en: Successful authentication verified with information from http://quotes.toscrape.com/Empty `customHeaders` or `customHeaders` without
    a `key` named `Cookie` will not be successful in the authentication process. Similarly,
    `csrf_token` is also required as the parameter. A posted, updated, or empty `csrf_token`
    will not be successful in the authentication process, even when `customHeaders` is
    provided with the required `key:value` pairs of information.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored some basic measures and techniques that are
    relevant to security concerns, faced often, and are challenging with regards to
    web scraping.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining security measures between a user and a website is quite a challenging
    and hazardous task. Different security concern exist and need to be managed. Various
    new concepts exist on the web that need to be processed effectively and legally
    so that we can perform web scraping activities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be using the Python programming language to interact
    with the web API for data extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AJAX: [http://api.jquery.com/jquery.ajax/](http://api.jquery.com/jquery.ajax/),
    [https://www.w3schools.com/js/js_ajax_intro.asp](https://www.w3schools.com/js/js_ajax_intro.asp)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser developer tools: [https://developers.google.com/web/tools/chrome-devtools/](https://developers.google.com/web/tools/chrome-devtools/),
    [https://developer.mozilla.org/son/docs/Tools](https://developer.mozilla.org/son/docs/Tools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookies: [https://www.aboutcookies.org/](https://www.aboutcookies.org/) , [http://www.allaboutcookies.org/](http://www.allaboutcookies.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSRF: [https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML forms: [https://www.w3schools.com/html/html_forms.asp](https://www.w3schools.com/html/html_forms.asp), [https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms](https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP: [https://www.w3.org/Protocols/](https://www.w3.org/Protocols/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP headers: [http://jkorpela.fi/http.html](http://jkorpela.fi/http.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP session: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Session](https://developer.mozilla.org/en-US/docs/Web/HTTP/Session)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web scraping sandbox: [http://toscrape.com/](http://toscrape.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web scraper testing ground: [http://testing-ground.scraping.pro/](http://testing-ground.scraping.pro/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
