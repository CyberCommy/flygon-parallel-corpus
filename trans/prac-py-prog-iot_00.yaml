- en: Preface
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to *Practical Python Programming for IoT*. The focus of this book is
    centered around Raspberry Pis, electronics, computer networking, the Python programming
    language, and how we combine all these elements to build complex and multifaceted
    IoT projects.
  prefs: []
  type: TYPE_NORMAL
- en: We will be looking at these elements from many angles, comparing and contrasting
    different options, and discussing the *how* and *why* behind the electronic circuits
    we build. By the time you reach the end of this book, you will have a broad toolkit
    comprised of electronic interfacing code examples, networking code examples, and
    electronic circuit examples that you can borrow from, adapt, and reengineer for
    your own needs and projects.
  prefs: []
  type: TYPE_NORMAL
- en: I look forward to joining you on this IoT journey.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for application developers, IoT professionals, and hobbyists interested
    in building IoT applications leveraging the Python programming language. It is
    written with mid-to senior-level software engineers in mind who are experienced
    in desktop, web, and mobile development, but who have little to no exposure to
    electronics, physical computing, and IoT.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](fea8bc67-63b9-4cbc-9c02-82b4b9bbe5e0.xhtml), *Setting Up Your Development
    Environment*, explores the Python ecosystem in the context of the Raspberry Pi
    OS and teaches you how to correctly set up a Python development project for success.
    You will also learn alternative ways of starting Python programs and how to configure
    your Raspberry Pi for GPIO interfacing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml), *Getting Started with
    Python and IoT*, teaches you the basics of electronics and GPIO interfacing with
    Python. You will build and experiment with simple electronic circuits that are
    controlled using Python, and combine this learning to build a simple yet complete
    internet-controllable IoT application from the ground up using the dweet.io platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml), *Networking with RESTful
    APIs and Web Sockets Using Flask*, explores how to build network servers in Python
    using two approaches – RESTful APIs and Web Sockets. You will learn how to use
    these servers in conjunction with Python and an HTML/JavaScript user interface
    to control electronic circuits over a network from a web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml), *Networking with MQTT,
    Python, and the Mosquitto MQTT Broker*, teaches networking approaches using Message
    Queue Telemetry Transport, a popular choice for distributed IoT applications.
    You will learn how to use MQTT in conjunction with Python and an HTML/JavaScript
    user interface to control electronic circuits over a network and from a web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](45ff8333-2eb2-47f1-86d9-31ccecf39de5.xhtml), *Connecting Your Raspberry
    Pi to the Physical World*, explores different Python-based software options and
    techniques used to interface and control electronics using a Raspberry Pi''s GPIO
    pins. You will also build and learn to use an ADS1115 analog-to-digital converter
    module to expand your Raspberry Pi''s native interfacing options, and be introduced
    to **Pulse Width Modulation** (**PWM**), an important electronic and interfacing
    concept that you''ll be using in later chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](2aba4d00-7883-42da-95fa-bcec2da3dd54.xhtml),*Electronics 101 for
    the Software Engineer*, teaches you core electronic concepts and fundamentals.
    You will learn the essential *how* and *why* behind common electronic and interfacing
    circuits and how they are used practically to correctly and safely interface sensors
    and actuators to your Raspberry Pi. You will also learn the differences between
    digital and analog electronics and how each applies to and influences interfacing
    circuit requirements. Many of the fundamentals you learn about in this chapter
    are seen applied practically in subsequent chapters as we work with different
    electronic components and modules.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](36313176-0d8b-4a0e-916a-7d4ffd58305a.xhtml), *Turning Things On
    and Off*, teaches you how to use optocouplers, MOSFET transistors, and relays to
    turn other circuits on and off using your Raspberry Pi and Python. You will also
    learn about circuit loads, how they are measured, and how this influences the
    choice and use of optocouplers, MOSFET transistors, and relays in circuits.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml), *Lights, Indicators,
    and Displaying Information*, teaches you how to use an APA102 LED lighting strip,
    RGB LEDs, OLED displays, and buzzers in conjunction with Python to create visual
    and auditable orientated circuits and applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml), *Measuring Temperature,
    Humidity, and Light Levels*, teaches you how to measure common environmental attributes
    with your Raspberry Pi and Python. You will build a circuit using a DHT11/22 temperature
    and humidity sensor and learn about and use **Light-Dependent-Resistors** (**LDRs**)
    to detect the presence or absence of light. In this chapter, you will also deepen
    your practical understanding and experience of analog electronics, and apply the
    basic principle to build a moisture detection circuit and application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml), *Movement with Servos,
    Motors, and Steppers*, teaches you how to create movement using popular mechanical
    devices together with your Raspberry Pi and Python. You will learn how to control
    a servo using PWM to create angular movement, use an H-bridge IC circuit together
    with a motor to control its speed and direction of rotation. Plus, you will learn
    how to adapt the H-bridge IC circuit for use with a stepper motor for those projects
    where you need precise control over movement.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](2ecda998-eb9f-46cf-be64-29d96c26bc37.xhtml), *Measuring Distance
    and Detecting Movement*, teaches you the principles behind distance measurements
    using an HC-SR04 ultrasonic distance sensor and how to use an HC-SR501 PIR sensor
    to detect movement on a macro scale. You will also learn how to use both a ratiometric
    and switch-type Hall-effect sensor to detect movement and measure relative distance
    on micro scales.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](b2a583d8-ea6d-4e0e-9018-26997fbdda4e.xhtml), *Advanced IoT Programming
    Concepts – Threads, AsyncIO, and Event Loops*, is an advanced programming chapter
    that looks at alternative approaches to structuring complex Python programs. You
    will learn about Python threading, asynchronous I/O, classic event loops, and
    publisher-subscriber patterns, all within the context of electronic interfacing.
    By the end of the chapter, you will have experimented with and understood four
    functionally equivalent applications that are written in four very different ways.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml),*IoT Visualization
    and Automation Platforms*, is a journey into the world of IoT-related online services
    and integration. You will be creating two environmental-monitoring applications
    based on the DHT11/22 temperature and humidity circuit from [Chapter 9](a77d6d94-a71a-4d7e-a66f-7c552af5b051.xhtml),
    *Measuring Temperature, Humidity, and Light Levels*. First, you will leverage
    your MQTT understanding from [Chapter 4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml), *Networking
    with MQTT, Python, and the Mosquitto MQTT Broker,* to create an online dashboard
    at ThingSpeak.com to display and graph both temperature and humidity data. Then,
    you will also apply RESTful API concepts from [Chapter 4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml), *Networking
    with MQTT, Python, and the Mosquitto MQTT Broker,* and build an If-This-Then-That
    (IFTTT.com) workflow Applet that sends you an email whenever the temperature rises
    above or falls below a certain point.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](fe8f7330-0472-437e-ab91-9b920d9edb98.xhtml), *Tying It All Together
    – An IoT Christmas Tree*, pulls together many of the themes and concepts you have
    learned about in earlier chapters with a multifaceted example centered around
    an internet-connected Christmas tree. From an electronics perspective, you will
    revisit the APA102 LED strip from [Chapter 8](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml), *Lights,
    Indicators, and Displaying Information* (this will be the Christmas tree lights),
    and servos from [Chapter 10](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml), *Movement
    with Servos, Motors, and Steppers* (this is used to provide a mechanism to shake
    or rock the tree). From a networking perspective, you will revisit dweet.io from
    [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml), *Getting Started with
    Python and IoT*;RESTful-APIs from [Chapter 3](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml), *Networking
    with RESTful APIs and Web Sockets Using Flask*; and MQTT from [Chapter 4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml), *Networking
    with MQTT, Python, and the Mosquitto MQTT Broker,* and learn how to combine techniques
    to achieve complex integrations that need to bridge different technologies. Finally,
    you will revisit IFTTT from [Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml), *IoT
    Visualization and Automation Platforms*, and create two Applets that let you control
    your tree''s lights and make the tree shake or rock over the internet. These three
    Applets include email control, and voice-activated control using Google Assistant.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following headings provide an overview of the hardware, software, electronics,
    and peripherals you will require to successfully work through and complete the
    exercises found in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware and software**: All of the exercises and code in this book were
    built and tested on the following hardware and software versions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi 4 Model B
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi OS Buster (with desktop and recommended software)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python version 3.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will be my assumption that you will be using an equivalent setup; however,
    it is reasonable to expect that the code examples should work without modification
    on a Raspberry Pi 3 Model B or a different version of Raspbian OS or Raspberry
    Pi OS as long as your Python version is 3.5 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not too sure about your Python version, don't worry. One of our first
    tasks in [Chapter 1](fea8bc67-63b9-4cbc-9c02-82b4b9bbe5e0.xhtml), S*etting Up
    Your Development Environment*, will be understanding Python on your Raspberry
    Pi and working out which versions are available.
  prefs: []
  type: TYPE_NORMAL
- en: '**Electronic Parts and Equipment**: We will be using many electronic parts
    throughout this book. At the start of each chapter, I list the specific parts
    and quantities you will require for the chapter''s examples. In addition to the
    parts listed, an electronic breadboard and a mixture of jumper/dupont cables will
    also be required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For your convenience, a table cataloging all the electronic parts used throughout
    the book, the chapters where they are used, plus the minimum quantities you will
    require follows. If you are new to buying electronic parts, you''ll also find
    tips to help get you started after the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Part Name** | **Minimum Quantity** | **Description / Notes** | **Used in
    Chapter(s)** |'
  prefs: []
  type: TYPE_TB
- en: '| Red LED | 2 * | 5mm red LED. Different-colored LEDs can have different electrical
    characters. Most of our examples in the book will assume a red LED. | 2, 3, 4,
    5, 6, 7, 9, 12, 13 |'
  prefs: []
  type: TYPE_TB
- en: '| 15Ω Resistor | 2 * | Color bands (4-band resistor) will be brown, green,
    black, silver/gold | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| 200Ω Resistor | 2 * | Color bands (4-band resistor) will be red, black brown,
    silver/gold | 2, 3, 4, 5, 6, 8, 9, 12, 13 |'
  prefs: []
  type: TYPE_TB
- en: '| 1kΩ Resistor | 2 * | Color bands (4-band resistor) will be brown, brown,
    red, silver/gold | 6, 7, 9, 8, 11 |'
  prefs: []
  type: TYPE_TB
- en: '| 2kΩ Resistor | 2 * | Color bands (4-band resistor) will be red, black, red,
    silver/gold | 6, 11 |'
  prefs: []
  type: TYPE_TB
- en: '| 10kΩ Resistor | 1 * | Color bands (4-band resistor) will be brown, black,
    orange, silver/gold | 9, 13 |'
  prefs: []
  type: TYPE_TB
- en: '| 51kΩ Resistor | 1 * | Color bands (4-band resistor) will be green, brown,
    orange, silver/gold | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| 100kΩ Resistor | 1 * | Color bands (4-band resistor) will be brown, black,
    yellow, silver/gold | 7, 8, 9 |'
  prefs: []
  type: TYPE_TB
- en: '| Momentary Push-Button Switch | 1 | To source a push-button switch that is
    breadboard friendly, try searching for a *large tactile switch*. | 1, 6, 12 |'
  prefs: []
  type: TYPE_TB
- en: '| 10kΩ *Linear* Potentiometers | 2 | Larger potentiometers that you can adjust
    with your fingers will be easier to work with in the book''s examples than small
    potentiometers that will require a screwdriver to adjust. Make sure you have *linear* potentiometers
    (not logarithmic). | 5, 6, 12 |'
  prefs: []
  type: TYPE_TB
- en: '| 2N7000 MOSFET | 1 * | This is a logic-level compatible MOSFET transistor.
    | 7, 8 |'
  prefs: []
  type: TYPE_TB
- en: '| FQP30N06L Power MOSFET | 1 * | Optional. When purchasing, make sure the part
    number ends with L, indicating that it is a logic-level compatible MOSFET (otherwise,
    it will not reliably work your Raspberry Pi). | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| PC817 Opto-Coupler | 1 * | Also known as an opto-isolator. | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| SDR-5VDC-SL-C Relay | 1 | These relays are very popular and easy to come
    by; however, they are not breadboard friendly. You will need to solder terminals
    or wires to them so you can plug them into your breadboard. | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 1N4001 Diode | 1 * | We will be using a diode in the role of a fly-back suppression
    diode to protect other electrical components from voltage spikes. | 7, 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Size R130  5-volt DC Hobby Motor | 2 | Size R130 is just a suggestion. What
    we need are 5-volt compatible DC motors with a stall current (ideally) less than
    800 mA. While these motors are easy to come by on auction sites, their current
    and operating currents can be poorly documented so it can be a gamble as to what
    you get. [Chapter 7](36313176-0d8b-4a0e-916a-7d4ffd58305a.xhtml), *Turning Things
    On and Off*, will take you through an exercise to measure the operating currents
    of your motors. | 7, 10 |'
  prefs: []
  type: TYPE_TB
- en: '| RGBLED, Common Cathode type | 1 * | This is an LED that is capable of making
    different colors. | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Passive Buzzer | 1 | A *passive* buzzer that will work with 5 volts. | 8
    |'
  prefs: []
  type: TYPE_TB
- en: '| SSD1306 OLED Display | 1 | This is a small monochrome pixel-based display.
    | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| APA102 RGBLED Strip | 1 | This is a strip of addressable APA102 RGBLEDs.
    You will just need the LED strip, not a power supply or a remote control for our
    exercises. Be careful to make sure it is the APA102 LEDs that you are purchasing
    as there are different (and incompatible) types of addressable LEDs available.
    | 8, 14 |'
  prefs: []
  type: TYPE_TB
- en: '| DHT11 or DHT22 Temperature/Humidity Sensor | 1 | The DHT11 and DHT22 are
    interchangeable. The DHT22 is slightly more expensive but offers more accuracy
    and can measure sub-zero temperatures. | 9, 13 |'
  prefs: []
  type: TYPE_TB
- en: '| LDR | 1 * | Light-Dependent-Resistor | 9 |'
  prefs: []
  type: TYPE_TB
- en: '| MG90S Hobby Servo | 1 | This is a suggestion. Any 5-volt hobby servo with
    3 wires (+, GND, Signal) should be suitable. | 10, 14 |'
  prefs: []
  type: TYPE_TB
- en: '| L293D H-Bridge IC | 1 * | Make sure the part number you purchase ends in
    D, meaning the IC includes embedded fly-back suppression diodes. | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 28BYJ-48 Stepper Motor | 1 | Make sure you purchase the 5-volt stepper motor
    variety, with a 1:64 gearing ratio. | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| HC-SR501 PIR Sensor | 1 | A PIR sensor detects movement. It works on heat,
    so it can detect the presence of people and animals. | 11 |'
  prefs: []
  type: TYPE_TB
- en: '| HC-SR04 Ultrasonic Distance Sensor | 1 | An Ultrasonic Distance Sensor estimates
    distances using sound waves. | 11 |'
  prefs: []
  type: TYPE_TB
- en: '| A3144 Hall-Effect Sensor | 1 * | This is a non-latching switch-type Hall-effect
    sensor that turns on in the presence of a magnetic field. | 11 |'
  prefs: []
  type: TYPE_TB
- en: '| AH3503 Hall-Effect Sensor | 1 * | This is a ratiometric-type Hall-effect
    sensor that can detect how close (relatively) it is to a magnetic field. | 11
    |'
  prefs: []
  type: TYPE_TB
- en: '| Magnet | 1 | A small magnet is required for use with the Hall-effect sensors.
    | 11 |'
  prefs: []
  type: TYPE_TB
- en: '| ADS1115 Analog-to-Digital (ADC) Converter Breakout Module | 1 | This module
    will allow us to interface analog components with our Raspberry Pi. | 5, 9, 12
    |'
  prefs: []
  type: TYPE_TB
- en: '| Logic Level Shifter/Converter Breakout Module | 1 | This module will allow
    us to interface 5-volt electrical components with our Raspberry Pi. Search for a Logic
    Level Shifter/Converter Breakout Module and look for a bi-directional (preferred)
    module when 4 or 8 channels. | 6, 8, 14 |'
  prefs: []
  type: TYPE_TB
- en: '| Breadboard | 1 | All our electronic examples will be built on a breadboard.
    I recommend purchasing two full-size breadboards and joining them together – more
    breadboard working areas will make building circuits easier. | 2 - 14 |'
  prefs: []
  type: TYPE_TB
- en: '| Dupont / Jumper Cables | 3 sets * | These cables are used to wire components
    together on your breadboard. I recommend purchasing sets of male-to-male, male-to-female,
    and female-to-female types. | 2 - 14 |'
  prefs: []
  type: TYPE_TB
- en: '| Raspberry Pi GPIO Breadboard Breakout | 1 | This is optional, however, it
    will make it easier to interface your Raspberry Pi GPIO pins with your breadboard.
    | 2 - 14 |'
  prefs: []
  type: TYPE_TB
- en: '| Digital Multimeter | 1 | As a guide, a digital multimeter in the price range
    of $30-50 USD should be more than suitable. Avoid the very-low and cheapest multi-meters.
    | 6, 7 |'
  prefs: []
  type: TYPE_TB
- en: '| External Power Supply | 2 | Some of the circuits in this book will require
    more power than we can expect our Raspberry Pi to provide. As a minimum source,
    a 3.3/5-volt breadboard-compatible power supply capable of outputting 1 amp will
    be suitable. You might also like to research lab power supplies as a more capable
    and general alternative. | 7, 8, 9, 10, 14 |'
  prefs: []
  type: TYPE_TB
- en: '| Soldering Iron and Solder | 1 | There will be cases where you need to solder
    wires and terminals onto components – for example, it is highly likely that you
    will need to solder terminal legs on to the ADS1115 and logic level converter/shifter
    modules that you purchase. You will also need to solder terminals or wires onto
    your SDR-5VDC-SL-C relay so you can plug it into your breadboard. |  |'
  prefs: []
  type: TYPE_TB
- en: '**  Spares recommended. These are components that can be damaged if incorrectly
    connected or powered or can physically break with use (for example, legs breaking
    off).*'
  prefs: []
  type: TYPE_NORMAL
- en: These parts have been selected due to their low price points, and their general
    availability on websites such as eBay.com, Bangood.com, AliExpress.com, and electronics
    retailers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before making your purchases, please consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Minimum Quantity** column is what you will need for the exercises in this
    book, however, it's highly recommended that you purchase spares, especially of
    LEDs, resistors, and MOSFETs as these components are easily damaged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will find that many components will need to be purchased in bulk lots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search around for *Electronic Component Starter Kits* and compare what they
    include against the parts listed in the table. You may be able to purchase many
    of the parts together in a single (and discounted) transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The many available plug-and-play S*ensor Module Starter Kits* that are available
    will, for the most part, not be compatible with the circuit and code exercises
    presented throughout this book. The depth of our electronic and code examples
    means we will need to work with core electrical components. After completing this
    book, however, you will be in a great position to understand how these plug-and-play
    sensor modules are built and work!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT](https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code in Action videos for this book can be viewed at [https://bit.ly/316OvNu](https://bit.ly/316OvNu)
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781838982461_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781838982461_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Let''s check for the availability of GPIO packages using `gpio_pkg_check.py` and
    `pip`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "From your Raspbian desktop, navigate to the Raspberry menu | Preferences | Raspberry
    Pi Configuration."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
