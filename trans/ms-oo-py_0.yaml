- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will introduce you to more advanced features of the Python programming
    language. The focus is on creating the highest quality Python programs possible.
    This often means creating programs that have the highest performance or are the
    most maintainable. This means exploring design alternatives and determining which
    design offers the best performance while still being a good fit with the problem
    that is being solved.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the book will look at a number of alternatives for a given design. Some
    will have better performance. Some will seem simpler or be a better solution for
    the problem domain. It's essential to locate the best algorithms and optimal data
    structures to create the most value with the least computer processing. Time is
    money, and programs that save time will create more value for their users.
  prefs: []
  type: TYPE_NORMAL
- en: Python makes a number of internal features directly available to our application
    programs. This means that our programs can be very tightly integrated with existing
    Python features. We can leverage numerous Python features by ensuring that our
    OO designs integrate well.
  prefs: []
  type: TYPE_NORMAL
- en: We'll often focus on a specific problem and examine several variant solutions
    to the problem. As we look at different algorithms and data structures, we'll
    see different memory and performance alternatives. It's an important OO design
    skill to work through alternate solutions in order to properly optimize the final
    application.
  prefs: []
  type: TYPE_NORMAL
- en: One of the more important themes of this book is that there's no single *best*
    approach to any problem. There are a number of alternative approaches with different
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: On programming *style*, the subject of style generates a surprising amount of
    interest. The astute reader will note that the examples do not meticulously conform
    to PEP-8 in every single particular detail of the name choice or punctuation.
  prefs: []
  type: TYPE_NORMAL
- en: As we move towards achieving mastery over object-oriented Python, we'll spend
    a great deal of time reading Python code from a variety of sources. We'll observe
    wide variability even within the Python Standard Library modules. Rather than
    presenting examples that are all perfectly consistent, we've opted for some inconsistency,
    the lack of consistency will better confirm with code as seen in the various open
    source projects encountered in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll cover three advanced Python topics in a series of chapters that dig into
    the details.
  prefs: []
  type: TYPE_NORMAL
- en: '*Some Preliminaries*, covers some preliminary topics, such as unittest, doctest,
    docstrings, and some special method names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part 1](pt01.html "Part 1. Pythonic Classes via Special Methods"), *Pythonic
    Classes via Special Methods*: This part looks more deeply at object-oriented programming
    techniques and how we can more tightly integrate the class definitions of our
    applications with Python''s built-in features. It consists of nine chapters, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. The __init__() Method"), *The _init_() Method*,
    provides us with a detailed description and implementation of the `_init_()` method.
    We will look at different forms of initialization for simple objects. From this,
    we can look into more complex objects that involve collections and containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Integrating Seamlessly with Python Basic
    Special Methods"), *Integrating Seamlessly with Python – Basic Special Methods*,
    will explain in detail as to how we can expand a simple class definition to add
    special methods. We''ll need to take a look at the default behavior inherited
    from the object so that we can understand what overrides are needed and when they''re
    actually needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Attribute Access, Properties, and Descriptors"),
    *Attribute Access, Properties, and Descriptors*, shows us how the default processing
    works in some detail. We need to decide where and when to override the default
    behavior. We will also explore descriptors and gain a much deeper understanding
    on how Python''s internals work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. The ABCs of Consistent Design"), *The ABCs
    of Consistent Design*, looks at the abstract base classes in the `collections.abc`
    module in general. We''ll look at the general concepts behind the various containers
    and collections that we might want to revise or extend. Similarly, we''ll look
    at the concepts behind the numbers that we might want to implement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Using Callables and Contexts"), *Using Callables
    and Contexts*, looks at several ways to create context managers using the tools
    in `contextlib`. We''ll show you a number of variant designs for callable objects.
    This will show you why a stateful callable object is sometimes more useful than
    a simple function. We''ll also take a look at how to use some of the existing
    Python context managers before we dive in and write our own context manager.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Creating Containers and Collections"), *Creating
    Containers and Collections*, focuses on the basics of container classes. We''ll
    review the variety of special methods that are involved in being a container and
    offering the various features that containers offer. We''ll address extending
    built-in containers to add features. We''ll also look at wrapping built-in containers
    and delegating methods through the wrapper to the underlying container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Creating Numbers"), *Creating Numbers*, covers
    these essential arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, and `**`.
    We''ll also take a look at these comparison operators: `<`, `>`, `<=`, `>=`, `==`,
    and `!=`. We''ll finish by summarizing some of the design considerations that
    go into extending or creating new numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Decorators and Mixins – Cross-cutting Aspects"),
    *Decorators and Mixins – Cross-cutting Aspects*, covers simple function decorators,
    function decorators with arguments, class decorators, and method decorators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part 2](pt02.html "Part 2. Persistence and Serialization"), *Persistence and
    Serialization*: A persistent object has been serialized to a storage medium. Perhaps
    it''s transformed to JSON and written to the filesystem. An ORM layer can store
    the object in a database. This part will take a look at the alternatives to handle
    persistence. This section contains five chapters, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Serializing and Saving – JSON, YAML, Pickle,
    CSV, and XML"), *Serializing and Saving – JSON, YAML, Pickle, CSV, and XML*, covers
    simple persistence using libraries focused on various data representations such
    as JSON, YAML, pickle, XML, and CSV.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Storing and Retrieving Objects via Shelve"),
    *Storing and Retrieving Objects via Shelve*, explains basic database operations
    with Python modules, such as `shelve` (and `dbm`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Storing and Retrieving Objects via SQLite"),
    *Storing and Retrieving Objects via SQLite*, moves to the more complex world of
    SQL and the relational database. Because SQL features don''t match object-oriented
    programming features well, we have an **impedance mismatch** problem. A common
    solution is to use ORM to allow us to persist a large domain of objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html "Chapter 12. Transmitting and Sharing Objects"), *Transmitting
    and Sharing Objects*, takes a look at the HTTP protocol, JSON, YAML, and XML representation
    to transmit an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html "Chapter 13. Configuration Files and Persistence"),
    *Configuration Files and Persistence*, covers various ways in which a Python application
    can work with a configuration file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part 3](pt03.html "Part 3. Testing, Debugging, Deploying, and Maintaining"),
    *Testing, Debugging, Deploying, and Maintaining*: We''ll show you how to gather
    data to support and debug high-performance programs. This will include information
    on creating the best possible documentation in order to reduce the confusion and
    complexity of the support. This section contains the final five chapters, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.html "Chapter 14. The Logging and Warning Modules"), *The
    Logging and Warning Modules*, takes a look at using the `logging` and `warning`
    modules to create audit information, as well as debug. We''ll take a significant
    step beyond using the `print()` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 15](ch15.html "Chapter 15. Designing for Testability"), *Designing
    for Testability*, covers designing for testability and how we use `unittest` and
    `doctest`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 16](ch16.html "Chapter 16. Coping With the Command Line"), *Coping
    with the Command Line*, takes a look at using the `argparse` module to parse options
    and arguments. We''ll take this a step further and use the command design pattern
    to create program components that can be combined and expanded without resorting
    to writing shell scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 17](ch17.html "Chapter 17. The Module and Package Design"), *The Module
    and Package Design*, covers module and package design. This is a higher-level
    set of considerations. We will take a look at related classes in a module and
    related modules in a package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 18](ch18.html "Chapter 18. Quality and Documentation"), *Quality and
    Documentation*, covers how we can document our design to create trust that our
    software is correct and has been properly implemented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to compile and run the examples mentioned in this book, you require
    the following software:'
  prefs: []
  type: TYPE_NORMAL
- en: Python Version 3.2 or higher with the standard suite of libraries. We'll focus
    on Python 3.3, but the differences from 3.2 are minor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll take a look at some additional packages. These include PyYaml, SQLAlchemy,
    and Jinja2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://pyyaml.org](http://pyyaml.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.sqlalchemy.org](http://www.sqlalchemy.org). When building this,
    check the installation guide, [http://docs.sqlalchemy.org/en/rel_0_9/intro.html#installation](http://docs.sqlalchemy.org/en/rel_0_9/intro.html#installation).
    Using the `--without-cextensions` option can simplify installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://jinja.pocoo.org/](http://jinja.pocoo.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, you might want to add Sphinx or Docutils to your environment, as
    we'll cover them as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://sphinx-doc.org](http://sphinx-doc.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docutils.sourceforge.net](http://docutils.sourceforge.net)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is advanced Python. You'll need to be quite familiar with Python 3\. You'll
    also benefit from having fairly large or complex problems to solve.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a skilled programmer with the other languages, you may find this
    book helpful if you want to switch to Python. This book doesn't introduce syntax
    or other foundational concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Python 2 programmers may find this helpful when they switch to Python
    3\. We won't cover any of the conversion utilities (such as from Version 2 to
    3) or any of the coexistence libraries (such as six.) This book is focused on
    new development that has happened entirely in Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text are shown as follows: "We can access other Python modules
    through the use of the `import` statement."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "We use this feature to update the label to a new random value every time we click
    on the **Roll!** button".'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
