- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Concurrency can be notoriously difficult to get right, but fortunately, the
    Python programming language makes working with concurrency tractable and easy.
    This book shows how Python can be used to program high-performance, robust, concurrent
    programs with its unique form of programming.
  prefs: []
  type: TYPE_NORMAL
- en: Designed for any curious developer with an interest in building fast, non-blocking,
    and resource-thrifty systems applications, this book will cover the best practices
    and patterns to help you incorporate concurrency into your systems. Additionally,
    emerging topics in Python concurrent programming will be discussed, including
    the new AsyncIO syntax, the widely accepted view that "locks don't lock anything,"
    the use of atomic message queues, concurrent application architecture, and best
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: We will tackle complex concurrency concepts and models via hands-on and engaging
    code examples. Having read this book, you will have gained a deep understanding
    of the principal components in the Python concurrency ecosystem, as well as a
    practical appreciation of different approaches to a real-life concurrency problem.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're a developer familiar who's and you Python who want to learn to build
    high-performance applications that scale by leveraging single-core, multi-core,
    or distributed concurrency, then this book is for you.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](0159c46a-c66b-4ba3-87b5-81dbeb3bcf02.xhtml), *Advanced Introduction
    to Concurrent and Parallel Programming*, introduces you to the concept of concurrency,
    and demonstrates an instance in which concurrent programming can improve significantly
    the speed of a Python program.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](d36d34b5-2541-4a16-9f87-ace6cec25865.xhtml), *Amdahl''s Law*, takes
    a theoretical approach and discusses the limitations of concurrency in improving
    the speed of applications. We will take a look at what concurrency truly provides
    and how we can best incorporate it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](b2db614b-1859-4a86-91d8-f9383c12f4e9.xhtml), *Working with Threads
    in Python*, introduces the formal definition of threading and covers a different
    approach to implementing threading in a Python program. In this chapter, we will
    also discuss a major element in concurrent programming—the concept of synchronization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](451dc46f-ca5b-4c05-a743-04a826653e11.xhtml), *Using the with Statement
    in Threads*, combines the concept of context management with threading in the
    overall context of concurrent programming in Python. We will be introduced to
    the main idea behind context management and how it is used in various programming
    practices, including threading.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](39ccf044-7fef-4716-acae-a8024f15d67a.xhtml), *Concurrent Web Requests*,
    covers one of the main applications of concurrent programming: web scraping. It
    also covers the concept of web scraping, along with other relevant elements, before
    discussing how threading can be applied to web scraping programs in order to achieve
    significant speedup.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](eed3a259-04e1-4778-809e-570f7e0b20ce.xhtml), *Working with Processes
    in Python*, shows the formal definition of multiprocessing and how Python supports
    it. We will also learn more about the key differences between threading and multiprocessing,
    which are often confused with one another.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](57411004-b747-47de-9337-79f53d675a7d.xhtml), *Reduction Operators
    in Processes*, pairs the concepts of reduction operations and multiprocessing
    together as a concurrent programming practice. This chapter will go over the theoretical
    foundation of reduction operations and how it is relevant to multiprocessing as
    well as programming in general.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](2af134b2-387d-4ecf-afb4-d395d2f9ccd9.xhtml), *Concurrent Image
    Processing*, goes into a specific application of concurrency: image processing.
    The basic ideas behind image processing, in addition to some of the most common
    processing techniques, are discussed. We will, of course, see how concurrency,
    specifically multiprocessing, can speed up the task of image processing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](803de08e-7eb5-410b-811b-316754d2a28f.xhtml), *Introduction to Asynchronous
    Programming*, considers the formal concept of asynchronous programming as one
    of the three major concurrent programming models aside from threading and multiprocessing.
    We will learn how asynchronous programming is fundamentally different from the
    two mentioned, but can still speedup concurrent applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](39d7c83b-35b6-46f2-896c-5b799685c18c.xhtml), *Implementing Asynchronous
    Programming in Python*, goes in depth into the API that Python provides to facilitate
    asynchronous programming. Specifically, we will learn about the `asyncio` module,
    which is the main tool for implementing asynchronous programming in Python, and
    the general structure of an asynchronous application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](38f53fa5-cf84-4e0c-897a-bd42fb74e657.xhtml), *Building Communication
    Channels with asyncio*, combines the knowledge obtained regarding asynchronous
    programming covered in previous chapters with the topic of network communication.
    Specifically, we will look into using the `aiohttp` module as a tool to make asynchronous
    HTTP requests to web servers, as well as the `aiofile` module that implements
    asynchronous file reading/writing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](43dfc569-005f-416d-8492-c0814e403b02.xhtml), *Deadlocks*, introduces
    the first of the problems that are commonly faced in concurrent programming. We
    will learn about the classical dining philosophers problem as an example of how
    deadlocks can cause concurrent programs to stop functioning. This chapter will
    also cover a number of potential approaches to deadlocks as well as relevant concepts,
    such as livelocks and distributed deadlocks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](e8b97a27-3966-4a32-aae6-b8d995f4c662.xhtml), *Starvation*, considers
    another common problem in concurrent applications. The chapter uses the narrative
    of the classical readers-writers problem to explain the concept of starvation
    and its causes. We will, of course, also discuss potential solutions to these
    problems via hands-on examples in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](d87c597d-2130-4847-9ca9-e12021bc7a0c.xhtml), *Race Conditions*,
    addresses arguably the most well-known concurrency problem: race conditions. We
    will also discuss the concept of a critical section, which is an essential element
    in the context of race conditions specifically, and concurrent programming in
    general. The chapter will then cover mutual exclusion as a potential solution
    for this problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](0e30892f-4bb1-4196-93c5-5df1d57428b8.xhtml), *The Global Interpreter
    Lock*, introduces the infamous GIL, which is considered the biggest challenge
    in concurrent programming in Python. We will learn about the reason behind GIL''s
    implementation and the problems that it raises. This chapter concludes with some
    thoughts regarding how Python programmers and developers should think about and
    interact with the GIL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](132200fe-4caa-4848-9533-ce8c839af9af.xhtml), *Designing Lock-Based
    and Mutex-Free Concurrent Data Structures*, analyzes the process of designing
    two common concurrent data structures involving locks as a synchronization mechanism:
    lock-based and mutex-free. Several advanced analyses of the implementation of
    the data structures, as well as the performance thereof, are incorporated into
    the chapter so that readers will develop a critical mindset when it comes to designing
    concurrent applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](0c8ecb2f-a8ac-4196-9d1e-8b729ef5b67c.xhtml), *Memory Models and
    Operations on Atomic Types*, includes theoretical topics that involve the underlying
    structure of the Python language and how programmers can take advantage of that
    in their concurrent applications. The concept of atomic operations is also introduced
    to readers in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18](2198114d-2ca1-464f-93df-a29b05807928.xhtml), *Building a Server
    from Scratch*, walks readers through the process of building a non-blocking server
    on a low level. We will learn about network programming functionalities that the
    socket module in Python provides and how we can use them to implement a functioning
    server. We will also apply the general structure of an asynchronous program discussed
    earlier in the book to convert a blocking server into a non-blocking one.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19](3354e586-8f55-4321-ba85-c734147645e8.xhtml), *Testing, Debugging,
    and Scheduling Concurrent Applications*, covers higher-level uses of concurrent
    programs. The chapter will first cover how concurrency can be applied to the task
    of scheduling Python applications via the APScheduler module. We will then discuss
    the complexities that arise from concurrency in the topics of testing and debugging
    Python programs.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers of this book should know how to execute Python programs in a development
    environment, or simply from a command prompt. They should also be familiar with
    general syntax and practices in Python programming (variables, functions, importing
    packages, and so on). Some basic computer science knowledge of elements such as
    pixels, the execution stack, and bytecode instructions is assumed at various points
    throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: The final section of [Chapter 1](0159c46a-c66b-4ba3-87b5-81dbeb3bcf02.xhtml),
    *Advanced Introduction to Concurrent and Parallel Programming,* covers the process
    of getting your Python environment set up. Chapters in this book might discuss
    the use of external libraries or tools that have to be installed via a package
    manager such as pip and Anaconda, and specific instructions on how to install
    those libraries are included in their corresponding chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Mastering-Concurrency-in-Python](https://github.com/PacktPublishing/Mastering-Concurrency-in-Python). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781789343052_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781789343052_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following link to check out videos of the code being run: [http://bit.ly/2BsvQj6](http://bit.ly/2BsvQj6)'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "The `asyncio` module provides a number of different transport
    classes."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "To download the repository, simply click on the Clone or
    download button in the top-right corner of your window."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
