- en: Using Selenium to Scrape the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned how to use a number of data finding techniques and how
    to access web content by implementing various Python libraries for web scraping.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium is a web application testing framework, which automates the browsing
    action and can be used for both easy and complex web scraping activities. Selenium
    provides a web browser as an interface or automated tool. Dynamic or secure web
    content that uses JavaScript, cookies, scripts, and so on are loaded, tested,
    and even scraped with the help of Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: There is so much to learn about the Selenium framework. In this chapter, we
    will be covering the major concepts of the framework that are relevant to web
    scraping.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Selenium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Selenium for web scraping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A web browser (Google Chrome or Mozilla Firefox) is required for this chapter,
    and we will be using the following Python libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selenium` (Python library)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`re`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these libraries are not present in your current Python setup, then you can
    set them up or install them by referring to the *Setting things up* section in [Chapter
    2](b9919ebf-2d5c-4721-aa76-5c1378262473.xhtml), *Python and the Web – Using urllib
    and Requests*.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the Python libraries and web browsers mentioned, we will be using
    WebDriver for Google Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Code files are available online at [https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter08).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned, Selenium is a web application framework that can be used for
    web scraping activities. It can also be used as a browser automation tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'The automation of tasks or activities related to web applications, such as
    those in the following list, involves those tasks being performed without the
    direct involvement of human beings:'
  prefs: []
  type: TYPE_NORMAL
- en: Browsing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving screenshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filling out HTML `<form>` templates and many more activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selenium provides a web browser as an interface or automated tool. With the
    automation of the browsing action, Selenium can also be used in web scraping.
    Dynamic or secure web services that use JavaScript, cookies, scripts, and so on
    are loaded, tested, and even crawled and scraped with the help of Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium is open source and can be accessed across multiple platforms. Various
    web browsers can be used for testing using libraries that are available for programming
    languages such as Java, and Python. Libraries are used to create scripts that
    interact with Selenium to perform browser-based automation.
  prefs: []
  type: TYPE_NORMAL
- en: Although using Selenium in application testing has many advantages when it comes
    to actions such as crawling and scraping, it also has its disadvantages, such
    as time and memory consumption. Selenium is extendable and effective, but is slow
    in performing its actions, and consumes large amounts of memory space.
  prefs: []
  type: TYPE_NORMAL
- en: For more detailed information on Selenium, please visit [https://www.seleniumhq.org/](https://www.seleniumhq.org/).
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will set up Selenium WebDriver and test the setup
    with a Python library, which can be found at [https://selenium-python.readthedocs.io/](https://selenium-python.readthedocs.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Selenium is a web testing framework, whereas Selenium ([https://pypi.org/project/selenium/](https://pypi.org/project/selenium/)) is
    a Python library that binds Selenium WebDriver or is used to create scripts to
    interact with Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: Application testing is performed to ensure that the requirements are met by
    the application and that bugs and errors are detected to ensure a quality product.
    It can be conducted either manually (with the help of users) or by using automated
    tools (such as Selenium). Testing web-based applications is done prior to the
    launch of the application over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium consists of multiple components or tools that are also known as Selenium
    projects, which makes it a complete framework for web-based application testing.
    We will now look at some of the major components of these Selenium projects.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium WebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium WebDriver is a component of Selenium that is used to automate the browser.
    Automating the browser can be conducted by providing commands with various language
    bindings available for Java, Python, JavaScript, and so on by using third-party
    drivers such as Google Chrome driver, Mozilla Gecko driver, and Opera ([https://github.com/mozilla/geckodriver/](https://github.com/mozilla/geckodriver/)).
    Selenium WebDriver has no external dependency on any other software or servers.
  prefs: []
  type: TYPE_NORMAL
- en: WebDriver is an object-oriented API with updated features that overcomes and
    addresses the limitations of previous Selenium versions and Selenium **Remote
    Control** (**RC**). Please visit the Selenium WebDriver web page ([https://www.seleniumhq.org/projects/webdriver/](https://www.seleniumhq.org/projects/webdriver/))
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium RC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium RC is a server that is programmed in Java. It uses HTTP to accept commands
    for the browser and is used to test complex AJAX-based web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium RC has been officially deprecated following the release of Selenium
    2 (Selenium version 2). However, WebDriver contains the major features of Selenium
    RC. Please visit [https://www.seleniumhq.org/projects/remote-control/](https://www.seleniumhq.org/projects/remote-control/) for
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium Grid is also a server that allows tests to run parallel on multiple
    machines across multiple browsers and operating systems, distributing the system
    load and cutting down performance issues, such as time consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Complex tests were used to process Selenium RC and Selenium Grid together. Since
    the release of version 2.0, the Selenium server now has built-in support for WebDriver,
    Selenium RC, and Selenium Grid. Please visit the Selenium Grid web page ([https://www.seleniumhq.org/projects/grid/](https://www.seleniumhq.org/projects/grid/)) for
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An open source Selenium **integrated development environment** (**IDE**) is
    used to build test cases with Selenium. It's basically a web browser extension
    available with features such as the ability to record and play back web automation
    through a **graphical user** **interface** (**GUI**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few key features of the Selenium IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: Extendable and easy to use for debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resilient tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-browser support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can create scripts that can run commands and support control-flow structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please visit the Selenium IDE web page ([https://www.seleniumhq.org/selenium-ide/](https://www.seleniumhq.org/selenium-ide/)) for
    more information and installation procedures. Please visit the Selenium projects
    web page ([https://www.seleniumhq.org/projects/](https://www.seleniumhq.org/projects/))
    for more information on Selenium components.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what Selenium is used for and some of its major components,
    let's look at how we can install and perform general tests using Selenium WebDriver.
  prefs: []
  type: TYPE_NORMAL
- en: Setting things up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the successful implementation of browser automation and application testing
    using Selenium, WebDriver needs to be set up. Let''s go through the following
    steps to set up WebDriver for Google Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit [https://www.seleniumhq.org/](https://www.seleniumhq.org/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/89dd533f-86a7-4e6c-903a-5c2871c08465.png) SeleniumHQ Browser Automation
    main page'
  prefs: []
  type: TYPE_NORMAL
- en: Click Download (or browse to [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Third Party Drivers, Bindings, and Plugins section, click Google
    Chrome Driver (or browse to [https://sites.google.com/a/chromium.org/chromedriver/](https://sites.google.com/a/chromium.org/chromedriver/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3c2a948b-705e-484b-aa17-09037bc7600b.png) Third -party drivers,
    Selenium'
  prefs: []
  type: TYPE_NORMAL
- en: 'From ChromeDriver - WebDriver for Chrome ([https://sites.google.com/a/chromium.org/chromedriver](https://sites.google.com/a/chromium.org/chromedriver/)),
    download the latest stable release of ChromeDriver, appropriate to the platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1cb5ee93-dd5d-4666-97f0-9d19d5c799ed.png)'
  prefs: []
  type: TYPE_IMG
- en: ChromeDriver listings
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the downloaded `chromedriver*.zip`. An application file named `chromedriver.exe` should
    appear. We can place the `.exe` file on the main folder containing the codes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be using Google Chrome and ChromeDriver throughout the chapter; for
    details about using other browsers, or more information on Selenium, please visit SeleniumHQ.
    For more information on the installation, please refer to [https://selenium-python.readthedocs.io/installation.html](https://selenium-python.readthedocs.io/installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have completed the setup for WebDriver and the Selenium Python
    library, let''s verify this setup through the Python IDE. As shown in the following
    screenshot, `selenium` contains the `webdriver` module, with submodules such as `Chrome`,
    `Android`, `Firefox`, `Ie`, and `Opera`. The current version is `3.14.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3c831b9c-ad14-4038-956d-7b7d7e81cc6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Printing the selenium.webdriver version
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using Selenium with Google Chrome, so let''s explore the contents
    of `Chrome` inside `webdriver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1c169341-d09d-4daf-ba71-52e874b3e558.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploring Chrome from Selenium WebDriver.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, there are a number of functions that will
    be called and used to implement the browser automation. You can also see that
    there are many function names that begin with `find_element*`, similar to the
    traversing and parsing functions that we used and learned about in earlier chapters
    on the scraping activity.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about `selenium.webdriver`.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use and introduce various properties for `webdriver`
    and `webdriver.Chrome`, while looking at some real cases. The following sections
    will illustrate the use of Selenium and explore its major properties.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing browser properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will demonstrate the use of Selenium and Chrome WebDriver
    to load Google Chrome with URLs and access certain browser-based features.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, let''s import `webdriver` from `selenium` and set a path to `chromedriver.exe`—let''s
    call it `chromedriver_path`. The path created will be required to load Google
    Chrome. Depending on the application location, the complete path to `chromedriver.exe` should
    be mentioned, and is required for successful implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `selenium.webdriver` is used to implement various browsers, in this case,
    Google Chrome. The `webdriver.Chrome()` phrase is provided with the path of Chrome WebDriver
    so that `chromedriver_path` can be used for execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The phrase `driver`, which is an object of the `selenium.webdriver.chrome.webdriver.WebDriver` class, is
    created using `webdriver.Chrome()`, which will now provide access to the various
    attributes and properties from `webdriver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`chromedriver.exe` will be instantiated at this instance or upon creation of
    the `driver `object. The Terminal screen and an empty new window of Google Chrome
    will be loaded, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/579126b7-c2b6-4201-8489-75cb356740da.png)'
  prefs: []
  type: TYPE_IMG
- en: The Terminal screen and empty browser page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter any error in executing the code so far, please go through
    the following steps, and then execute the code again:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain the latest ChromeDriver and replace the existing one
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update and verify the `PATH` of `chromedriver_path`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new window from Google Chrome is then provided with a URL using the `get()` function from
    `webdriver`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `get()` phraseaccepts the URL that is to be loaded on the browser. Let''s
    provide [https://www.python.org](https://www.python.org) as an argument to `get()`;
    the browser will start loading the URL, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, a notice is displayed just below
    the address bar with the message **Chrome is being controlled by automated test
    software**. This message also confirms the successful execution of the `selenium.webdriver`
    activity, and it can be provided with further codes to act on or automate the
    page that has been loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/455fd250-2530-46ec-8fba-27ae3ff539ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Chrome browser loaded with https://www.python.org
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon successful loading of the page, we can access and explore its properties
    using `driver`. To illustrate this, let''s extract or print the title from the
    HTML `<title>` tag and print the current URL that is accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the preceding code, the page title is available using `driver.title`,
    and the current page URL is found with `driver.current_url`. The `current_url` phrase
    can be used to verify whether any URL redirection has taken place after loading
    the initial URL. Let''s save a page screenshot with a condition that is verified
    using `search()` from the Python library, `re`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `save_screenshot()` phrase is provided with the filename as an argument
    for the image, and it creates a PNG image. The image will be saved at the current
    code location; the full destination or desired path can also be provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore further, let''s collect the web cookies from [https://www.python.org](https://www.python.org).
    The `get_cookies()` phrase is used to retrieve cookies, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The page source can be obtained using `driver.page_source`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain the page source manually, right-click on the page and click View
    page source, or press *Ctrl* + *U*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The page can be reloaded or refreshed using `driver.refresh()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To refresh the page source manually, right-click on the page and click Reload, or
    press *Ctrl* + *R*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With the features that were accessed using `driver` in the preceding code,
    let''s continue loading, taking screenshots, and accessing cookies from [https://www.google.com](https://www.google.com) using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The action performed with [http://google.com](http://google.com) will take
    place on the same browser window that was used for accessing [http://python.org](http://python.org).
    With this, we can now perform actions using the browser history (that is, we will
    use the Back and Forward buttons that are available in the web browser) and retrieve
    the URL, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, `back()` takes the browser back a page, whereas `forward()` moves
    it a step forward along the browser history. The output received is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Following successful execution of the code, it is recommended that you close
    and quit the driver to free up system resources. We can perform the termination
    actions using the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code contains the following two phrases:'
  prefs: []
  type: TYPE_NORMAL
- en: '`close()` terminates the loaded browser window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quit()` ends the WebDriver application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The complete code we have executed so far in this particular section is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code demonstrates the use of `selenium.webdriver` and its various
    properties. In the next section, we will demonstrate the use of `webdriver` and
    web elements (elements from the web page).
  prefs: []
  type: TYPE_NORMAL
- en: Locating web elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will perform a search on [http://automationpractice.com](http://automationpractice.com) to
    obtain a list of products that match the search query, illustrating the use of
    `selenium.webdriver`. Web elements are elements that are listed in a web page
    or that are found in a page source. We also look at a class called `WebElement`,
    used as `selenium.webdriver.remote.webelement.WebElement`.
  prefs: []
  type: TYPE_NORMAL
- en: The automation practice website ([http://automationpractice.com/](http://automationpractice.com/))
    is a sample e-commerce website from [http://www.seleniumframework.com](http://www.seleniumframework.com) that
    you can use for practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, let''s import `webdriver` from `selenium`, set a path to `chromedriver.exe`,
    create an object of `webdriver`—that is, `driver`, as implemented in the previous
    section, *Accessing browser properties*—andload the URL, [http://automationpractice.com](http://automationpractice.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The new Google Chrome window will be loaded with the URL provided. Find the
    search (input) box just above Cart, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/43ae769c-80e3-431a-807d-2097da75cebd.png)'
  prefs: []
  type: TYPE_IMG
- en: Inspecting elements (search box) from http://automationpractice.com
  prefs: []
  type: TYPE_NORMAL
- en: To continue searching through the script, we need to identify the element with
    the HTML `<input>`. Please refer to the *Using web browser developer tools for
    accessing web content *section in [Chapter 3,](9e1ad029-726f-4ed3-897a-c68bcd61f71e.xhtml) *Using
    LXML, XPath, and CSS Selectors*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the search box can be identified by the attributes shown in the
    preceding screenshot, or even by using the XPath or CSS selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id="search_query_top"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name="search_query"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class="search_query" `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `selenium.webdriver` provides lots of locators (methods that are used to
    locate elements) that can be applied conveniently as applicable to the cases encountered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locators return single, multiple, or lists of WebElement instances, written
    as `selenium.webdriver.remote.webelement.WebElement`*.* The following are a few
    locators, along with a brief description:'
  prefs: []
  type: TYPE_NORMAL
- en: '`find_element_by_id()`: This finds an element by its `id `attribute. This method
    returns a single WebElement*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_element_by_name()`: This finds a single element by its `name` attribute.
    Multiple WebElements can be found or located using `find_elements_by_name()`*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_element_by_tag_name()`: This finds a single element by the name of its
    HTML tag. Multiple WebElements can be located using `find_elements_by_tag_name()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_element_by_class_name()`: This finds a single element by its class attribute.
    Multiple WebElements can be located using `find_elements_by_class_name()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_element_by_link_text()`: This finds a single element by a link identified
    by the link text. Multiple WebElements can be located using `find_elements_by_link_text()`*. *'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_element_by_partial_link_text()`:This finds a single element by a link
    identified by the partial text the element is carrying. Multiple WebElements can
    be located using `find_elements_by_partial_link_text()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_element_by_xpath()`:This finds a single element by providing an XPath
    expression. Multiple WebElements can be located using `find_elements_by_xpath()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_element_by_css_selector()`: This finds a single element by providing
    CSS selectors. Multiple WebElements can be located using`find_elements_by_css_selector()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s find the input box using `find_element_by_id()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, `searchBox` can be located using any convenient
    locators that are provided with their respective arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The WebElement that is obtained can be accessed for the following properties
    and general methods, as well as many more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_attribute()`: This returns the attribute value for the key argument provided,
    such as `value`, `id`, `name`, and `class`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tag_name`: This returns the HTML tag name of a particular WebElement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`: This returns the text of the WebElement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clear()`: This clears the text of HTML form elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`send_keys()`: This is used to fill with text and provide the key effect, such
    as pressing `ENTER`, `BACKSPACE`, and  `DELETE`, available from the `selenium.webdriver.common.keys` module in
    `selenium.webdriver.common` to the HTML form elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`click()`: This performs the clicking action to the WebElement. This is used
    for HTML elements such as Submit Button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following code, we will be using the functions and properties listed
    previously in `searchBox`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s clear the text inside `searchBox` and input the text `Dress` to be searched.
    We also need to submit the button located on the right-hand side of the `searchBox`
    and click it to execute the search using the WebElement method, `click()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The browser will process the search action for the submitted text `Dress` and
    load the results page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the search action is complete, to verify the successful search, we
    will extract information regarding the product numbers and count using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'With the number of items and the count of the products that were found, this
    conveys a successful message to our search process. Now, we can proceed with looking
    for products using XPath, CSS selectors, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code,  `products` obtained is iterated and an individual
    item is added to the Python list `foundProducts`. `product` is an object of WebElement,
    in other words, `selenium.webdriver.remote.webelement.WebElement`*,*  while properties
    are collected using `text` and `get_attribute()`*:*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we explored the various properties and methods from `selenium.webdriver`
    that are used to deal with the browser, use HTML forms, read page content, and
    so on. Please visit [https://selenium-python.readthedocs.io](https://selenium-python.readthedocs.io)
    for more detailed information on Python Selenium and its modules. In the next
    section, we will use most of the methodologies that were used in the current section
    to scrape information from a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Using Selenium for web scraping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium is used to test web applications. It is mostly used to perform browser
    automation using various programming language-based libraries and browser drivers.
    As we saw in a previous section, *Exploring Selenium*, we can navigate and locate
    elements in a page using Selenium and perform crawling and scraping-related activities.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a few examples of scraping contents from web pages using Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – scraping product information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will continue using the search results obtained from `foundProducts` in
    the *Exploring Selenium* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will extract some specific information from each individual product link
    found in `foundProducts`, listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`product_name` *:* Product name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product_price`*:* Listed price'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_url`: URL of product''s main image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_condition`*:* Condition of product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product_description`*:* Short description of product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each individual product link from `foundProducts` is loaded using `driver.get()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Targeted fields or information to be extracted are obtained using XPath, and
    are appended to the `dataSet`*. *Please refer to the *Using web browser developer
    tools for accessing web content *section in [Chapter 3,](https://cdp.packtpub.com/hands_on_web_scraping_with_python/wp-admin/post.php?post=31&action=edit#post_26) *Using
    LXML, XPath, and CSS Selectors*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output from `dataSet` is obtained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, system resources are kept free using `close()` and `quit()`. The complete
    code for this example is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we performed HTML `<form>`- based action and extracted the
    required details from each individual page. Form processing is one of the major
    tasks performed during the testing of a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – scraping book information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will automate the browser to process the category and pagination
    link from the main URL provided. We are interested in extracting details from the Food
    and Drink category across multiple pages from [http://books.toscrape.com/index.html](http://books.toscrape.com/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'An individual page from the category contains listings of products (Books),
    with certain information listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`title`: Title of the book listed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`titleLarge`:Title of the book listed (complete title, found as a value to
    the `title ` attribute)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: Listed book price'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stock`: Stock information relating to the listed book'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: URL of book image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`starRating`: Rating (number of stars found)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: URL of each listed book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A similar example was also shown in [Chapter 3,](https://cdp.packtpub.com/hands_on_web_scraping_with_python/wp-admin/post.php?post=31&action=edit#post_26) *Using
    LXML, XPath and CSS Selectors* in the section named *Web Scraping Using LXML*,
    under the name *Example 2 – Looping with XPath and scraping data from multiple
    pages*. There, we used the Python library `lxml`.
  prefs: []
  type: TYPE_NORMAL
- en: With `selenium.webdriver` imported and the Chrome driver path set up, let's
    start loading [http://books.toscrape.com/index.html](http://books.toscrape.com/index.html).
    As the main page gets loaded, we will see various categories appear, listed one
    below the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'The targeted category contains the text Food and Drink, and can be found using `find_element_by_link_text()` (we
    can use any applicable `find_element...` methods to find the particular category). The
    element found is processed further with `click()`—clicking on the element returned.
    This action will load the particular category URL in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To deal with multiple pages that are found during iteration, `NoSuchElementException`
    from `selenium.common.exceptions` will be imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As we will be using the pagination button next, `NoSuchElementException` will
    be helpful in dealing with the condition if no further next or pages are found.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the following code, the pagination option next is located in the
    page and processed with the `click() `action. This action will load the URL it
    contains to the browser, and the iteration will continue until next is not located
    or found in the page, caught by the `except` block in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete code for this example is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, upon completion of the iteration, `dataSet` will contain the listing
    data for all pages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we explored the methods and properties from `selenium.webdriver`
    and implemented them for web scraping activity.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Selenium and using the Python library for
    Selenium to perform browser automation, the scraping of web content, browser-based
    activities, and HTML `<form>` processing. Selenium can be used to process multiple
    activities, and it's one of the major advantages that Selenium holds over Python-dedicated
    libraries, such as `lxml`, `pyquery`, `bs4`, and `scrapy`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn more about web-scraping techniques using
    regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SeleniumHQ: ** [https://www.seleniumhq.org/](https://www.seleniumhq.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium with Python: **[https://selenium-python.readthedocs.io/](https://selenium-python.readthedocs.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python Selenium:** [http://pypi.python.org/pypi/selenium](http://pypi.python.org/pypi/selenium)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
