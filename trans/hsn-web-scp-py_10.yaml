- en: Data Extraction Using Web-Based APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web-based APIs allow users to interact with information on the web. API deals
    directly with data that's in a formatted pattern easy to use and maintain. Some
    APIs also require user authentication before they can provide data to the user.
    This chapter will cover the use of Python and some web APIs to interact with,
    and extract data from, the available API. Generally, APIs provide data in an exchangeable
    document format, such as JSON, CSV, and XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing web APIs using the Python programming language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing and extracting data via web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A web browser (Google Chrome or Mozilla Firefox) is required for this chapter.
    We will be using the following Python libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`requests`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collections`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these libraries don't exist on your current Python setup, refer to [Chapter
    2](b9919ebf-2d5c-4721-aa76-5c1378262473.xhtml), *Python and the Web – Using urllib
    and Requests*, in the *Setting things up* section to learn how to download them.
  prefs: []
  type: TYPE_NORMAL
- en: The code files for this chapter are available in this book's GitHub repository: [https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter07](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to web APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**A web-based application programming information**, or **web-based API**,
    is an interface provided by a website to return information for the request that''s
    received. A web API (or API) is actually a web service that''s provided by websites
    to users or third-party web applications or automated scripts in order to share
    and exchange information.'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, this is a **user interface** (**UI**) that's processed via a web
    browser for retrieving certain information from requests that have been made to
    a website or web server. Websites with large amount of information of any type
    can provide a web API to their user, which facilitates information sharing.
  prefs: []
  type: TYPE_NORMAL
- en: API in the field of software applications is known for its set of facilities,
    such as methods and libraries, which can be used to further enhance, build, or
    develop applications. This is also known as a developer API.
  prefs: []
  type: TYPE_NORMAL
- en: Web APIs are not dependent on any programming languages. They enable easy access
    to web-based information in a raw format, and usually return a structured response
    in JSON, XML, or CSV format.
  prefs: []
  type: TYPE_NORMAL
- en: They work on the HTTP principle (request and response cycle), but accept only
    sets of a predefined format of requests and parameters to generate a response.
    In terms of security concerns, many APIs also provide authentication tools, such
    as an API key, which is required to make a request to a website.
  prefs: []
  type: TYPE_NORMAL
- en: REST and SOAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: API is a service that's provided by web servers that are based on software architecture
    or principles. **Simple Object Access Protocol **(**SOAP**) and **Representational
    State Transfer** (**REST**)are methods for accessing web services. While REST
    is an architecture, SOAP is a protocol based on web standards. We will be dealing
    with the REST API in upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: REST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: REST ([https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)) is
    a style of software architecture based on a set of defining and addressing network
    principles. REST is a software architecture, not a set of standards. REST uses
    standard HTTP protocol and methods such as `GET`, `POST`, `PUT`, and `DELETE` to
    provide services. It is stateless, multilayered, and also supports caching.
  prefs: []
  type: TYPE_NORMAL
- en: Web APIs are generally classed as RESTful web services; they provide an interface
    to the user and other resources for communication. RESTful web services (REST
    APIs or web APIs) ([https://restfulapi.net/](https://restfulapi.net/)) is the
    service provided by the web for adapting to the REST architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Services that are provided via REST don't need to be adapted to the new standards,
    development, or frameworks. Most of the time, it will be using a GET request,
    along with query strings that have been issued to APIs, searching for their response.
    HTTP status codes ([https://restfulapi.net/http-status-codes/](https://restfulapi.net/http-status-codes/))
    (404, 200, 304) are often tracked to determine the response of an API. Responses
    can also be obtained in various formats, such as JSON, XML, and CSV.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of choosing between REST and SOAP, REST is more easy and efficient
    when it comes to processing compared to SOAP, and is being provided to the public
    by a large number of websites.
  prefs: []
  type: TYPE_NORMAL
- en: SOAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SOAP** ([https://www.w3.org/TR/soap/is](https://www.w3.org/TR/soap/is)) is
    a set of standards specified by W3C and also represents alternative to REST when
    it comes to web services. SOAP uses HTTP and **SMTP** (**Simple Mail Transfer
    Protocol**), and is used to exchange documents over the internet, as well as via
    remote procedures.'
  prefs: []
  type: TYPE_NORMAL
- en: SOAP uses XML as a messaging service and is also known as an XML-based protocol.
    SOAP requests contain XML documents (with an envelope and body) that describes
    the methods and parameters that are sent to a server. The server will execute
    the method that's received, along with parameters, and send an SOAP response back
    to the program initiating the request.
  prefs: []
  type: TYPE_NORMAL
- en: SOAP is highly extensible and includes built-in error handling. It also works
    with other protocols, such as SMTP. SOAP is also independent to platforms and
    programming languages, and is mostly implemented in distributed enterprise environments.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of web APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Day by day, information requirements are growing, along with their availability
    across the web. Information sources, their availability, facilities, and technologies
    to share and exchange have become a global demand. The API is one of the preferred
    data sources and can be used to retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: API is not only a way of communicating with a user via a web browser – you can
    also use systems. APIs allow communication between systems and devices, such as
    mobiles, despite their underlying system or programming languages. Many mobile
    apps generate requests to certain APIs and display related information that has
    been retrieved from responses. APIs are not just a simple service for retrieving
    data; they are used to exchange and process information and even communicate between
    systems across different platforms and services.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a web scraping perspective, responses or data that''s available through
    APIs are preferred over data that''s retrieved using scraping scripts. This is
    due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: An API's returned data is completely specific to the requests being performed,
    along with the filters or parameters that have been applied to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks such as parsing HTML or XML using Python libraries, such as `BeautifulSoup`,
    `pyquery`*,* and `lxml`, isn't always required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The format of the data is structured and easy to handle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data cleaning and processing for final listings will be more easy or might not
    be required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be significant reductions in processing time (compared to coding,
    analyzing the web, and applying XPath and CSS selectors to retrieve data).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are easy to process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are also certain factors to be considered before adapting completely
    to the web API from a scraping point of view, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Not all websites provide users with access to web APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responses from APIs are specific to the set of predefined parameters. This might
    restrict the exact requests based on requirements that can be made, and restrict
    the availability of data to be obtained immediately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responses that are returned are limited to a certain volume, such as the number
    of records returned per request and the maximum number of requests allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although data will be available in a structured format, it can be distributed
    across key-value pairs, which might require some additional merging tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given these points, we can see that the web API is the preferred choice for
    obtaining information from websites.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing web API and data formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be exploring various APIs that are available on the
    web, send requests to them, and receive responses, before explaining how they
    work via the Python programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following sample URL, `https://www.someexampledomain.com`.
    The API it provides comes with parameters, locators, and authentication. By using
    these, we can access the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://api.someexampledomain.com `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https://api.someexampledomain.com/resource?key1=value1&key2=value2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https://api.someexampledomain.com/resource?api_key=ACCESS_KEY&key1=value1&key2=value2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https://api.someexampledomain.com/resource/v1/2019/01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters or collections of key-value pairs are actually sets of predefined
    variables that are provided by the web. Usually, the API provides some sort of
    documentation or basic guidelines regarding its usage, HTTP methods, available
    keys and types, or permitted values that the key can receive, along with other
    information on the features that are supported by the API, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/79440f5c-2a15-4d38-9fdd-7b7ccef19261.png)'
  prefs: []
  type: TYPE_IMG
- en: API details and links from https://sunrise-sunset.org/api
  prefs: []
  type: TYPE_NORMAL
- en: End users and systems can only use the API with the features and functions that
    the provider permits.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following a number of actual API links and example calls that show the
    formats and parameters that are used in URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://api.walmartlabs.com/v1/reviews/33093101?apiKey={apiKey}&lsPublisherId={Your
    LinkShare Publisher Id}&format=json](https://developer.walmartlabs.com/docs/read/Reviews_Api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://api.nasa.gov/neo/rest/v1/feed?start_date=START_DATE&end_date=END_DATE&api_key=API_KEY](https://api.nasa.gov/api.html#NeoWS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://api.sunrise-sunset.org/json?lat=36.7201600&lng=-4.4203400&date=today](https://api.sunrise-sunset.org/json?lat=36.7201600&lng=-4.4203400&date=today)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo](http://api.geonames.org/postalCodeSearchJSON?postalcode=9011&maxRows=10&username=demo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo](http://api.geonames.org/postalCodeSearch?postalcode=9011&maxRows=10&username=demo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey](https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://maps.googleapis.com/maps/api/staticmap?center=Brooklyn+Bridge,New+York,NY&zoom=13&size=600x300&maptype=roadmap
    markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7Clabel:C%7C40.718217,-73.998284&key=YOUR_API_KEY](https://developers.google.com/maps/documentation/maps-static/intro#quick_example)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters such as `key`, `api_key`, `apiKey` and `api-key` are required for
    security and tracking measures and need to be obtained before you process any
    API requests.
  prefs: []
  type: TYPE_NORMAL
- en: The API links and example calls in this section are linked to the resources
    they are listed on. For example,[ https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular) is
    listed on [https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets).
  prefs: []
  type: TYPE_NORMAL
- en: Making requests to the web API using a web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obtaining information about the parameters to be applied through query strings
    and obtaining the API key, if required, is the preliminary step in gaining API
    access. Most of the public or free APIs are quite straightforward and easy to
    manage in comparison to developer APIs that are provided by Google, Twitter, and
    Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: API requests can be made by using a web browser. However, in this section, we
    will try to display some general cases that can be encountered while accessing
    APIs, while also exhibiting some important properties of the RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: Case 1 – accessing a simple API (request and response)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be using the following URL: [https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04](https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s process a request through a simple API in order to obtain the sunrise
    and sunset timings (available in UTC) for Kathmandu, Nepal. Query strings require
    values for `lat` (latitude), `lng` (longitude), and `date` for the chosen location. As
    we can see in the following screenshot, the response that we obtained is in JSON
    format (formatted using a browser extension), and its a successful request was
    verified by using a browser-based developer tool with Request Method and HTTP
    Status Code (`200`, that is, `OK` or `Success`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/54ee6161-e2db-4047-a9e0-a6278f6a6825.png)'
  prefs: []
  type: TYPE_IMG
- en: Response from https://api.sunrise-sunset.org/json?lat=27.717245&lng=85.323959&date=2019-03-04 with
    Status Code
  prefs: []
  type: TYPE_NORMAL
- en: 'The response is returned in a raw format or JSON format, as shown in the following
    code. The JSON response, when obtained normally, is processed using the Python
    `json` library. In the following code, the API request has been processed using
    the `requests` library. `requests` provide various features for dealing with HTTP;
    for example, the HTTP status code can be obtained by using `status_code`. Headers
    are obtained by using `headers`. Here, we are interested in `status_code` and
    `headers`, and, in particular, `Content-Type`, so that we can plan further processing
    and the use of libraries that might be required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, `status_code`is `200` (that is, `OK`) and `Content-Type` is
    of the JSON type. This gives us confirmation that we can use JSON-related libraries
    to move forward. However, in this case, we are using the `json()` function from
    the `requests` library, which reduces our dependence on extra libraries and converts
    the response object into a `dict` object. With the `dict` we received, we can
    access the desired elements by using a `key:value` pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Case 2 – demonstrating status codes and informative responses from the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be using the following URL: [https://api.twitter.com/1.1/search/tweets.json?q=](https://api.twitter.com/1.1/search/tweets.json?q=).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will be processing an API request from Twitter. The URL
    to be requested is [https://api.twitter.com/1.1/search/tweets.json?q=](https://api.twitter.com/1.1/search/tweets.json?q=).
    By using this URL, we can easily identify that the query string, `q`, is empty,
    and that the value that's expected by the Twitter API is not provided. The complete
    URL should have been something along the lines of [https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular](https://api.twitter.com/1.1/search/tweets.json?q=nasa&result_type=popular).
  prefs: []
  type: TYPE_NORMAL
- en: 'The response that was returned was for an incomplete API call, and can be seen
    in the following screenshot, along with the HTTP status code (`400` or `Bad Request`)
    and a message that was returned by the API stating errors with "message" : "Bad
    Authentication data". For more information on the Twitter API''s Search option,
    please refer to [https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets](https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f65a7397-c1e0-49bb-8491-7f0fa1d67053.png)'
  prefs: []
  type: TYPE_IMG
- en: Incomplete request made to Twitter API
  prefs: []
  type: TYPE_NORMAL
- en: The response that was returned by Twitter API is actually information, not an
    error. Such informative responses make the API more scalable and easy to debug
    when they're used by other resources. It's also an appreciated characteristic
    of RESTful web services. This kind of information can be easily overcome by deploying
    API parameters and other requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will make a request to Twitter with an empty query string
    and identify the responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code uses the `json` Python library to load the decoded `jsonResult` that
    was obtained by using the `loads()` function. We can also use `json()` from `requests`,
    as we did in case 1\. `jsonFinal` is now a Python dictionary object and can be
    explored so that we can find its `''key:value''`. The final output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Case 3 – demonstrating RESTful API cache functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be using the following URL: [https://api.github.com/](https://api.github.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHUb ([https://github.com/](https://github.com/)) is a place for developers
    and their code repositories. The GitHub API is quite famous among developers,
    all of which come from various programming backgrounds. As we can see in the following
    screenshot, the response is obtained in JSON. The request was a success since
    the HTTP status code that was returned was `200`, that is, `OK` or `Success`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0d2c1add-f32e-4612-85cb-40bced919ec5.png)'
  prefs: []
  type: TYPE_IMG
- en: Response from https://api.github.com with HTTP Status Code 200
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we made a basic call to [https://api.github.com](https://api.github.com).
    The content that was returned contains links for the API, along with some parameters
    to be supplied for specific calls, such as `{/gist_id}`, `{/target}`, and `{query}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s send a request to the API again, but this time without any changes or
    updates in the parameter values. The content that we will receive will be similar
    to the previous response, but there will be a difference in the HTTP `Status Code`;
    that is, we will get `304 Not Modified` in comparison to 200 `OK`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0d428fad-bd13-4bcf-8561-05a4dd29ed89.png)'
  prefs: []
  type: TYPE_IMG
- en: HTTP Status code 304 for https://api.github.com
  prefs: []
  type: TYPE_NORMAL
- en: 'This HTTP status code (`304` or `Not Modified`) demonstrates REST''s caching
    functionality. Since the response doesn''t have any updates or updated content,
    the client-side caching functionality comes into play. This helps with processing
    time, as well as bandwidth time and usage. The cache is one of the important properties
    of RESTful web services. The following is the Python code revealing the cache
    property of the RESTful API, which was obtained by passing external headers that
    were supplied to the `headers` parameter while making a request with `requests.get()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`requests` is used to call `url` twice in the code. We can also see that the
    second request has been supplied with `etag` for header information, that is, `If-None-Match`.
    This particular header checks for the response header that was obtained using
    the `ETag` key as an HTTP Response Header. `ETag` is used for tracking purposes
    and normally identifies the resources that exist. This exhibits the cache ability.
    For more information on `ETag`, please refer to [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag).'
  prefs: []
  type: TYPE_NORMAL
- en: '`ETag` is collected from `results.headers` and forwarded with second request
    that was made by obtaining HTTP `Status Code: 304`. The following code shows the
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we have learned about various APIs, accessing them via the
    use of features, and demonstrated a number of important concepts that are relevant
    to web scraping methods. In the next section, we will be scraping data with the
    use of APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Web scraping using APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be requesting APIs and collecting the required data
    through them. Technically, data that's obtained through an API isn't similar to
    performing a scraping activity since we can't only extract data that's required
    from the API and process it further.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – searching and collecting university names and URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will be using an API provided by HIPO ([https://hipolabs.com/](https://hipolabs.com/))
    to search for universities: [http://universities.hipolabs.com/search?name=Wales](http://universities.hipolabs.com/search?name=Wales).
  prefs: []
  type: TYPE_NORMAL
- en: 'This API uses a query parameter called `name`, which will look for a university
    name. We will also provide an additional parameter, `country`, with country names
    such as United States, and United Kingdom. This API can be requested from the
    following URLs, while more information can be found at [https://github.com/hipo/university-domains-list](https://github.com/hipo/university-domains-list):'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://universities.hipolabs.com](http://universities.hipolabs.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://universities.hipolabs.com/search?name=Wales](http://universities.hipolabs.com/search?name=Wales)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://universities.hipolabs.com/search?name=Medicine&country=United Kingdom](http://universities.hipolabs.com/search?name=Medicine&country=United%20Kingdom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s import the required libraries and use the `readUrl()` function to request
    the API and return the JSON response, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With the JSON response returned, the required values can be retrieved with
    the keys and index that we have found, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d7a222c-075d-4d78-9049-aa13a01f34cc.png)'
  prefs: []
  type: TYPE_IMG
- en: JSON (formatted) obtained from the API
  prefs: []
  type: TYPE_NORMAL
- en: '`name` and `url` are traversed and appended to `dataSet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The final output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Example 2 – scraping information from GitHub events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will be collecting information regarding `type` (type of
    event), `created_at` (date of event created), `id` (event identification code),
    and `repo` (repository name) across pages. We will be using the following URL: [https://api.github.com/events](https://api.github.com/events).
  prefs: []
  type: TYPE_NORMAL
- en: GitHub `Events` lists public activities that have been performed within the
    past 90 days. These events are provided in pages, with 30 items per page, and
    a maximum of 300 being shown. Various sections exist inside events, all of which
    reveal the description about the `actor`, `repo`, `org`, `created_at`, `type`,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: For more details, please refer to the following link: [https://developer.github.com/v3/activity/events/](https://developer.github.com/v3/activity/events/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code we will be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Counter` class from the `collections` Python module is used to obtain
    the individual count of elements from `eventTypes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: APIs provide several benefits, all of which we have covered in this chapter.
    RESTful web services are growing in demand and will contribute to data requests
    and responses in the future more than ever before. Structured, easy access, parameter-based
    filters make APIs more convenient to use, and are excellent at saving time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be learning about Selenium and how to use it to
    scrape data from the web.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fielding, Roy Thomas. *Architectural Styles and the Design of Network-based
    Software Architectures*. Doctoral dissertation, University of California, Irvine,
    2000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST: [https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOAP: [https://www.w3.org/TR/soap/](https://www.w3.org/TR/soap/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple SOAP client: [https://www.ibm.com/developerworks/xml/library/x-soapcl/index.html](https://www.ibm.com/developerworks/xml/library/x-soapcl/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful API HTTP Status Codes: [https://restfulapi.net/http-status-codes/](https://restfulapi.net/http-status-codes/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '304 Not Modified: What It Is and How to Fix It: [https://airbrake.io/blog/http-errors/304-not-modified](https://airbrake.io/blog/http-errors/304-not-modified)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ETag: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of Numeric Data: [https://www.stat.berkeley.edu/~spector/extension/python/notes/node22.html](https://www.stat.berkeley.edu/~spector/extension/python/notes/node22.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
