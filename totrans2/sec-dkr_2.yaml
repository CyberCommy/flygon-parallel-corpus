- en: Chapter 2. Securing Docker Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be taking a look at securing some Docker components
    using things such as image signing tools. There are tools that will help secure
    the environments where we are storing our images, whether they are signed or not.
    We will also look at using tools that come with commercial level support. Some
    of the tools (image signing and commercial level support tools) we will be looking
    at are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Content Trust**: Software that can be used to sign your images. We
    will look at all the components and go through an example of signing an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Subscription**: Subscription is an all inclusive package that includes
    a location to store your images, and Docker Engine to run your containers, all
    while providing commercial level support for all those pieces, plus for the applications
    and their life cycle that you plan to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Trusted Registry** (**DTR**): Trusted Registry gives you a secure
    location to store and manage your images either on premises or in the cloud. It
    also has a lot of integration into your current infrastructure as well. We will
    take a look at all the pieces available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Content Trust
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Content Trust is a means by which you can securely sign your Docker images
    that you have created to ensure that they are from who they say they are from,
    that being you! In this section, we will take a look at the components of **Notary**
    as well as an example of signing images. Lastly, we will take a peek at the latest
    means of using Notary with regards to hardware signing capabilities that are now
    available. It is a very exciting topic, so let's dive in head first!
  prefs: []
  type: TYPE_NORMAL
- en: Docker Content Trust components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand how Docker Content Trust works it is beneficial to be familiar
    with all the components that make up its ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first part of that ecosystem is **The Update Framework** (**TUF**) piece.
    TUF, as we will refer to it from now on, is the framework that Notary is built
    upon. TUF solves the problem with software update systems in that they can often
    be hard to manage. It enables users to ensure that all applications are secure
    and can survive any key compromises. However, if an application is insecure by
    default, it won''t help to secure that application until it has been brought up
    to a secure compliance. It also enables trusted updates over untrusted sources
    and much more. To learn more about TUF, please visit the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://theupdateframework.com/](http://theupdateframework.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next piece of the Content Trust ecosystem is that of Notary. Notary is
    the key underlying piece that does the actual signing using your keys. Notary
    is open source software, and can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/docker/notary](https://github.com/docker/notary)'
  prefs: []
  type: TYPE_NORMAL
- en: This has been produced by those at Docker for the use of publishing and verifying
    content. Notary consists of a server piece as well as a client piece. The client
    piece resides on your local machine and handles the storing of the keys locally
    as well as the communication back with the Notary server to match up timestamps
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, there are three steps to the Notary server.
  prefs: []
  type: TYPE_NORMAL
- en: Compile the server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since the steps may change in the future, the best location for that information
    would be on the GitHub page for Docker Notary. For more information about compiling
    and setting up the server side of Notary, please visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Content Trust utilizes two distinct keys. The first is that of a tagging
    key. The tagging key is generated for every new repository that you publish. These
    are keys that can be shared with others and exported to those who need the ability
    to sign content on behalf of the registry. The other key, the offline key, is
    the important key. This is the key that you want to lock away in a vault and never
    share with anyone*…ever*! Like the name implies, this key should be kept offline
    and not stored on your machine or anything on a network or cloud storage. The
    only times you need the offline key are if you are rotating it out for a new one
    or if you are creating a new repository.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does all this mean and how does it truly benefit you? This helps in
    protecting against three key, no pun intended, scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Protects against image forgery, for instance if someone decides to pretend one
    of your images is from you. Without that person being able to sign that image
    with the repository specific key, remember the one you are to keep *offline*!,
    they won't be able to pass it off as actually coming from you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protects against replay attacks; replay attacks are ones in which a malicious
    user tries to pass off an older version of an application, which has been compromised,
    as the latest legitimate version. Due to the way timestamps are utilized with
    Docker Content Trust, this will ultimately fail and keep you and your users safe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protects against key compromise. If a key is compromised, you can utilize that
    offline key to do a key rotation. That key rotation can only be done by the one
    with the offline key. In this scenario, you will need to create a new key and
    sign it with your offline key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The major take away from all of this is that the offline key is meant to be
    kept offline. Never store it on your cloud storage, on GitHub, or even a system
    that is always connected to the Internet such as that of your local machine. It
    would be best practice to store it on a thumb drive that is encrypted and keep
    that thumb drive stored in a a secure location.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Docker Content Trust, please visit the following blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://blog.docker.com/2015/08/content-trust-docker-1-8/](http://blog.docker.com/2015/08/content-trust-docker-1-8/)'
  prefs: []
  type: TYPE_NORMAL
- en: Signing images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have covered all the components of Docker Content Trust, let''s
    take a look at how we can sign an image and what all steps are involved. These
    instructions are just for development purposes. If you are going to want to run
    a Notary server in production, you will want to use your own database and compile
    Notary yourself using the instructions at their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)'
  prefs: []
  type: TYPE_NORMAL
- en: This will allow you to use your own keys for your situation to your own backend
    registry. If you are using the Docker Hub, it is very simple to use Docker Content
    Trust.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The most important piece is that you need to put a tag on all images you push,
    which we see in the next command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The most important line from the code above is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This gives you the SHA hash that is used to verify the image is what it says
    it is and not created by someone else, as well as its size. This will be used
    later when someone goes to run that `image/container`.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to do a `docker pull` from a machine that doesn't have this image,
    you can see it has been signed with that hash.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Again, we see the SHA value being presented when we do the `pull` command.
  prefs: []
  type: TYPE_NORMAL
- en: So, what this means is when you go to run this container, it won't run locally
    without first comparing the local hash to that on the registry server to ensure
    it hasn't changed. If they match, it will run, if they don't match, it won't run
    and will give you an error message about the hashes not matching.
  prefs: []
  type: TYPE_NORMAL
- en: With the Docker Hub you aren't essentially signing images with your own key,
    unless you manipulate the keys that are in your `~/.docker/trust/trusted-certificates/`
    directory. Remember that, by default, when you install Docker you are given a
    set of certificates that you can use.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware signing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have looked at being able to sign images, which other security measure
    have been put in place to help make that process even more secure? Enter YubiKeys!
    YubiKeys is a form of two factor authentication that you can utilize. The way
    YubiKey works is that it has the root key on it, built into the hardware. You
    enable Docker Content Trust, then push your image. Upon using your image, Docker
    notes that you have enabled Content Trust and asks you to touch the YubiKey, yes,
    physically touch it. This is to ensure that you are a person and not a robot or
    just a script. You then need to provide a passphase to use and then, once again,
    touch the YubiKey. Once you have done this, you won't need the YubiKey anymore,
    but you will need that passphrase that you assigned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: My description of this really doesn't do it justice. At DockerCon Europe 2015
    ([http://europe-2015.dockercon.com](http://europe-2015.dockercon.com)), there
    was a great play-by-play of this in operation between two Docker employees, Aanand
    Prasad and Diogo Mónica.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the video, please visit the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/fLfFFtOHRZQ?t=1h21m33s](https://youtu.be/fLfFFtOHRZQ?t=1h21m33s)'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Subscription
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker Subscription is a service for your distributed applications that will
    help you support those applications as well as deploy them. The Docker Subscription
    package includes two critical software pieces and a support piece:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Registry** — where you store and manage your images (locally hosted
    or hosted in the cloud)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Docker** **Engine** — to run those images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker** **Universal Control Plane** (**UCP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commercial** **support** — pick up the phone or shoot off an email for some
    assistance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a developer, sometimes the operations side of things are either a
    little difficult to get set up and manage or they require some training to get
    going. With Docker Subscription you can off load some of those worries by utilizing
    the expertise that is out there with commercial level support. With this support
    you will get responsive turn around on your issues. You will receive any hot fixes
    that are available or have been made available to patch your solution. Assistance
    with future upgrades is also part of the added benefit of choosing the Docker
    Subscription plan. You will get assistance with upgrading your environments to
    the latest and most secure Docker environments.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing is broken down based on where you want to run your environment whether
    it is on a server of your choosing or if it's in a cloud environment. It is also
    based upon how many Docker Trusted Registries and/or how many commercially supported
    Docker Engines you wish to have as well. All of these solutions provide you with
    integration into your existing **LDAP** or **Active Directory** environments.
    With this added benefit, you can use items such as group policies to manage access
    to such resources. The last thing that you will have to decide is how quick a
    response time you want from the support end. All of those will result in the price
    you pay for the subscription service. No matter what you do pay though the money
    spent will be well worth it, not only in respect of the peace of mind you will
    get but the knowledge you will gain is priceless.
  prefs: []
  type: TYPE_NORMAL
- en: You can also change your plans on a monthly or annual basis as well as upgrade,
    in increments of ten, your Docker Engine instances. You can also upgrade in packs
    of ten the number of **Docker** **Hub Enterprise** instances. Switching between
    an on premises server to the cloud, or vice-versa, is also possible.
  prefs: []
  type: TYPE_NORMAL
- en: To break some things down so as to not be confused, the Docker Engine is the
    core of the Docker ecosystem. It is the command line tools that you use to run,
    build, and manage your containers or images. The Docker Hub Enterprise is the
    location where you store and manage your images. These images can be public or
    made private. We will learn more about DTR in the next section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Docker Subscription, please visit the link below.
    You can sign up for a free 30 day trial, view subscription plans, and contact
    sales for additional assistance or questions. The subscription plans are flexible
    enough to conform to your operating environment whether it is something you want
    support for 24/7 or maybe just half of that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.docker.com/docker-subscription](https://www.docker.com/docker-subscription)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also view the breakdown for commercial support here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.docker.com/support](https://www.docker.com/support)'
  prefs: []
  type: TYPE_NORMAL
- en: Bringing this all back to the main topic of the book, Securing Docker, this
    is by far the most secure you can get with your Docker environment that you will
    be using to manage your images and containers, as well as managing the location
    they are all stored and run from. A little extra help never hurts and with this
    option, a little help will defiantly go a long way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest part to be added is the Docker Universal Control Plane. The Docker
    UCP provides a solution for management of applications and infrastructure that
    is Dockerized regardless of where they might be running. This could be running
    on premises or in the cloud. You can find out more information about Docker UCP
    at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.docker.com/products/docker-universal-control-plane](https://www.docker.com/products/docker-universal-control-plane)'
  prefs: []
  type: TYPE_NORMAL
- en: You can also get a demo of the product using the above URL. Docker UCP is scalable,
    easy to set up, and you can manage users and access control through integrations
    into your existing LDAP or Active Directory environments.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Trusted Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DTR is a solution that provides a secure location where you can store and
    manage your Docker images either on premises or in the cloud. It also provides
    some monitoring to let you get insight into usage so you can tell what kind of
    load is being passed to it. DTR, unlike Docker Registry, is not free and does
    come with a pricing model. As we saw earlier with Docker Subscription, the pricing
    plan for DTR is the same. Don't fret as we will go over Docker Registry in the
    next section of the book so you can understand it as well and have all the options
    available to you for image storage.
  prefs: []
  type: TYPE_NORMAL
- en: The reason we separate it out into its own section is that there are a lot of
    moving pieces involved and it's critical to understand how they all function not
    only as a whole to the Docker Subscription piece, but as it stands by itself,
    the DTR piece where all your images are being maintained and stored.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways you can install DTR, or rather there are two locations where
    you can install DTR. The first is that you can deploy it in house on a server
    you manage. The other is deploying it to a cloud provider environment like that
    of **Digital Ocean**, **Amazon Web Services** (**AWS**), or **Microsoft Azure**.
  prefs: []
  type: TYPE_NORMAL
- en: The first part you will need is a license for the DTR. Currently, they do offer
    a trial license that you can use, which I highly recommend you do. This will allow
    you to evaluate the software on your selected environment without having to fully
    commit to that environment. If there is something that you find doesn't work in
    a particular environment or you feel another location may suit you better, you
    can then switch without having to be tied to a particular location or having to
    move your existing environment around to a different provider or location. If
    you do choose to use AWS, they do have a pre-baked **Amazon Machine Image** (**AMI**)
    that you can utilize to get your Trusted Registry set up much quicker. This avoids
    having to do it all manually by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Before you can install the Trusted Registry, you first need to have Docker Engine
    installed. If you don't already have it installed, please see the documentation
    located with the link below for more information on doing so.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/docker-trusted-registry/install/install-csengine/](https://docs.docker.com/docker-trusted-registry/install/install-csengine/)'
  prefs: []
  type: TYPE_NORMAL
- en: You will notice there is a difference in installing the normal Docker Engine
    from the **Docker CS Engine**. The Docker CS Engine stands for commercially supported
    Docker Engine. Be sure to check the documentation as the list of recommended or
    supported Linux versions are shorter than the regular list for Docker Engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are installing using the AMI, then please follow the instructions here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/docker-trusted-registry/install/dtr-ami-byol-launch/](https://docs.docker.com/docker-trusted-registry/install/dtr-ami-byol-launch/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are installing on Microsoft Azure, then please follow the instructions
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/docker-trusted-registry/install/dtr-vhd-azure/](https://docs.docker.com/docker-trusted-registry/install/dtr-vhd-azure/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you do have Docker Engine installed, it''s time to install the DTR piece.
    If you are reading to this point we will be assuming that you aren''t installing
    to AWS or Microsoft Azure. If you are using either of those two methods, please
    see the links from above. The installation is very straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: You may have to remove the `sudo` options from the above command when
    running on Mac OS.'
  prefs: []
  type: TYPE_NORMAL
- en: Once this has been run, you can navigate in your browser to the IP address of
    your Docker host. You will then be setting the domain name for your Trusted Registry
    as well applying the license. The web portal will guide you through the rest of
    the setup process.
  prefs: []
  type: TYPE_NORMAL
- en: In accessing the portal you can set up authentication through your existing
    LDAP or Active Directory environments as well, but this can be done at anytime.
  prefs: []
  type: TYPE_NORMAL
- en: Once that is done, it is time for *Securing Docker Trusted Registry*, which
    we will cover in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Securing Docker Trusted Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our Trusted Registry set up, we need to make it secure. Before
    making it secure you will need to create an administrator account to be able to
    perform actions. Once you have your Trusted Registry up and running, and are logged
    into it, you will be able to see six areas under **Settings**. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General** settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security** settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage** settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auth** settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Updates**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **General** settings are mainly focused around settings such as **HTTP port**
    or **HTTPS port**, the **Domain name** to be used for your Trusted Registry, and
    proxy settings, if applicable.
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing Docker Trusted Registry](../images/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next section, **Security** settings, is probably one of the most important
    ones. Within this **Dashboard** pane you are able to utilize your **SSL Certificate**
    and **SSL Private Key**. These are what make the communication between your Docker
    clients and the Trusted Registry secure. Now, there are a few options for those
    certificates. You can use the self signed ones that are created when installing
    the Trusted Registry. You can also do self signed ones of your own, using a command
    line tool such as **OpenSSL**. If you are in an enterprise organization, they
    more than likely have a location where you can request certificates such as the
    one that can be used with the registry. You will need to make sure that the certificates
    on your Trusted Registry are the same ones being used on your clients to ensure
    secure communications when doing `docker pull` or `docker push` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing Docker Trusted Registry](../images/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next section deals with image storage settings. Within this **Dashboard**
    pane, you can set where your images are stored on the backend storage. Options
    for this might include an NFS share you are using, local disk storage of the Trusted
    Registry server, an S3 bucket from AWS, or another cloud storage solution. Once
    you have selected your **Storage Backend** option, you can then set the path from
    within that **Storage** to store your images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing Docker Trusted Registry](../images/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **License** section is very straightforward as this is where you update
    your license when it''s time to renew a new one or when you upgrade a license
    that might include more options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing Docker Trusted Registry](../images/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Authentication settings allow you to tie the login to the Trusted Registry
    into your existing authentication environment. Your options here are: **None**
    or a **Managed** option. **None** is not recommended except for testing purposes.
    The **Managed** option is where you would set up usernames and passwords and manage
    them from there. The other option would be to use an **LDAP** service, one that
    you might already be running as well, so that users have the same login credentials
    for their other work appliances such as email or web logins.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing Docker Trusted Registry](../images/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The last section, **Updates**, deals with how you manage updates for the DTR.
    These settings would be totally up to you how you handle updates, but be sure
    if you are doing an automated form of updates that you are also utilizing backups
    for restoring purposes in the event that something goes wrong during the update
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing Docker Trusted Registry](../images/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Administering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have covered the items that help you secure your Trusted Registry,
    we might as well take a few minutes to cover the other items that are within the
    console to help you administer it. Beyond the **Settings** tab within the registry,
    there are four other tabs that you can navigate and gather information about your
    registry. Those are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dashboard**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organizations**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Dashboard** is the main landing page you are taken to when you log in
    via your browser to the console. This will display information about your registry
    in one central location. The information you will be seeing is more hardware related
    information about the registry server itself as well as the Docker host that the
    registry server is running on. The **Repositories** section will allow you to
    control which repositories, either **Public** or **Private**, your users are able
    to pull images from. The **Organizations** section allows you to control access,
    that is, who on the system can push, pull, or do other Docker related commands
    against the repositories that you have elected to configure. The last section,
    the **Logs** section, will allow you to view logs based upon your containers that
    are being used from your registry. The logs are rotated every two weeks with a
    maximum size of *64 mb*. You are able to filter through the logs as well based
    on a container as well as being able to search for a date and/or time.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, let's pull an image, manipulate it, and then place it on our
    DTR for access by others within our organization.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to pull an image from the **Docker Hub**. Now, you could start
    from scratch with a **Dockerfile** and then do a Docker build and then push, but
    let's, for this demonstration, say we have the `mysql` image and we want to customize
    it in some way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's assume we made a customization to the image. Let's say that we set
    up the container to ship its logs off to a log stash server that we are using
    to collect our logs from all our containers that we are running. We now need to
    save those changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When we go to do the commit, we need a few tidbits of information. The first
    is the container ID, which we can get from running a `docker ps` command. We also
    need the DNS name of our registry server that we set up earlier, and lastly a
    unique image name to give it. In our case, we will keep it as `mysql`.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to push the updated image to our registry server. The only
    information we need is the image name that we want to push, which will be the
    `<dns.name>/mysql`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The image is now ready to be used by the other users in our organization. Since
    the image is in our Trusted Registry, we can control access to that image from
    our clients. This could mean that our clients would need our certificate and keys
    to be able to push and pull this image, as well as permissions set up within the
    organization settings we previously went over in the last section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can then make run the image, make changes if needed, and push the newly created
    image back to the Trusted Registry server as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker Registry is an open source option if you want to totally go at it
    on your own. If you totally want hands off, you can always use the Docker Hub
    and rely on public and private repositories, which will run you a fee on the Docker
    Hub though. This can be hosted locally on a server of your choosing or on a cloud
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The installation of the Docker Registry is extremely simply as it runs in a
    Docker container. This allows you to run it virtually anywhere, on a virtual machine
    in your own server environment or in a cloud environment. The typical port that
    is used is port `5000`, but you can change it to suit your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: One of the other items you will notice from above is that we are specifying
    a version to use instead of leaving it blank and pulling the latest version. That
    is because as of writing this book, the latest version for that registry tag is
    still at version 0.9.1\. Now, while this might be suitable for some, version 2
    is stable enough to be considered and to run your production environment on. We
    are also introducing the `--restart=always` flag for that as in the event of something
    happening to the container, it will restart and be available to serve out or accept
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have run the command above, you will have a running container registry
    on the IP address of the Docker host you ran the command on along with the port
    selection that you used in your `docker run` command above.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to put some images up on your new registry. The first thing we
    need is an image to push to the registry and we can do that in two ways. We can
    build images based on Docker files that we have created or we can pull down an
    image from another registry, in our case we will be using the Docker Hub, and
    then push that image to our new registry server. First, we need an image to choose
    and again, we will default back to the `mysql` image since it's a more popular
    image that most people might be using in their environments at some point along
    the way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to tag the image so it will now be pointing to your new registry
    so you can do push it to the new location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down that command above. What we are doing is applying the tag
    of `<IP_address>:5000/mysql` to the `mysql` image that we pulled from the Docker
    Hub. Now that `<IP_address>` piece will be replaced by the IP address from the
    Docker host that is running the registry container. This could also be a DNS name
    as well, as long as the DNS points to the correct IP that is running on the Docker
    host. We also need to specify the port number for our registry server, and in
    our case we left it with port `5000`, so we include: `5000` in the tag. Then,
    we are going to give it the same same of `mysql` at the end of the command. We
    are now ready to push this image to our new registry.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After it has been pushed, you can now pull it down from another machine that
    is configured with Docker and has access to the registry server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What we have looked at here are the defaults and while it could work if you
    want to use firewalls and such to secure the environment or even internal IP address,
    you still might want to take security to the next level and that is what we will
    look at in the next section. How can we make this even more secure?
  prefs: []
  type: TYPE_NORMAL
- en: Configuration and security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's time to tighten up our running registry with some additional features.
    The first method would be to run your registry using TLS. Using TLS allows you
    to apply certificates to the system so that people who are pulling from it know
    that it is who you say it is by knowing that someone hasn't comprised the server
    or is doing a man in the middle attack by supplying you with compromised images.
  prefs: []
  type: TYPE_NORMAL
- en: To do that, we will need to rework the Docker `run` command we were running
    in the last section. This is going to assume you have gone through some of the
    process of obtaining a certificate and key from your enterprise environment or
    you have self signed one using another piece of software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our new command will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to be in the directory where the certificates are or specify
    the full path to them in the above command. Again, we are keeping the standard
    port of `5000`, along with the name of registry. You could alter that too to something
    that might suit you better. For the sake of this book we will keep it close to
    that in the official documentation in the event that you look there for more reference.
    Next, we add two additional lines to the `run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will allow you to specify the certificate and key file that you will be
    using. These two files will need to be in the same directory that you are running
    the run command from as the environmental variables will be looking for them upon
    run. Now you could also add a volume switch to the run command to make it a little
    cleaner if you like and put the certificate and key in that folder and run the
    registry server that way.
  prefs: []
  type: TYPE_NORMAL
- en: The other way you can help with security is by putting a username and password
    on the registry server. This will help when users want to push or pull an item
    as they will need the username and password information. The catch with this is
    that you have to be using TLS in conjunction with this method. This method of
    username and password is not a standalone option.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to create a password file that you will be using in your `run`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, it can be a little confusing to understand what is happening here, so let's
    clear that up before we jump to the `run` command. First, we are issuing a `run`
    command. This command is going to run the `registry:2.2.0` container and its entry
    point specified means to run the `htpasswd` command along with the `-bn` switches,
    which will inject the `username` and `password` in an encrypted fashion into a
    file called `htpasswd` that you will be using for authentication purposes on the
    registry server. The `-b` means to run in batch mode while the `-n` means to display
    the results, and the `>` means to put those items into a file instead of to the
    actual output screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, onto our newly enhanced and totally secure Docker `run` command for our
    registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, it''s a lot to digest but let''s walk through it. We have seen some
    of these lines before in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The new ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The first one tells the registry server to use `htpasswd` as its authentication
    method to verify clients. The second gives your registry a name and can be changed
    at your own discretion. The last one tells the registry server the location of
    the file that is to be used for the `htpasswd` authentication. Again, you will
    need to use volumes and put the `htpasswd` file in its own volume inside the container
    so it allows for easier updating down the road. You also need to remember the
    `htpasswd` file needs to be placed in the same directory as the certificate and
    key file when you execute the Docker `run` command.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at being able to sign your images using the
    components of Docker Content Trust as well as hardware signing using Docker Content
    Trust along with the third party utilities in the form of YubiKeys. We also took
    a look at Docker Subscription that you can utilize to your advantage to help set
    up not only secure Docker environments but also ones that are supported by those
    at Docker itself. We then looked at DTR as a solution that you can use to store
    your Docker images. Lastly, we looked at the Docker Registry, which is a self
    hosted registry that you can use to store and manage your images. This chapter
    should help give you enough configuration items to chew on to help you make the
    right decision as to where to store your images.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will be looking at securing/hardening Linux kernels.
    As the kernel is what is used to run all your containers, it is important that
    it is secured in the proper way to help alleviate any security related issues.
    We will be covering some hardening guides that you can use to accomplish this
    goal.
  prefs: []
  type: TYPE_NORMAL
