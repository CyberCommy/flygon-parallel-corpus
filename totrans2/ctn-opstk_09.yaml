- en: Kolla – Containerized Deployment of OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about Kolla. It provides production-ready containers
    and deployment tools for operating OpenStack cloud. The contents of this chapter
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Kolla introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying containerized OpenStack services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kolla introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenStack cloud consists of multiple services, and each service interacts
    with other services. There is no integrated product release for OpenStack. Each
    project follows a release cycle after every 6 months. This provides a greater
    flexibility for operators to choose from multiple options and builds a custom
    deployment solution for them. However, this also brings a complexity of deploying
    and managing the OpenStack cloud.
  prefs: []
  type: TYPE_NORMAL
- en: There is need for these services to be scalable, upgradable, and readily available.
    Kolla provides a way for running these services inside containers, and this adds
    the advantage to the OpenStack cloud being fast, reliable, scalable, and upgradeable.
    Kolla packs the OpenStack services and their requirements, and sets up all the
    configuration in the container images.
  prefs: []
  type: TYPE_NORMAL
- en: Kolla uses Ansible to run these container images and deploy or upgrade OpenStack
    cluster very easily on bare metal or VMs. Kolla containers are configured to store
    the data on persistent storage, which can then be mounted back onto the host operating
    system and restored successfully to protect against any faults.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to deploy OpenStack, Kolla has three projects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**kolla:** All the Docker container images for OpenStack projects are maintained
    in this project. Kolla provides an image building tool called kolla-build to build
    container images for most of the projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kolla-ansible**: This provides Ansible playbooks for deploying OpenStack
    inside Docker containers. It supports both the all-in-one and multi-node setups
    of the OpenStack cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kolla-kubernetes**: This deploys OpenStack on Kubernetes. This aims to leverage
    the self-healing, health checks, upgrade, and other capabilities of Kubernetes
    for managing containerized OpenStack deployment. kolla-kubernetes uses Ansible
    playbooks and the Jinja2 template to generate configuration files for the services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see some of the key features of Kolla.
  prefs: []
  type: TYPE_NORMAL
- en: Highly available deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenStack ecosystem consists of multiple services running only a single
    instance of them, which sometimes becomes the single point of failure in case
    of any disaster, and it can't scale beyond a single instance. To make it scalable,
    Kolla deploys the OpenStack cloud, configured with HA. So even if any service
    fails, it can scale without any interruption to the current operations. This feature
    makes Kolla an ideal solution for easy upgrade and scale without any downtime.
  prefs: []
  type: TYPE_NORMAL
- en: Ceph support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kolla uses Ceph to add persistent data to the VMs running our OpenStack environment,
    so that we can easily recover from any disaster, hence making the OpenStack cloud
    more reliable. Ceph is also used for storing glance images.
  prefs: []
  type: TYPE_NORMAL
- en: Image building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kolla provides a tool called kolla-build to build container images on multiple
    distros such as CentOs, Ubuntu, Debian, and Oracle Linux. Multiple dependent components
    can be built at once.
  prefs: []
  type: TYPE_NORMAL
- en: Docker hub support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can pull images from Docker Hub directly. You can see all the Kolla images
    at [https://hub.docker.com/u/kolla/](https://hub.docker.com/u/kolla/).
  prefs: []
  type: TYPE_NORMAL
- en: Local registry support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kolla also supports pushing images to the local registry. Refer to [https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry)
    for setting a local registry.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple build sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kolla supports building from multiple sources binary and source. The binaries
    are the packages installed by the package manager of the host OS, whereas the
    source could be a URL, local repository, or tarball. Refer to [https://docs.openstack.org/kolla/latest/admin/image-building.html#build-openstack-from-source](https://docs.openstack.org/kolla/latest/admin/image-building.html#build-openstack-from-source)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfile customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kolla supports building images from Jinja2 templates, which provide a better
    flexibility for customization by operators. Operators can customize their image
    building to include additional packages, install plugins, change some configuration
    settings, and so on. Refer to [https://docs.openstack.org/kolla/latest/admin/image-building.html#dockerfile-customisation](https://docs.openstack.org/kolla/latest/admin/image-building.html#dockerfile-customisation)
    for more details on how different customizations can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see the OpenStack architecture using Kolla. The following
    figure shows a **highly available** (**HA**) OpenStack multimode setup done by
    Kolla.
  prefs: []
  type: TYPE_NORMAL
- en: The infrastructure engineering here means the code or application written for
    infrastructure management. The code is submitted to Gerrit for review and then
    the CI system reviews and checks for correctness of the code. Once the code is
    approved by CI, the CD system feeds the output of build, that is the OpenStack
    containers that are based on Kolla, into a local registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, the Ansible contacts Docker and launches our OpenStack multinode
    environment with HA:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying containerized OpenStack services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will understand how Kolla deploys containerized OpenStack
    using kolla-ansible. At the time of writing, kolla-kubernetes is under development.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is not a complete guide to Kolla.
  prefs: []
  type: TYPE_NORMAL
- en: Kolla is evolving now, so the guide is upgraded very frequently. Refer to the
    latest documentation provided at [https://docs.openstack.org/kolla-ansible/latest/](https://docs.openstack.org/kolla-ansible/latest/).
    We will try to explain the general deploy process of OpenStack using Kolla and
    the subprojects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploying OpenStack with Kolla is pretty easy. Kolla provides both all-in-one
    and multinode installations on Docker or Kubernetes. It basically involves four
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a local registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic host bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a local registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A local registry is required for storing the container images built by Kolla.
    It is optional for the all-in-one deployment, the Docker cache can be used instead.
    Docker Hub contains all the images for all major releases of Kolla. However, it
    is strongly recommended for the multinode deployment to ensure a single source
    of images. It is also recommended that you run the registry over HTTPS to secure
    the images in the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the guide at [https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry)
    for detailed steps for setting up a local registry.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic host bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kolla installation requires some packages and tools, such as Docker, libvirt,
    and NTP, to be installed on the host where we want our OpenStack to run. These
    dependencies can be automatically installed and configured by host bootstrap.
    kolla-ansible provides the bootstrap-servers playbook for preparing and installing
    the hosts for OpenStack installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly prepare the host, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Building images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this step, we will build the Docker container images for all OpenStack services.
    We can specify the base distro for our images, sources, and tags while building
    the images. The images are pushed to local registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building images in Kolla is as simple as running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command by default builds all the images based on CentOS. To build images
    with a specific distro, use the `-b` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To build images for a specific project, pass the name of the project to the
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'One advanced feature in Kolla is the image profiles. Profiles are used to define
    a set of related projects in OpenStack. Some of the defined profiles in Kolla
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**infra**: All infra-related projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**main**: These are the OpenStack core projects such as Nova, Neutron, KeyStone,
    and Horizon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**aux**: These are the additional projects such as Zun and Ironic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**default**: These are a set of minimum projects required for a ready cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New profiles can be defined in the `kolla-build.conf` object as well. To do
    this, just add a new profile under the `[profile]` section in the `.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we set a new profile called `containers` to represent
    a group of projects related to containerization in OpenStack. The `heat` project
    is also mentioned and used because it is required by `magnum`. Also, you can use
    this profile to create images for these projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Images can also be pushed to Docker Hub or to the local registry using these
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Kolla also provides more advanced operations such as building image from source
    and Docker file customization. You can refer to [https://docs.openstack.org/kolla/latest/admin/image-building.html](https://docs.openstack.org/kolla/latest/admin/image-building.html) [for
    more details.](https://docs.openstack.org/kolla/latest/admin/image-building.html)
  prefs: []
  type: TYPE_NORMAL
- en: Deploying images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have all the images required for OpenStack deployment; kolla-ansible
    contacts Docker and provides these images for running them. The deployment can
    be all-in-one or mutlinode. The decision is made on the Ansible inventory files
    available in kolla-ansible. This inventory file contains the information about
    the infrastructure hosts in the cluster. The deploy process in Kolla takes the
    environment variables and passwords specified in the configuration files and an
    inventory file to provision the highly available OpenStack cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the configuration options and passwords used for OpenStack deployment are
    stored in `/etc/kolla/globals.yml` and `/etc/kolla/passwords.yml`, respectively.
    Edit these files manually to specify your choice of installation, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can generate a password with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run `prechecks` on the deployment targets nodes to check whether they
    are in the state or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to deploy OpenStack. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the installation, see the containers list in `docker`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see all the OpenStack service containers running. Now let''s generate
    the `admin-openrc.sh` file to use our OpenStack cluster. The generated file will
    be stored in the `/etc/kolla` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now install `python-openstackclient`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To initialize the neutron networks and glance image, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After the successful deployment of OpenStack, you can access the Horizon dashboard.
    Horizon will be available at the IP address or hostname specified in `kolla_external_fqdn`,
    or `kolla_internal_fqdn`. If these variables were not set during deployment, they
    default to `kolla_internal_vip_address`.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html](https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html)
    for detailed steps of deploying a multi-node OpenStack cloud using kolla-ansible
    and [https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html](https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html)
    using kolla-kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about Kolla, which deploys a containerized OpenStack
    cloud. We looked at various projects available in Kolla and learned what they
    do in general. Then we looked into some of the key features of Kolla and discussed
    the Kolla architecture for OpenStack deployment. You also learned how to build
    images with Kolla and finally understand the deployment process of Kolla.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the best practices for securing your containers
    and also the advantages of using different OpenStack projects.
  prefs: []
  type: TYPE_NORMAL
