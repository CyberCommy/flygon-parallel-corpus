- en: Chapter 5. Querying with Sysdig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous tools we have looked at have all relied on making API calls to
    Docker or reading metrics from LXC. Sysdig works differently by hooking itself
    into the hosts machine's kernel while this approach does go against Docker's philosophy
    of each service being run in its own isolated container, the information you can
    get by running Sysdig only for a few minutes far outweighs any arguments about
    not using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to install Sysdig and Csysdig on the host machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic usage and how to query your containers in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to capture logs so they can be queried later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Sysdig?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start to get into Sysdig, let''s first understand what it is. When
    I first heard about the tool, I thought to myself that it sounded too good to
    be true; the website describes the tool as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Sysdig is open source, system-level exploration: capture system state and
    activity from a running Linux instance, then save, filter and analyze. Sysdig
    is scriptable in Lua and includes a command line interface and a powerful interactive
    UI, csysdig, that runs in your terminal. Think of sysdig as strace + tcpdump +
    htop + iftop + lsof + awesome sauce. With state of the art container visibility
    on top."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is quite a claim as all the tools that it is claiming to be as powerful
    were all in a set of goto commands to run when looking into problems, so I was
    a little skeptical at first.
  prefs: []
  type: TYPE_NORMAL
- en: As any one who has had to try and track down a haywire process of try and track
    down an issue that isn't being very verbose in its error logs on a Linux server
    will know that using tools such as strace, lsof, and tcpdump can get complicated
    very quickly and it normally involves capturing a whole lot of data and then using
    a combination of several tools to slowly, and manually, trace the problem by reducing
    the amount of data you captured.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine my delight when Sysdig's claims turned out to be true. It made me wish
    I had the tool back when I was a front line engineer; it would have made my life
    a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: Sysdig comes in two different flavors, first is the Open Source version available
    at [http://www.sysdig.org/](http://www.sysdig.org/); this comes with an ncurses
    interface so that you can easily access and query data from a terminal-based GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wikipedia describes **ncurses** (new curses) as a programming library that provides
    an API that allows the programmer to write text-based user interfaces in a terminal-independent
    manner. It is a toolkit for developing "GUI-like" application software that runs
    under a terminal emulator. It also optimizes screen changes in order to reduce
    the latency experienced when using remote shells.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a commercial service that allows you to stream your Sysdig to
    their externally hosted service; this version has a web-based interface for viewing
    and querying your data.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be concentrating on the open source version.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Sysdig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Considering how powerful Sysdig is, it has one of the most straightforward
    installation and configuration processes I have come across. To install Sysdig
    on either a CentOS or Ubuntu server, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding command, you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Sysdig](../images/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s it, you are ready to go. There is nothing more to configure or do.
    There is a manual installation process and also a way of installing the tool using
    containers to build the necessary kernel modules; for more details, see the installation
    guide as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.sysdig.org/wiki/how-to-install-sysdig-for-linux/](http://www.sysdig.org/wiki/how-to-install-sysdig-for-linux/)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Sysdig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we look at how to use Sysdig, let''s launch a few containers using `docker-compose`
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will launch a WordPress installation running a database and two web server
    containers that are load balanced using an HAProxy container. You will be able
    to view the WordPress installation at [http://docker.media-glass.es/](http://docker.media-glass.es/)
    once the containers have launched. You will need to enter some details to create
    the admin user before the site is visible; follow the on-screen prompts to complete
    these steps.
  prefs: []
  type: TYPE_NORMAL
- en: The basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At its core, Sysdig is a tool for producing a stream of data; you can view the
    stream by typing `sudo sysdig` (to quit, press *Ctrl*+*c*).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a lot information there so let''s start to filter the stream down
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display only events in which a user changes directory; to see it
    in action, open a second terminal and you will see that when you log in, you see
    some activity in the first terminal. As you can see, it looks a lot like a traditional
    log file; we can format output to give information such as the username, by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in your second terminal, change the directory a few times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basics](../images/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this is a lot easier to read than the original unformatted output.
    Press *Ctrl* + *c* to stop filtering.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we looked at filtering data in real time; it is also
    possible to stream Sysdig data to a file so that you can query the data at a later
    time. Exit from your second terminal and run the following command on your first
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'While the command is running on the first terminal, log in to the host on the
    second one and change the directory a few times. Also, while we are recording,
    click around the WordPress site we started at the beginning of this section, the
    URL is `http://docker.media-glass.es/`. Once you have done that, stop the recording
    by pressing *Crtl* + *c*; you should have now dropped back to a prompt. You can
    check the size of the file created by Sysdig by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can use the data that we have captured to apply the same filter as
    we did when looking at the real-time stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'By running the preceding command, you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Capturing data](../images/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how we get similar results to when we were viewing the data in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the things that was recorded in `~/monitoring-docker.scap` was details
    on the system state; this includes information on the containers we launched at
    the start of the chapter. Let''s use this file to get some stats on the containers.
    To list the containers that were active during the time, we captured the data
    file run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To see which of the containers utilized the CPU most of the time, we were clicking
    around the WordPress site run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To have a look at the top processes in each of the containers that have "wordpress"
    in their names (which is all of them in our case), run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, which of our containers transferred the most amount of data?:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'By running the preceding command, you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Containers](../images/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have extracted quite a bit of information on our containers
    from the data we captured. Also, using the file, you can remove the `-r ~/monitoring-docker.scap`
    part of the command to view the container metrics in real time.
  prefs: []
  type: TYPE_NORMAL
- en: It's also worth pointing out that there are binaries for Sysdig that work on
    both OS X and Windows; while these do not capture any data, they can be used to
    read data that you have recorded on your Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the few basic exercises covered in this section, you should start to get
    an idea of just how powerful Sysdig can be. There are more examples on the Sysdig
    website at [http://www.sysdig.org/wiki/sysdig-examples/](http://www.sysdig.org/wiki/sysdig-examples/).
    Also, I recommend you to read the blog post at [https://sysdig.com/fishing-for-hackers/](https://sysdig.com/fishing-for-hackers/);
    it was my first exposure to Sysdig and it really demonstrates its usefulness.
  prefs: []
  type: TYPE_NORMAL
- en: Using Csysdig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As easy as it is to view data captured by Sysdig using the command line and
    manually filtering the results, it can get more complicated as you start to string
    more and more commands together. To help make the data captured by Sysdig as accessible
    as possible, Sysdig ships with a GUI called **Csysdig**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launching the Csysdig is done with a single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the process has launched, it should instantly look familiar to anyone
    who has used top or cAdvisor (minus the graphs); its default view will show you
    real-time information on the processes that are running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Csysdig](../images/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To change this view, known as the **Processes** view, press *F2* to open the
    **Views** menu; from here, you can use the up and down arrows on your keyboard
    to select a view. As you may have already guessed, we would like to see the **Containers**
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Csysdig](../images/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, before we drill down into our containers, let''s quit Csysdig by pressing
    *q* and load up the file we created in the previous section. To do this, type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Csysdig loads, you will notice that **Source** has changed from **Live
    System** to the file path of our data file. From here, press *F2* and use the
    up arrow to select containers and then hit *Enter*. From here, you can use the
    up and down arrows to select one of the two web servers, these would be either
    `wordpress_wordpress1_1` or `wordpress_wordpress2_1` as shown in the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Csysdig](../images/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The remaining part of this chapter assumes that you have Csysdig open in-front
    of you, it will talk you through how to navigate around the tool. Please feel
    free to explore yourself as well.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected a server, hit *Enter* and you will be presented with
    a list of processes that the container was running. Again, you can use the arrow
    keys to select a process to drill down further into.
  prefs: []
  type: TYPE_NORMAL
- en: I suggested looking at one of the Apache processes that has a value listed in
    the **File** column. This time, rather than pressing *Enter* to select the process,
    let's "Echo" what the process was up to at the time we captured the data; with
    the process selected, press *F5*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the up and down arrows to scroll through the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Csysdig](../images/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To better format the data, press *F2* and select **Printable ASCII**. As you
    can see from the preceding screenshot, this Apache process performed the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Accepted an incoming connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessed the `.htaccess` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the `mod_rewrite` rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Got information from the hosts file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Made a connection to the MySQL container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sent the MySQL password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By scrolling through the remainder of the data in the "Echo" results for the
    process, you should be able to easily follow the interactions with the database
    all the way through to the page being sent to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: To leave the "Echo" screen, press *Backspace*; this will always take you a level
    back.
  prefs: []
  type: TYPE_NORMAL
- en: If you want a more detailed breakdown on what the process was doing, then press
    *F6* to enter the **Dig** view; this will list the files that the process was
    accessing at the time, along with the network interaction and how it is accessing
    the RAM.
  prefs: []
  type: TYPE_NORMAL
- en: To view a full list of commands and for more help, you can press *F1* at anytime.
    Also, to get a breakdown on any columns that are on screen, press *F7*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned at the start of this chapter, Sysdig is probably one of the most
    powerful tools I have come across in recent years.
  prefs: []
  type: TYPE_NORMAL
- en: Part of its power is the way that it exposes a lot of information and metrics
    in a way that never feels overwhelming. It's clear that the developers have spent
    a lot of time ensuring that both the UI and the way that commands are structured
    feel natural and instantly understandable, even by the newest member of an operations
    team.
  prefs: []
  type: TYPE_NORMAL
- en: The only downside is that, unless you want to view the information in real time
    or look into a problem in development storing the amount of data that is being
    generated by Sysdig, it can be quite costly in terms of disc space being used.
  prefs: []
  type: TYPE_NORMAL
- en: This is something that Sysdig has recognized, and to help with this, the company
    offers a cloud-based commercial service called Sysdig Cloud for you to stream
    your Sysdig data into. In the next chapter, we will look at this service and also
    some of its competitors.
  prefs: []
  type: TYPE_NORMAL
