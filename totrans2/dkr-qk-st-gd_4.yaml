- en: Docker Volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn the secrets of Docker volumes. We will learn
    how to use folders on your workstation inside of your Docker containers, and we
    will learn how to create and use persistent volumes, allowing multiple containers
    to share data. We will learn how to clean up after unused volumes. And, to round
    out this chapter, we will learn how to create data-volume containers to become
    the source of volumes for other containers.
  prefs: []
  type: TYPE_NORMAL
- en: Approximately 675 shipping containers are lost at sea each year. In 1992, a
    40 ft container full of toys actually fell into the Pacific Ocean and 10 months
    later some of its toys drifted ashore on the Alaskan coastline – [https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers](https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a Docker volume?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Docker volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two ways to remove Docker volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing data between containers with data volume containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be pulling Docker images from Docker's public repo, so basic internet
    access is required to execute the examples within this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter04](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter04)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action: [http://bit.ly/2QqK78a](http://bit.ly/2QqK78a)'
  prefs: []
  type: TYPE_NORMAL
- en: What is a Docker volume?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in [Chapter 3](ab7747ed-23c9-462c-98cb-c70e330c5d87.xhtml), *Creating
    Docker Images*, Docker uses a special filesystem called a **Union File System**.
    This is the key to Docker's layered image model and allows for many of the features
    that make using Docker so desirable. However, the one thing that the Union File
    System does not provide for is the persistent storage of data. If you recall,
    the layers of a Docker image are read-only. When you run a container from a Docker
    image, the Docker daemon creates a new read-write layer that holds all of the
    live data that represents your container. When your container makes changes to
    its filesystem, those changes go into that read-write layer. As such, when your
    container goes away, taking the read-write layer goes with it, and any and all
    changes the container made to data within that layer are deleted and gone forever.
    That equals non-persistent storage. Remember, however, that generally speaking
    this is a good thing. A great thing, in fact. Most of the time, this is exactly
    what we want to happen. Containers are meant to be ephemeral and their state data
    is too. However, there are plenty of use cases for persistent data, such as customer
    order data for a shopping site. It would be a pretty bad design if all the order
    data went bye-bye if a container crashed or had to be re-stacked.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the Docker volume. The Docker volume is a storage location that is completely
    outside of the Union File System. As such, it is not bound by the same rules that
    are placed on the read-only layers of an image or the read-write layer of a container.
    A Docker volume is a storage location that, by default, is on the host that is
    running the container that uses the volume. When the container goes away, either
    by design or by a catastrophic event, the Docker volume stays behind and is available
    to use by other containers. The Docker volume can be used by more than one container
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to describe a Docker volume is this: a Docker volume is a
    folder that exists on the Docker host and is mounted and accessible inside a running
    Docker container. The accessibility goes both ways, allowing the contents of that
    folder to be modified from inside the container, or on the Docker host where the
    folder lives.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, this description is a bit of a generalization. Using different volume drivers,
    the actual location of the folder being mounted as a volume can be hosted somewhere
    not on the Docker host. With volume drivers, you are able to create your volumes
    on remote hosts or cloud providers. For example, you can use an NFS driver to
    allow the creation of Docker volumes on a remote NFS server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like Docker image and Docker container, the volume commands represent their
    own management category. As you would expect, the top-level management command
    for volumes is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The subcommands available in the volume management group include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There are a few different ways you can create a Docker volume, so let's continue
    our investigation of Docker volumes by creating some.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: The Docker reference for using Docker volumes: [https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker volume plugin information: [https://docs.docker.com/engine/extend/plugins_volume/](https://docs.docker.com/engine/extend/plugins_volume/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker engine volume plugins: [https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins](https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Docker volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few ways to create a Docker volume. One way is to use the `volume
    create` command. The syntax for that command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the optional volume name parameter, the `create` command allows
    for these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start with the simplest example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the preceding command will create a new Docker volume and assign
    it a random name. The volume will be created using the built-in local driver (by
    default). Using the `volume ls` command, you can see what random name the Docker
    daemon assigned our new volume. It will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2073a1d1-1f61-47c2-b94d-7e410c5854c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Stepping it up a notch, let''s create another volume, this time supplying an
    optional volume name with the command. The command will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the volume is created and is given the name `my-vol-02`, as requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/eff9a8b0-13cb-4efb-8a08-f24ae1580c30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This volume still uses the default local driver. Using the local driver simply
    means that the actual location for the folder this volume represents can be found
    locally on the Docker host. We can use the volume inspect subcommand to see where
    that folder can actually be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/39fe956e-5fdb-43a7-86d3-cd6ba89060b6.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, the volume's mount point is on the
    Docker host's filesystem at `/var/lib/docker/volumes/my-vol-02/_data`. Notice
    that the folder path is owned by root, which means you need elevated permissions
    to access the location from the host. Notice also that this example was run on
    a Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using OS X, you need to remember that your Docker install is actually
    using a mostly seamless virtual machine. One of the areas where the seams do show
    up is with the use of the Docker volumes. The mount point that is created when
    you create a Docker volume on an OS X host is stored in the filesystem of the
    virtual machine, not on your OS X filesystem. When you use the docker volume inspect
    command and see the path to the mount point of your volume, it is not a path on
    your OS X filesystem, but rather the path on the filesystem of the hidden virtual
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a way to view the filesystem (and other features) of that hidden virtual
    machine. With a command, often referred to as the Magic Screen command, you can
    access the running Docker VM. That command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Use *Ctrl* + *AK* to kill the screen session.
  prefs: []
  type: TYPE_NORMAL
- en: You can detach with *Ctrl* + *A Ctrl* + *D,* then use `screen -r` to reconnect,
    but don't detach and then start a new screen session. Running more than one screen
    to the VM will give you tty garbage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of accessing the mount point for a volume created on an
    OS X host. Here is the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is what the setup looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5b7d7fed-96dd-4ba6-9d30-0c538740bba6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, here is how to use the magic screen command to accomplish what we want,
    which is access to the volume mountpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And voila...
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5d6fff12-917a-40f8-9b3b-a3c66a9d51f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now is a good time to point out that we have created these volumes without ever
    creating or using a Docker container. This is an indication that a Docker volume
    is outside of the realm of the normal container-union filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'We saw in [Chapter 3](ab7747ed-23c9-462c-98cb-c70e330c5d87.xhtml), *Creating
    Docker Images*, that we can also create volumes using a parameter on the container
    run command, or by adding a `VOLUME` instruction in the Dockerfile. And, as you
    might expect, you are able to mount volumes pre-created using the Docker `volume
    create` command into containers by using a container run parameter, namely the
    `--mount` parameter, for example, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This example will run a new container that will mount the existing volume named
    `my-vol-02`. It will mount that volume in the container at `/myvol`. Note that
    the preceding example could also have been run without pre-creating the `my-vol-02:volume`,
    and the act of running the container with the `--mount` parameter would create
    the volume as part of the process of starting up the container. Note that any
    contents defined in the image''s mount point folder will be added to the volume
    when the volume is mounted. However, if a file exists in the image''s mount point
    folder, it also exists in the host''s mount point, and the contents of the host''s
    file will be what ends up being in the file. Using an image from this Dockerfile,
    here is what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the `Data from image` line. Now, using a pre-created volume that contains
    a file with the matching name of `both-places.txt`, but has the `Data from volume` contents
    in the file, we will run a container based on the image. Here is what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/07d94005-aefb-4b4a-ba28-a0b452e64ca2.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, even though the Dockerfile created a file with the `Data from
    image` contents, when we ran a container from that image and mounted a volume
    that had the same file, the contents from the volume (`Data from volume`) prevailed
    and is what was found in the running container.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you cannot mount a pre-created volume via a `VOLUME` instruction
    in a Dockerfile. There is no such thing as a Dockerfile `VOLUME` instruction named
    volume. The reason for this is that the Dockerfile cannot dictate the location
    on the host that a volume is mounted from. Allowing that would be bad for a few
    reasons. First, since the Dockerfile creates an image, every container that was
    run from that image would be trying to mount the same host location. That could
    get real bad real fast. Second, since a container image can be run on different
    host operating systems, it is quite possible that the definition of the host path
    for one OS would not even work on another OS. Again, bad. Third, defining the
    volumes host path would open up all kinds of security holes. Bad, bad, bad! Because
    of this, running a container from an image build with a Dockerfile that has a
    `VOLUME` instruction will always create a new, uniquely-named mount point on the
    host. Using the `VOLUME` instruction in a Dockerfile has somewhat limited use
    cases, such as when a container will run an application that will always need
    to read or write data that is expected at a specific location in the filesystem
    but should not be a part of the Union File System.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to create a one-to-one mapping of a file on the host to
    a file in a container. To accomplish this, add a `-v` parameter to the container
    run command. You will need to provide the path and filename to the file to be
    shared from the host and the fully-qualified path to the file in the container.
    The container run command might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what that might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/032361dd-e5c7-413f-9808-95f9a6022f8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a few different ways to define the volume in the container run command.
    To illustrate this point, look at the following run commands, each of which will
    accomplish the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'All three of the preceding container run commands will create a container that
    has mounted the same volume, in read-only mode. This can be verified with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/7ad05dcb-f85f-488e-947d-c83d390a8360.png)'
  prefs: []
  type: TYPE_IMG
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out these links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: The Docker `volume create` reference: [https://docs.docker.com/engine/reference/commandline/volume_create/](https://docs.docker.com/engine/reference/commandline/volume_create/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker storage reference documentation: [https://docs.docker.com/storage/](https://docs.docker.com/storage/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already seen and used the volume list command, `volume ls`, and the
    inspect command, `volume inspect`, and I think you should have a good grasp of
    what these commands do. There are two other commands in the volume-management
    group, both for volume removal. The first is the `volume rm` command, which you
    can use to remove one or more volumes by name. Then, there is the `volume prune` command;
    with the prune command, you can remove ALL unused volumes. Be extra careful with
    the use of this command. Here is the syntax for the remove and prune commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some examples of using the remove and prune commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/21aedc2c-bc31-4731-a064-d4ca50ece52e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the `in-use-volume` volume is mounted in the `vol-demo` container, it
    did not get removed with the prune command. You can use a filter on the volume
    list command to see what volumes are not associated with a container, and as such
    would be removed with the prune command. Here is the filtered ls command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker's Wiki document for the volume remove command: [https://docs.docker.com/engine/reference/commandline/volume_rm/](https://docs.docker.com/engine/reference/commandline/volume_rm/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker's Wiki document for the volume prune command: [https://docs.docker.com/engine/reference/commandline/volume_prune](https://docs.docker.com/engine/reference/commandline/volume_prune)/
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Info on pruning Docker objects: [https://docs.docker.com/config/pruning/](https://docs.docker.com/config/pruning/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing data between containers with data volume containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is another feature of Docker volumes that allows you to share the volume(s)
    mounted in one Docker container with other containers. It is called **data volume
    containers**. Using data volume containers is basically a two-step process. In
    the first step, you run a container that either creates or mounts Docker volumes
    (or both), and in the second step, you use the special volume parameter, `--volumes-from`,
    when running other containers to configure them to mount all of the volumes mounted
    in the first container. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what that looks like when executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9da94735-93f4-4976-bc7b-1451b0ebf11a.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, the first container run command is creating the volumes, but
    they could have just as easily been pre-created with an earlier container run
    command, or from a `volume create` command.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is an excellent article on data volume containers, including using them
    to do data backup and restore: [https://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/](https://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a deep-dive into Docker volumes. We learned what Docker
    volumes actually are, along with a few ways to create them. We learned the differences
    between creating Docker volumes with the `volume create` command, with the container
    run command, and the Dockerfile `VOLUME` instruction. We looked at a couple of
    ways to remove volumes, and how to use a data container to share volumes with
    other containers. All in all, you should feel pretty confident in your Docker
    volume skills right now. So far, we have built a strong base of Docker knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](f1681897-580b-44fb-9e43-4aed37e67529.xhtml), *Docker Swarm*,
    we are going to add to that base by learning about Docker Swarm. This is where
    things will really start to get exciting. If you are ready to learn more, turn
    the page!
  prefs: []
  type: TYPE_NORMAL
