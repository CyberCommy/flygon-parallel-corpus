- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is an open source, container-based platform that enables anyone to consistently
    develop and deploy stable applications anywhere. Docker delivers speed, simplicity,
    and security in creating scalable and portable environments for ultramodern applications.
    With the advent and prevalence of Docker in the containerization of modern microservices
    and N-tier applications, it is both prudent and imperative to effectively troubleshoot
    automated workflows for production-level deployments.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Understanding Container Scenarios and an
    Overview of Docker"), *Understanding Container Scenarios and an Overview of Docker*,
    is about the basic containerization concept with the help of application and OS-based
    containers. We will throw some light on the Docker technology, its advantages,
    and the life cycle of Docker containers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Docker Installation"), *Docker Installation*,
    will go over the steps to install Docker on various Linux distributions – Ubuntu,
    CoreOS, CentOS, Red Hat Linux, Fedora, and SUSE Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Building Base and Layered Images"), *Building
    Base and Layered Images*, teaches that a mission-critical task in production-ready
    application containerization is image building. We will also discuss building
    images manually from scratch. Moving ahead, we will explore building layered images
    with a Dockerfile and enlist the Dockerfile commands in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Devising Microservices and N-Tier Applications"),
    *Devising Microservices and N-Tier Applications*, will explore example environments
    designed seamlessly from development to test, eliminating the need for manual
    and error-prone resource provisioning and configuration. In doing so, we will
    touch briefly on how a microservice applications can be tested, automated, deployed,
    and managed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Moving Around Containerized Applications"),
    *Moving Around Containerized Application*, will take a look at Docker registry.
    We will start with the basic concepts of Docker public repository using Docker
    Hub and the use case of sharing containers with a larger audience. Docker also
    provides the option to deploy a private Docker registry, which we look into, that
    can be used to push, pull, and share the Docker containers internally in the organization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Making Containers Work"), *Making Containers
    Work*, will teach you about privileged containers, which have access to all the
    host devices, and super-privileged containers, which show that the containers
    can run a background service that can be used to run services in Docker containers
    to manage the underlying host.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Managing the Networking Stack of a Docker
    Container"), *Managing the Networking Stack of a Docker Container*, will explain how
    Docker networking is powered with Docker0 bridge and its troubleshooting issues
    and configuration. We will also look at troubleshooting the communication issues
    between Docker networks and the external network. We look into containers communication
    across multiple hosts using different networking options, such as Weave, OVS,
    Flannel, and Docker''s latest overlay network. We will compare them and look at
    the troubleshooting issues involved in their configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Managing Docker Containers with Kubernetes"),
    *Managing Docker Containers with Kubernetes*, explains how to manage Docker containers
    with help of Kubernetes. We will cover many deployment scenarios and troubleshooting
    issues while deploying Kubernetes on a Bare Metal machine, AWS, vSphere, or using
    minikube. We will also look at deploying Kubernetes pods effectively and debugging
    Kubernetes issues.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Hooking Volume Baggage"), *Hooking Volume
    Baggage*, will dive into data volumes and storage driver concepts related to Docker.
    We will discuss troubleshooting the data volumes with the help of the four approaches
    and look at their pros and cons. The first case of storing data inside the Docker
    container is the most basic case, but it doesn''t provide the flexibility to manage
    and handle data in the production environment. The second and third cases are
    about storing the data using data-only containers or directly on the host. The
    fourth case is about using a third-party volume plugin, Flocker or Convoy, which
    stores the data in a separate block and even provides reliability with data, even
    if the container is transferred from one host to another or if the container dies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Docker Deployment in a Public Cloud - AWS
    and Azure"), *Docker Deployment in a Public Cloud - AWS and Azure*, outlines Docker
    deployment on the Microsoft Azure and AWS public clouds.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need Docker 1.12+ installed on Windows, Mac OS,or Linux machines. Public
    cloud accounts of AWS, Azure and GCE might be required, which are mentioned in
    the respective sections of the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended to help seasoned solutions architects, developers, programmers,
    system engineers, and administrators troubleshoot common areas of Docker containerization.
    If you are looking to build production-ready Docker containers for automated deployment,
    you will be able to master and troubleshoot both the basic functions and the advanced
    features of Docker. Advanced familiarity with the Linux command line syntax, unit
    testing, the Docker registry, GitHub, and leading container hosting platforms
    and Cloud Service Providers (CSP) are the prerequisites. In this book you will
    also learn about ways and means to avoid troubleshooting in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Restart
    the cluster using the `start_k8s.sh` shell script."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms **and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Specify the **Stack name**, **KeyPair**, and cluster 3."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
