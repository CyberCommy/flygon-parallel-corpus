- en: Chapter 4. Publishing Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to build Docker images. The next logical
    step is to publish these images in a public repository for public discovery and
    consumption. So, this chapter focuses on publishing images on the Docker Hub,
    and how to get the most out of the Docker Hub. We can create a new Docker image,
    using a `commit` command and a `Dockerfile`, build on it, and push it to the Docker
    Hub. The concept of a trusted repository will be discussed. This trusted repository
    is created from GitHub or Bitbucket. This can then be integrated with the Docker
    Hub to automatically build images, as a result of updates in the repository. This
    repository on GitHub is used to store the `Dockerfile`, which was previously created.
    Also, we will illustrate how worldwide organizations can enable their teams of
    developers to craft and contribute a variety of Docker images to be deposited
    in the Docker Hub. The Docker Hub REST APIs can be used for user management and
    manipulation of repository programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to push images to the Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic building of images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private repositories on the Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating organizations on the Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker Hub REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker Hub is a central place used for keeping the Docker images either
    in a public or private repository. The Docker Hub provides features, such as a
    repository for Docker images, user authentications, automated image builds, integration
    with GitHub or Bitbucket, and managing organizations and groups. The Docker Registry
    component of the Docker Hub manages the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Registry is a storage system used to store the images. Automated build
    is a feature of the Docker Hub, which is not open source yet, at the time of writing
    this book. The following diagram shows the typical features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Docker Hub](graphics/7937OT_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to work with the Docker Hub, you have to register with the Docker
    Hub, and create an account using the link at [https://hub.docker.com/account/signup](https://hub.docker.com/account/signup).
    You can update the **Username**, **Password**, and **Email Address**, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Docker Hub](graphics/7937OT_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After completing the **Sign Up** process, you need to complete the verification
    received in an e-mail. After the e-mail verification is completed, you will see
    something similar to the following screenshot, when you login to the Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Docker Hub](graphics/7937OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The creation of an account in the Docker Hub is completed successfully, and
    now you can log in to your Docker Hub account using [https://hub.docker.com/account/login/?next=/account/welcome/](https://hub.docker.com/account/login/?next=/account/welcome/),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Docker Hub](graphics/7937OT_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Docker Hub also supports command-line access to the Docker Hub using a
    Ubuntu terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful login, the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can browse the available images in the Docker Hub, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Docker Hub](graphics/7937OT_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you can see your settings, update your profile, and get the details of
    the supported communities, such as Twitter, stackoverflow, #IRC, Google Groups,
    and GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: Pushing images to the Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will create a Docker image on the local machine, and push this image
    to the Docker Hub. You need to perform the following steps in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Docker image on the local machine by doing one of the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `docker commit` sub command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `docker commit` sub command with `Dockerfile`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push this created image to the Docker Hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the image from the Docker Hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the Ubuntu base image, run the container, add a new directory and
    a new file, and then create a new image. In [Chapter 3](ch03.html "Chapter 3. Building
    Images"), *Building Images*, we have seen the creation of the Docker image using
    `Dockerfile`. You may refer to this to check for details of the `Dockerfile` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will run the container with the name `containerforhub` from the base `ubuntu`
    image, as shown in the following terminal code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll create a new directory and file in the `containerforhub` container.
    We will also update the new file with some sample text to test later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build the new image with the `docker commit` command from the container,
    which has just been created. Note that the `commit` command would be executed
    from the host machine, from where the container is running, and not from inside
    this container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a new Docker image available on the local machine with the `vinoddandy/imageforhub`
    name. At this point in time, a new image with `mynewdir` and `mynewfile` is created
    locally.
  prefs: []
  type: TYPE_NORMAL
- en: We will log in to the Docker Hub using the `sudo docker login` command, as discussed
    earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s push this image to the Docker Hub from the host machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we'll `login` to the Docker Hub and verify the image in **Repositories**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the image from the Docker Hub, let''s remove this image from the local
    machine. To remove the image, first we need to stop the container and then delete
    the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also delete the `vinoddandy/imageforhub` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will pull the newly created image from the Docker Hub, and run the new container
    on the local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So, we have pulled the latest image from the Docker Hub and created the container
    with the new image `vinoddandy/imageforhub`. Make a note that the `Unable to find
    image 'vinoddandy/imageforhub' locally` message confirms that the image is downloaded
    from the remote repository of the Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: The text in `mynewfile` verifies that it is the same image, which was created
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will delete the image from the Docker Hub using [https://registry.hub.docker.com/u/vinoddandy/imageforhub/](https://registry.hub.docker.com/u/vinoddandy/imageforhub/)
    and then click on **Delete Repository**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing images to the Docker Hub](graphics/7937OT_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll again create this image but using the `Dockerfile` process. So, let's
    create the Docker image using the `Dockerfile` concept explained in [Chapter 3](ch03.html
    "Chapter 3. Building Images"), *Building Images*, and push this image to the Docker
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Dockerfile` on the local machine is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we build the image locally using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll run the container using this image, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This text in `mynewdir` confirms that the new image is built properly with a
    new directory and a new file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat the `login` process, in the Docker Hub, and push this newly created
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can verify the availability of the image on the Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing images to the Docker Hub](graphics/7937OT_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Automating the building process for images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learnt how to build images locally and push those images to the Docker Hub.
    The Docker Hub also has the capability to automatically build the image from `Dockerfile`
    kept in the repository of GitHub or Bitbucket. Automated builds are supported
    on both private and public repositories of GitHub and Bitbucket. The Docker Hub
    Registry keeps all the automated build images. The Docker Hub Registry is based
    on open source and can be accessed from [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the steps needed to implement the automated build process:'
  prefs: []
  type: TYPE_NORMAL
- en: We first connect the Docker Hub to my GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Login to the Docker Hub, and click on **View Profile** and then navigate to
    **Add Repository** | **Automated Build**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automating the building process for images](graphics/7937OT_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now select **GitHub**:![Automating the building process for images](graphics/7937OT_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once **GitHub** is selected, it will ask for authorization. Here, we will select
    **Public and Private**, as shown here:![Automating the building process for images](graphics/7937OT_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on **Select**, it will now show your GitHub repository:![Automating
    the building process for images](graphics/7937OT_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Select** button of your repository **vinodsinghh/dockerautomationbuild**,
    shown in the preceding screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We choose the default branch and update the tag with `Githubimage`. Also, we
    will keep the location as its default value, which is the root of our Docker Hub,
    as shown in the following screenshot:![Automating the building process for images](graphics/7937OT_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we will click on **Create Repository**, as shown in the preceding screenshot:![Automating
    the building process for images](graphics/7937OT_04_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **build details** to track your build status, as shown in the preceding
    screenshot. It will lead you to the following screenshot:![Automating the building
    process for images](graphics/7937OT_04_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, whenever the `Dockerfile` is updated in GitHub, the automated build gets
    triggered, and a new image will be stored in the Docker Hub Registry. We can always
    check the build history. We can change the `Dockerfile` on the local machine and
    push to GitHub. Then, we can see the automated build link of the Docker Hub at
    [https://registry.hub.docker.com/u/vinoddandy/dockerautomatedbuild/builds_history/82194/](https://registry.hub.docker.com/u/vinoddandy/dockerautomatedbuild/builds_history/82194/).
  prefs: []
  type: TYPE_NORMAL
- en: Private repositories on the Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker Hub provides both a public and private repository. The public repository
    is free to users and private is a paid service. The plans with private repositories
    are available in different sizes, such as a micro, small, medium, or large subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Docker has published their public repository code to open source at [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Normally, enterprises will not like to keep their Docker images either in a
    Docker public or private repository. They prefer to keep, maintain, and support
    their own repository. Hence, Docker also provides the option for enterprises to
    create and install their own repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a repository in the local machine using the registry image provided
    by Docker. We will run the registry container on the local machine, using the
    registry image from Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the automated build section, we built the `vinoddandy/dockerfileforhub`
    image. Let''s tag the image ID `224affbf9a65` to our locally created `registry`
    image. This tagging of the image is needed for unique identification inside the
    local repository. This image `registry` may have multiple variants in the repository,
    so this `tag` will help you identify the particular image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the tagging is done, push this image to a new registry using the `docker
    push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, the new image is available in the local repository. You can now retrieve
    this image from the local registry and run the container. This task is left for
    you to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations and teams on the Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the useful aspects of private repositories is that you can share them
    only with members of your organization or team. The Docker Hub lets you create
    organizations, where you can collaborate with your colleagues and manage private
    repositories. You can learn how to create and manage an organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create an organization on the Docker Hub, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Organizations and teams on the Docker Hub](graphics/7937OT_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside your organization, you can add more organizations, and then add members
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Organizations and teams on the Docker Hub](graphics/7937OT_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The members of your organization and group can collaborate with the organization
    and teams. This feature would be more useful in case of a private repository.
  prefs: []
  type: TYPE_NORMAL
- en: The REST APIs for the Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker Hub provides a REST API to integrate the Hub capabilities through
    programs. The REST API is supported for both user as well as repository management.
  prefs: []
  type: TYPE_NORMAL
- en: 'User management supports the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Login**: This is used for user login to the Docker Hub:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**User Register**: This is used for registration of a new user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Update user**: This is used to update the user''s password and e-mail:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Repository management supports the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a user repository**: This creates a user repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After you create repositories, your repositories will be listed here, as shown
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The REST APIs for the Docker Hub](graphics/7937OT_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Delete a user repository**: This deletes a user repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Create a library repository**: This creates the library repository, and it
    is available only to Docker administrators:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Delete a library repository**: This deletes the library repository, and it
    is available only to Docker administrators:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Update user repository images**: This updates the images of a user''s repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**List user repository images**: This lists the images of a user''s repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Update library repository images**: This updates the images of a library
    repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**List library repository images**: This lists the images of a library repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**Authorize a token for a library repository**: This authorizes a token for
    a library repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Authorize a token for a user repository**: This authorizes a token for a
    user''s repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker images are the most prominent building blocks used for deriving real-world
    Docker containers that can be exposed as a service over any network. Developers
    can find and check images for their unique capabilities, and use them accordingly
    for their own purposes in bringing up highly usable, publicly discoverable, network-accessible,
    and cognitively composable containers. All the crafted images need to be put in
    a public registry repository. In this chapter, we clearly explained how to publish
    images in a repository. We also talked about the trusted repositories and their
    distinct characteristics. Finally, we demonstrated how the REST API for the repository
    can be leveraged to push in and play around with Docker images and user management
    programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: The Docker images need to be stored in a public, controlled, and network-accessible
    location to be readily found and leveraged by worldwide software engineers and
    system administrators. The Docker Hub is being touted as the best-in-class method
    for centrally aggregating, curating, and managing Docker images, originating from
    Docker enthusiasts (internal as well as external). However, enterprises cannot
    afford to keep their Docker images in a public domain, and hence, the next chapter
    is dedicated to expose the steps needed for image deployment and management in
    private IT infrastructures.
  prefs: []
  type: TYPE_NORMAL
