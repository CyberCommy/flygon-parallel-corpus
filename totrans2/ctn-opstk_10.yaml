- en: Best Practices for Containers and OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on the advantages of running your containers
    on OpenStack and best practices for deploying and securing your containers on
    OpenStack. Specifically, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of different OpenStack projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for securing and deploying containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantages of different OpenStack projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack provides the resources and services that container platforms and applications
    can use. It provides standards for building scalable clouds. It also provides
    shared networking, storage, and many other advanced services. It has programmable
    APIs, which can be used to create the infrastructure on demand. Users can use
    different OpenStack services for their container-related workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Users can use Magnum to provision and manage their COEs. Magnum provides the
    multitenant capability, which means that one COE cluster belongs to only one tenant.
    This enables container isolation, and containers belonging to different tenants
    are not scheduled on the same hosts. Magnum has built-in support for Kubernetes,
    Swarm, and Mesos. Magnum also provides TLS support to secure communication between
    the services of a cluster and the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: Users can use Zun to deploy their container workloads directly to OpenStack
    without using COEs. Zun provides full container life cycle management support.
    It also provides Docker networking support via Kuryr. This means that users can
    use Neutron networking for their container and virtual machine workloads, and
    access each other from inside them. Zun also provides OpenStack Cinder support
    for persistent storage in containers. Zun has built-in multitenant capabilities
    and authentication support using KeyStone.
  prefs: []
  type: TYPE_NORMAL
- en: OpenStack Kolla provides support to deploy OpenStack services insides containers.
    It results in new, fast, reliable, and composable building blocks. Kolla simplifies
    deployment and ongoing operations by packaging each service, for the most part,
    as a microservice in a Docker container. Users can use Kolla to deploy OpenStack
    services in Docker containers or Kubernetes pods.
  prefs: []
  type: TYPE_NORMAL
- en: For deploying their containerized application on OpenStack, users can use Murano.
    Murano will create the infrastructure for deployment and deploy the containerized
    applications on them.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for securing and deploying containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containers are replacing virtual machines for running most of the enterprise
    software due to their modularity and portability between servers. However, there
    are some risks associated with containers. One obvious risk is related to distributing
    containers by cloning them as images. If there is any unpatched vulnerability
    in a base image, all clones and applications inheriting from the base image will
    suffer too.
  prefs: []
  type: TYPE_NORMAL
- en: The second and major risk is the default user of the container systems, that
    is, the root user. If an attacker gains access to a root user, which allows an
    escape from the container, he can get access to not only inside the other containers,
    but also to the root privileges in the host operating system. And it can be devastating!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some best practices for securing and deploying containers:'
  prefs: []
  type: TYPE_NORMAL
- en: Users should always use a lightweight Linux operating system. A lightweight
    operating system, reduces the chances of attack. It also makes applying the updates
    a lot easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should keep all container images updated. Keeping all images updated ensures
    that they are free from the latest vulnerabilities. Always keep your images in
    centralized repositories by versioning and tagging them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should automate all security updates. This ensures that patches are applied
    quickly to your infrastructure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should always scan their container images for potential defects. There
    are many scanning tools, such as Clair by CoreOS, Dockscan, and Twistlock, which
    compare container manifests with lists of known vulnerabilities and alert you
    when they detect any vulnerability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should not run extraneous network-facing services in containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should avoid mounting a host directory inside containers, because it may
    give access to some sensitive data on hosts inside containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should always define restrictions on the resource consumption of containers.
    It will help to avoid the consumption of all the resources on the host and starving
    other containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should secure their Docker hosts, and they should not provide sensitive
    information such as the root user's credentials to other users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should run their Docker registry using TLS. Only valid users should be
    able to pull and push images to the registry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users should always monitor the container behaviors for anomalies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can use clear containers or open source Hyper for more security because
    they provide more isolation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we came across several container-related projects in OpenStack
    and their key features. In this chapter, we summarized the advantages of all the
    projects explained in the book for running your container workloads. We also explained
    different security issues in containers and best practices to resolve them.
  prefs: []
  type: TYPE_NORMAL
