- en: Chapter 11. Securing Docker Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have talked a lot about the fast emerging Docker technology in this
    book. It is not a nice and neat finish if Docker-specific security issues and
    solution approaches are not articulated in detail to you. Hence, this chapter
    is specially crafted and incorporated in this book in order to explain about the
    growing security challenges of Docker-inspired containers. We also wanted to throw
    more light on how lingering security concerns are being addressed through a host
    of pioneering technologies, high-quality algorithms, enabling tools, and best
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to deal with the following topics in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Are Docker containers secure?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security features of containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The emerging security approaches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best practices for container security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring unbreakable and impenetrable security for any IT system and business
    services has been one of the prime needs and predominant challenges in the IT
    field for decades. Brilliant minds can identify and exploit all kinds of security
    holes and flaws being carelessly and unknowingly introduced at the system conceptualization
    and concretization stages. This loophole ultimately brings innumerable breaches
    and havocs during IT service delivery. Security experts and engineers, on the
    other hand, try out every kind of trick and technique in order to stop hackers
    in their evil journey. However, it has not been an outright victory so far. Here
    and there, there are some noteworthy intrusions from unknown sources, resulting
    in highly disconcerting IT slowdown and sometimes breakdown. Organizations and
    governments across the globe are, therefore, investing heavily in security research
    endeavors in order to completely decimate all security and safety-related incidents
    and accidents.
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty-of security-specific product vendors and managed security service
    providers in order to minimize the irreparable and indescribable consequences
    of security threats and vulnerabilities on IT systems. Precisely speaking, for
    any existing and emerging technologies, security is the most crucial and critical
    aspect, which is not to be taken lightly.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is a fast-maturing containerization technology in the IT space, and in
    the recent past, the aspect of security is being given prime importance, considering
    the fact that the adoption and adaption of Docker containers is consistently on
    the rise. Furthermore, a stream of purpose-specific and generic containers are
    moving into production environments and hence, the security conundrum acquires
    a special significance. Undoubtedly, there will be a lot focus on the security
    parameters in future Docker platform releases, as the market and mind shares for
    this open source Docker initiative are consistently on the climb.
  prefs: []
  type: TYPE_NORMAL
- en: Are Docker containers secure enough?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Docker containers being meticulously evaluated for production IT environments,
    there are questions being asked in different quarters about the security vulnerabilities
    of containers. Therefore, there is a clarion call to researchers and security
    experts for substantially strengthening container security in order to boost the
    confidence of service providers and consumers. In this section, we are going to
    describe where Docker containers stand as far as the security imbroglio is concerned.
    As containers are being closely examined in synchronization with virtual machines,
    we will start with a few security-related points of **virtual machines** (**VMs**)
    and containers.
  prefs: []
  type: TYPE_NORMAL
- en: The security facets – virtual machines versus Docker containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with understanding how virtual machines differ from containers.
    Typically, virtual machines are heavyweight, and hence bloated, whereas containers
    are lightweight, and hence, slim and sleek.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table captures the renowned qualities of VMs and containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Virtual Machines | Containers |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| A few VMs can run together on a single physical machine (low density). |
    Tens of containers can run on a single physical or virtual machine (high density).
    |'
  prefs: []
  type: TYPE_TB
- en: '| This ensures the complete isolation of VMs for security. | This enables isolation
    at the process level and provides additional isolation using features, such as
    namespaces and cgroups. |'
  prefs: []
  type: TYPE_TB
- en: '| Each VM has its own OS and the physical resources are managed by an underlying
    hypervisor. | Containers share the same kernel as their Docker host. |'
  prefs: []
  type: TYPE_TB
- en: '| For networking, VMs can be linked to virtual or physical switches. Hypervisors
    have buffer for I/O performance improvement, NIC bonding, and so on. | Containers
    leverage standard IPC mechanisms, such as signals, pipes, sockets, and so on,
    for networking. Each container gets its own network stack. |'
  prefs: []
  type: TYPE_TB
- en: 'The following diagram clearly illustrates the structural differences between
    the matured virtualization paradigm and the fast-evolving containerization idea:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The security facets – virtual machines versus Docker containers](graphics/7937OT_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The debate on the security-side of VMs and containers is heating up. There are
    arguments and counter arguments in favor of one or the other. The preceding diagram
    helps us visualize, compare, and contrast the security implications in both paradigms.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the virtualization paradigm, the hypervisors are the centralized
    and core controllers of the virtual machines. Any kind of access to freshly provisioned
    virtual machines needs to go through this hypervisor solution, which stands as
    a solid wall for any kind of unauthenticated, unauthorized, and unethical purposes.
    Therefore, the attack surface of a virtual machine is smaller in comparison to
    containers. The hypervisor has to be hacked or broken into in order to impact
    other VMs.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to the virtualization paradigm, the containers are placed directly
    on top of the kernel of the host system. This lean and mean architecture gives
    a much higher efficiency because it completely eliminates the emulation layer
    of a hypervisor and also offers a much higher container density. However, unlike
    the virtual machine paradigm, the container paradigm does not have many layers,
    so one can easily gain access to the host and other containers if any of the containers
    is compromised. Therefore, the attack surface of a container is larger in comparison
    to virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: However, the designers of the Docker platform have given due consideration to
    this security risk and designed the system to thwart most security risks. In the
    ensuing sections, we will discuss the security that is innately designed in the
    system, the solutions being prescribed to substantially enhance the container
    security, and the best practices and guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: The security features of containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux containers, especially Docker containers, have a few interesting innate
    security-fulfilling features. Therefore, the containerization movement is blessed
    with decent security. In this section, we will discuss these security-related
    features in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker platform promotes a layered security approach to bring in more decisive
    and deft security for containers, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The security features of containers](graphics/7937OT_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As discussed, Docker uses a host of security barricades to stop breaches. That
    is, if one security mechanism gets broken, other mechanisms quickly come in the
    way of containers being hacked. There are a few key areas that are to be examined
    when evaluating the security implications of Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Resource isolation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we all know, containers are being positioned for the era of the microservices
    architecture. That is, in a single system, there can be multiple generic, as well
    as purpose-specific, services that dynamically collaborate with one another for
    realizing easy-to-sustain distributed applications. With the multiplicity and
    heterogeneity of services in a physical system on the climb, it is unsurprising
    that security complexity is bound to shoot up. Therefore, resources need to be
    clearly demarcated and isolated in order to escape from any kind of perilous security
    breach. The widely accepted security approach is to leverage the kernel feature
    of namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kernel namespaces guarantee the much-needed isolation feature for Linux
    containers. The Docker project has added a few additional namespaces for Docker
    containers, and each distinct aspect of a container runs in its own namespace
    and hence, does not have access outside it. The following is a list of namespaces
    that Docker uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The PID namespace**: This is used for a series of actions taken in order
    to achieve process-level isolation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Network namespace**: This is used to have executive control over the
    network interfaces'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The IPC namespace**: This is used to maintain control over access to IPC
    resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Mount namespace**: This is used to manage mount points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The UTS namespace**: This is used to segregate the kernel and version identifiers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel namespaces provide the first and foremost form of isolation. Processes
    running in a container don't affect processes running in another container or
    in the host system. The network namespace ensures that each container gets its
    own network stack, thus restricting access to the interfaces of other containers.
    From the network architecture point of view, all the containers on a given Docker
    host are sitting on bridge interfaces. This means that they are just like physical
    machines connected to a common Ethernet switch.
  prefs: []
  type: TYPE_NORMAL
- en: Resource accounting and control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Containers consume different physical resources in order to deliver their unique
    capabilities. However, the resource consumption has to be disciplined, orderly,
    and hence, critically regulated. When there is a deviation, there is a greater
    possibility of invalidating the containers from performing their assigned tasks
    in time. For example, **Denial of Service** (**DoS**) results if the resource
    usage is not systematically synchronized.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux containers leverage control groups (cgroups) to implement resource
    accounting and auditing to run applications in a frictionless manner. As we all
    know, there are multiple resources that contribute to running the containers successfully.
    They provide many useful metrics and ensure that each container gets its fair
    share of memory, CPU, and disk I/O.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, they guarantee that a single container cannot bring the system
    down by exhausting any one of these resources. This feature helps you fend off
    some DoS attacks. This feature helps in running containers as multi-tenant citizens
    in cloud environments to ensure their uptime and performance. Any kind of exploitation
    by other containers are identified proactively and nipped in the bud so that any
    kind of misadventure gets avoided.
  prefs: []
  type: TYPE_NORMAL
- en: The root privilege – impacts and best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Docker engine efficiently protects the containers from any malicious activities
    by leveraging the recently mentioned resource isolation and control techniques.
    Nonetheless, Docker exposes a few potential security threats because the Docker
    daemon runs with the root privilege. Here, in this section, we list a few security
    risks and the best practices to mitigate them.
  prefs: []
  type: TYPE_NORMAL
- en: The trusted user control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the Docker daemon runs with the root privilege, it has the capability
    to mount any directory from the Docker host to the container, without limiting
    any access rights. That is, you can start a container, where the `/host` directory
    will be the `/` directory on your host, and the container will be able to alter
    your host filesystem without any restriction. This is just an example among a
    myriad of malicious uses. Considering these activities, latter versions of Docker
    restrict access to the Docker daemon through a Unix socket. Docker can be configured
    to access the daemon through the REST API over HTTP, if you explicitly decide
    to do so. However, you should ensure that it will be reachable only from a trusted
    network or VPN or protected with stunnel and client SSL certificates. You can
    also secure them with HTTPS and certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Non-root containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned previously, the Docker containers, by default, run with the root
    privilege and so does the application that runs inside the container. This is
    another major concern from a security perspective because hackers can gain root
    access to the Docker host by hacking the application running inside the container.
    Do not despair, Docker provides a simple yet powerful solution to change the container's
    privilege to a non-root user, thus, thwarting malicious root access to the Docker
    host. This change to non-root user can be accomplished using the `-u` or `--user`
    option of the `docker run` subcommand or the `USER` instruction in the `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will demonstrate this concept by showing you the default
    root privilege of the Docker container and then, continue to modify the root privilege
    to a non-root user using the `USER` instruction in the `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we demonstrate the default root privilege of the Docker container by
    running a simple `id` command in a `docker run` subcommand, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Craft a `Dockerfile` that creates a non-root privilege user and modify the
    default root user to the newly-created non-root privilege user, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Proceed to build the Docker image using the `docker build` subcommand, as depicted
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s verify the current user of the container, using the `id` command
    in a `docker run` subcommand:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Evidently, the container's user, group, the groups are now changed to a non-root
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the default root privilege to a non-root privilege is a very effective
    way of containing malevolent penetration into the Docker host kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the Docker images and the security implications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker typically pulls images from the network, which are usually curated and
    verified at the source. However, for the purpose of backup and restore, the Docker
    images can be saved using the `docker save` subcommand and loaded back using the
    `docker load` subcommand. This mechanism can also be used to load third-party
    images through unconventional means. Unfortunately, in such a practice, the Docker
    engine cannot verify the source and hence, the images can carry malicious code.
    So, as a first shield of safety, Docker extracts the image in a chrooted subprocess
    for privilege separation. Even though Docker ensures the privilege separation,
    it is not recommended to load arbitrary images.
  prefs: []
  type: TYPE_NORMAL
- en: The emerging security approaches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we have discussed the unique security-related kernel characteristics
    and capabilities. Most security holes can be closed down by understanding and
    applying those kernel capabilities. Security experts and exponents, having considered
    the faster and widespread adoption of the raging containerization idea in production
    environments, have brought forth a few more additional security solutions, which
    we will describe in detail. These security methods need to be given utmost importance
    by developers as well as system administrators while developing, deploying, and
    delivering enterprise-class containers in order to nullify any kind of inside
    or outside security attack.
  prefs: []
  type: TYPE_NORMAL
- en: Security-Enhanced Linux for container security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Security-Enhanced Linux** (**SELinux**) is a brave attempt to clean up the
    security holes in Linux containers and is an implementation of a **Mandatory Access
    Control** (**MAC**) mechanism, **Multi-Level security** (**MLS**), and **Multi-Category
    security** (**MCS**) in the Linux kernel. A new collaborative initiative referred
    to as Virtproject, is being built on SELinux, and this is getting integrated with
    Libvirt to provide an adaptable MAC framework for virtual machines, as well as
    containers. This new architecture provides a sheltered separation and safety net
    for containers, as it primarily prevents root processes within the container from
    interfacing and interfering with other processes running outside this container.
    Docker containers are automatically assigned to an SELinux context specified in
    the SELinux policy.'
  prefs: []
  type: TYPE_NORMAL
- en: SELinux always checks for all the allowed operations after the standard **discretionary
    access control** (**DAC**) is completely checked. SELinux can establish and enforce
    rules on files and processes in a Linux system and on their actions based on defined
    policies. As per SELinux specification, files, including directories and devices,
    are referred to as objects. Similarly, processes, such as a user running a command,
    are being termed as subjects. Most operating systems use a DAC system that controls
    how subjects interact with objects and one another. Using DAC on operating systems,
    users can control the permissions of their own objects. For example, on a Linux
    OS, users can make their home directories readable, giving users and subjects
    a handle to steal potentially sensitive information. However, DAC alone is not
    a fool-proof security method and DAC access decisions are solely based on user
    identity and ownership. Generally, DAC simply ignores other security enabling
    parameters, such as the role of the user, the function, the trustworthiness of
    the program, and the sensitivity and integrity of the data.
  prefs: []
  type: TYPE_NORMAL
- en: As each user typically has complete discretion over their files, ensuring a
    system-wide security policy is difficult. Furthermore, every program run by a
    user simply inherits all the permissions granted to the user, and the user is
    free to change the access to his/her files. All these lead to a minimal protection
    against malicious software. Many system services and privileged programs run with
    coarse-grained privileges so that any flaw in any one of these programs can be
    easily exploited and extended to gain catastrophic access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned at the beginning, SELinux adds **Mandatory Access Control** (**MAC**)
    to the Linux kernel. This means that the owners of an object have no control or
    discretion over access to an object. The kernel enforces MAC which is a general-purpose
    MAC mechanism and it needs the ability to enforce administratively-set security
    policies to all the processes and files in the system. These files and processes
    will be used to base decisions on labels containing a variety of security-centric
    information. MAC has the inherent capability to sufficiently protect the system.
    Furthermore, MAC ensures application security against any willful hacking and
    tampering. MAC also provides a strong separation of applications so that any attacked
    and compromised application runs separately.
  prefs: []
  type: TYPE_NORMAL
- en: Next in line is the **Multi-Category Security** (**MCS**). MCS is mainly used
    to protect containers from other containers. That is, any affected container does
    not have the capability to bring down other containers in the same Docker host.
    MCS is based on the Multi-Level Security (MLS) capability and uniquely takes advantage
    of the last component of the SELinux label, *the MLS Field*. In general, when
    containers are launched, the Docker daemon picks a random MCS label. The Docker
    daemon labels all of the content in the container with that MCS label.
  prefs: []
  type: TYPE_NORMAL
- en: When the daemon launches the container process, it tells the kernel to label
    the processes with the same MCS label. The kernel only allows container processes
    to read/write their own content as long as the process MCS label matches the filesystem
    content MCS label. The kernel blocks the container processes from reading/writing
    content that is labeled with a different MCS label. This way, a hacked container
    process is prevented from attacking different containers. The Docker daemon is
    responsible for guaranteeing that no containers use the same MCS label. The cascading
    of errors among containers is prohibited through the adroit usage of MCS.
  prefs: []
  type: TYPE_NORMAL
- en: SELinux-inspired benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SELinux is being positioned as one of the major improvements to bring foolproof
    security to Docker containers. It is abundantly clear that there are several security-related
    advantages with SELinux. As Docker containers natively run on Linux systems, the
    core and critical advancements being made in Linux systems through the elegant
    SELinux approach are easily replicated for Docker containers too. All processes
    and files are accordingly labeled with a type. A type is capable of defining and
    differentiating a domain for processes and a distinct domain for files. Processes
    are fully separated from each other by running them in their own domains, and
    any incursion into others is stringently monitored and nipped in the budding stage
    itself. SELinux empowers us to establish and enforce policy rules to define how
    processes interact with files and with each other. For example, any access is
    allowed only if there is a clearly articulated SELinux policy to allow the desired
    and demarcated access. Precisely speaking, SELinux can come handy in enforcing
    data confidentiality and integrity. SELinux is also beneficial for protecting
    processes from untrusted inputs. It comes with the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fine-grained access control**: SELinux access decisions are based on considering
    all kinds of security-impacting information, such as a SELinux user, role, type,
    and level. SELinux policy can be administratively defined, enforced, and enacted
    at a system level. User discretion in loosening and lightening security and access
    policies is totally eliminated with the comprehensive leverage of the SELinux
    upgrade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduced vulnerability to privilege escalation attacks**: These processes
    generally run in domains and are therefore cleanly separated from each other.
    SELinux policy rules define how processes can access files and other processes.
    That is, if a process is advertently or unknowingly compromised, the attacker
    only has access to the standard functions of that process and to the files the
    process has been configured to have access to. For example, if a web server is
    brought down, an attacker cannot use that process to read other files, unless
    a specific SELinux policy rule was incorporated to allow such access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process separation in SELinux**: These processes are slated to run in their
    own domains, preventing processes from accessing files used by other processes,
    as well as preventing processes from accessing other processes. For example, when
    running SELinux, an attacker cannot compromise a server module (for instance,
    Samba Server) and then use that as an attack vector to read and write to files
    used by other processes, such as backend databases. SELinux comes in handy in
    substantially limiting the damage made by improper configuration mistakes. Domain
    Name System (DNS) servers often replicate information between each other and this
    is called as a zone transfer. Attackers can use zone transfers to update DNS servers
    with false information. SELinux prevents zone files being misused by any hackers.
    We use two types of SELinux enforcement for Docker containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type enforcement**: This protects the host from the processes within the
    container. The default type for running Docker containers is `svirt_lxc_net_t`.
    All container processes run with this type, and all the content within the container
    is labeled with the `svirt_sandbox_file_t` type. The `svirt_lxc_net_t` default
    type is allowed to manage any content labeled with `svirt_sandbox_file_t`. Furthermore,
    `svirt_lxc_net_t` is also able to read/execute most labels under `/usr` on the
    host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A security problem**: If all container processes are run with `svirt_lxc_net_t`
    and all the content is labeled with `svirt_sandbox_file_t`, container processes
    may be allowed to attack processes running in other containers and content owned
    by other containers. This is where Multi Category Security (MCS) enforcement comes
    in handy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-Category Security (MCS)**: This is a solid enhancement to SELinux that
    allows users to label files with categories. These categories are actually used
    to further constrain **Discretionary Access Control** (**DAC**) and **Type Enforcement**
    (**TE**) logic. An example of a category is *Company_Confidential*. Only users
    with access to this category can access files labeled with the category, assuming
    that the existing DAC and TE rules also permit access. The term *categories* refers
    to the same nonhierarchical categories used by **Multi-Level Security** (**MLS**).
    Under MLS, objects and subjects are labeled with security levels. These security
    levels consist of a hierarchical sensitivity value, such as *Top Secret*, and
    zero or more nonhierarchical categories, such as *Crypto*. Categories provide
    compartments within the sensitivity levels and enforce the need-to-know security
    principle. MCS is an adaptation of MLS and represents a policy change. Beyond
    the access control, MCS can be used to display the MCS categories at the top and
    bottom of the printed pages. This may also include a cover sheet to indicate the
    document handling procedures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AppArmor**: This is an effective and easy-to-use Linux application security
    system. AppArmor proactively protects the OS and applications from any external
    or internal threats, even zero-day attacks, by enforcing good behavior and preventing
    even unknown application flaws from being exploited. AppArmor security policies
    completely define what system resources individual applications can access and
    with what privileges. A number of default policies are included in AppArmor, and
    using a combination of advanced static analysis and learning-based tools, AppArmor
    policies, for even very complex applications, can be deployed successfully in
    a matter of hours. AppArmor is available for Docker containers, on systems that
    support it. AppArmor provides enterprise-class, host-intrusion prevention, and
    protects the operating system and applications from the harmful effects of internal
    or external attacks, malicious applications, and viruses. As a result, businesses
    can protect mission-critical data, reduce system administration costs, and ensure
    compliance with government regulations. Comprehensive enterprise-wide network
    application security requires attention to both users and applications. This is
    one prominent option available to bring in impenetrable security for Docker containers
    and applications present inside the containers. Policies are turning out to be
    a powerful mechanism in ensuring container security. Policy formulation and the
    automated enforcement of policies go a long way in guaranteeing the safety of
    containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best practices for container security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are robust and resilient security solutions to boost the confidence of
    providers, as well as users, toward embracing the containerization journey with
    all the clarity and alacrity. In this section, we provide a number of tips, best
    practices, and key guidelines collected from different sources in order to enable
    security administrators and consultants to tightly secure Docker containers. Essentially,
    if containers are running in a multitenant system and you are not using the proven
    security practices, then there are definite dangers lurking around the security
    front. As mentioned previously, security breaches can happen at different service
    levels and hence, security architects need to figure out what can go wrong and
    prescribe proven and pioneering security-preserving methods. Security visionaries
    and luminaries advise the following easy-to-understand-and-follow practices to
    reap the originally envisaged benefits of containers:'
  prefs: []
  type: TYPE_NORMAL
- en: Do away with the privileged access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run your containers and services as non-root as much as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first and foremost advice is not to run random and untested Docker images
    on your system. Strategize and leverage trusted repositories of Docker images
    and containers to subscribe and use applications and data containers for application
    development, packaging, shipping, deployment, and delivery. It is clear from past
    experiences that any untrusted containers that are downloaded from the public
    domain may result in malevolent and messy situations. Linux distributions, such
    as **Red Hat Enterprise Linux** (**RHEL**), have the following mechanisms in place
    in order to assist administrators to ensure the utmost security:'
  prefs: []
  type: TYPE_NORMAL
- en: A trusted repository of software to be downloaded and used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security updates and patches to fix vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A security response team to find and manage vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A team of engineers to manage/maintain packages and work on security enhancements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common criteria certification to check the security of the operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned previously, the biggest problem is that not everything in Linux
    is namespaced. Currently, Docker uses five namespaces to alter the process' view
    of any system—process, network, mount, hostname, and shared memory. While these
    give the users some level of security, it is by no means a comprehensive one such
    as KVM. In a KVM environment, processes in a virtual machine do not talk to the
    host kernel directly. They do not have any access to kernel filesystems. Device
    nodes can talk to the VMs kernel, but not to hosts. Therefore, in order to have
    a privilege escalation out of a VM, the process has to subvert the VM's kernel,
    find an enabling vulnerability in the hypervisor, break through SELinux Controls
    (sVirt), and attack the host's kernel. In the container landscape, the approach
    is to protect the host from the processes within the container and to protect
    containers from other containers. It is all about the combination or clustering
    together of multiple security controls to defend containers and their contents.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, we want to put in as many security barriers as possible to prevent
    any sort of break out. If a privileged process can break out of one containment
    mechanism, the idea is to block them with the next barrier in the hierarchy. With
    Docker, it is possible to take advantage of as many security mechanisms of Linux
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are possible security measures that can be taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Filesystem protections**: Filesystems need to be read-only in order to escape
    from any kind of unauthorized write. That is, privileged container processes cannot
    write to them and do not affect the host system either. Generally, most of the
    applications need not write anything to their filesystems. There are several Linux
    distributions with read-only filesystems. It is therefore possible to block the
    ability of the privileged container processes from remounting filesystems as read
    and write. It is all about blocking the ability to mount any filesystems within
    the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Copy-on-write filesystems**: Docker has been using **Advanced Multi-layered
    unification Filesystem** (**AuFS**) as a filesystem for containers. AuFS is a
    layered filesystem that can transparently overlay one or more existing filesystems.
    When a process needs to modify a file, AuFS first creates a copy of that file
    and is capable of merging multiple layers into a single representation of a filesystem.
    This process is called copy-on-write, and this prevents one container from seeing
    the changes of another container even if they write to the same filesystem image.
    One container cannot change the image content to affect the processes in another
    container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The choice of capabilities**: Typically, there are two ways to perform permission
    checks: privileged processes and unprivileged processes. Privileged processes
    bypass all sorts of kernel permission checks, while unprivileged processes are
    subject to full permission checking based on the process''s credentials. The recent
    Linux kernel divides the privileges traditionally associated with the super-user
    into distinct units known as capabilities, which can be independently enabled
    and disabled. Capabilities are a per-thread attribute. Removing capabilities can
    bring forth several positive changes in Docker containers. Invariably, capabilities
    decide the Docker functionality, accessibility, usability, security, and so on.
    Therefore, it requires much thought while embarking on the journey of addition,
    as well as removal of capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keeping systems and data secure**: Some security issues need to be addressed
    before enterprises and service providers use containers in production environments.
    Containerization will eventually make it easier to secure applications for the
    following three reasons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A smaller payload reduces the surface area for security flaws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of incrementally patching the operating system, you can update it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By allowing a clear separation of concerns, containers help IT and application
    teams collaborate purposefully
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IT department is responsible for the security flaws associated with the
    infrastructure. The application team fixes flaws inside the container and is also
    responsible for runtime dependencies. Easing the tension between IT and applications
    development teams helps smooth the transition to a hybrid cloud model. The responsibilities
    of each team are clearly demarcated in order to secure both containers and their
    runtime infrastructures. With such a clear segregation, proactively identifying
    any visible and invisible endangering security ordeals and promptly eliminating
    it in time, policy engineering and enforcement, precise and perfect configuration,
    leveraging appropriate security-unearthing and mitigation tools, and so on, are
    being systematically accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: '**Leverage linux kernel capabilities**: An average server (bare metal or virtual
    machine) needs to run a bunch of processes as root. These typically include `ssh`,
    `cron`, `syslogd`, hardware management tools (for example, load modules), network
    configuration tools (for example, handling DHCP, WPA, or VPNs), and so on. A container
    is very different because almost all of these tasks are being handled by the infrastructures
    on which containers are to be hosted and run. There are several best practices,
    key guidelines, technical knowhow, and so on, on various blogs authored by security
    experts. You can find some of the most interesting and inspiring security-related
    details at [https://docs.docker.com/articles/security/](https://docs.docker.com/articles/security/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital signature verification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker, the popular open source container company, has announced that it has
    added the digital signature verification to Docker images. This will ensure that
    when you download a containerized application from an official Docker repository,
    you get the real version. At this point in time, the Docker engine automatically
    checks the provenance and integrity of all the images in the official repository
    using digital signatures. A digital signature brings on an additional trust on
    Docker images. That is, the particular Docker image was not tampered or twisted,
    and hence, it is ready to be fully used with all the confidence and clarity.
  prefs: []
  type: TYPE_NORMAL
- en: This newly-added cryptographic verification is used to provide users with an
    additional assurance of security. In the future, there will be features, such
    as publisher authentication, image integrity and authorization, **public key infrastructure**
    (**PKI**) management, and many more for both image publishers, as well as consumers.
    If an official image is corrupted or tampered with, Docker will instantaneously
    issue a warning. At this point in time, the Docker engine will not prevent any
    affected images from running and nonofficial images are not verified either. This
    will change the future versions as the Docker community hardens the code and irons
    out the inevitable usability quirks.
  prefs: []
  type: TYPE_NORMAL
- en: When developing an application, you sometimes need to take a look at it while
    it is running. A number of tools, such as `nsinit` and `nsenter`, have sprung
    up recently to help developers debug their containerized applications. Some users
    have taken to running an init process to spawn `sshd` along with their application
    to allow them access, which creates risk and overhead.
  prefs: []
  type: TYPE_NORMAL
- en: Secure deployment guidelines for Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker containers are increasingly hosted in production environments to be publicly
    discovered and used by many. Especially, with the faster adoption of cloud technologies,
    the IT environments of worldwide organizations and institutions are getting methodically
    optimized and transformed to deftly and decisively host a wider variety of virtual
    machines and containers. There are new improvements and enablements, such as Flocker
    and Clocker, in order to speed up the process of taking containers to cloud environments
    (private, public, hybrid, and community). There are recommendations that have
    to be followed while deploying containers. As we all know, containers remarkably
    reduce the overhead by allowing developers and system administrators to seamlessly
    deploy containers for applications and services required for business operations.
    However, because Docker leverages the same kernel as the host system to reduce
    the need for resources, containers can be exposed to significant security risks
    if not adequately configured. There are a few carefully annotated guidelines to
    be strictly followed by both developers and system administrators while deploying
    containers. For example, [https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)
    elaborates in a tabular form with all the right details.
  prefs: []
  type: TYPE_NORMAL
- en: It is an indisputable truth that the software flaws in distributed and complex
    applications open the way for intelligent attackers and hackers to break into
    systems that host critical, confidential, and customer data. Therefore, security
    solutions are being insisted and ingrained across all the layers in the IT stack,
    and hence, there arises many types of security vulnerabilities at different levels
    and layers. For example, perimeter security solves only part of the problem because
    the changing requirements are mandate for allowing network access to employees,
    customers, and partners. Similarly, there are firewalls, intrusion detection and
    prevention systems, application delivery controllers (ADCs), access controls,
    multifactor authentication and authorization, patching, and so on. Then, for securing
    data while in transit, persistence, and being used by applications, there are
    encryption, steganography, and hybrid security models. All these are reactive
    and realistic mechanisms, but the increasing tendency is all about virtual businesses
    insisting on proactive and preemptive security methods. As IT is tending and trending
    toward the much-anticipated virtual IT world, the security issues and implications
    are being given extra importance by security experts.
  prefs: []
  type: TYPE_NORMAL
- en: The future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There will be many more noteworthy improvisations, transformations, and disruptions
    in the containerization space in the days to come. Through a host of innovations
    and integrations, the Docker platform is being positioned as the leading one for
    strengthening the containerization journey. The following are the prime accomplishments
    through the smart leverage of the Docker technology:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengthening the distributed paradigm**: While computing is going to be
    increasingly distributed and federated, the microservices architecture (MSA) will
    play a very decisive and deeper role in IT. Docker containers are emerging as
    the most efficient ones for hosting and delivering a growing array of microservices.
    With container orchestration technologies and tools gaining greater recognition,
    microservices (specific, as well as generic) get identified, matched, orchestrated,
    and choreographed to form business-aware composite services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Empowering the cloud paradigm**: The cloud idea is strongly gripping the
    IT world to bring in the much-insisted IT infrastructure rationalization, simplification,
    standardization, automation, and optimization. The abstraction and virtualization
    concepts, which are the key to the unprecedented success of the cloud paradigm,
    are penetrating into every kind of IT module. Originally, it started with server
    virtualization and now, it is all about storage and networking virtualization.
    With all the technological advancements around us, there is a widespread keenness
    to realize software-defined infrastructures (software-defined compute, storage,
    and networking). The Docker engine, the core and critical portion of the Docker
    platform, is duly solidified in order to bring in the necessary eligibility for
    containers to run on software-defined environments without any hitch or hurdle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabling the IT elasticity, portability, agility, and adaptability**: Containers
    are emerging as the flexible and futuristic IT building blocks for bringing in
    more resiliency, versatility, elegance, and suppleness. The faster provisioning
    of IT resources to ensure higher availability and real-time scalability, the easy
    elimination of all kinds of frictions between development and operation teams,
    the guarantee of native performance of IT, the realization of organized and optimized
    IT for enhanced IT productivity, and so on are some of the exemplary things being
    visualized for Docker containers toward the smarter IT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Containers will be a strategic addition to virtual machines (VMs) and bare metal
    servers in order to bring in deeper IT automation, acceleration, and augmentation,
    thereby the much-hyped and hoped business agility, autonomy, and affordability
    will be achieved.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is definitely a challenge and an important aspect not to be sidestepped.
    If a container gets compromised, then bringing down the container host is not
    a difficult task. Thus, ensuring security for containers and then hosts is indispensable
    to the flourishing of the containerization concept, especially when the centralization
    and federation of IT systems is on the rise. In this chapter, we specifically
    focused on the sickening and devastating security issues of Docker containers
    and explained the ways and means of having foolproof security solutions for containers
    that host dynamic, enterprise-class, and mission-critical applications. In the
    days to come, there will be fresh security approaches and solutions in order to
    ensure impenetrable and unbreakable security for Docker containers and hosts,
    as the security of containers and their contents is of utmost importance to service
    providers, as well as consumers.
  prefs: []
  type: TYPE_NORMAL
