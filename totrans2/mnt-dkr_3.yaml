- en: Chapter 3. Advanced Container Resource Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, we looked at how you can use the API built into Docker
    to gain an insight to what resources your containers are running. Now, we are
    to see how we can take it to the next level by using cAdvisor from Google. In
    this chapter, you will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to install cAdvisor and start collecting metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn all about the web interface and real-time monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What your options are for shipping metrics to a remote Prometheus database for
    long-term storage and trend analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is cAdvisor?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google describes cAdvisor as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"cAdvisor (Container Advisor) provides container users an understanding of
    the resource usage and performance characteristics of their running containers.
    It is a running daemon that collects, aggregates, processes, and exports information
    about running containers. Specifically, for each container, it keeps resource
    isolation parameters, historical resource usage, histograms of complete historical
    resource usage, and network statistics. This data is exported by a container and
    is machine-wide."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The project started off life as an internal tool at Google for gaining an insight
    into containers that had been launched using their own container stack.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google's own container stack was called "Let Me Contain That For You" or lmctfy
    for short. The work on lmctfy has been installed as a Google port functionality
    over to libcontainer that is part of the Open Container Initiative. Further details
    on lmctfy can be found at [https://github.com/google/lmctfy/](https://github.com/google/lmctfy/).
  prefs: []
  type: TYPE_NORMAL
- en: cAdvisor is written in Go ([https://golang.org](https://golang.org)); you can
    either compile your own binary or you can use the pre-compiled binary that are
    supplied via a container, which is available from Google's own Docker Hub account.
    You can find this at [http://hub.docker.com/u/google/](http://hub.docker.com/u/google/).
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, cAdvisor will sit in the background and capture metrics that
    are similar to that of the `docker stats` command. We will go through these stats
    and understand what they mean later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: cAdvisor takes these metrics along with those for the host machine and exposes
    them via a simple and easy-to-use built-in web interface.
  prefs: []
  type: TYPE_NORMAL
- en: Running cAdvisor using a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of ways to install cAdvisor; the easiest way to get started
    is to download and run the container image that contains a copy of a precompiled
    cAdvisor binary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running cAdvisor, let''s launch a fresh vagrant host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using a backslash**'
  prefs: []
  type: TYPE_NORMAL
- en: As we have a lot options to pass to the `docker run` command, we are using `\`
    to split the command over multiple lines so it's easier to follow what is going
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have access to the host machine, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should now have a cAdvisor container up and running on your host machine.
    Before we start, let's look at cAdvisor in more detail by discussing why we have
    passed all the options to the container.
  prefs: []
  type: TYPE_NORMAL
- en: The cAdvisor binary is designed to run on the host machine alongside the Docker
    binary, so by launching cAdvisor in a container, we are actually isolating the
    binary in its down environment. To give cAdvisor access to the resources it requires
    on the host machine, we have to mount several partitions and also give the container
    privileged access to let the cAdvisor binary think it is being executed on the
    host machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a container is launched with `--privileged`, Docker will enable full access
    to devices on the host machine; also, Docker will configure both AppArmor or SELinux
    to allow your container the same access to the host machine as a process running
    outside the container will have. For information on the `--privileged` flag, see
    this post on the Docker blog at [http://blog.docker.com/2013/09/docker-can-now-run-within-docker/](http://blog.docker.com/2013/09/docker-can-now-run-within-docker/).
  prefs: []
  type: TYPE_NORMAL
- en: Compiling cAdvisor from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous section, cAdvisor really ought to be executed on
    the host machine; this means, you may have to use a case to compile your own cAdvisor
    binary and run it directly on the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile cAdvisor, you will need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Go and Mercurial on the host machine—version 1.3 or higher of Go is
    needed to compile cAdvisor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the path for Go to work from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grab the source code for cAdvisor and godep.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the path for your Go binaries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the cAdvisor binary using godep to source the dependencies for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the binary to /`usr/local/bin/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download either an `Upstart` or `Systemd` script and launch the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you followed the instructions in the previous section, you will already
    have a cAdvisor process running. Before compiling from source, you should start
    with a clean host; let''s log out of the host and launch a fresh copy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To build cAdvisor on the CentOS 7 host, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Ubuntu 14.04 LTS host, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You should now have a running cAdvisor process. You can check this by running
    `ps aux | grep cadvisor` and you should see a process with a path of `/usr/local/bin/cadvisor`
    running.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you have cAdvisor running; what do you need to do to configure the service
    in order to start collecting metrics? The short answer is, nothing at all. When
    you started the cAdvisor process, it instantly started polling your host machine
    to find out what containers are running and gathered information on both the running
    containers and your host machine.
  prefs: []
  type: TYPE_NORMAL
- en: The Web interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'cAdvisor should be running on the `8080` port; if you open `http://192.168.33.10:8080/`,
    you should be greeted with the cAdvisor logo and an overview of your host machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Web interface](../images/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This initial page streams live stats about the host machine, though each section
    is repeated when you start to drill down and view the containers. To start with,
    let's look at each section using the host information.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This overview section gives you a bird''s-eye view of your system; it uses
    gauges so you can quickly get an idea of which resources are reaching their limits.
    In the following screenshot, there is very little in the way of CPU utilization
    and the file system usage is relatively low; however, we are using 64% of the
    available RAM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview](../images/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot displays a combined view of the output of the `ps
    aux`, `dockerps` and `top` commands we used in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Processes](../images/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what each column heading means:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: This shows which user is running the process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PID**: This is the unique process ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PPID**: This is the **PID** of the parent process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start Time**: This shows what time the process started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU %**: This is the percentage of the CPU the process is currently consuming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MEM %**: This is the percentage of the RAM the process is currently consuming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RSS**: This shows how much of the main memory the process is using'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Size**: This shows how much of the virtual memory the process is
    using'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: This shows the current status of the process; this are the standard
    Linux process state codes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running Time**: This shows how long the process has been running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command**: This shows which command the process is running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container**: This shows which container the process is attached to; the container
    listed as `/` is the host machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As there could be several hundred processes active, this section is split into
    pages; you can navigate to these with the buttons on the bottom-left. Also, you
    can sort the processes by clicking on any of the headings.
  prefs: []
  type: TYPE_NORMAL
- en: CPU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following graph shows the CPU utilization over the last minute:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CPU](../images/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what each term means:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total Usage**: This shows an aggregate usage across all cores'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usage per Core**: This graph breaks down the usage per core'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usage Breakdown** (not shown in the preceding screenshot): This shows aggregate
    usage across all cores, but breaks it down to what is being used by the kernel
    and what is being used by the user-owned processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Memory** section is split into two parts. The graph tells you the total
    amount of memory used by all the processes for the host or container; this is
    the total of the hot and cold memory. The **Hot** memory is the current working
    set: pages that have been touched by the kernel recently. The **Cold** memory
    is the page that hasn''t been touched for a while and could be reclaimed if needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Usage Breakdown** gives a visual representation of the total memory in
    the host machine, or allowance in the container, alongside the total and hot usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Memory](../images/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section shows the incoming and outgoing traffic over the last minute.
    You can change the interface using the drop-down box on the top-left. There is
    also a graph that shows any networking errors. Typically, this graph should be
    flat. If it isn''t, then you will be seeing performance issues with your host
    machine or container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network](../images/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final section gives a break down of the filesystem usage. In the following
    screenshot, `/dev/sda1` is the boot partition, `/dev/sda3` is the main filesystem,
    and `/dev/mapper/docker-8…` is an aggregate of the write file systems of your
    running containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filesystem](../images/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing container stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the top of the page, there is a link of your running containers; you can
    either click on the link or go directly to `http://192.168.33.10:8080/docker/`.
    Once the page loads, you should see a list of all your running containers, and
    also a detailed overview of your Docker process, and finally a list of the images
    you have downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Subcontainers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Subcontainers shows a list of your containers; each entry is a clickable link
    that will take you to a page that will give you the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Isolation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU**: This shows you the CPU allowances of the container; if you have not
    set any resource limits, you will see the host''s CPU information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory**: This shows you the memory allowances of the container; if you have
    not set any resource limits, your container will show an unlimited allowance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Usage:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overview**: This shows gauges so you can quickly see how close to any resource
    limits you are'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processes**: This shows the processes for just your selected container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU**: This shows the CPU utilization graphs isolated to just your container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory**: This shows the memory utilization of your container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Driver status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The driver gives the basic stats on your main Docker process, along with the
    information on the host machine's kernel, host name, and also the underlying operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: It also gives information on the total number of containers and images. You
    may notice that the total number of images is a much larger figure than you expected
    to see; this is because it is counting each file system as an individual image.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details on Docker images, see the Docker user guide at [https://docs.docker.com/userguide/dockerimages/](https://docs.docker.com/userguide/dockerimages/).
  prefs: []
  type: TYPE_NORMAL
- en: It also gives you a detailed breakdown of your storage configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, you get a list of the Docker images which are available on the host
    machine. It lists the Repository, Tag, Size, and when the image was created, along
    with the images' unique ID. This lets you know where the image originated from
    (Repository), which version of the image you have downloaded (Tag) and how big
    the image is (Size).
  prefs: []
  type: TYPE_NORMAL
- en: This is all great, what's the catch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So you are maybe thinking to yourself that all of this information available
    in your browser is really useful; being able to see real-time performance metrics
    in an easily readable format is a really plus.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest drawback of using the web interface for cAdvisor, as you may have
    noticed, is that it only shows you one minute's worth of metrics; you can quite
    literally see the information disappearing in real time.
  prefs: []
  type: TYPE_NORMAL
- en: As a pane of glass gives a real-time view into your containers, cAdvisor is
    a brilliant tool; if you want to review any metrics that are older than one minute,
    you are out of luck.
  prefs: []
  type: TYPE_NORMAL
- en: That is, unless you configure somewhere to store all of your data; this is where
    Prometheus comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So what''s Prometheus? Its developers describe it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Prometheus is an open-source system''s monitoring and alerting toolkit built
    at SoundCloud. Since its inception in 2012, it has become the standard for instrumenting
    new services at SoundCloud and is seeing growing external usage and contributions.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OK, but what does that have to do with cAdvisor? Well, Prometheus has quite
    a powerful database backend that stores the data it imports as a time series of
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wikipedia describes a time series as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"A time series is a sequence of data points, typically consisting of successive
    measurements made over a time interval. Examples of time series are ocean tides,
    counts of sunspots, and the daily closing value of the Dow Jones Industrial Average.
    Time series are very frequently plotted via line charts."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://en.wikipedia.org/wiki/Time_series](https://en.wikipedia.org/wiki/Time_series)*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'One of the things cAdvisor does, by default, is expose all the metrics it is
    capturing on a single page at `/metrics`; you can see this at `http://192.168.33.10:8080/metrics`
    on our cAdvisor installation. The metrics are updated each time the page is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prometheus](../images/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, this is just a single long page
    of raw text. The way Prometheus works is that you configure it to scrape the `/metrics`
    URL at a user-defined interval, let's say every five seconds; the text is in a
    format that Prometheus understands and it is ingested into the Prometheus's time
    series database.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that, using Prometheus's powerful built-in query language,
    you can start to drill down into your data. Let's look at getting Prometheus up
    and running.
  prefs: []
  type: TYPE_NORMAL
- en: Launching Prometheus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like cAdvisor there are several ways you can launch Prometheus. To start with,
    we will launch a container and inject our own configuration file so that Prometheus
    knows where our cAdvisor endpoint is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have launched the container, Prometheus will be accessible on the
    following URL: `http://192.168.33.10:9090`. When you first load the URL, you will
    be taken to a status page; this gives some basic information on the Prometheus
    installation. The important part of this page is the list of targets. This lists
    the URL that Prometheus will be scrapping to capture metrics; you should see your
    cAdvisor URL listed with a state of **HEALTHY**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching Prometheus](../images/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another information page contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Runtime information**: This displays how long Prometheus has been up and
    polling data, if you have configured an endpoint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build information**: This contains the details of the version of Prometheus
    that you have been running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: This is a copy of the configuration file we injected into
    the container when it was launched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rules**: This is a copy of any rules we injected; these will be used for
    alerting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Startup flags**: This shows all the runtime variables and their values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying Prometheus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we only have a few containers up and running at the moment, let's launch
    one that runs Redis so we can start to look at the query language built into Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the official Redis image for this and as we are only going to use
    this as an example we won''t need to pass it any user variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We now have a container called `my-redis-server` running. cAdvisor should already
    be exposing metrics about the container to Prometheus; let's go ahead and see.
    In the Prometheus web interface, go to the **Graph** link in the menu at the top
    of the page. Here, you will be presented with a text box into which you can enter
    your query. To start with, let's look at the CPU usage of the Redis container.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the box, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, after clicking on **Execute**, you should have two results returned,
    listed in the **Console** tab of the page. If you remember, cAdvisor records the
    CPU usage of each of the CPU cores that the container has access to, which is
    why we have two values returned, one for "cpu00" and one for "cpu01". Clicking
    on the **Graph** link will show you results over a period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Querying Prometheus](../images/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, we now have access to the usage
    graphs for the last 25 minutes, which is about how long ago I launched the Redis
    instance before generating the graph.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Also, when creating one of the graphs using the query tool in the main application,
    you can install a separate Dashboard application. This runs in a second container
    that connects to your main Prometheus container using the API as a data source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start the Dashboard container, we should initialize a SQLite3 database
    to store our configuration. To ensure that the database is persistent, we will
    store this on the host machine in `/tmp/prom/file.sqlite3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have initialized the database, we can launch the Dashboard application
    properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The application should now be accessible at `http://192.168.33.10:3000/`. The
    first thing we need to do is set up the data source. To do this, click on the
    **Servers** link at the top of the screen and then click on **New Server**. Here,
    you will be asked to provide the details of your Prometheus server. Name the server
    and enter the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `cAdvisor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL**: `http://192.168.33.10:9090`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Type**: `Prometheus`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you click on **Create Server**, you should receive a message saying **Server
    was successfully created**. Next up, you need to create a `directory`; this is
    where your dashboards will be stored.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Dashboards** link in the top menu and then click on **New directory**
    and create one called `Test directory`. Now, you are ready to start creating Dashboards.
    Click on **New Dashboard**, call it **My Dashboard**, place it in `Test directory`.
    Once you click on **Create Dashboard**, you will be taken to the preview screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you can build up dashboards using the control in the top right-hand
    side of each section. To add data, you simply enter the query you would like to
    see in the dashboard section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dashboard](../images/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For detailed information on how to create Dashboards, see the **PROMDASH** section
    of the Prometheus documentation at [http://prometheus.io/docs/visualization/promdash/](http://prometheus.io/docs/visualization/promdash/).
  prefs: []
  type: TYPE_NORMAL
- en: The next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the moment, we are running Prometheus in a single container and its data
    is being stored within that same container. This means, if for any reason the
    container is terminated, our data is lost; it also means that we can't upgrade
    without loosing out data. To get around this problem, we can create a data volume
    container.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A data volume container is a special type of container that only exists as storage
    for other containers. For more details, see the Docker user guide at [https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container](https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container).
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s make sure we have removed all the running Prometheus containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, let''s create a data container called `promdata`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, launch Prometheus again, this time, using the data container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will ensure that, if you have to upgrade or relaunch your container, the
    metrics you have been capturing are safe and sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have only touched on the basics of using Prometheus in this section of the
    book; for further information on the application, I recommend the following links
    as a good starting point:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation: [http://prometheus.io/docs/introduction/overview/](http://prometheus.io/docs/introduction/overview/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twitter: [https://twitter.com/PrometheusIO](https://twitter.com/PrometheusIO)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project page: [https://github.com/prometheus/prometheus](https://github.com/prometheus/prometheus)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google groups: [https://groups.google.com/forum/#!forum/prometheus-developers](https://groups.google.com/forum/#!forum/prometheus-developers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatives?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some alternatives to Prometheus. One such alternative is InfluxDB
    that describes itself as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*An open-source distributed time series database with no external dependencies.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: However, at the time of writing, cAdvisor is not currently compatible with the
    latest version of InfluxDB. There are patches in the codebase for cAdvisor; however,
    these are yet to make it through to the Google-maintained Docker Image.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on InfluxDB and it's new visualization complain application
    Chronograf, see the project website at [https://influxdb.com/](https://influxdb.com/)
    and for more details on how to export cAdvisor statistics to InfluxDB, see the
    supporting documentation for cAdvisor at [https://github.com/google/cadvisor/tree/master/docs](https://github.com/google/cadvisor/tree/master/docs).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to take the viewing real-time statistics of
    our containers off the command line and into the web browser. We explored some
    different methods to install Google's cAdvisor application and also how to use
    its web interface to keep an eye on our running containers. We also learned how
    to capture metrics from cAdvisor and store them using Prometheus, a modern time
    series database.
  prefs: []
  type: TYPE_NORMAL
- en: The two main technologies we have covered in this chapter have only been publically
    available for less than twelve months. In the next chapter, we will look at using
    a monitoring tool that has been in a SysAdmins toolbox for over 10 years—Zabbix.
  prefs: []
  type: TYPE_NORMAL
