- en: Zun â€“ Container Management in OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about the OpenStack project for managing containers,
    Zun. Zun is the only solution available in OpenStack that allows its users to
    manage their application containers, backed by different technologies with the
    goodness of other OpenStack components such as Cinder, Glance, and Neutron. Zun
    provides a strong platform for running containerized applications on top of OpenStack
    IaaS.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Zun
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk-through
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zun DevStack installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Zun
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zun is an OpenStack service started in the Mitaka cycle developed by the members
    of the Magnum team. A decision was made at the OpenStack Austin Summit in 2016
    to create a new project to allow for the management of containers and let the
    Magnum Container Infrastructure Management service manage only the infrastructure
    for running containers. The result was the Zun project.
  prefs: []
  type: TYPE_NORMAL
- en: Zun is a container management service for OpenStack that provides APIs to manage
    containers abstracted by different technologies at the backend. Zun supports Docker
    as the container runtime tool. Today, Zun integrates with many OpenStack services
    such as Neutron for networking, Glance for managing container images, and Cinder
    for providing volume to the containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Zun has various add-ons over Docker, which makes it a powerful solution for
    container management. Here is a list of some of the salient features of Zun:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides a standard API for the complete life cycle management of containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides KeyStone-based multi-tenant security and auth management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Docker with runc and clear container for managing containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The support of clear container provides higher security by packing an individual
    container in a VM with a small footprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Cinder to provide volume for containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kuryr-based networking for container-level isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports container orchestration via Heat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container composition known as capsules lets user run multiple containers with
    related resources as a single unit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports the SR-IOV feature that enables the sharing of a physical PCIe device
    to be shared across VMs and containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports interactive sessions with containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zun allows users to run heavy workloads with dedicated resources by exposing
    CPU sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, we will look at the various objects available in
    the Zun system.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The container is the most important resource in Zun. A container in Zun represents
    any application container run by the users. A container object stores information
    such as the image, command, workdir, host, and so on. Zun is an extendable solution;
    it can support other container runtime tools as well. It has a driver-based implementation
    for each tool. The Docker driver in Zun manages containers via Docker. Containers
    in Zun support many advanced operations including CRUD operations such as create,
    start, stop, pause, delete, update, kill, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Images in Zun are container images. These images are managed either by Docker
    Hub or Glance. Users can download the image and save them to Glance prior to container
    creation to save time. An image object stores information such as the image name,
    tag, size, and so on. Operations supported for images are upload, download, update,
    and search images.
  prefs: []
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A service in Zun represents the `zun-compute` service. Zun can have multiple
    instances of `zun-compute` services running to support scalability. This object
    is used to establish the state of the compute services running in the Zun cluster.
    A service stores information such as the state, enabled or disabled, last known
    time, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A host in Zun represents the compute node's resources. The compute node is the
    physical machine where the containers run. This is used to establish the list
    of available, used resources in Zun. A host object in Zun stores useful information
    about a compute node such as total memory, free memory, total number of running,
    stopped, or paused containers, total CPUs, free CPUs, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Capsules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A capsule in Zun represents a composition unit which contains multiple containers
    and other related resources. Containers in a capsule share resources among themselves
    and are tightly coupled to work together as a single unit. A capsule object stores
    information such as the container list, CPU, memory, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Container drivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zun is designed to be an extendable solution for managing containers on top
    of OpenStack. Zun supports Docker to manage containers. It aims to support multiple
    other tools in the future as well, such as Rocket. To support this, Zun has a
    collection of container drivers, which can be implemented with many other runtime
    tools and made available as solutions with Zun. Users can choose to manage their
    containers with their choice of tool.
  prefs: []
  type: TYPE_NORMAL
- en: Image drivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned that Zun can support multiple container runtime tools to manage
    containers. Similarly, it supports multiple image drivers for the managing of
    container images such as Glance driver and Docker driver. The image driver is
    also configurable; users can choose any of the available solutions for their use
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Network drivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to communicate between two containers and between a container and
    VM is provided by the network driver in Zun. Zun has a Kuryr driver for managing
    all of the network resources for containers. It supports operations such as creating
    and deleting a network, connecting to and disconnecting a container from a network,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zun has many advanced features in addition to the basic management of containers.
    In this section, we will talk about some of the advanced features present in Zun.
    There are many other features in progress, such as SRIOV networking, PCIe devices,
    and so on, which are referred to in the Zun documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Cinder integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zun supports the attaching of persistent storage to the containers which exist
    even after the container exits. This storage can be used to store large amounts
    of data outside the host, which is more reliable if the host goes down. This support
    is enabled in Zun via Cinder. Users can mount and unmount Cinder volumes to their
    containers. The users first need to create the volume in Cinder and then provide
    the volume while creating the container.
  prefs: []
  type: TYPE_NORMAL
- en: Container composition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zun supports the creation of multiple containers as a single unit. This unit
    is known as a capsule in Zun. This concept is very similar to pods in Kubernetes.
    A capsule contains multiple containers and all of the related resources such as
    network and storage, tightly coupled. All of the containers in a capsule are scheduled
    on the same host and share resources such as the Linux namespaces, CGroups, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Kuryr networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A container created by Zun can interact with the VMs created by Nova. This feature
    is provided by `Kuryr-libnetwork`. It interacts with Neutron to create the necessary
    network resources for the container and provides a communication path for other
    OpenStack resources.
  prefs: []
  type: TYPE_NORMAL
- en: Container sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zun has a collection of sandbox containers. A sandbox is a container that has
    all of the IaaS resources associated with it, such as ports, IP addresses, volumes,
    and so on. The aim of the sandbox is to decouple the overhead of managing these
    IaaS resources from the application containers. A sandbox can manage single or
    multiple containers and provide all of the needed resources.
  prefs: []
  type: TYPE_NORMAL
- en: CPU sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zun allows its users to run a high-performance container with dedicated resources.
    Zun exposes its host capabilities to the users, and users can specify the required
    CPU while creating a container.
  prefs: []
  type: TYPE_NORMAL
- en: The scheduler filters a node with the available resource and provisions the
    container on that node. The host information is updated in the database to reflect
    the updated resources.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The diagram in the *Zun WebSocket proxy* section shows the architecture of
    Zun. Zun has two binaries: `zun-api` and `zun-compute`. These two services together
    carry the whole life cycle of container management of containers. These services
    interact with other OpenStack services such as Glance for the container images,
    Cinder for providing volume to the containers, and Neutron for the connectivity
    between containers and the outside world. The request for containers is finally
    communicated to the Docker services running on the compute node. Docker then creates
    the container for the users.'
  prefs: []
  type: TYPE_NORMAL
- en: zun-api
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`zun-api` is a WSGI server that serves the users'' API requests. For every
    resource in Zun, there are separate handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: Container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zun services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the controllers handle a request for specific resources. They validate
    the request for permissions, validate the OpenStack resources including validating
    if the image is present in Docker Hub or Glance, and create a DB object for the
    resource with the input data. The request is forwarded to the compute manager.
    Upon receiving a response from the `zun-compute` service, the `zun-api` service
    returns the response to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Zun scheduler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scheduler in Zun is not an RPC service. It is a simple Python class which
    applies a filter on the compute nodes and picks up the appropriate node for serving
    the request. The compute manager then passes the request to the selected `zun-compute`
    via an RPC call. The call to `zun-compute` can be synchronous or asynchronous
    depending on the processing time taken by each of the operations. For example,
    the list calls can be synchronous as they are not time-consuming, whereas the
    create requests can be asynchronous.
  prefs: []
  type: TYPE_NORMAL
- en: zun-compute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `zun-compute` service is the main component of the Zun system. It performs
    most of the backend operations, hiding all the complexities. `zun-compute` selects
    an appropriate driver for serving each request and creates the related resources
    for containers, such as network resources. It then passes the request to the driver
    with all the required information. `zun-compute` talks to multiple projects for
    various resources such as Glance for the container images and Neutron for the
    network resources.
  prefs: []
  type: TYPE_NORMAL
- en: Zun WebSocket proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zun has a WebSocket proxy service for running containers in interactive mode.
    This service establishes a secure connection with the container to run any commands
    inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through how a container is created in Zun
    and how the request flows from the user to the Docker which creates the container.
    Zun interacts with multiple other OpenStack services for resources needed for
    the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'The request flow for creating a container in Zun is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user sends a REST API call to the `zun-api` service for creating a cluster
    via a CLI or Horizon, with the authentication token received from KeyStone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-api` receives the request and sends the request for the validation of
    token and access permission to KeyStone.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: KeyStone validates the token and sends updated authentications headers with
    roles and permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-api` then parses some parameters from the request, such as the security
    group, memory, and runtime, and validates them.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The requested network is created by `zun-api`. `zun-api` sends a request to
    Neutron to ensure the requested network or port is usable. If not, `zun-api` sends
    another request to Neutron to search the available network and creates a new Docker
    network for the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-api` then checks whether the requested image is available or not. If the
    image is not found, the request fails with `400` HTTP status.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-api` generates a name for the container if not provided in the request.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-api` then creates a database object for the container.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-api` sends the request to the compute API manager. The compute manager
    looks for the destination compute node from the scheduler.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-api` then sends the RPC asynchronous call request to `zun-compute`, selected
    in the previous step, to process the request further.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-compute` picks the request from the message queue.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-compute` sets the `task_state` of the container to `IMAGE_PULLING` and
    stores the entry in the database.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`zun-compute` calls the image driver to download the image.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the image is downloaded successfully, the `task_state` is now set to `CONTAINER_CREATING`
    in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now,Â `zun-compute` claims the resources required for the container and updates
    the compute node resource table with the required information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the request to the Docker is sent to create the container with all
    of the required parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Docker driver creates the container, sets the status to `CREATED` and `status_reason`
    to `None`, and saves the container object in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `task_state` is set to `None` upon successful completion of the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are periodic tasks in Zun which sync the container status in the Zun database
    at a specific time interval.
  prefs: []
  type: TYPE_NORMAL
- en: Zun DevStack installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now look at how to install a development setup of Zun using DevStack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a root directory for DevStack if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To clone DevStack repository, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a minimal `local.conf` for running the DevStack setup. We will
    enable the following plugins to create a Zun setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '`devstack-plugin-container`: This plugin installs Docker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kuryr-libnetwork`: This is the Docker libnetwork driver that uses Neutron
    to provide networking services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run DevStack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new shell and source the DevStack `openrc` script to use Zun CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s verify the Zun installation by looking at the service list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the host-list, which also shows the compute nodes being registered
    for use in Zun:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that we have one compute node, which is the host machine itself.
    Now, let''s also look at the available resources in the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the `zun-compute` service is running. The current setup only
    installs one compute service; you can install a multi-node Zun setup also. Please
    refer to [https://github.com/openstack/zun/blob/master/doc/source/contributor/quickstart.rst](https://github.com/openstack/zun/blob/master/doc/source/contributor/quickstart.rst)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Managing containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a Zun setup running, we will try to do some operations on containers
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create a container in Zun. But before that, let''s check the Docker
    status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that no container exists now. Now, let''s create the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look at the Zun list to check the container status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the container is in a creating state. Let''s check the container
    in Docker as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s start the container and look at the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do some advanced operations with the container. We will now create an
    interactive container with Zun:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s delete the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now look at some commands to see how images are managed in Zun. Download
    an Ubuntu image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the list of images in Zun now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the OpenStack container management service,
    Zun. We looked into the different objects in Zun. Then, we also learned about
    the components and the architecture of Zun. The chapter also provided a detailed
    overview of the workflow of a user request to manage containers in Zun. Then,
    we looked at how to install a development setup in Zun using DevStack, and we
    did a hands-on exercise using Zun CLI to create a container and start and stop
    various other operations on containers. In the next chapter, we will learn about
    Kuryr, which provides the networking resources to containers using Neutron.
  prefs: []
  type: TYPE_NORMAL
