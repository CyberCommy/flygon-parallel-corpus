- en: The Document Object Model (DOM)
  prefs: []
  type: TYPE_NORMAL
- en: The **Document Object Model** (**DOM**) is the API exposed by the browser to
    allow JavaScript to communicate with HTML and, indirectly, CSS. Since one of JavaScript's
    main abilities is dynamically changing content on a page, we should know how to
    do that. Enter the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use this powerful API to read and change
    content on a page. I'm sure you've seen websites that change content without reloading
    the page. These programs use *DOM manipulation, *and we'll learn how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Selectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be sure to have the [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers) repository handy
    and ready for use in the `Chapter-6` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Using selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve only been using `console.log` and alerts and prompts to input
    and output information. While these methods are useful for testing, they''re not
    exactly what you would use in everyday life. Most of the web applications that
    we use, from searching to email, use the DOM to interact with the user to get
    input and show information. Let''s take a look at a small example: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/hello](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/hello).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the HTML in the browser, we see a very simple page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a342e927-fbb8-426a-b8d4-39b5c9293115.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 Our basic page
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click the button, we don''t get an alert or a console message, but instead,
    we have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f04c693f-3d8e-458e-9042-1293872160a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 An in-page response to our click!
  prefs: []
  type: TYPE_NORMAL
- en: Yay! It's our first instance of **DOM manipulation**.
  prefs: []
  type: TYPE_NORMAL
- en: DOM manipulation explained
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at the JavaScript that powered that amazing example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing to notice is that we''re operating on the `document` object.
    `document` is JavaScript''s conception of what the page in the browser consists
    of. Remember when I mentioned that the DOM is an API exposed by the browser? This
    is the vector by which you access the DOM: `document`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we dissect the JavaScript, let''s see how the DOM and HTML differ. Here''s
    our HTML for our page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we use our console now to inspect Elements instead of Console, we''ll see
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3093173a-07ac-4804-930f-18c516613b2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 The DOM of our page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely and compare this screenshot with the preceding HTML, you
    won''t really find any differences. However, now click the button and see what
    happens to the `<p>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ecb14272-76ad-4364-8592-af09cd0687a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 After clicking the button
  prefs: []
  type: TYPE_NORMAL
- en: 'Ah! Now we see a difference between the HTML and the DOM: the addition of text
    inside the paragraph tag. If we reload the page, poof, there goes our text and
    we''re back to the beginning. So, what we''re seeing is that nothing is changing
    *on disk*, only *in memory*. The DOM only lives in memory. You can experiment
    in the Elements view by changing values and even deleting whole **nodes**. A node
    is the DOM''s reflection of an HTML tag. You may hear *node* and *tag* used interchangeably,
    but when working with JavaScript, it''s a good habit to use *node* to be consistent
    with JavaScript''s nomenclature, as we''ll see in a bit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to our JavaScript. So far, we''ve talked about `document`, which is the
    DOM''s in-memory interpretation of the HTML. The method of `document` that we''re
    using is a powerful one: `.querySelector()`. This method returns the *first* match
    to the argument we pass into the method. In this case, we''re asking for `button`.
    Since there''s only one button on the page, we can simply use the tag name. However,
    `querySelector` is more powerful than that, in that we can select based on CSS
    selectors as well. For example, say our button had a class on it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We could then access the button like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice the "`.`" in front of `clickme`, just like a CSS selector. Similarly,
    when accessing an element with an ID, you would use "`#`".
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have access to our button, we want to do *something* with it. In
    this case, *something* is to take action when the button is clicked. We do this
    by adding an **event listener**. We'll take a deeper dive into event listeners
    in [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events, Event-Driven
    Design, and APIs*, so for now, let's just scratch the surface.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the structure of an event listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf03f546-306f-446a-a59a-1511eb529ce1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 Event listener structure
  prefs: []
  type: TYPE_NORMAL
- en: First, our **event target** is the node upon which we want to listen; in this
    case, our target is the button. We then use the `.addEventListener()` method and
    assign the **event** of `click` to be the event for which we are listening. The
    second argument to our event listener is a function called the **event handler**.
    We can pass the actual **event object** to our handler. Event handlers don't have
    to be anonymous, as this one is, but it's common practice unless you need repeated
    functionality for several event types. Our handler is using `querySelector` again
    to target the `p` node and setting its `innerHTML` property to the string with
    our date.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word about node properties: a node''s *properties* are the DOM''s in-memory
    representation of an HTML element''s attributes. That means there are plenty of
    them: `className`, `id`, and `innerHTML`, just to name a few; we''ll get into
    them more in a minute when we get to the *Properties* section. So all together,
    these lines of code tell the browser, "Hey, when this button is clicked, change
    the content of the `p` tag to be this string."'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've taken a bird's eye view of this, let's dive into each of the
    pieces involved in making DOM manipulation work.
  prefs: []
  type: TYPE_NORMAL
- en: Using selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider a more complex page. We''ll be opening a sample page and working
    with some of the elements provided to you:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.html` in [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals)
    in a browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7062a150-3baf-4d78-bee5-b47f64c7150e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 The animals page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you hover over an orange button, it will turn turquoise and, when you click
    it, the black box at the top of the page will show the animal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4765b49f-8eaa-427d-b4f0-aadb950d780f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 A selected animal
  prefs: []
  type: TYPE_NORMAL
- en: Take a minute to play around with the page and examine its behavior. Also, try
    hovering over the photo; what happens?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s take a look at the JavaScript. Again, it''s fairly simple, but we
    have a few new characters in our story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Lines 1-9 contain an object as a datastore. Great! We covered this usage in
    [Chapter 5](6001365f-eadd-4ed7-878b-080a7857a1cb.xhtml), *Hello World! and Beyond:
    Your First Application*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Line 11 introduces a new way of using a selector: `.querySelectorAll()`. As
    mentioned previously, when we use `.querySelector()`, we''ll get the *first* item
    that matches our query. This method will return an array of all matching nodes.
    Then, we can iterate over them on line 13 to give each of them a click handler.
    On line 15, we define *what happens* in our event handler: set the source of the
    only `img` node to be a concatenation of the path and image source from our data
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: But wait! What is `e.target`? We'll take a deeper dive into events in [Chapter
    7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events, Event-Driven Design,
    and APIs*, but for now, it's only important to know that `e.target` is *the DOM
    node of the event target*. So, in this example, we're iterating through all DOM
    nodes of the `.flex-item` class. On each node, we are assigning an event handler,
    thus `e.target` equals the DOM node and `e.target.id` equals its HTML attribute
    of `id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fantastic. Let''s take a look at line 19, where we''re doing something similar,
    but this time using the CSS selector of `id`—`image`. Take a look at the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We see there is an ID of `image` on our tag, which means our DOM node will also
    have this ID. Now, when we move (or hover) over the image, we'll get an alert
    message stating the local path of the image file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re not that fluent with CSS, right now you may be asking yourself:
    But where''s the JavaScript to turn the orange boxes turquoise? Ha! Trick question!
    Let''s look at lines 45-48 in the `style.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you notice the *pseudoclass* of `:hover` on the item, we see the CSS rules
    that change the cursor from an arrow to the hand (indicating clickability in most
    user interfaces) as well as the background color change. Surprise!
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not a book on CSS; on the contrary, we''re going to try to steer clear
    of too many style dependencies. However, it''s important to note that often CSS
    allows us to make changes to some presentational aspects of HTML elements. But
    why do we care? After all, we''re writing *JavaScript*. The answer is simple:
    computational expense. It''s more *expensive* (that is, it takes more processing
    power) to modify an element via JavaScript than by CSS. If you''re manipulating
    CSS attributes that don''t require logic, use CSS where possible. However, if
    you need logic (such as stitching in variables to display an image, as in our
    example) then JavaScript is the correct choice.'
  prefs: []
  type: TYPE_NORMAL
- en: Using other selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s important to note that before `querySelector` and `querySelectorAll`
    were standardized as part of ES6 and HTML5, there were other selectors that were
    more prevalent, and you''re certain to encounter them in the wild. Some of them
    include `getElementById`, `getElementsByClassName`, and `getElementsByTagName`.
    It''s now considered a standard practice to use a variant of `querySelector`,
    but as with everything JavaScript, there is a caveat: technically, the `querySelector`
    methods are a tiny bit more expensive than the `getElement`-style methods. Usually,
    this expense is negligible when weighed against the power and flexibility of the
    `querySelector` methods, but it''s something to keep in the back of your mind
    when dealing with large pages.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at *what* we can change after we've selected our elements.
    These are the **properties** of an element.
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve dealt with a few properties already: `innerHTML` of a node, `src` of
    an image, and `id` of a node. There is a vast array of properties available to
    us, so let''s take a peek at how CSS marries with JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Just for the sake of argument, let''s change our Animals program to use JavaScript
    to change the background color of the target instead of CSS ([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals-2](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/animals-2)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we examine our mouseover handler, we can notice two things:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the event is `mouseover`, not `hover`. More on that later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're modifying the style property of our target, but the name is `backgroundColor`,
    not `background-color` as it is in CSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The camel case rule of properties in CSS is also a standard in JavaScript. It
    may seem a bit counterintuitive to have a different set of nouns for JavaScript,
    but in practice, it's better because you don't have to use bracket notation and
    quotes to deal with the hyphens in property names (which would be interpreted
    as an invalid subtraction statement).
  prefs: []
  type: TYPE_NORMAL
- en: However, let's now run our program and hover over all of the boxes. Do you see
    a color change from one color to another, like this?
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/87dd9e77-c927-43c3-bdbf-fe3ea86a36c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 All the boxes are changed!
  prefs: []
  type: TYPE_NORMAL
- en: Yep, if you guessed that we didn't include a "reset" handler, you're right.
    We can do that with the `mouseout` event. However, do you see how it makes sense
    to use CSS when you can?
  prefs: []
  type: TYPE_NORMAL
- en: It's certainly not necessary to memorize all the various properties available
    to you on DOM nodes, but `id`, `className`, `style`, and `dataset` are probably
    the most useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s this `dataset` property, you ask? You may not be familiar with data
    attributes in HTML, but they come in immensely handy. Consider this example from
    MDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The "`data-`" attributes are quite handy when your backend can insert markup
    into your HTML but is divorced from your JavaScript (as is almost always the case
    and, arguably, as your structure should be architected). To access `data-index-number`
    of `article`, we use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice again our camel case and the new usage of `.dataset.`, not `data-`.
  prefs: []
  type: TYPE_NORMAL
- en: We now know enough to do some more exciting work with our elements. We can target
    elements with selectors and read the elements' attributes. Next, let's look at **manipulations**.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with the DOM via JavaScript, we can not only read but *manipulate*
    these properties. Let''s get some practice in manipulating properties by making
    a small program: a sticky note creator.'
  prefs: []
  type: TYPE_NORMAL
- en: Sticky note creator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to make a sticky note creator that takes a color and a message
    and adds that colored box to the DOM with an ordinal number. Here''s what our
    final product might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a6ca44b0-6dea-4b74-aa00-a0579315aa93.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 Final product
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the starter code: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code).
    [](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-6/stickies/starter-code)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your goal is to recreate this functionality. Here are two methods we haven''t
    yet covered for you to research:'
  prefs: []
  type: TYPE_NORMAL
- en: '`document.createElement()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container.appendChild()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solution code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How did you do? Let''s take a look at the solution code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: OK! Some of these lines shouldn't be a mystery, but the most interesting ones
    are lines 7 (`const stickyNote = document.createElement('div')`) and 28 (`container.appendChild(stickyNote)`).
    As mentioned previously, these are the two methods you would need to research
    in order to finish this program. Line 7 is creating a DOM node—in memory! We can
    make our manipulations to it, such as adding content and style, and then on line
    28 we're adding it to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yay, we've finally gotten into the DOM and manipulated it! Congrats on where
    you're at so far!
  prefs: []
  type: TYPE_NORMAL
- en: 'With JavaScript, we can now dynamically change what is on the page as opposed
    to only using alerts and console messages. Here''s an overview of what we learned:'
  prefs: []
  type: TYPE_NORMAL
- en: '`querySelector` and `querySelectorAll` are our gateways into the magical realm
    of the DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DOM exists only in memory as a dynamic representation of where the HTML
    was when the page was loaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selectors for these methods will use CSS selectors; legacy methods will not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties of nodes can be changed, but the nomenclature varies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we'll work more with *events*.Events are at the heart of
    a JavaScript program, so let's learn about their structure and use.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Answer the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the correct syntax to select the button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''Click me!'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''.button'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''#button'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''button'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'True or false: `do``cument.querySelector(''button'')` will serve our needs
    to place a click handler on each button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To change the text of the button from "Click me!" to "Click me first!", what
    should we use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''button'')[0].innerHTML = "Click me first!"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''button'')[0].innerHTML = "Click me first!"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''button'').innerHTML = "Click me first!"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''#button'')[0].innerHTML = "Click me first!"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What method could we use to add another button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.appendChild(''button'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.appendChild(''<button>'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.appendChild(document.createElement(''button''))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.appendChild(document.querySelector(''button''))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we change the class of the third button to `third`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''button'')[3].className = ''third''`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''button'')[2].className = ''third''`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelector(''button[2]'').className = ''third''`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''button'')[3].className = ''third''`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information, you can refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MDN: *Document* *Object Model (DOM)*: [https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MDN: *Document.createElement()*: [https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MDN: *Node.appendChild()*: [https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
