- en: Answers to Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Qt is written in C++, a language that is very different from Python. What
    are some of the major differences between the two languages? How might these differences
    come across as we use Qt in Python?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The C++ language differences impact PyQt in several ways, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Its static typing and type-safe functions mean that PyQt is fairly strict about
    which functions can be called and which variables can be passed, in some circumstances.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The relative lack of built-in data types in C++ means that Qt provides a rich
    selection of data types, many of which we must use in Python due to type safety.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of `enum` types, common in C++ but rare in Python, is pervasive in Qt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GUIs are composed of widgets. Open some GUI applications on your computer
    and try to identify as many widgets as you can.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Some examples might include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Checkboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radio buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text edits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sliders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comboboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suppose that the following program crashes. Figure out why, and fix it so
    that it shows a window:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The code should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Remember that a `QApplication()` object must exist before any `QWidget` objects,
    and it must be created with a list as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**The `QWidget` class has a property called `statusTip`. Which of these are
    most likely to be the names of the accessor methods for this property:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getStatusTip()` and `setStatusTip()`'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`statusTip()` and `setStatusTip()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`get_statusTip()` and `change_statusTip()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The answer **b** is correct. In most cases, the accessors for `property` are
    `property()` and `setProperty()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`QDate` **is a class for wrapping a calendar date. In which of the three main
    Qt modules would you expect to find it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QDate` is in `QtCore`. `QtCore` holds data type classes for things not necessarily
    related to a GUI.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QFont` **is a class that defines a screen font. In which of the three main
    Qt modules would you expect to find it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QFont` is in `QtGui`. Fonts relate to GUIs but aren''t widgets or layouts,
    so you would expect it to be in `QtGui`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Can you recreate `hello_world.py` using Qt Designer? Make sure to set `windowTitle`.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project based on `QWidget`. Then select the main widget and set `windowTitle`
    in the Properties pane.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**How would you create a `QWidget` that is fullscreen, has no window frame,
    and uses the hourglass cursor?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Suppose that you''re asked to design a data-entry form for a computer inventory
    database. Choose the best widget to use for each of the following fields:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Computer make**: One of eight brands that your company purchases'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processor speed**: The CPU speed in GHz'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory amount**: The amount of RAM, in whole MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: The computer''s hostname'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Video make**: Whether the video hardware is Nvidia, AMD, or Intel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OEM license**: Whether the computer uses an OEM license'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This table lists some possible answers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Widget(s) | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Computer make | `QComboBox` | For choosing between a list of many values,
    a combobox is ideal |'
  prefs: []
  type: TYPE_TB
- en: '| Processor Speed | `QDoubleSpinBox` | Best choice for decimal values |'
  prefs: []
  type: TYPE_TB
- en: '| Memory Amount | `QSpinBox` | Best choice for integer values |'
  prefs: []
  type: TYPE_TB
- en: '| Hostname | `QLineEdit` | A hostname is just a one-line text string |'
  prefs: []
  type: TYPE_TB
- en: '| Video Make | `QComboBox`, `QRadioButton` | Combobox would work, but with
    only three choices, radio buttons are an option, too |'
  prefs: []
  type: TYPE_TB
- en: '| OEM License | `QCheckBox` | `QCheckBox` is a good choice for Boolean values
    |'
  prefs: []
  type: TYPE_TB
- en: '**The data entry form includes an `inventory number` field that requires the `XX-999-9999X` format,
    where `X` is an uppercase letter from `A` to `Z`, excluding `O` and `I`, and `9` is
    a number from `0` to `9`. Can you create a validator class to validate this input?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See `inventory_validator.py` in the example code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Check out the following calculator form:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1ecc9365-5e6d-40b1-9764-b07adf8f0aff.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What layouts may have been used to create it?**'
  prefs: []
  type: TYPE_NORMAL
- en: It is most likely either a `QVBoxLayout` with a nested `QGridLayout` layout
    for the button area, or a single `QGridLayout` layout using a column span for
    the first two rows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Referring to the preceding calculator form, how would you make the button
    grid take up any extra space when the form is resized?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `sizePolicy` property on each widget to `QtWidgets.QSizePolicy.Expanding`
    for both vertical and horizontal.
  prefs: []
  type: TYPE_NORMAL
- en: '**The topmost widget in the calculator form is a `QLCDNumber` widget. Can you
    find the Qt documentation on this widget? What unique properties does it have?
    When might you use it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `QLCDNumber` documentation is at [https://doc.qt.io/qt-5/qlcdnumber.html](https://doc.qt.io/qt-5/qlcdnumber.html).
    Its unique properties are `digitCount`, `intValue`, `mode`, `segmentStyle`, `smallDecimalPoint`,
    and `value`. It's useful for displaying any kind of number, including octal, hexadecimal,
    and binary.
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting with your template code, build the calculator form in code.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See `calculator_form.py` in the example code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Build the calculator form in Qt Designer.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See `calculator_form.ui` in the example code.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Look at the following table and determine which of the connections could
    actually be made, and which would result in an error. You may need to look up
    the signatures of these signals and slots in the documentation:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| # | Signal | Slot |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `QPushButton.clicked` | `QLineEdit.clear` |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `QComboBox.currentIndexChanged` | `QListWidget.scrollToItem` |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `QLineEdit.returnPressed` | `QCalendarWidget.setGridVisible` |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `QLineEdit.textChanged` | `QTextEdit.scrollToAnchor` |'
  prefs: []
  type: TYPE_TB
- en: 'The answers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, because the Boolean argument of `clicked` can be ignored by `clear`
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: No, because `currentIndexChanged` sends `int`, but `scrollToItem` expects an
    item and a scroll hint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, because `returnPressed` sends no arguments and `setGridVisible` expects
    one
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, because `textChanged` sends a string, which `scrollToAnchor` accepts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The ****`emit()` method does not exist on a signal object until the signal
    has been bound (that is, connected to a slot). Rewrite the `CategoryWindow.onSubmit()` method
    from our first `calendar_app.py` file to protect against the possibility of `submitted` being
    unbound.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to catch an `AttributeError`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**You find an object in the Qt documentation with a slot that requires `QString` as
    an argument. Can you connect your custom signal that sends a Python `str`** **object?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, because PyQt automatically converts between `QString` and Python `str`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '**You find an object in the Qt documentation with a slot that requires `QVariant` as
    an argument. What built-in Python types could you sent to this slot?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any of them can be sent. `QVariant` is a generic object container that can hold
    any other type of object.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re trying to create a dialog window that takes time and emits it when
    the user has finished editing the value. You''re trying to use automatic slot
    connections, but your code isn''t doing anything. Determine what is missing from
    the following:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'First, you''re missing a call to `connectSlotsByName()`. Also, you have not
    set the object name of `self.time_inp`. Your code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**You''ve created a `.ui` file in Qt Designer for a calculator application,
    and you''re trying to get it working in code, but it''s not. What are you doing
    wrong? See the following source code:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are four things wrong here:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you've forgotten to call `super().__init__()`
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, you're passing `self` to `Ui_Calculator`, which doesn't need any arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, you're calling `self.ui.setupGUI()`; it should be `self.ui.setupUi()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you're passing `self.ui` into `setupUi()`; you should be passing in
    a reference to the containing widget, in this case, `self`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You''re trying to create a new button class that emits an integer value when
    clicked; unfortunately, nothing happens when you click on the button. Look at
    the following code and try to make it work:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The answer is to change the last line of `__init__()` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Because we've overridden the built-in `clicked` property with our own signal,
    `self.clicked` no longer points to the signal emitted when the button is clicked.
    We have to call `super().clicked` to get a reference to the parent class's `clicked`
    signal.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**You want to use `QMainWindow` with the `calendar_app.py` script from [Chapter
    3](dbb86a9b-0050-490e-94da-1f4661d8bc66.xhtml), *Handling Events with Signals
    and Slots*. How would you go about converting it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The easiest approach would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename `MainWindow` to something like `CalendarForm`
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new `MainWindow` class based on `QMainWindow`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an instance of `CalendarForm` inside `MainWindow` and set it as the central
    widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You''re working on an app and have added the sub-menu names to the menu bar
    but have not populated any of them with items. Your coworker says that none of
    the menu names are appearing on his desktop when he tests it. Your code looks
    correct; what is probably going on here?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your coworker is using a platform (such as macOS) that doesn't display empty
    menu folders by default.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re developing a code editor and want to create a sidebar panel for interacting
    with a debugger. Which `QMainWindow` feature would be most appropriate for this
    task?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QDockWidget` would be most appropriate, since it allows you to build any kind
    of widget into a dockable window. The toolbar wouldn''t be a good choice, since
    it''s mainly designed for buttons.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The following code isn''t working correctly; it proceeds no matter what is
    clicked. Why doesn''t it work, and how can you fix it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`QMessageBox.question()` does not return a Boolean; it returns a constant matching
    the type of button that was clicked. The actual integer value of the constant
    matching the `No` button is `65536`, which evaluates to `True` in Python. The
    code should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**You''re building a custom dialog by subclassing `QDialog`. You need to get
    the information entered into the dialog back to the main window object. Which
    of the following approaches will not work?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Pass in a mutable object and use the dialog''s `accept()` method to alter
    its values.**'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '******Override the objects `accept()` method and have it return a `dict` of
    the entered values.******'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Override the dialog''s `accepted` signal with one that passes along a `dict`
    of the entered values. Connect this signal to a callback in your main window class.**'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers **a** and **c** will work. Answer **b** will not work, because the return
    value of `accept` is not returned by the dialog when `exec()` is called. `exec()`
    only returns a Boolean value indicating whether the dialog was accepted or rejected.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re writing a photo editor called SuperPhoto on Linux. You''ve written
    the code and saved the user settings, but looking in `~/.config/`, you can''t
    find `SuperPhoto.conf`. Look at the code and determine what went wrong:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration file (or registry key, on Windows) used by `QSettings` is
    determined by the company name and app name passed in as arguments to the constructor.
    The code should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Also, note that `sync()` doesn't need to be called explicitly. It's automatically
    called by the Qt event loop.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re saving preferences from a settings dialog, but for some reason, the
    settings being saved are coming back very strangely. What is wrong here? See the
    following code:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The problem is that you're not actually calling the accessor functions for the
    widgets. As a result, `settings` is storing a reference to the accessor function.
    On the next program launch, these are meaningless, since new objects are created
    at new memory locations. Be aware that `settings` won't complain if you save function
    references.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Assuming we have a well-designed model-view application, is the following
    code part of a model or a view?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It's view code, since it creates a GUI element (the file dialog) and seems to
    call back to what might be a model (`self.data`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Can you name at least two things that a model should never do, and two things
    that a view should never do?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examples of things models should never do are create or directly alter GUI elements,
    format data for presentation, or close the application. Examples of things views
    should never do are save data to disk, perform transformations on the stored data
    (such as sorting or arithmetic), or read data from anything other than the model.
  prefs: []
  type: TYPE_NORMAL
- en: '**`QAbstractTableModel` and `QAbstractTreeModel` both have abstract in the
    name. What does abstract mean in this context? Does it mean something different
    in C++ from what it means in Python?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In any programming language, abstract classes are classes that are not intended
    to be instantiated into objects; they should only be used by subclassing them
    and overriding required methods. In Python, this is implied but not enforced;
    in C++, classes marked `abstract` will fail to instantiate.
  prefs: []
  type: TYPE_NORMAL
- en: '**Which model type—list, table, or tree—would best suit the following collections
    of data?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The user''s recent files**'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A Windows registry hive**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Linux `syslog` records**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Blog entries**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Personal salutations (for example, Mr., Mrs., or Dr.)**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Distributed version control history**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Although it''s debatable, the most likely answers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: List
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Tree
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tree
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Why is the following code failing?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The argument for `rowCount()` is a `QModelIndex` object pointing to a parent
    node. It cannot be compared to an integer (`if node > 2`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Your table model isn''t working quite right when inserting columns. What
    is wrong with your `insertColumns()` method?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You've neglected to call `self.beginInsertColumns()` before altering the data,
    and `self.endInsertColumns()` after doing it.
  prefs: []
  type: TYPE_NORMAL
- en: '**You would like your views to display the item data as a tooltip when hovered.
    How would you accomplish this?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to handle `QtCore.Qt.TooltipRole` in the model''s `data()` method.
    An example of the code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**You are preparing to distribute your text editor application and want to
    ensure that the user is given a monospaced font by default, no matter what platform
    they use. What two methods can you use to accomplish this?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first way is to set the `styleHint` of the default font to `QtGui.QFont.Monospace`.
    The second is to find an appropriately-licensed, monospaced font, bundle it in
    a Qt Resource file, and set the font to your bundled font.
  prefs: []
  type: TYPE_NORMAL
- en: '**As closely as possible, try to mimic the following text using `QFont`:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7bcc4ce2-2313-4c4a-81c0-6897c8e32149.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Can you explain the difference between `QImage`, `QPixmap`, and `QIcon`?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QPixmap` and `QImage` both represent a single image, but `QPixmap` is optimized
    for display, while `QImage` is optimized for image manipulation in memory. `QIcon`
    is not a single image, but a collection of images that can be tied to a widget
    or action''s state.'
  prefs: []
  type: TYPE_NORMAL
- en: '**You have defined the following `.qrc` file for your application, run `pyrcc5`,
    and imported the resource library in your script. How would you load this image
    into `QPixmap`?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Using `QPalette`, how would you tile the background of a `QWidget` object with
    the `tile.png` image?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**You are trying to make a delete button pink using QSS, but it''s not working.
    What is wrong with your code?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two problems with your code. First, your `deleteButton` does not
    have an `objectName` assigned. QSS does not know anything about your Python variable
    names; it only knows Qt object names. Second, your style sheet doesn''t prefix
    the object name with a `#` symbol. The corrected code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Which style sheet string will turn the background colors of your `QLineEdit` widget
    black?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`stylesheet1` will turn the background of any `QWidget` child class black,
    including `QLineEdit`. `stylesheet2` will only turn the background of actual `QWidget`
    objects black; child classes will remain unaffected.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build a simple app with a combobox that allows you to change the Qt style
    to any style installed on your system. Include some other widgets so that you
    can see how they look in the different styles.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See `question_8_answer.py` in the example code included for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**You feel very happy about learning how to style PyQt apps and want to create
    a `QProxyStyle` class that will force all pixmaps in a GUI to be `smile.gif`.
    How would you do this? Hint: You will need to research some drawing methods of `QStyle` other than
    the ones discussed in this chapter.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**The following animation doesn''t work; figure out why it doesn''t work:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The short answer is that `animation` should be `self.animation`. Animations
    do not have parent objects and do not get **re-parented** like widgets do when
    they're added to a layout. Hence, when the constructor exits, `animation` goes
    out of scope and gets destroyed. The moral of the story is, save your animations
    as instance variables.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Using `QSoundEffect`, you''ve written a utility for a call center that allows
    them to review recorded phone calls. They''re moving to a new phone system that
    stores the audio calls as MP3 files. Do you need to make any changes to your utility?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes. You'll need to use `QMediaPlayer` instead of `QSoundEffect`, or write a
    layer to decode the MP3 to WAV, because `QSoundEffect` cannot play compressed
    audio.
  prefs: []
  type: TYPE_NORMAL
- en: '`cool_songs` **is a Python list containing path strings to your favorite songs.
    What do you need to do to play these songs back in a random order**?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to convert the paths into `QUrl` objects, add them to `QMediaPlaylist`,
    set `playbackMode` to `Random`, then pass it to `QMediaPlayer`. The code looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**You have installed the `audio/mpeg` codec on your system, but the following
    code isn''t working. Find out what''s wrong with it:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`QAudioRecorder` doesn''t have a `setCodec` method. The codec used in the recording
    is set on the `QAudioEncoderSettings` object. The code should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Run `audio_test.py` and `video_test.py` on several different Windows, macOS,
    and Linux systems. How is the output different? Are there any items supported
    across all systems?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The answers will depend on the systems you choose.
  prefs: []
  type: TYPE_NORMAL
- en: '**The properties of the `QCamera` class include several control objects, which
    allow you to manage different aspects of the camera. One of these is `QCameraFocus`.
    Investigate `QCameraFocus` in the Qt documentation at [https://doc.qt.io/qt-5/qcamerafocus.html](https://doc.qt.io/qt-5/qcamerafocus.html) and
    write a simple script that shows a viewfinder and lets you adjust the digital
    zoom.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See `question_5_example_code.py` in the included code examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''ve noticed the audio being recorded to your Captain''s Log video log
    is quite loud. You want to add a control to adjust it; how would you do this?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QMediaRecorder` has a `volume()` slot, just like `QAudioRecorder`. You need
    to create a `QSlider` (or any other control widget) and connect its `valueChanged`
    or `sliderMoved` signal to the recorder''s `volume()` slot.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Implement a dock widget in `captains_log.py` that allows you to control as
    many aspects of the audio and video recording as you can. You can include things
    such as the focus, zoom, exposure, white balance, framerate, resolution, audio
    volume, audio quality, and more.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're on your own here!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**You are designing an application that will emit a status message to the local
    network, which you will monitor with administrator tools. What kind of socket
    object would be a good choice?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QUdpSocket` would be best here, since it allows for broadcasting packets,
    and the status packets do not need the overhead of TCP.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your GUI class has a `QTcpSocket` object called `self.socket`. You''ve connected
    its `readyRead` signal to the following method, but it''s not working. What''s
    happening, and how can you fix it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`QTcpSocket` does not have a `hasPendingDatagrams()` or `readDatagram()` method.
    TCP sockets work with data streams, not datagrams. This method needs to be rewritten
    to extract data using a `QDataStream` object.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use `QTcpServer` to implement a simple service that listens on port `8080` and
    prints any requests received. Make it reply to the client with a byte string of
    your choice.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See `question_3_tcp_server.py` in the example code. Test it by running the script
    and pointing a web browser to [http://localhost:8080](http://localhost:8080).
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re creating a download function for your application to retrieve a large
    data file for import into your application. The code does not work. Read the code
    and decide what you''re doing wrong:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You're trying to use `QNetworkAccessManager.get()` synchronously, but it is
    designed to be used asynchronously. Instead of retrieving a reply object from
    `get()`, you need to connect a callback to the network access manager's `finished`
    signal, which carries the finished reply with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Modify your `poster.py` script so that it sends the key-value data as JSON,
    rather than HTTP form data.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See the `question_5_json_poster.py` file in the example code.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Compose an SQL `CREATE` statement that builds a table to hold television
    schedule listings. Make sure it has fields for the date, time, channel, and program
    name. Also, make sure it has a primary key and constraints to prevent nonsensical
    data (such as two shows at the same time on the same channel, or a show with no
    time or date).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**The following SQL query is returning a syntax error; can you fix it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several problems here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DELETE` does not take a field list, so `*` must be removed.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IF` is the wrong keyword. It should use `WHERE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`==` is not an SQL operator. Unlike Python, SQL uses a single `=` for both
    assignment and comparison operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting SQL should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**The following SQL query doesn''t work correctly; can you fix it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Each set of parentheses in the `VALUES` clause represents a single row. Since
    we are only inserting one column, each row should have only one value in it. Hence,
    our statement should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**The documentation for `QSqlDatabase` can be found at [https://doc.qt.io/qt-5/qsqldatabase.html](https://doc.qt.io/qt-5/qsqldatabase.html).
    Read up on how you can work with multiple database connections, for example, a
    read-only and read/write connection to the same database. How would you create
    two connections and make specific queries to each?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The key is to call `addDatabase()` multiple times with unique connection names;
    an example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Using `QSqlQuery`, write code to safely insert the data in the `dict` object
    into the `coffees` table:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To be safe, we''ll use the `prepare()` method of `QSqlQuery`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**You''ve created a `QSqlTableModel` object and attached it to `QTableView`.
    You know there is data in the table, but it is not showing in the view. Look at
    the code and decide what is wrong:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You have not called `select()` on your model. Until you do so, it will be empty.
  prefs: []
  type: TYPE_NORMAL
- en: '**The following is a callback attached to the `textChanged` signal of `QLineEdit`.
    Explain why this is not a good idea:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The problem here is that you're taking arbitrary user input and passing it to
    a table model's `filter()` string. This string is appended literally to the table
    model's internal SQL query, opening up your database to SQL injection. To make
    this safe, you would need to take steps to sanitize `text` or switch the SQL table
    model for a `QSqlQueryModel` and use `prepare()` to create a prepared statement.
  prefs: []
  type: TYPE_NORMAL
- en: '**You decide you''d rather have colors than names in the roasts comboboxes
    in your coffee list. What changes would you need to make to accomplish this?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would need to change the display field used by the `QSqlRelation` set on
    `roast_id` to `color`. Then, you would need to create a custom delegate for `coffee_list`
    that creates color icons (see [Chapter 6](c3eb2567-0e73-4c37-9a9e-a0e2311e106c.xhtml),
    *Styling Qt Applications*) and uses them instead of text labels in the combobox.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Create code to call the `self.every_ten_seconds()` method every ten seconds.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assuming we''re in the `__init__()` method of a class, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**The following code uses `QTimer` incorrectly. Can you fix it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`QTimer` is being used synchronously with the `while` loop. This creates blocking
    code. The same can be done asynchronously, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**You''ve created the following word-counting worker class and want to move
    it to another thread to prevent large documents from slowing the GUI. It''s not
    working, however; what do you need to change about this class?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The class relies on accessing a widget through a common parent because the
    `Worker` class must be parented by the GUI class containing the widget. You''ll
    need to change this class so that the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't have a parent widget.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: It accesses the content some other way, such as through a slot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The following code is blocking, rather than running in a separate thread.
    Why is this so?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The button callback is pointed at `Worker.run()`. It should point to the `start()`
    method of the `QThread` object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Will this worker class run correctly? If not, why?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: No. `QRunnable` objects cannot emit signals, because they do not descend from
    `QObject` or have an event loop. You would be better off using `QThread`, in this
    case.
  prefs: []
  type: TYPE_NORMAL
- en: '**The following code is a `run()` method from a `QRunnable` class designed
    for processing large data file output from scientific equipment. The files consist
    of millions of long rows of space-delimited numbers. Is this code likely to be
    slowed down by the Python GIL? Could you make it less likely that the GIL will
    interfere?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Reading in the file is an I/O-bound operation, which does not require acquiring
    the GIL. However, doing mathematical calculations and type conversions is a CPU-bound
    task and will require the acquisition of the GIL. This could be mitigated by doing
    the calculations in a non-Python math library, such as NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '**The following is a `run()` method from `QRunnable` in a multithreaded TCP
    Server application you''re writing. All threads share a server socket instance
    accessed through `self.datastream`. This code is not thread-safe, though. What
    do you need to do to fix it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Since you don''t want two threads writing to the data stream at the same time,
    you''ll want to use `QMutex` to ensure that only one thread has access. After
    defining a shared mutex objected called `qmutex`, the code would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The following HTML isn''t displaying like you wanted. Find as many errors
    as you can:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several errors here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<thead>` section is missing a `<tr>` tag around the cells.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next row, the second cell is missing the opening `<td>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, there's no `text-color` attribute. It's just `color`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next row, the first cell is missing a closing `</td>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, there's no `text-style` attribute. The text should just be wrapped in
    a `<b>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is wrong with the following Qt HTML snippets?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The problems are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The last two closing tags are switched. Nested tags must be closed before the
    outer tags.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no such tag as `<row>` or `<data>`. The correct tags should be `<tr>`
    and `<td>`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are two problems—`<font>` has no `family` attribute, and it should be
    `face`; also, there is no `<strikethrough>` tag, and it should be `<s>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Qt doesn't support the `<label>` or `<input>` tags. Also, `<input>` does not
    use a closing tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<img>` has no `source` attribute; it should be `src`. It also does not use
    a closing tag and cannot enclose text content.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**This snippet is supposed to implement a table of contents. Why doesn''t it
    work right?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not how document anchors work. The correct code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note the pound sign (`#`) before `href`, indicating that this is an internal
    anchor, and the `<a>` tags above the sections, with a `name` attribute containing
    the section name (without the pound sign!).
  prefs: []
  type: TYPE_NORMAL
- en: '**Using `QTextCursor`, you need to add a sidebar on the right-hand side of
    your document. Explain how you would go about this.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The steps to do this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `QTextFrameFormat` object
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your frame format's `position` property to float right
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position your text cursor in the root frame
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `insertFrame()` on your cursor with the frame object as the first argument
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the sidebar contents using cursor insert methods
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**You are trying to create a document with `QTextCursor`. It should have a
    top and bottom frame; in the top frame, there should be a title, and in the bottom
    frame, an unordered list. Correct this code so that it does that:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The main problem with this code is that it fails to move the cursor correctly,
    so content is not being created in the right spots. This is the corrected code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '**You''re creating your own `QPrinter` subclass to add a signal when the page
    size changes. Will the following code work?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, it won''t. Since `QPrinter` is not derived from `QObject`, it
    cannot have signals. You will get an error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '**`QtPrintSupport` contains a class called `QPrinterInfo`. Using this class,
    print a list of the names, make and model, and default page size of all of the
    printers on your system.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Add code to this method to write your name in blue on the bottom of the picture:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Your code will need to create `QPainter` and `QPen`, then write to the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '**Given a `QPainter` object called `painter`, write a line of code to paint
    an 80 × 80 pixel octagon in the upper-left corner of the painter''s paint device.
    Refer to the documentation at [https://doc.qt.io/qt-5/qpainter.html#drawPolygon](https://doc.qt.io/qt-5/qpainter.html#drawPolygon).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are a few ways to create and draw a polygon, but the simplest is to pass
    a series of `QPoint` objects to `drawPolygon()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you could also use a `QPainterPath` object, as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re creating a custom widget and can''t figure out why the text is showing
    up in black. The following is your `paintEvent()` method; see if you can figure
    out the problem:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The problem is that you've set `brush`, but the text is drawn with a `pen`.
    The default pen is black. To fix this, create a `pen` set to white and pass it
    to `painter.setPen()` before drawing the text.
  prefs: []
  type: TYPE_NORMAL
- en: '**A deep-fried meme is a style of meme that uses extreme compression, saturation,
    and other processing to make the meme image look intentionally low quality. Add
    a feature to your meme generator to optionally make the meme deep-fried. Some
    things you can try include reducing the color bit depth and adjusting the hue
    and saturation of the colors in the image.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be creative here, but for an example, see the `question_4_example_code.py` file
    in the included source code.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''d like to animate a circle moving horizontally across the screen. What
    do you need to change in the following code to animate the circle?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Your `circle` object cannot be animated as it is, since it is a `QGraphicsItem`.
    To animate an object's properties with `QPropertyAnimation`, it must be a `QObject`
    descendant. You need to build your circle as a subclass of `QGraphicsObject`;
    then, you can animate it.
  prefs: []
  type: TYPE_NORMAL
- en: '**What''s wrong with the following code, which attempts to set up `QPainter` with
    a gradient brush?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two problems here:'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument to `setColorAt` is not a pixel location, but rather, it's
    a percentage expressed as a float between `0` and `1`.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no `QPainter.setGradient()` method. The gradient must be passed into
    the `QPainter` constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**See if you can implement some of the following improvements to the game we
    created:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Pulsating bullets**'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Explosions when a tank is hit**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sounds (see [Chapter 7](0234c71b-292c-4423-89d7-e9d9906d730e.xhtml), *Working
    with Audio-Visual Using QtMultimedia*, for help here)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background animation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple bullets**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're own your own here. Have fun!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Which steps of the OpenGL render pipeline are user-definable? Which steps must be
    defined in order to render anything? You may need to reference the documentation
    at [https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview](https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The vertex processing and fragment shader steps are user-definable. At a minimum,
    you must create a vertex shader and a fragment shader. Optional steps include
    the geometry shader and tessellation steps, which are part of vertex processing.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re writing a shader for an OpenGL 2.1 program. Does the following look
    correct?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Your version string is wrong. It should read `#version 120`, since it specifies
    the version of GLSL, not the version of OpenGL. Versions are also specified as
    a three-digit number with no period.
  prefs: []
  type: TYPE_NORMAL
- en: '**Is the following a vertex or fragment shader? How can you tell?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a vertex shader; there are a couple of clues:'
  prefs: []
  type: TYPE_NORMAL
- en: It has an attribute variable, which it assigns to `gl_Position`.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a varying variable to which it's assigning values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Given the following vertex shader, what code do you need to write to assign
    simple values to the two variables?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming that your `QOpenGLShaderProgram` object is saved as `self.program`,
    the following code is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '**You enable face culling to save some processing power, but find that several
    of the visible primitives in your drawing are not rendering now. What could be
    the problem?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The vertices were drawn in the wrong order. Remember that drawing a primitive
    counterclockwise will cause the far face to be culled; drawing it clockwise will
    cause the near face to be culled.
  prefs: []
  type: TYPE_NORMAL
- en: '**What does the following code do to our OpenGL image?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: By itself, nothing. This code simply creates a 4 x 4 matrix and runs some transform
    operations on it. If, however, we passed this into a shader that applied its values
    to a vertex, it would create a perspective projection, move our object in space,
    and rotate the image. The actual `matrix` object is nothing more than a matrix
    of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Experiment with the demo and see whether you can add any of the following
    features:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A more interesting shape (pyramid, cube, and so on)**'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More controls for moving the object**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shadows and lighting effects**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animating shape changes in the object**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're on your own here!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Consider the following descriptions of datasets. What style of chart would
    you suggest for each?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Web server hit counts by date**'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sales figures by salesperson per month**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Percentages of support tickets for the past year by company department**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The yield of a plot of bean plants against the plant''s height, for several
    hundred plants**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The answers are subjective, but the author suggests the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A line or spline chart, as it would illustrate traffic trends
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: A bar or stacked by chart, as this would allow you to compare salespeople over
    time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pie chart, since it represents a set of percentages adding up to 100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A scatter plot, since you want to show a general trend of a large set of data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Which chart component has not been configured in the following code, and
    what will the result be?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The axes have not been configured. This chart can be displayed, but will not
    have reference marks on the axes, and may not be scaled intuitively.
  prefs: []
  type: TYPE_NORMAL
- en: '**What''s wrong with the following code?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '`QChart` is not a widget and cannot be added to a layout or set as a central
    widget. It must be attached to `QChartView`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**You want to create a bar chart comparing Bob and Alice''s sales figures for
    the quarter. What code needs to be added? (Note that axes are not required here.):**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create bar sets for Bob and Alice and append them to the series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '**Given a `QChart` object named `chart`, write code so that the chart has a
    black background and blue data plots.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do this, set the `backgroundBrush` and `theme` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '**Style the other two charts in the system monitor script using the techniques
    you used on the last chart. Experiment with different brushes and pens, and see
    whether you can find other properties to set.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're on your own here!
  prefs: []
  type: TYPE_NORMAL
- en: '**`QPolarChart` is a subclass of `QChart` that allows you to construct a polar
    chart. Investigate the use of the polar chart in the Qt documentation and see
    whether you can create a polar chart of an appropriate dataset.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're on your own here!
  prefs: []
  type: TYPE_NORMAL
- en: '**`psutil.cpu_percent()` takes an optional argument, `percpu`, that will create
    a list of values showing usage information per CPU core. Update your application
    to use this option and separately display each CPU core''s activity on one chart****.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're still on your own here; don't worry, though, you can do it!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**You have just bought a Raspberry Pi with Raspbian preinstalled to run your
    PyQt5 application. When you try to run your application, you get an error trying
    to import `QtNetworkAuth`, which your application depends on. What is likely the
    problem?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Possibly, your Raspbian installation is version 9\. Version 9 has Qt 5.7, which
    does not have the `QtNetworkAuth` module. You need to upgrade to a newer release
    of Raspbian.
  prefs: []
  type: TYPE_NORMAL
- en: '**You have written a PyQt frontend for a legacy scanner device. Your code talks
    to the scanner through a proprietary driver utility called `scanutil.exe`. It
    is currently running on a Windows 10 PC, but your employer wants to save money
    by moving it to a Raspberry Pi. Is this a good idea?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfortunately, it isn't. If your application relies on a proprietary Windows
    x86 binary, that program will not run on the Pi. To switch to the Pi, you would
    need a binary compiled for the ARM platform that can run on one of the Pi's supported
    operating systems (also, that OS needs to be able to run Python and Qt).
  prefs: []
  type: TYPE_NORMAL
- en: '**You''ve acquired a new sensor and want to try it out with the Raspberry Pi.
    It has three connections, labeled Vcc, GND, and Data. How would you connect this
    to the Raspberry Pi? Is there more information you need?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You really need more information, but here''s enough to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vcc** is an abbreviation that means input voltage. You will have to connect
    this to either a 5V or 3V3 pin on the Pi. You will need to consult the manufacturer''s
    documentation to determine which connection will work.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GND** means ground, and you can connect this to any ground pin on the Pi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data** is presumably a connection you would want to make to one of the programmable
    GPIO pins. It''s very likely that, you''ll need some kind of library to make it
    work, so you should check with the manufacturer for that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You''re trying to light an LED connected to the fourth GPIO pin from the
    left on the outside. What is wrong with this code?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The GPIO pin mode is set to `BCM`, which means you have the wrong number for
    the pin you're using. Set the mode to `BOARD` or use the correct BCM number for
    your pin (`14`).
  prefs: []
  type: TYPE_NORMAL
- en: '**You are trying to dim an LED connected to GPIO pin `12`. Does this code work?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'This code doesn''t work, because pins can only be either on or off. To simulate
    half voltage, you need to use pulse width modulation, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '**You have a motion sensor with a data pin that goes `HIGH` when motion is
    detected. It''s connected to pin `8`. The following is your driver code:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '**Your main window class creates a `MotionSensor` object and connects its `detection` signal
    to a callback method. However, nothing is being detected. What is missing?**'
  prefs: []
  type: TYPE_NORMAL
- en: You are not calling `MotionSensor.check()`. You should implement polling by
    adding a `QTimer` object that calls `check()` periodically.
  prefs: []
  type: TYPE_NORMAL
- en: '**Combine the two circuits in this chapter in a creative way; for example,
    you might create a light that changes color depending on the humidity and temperature.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're on your own here!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The following code is giving you an attribute error; what''s wrong?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: You want to import `QtWebEngineWidgets`, not `QtWebEngine`. The latter is for
    use with Qt's QML frontend.
  prefs: []
  type: TYPE_NORMAL
- en: '**The following code should connect this `UrlBar` class with `QWebEngineView`, so
    that the entered URL is loaded when the *return*/*Enter *key is pressed. It doesn''t
    work, though; what is wrong?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '`QWebEngineView.load()` requires a `QUrl` object, not a string. The `url_request`
    signal sends the text of the bar as a string directly to `load()`. It should wrap
    it in a `QUrl` object first.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the result of the following code?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '`QWebEngineView.createWindow()` is called whenever a browser action requests
    a new tab or window to be created, and is expected to return a `QWebEngineView`
    object, which will be used for the new window or tab. By returning `self`, this
    subclass forces any links or calls that try to create a new window to just navigate
    in the same window, instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Check out the documentation for `QWebEngineView` at [https://doc.qt.io/qt-5/qwebengineview.html](https://doc.qt.io/qt-5/qwebengineview.html).
    How would you implement a zoom feature in your browser?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, you''d need to implement callback functions on the `MainWindow` to set
    the `zoomFactor` property on the current web view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in `MainWindow.__init__()`, you would just need to create controls to
    call those methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '**As the name implies, `QWebEngineView` represents the view portion of a model-view
    architecture. What class represents the model in this design?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QWebEnginePage` seems to be the clearest candidate here, since it stores and
    controls the rendering of the web content.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Given a `QWebEngineView` named `webview`, write code to determine whether
    JavaScript is enabled on `webview`.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code must query the view''s `QWebEngineSettings` object, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '**You saw in our browser example that `runJavaScript()` can pass an integer
    value to a callback function. Write a simple demo script to test what other kinds
    of JavaScript objects can be returned, and how they appear in Python cod**e.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See `chapter_7_return_value_test.py` in the example code.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**You have written a PyQt application in a file called `Scan & Print Tool-box.py`.
    You want to convert this into module-style organization; what change should you
    make?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name of the script should change, since spaces, ampersands, and dashes are
    not valid characters to use in a Python module name. You might change the module
    name to `scan_and_print_toolbox`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '**Your PyQt5 database application has a set of `.sql` files containing queries
    used by the application. It worked when your app was a single script in the same
    directories as the `.sql` files, but now that you''ve converted it into module-style
    organization, the queries can''t be found. What should you do?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The best thing to do is to put your `.sql` files into a Qt resource file and
    make that part of your Python module. If you are unable to use Qt resource files,
    you will need to convert your relative paths to absolute paths using the `path`
    module and the built-in `file` variable
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re writing a detailed `README.rst` file to document your new application
    before uploading it to a code-sharing site. What characters should be used to
    underline your level 1, 2, and 3 headings, respectively?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It actually doesn''t matter, as long as you use characters from the list of
    acceptable characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: An RST interpreter should consider the first header character encountered to
    mean level one; the second, level two; and the third, level three.
  prefs: []
  type: TYPE_NORMAL
- en: '**You''re creating a `setup.py` script for your project so that you can upload
    it to PyPI. You would like to include a URL for the project''s FAQ page. How can
    you accomplish this?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to add a `key: value` pair to the `project_urls` dict, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '**You have specified `include_package_data=True` in your `setup.py` file, but
    for some reason, the `docs` folder is not being included in your distribution
    package. What''s wrong?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`include_package_data` only affects data files inside packages (modules). If
    you want to include files outside your modules, you need to use the `MANIFEST.in`
    file for these.'
  prefs: []
  type: TYPE_NORMAL
- en: '**You ran `pyinstaller fight_fighter3.py` to package your new game as an executable.
    Something went wrong, though; where can you find a log of the build process?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to look at `build/fight_fighter3/warn-fight_fighter3.txt`, for a start.
    You might need to increase the debugging output by calling PyInstaller with the
    `--log-level DEBUG` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**Despite the name, PyInstaller cannot actually generate installer programs
    or packages for your application. Research some options for your platform of choice.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're on your own here, although a popular option is the **Nullsoft Scriptable
    Install System** (**NSIS**).
  prefs: []
  type: TYPE_NORMAL
