- en: Exploiting and Exfiltrating Data from a Large Shipping Corporation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All companies, businesses, and industries use technology, and the way they use
    it is different. It is not the same web application for a retailer where there
    are priorities such as continuous services and big performance, as in an online
    banking application, where you need to be highly secure. Of course, all of these
    applications have common points, but as it is impossible to apply all controls,
    the most important thing is prioritizing the real requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss another scenario, a shipping company. We will
    perform the same activities as in the past example, but this time using one of
    the most popular shipping companies: DHL.'
  prefs: []
  type: TYPE_NORMAL
- en: We will be covering ...
  prefs: []
  type: TYPE_NORMAL
- en: Automatic scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest way to detect vulnerabilities such as SQL injections is by using
    Burp Suite''s scanner:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the scan, open Burp Suite, go to the main Dashboard, and click on
    New scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5bf5de4-3054-4c13-96c6-ccd5b5821134.png)'
  prefs: []
  type: TYPE_IMG
- en: There is an option that we did not explore previously, which is used to control
    the scope during a scan. Imagine that your scope is not all of the DHL website—it
    is just [www.dhl.com](http://www.dhl.com), but there are other applications, such
    as [mydhl.dhl.com](http://mydhl.dhl.com) and [intranet.dhl.com](http://intranet.dhl.com),
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid that, Burp Suite can scan these other applications; click on Detailed
    scope configuration. Here we will see two tabs named Include prefix options and
    Exclude prefix options. Go to the second tab, Exclude Prefix Options, and enter
    the applications we don''t want to test, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27828ec0-db85-461d-a85d-f977eaf5e85d.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, it is not necessary to add all the
    URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to be more selective about the scope, we can choose a single URL
    and by clicking on Use advanced scope control, we can add each URL we want to
    test or not to test in the scope, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/423fc0e5-ba34-4295-bc19-79ae0274c648.png)'
  prefs: []
  type: TYPE_IMG
- en: Burp Suite's scanner provides us with more options to control the scan.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Scan configuration. Here, you can configure options about how the scanner
    will perform the application discovery and how the security testing will be performed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Add new, and Burp Suite will launch a new window where it is possible
    to create a new rule, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39959ffd-2ca7-4918-9f4a-eb6d02cd6c04.png)'
  prefs: []
  type: TYPE_IMG
- en: In Audit optimization, we can define how fast the assessment is. I recommend
    selecting low fast. This is to avoid intrusion detection systems, load balancers,
    and other security and network appliances that can block the scanner. If you are
    testing in a QA environment where you have full control and direct access to the
    application server, without any network security control, you can select Fast.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next section, Issues reported, is for selecting the scan policy. Burp Suite
    by default has divided the possible issues by categories. However, you can also select
    by type. For example, for this exercise, we just select SQL injection vulnerabilities.
    It is very useful for fixing or verifying bugs, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6638210a-8da9-4588-8c81-468cf17a18b4.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Handling Application Errors During Testing tab, it is possible to configure
    how Burp Suite take actions when detecting errors. These options can help us to
    stop the scan when necessary. For example, currently, it is usual that some applications
    are hosted in a cloud service. The cloud services are great at blocking scanning
    activities, so it is probable that if we are testing a cloud hosted website, after
    a few minutes of testing, our IP address will get blocked and Burp Suite just
    receives timeout errors. We can stop the scan when this type of error occurs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Insertion point types, it is possible to define where you want to inject
    testing strings. For example, you can limit the testing just to the URL parameters,
    cookies, and so on. In my experience, it is better to test all the entry points
    that you can.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignoring insert points is an interesting option that could be useful when we
    want to limit the noise generated by the application or just reduce the number
    of tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Do you remember that, in Intruder, you can select the parameters to test? Well,
    this is something similar to that. If we have tracking tokens or a session ID
    stored in a variable, it is not a good idea to test it, so we can get out of the
    scope by using this option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5f01202-9d19-4a93-8e83-de51f20a0438.png)'
  prefs: []
  type: TYPE_IMG
- en: After configuring the options, click on Save and then on OK to start the scan.
    If you think it could be a policy to apply and will be required for more types
    of applications, you can save it as a library and reuse it. Scan results will
    be shown in the right section.
  prefs: []
  type: TYPE_NORMAL
- en: SQLMap detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to use SQLMap to detect and exploit SQL injections in the
    DHL site.
  prefs: []
  type: TYPE_NORMAL
- en: Looking for entry points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DHL application looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc284b05-f4ed-440d-9892-f8dac76fb9ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Straight away, we can see different inputs to test, for example, the search
    bar and the tracking box, but look at the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60420cc8-e828-4d9a-b3d1-e39c80df46b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this request, we can see some variables, but to determine which of them
    can be used as injection points, we need to analyze the behavior they have, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brand`: It looks like the application supports some companies, so maybe "DHL"
    is part of a catalog, and it could be susceptible to injection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWB`: This variable is a tracking number, which is used to look for the location
    of a package. It is obvious that this is a great entry point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AWBS_crossrefpar1_taskcenter_taskcentertabs_item1229046233349_par_expandablelink_insideparsys_fasttrack`:
    It also looks like an ID, so it could be an injection point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to reduce the number of points to test, because in a productive
    application, the more testing that's done, the more that noise is created.
  prefs: []
  type: TYPE_NORMAL
- en: Using SQLMap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the secondary button of the mouse, click on Send to SQLMapper, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/764bd46d-e88c-480b-be1f-f68eb4a48a51.png)'
  prefs: []
  type: TYPE_IMG
- en: To limit the parameters to test, go to the Injection tab and enter the parameters, separated
    by commas, and click on the Run button.
  prefs: []
  type: TYPE_NORMAL
- en: SQLMap will be launched and, if any of these parameters are vulnerable, SQLMap
    will detect and exploit the injection. When SQLMap detects that you are exploiting
    a Blind SQL injection, it will ask you to continue. Just press *Y*.
  prefs: []
  type: TYPE_NORMAL
- en: Intruder detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Detecting SQL injections using a manual request is also an option. I recommend that
    you perform it when you are reviewing an application without a successful vulnerability
    detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we detect the entry points, as we reviewed in the previous section.
    To detect vulnerable points related to Blind SQL injection, you can use the following
    testing string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use its counterpart in the DBMS. But why should we do that? Well,
    as you may remember, the most important characteristic in Blind SQL injections
    is that they do not return errors or outputs directly to the user. So, by using
    this string, we are waiting to see the delay in the response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To cover more parameters, we need the Intruder tool. Do the same analysis about
    the parameters behavior to determine which request could be susceptible to being
    vulnerable and, using the secondary button of the mouse, click on Send to Intruder
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f318829-40cd-4a1b-991e-8ed5d02a40ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Intruder, for a fast testing, add the delay query as the only one payload
    and launch it to all the parameters, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20e3a4d2-2931-41bb-9f26-fa5293f8e869.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in the Positions tab, click on Start attack. If you think you have detected
    a possible vulnerability, right-click on the request and select Send to repeater.
    Once you are in the repeater, modify the testing string to add more delay time,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The idea is to determine when to use the time to receive the response, if the
    vulnerability actually exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to use the Burp Suite Collaborator. It is a good trick to use
    it in these cases, as the Collaborator is an external entity that interacts as
    receptor to send the database''s output, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0520e5d1-2139-454c-9e9a-7bcd6c7a6cf6.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you have detected a vulnerable variable, mark it with a wildcard in the
    Intruder tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you want to know the tracking number of a package in the shipping website.
    Click on the Payloads tab, and as the payload type, select the Numbers option.
    We will need to inject a range of numbers, from 0000000000 to 9999999999, from
    one to one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a714039-80a1-4ffa-bc42-858978fd218f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As it is not possible to dump the registers stored in the database, we will
    find the tracking number using a Boolean value. Send a request using the correct
    tracking number, by our Intruder attack; the application will return a `True` value
    in as a response:'
  prefs: []
  type: TYPE_NORMAL
- en: For easy detection, ...
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we reviewed other scenarios that can be used to assess
    an application. In this chapter, we looked for SQL injections and exploited one
    of them using different methods.
  prefs: []
  type: TYPE_NORMAL
- en: For an application security assessment, I recommend avoiding the manual exploitation
    methods, because we will have less time to use them. They are useful when it is
    not possible to find vulnerabilities using other methods.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned how to analyze the parameter behavior in a request
    to infer what could be vulnerable and reduce the time analysis. Later, we looked
    into detecting Blind SQL injection vulnerabilities using Burp Suite's scanner,
    SQLMap, and the Intruder tool. Finally, we learned how to guess a tracking number
    using Intruder to exploit a Blind SQL injection.
  prefs: []
  type: TYPE_NORMAL
