- en: Chapter 6. Getting a Model's Data with Querysets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Querysets** are used for data retrieval rather than for constructing SQL
    queries directly. They are part of the ORM used by Django. An ORM is used to link
    the view and controller by a layer of abstraction. In this way, the developer
    uses object model types without the need to write a SQL query. We will use querysets
    to retrieve the data we have stored in the database through models. These four
    operations are often summarized by **CRUD** (**Create**, **Read**, **Update**,
    **and Delete**).'
  prefs: []
  type: TYPE_NORMAL
- en: The discussed examples in this chapter are intended to show you how the querysets
    work. The next chapter will show you how to use forms, and thus, how to save data
    sent from a client in the models.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, we will know how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Save data in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve data from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update data from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The persisting model's data on the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data storage is simple with Django. We just need to fill the data in the models,
    and use methods to store them in a database. Django handles all the SQL queries;
    the developer does not need to write any.
  prefs: []
  type: TYPE_NORMAL
- en: Filling a model and saving it in the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can save data from a model instance to the database, we need to define
    all the values of the model's required fields. We can show the examples in our
    view index.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how to save a model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will explain the new lines of our view:'
  prefs: []
  type: TYPE_NORMAL
- en: We import our `models.py` file; it's the model that we will use in the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then create an instance of our `Project` model and fill it with data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we execute the `save()` method that saves the present data in the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will test this code by starting the development server (or runserver) and
    then go to our URL. In the `render()` method, the value that we defined in the
    `action` variable is displayed. To check if the query is executed, we can use
    the administration module. There is also the software for managing databases.
  prefs: []
  type: TYPE_NORMAL
- en: We need to add more records by changing the values randomly in `line 2`. To
    find out how to do this, we'll need to read this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data from the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before using Django to retrieve data from a database, we were using SQL queries
    to retrieve an object containing the result. With Django, there are two ways to
    retrieve records from the database depending on whether we want to get back one
    or several records.
  prefs: []
  type: TYPE_NORMAL
- en: Getting multiple records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To retrieve records from a model, we must first import the model into the view
    as we have done before to save the data in a model.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can retrieve and display all the records in the `Project` model as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The code template that displays the projects becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `all()` method can be linked to a SQL `SELECT * FROM` query. Now, we will
    use the `filter()` method to filter our results and make the equivalent of a `SELECT
    * FROM Project WHERE field = value` query.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to filter model records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We used a new syntax to send the variables to the template. The `locals()` function
    sends all the local variables to the template, which simplifies the render line.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Best practices recommend that you pass the variables one by one and only send
    the necessary variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each argument from the `filter()` method defines a filter for the query. Indeed,
    if we wanted to make two filters, we would have written the following line of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This line is equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first line can be broken into two, because the querysets are chainable.
    Chainable methods are methods that return a queryset such that other queryset
    methods can be used.
  prefs: []
  type: TYPE_NORMAL
- en: The response obtained with the `all()` and `filter()` methods is of the queryset
    type. A queryset is a collection of model instances that can be iterated over.
  prefs: []
  type: TYPE_NORMAL
- en: Getting only one record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The methods that we will see in this chapter return objects of the `Model` type,
    which will be used to record relationships or to modify the instance of the model
    recovered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve a single record with a queryset, we should use the `get()` method
    as in the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `get()` method when used as the `filter()` method accepts filter arguments.
    However, you should be careful with setting the filters that retrieve a single
    record.
  prefs: []
  type: TYPE_NORMAL
- en: If the argument to `get()` is `client_name = "Me"`, it would generate an error
    if we had more than two records corresponding to `client_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a model instance from the queryset instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We said that only the `get()` method makes it possible to retrieve an instance
    of a model. This is true, but sometimes it can be useful to retrieve an instance
    of a model from a queryset.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to get the first record of the customer `Me`, we will
    write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'These methods are chainable, so we can write the following line instead of
    the previous three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using the get parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have learned how to retrieve a record and we know how to use a
    URL, we will create a page that will allow us to display the record of a project.
    To do this, we will see a new URL syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This URL contains a new string, `(?P<pk>\d+)`. It allows the URL with a decimal
    parameter to be valid because it ends with `\d`. The `+` character at the end
    means that the parameter is not optional. The `<pk>` string means that the parameter's
    name is `pk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The system routing Django will directly send this parameter to our view. To
    use it, simply add it to the parameters of our `page()` function. Our view changes
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create our `en/public/project_detail.html` template extended from
    `base.html` with the following code in the `article_content` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We have just written our first URL containing a parameter. We will use this
    later, especially in the chapter about the class-based views.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the foreign key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already recorded data from a model, but so far, we have never recorded
    it in the relationship database. The following is an example of recording a relationship
    that we will explain later in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have loaded four models. These four models are used to create
    our first task. Indeed, a spot is related to a project and developer. A developer
    is attached to a supervisor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following this architecture, we must first create a supervisor to add a developer.
    The following list explains this:'
  prefs: []
  type: TYPE_NORMAL
- en: We create a new supervisor. Note that the extending model requires no additional
    step for recording. In the `Supervisor` model, we define the fields of the `App_user`
    model without any difficulties. Here, we use `timezone` to record the current
    day's date.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We look for the first recorded project. The result of this line will record
    a legacy of the `Model` class instance in the `project_to_link` variable. Only
    the `get()` method gives the instance of a model. Therefore, we must not use the
    `filter()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create a new task, and attribute the project created in the beginning of
    the code and the developer that we just recorded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This example is very comprehensive, and it combines many elements that we have
    studied from the beginning. We must understand it in order to continue programming
    in Django.
  prefs: []
  type: TYPE_NORMAL
- en: Updating records in the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two mechanisms to update data in Django. Indeed, there is a mechanism
    to update one record and another mechanism to update multiple records.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a model instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Updating the existing data is very simple. We have already seen what it takes
    to be able to do so. The following is an example where it modifies the first task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we created a new project and saved it. We searched our task
    for `id = 1`. We changed the description and project to the task it is attached
    to. Finally, we saved this task.
  prefs: []
  type: TYPE_NORMAL
- en: Updating multiple records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To edit multiple records in one shot, you must use the `update()` method with
    a queryset object type. For example, our `People` customer is bought by a company
    named `Nobody`, so we need to change all the projects where the `client_name`
    property is equal to `People`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `update()` method of a queryset can change all the records related to this
    queryset. This method cannot be used on an instance of a model.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete a record in the database, we must use the `delete()` method. Removing
    items is easier than changing items, because the method is the same for a queryset
    as for the instances of models. An example of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `line 1` removes the stain with `id = 1`. Then, `line 2` removes
    all the present tasks in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful because even if we use a web framework, we keep hold of the data.
    No confirmation will be required in this example, and no backup has been made.
    By default, the rule for model deletion with `ForeignKey` is the `CASCADE` value.
    This rule means that if we remove a template instance, the records with a foreign
    key to this model will also be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Getting linked records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now know how to create, read, update, and delete the present records in the
    database, but we haven't recovered the related objects. In our `TasksManager`
    application, it would be interesting to retrieve all the tasks in a project. For
    example, as we have just deleted all the present tasks in the database, we need
    to create others. We especially have to create tasks in the project database for
    the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Python and its comprehensive implementation of the object-oriented model,
    accessing the related models is intuitive. For example, we will retrieve all the
    project tasks when `login = 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now look for the project task when `id = 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We will now use the relationship to access the project task.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced usage of the queryset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We studied the basics of querysets that allow you to interact with the data.
    In specific cases, it is necessary to perform more complex actions on the data.
  prefs: []
  type: TYPE_NORMAL
- en: Using an OR operator in a queryset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In queryset filters, we use a comma to separate filters. This point implicitly
    means a logical operator `AND`. When applying an `OR` operator, we are forced
    to use the `Q` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `Q` object allows you to set complex queries on models. For example, to
    select the projects of the customers `Me` and `Nobody`, we must add the following
    lines in our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Using the lower and greater than lookups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the Django queryset, we cannot use the `< and >` operators to check whether
    a parameter is greater than or less than another.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must use the following field lookups:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__gte`: This is equivalent to SQL''s greater than or equal to operator, `>=`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__gt`: This is equivalent to SQL''s greater than operator, `>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__lt`: This is equivalent to SQL''s lower than operator, `<`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__lte`: This is equivalent to SQL''s lower than or equal to operator, `<=`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, we will write the queryset that can return all the tasks with
    a duration of greater than or equal to four hours:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Performing an exclude query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The exclude queries can be useful in the context of a website. For example,
    we want to get the list of projects that do not last for more than four hours:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Making a raw SQL query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, developers may need to perform raw SQL queries. For this, we can
    use the `raw()` method, defining the SQL query as an argument. The following is
    an example that retrieves the first task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the name of the first task, just use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to handle the database, thanks to the Django
    ORM. Indeed, thanks to the ORM, the developer does not need to write SQL queries.
    In the next chapter, we will learn how to create forms using Django.
  prefs: []
  type: TYPE_NORMAL
