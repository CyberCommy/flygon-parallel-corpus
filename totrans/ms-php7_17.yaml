- en: Hosting, Provisioning, and Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hosting, provisioning, and deployment are admittedly three very distinct activities that
    often go hand in hand with the overall application life cycle management. Whereas,
    some types of hosting solutions make it near impossible to achieve seamless deployments,
    others make it an ultimately joyful and time-effective experience for developers.
    This brings us to the most important point of all, which is, *Why would developers
    even bother with these system operations things*? There are plenty of answers
    for this one. Whereas, the real sales pitch is simple as: market demands it. Nowadays,
    developers are tangled in a web of multidisciplinary activities, which often goes
    beyond coding skills itself and into system operations at some level. The *not
    my job* mantra is all but reserved for us here, which is ultimately alright, as
    having a strong knowledge about activities supporting an entire application life
    cycle makes us more responsive in the face of possible outages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a high-level overview on some of these activities
    through the following few sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right hosting plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the right hosting plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Choosing the right hosting plan for our next project can be a tedious challenge. There
    are many types of solutions to choose from, some of which include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Shared server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual private server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dedicated server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They all have their *pros* and *cons*. Whereas once decision factors were dominated
    by features such as memory, CPU, bandwidth, and disk storage, those became ever *cheaper* over
    the years. Nowadays,** auto-scaling** and **ease of deployment** emerged as an
    equally important metrics. While ultimately the pricing plays a crucial role,
    great deal of modern hosting solutions have a lot to offer for an affordable price.
  prefs: []
  type: TYPE_NORMAL
- en: Shared server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The shared web hosting service is the one where many different users host their
    applications. The hosting provider usually provides a well-tuned web server with
    MySQL or PostgreSQL database and an FTP access. On top of that, there is usually
    a web-based control panel system, such as cPanel, Plesk, H-Sphere, or alike. This
    allows us to manage a limited set of features through a nice graphical interface,
    right from our browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The popular PC Mag magazine ([http://www.pcmag.com](http://www.pcmag.com))
    shares the list of the best web hosting services of 2017 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: HostGator Web Hosting: [http://www.hostgator.com](http://www.hostgator.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1&1 Web Hosting: [https://www.1and1.com](https://www.1and1.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InMotion Web Hosting: [https://www.inmotionhosting.com/](https://www.inmotionhosting.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DreamHost Web Hosting: [https://www.dreamhost.com](https://www.dreamhost.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GoDaddy Web Hosting: [https://www.godaddy.com](https://www.godaddy.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluehost Web Hosting: [https://www.bluehost.com](https://www.bluehost.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hostwinds Web Hosting: [https://www.hostwinds.com](https://www.hostwinds.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liquid Web Hosting: [https://www.liquidweb.com](https://www.liquidweb.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A2 Web Hosting: [https://www.a2hosting.com](https://www.a2hosting.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arvixe Web Hosting: [https://www.arvixe.com](https://www.arvixe.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each of these web hosting services seems to provide a similar set of functionalities,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/184cd2c3-4562-4178-b101-b2518c70154c.png)'
  prefs: []
  type: TYPE_IMG
- en: While the affordable shared server price might seem tempting, the lack of control
    over the server limits its use with any serious applications. Our application
    shares the same CPU, memory, and storage as a dozen, a hundred, or even a thousand
    other applications. We don't get to install any software we want, which might
    even turn into a deal breaker if our application requires some fancy PHP extension,
    which is why this type of a poor man's hosting is something we should wholeheartedly
    try to avoid for anything other than the business card or blog type of applications.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual private server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **virtual private server** (**VPS**) is a virtual machine provided by the
    hosting provider. This machine then runs its own operating system to which we
    often have a full super-user access. The VPS itself shares the same set of physical
    hardware resources as other VPS machines. This means that our VPS performance can
    easily be impaired by other VPS machines' processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The popular PCMag magazine ([http://www.pcmag.com](http://www.pcmag.com)) shares
    the list of the best VPS web hosting services of 2017 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: HostGator Web Hosting: [http://www.hostgator.com](http://www.hostgator.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InMotion Web Hosting: [https://www.inmotionhosting.com/](https://www.inmotionhosting.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1&1 Web Hosting: [https://www.1and1.com](https://www.1and1.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DreamHost Web Hosting: [https://www.dreamhost.com](https://www.dreamhost.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hostwinds Web Hosting: [https://www.hostwinds.com](https://www.hostwinds.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liquid Web Hosting: [https://www.liquidweb.com](https://www.liquidweb.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GoDaddy Web Hosting: [https://www.godaddy.com](https://www.godaddy.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluehost Web Hosting: [https://www.bluehost.com](https://www.bluehost.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media Temple Web Hosting: [https://mediatemple.net](https://mediatemple.net)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are quite a few variations between these hosting services, mostly in
    terms of memory and storage, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/91a06c56-f120-4c7b-b174-41d46c935157.png)'
  prefs: []
  type: TYPE_IMG
- en: While VPS is still a form of shared resources, it allows us a much greater degree
    of freedom than conventional shared hosting. Having full super-user access to
    the machine means we can install pretty much any piece of software we want to. This
    also means a greater degree of responsibility for us.
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dedicated server assumes a real physical machine provided by the hosting
    provider. Such a machine does not share resources with anyone else other than
    us. This makes it a viable option for high-performance and mission-critical applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The popular PCMag magazine ([http://www.pcmag.com](http://www.pcmag.com))shares
    the list of the best dedicated web hosting services of 2017 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: HostGator Web Hosting: [http://www.hostgator.com](http://www.hostgator.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DreamHost Web Hosting: [https://www.dreamhost.com](https://www.dreamhost.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InMotion Web Hosting: [https://www.inmotionhosting.com/](https://www.inmotionhosting.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1&1 Web Hosting: [https://www.1and1.com](https://www.1and1.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liquid Web Hosting: [https://www.liquidweb.com](https://www.liquidweb.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hostwinds Web Hosting: [https://www.hostwinds.com](https://www.hostwinds.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GoDaddy Web Hosting: [https://www.godaddy.com](https://www.godaddy.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluehost Web Hosting: [https://www.bluehost.com](https://www.bluehost.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SiteGround Web Hosting: [https://www.siteground.com](https://www.siteground.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPage Web Hosting: [http://www.ipage.com](http://www.ipage.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are quite a few variations between these hosting services, mostly in
    terms of memory and storage, as you can see in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/da07ab44-f81e-475b-9912-7a51c6cfd3d1.png)'
  prefs: []
  type: TYPE_IMG
- en: While they come at a higher cost, dedicated servers guarantee a level of performance and
    full control over the machine. At the same time, managing scalability and redundancy
    can easily turn into a challenge of its own.
  prefs: []
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **platform as a service** (**PaaS**) is a special type of hosting where
    a provider delivers hardware and software tools needed to speed up application
    development. We may go so far as to compare PaaS with the power and flexibility
    of dedicated servers backed by dozens of easily connected services assisting the availability,
    reliability, scalability, and application development activities. This makes it
    a popular choice among developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The popular *IT Central Station* site ([https://www.itcentralstation.com](https://www.itcentralstation.com)) shares
    the list of the best PaaS clouds vendors of 2017 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon AWS: [https://aws.amazon.com](https://aws.amazon.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure: [https://azure.microsoft.com](https://azure.microsoft.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku: [https://www.heroku.com](https://www.heroku.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mendix: [https://www.mendix.com](https://www.mendix.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salesforce App Cloud: [https://www.salesforce.com](https://www.salesforce.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle Java Cloud Service: [https://cloud.oracle.com/java](https://cloud.oracle.com/java)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HPE Helion: [https://www.hpe.com](https://www.hpe.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rackspace Cloud: [https://www.rackspace.com](https://www.rackspace.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google App Engine: [https://cloud.google.com](https://cloud.google.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle Cloud Platform: [http://www.oracle.com/solutions/cloud/platform/](http://www.oracle.com/solutions/cloud/platform/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following report has been taken for April 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/be1377b9-9681-4ac9-90a4-9cda5491dd3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While all of these services have much to offer, it is worth pointing out Amazon
    AWS, which was named by Gartner in 2016 Magic Quadrant for Cloud Infrastructure
    as a Service as having the furthest completeness of vision. The evaluation criteria
    are based on several key factors:'
  prefs: []
  type: TYPE_NORMAL
- en: Market understanding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketing strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sales strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offering (product) strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vertical/industry strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Innovation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geographic strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The great starting point with Amazon AWS is its EC2 service, which provides
    resizable virtual servers. These act much like the dedicated server, but in cloud,
    where we get to choose the region of the world we would like to deploy these.
    On top of that, there are dozens of other services within the Amazon AWS offering
    that enrich the overall application management:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0c910bfa-97f3-4b82-9826-2c20bbdf02c9.png)'
  prefs: []
  type: TYPE_IMG
- en: An easy-to-use interface, rich service offering, affordable price, great documentation,
    certification, and available tooling are some of the *selling points* for developers
    when it comes to Amazon AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Automating provisioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The provisioning is a term that has gained a lot of traction among developers
    lately. It refers to the activity of setting up and configuring *servers *with
    every bit of required software, making it ready for application use. While this
    sounds a lot like the system operations type of work, developers found it interesting
    with the rise of cloud services and the tooling surrounding it.
  prefs: []
  type: TYPE_NORMAL
- en: Historically, provisioning implied a lot of manual type of work. There were
    not as many general purpose automated provisioning tools as there is today. This
    meant that there were times when provisioning took days or even weeks. Looking
    through the prism of today's market demands, such a scenario is hardly imaginable. Nowadays,
    a single application is usually served by several different servers, each of which
    is targeting a single functionality, such as web (Apache, Nginx, ...), storage
    (MySQL, Redis, ...), session (Redis, Memcached, ...), static content (Nginx),
    and so on. We simply cannot afford to spend days setting up each of the servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several popular tools we can use to automate provisioning, some of
    which include these popular four:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible: [https://www.ansible.com](https://www.ansible.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef: [https://www.chef.io/chef/](https://www.chef.io/chef/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet: [https://puppet.com](https://puppet.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SaltStack: [https://saltstack.com](https://saltstack.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like others tools of the same type, these are all built with the goal of making
    it easier to configure and maintain dozens, hundreds, or even thousands of servers.
    While all of these tools are more likely to get any provisioning job done with
    equal effect, let's take a closer look at one of them. Released in 2012, **Ansible**
    is the youngest of the four. It is an open source tool that automates software
    provisioning, configuration management, and application deployment. This tool
    performs all of its functions over SSH, without requiring any agent software installation
    on the target node/server. This alone makes it a favorable choice among developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several key concepts around Ansible, some of which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inventories**: This is the list of Ansible managed servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Playbooks**: This is Ansible''s configuration expressed in YAML format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roles**: This is automation around include directives based on a file structure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tasks**: This is the possible actions that Ansible can execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [https://galaxy.ansible.com](https://galaxy.ansible.com) service acts as
    a hub that provides ready-to-use roles.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a very basic understanding of Ansible, let''s do a very simple and quick demonstration
    based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu workstation machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu server machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use the `ansible` tool to provision software on the server machine.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the workstation machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Ubuntu powered workstation, we can easily install the Ansible tool just
    by running the following set of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If all went well, `ansible --version` should give us an output much like this
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/56100755-07ae-4070-a76c-5bb8d7660e9d.png)'
  prefs: []
  type: TYPE_IMG
- en: The Ansible is a console tool for running ad-hoc tasks. Whereas ad-hoc implies
    on something we do quickly, without writing the entire playbook for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Likewise,  `ansible-galaxy --version` should give us an output much like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e46bcaf4-27a2-4508-b704-2e6a584a47ca.png)'
  prefs: []
  type: TYPE_IMG
- en: The `ansible-galaxy` is a console tool we can use to install, create, and remove
    roles, or perform tasks on the Galaxy website. By default, tool communicates with
    the Galaxy website API using the server address [https://galaxy.ansible.com](https://galaxy.ansible.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Also,  `ansible-playbook --version` should give us an output much like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ecde8c01-88b0-43c4-92f0-0f626e40808a.png)'
  prefs: []
  type: TYPE_IMG
- en: The `ansible-playbook` is a console tool used for configuration management and
    deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the Ansible tool in place, let''s make sure our workstation has a proper
    SSH key, which we will use later on to connect to the server machine. We can easily
    generate the SSH key by simply running the following command, followed by hitting
    the *Enter* key when asked for a file and passphrase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give us an output much like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3329b101-a613-4111-849d-ce5445e4f27d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the Ansible playbooks, we can define various provisioning steps in the
    easy-to-read YAML format.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the server machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We previously mentioned there are several hosting solutions that allow full
    control over the server machine. These solutions come in form of VPS, dedicated
    and cloud services. For the purpose of this example, we will be using the **Vultr
    Cloud Compute** (**VC2**), which is available at [https://www.vultr.com](https://www.vultr.com). Without
    going too deep into the ins and outs of the Vultr service, it's suffice to say
    it provides an affordable cloud compute service via an easy-to-use administration
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming we have created a Vultr account, the first thing we want to do now
    is to add our workstation SSH public key to it. We can easily do so through Vultr''s
    Servers | SSH Keys interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b545e1ce-e654-4d46-ae8a-cb67b84f7227.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the SSH Key is saved, we can go back to the Servers screen and click on
    the Deploy New Server button. This brings us to the Deploy New Instance interface,
    which presents us with several steps. The steps we focus our attention on are
    Server Type and SSH Keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Server Type, let''s go ahead and choose Ubuntu 16.04 x64:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1ae8b244-c72a-41b9-ab0c-a9d61359c1e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For SSH Keys, let''s go ahead and choose the SSH key we just added to Vultr:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c7927438-9cfb-44cc-9e35-ec0df7f7bf81.png)'
  prefs: []
  type: TYPE_IMG
- en: With these two selected, we can click on the Deploy Now button, which should
    trigger deployment of our server machine.
  prefs: []
  type: TYPE_NORMAL
- en: To this point, we might wonder, what the purpose of this exercise might be,
    as we have clearly created a server machine pretty much manually. After all, Ansible
    has a module to manage servers on Vultr so we could have easily used that for server
    creation. The exercise here, however, is around the basics of understanding how
    easily it is to "hook" Ansible to an existing server machine and then use it to
    provision further software to it. Now that we have a server machine running, let's
    move on to the further configuration of Ansible on the workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Back on our workstation machine, let''s go ahead and create a project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go ahead and create an `ansible.cfg` file with its content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s go ahead and create the `hosts` file with its content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, `45.76.88.214` is the IP address of our server
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should now be able to run the `ansible` tool as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Ideally, this should give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7a8dda31-5e3f-407d-bec1-a71d00875715.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ansible` tool might throw a MODULE FAILURE message in the case of a missing
    Python installation on our server machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/19345ad7-cc19-4387-bcc2-cfffee03a3ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If this happens, we should SSH into our server machine and install Python as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: At this point, our workstation `ansible` tool should be set to have clear communication
    with our *server* machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and do a quick lookup for the LAMP server role on the
    Galaxy hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/839f6ee3-25ba-4c8a-94ac-ce15d32d08e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on one of the results gives us information on how to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/50e2500d-800f-4b9b-97a9-04e81d05ff3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By running the following command on the workstation, we install the existing `fvarovillodres.lamp` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Provisioning a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the newly pulled `fvarovillodres.lamp` rule, we should be able to effortlessly
    deploy a new web server. To do so, all it takes is creating a playbook, such as
    `lamp.yaml`, with its content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can easily run our `lamp.yaml` playbook via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This should trigger the tasks within the `fvarovillodres.lamp` role that we
    pulled from the Galaxy hub upon completion:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/767386fe-8bb1-46d1-bad4-3be0cd3ba65b.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, opening a `http://45.76.88.214/` URL should give us an Apache page.
  prefs: []
  type: TYPE_NORMAL
- en: The overall topic of provisioning, or even Ansible, is a broad subject worth
    a book of its own. The example given here is merely to showcase the ease of use
    of the available tooling in order to address the provisioning in an automated
    way. There is one important takeaway here, which is that we need full control
    over the server/node in order to utilize the provisioning. This is why shared
    types of hosting are excluded from any such discussions.
  prefs: []
  type: TYPE_NORMAL
- en: The exact example given here uses a single server box. However, it is not hard
    to imagine how easily this approach can be scaled up to a dozen or even hundreds
    of server machines just by amending the Ansible configuration. We could have easily
    used Ansible itself to automate the deployment for our application, where each
    deployment, for instance, might trigger a new server creation process with code
    being pulled from some Git repository or alike. There are, however, more simpler,
    specialized tools to handle automated deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Automating the deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying a PHP application primarily implies deploying PHP code. Since PHP
    is an interpreted and not compiled language, the PHP applications deploy their
    code as-is, in source files. This means that there is no real build process involved
    when deploying an application, which further means that application deployment
    can be as easy as doing a `git pull`within a server web directory. Surely, things
    are never that simple, as we often have various other bits that need to fit in
    place when the code is deployed, such as databases, mounted drives, shared files,
    permissions, other services connected to our server, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We can easily imagine the complexity of having to manually deploy code from
    a single git repository onto dozens of web servers behind some load balancer at
    the same time. Such manual deployments will surely have negative implications,
    as we end up with a time in-between overall deployments, where one server might
    have newer versions of an application code, while others still serve the old application.
    The lack of consistency is, therefore, just a one of the impacting challenges
    to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, there are a dozen of tools that address the challenges of automated
    deployments. While we won''t be getting into the ins and outs of any of them specifically,
    for the sake of a quick comparison, let''s just mention the following two:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deployer: This is an open source PHP-based tool suited for automating deployments,
    available at [https://deployer.org](https://deployer.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS CodeDeploy: This is a code deployment service offered by AWS, available
    at [https://aws.amazon.com/codedeploy/](https://aws.amazon.com/codedeploy/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike AWS CodeDeploy, the Deployer tool is service-independent. That is, we
    can use it to deploy code to any server upon which we have control, including
    the AWS EC2 instances. The AWS CodeDeploy, on the other hand, is a service tightly
    integrated into an AWS itself, meaning we cannot use it outside of the AWS. This
    does not mean Deployer is better than AWS CodeDeploy in this case. It simply goes
    to show that some cloud and PaaS services offer their own integrated solutions
    to automated deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, let's take a quick look at how easily we can set Deployer to deploy
    code to our server machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Deployer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing Deployer is quite easy via the following few commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the `dep` console command now gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8658dbb-e27b-4db8-8939-841d1ef0cc88.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Deployer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several key concepts that comprise of the Deployer applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration**: Using the `set()` and `get()` functions, we set and fetch
    one or more configurations options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Tasks**: These are units of work defined via the `task()` function, used
    together with the `desc()` method that sets the task description. Within the task,
    there is usually one or more functions, such as `run()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Servers**: This is the list of servers defined via the server() function, as
    shown in the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Flow**: This represents a group of tasks. The common type project uses a
    default flow as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We could easily create our own flow by changing this flow from the auto-generated
    `deploy.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**: This is a group of utility functions that provide useful functionality,
    such as `run()`, `upload()`, `ask()`, and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the Deployer tool is quite straightforward. Unless we already have some
    previously created recipes, we can create one simply by running the following
    console command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This kicks off an interactive process, asking us to choose the type of project
    we are working with. Let''s proceed with the idea of deploying our MPHP7-CH16
    application from [https://github.com/ajzele/MPHP7-CH16](https://github.com/ajzele/MPHP7-CH16)
    repository, flagging it as [0] Common:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02df8f41-0871-4578-85c3-2892313e2b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This command generates the `deploy.php` file with its content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We should approach this file as a template that needs adjusting to our real
    servers. Assuming we wish to deploy our MPHP7-CH16 application to our previously
    provisioned `45.76.88.214` server, we can do so by adjusting the `deploy.php`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We used the `set()` function to configure the location of the git repository.
    The `server()` function then defines the individual server we called `production`, behind
    a 45.76.88.214 IP. The `identityFile()` simply tells the system to use the SSH
    key instead of the password for the SSH connection. Next to the server, we defined
    two custom tasks, `web:symlink` and `apache:restart`. These make sure proper mapping
    is done from the Deployer's `/var/www/MPHP7/current/` directory to our `/var/www/html/`
    directory. The `after()` function calls simply define the order when our two custom
    jobs are supposed to execute, which is after the Deployer's `deploy:symlink` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute the amended deploy.php, we use the following console command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c9c49579-6533-4918-a566-48ebbaf9bc77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To confirm that the deployment was successful, opening `http://45.76.88.214/`
    should give us the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f90af051-6936-48f4-af14-49e7609bf3e7.png)'
  prefs: []
  type: TYPE_IMG
- en: This simple Deployer script gave us a powerful way of automatically deploying code
    from our repository into a server. Scaling this to multiple servers is imaginably
    easy, given the Deployer's `server()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea behind continuous integration is to bind together the building, testing,
    and releasing processes in an easy-to-oversee manner. As we mentioned before, the
    notion of building is a bit of a specific one when it comes to PHP, given the
    interpreted nature of the language itself; we are not talking about compiling
    code here. With PHP, we tend to relate it to various configurations required by
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'That being said, some of the strong points of continuous integration include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Automated code coverage and quality check through static code analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation by running after each developer code push
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated faulty code detection through unit and behavior testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduced application release cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased visibility across project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a dozen of continuous integration tools to chose from, some of which
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHPCI**: [https://www.phptesting.org](https://www.phptesting.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins**: [http://jenkins-php.org](http://jenkins-php.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Travis CI**: [https://travis-ci.org](https://travis-ci.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TeamCity**: [https://www.jetbrains.com/teamcity/](https://www.jetbrains.com/teamcity/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bamboo**: [https://www.atlassian.com/software/bamboo](https://www.atlassian.com/software/bamboo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CodePipeline**: [https://aws.amazon.com/codepipeline/](https://aws.amazon.com/codepipeline/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It would be unfair to say one of these tools is better than the others. Though
    Jenkins seems to resurface slightly more than others when it comes to PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jenkins is an open source, self-contained, cross-platform, ready to run Java-based automation
    server. There are regularly two versions of Jenkins being released: **long term
    support** (**LTS**) and weekly releases. The LTS version gives it a bit of an
    enterprise-friendly feel, among other things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/174cd357-c8e0-476b-8a75-7c85c2af7fde.png)'
  prefs: []
  type: TYPE_IMG
- en: Out-of-the-box, Jenkins does not really do anything for PHP code specifically,
    which is where plugins come into the mix.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rich Jenkins plugin system enables us to easily install the plugins to
    work with the following PHP tools:'
  prefs: []
  type: TYPE_NORMAL
- en: PHPUnit: This is a unit testing framework that is available at [https://phpunit.de/](https://phpunit.de/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP_CodeSniffer: This is a tool that detects violations against a certain set
    of coding standards, available at [https://github.com/squizlabs/PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPLOC: This is a tool to quickly measure the size of a PHP project, which is
    available at [https://github.com/sebastianbergmann/phploc](https://github.com/sebastianbergmann/phploc)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP_Depend: This shows the quality of code design in the terms of extensibility,
    reusability, and maintainability, which is available at [https://github.com/pdepend/pdepend](https://github.com/pdepend/pdepend)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPMD: This is the PHP mess detector, which is available at [https://phpmd.org/](https://phpmd.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPCPD: This is the copy/paste detector for PHP code, which is available at
    [https://github.com/sebastianbergmann/phpcpd](https://github.com/sebastianbergmann/phpcpd)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: phpDox: This is a documentation generator for PHP projects, which is available
    at [http://phpdox.de/](http://phpdox.de/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins for these tools affect the automated testing bits that Jenkins is able
    to continuously run for us. The bits about code deployments are generally language-agnostic.
    Going into the details of plugin installation and the overall use of Jenkins,
    it is a topic for a book of its own. The takeaway here is to understand the importance
    and role of of continuous integration over the application life cycle, as well
    as to raise awareness of available tools.
  prefs: []
  type: TYPE_NORMAL
- en: See [https://jenkins.io/doc/](https://jenkins.io/doc/) and [https://plugins.jenkins.io/](https://plugins.jenkins.io/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we touched upon some of the non-coding essentials surrounding
    our application. While developers tend to avoid much of these system operations
    related activities, the hands-on experience with servers and their setups have
    a massive advantage with deployments and quick outage responses. Drawing a not-my-job
    line within our line of work is always a slippery slope. Working closely with
    system operations adds a layer of quality around our applications. The layer which
    the end-user might otherwise perceive as a fault in the application itself, rather
    than its infrastructure. Hosting, provisioning, and deployment have become topics
    every developer needs to be familiar with. The tools offering around these activities
    seem quite satisfactory in terms of availability and ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we covered a wide and seemingly independent range of topics.
    These show us that building applications is all but an easy and quick task. Knowing
    the ins and outs of the PHP language itself does not imply quality software. Giving
    structure to our code is among the first signs of modularity, which, in turn,
    reduces the impact of technical debt. This is where standards and design patterns
    play an important role. Testing, without a doubt, proved to be an essential part
    of every application. Luckily the PHP ecosystem provides rich testing frameworks
    to easily cover both the TDD and BDD styles. With the great new features added
    in PHP 7, writing quality PHP applications has never been easier.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, by now, we know enough about PHP, its ecosystem, and various other
    essential bits and pieces that comprise quality applications, in order to become
    proficient at developing them. With all being said, we conclude our journey.
  prefs: []
  type: TYPE_NORMAL
