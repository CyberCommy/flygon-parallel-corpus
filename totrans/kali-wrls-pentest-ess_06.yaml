- en: Chapter 6. Attacking Access Points and the Infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.html "Chapter 5. WPA/WPA2 Cracking"), *WPA/WPA2 Cracking*,
    we learned how to crack a WPA preshared key in WPA-Personal mode. There is another
    way to recover PSK; attacking AP to exploit a flaw in **Wi-Fi Protected Setup**
    (**WPS**). In this chapter, we are going to cover this attack, the attacks against
    WPA-Enterprise and other attacks targeting the access points and the network infrastructure,
    explaining the techniques and the tools in Kali Linux to conduct such attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that we are going to cover are:'
  prefs: []
  type: TYPE_NORMAL
- en: Attacks against Wi-Fi Protected Setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking WPA-Enterprise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of Service attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rogue access points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking AP authentication credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks against Wi-Fi Protected Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WPS is a security mechanism for access points introduced by the Wi-Fi Alliance
    in 2006 to allow clients to connect more easily to a wireless network, supplying
    an eight digit PIN instead of the preshared key. If the PIN is correct, the AP
    supplies the client with the WPA PSK to authenticate to the network.
  prefs: []
  type: TYPE_NORMAL
- en: The WPS specification also supports a **Push-Button-Connect** (**PBC**) method,
    where a button is pushed on both the AP and on the client device to start the
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: In 2011, two researchers, Stefan Viehböck and Craig Heffner, independently discovered
    a vulnerability in WPS that could allow an attacker to recover the PIN in a few
    hours through a brute-force attack and gain access to the network. Heffner also
    developed and released a tool that implements this attack, **Reaver**.
  prefs: []
  type: TYPE_NORMAL
- en: The flaw resides in the way the PIN is checked by the AP. Indeed, the eight
    digit PIN is not sent in its entirety to the AP, but only the first half is sent
    and checked and after, if it is correct, the second half is sent and verified.
    If the first half is not correct, the AP sends a negative response to the client.
    Thus, the two halves of the PIN are checked independently by the AP.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the last digit of the PIN is a checksum of the other seven digits
    and so can be derived from these.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, an attacker could attempt to guess the first four digits of the
    PIN trying at most *10^4 = 10,000* values and then the second half with at most
    *10^3 = 1,000* possibilities, for a total of 11,000 possible values, against the
    *10^7 = 10,000,000* possible combinations with the whole PIN. That makes a big
    difference in a brute-force attack, reducing a lot the time required to perform
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'WPS can be disabled in the administration panel of the access point. In this
    case, we enable it, leaving the preconfigured PIN of the AP, to demonstrate how
    the attack works, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacks against Wi-Fi Protected Setup](img/B04527_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Recent AP models implement a lock-down mechanism after a certain number of attempts
    to guess the PIN.
  prefs: []
  type: TYPE_NORMAL
- en: Another type of attack targeting WPS, the **Pixie Dust** attack, has been introduced
    quite recently (2014) by Dominique Bongard. It is an *offline* brute-force attack
    to recover the PIN, while the one previously seen and implemented by Reaver is
    an online attack that is continuously interacting with the AP.
  prefs: []
  type: TYPE_NORMAL
- en: The Pixie Dust attack greatly enhances the speed of the WPS PIN recovery process,
    reducing the time required to a few seconds or minutes in the worst case.
  prefs: []
  type: TYPE_NORMAL
- en: The technical details of the attack can be found at [http://archive.hack.lu/2014/Hacklu2014_offline_bruteforce_attack_on_wps.pdf](http://archive.hack.lu/2014/Hacklu2014_offline_bruteforce_attack_on_wps.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: A tool, written in C and called **Pixiewps**, has been developed as a proof-of-concept
    code to demonstrate the Pixie Dust attack. This tool has been integrated with
    a community forked version of Reaver, reaver-wps-fork-t6x, to support this new
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: Not all the APs are vulnerable to the attack; a database of vulnerable AP models
    is available at [https://docs.google.com/spreadsheets/d/1tSlbqVQ59kGn8hgmwcPTHUECQ3o9YhXR91A_p7Nnj5Y/edit#gid=2048815923](https://docs.google.com/spreadsheets/d/1tSlbqVQ59kGn8hgmwcPTHUECQ3o9YhXR91A_p7Nnj5Y/edit#gid=2048815923).
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we will see how to use Reaver to recover the WPS PIN
    with both types of brute-force attacks—online and offline.
  prefs: []
  type: TYPE_NORMAL
- en: Reaver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reaver is a command-line tool that can brute-force a WPS PIN. Before launching
    the program, we must identify our targets, which are the access points that have
    WPS enabled and are not locked against the brute-force attacks. It's here that
    a tool called **Wash** comes to our aid, a WPS scanner which is bundled with Reaver.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to perform an online brute-force attack are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to put our wireless interface in monitor mode, with the usual
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To scan for WPS enabled APs, we execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Reaver](img/B04527_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wash displays information about the detected APs, such as the BSSID, the channel,
    the WPS version used, whether WPS is locked or not, and the ESSID.
  prefs: []
  type: TYPE_NORMAL
- en: 'We choose the target AP and run Reaver to recover the WPS PIN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-b` option specifies the MAC address of the AP.
  prefs: []
  type: TYPE_NORMAL
- en: '![Reaver](img/B04527_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reaver tries every possible combination of the PIN and waits for the response,
    and for this reason it usually takes a few hours to complete the attack, even
    if the possible combinations of the PIN are not so many.
  prefs: []
  type: TYPE_NORMAL
- en: To perform the offline Pixie Dust attack, we have to use the reaver-wps-fork-t6x
    version, which corresponds to the 1.5.2 version of Reaver. This version requires
    Pixiewps and it's also recommendable to upgrade to the latest version (at the
    moment of writing) of Aircrack-ng, 1.2 RC2\. The updated Reaver, pixiewps, and
    the updated Aircrack-ng are available on Kali Linux repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We follow the subsequent steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We upgrade the software with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that pixiewps is also installed as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: '![Reaver](img/B04527_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then put the wireless interface in monitor mode with `airmon-ng start wlan0`:![Reaver](img/B04527_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can observe that the virtual monitor interfaces are named `wlanXmon` instead
    of `monX` in the new version of Aircrack-ng.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute the attack, we run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here the `-i` option specifies our monitor interface, `-b` the AP MAC address,
    `-vvv` is the most verbose output mode, and `-K 1` specifies the Pixie Dust attack.
  prefs: []
  type: TYPE_NORMAL
- en: '![Reaver](img/B04527_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we notice that pixiewps is invoked and discover
    the PIN instantly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reaver](img/B04527_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Pixie Dust attack shows how it could be easy and quick to recover a WPS
    PIN, therefore, it is highly recommended to disable WPS.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking WPA-Enterprise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WPA-Enterprise, as the name says, is the authentication mode used in enterprise
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: In WPA-Enterprise, the AP does not authenticate the client as in WPA-Personal
    mode, but instead delegates it to an **Authentication Server** (**AS**) that communicates
    with the AP through the RADIUS protocol.
  prefs: []
  type: TYPE_NORMAL
- en: The authentication packets exchanged between AP and AS are carried using the
    **Extensible Authentication Protocol** (**EAP**) and specifically the **EAP Over
    LAN** (**EAPOL**), a protocol defined in the 802.1x standard for authentication
    on wired LANs. The AP (authenticator) acts as a relay that forwards the authentication
    packets between the two parties, the client (supplicant) and the AS.
  prefs: []
  type: TYPE_NORMAL
- en: 'EAP is an authentication framework rather than a single protocol and comes
    in many types, among which the most important are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lightweight EAP** (**LEAP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EAP-MD5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EAP-TLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EAP-FAST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EAP-TTLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PEAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last three are the most common EAP types in use by enterprise networks.
    The authentication process takes place with an EAP-handshake, as shown in the
    following diagram with EAP-TLS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacking WPA-Enterprise](img/B04527_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: LEAP and EAP-MD5 are deprecated because they are susceptible to the brute-force
    and dictionary attacks and don't validate the certificate of the authentication
    server.
  prefs: []
  type: TYPE_NORMAL
- en: LEAP is based on MS-CHAPv2, a challenge-response protocol that transmits the
    authentication data in clear-text, allowing an attacker to retrieve it and launch
    a brute-force attack to obtain the credentials.
  prefs: []
  type: TYPE_NORMAL
- en: EAP-MD5 is also vulnerable to the offline dictionary and brute-force attacks.
  prefs: []
  type: TYPE_NORMAL
- en: EAP-TLS is the original WPA-Enterprise standard authentication protocol and
    is secure because it relies on **Transport Layer Security** (**TLS**). Besides
    the server-side certificate, TLS also requires the client-side certificate validation
    and therefore the deployment of a **Public Key Infrastructure** (**PKI**) by the
    organization to manage the users' certificates.
  prefs: []
  type: TYPE_NORMAL
- en: This has prevented EAP-TLS from becoming widespread in WPA-Enterprise implementations,
    leaving space for the adoption of EAP-FAST, EAP-TTLS, and above all, PEAP, that
    do not mandate to verify the client's certificate but are still secure since they
    are based on TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, these protocols make use of a TLS tunnel that encapsulates an inner
    authentication protocol. For example, in Microsoft Windows implementation, PEAP
    uses MS-CHAPv2 such as LEAP, but encapsulated in the TLS tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes the EAP authentication types and their main
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacking WPA-Enterprise](img/B04527_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the following sections, we will see the practical examples of attacks against
    the WPA-Enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a WPA-Enterprise network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how the attacks work in practice, we will have to configure our access
    point to use WPA-Enterprise and set up a RADIUS server.
  prefs: []
  type: TYPE_NORMAL
- en: Since many consumer APs do not support WPA-Enterprise and setting up a RADIUS
    server is a tedious operation, a practical solution is to install **hostapd-wpe**
    (**hostapd Wireless Pwnage Edition**), a patched version of the **hostapd** tool,
    which allows us to create a virtual AP out of a wireless interface.
  prefs: []
  type: TYPE_NORMAL
- en: Hostapd-wpe, developed by Joshua Wright (the author of Cowpatty and other wireless
    security tools) and Brad Antoniewicz, comes with a bundled FreeRADIUS-WPE server,
    a patch for the FreeRADIUS server that greatly simplifies its configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Hostapd-wpe has recently replaced the FreeRADIUS-WPE project itself. It is not
    preinstalled on Kali Linux, so we need to download and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up a virtual WPA-Enterprise enabled AP, we will execute the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first install the necessary libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The latest version of hostapd is the 2.4 but we have to download and install
    the 2.2 version as the `hostapd-wpe` patch only supports this version (at the
    time of writing this book). We download hostapd with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we download the `hostapd-wpe` patch from its Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We extract the hostapd tar archive and move into the extracted directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to apply the `hostapd-wpe` patch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We move into the `hostapd` directory and compile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once compiled, we move into the `certificate` directory and run the bootstrap
    script to generate self-signed certificates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Before executing `hostapd-wpe`, we have to edit its configuration file `hostapd-wpe.conf`
    located in the `hostapd-2.2/hostapd` directory. We must set `interface=wlan0`
    in the `# Interface` section, comment out the `driver=wired` line in the `#Driver`
    section and uncomment the `802.11 Options`, specifying the SSID we want the AP
    to use.![Setting up a WPA-Enterprise network](img/B04527_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we have saved the configuration file, we can run the program by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting up a WPA-Enterprise network](img/B04527_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have set up our WPA-Enterprise network, we are ready to attack EAP.
  prefs: []
  type: TYPE_NORMAL
- en: Attacks targeting EAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform an attack against EAP, we execute the subsequent steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to capture the EAP handshake and this can be done with `airodump-ng`,
    in the same way as we have seen in the last chapter to capture a WPA four-way
    handshake:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To attack a specific EAP implementation, we have to determine the EAP type in
    use. Airodump-ng does not tell us the EAP type, so we must analyze the EAP handshake
    packet capture with a packet analysis tool like Wireshark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run it, we navigate to the application menu, **Kali Linux** | **Sniffing/Spoofing**
    | **Network Sniffers** | **Wireshark**.
  prefs: []
  type: TYPE_NORMAL
- en: We open our capture file and should see a window like in the following screenshot:![Attacks
    targeting EAP](img/B04527_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We filter the packets with the expression `eap`, to display only those that
    interest us:![Attacks targeting EAP](img/B04527_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scrolling down the packet listing panel, we will notice the EAP handshake packets
    in the **Info** column, as shown in the following screenshot:![Attacks targeting
    EAP](img/B04527_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having discovered the EAP type, now we can proceed with the attack. If the
    authentication server uses LEAP or EAP-MD5 then we can use two tools that implement
    these attacks respectively: `asleap` and `eapmd5pass`, both developed by Joshua
    Wright.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To use asleap, we have to generate a hash table from a dictionary file by using
    the `genkeys` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, pass the hash table, along with the capture file, to `asleap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`Eapmd5pass` works in a similar manner, taking the capture file and a dictionary
    file as the input parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: EAP-TLS can be vulnerable only if the attacker owns the client's private key
    and, therefore, impersonates it towards the authentication server.
  prefs: []
  type: TYPE_NORMAL
- en: PEAP and EAP-TTLS can be attacked if the client does not validate the authentication
    server's certificate. The attacker could set up a fake AP and impersonate the
    legitimate one, breaking the TLS encrypted tunnel and letting him attack the inner
    authentication protocol.
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we will cover PEAP as an example, since it is the most
    deployed EAP type.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking PEAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this example, we use a client machine with Windows that supports PEAP with
    MS-CHAPv2, by default.
  prefs: []
  type: TYPE_NORMAL
- en: To connect to our previously created virtual AP, we must manually add a wireless
    connection in **Control Panel** | **Network and Internet** | **Network and Sharing
    Center** | **Manage Wireless networks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We select **manually create a network profile**, then enter the SSID of our
    AP (`hostapd-wpe`) as the network name and choose **WPA-Enterprise** as the security
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacking PEAP](img/B04527_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the subsequent window, we click on the **Change connection** settings, then
    on the **Security** tab and on **Settings…**:![Attacking PEAP](img/B04527_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We uncheck the **Validate server certificate** option to disable the server
    certificate validation by the client:![Attacking PEAP](img/B04527_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We leave EAP-MSCHAPv2 as the authentication method, click on the **Configure…**
    button and next uncheck the **Windows domain logon authentication** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we start `hostapd-wpe` on the Kali Linux machine with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As we have seen, this command starts an AP with `hostapd-wpe` as the SSID.
  prefs: []
  type: TYPE_NORMAL
- en: We connect the Windows client to the `hostapd-wpe` network and we are prompted
    to input a username and a password. In this case, we can give any credentials
    we want, just to demonstrate the attack. The password here is `my_eap_password`:![Attacking
    PEAP](img/B04527_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `hostapd-wpe` terminal window logs, we can observe this authentication
    attempt, with the challenge and the response of the MSCHAPv2 protocol:![Attacking
    PEAP](img/B04527_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is all we need to launch an offline dictionary attack with `asleap`, passing
    the challenge and the response to the program with the `-C` and `-R` options,
    respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Attacking PEAP](img/B04527_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Denial of Service attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireless networks can be subjected to **Denial of Service** (**DoS**) attacks
    that target both the clients and the APs.
  prefs: []
  type: TYPE_NORMAL
- en: This kind of attack can be performed by sending broadcast deauthentication packets
    continuously to force disconnection and to prevent clients from reconnecting.
  prefs: []
  type: TYPE_NORMAL
- en: 'A tool to accomplish this task is `aireplay-ng` and the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Denial of Service attacks](img/B04527_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this command, the `0` option means sending deauthentication packets continuously
    and only the MAC address of the AP is specified, with the `-a` option. We could
    also target single wireless clients, as we will see in [Chapter 7](ch07.html "Chapter 7. Wireless
    Client Attacks"), *Wireless Client Attacks*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we will cover another tool to perform DoS against wireless
    networks, MDK3.
  prefs: []
  type: TYPE_NORMAL
- en: DoS attacks with MDK3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MDK3 supports the following modes to perform DoS attacks against the wireless
    network:'
  prefs: []
  type: TYPE_NORMAL
- en: The beacon (SSID) flooding mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication DoS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deauthentication/disassociation (Amok) mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the beacon flooding mode, MDK3 sends out a flood of beacon frames, advertising
    fake APs. This method is not mainly designed for the DoS attacks but sometimes
    might cause network scanners and drivers of the wireless adapters to crash, with
    the result of preventing clients to connect to the network. Furthermore, it can
    hide the legitimate APs among the multitude of the fake APs, eventually with very
    similar SSIDs, making it difficult for clients to identify the legitimate networks
    they want to connect to.
  prefs: []
  type: TYPE_NORMAL
- en: To use MDK3, we first need to put our wireless interface in monitor mode, with
    the `airmon-ng start wlan0` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the beacon flooding attack we execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `b` option is for beacon flood mode and `-f` specifies a file that
    contains a list of SSID names to use for the APs. If the `-f` option is not specified,
    random SSIDs are used instead. If we want to use a specific channel, we need to
    use the `-c` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DoS attacks with MDK3](img/B04527_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The authentication flooding mode implies sending many authentication requests
    to the AP, which might not be capable of handling them and consequently freeze
    up. This does not always work and it may require more than one instance of MDK3
    running for this attack to succeed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the syntax of the command is simple as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `a` stands for authentication flooding mode and `-a` specifies the MAC
    address of the target AP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DoS attacks with MDK3](img/B04527_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We notice that the target AP seems not to be vulnerable to this attack method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most effective method for DoS attacks is the deauthentication/disassociation
    (Amok) mode, which sends deauthentication frames to disconnect the clients from
    the AP. To perform this attack with `mdk3`, we first save the MAC address(es)
    of our target AP(s) in a blacklist file. Then, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `d` is obviously for deauthentication/disassociation mode and the `-b`
    option specifies the blacklist file to be used that here contains only one target
    AP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DoS attacks with MDK3](img/B04527_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rogue access points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have covered unauthenticated attacks against the wireless networks,
    to crack WEP or WPA keys, attack WPA-Enterprise, recover the WPS PIN, and to gain
    access to such networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover an attack that assumes the attacker (insider
    or outsider) to be controlling a machine already connected to the wired LAN: rogue
    access points.'
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, a rogue AP is an access point installed on a LAN without authorization
    and can be used by an attacker as a backdoor to the network.
  prefs: []
  type: TYPE_NORMAL
- en: A rogue AP can be installed either physically or via software (soft AP). The
    installation of a physical AP involves breaking the physical security policies
    of the network and can be identified more easily. We are going to see how to install
    a rogue soft AP and bridge it to the wired LAN.
  prefs: []
  type: TYPE_NORMAL
- en: We could accomplish this task with `hostapd-wpe`, but here we use a tool from
    the Aircrack-ng suite, `airbase-ng`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We put our wireless interface in monitor mode with airmon-ng and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Rogue access points](img/B04527_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We notice that a tap interface `at0` is created. To be able to communicate,
    we must create a bridge between the rogue AP and the wired network, hence between
    the `at0` and the Ethernet (`eth0`) interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, we install the `bridge-utils` utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We create the bridge interface with the name `bridge-if`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we connect the `at0` and the `eth0` interfaces to `bridge-if`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We bring up the interfaces with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to enable the kernel level IP forwarding, because the rogue AP
    acts as a router between the wireless and the wired networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, we execute the following command, which has the same effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When a client connects to the rogue AP, `airbase-ng` shows it in its log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rogue access points](img/B04527_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running `airodump-ng`, we can see the details of our rogue AP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rogue access points](img/B04527_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The type of authentication is open, thus with no authentication and encryption,
    as a rogue AP is usually set by default. This can make the AP easily detectable,
    as an open wireless network immediately captures the attention of a penetration
    tester or of the network administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rogue AP can also be set up to use WEP or WPA/WPA2\. For example, to run
    the AP with WPA2-CCMP, we will execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-Z` option is for WPA2 (`-z` for WPA) and the value `4` is for CCMP.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see the output of `airodump-ng`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rogue access points](img/B04527_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also start a hidden rogue AP by running `airbase-ng` with the `-X` option
    instead of the `–essid` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Rogue APs pose a serious threat to network security because they allow unauthorized
    access to the network, circumventing security systems such as firewalls and IDS.
    Indeed, the attacker that connects to a rogue AP can launch attacks against the
    local network, the servers and the clients connected. An attacker can also create
    a rogue AP to impersonate a legitimate AP and conduct man-in-the-middle attacks
    against wireless clients, as we will see in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking AP authentication credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Home routers and APs provide a web administration panel to configure the devices
    that are usually not accessible from the Internet but only from the local network.
  prefs: []
  type: TYPE_NORMAL
- en: A security aspect that may seem atomic, but that is often not considered important
    enough, is default authentication credentials.
  prefs: []
  type: TYPE_NORMAL
- en: It is a common practice not to change the default usernames and passwords to
    access the AP administration interface and many models come preconfigured with
    the puny credentials such as admin/admin. On the Web, lists of models of APs and
    routers with the relative default credentials are available. Even when default
    credentials are modified, weak passwords are often chosen.
  prefs: []
  type: TYPE_NORMAL
- en: This is a severe security issue because if an attacker takes control of the
    AP, he/she can compromise the entire network by performing the man-in-the-middle
    attacks on the network, sniffing the traffic, changing the DNS settings, and launching
    pharming and phishing attacks.
  prefs: []
  type: TYPE_NORMAL
- en: A tool that can be used to crack HTTP authentication credentials is **hydra**,
    an online password cracking tool that supports various protocols. There is also
    a GUI for the program, hydra-gtk. Both come installed on Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra takes as inputs a username or a list of usernames and a list of passwords
    and tries all their possible combinations against the specified target.
  prefs: []
  type: TYPE_NORMAL
- en: To get more information about Hydra and how to use it to crack passwords refer
    to the manual page and to the project's website [https://www.thc.org/thc-hydra/](https://www.thc.org/thc-hydra/).
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, attacks have been developed that allow access to the administration
    panel of the router/AP even from the Internet. An example of this is the **DNS
    Rebinding** attack, where an attacker abuses the DNS to serve the victim's browser
    malicious client-side script that targets the internal network. Therefore, the
    browser acts for the attacker as an internal proxy to attack and take control
    of the router/AP. This kind of attack has become widespread in the recent years.
  prefs: []
  type: TYPE_NORMAL
- en: A tool that implements the DNS rebinding attack is called **rebind**, written
    by Craig Heffner and included in Kali Linux. More information about it can be
    found on the program web page [https://code.google.com/p/rebind/](https://code.google.com/p/rebind/).
    To learn the details of the attack, read Heffner's white paper *Remote Attacks
    Against SOHO Routers* [https://media.blackhat.com/bh-us-10/whitepapers/Heffner/BlackHat-USA-2010-Heffner-How-to-Hack-Millions-of-Routers-wp.pdf](https://media.blackhat.com/bh-us-10/whitepapers/Heffner/BlackHat-USA-2010-Heffner-How-to-Hack-Millions-of-Routers-wp.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered the attacks against the access points and the
    network, in particular those against WPS and WPA-Enterprise, how to set up a rogue
    AP, DoS attacks, and AP authentication attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.html "Chapter 7. Wireless Client Attacks"), *Wireless Client
    Attacks*, we will see attacks targeting the wireless clients, such as Honeypot
    and Evil Twin APs, the Caffe Latte and Hirte attacks, the man-in-the-middle attacks,
    and client deauthentication.
  prefs: []
  type: TYPE_NORMAL
