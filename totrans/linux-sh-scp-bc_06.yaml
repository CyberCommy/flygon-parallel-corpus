- en: Chapter 6. Automating Tasks with Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter shows how to automate various tasks using scripts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: How to create a script to automate a task.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The proper way to use cron to run the script automatically at specific times.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use `ZIP` and `TAR` to perform compressed backups.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code examples.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader will learn how to create automated scripts.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: We talked about the `sleep` command in [Chapter 3](ch03.html "Chapter 3. Using
    Loops and the sleep Command"), *Using Loops and the sleep Command*. It can be
    used to create an automated script (that is, one that runs at a specific time
    with no user intervention) as long as a few guidelines are followed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'This very simple script will reinforce what we covered in [Chapter 3](ch03.html
    "Chapter 3. Using Loops and the sleep Command") *Using Loops and the sleep Command*
    about using the `sleep` command for automation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 - Script 1
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you run this on your system and wait a few days you will start to see the
    date slip a little. This is because the `sleep` command inserts a delay into the
    script, it does not mean that it is going to run the script at the same time every
    day.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following script shows this problem in a bit more detail. Note that this
    is an example of what not to do.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 - Script 2
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first thing you will notice is that this script will run until it is either
    manually terminated with *Ctrl* + *C* or the `kill` command (or when the machine
    goes down for whatever reason). It is common for automated scripts to just run
    forever.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The `date` command, as run without any parameters, returns something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So now all we have to do is use `grep` to match that time. Unfortunately, there
    is a very subtle problem here. It has been verified that it is possible for this
    to miss from time to time. For example, if the time has just changed to 3:00 am
    and the program is now in the sleep it might already be 3:01 when it wakes up.
    In my early days in computing I had seen code like this all the time in my jobs
    and never gave it a single thought. When some important backups were missed one
    day my team was asked to figure out what was going on and we discovered this issue.
    A quick fix for this would be to change the seconds to 59, however, a better way
    is to use cron which will be shown later in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Notice the `-q` option to `grep`, this simply tells it to suppress any output.
    Feel free to take this out if you want, especially when first writing the script.
    Also notice that `grep` returns `0` when a match is found, non-zero otherwise.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'With all this said let''s look at some simple automated scripts. I have been
    running the following on my Linux systems since 1996:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 - Script 3
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And the output on my system:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 6 - Script 3](img/B07040_06_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: I ran it just three times, however, it would go forever. Before running this
    on your system let's talk about that `PROVIDER` environment variable. I have several
    scripts on my system that deal with the Internet and I found myself constantly
    changing providers. It didn't take too long to realize that this was a great time
    to use an env var, hence `PROVIDER`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'This is in my `/root/.bashrc and /home/guest1/.bashrc` files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Substitute yours as needed. Notice too that when a failure occurs it is being
    written to the screen and to a file. Since the `>>` append operator is being used
    the file might eventually get rather large so plan accordingly if your connection
    is not very stable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful they you do not ping or otherwise access a company site too many
    times in a short time frame. This could be detected and your access might be denied.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a script that detects when a user has either logged on or off your
    system:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 - Script 4
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s the output (adjusted for length):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 6 - Script 4](img/B07040_06_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: This script checks the output from the `who` command to see if it has changed
    since the last run. If so it takes the appropriate action. If you have a `beep`
    command or equivalent on your system this is a good place to use it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this statement:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This needs some clarification as we have not covered it yet. Those back-tick
    characters mean to run the command(s) inside and put the result into the variable.
    In this case, the `who` command is piped into the `wc -l` command to count the
    number of lines. This value is then put into the `currusers` variable. If this
    sounds a bit complicated don't worry, it will be covered in greater detail in
    the next chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the script should already be clear as we have covered this
    before. If you decide to run something like this on your system just remember
    that it will trigger every time a new terminal is opened.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Cron
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, now for some real fun. If you have been using Linux for even just a short
    amount of time you are probably already aware of cron. This is a daemon, or background
    process, that executes commands at specific times.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Cron reads a file called `crontab` once a minute to determine if a command needs
    to be run.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: For the examples in this chapter we will focus on the `crontab` for a guest
    account only (not for root).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Using my `guest1` account here is what it would look like the first time it
    is run. It would be a good idea to follow along on your system under a guest account:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That makes sense as we have not created a `crontab` file for `guest1` yet. It
    is not meant to be edited directly and so the `crontab -e` command is used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Run `crontab -e` under a guest account on your system now.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of how it appears on my system when using vi:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Cron](img/B07040_06_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'As you can see the `crontab` command creates a temporary file. It is unfortunate
    that this file comes up empty as they should have provided a template. Let''s
    add one now. Copy and paste the following text into the file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Substitute `guest1` for your user name. This now gives us an idea of what goes
    where.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'To this file add the following line:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `*` means to match everything in the field. So in essence this line will
    fire once a minute.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: We are using the redirection operator to write the output from the `echo` command
    to another terminal. Substitute yours as appropriate.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Try the above on your system. Remember you must save the file first, and you
    should see this output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This means the addition was successful. Now wait for the next minute to come
    around. You should see the current date show up in the other terminal.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now see the basics of cron. Here are a few quick pointers:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is just a very small subset of how the date and times can be set in cron.
    For more information consult the `man` pages for cron and `crontab`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing that needs to be mentioned is the `PATH` for a user''s cron. It does
    not source the user''s `.bashrc` file. You can verify this by adding the following
    line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On my CentOS 6.8 system it shows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To get around this problem you can source your `.bashrc` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This should now show the real path. The `EDITOR` env var was mentioned in [Chapter
    2](ch02.html "Chapter 2. Working with Variables"), *Working with Variables*. If
    you want `crontab` to use a different text editor you can set `EDITOR` to the
    path/name of the one you want.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, on my system I have this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So when I run `crontab -e` I get this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Cron](img/B07040_06_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Another thing that should be mentioned is if you make a mistake when using `crontab`
    in some cases it will tell you when you attempt to save the file. But it cannot
    check everything so be careful. Also, if a command gets an error `crontab` will
    use the mail system to notify the user. So, with this in mind you may need to
    run the `mail` command from time to time when using cron.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at the basics let's create a backup script that uses
    the `zip` command. If you are not familiar with `zip` don't worry, this will get
    you up to speed quickly. On a Linux system most people just use the `tar` command,
    however, if you know how `zip` works you can share files with Windows users more
    easily.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'In a directory under a guest account run these commands on your system. As
    usual I used `/home/guest1/LinuxScriptingBook`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a `work` directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change to it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create some temporary files, and/or copy a few existing files to this directory:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Get a listing:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Zip them up:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Get another listing:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There is now file `work1.zip` in that directory. The syntax to create a `zip`
    file is:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To unzip it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To view (or list) the contents of a `zip` file without extracting it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is also a good way to ensure that the `.zip` file was created properly,
    because unzip will report an error if it cannot read the file. Note that the `zip`
    command not only creates a `.zip` file but it also compresses the data. This makes
    for smaller backup files.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a short script that uses `zip` to back up some files:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 - Script 5
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And the output on my system:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 6 - Script 5](img/B07040_06_05.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: This is a really simple script, however it shows the basics of using the `zip`
    command to backup some files.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we wanted to run this every day at midnight. Assuming `script5` was
    located under `/tmp`, the `crontab` entry would be the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this case we did not have to source the `/home/guest1/.bashrc` file. Also
    notice that any errors get sent to the User's mail account. The zip command can
    do a whole lot more than just this, for example it can recurse into directories.
    For more information consult the man pages.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s talk about the Linux `tar` command. It is used more frequently than
    the `zip` command and is better at getting all files, even hidden ones. Referring
    back to the `/tmp/work directory`, here is how you would use `tar` to back it
    up. It is assumed the files are still there from the previous script:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: There is now file `work1.gz` under the `/tmp` directory. It is a compressed
    archive of the contents of all the files under `/tmp/work`, including the `.zip`
    file we created earlier.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for tar is a little cryptic at first but you will get used to it.
    Some of the features available in tar are:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Feature |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: '| `c` | create an archive |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
- en: '| `x` | extract an archive |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '| `v` | use the verbose option |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: '| `z` | use gunzip style compression (.gz) |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '| `f` | the filename to create/extract |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: Note that if you do not include the `z` option the file will not be compressed.
    By convention the file extension would then just be tar. Note that the user controls
    the actual name of the file, not the `tar` command.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay so now we have a compressed `tar-gz file` (or archive). Here is how to
    un-compress and extract the files. We will do this under `/home/guest1`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using tar to backup a system is really convenient. It''s also a great way to
    configure a new machine with your personal files. For example, I routinely back
    up the following directories on my primary system:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: These files are then auto-copied to an external USB drive. Remember that tar
    automatically recurses into directories and also gets every file, including hidden
    ones. Tar also has many other options that control how the archive is created.
    One of the most common options is to exclude certain directories.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: For example, when backing up `/home/guest1` there is really no reason to include
    the `.cache`, `Cache`, `.thumbnails`, and so on directories.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: The option to exclude directories is `--exclude=<directory name>` and that is
    shown in the next script.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the backup programs that I use on my primary Linux system. It is two
    scripts, one to schedule the backup and one to actually perform the work. I mainly
    did this so that I could make changes to the actual backup script without turning
    off the scheduler script. The first thing that needs to be set up is the `crontab`
    entry. Here is what it looks like on my system:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will create the file `/tmp/backup-cron.txt` at approximately 3 am every
    day.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the following scripts must be run as root:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 - Script 6
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There''s a lot of information here so we will go through it line by line:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: The script first sets up the variables, clears the screen, and displays the
    name of the script.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DR` variable is assigned to my USB external drive (`wd1`) which is a symbolic
    link.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A check is then performed using the `file` command to ensure that `/wd1` has
    been mounted. If it has not, the `file` command will return broken symbolic link,
    `grep` will trigger on this, and the script will abort.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the drive is mounted then the loop is entered. The existence of the file
    is checked every minute to see if it is time to begin the backup.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the file is found the `backup1` script (see next) is run. The output from
    it is sent to both the screen and the file using the `tee` command.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The date format specifier `''+%Y%m%d''` shows the date in this format: YYYYMMDD'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I check the files in the `/data/mainlogs` directory from time to time to make
    sure my backups are being created correctly with no errors.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: The following script is used to backup my system. The logic here is the current
    day backups are stored on the hard drive in the `$TDIR` directory. They are also
    copied to a numbered directory on the external drive. These go into directories
    numbered 1 through 7\. When the last one is reached it starts back at 1 again.
    This way there are always 7 days of backups available on the external drive.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'This script must also be run as root:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 - Script 7
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This is a bit more complicated than the previous scripts so let''s go through
    it line by line:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: The `RUNDIR` variable holds the starting directory for the scripts.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DR` variable points to the external backup drive.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drive is checked to insure it is mounted.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current date is appended to the `datelog.txt` file.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `TDIR` variable is the target directory for the backups.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `cd` is performed to that directory and the return code is checked. On error
    the script exits with a `250`.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The backups from the previous day are deleted.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It now goes back to the `/` directory to perform the tar backups.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Notice that several directories are excluded from the `guest1` directory.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: The `cd $RUNDIR` puts it back into the starting directory.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `T=`filenum1`` gets the value from that file and puts it into the `T` variable.
    This is a counter for which directory to use next on the external drive.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BACKDIR` is set to the old backups and then they are removed.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control returns again to the starting directory, and the current backups are
    copied to the appropriate directory on the external drive.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of the program is displayed again so that it can be easily found
    on a cluttered screen.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control goes to the backup directory, the `pwd` displays the name, and then
    the contents of the directory are displayed.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `T` variable is incremented by 1\. If it is greater than 7 it is set back
    to 1.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally the updated `T` variable is written back to the `filenum1` file.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: This script should serve as a good starting point for whatever backup process
    you want to develop. Note that the `scp` command can be used to copy files directly
    to another computer without user intervention. This will be covered in [Chapter
    10](ch10.html "Chapter 10. Scripting Best Practices"), *Scripting Best Practices*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We described how to create a script to automate a task. The proper way to use
    cron to run a script automatically at a specific time was covered. The archive
    commands `zip` and `tar` were discussed to show how to perform compressed backups.
    A full scheduler and backup script were also included and discussed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述了如何创建一个脚本来自动化一个任务。我们讨论了如何使用cron在特定时间自动运行脚本的正确方法。我们讨论了存档命令`zip`和`tar`，以展示如何执行压缩备份。我们还包括并讨论了完整的调度程序和备份脚本。
- en: In the next chapter we will show how to read and write files in a script.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示如何在脚本中读写文件。
