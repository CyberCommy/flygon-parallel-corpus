- en: Chapter 4. Working with Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the first chapter, where we explained the MVC and MVT models, templates
    are files that will allow us to generate the HTML code returned to the client.
    In our views, the HTML code is not mixed with the Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Django comes with its own template system. However, as Django is modular, it
    is possible to use a different template system. This system is composed of a language
    that will be used to make our dynamic templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Send data to a template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display data in a template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display object lists in a template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle chains with filters in Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use URLs effectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create base templates in order to extend other templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert static files in our templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying Hello world! in a template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create the first template of our application. To do so, we must first
    edit the `settings.py` file to define the folder that will contain our templates.
    We will first define the project folder as `PROJECT_ROOT` to simplify the migration
    to another system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that Django knows where to look for the templates, we will create the first
    template of the application. To do this, use a file browser and add the `index.html`
    file in the `TasksManager/templates/en/public/` folder. We do not need to create
    the `__init__.py` file, because these files do not contain any Python files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Although the template is correct, we need to change the view to indicate its
    use. We will modify the `index.py` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If we test this page, we will notice that the template has been taken into account
    by the view.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting the data from the view to the template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before improving our template, we must send variables to the templates. The
    injection of the data is based on these variables, as the template will perform
    certain actions. Indeed, as we have seen in the explanation of the MVC pattern,
    the controller must send variables to the template in order to display them.
  prefs: []
  type: TYPE_NORMAL
- en: There are several functions to send variables to the template. The two main
    functions are `render()` and `render_to_response()`. The `render()` function is
    very similar to `render_to_response ()`. The main difference is that if we use
    `render`, we do not need to specify `context_instance = RequestContext(request)`
    in order to send the current context. This is the context that will allow us to
    use the CSRF middleware later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will change our view to inject variables in our template. These variables
    will be useful to work with the template language. The following is our modified
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating dynamic templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django comes with a full-template language. This means that we will use template
    tags that will allow us to have more flexibility in our templates and display
    variables, perform loops, and set up filters.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML and template languages are mixed in the templates; however, the template
    language is very simplistic, and there is a minority when compared to the HTML
    code. A web designer will easily modify the template files.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating variables in templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our controller, we send a variable named `my_var`. We can display it in
    a `<span>` tag in the following way. Add the following lines in the `<article>`
    tag of our template tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this way, because our variable contains `string = "Hello World!"`, the HTML
    code that will be generated is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will learn how to create conditions for variables or functions in order to
    filter the data in the variables in the following examples.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Language templates also allow conditional structures. Note that for a display
    variable, double brackets `{{}}` are used, but once we have an action to be made
    as a condition or loop, we will use `{%%}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our controller sends a `years` variable that can define age. An example of
    a conditional structure is when you can change the value of the variable in the
    controller to observe the changes. Add the following code in our `<article>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, when we send the value `15` to the generated template, the code
    that is used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Looping in a template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Looping allows you to read through the elements of a table or data dictionary.
    In our controller, we sent a data table called `array_city` in which we have the
    names of cities. To see all these names of cities in the form of a list, we can
    write the following in our template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This looping will go through the `array_city` table, and place each element
    in the `city` variable that we display in the `<li>` tag. With our sample data,
    this code will produce the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filters are an effective way to modify the data before sending it to the template.
    We will look at some examples of filters in the following sections to understand
    them better.
  prefs: []
  type: TYPE_NORMAL
- en: The upper and lower filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The lower filter converts into lowercase letters, and the upper filter converts
    into uppercase letters. The example given in the subsequent sections contains
    the `my_hello` variable, which equals `Hello World!`
  prefs: []
  type: TYPE_NORMAL
- en: The lower filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The code for the lower filter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This code generates the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The upper filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The code for the upper filter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code generates the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The capfirst filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The capfirst filter transforms the first letter to uppercase. The example with
    the `myvar = "hello"` variable is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This code generates the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The pluralize filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pluralize filter can easily handle plurals. Often, developers choose a
    simple solution for lack of time. The solution is to display channels: *You have
    2 products in your cart*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Django simplifies this kind of string. The pluralize filter will add a suffix
    to the end of a word if the variable represents a plural value, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This channel will show the following three channels if `nb_products` is `1`
    and `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code will show the following two chains if `nb_diaries` is `1`
    and `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we used a filter that takes arguments for the first
    time. To set parameters to a filter, you must use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This filter helps to increase the quality of your site. A website looks much
    more professional when it displays correct sentences.
  prefs: []
  type: TYPE_NORMAL
- en: The escape and safe to avoid XSS filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The XSS filter is used to escape HTML characters. This filter helps prevent
    from XSS attacks. These attacks are based on injecting client-side scripting by
    a hacker. The following is a step-by-step description of an XSS attack:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker finds a form so that the content will be displayed on another page,
    for example, a comment field of a commercial site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hacker writes JavaScript code to hack using the tag in this form. Once the
    form is submitted, the JavaScript code is stored in the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The victim views the page comments and JavaScript runs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The risk is more important than a simple `alert()` method to display a message.
    With this type of vulnerability, the hacker can steal session IDs, redirect the
    user to a spoofed site, edit the page, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'More concretely, the filter changes the following characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<` is converted to `&lt;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`>` is converted to `&gt;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''` is converted to `''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"` is converted to `&quot;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`&` is converted to `&amp;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can automatically escape the contents of a block with the `{% autoescape
    %} tag`, which takes the on or off parameter. By default, autoescape is enabled,
    but note that with older versions of Django, autoescape is not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'When autoescape is enabled, if we want to define a variable as a variable of
    trust, we can filter it with the safe filter. The following example shows the
    different possible scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`variable1` is escaped by `autoescape`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variable2` is not escaped as it was filtered with safe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variable3` is not escaped because `autoescape` is defined as `off`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variable4` is escaped because it has been filtered with the escape filter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variable5` is escaped because `autoescape` is `off`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The linebreaks filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The linebreaks filter allows you to convert line breaks into an HTML tag. A
    single new line is transformed into the `<br />` tag. A new line followed by a
    blank will become a paragraph break ,`</p>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The truncatechars filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The truncatechars filter allows you to truncate a string from a certain length.
    If this number is exceeded, the string is truncated and Django adds the string
    " `...`".
  prefs: []
  type: TYPE_NORMAL
- en: 'The example of the variable that contains "Welcome in Django " is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This code outputs the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating DRY URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before learning what a DRY link is, we will first remind you of what an HTML
    link is. Every day, when we go on the Internet, we change a page or website by
    clicking on links. These links are redirected to URLs. The following is an example
    link to [google.com](http://google.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create a second page in our application to create the first valid link.
    Add the following line to the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a view corresponding to the preceding URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We will create a second template for the new view. Let's duplicate the first
    template and call the copy, `connection.html`, as well as modify `Hello world`
    in `Connection`. We can note that this template does not respect the DRY philosophy.
    This is normal; we will learn how to share code between different templates in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create an HTML link in our first `index.html` template. This link will
    direct the user to our second view. Our `<article>` tag becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's test our site with the development server, and open our browser to
    the URL of our site. By testing the site, we can check whether the link works
    properly. This is a good thing, because now you are able to make a static website
    with Django, and this framework includes a handy tool to manage URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Django can never write a link in the `href` property. Indeed, by properly filing
    our `urls.py` file, we can refer to the name of a URL and name address.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to change our `urls.py` file that contains the following
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding the name property to each of our URLs allows us to use the name of the
    URL to create links. Change your `index.html` template to create a DRY link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the new site again; note that the link still works. But for now, this
    feature is useless to us. If Google decides to improve the indexing of the URLs
    whose addresses end with the name of the website, you will have to change all
    the URLs. To do this with Django, all you will need to do is change the second
    URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If we test our site again, we can see that the change has been done properly
    and that the change in the `urls.py` file is effective on all the pages of the
    site. When you need to use parameterized URLs, you must use the following syntax
    to integrate the parameters to the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Extending the templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The legacy of templates allows you to define a super template and a subtemplate
    that inherits from the super template. In the super template, it is possible to
    define blocks that subtemplates can fill. This method allows us to respect the
    DRY philosophy by applying the common code to several templates in a super template.
    We will use an example where the `index.html` template will extend the `base.html`
    template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the `base.html` template code, which we must create in the
    `template` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, we defined three areas that the child templates can override:
    `title_html`, `h1`, and `article_content`. The following is the `index.html` template
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this template, we first use the extends tag, which extends the `base.html`
    template. Then, the block and endblock tags allow us to redefine what is present
    in the `base.html` template. We may change our `connection.html` template in the
    same way so that a change in `base.html` can be made on both templates.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to define as many blocks as necessary. We can also create super
    templates that extend themselves to create more complex architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Using static files in templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static files such as JavaScript files, CSS, or images are essential to obtain
    an ergonomic website. These files are often stored in a folder, but they can be
    useful to modify this folder under development or in production.
  prefs: []
  type: TYPE_NORMAL
- en: According to the URLs, Django allows us to define a folder containing the static
    files and to easily modify its location when required.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the path where Django will look for static files, we have to change
    our `settings.py` file by adding or changing the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We will define a proper architecture for our future static files. It is important
    to choose an early consistent architecture, as it makes the application support
    as well as include another developer easier. Our statics files'' architecture
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a folder for each type of static file and define a `lib` folder for
    JavaScript libraries as jQuery, which we will use later in the book. For example,
    we change our `base.html` file. We will add a CSS file to manage the styles of
    our pages. To do this, we must add the following line between `</ title>` and
    `< / head>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the tag in our static template, we must also load the system by putting
    the following line before using the static tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We will create the `style.css` file in the `/static/css` folder. This way, the
    browser won't generate an error later in the development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a template and send data to the templates,
    and how to use the conditions, loops, and filters in the templates. We also discussed
    how to create DRY URLs for a flexible URL structure, expand the templates to meet
    the DRY philosophy, and how to use the static files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to structure our data to save it in a
    database.
  prefs: []
  type: TYPE_NORMAL
