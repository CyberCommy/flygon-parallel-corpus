- en: Assessing Authorization Checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for directory traversal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for **Local File Include** (**LFI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for **Remote File Include** (**RFI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for insecure direct object reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the basics of authorization, including an explanation of
    how an application uses roles to determine user functions. Web penetration testing
    involves key assessments to determine how well the application validates functions
    assigned to a given role, and we will learn how to use Burp to perform such tests.
  prefs: []
  type: TYPE_NORMAL
- en: Software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP broken web applications (VM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP mutillidae link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox browser configured to allow Burp to proxy traffic ([https://www.mozilla.org/en-US/firefox/new/](https://www.mozilla.org/en-US/firefox/new/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `wfuzz` wordlist repository from GitHub ([https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for directory traversal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Directory traversal attacks are attempts to discover or forced browse to unauthorized
    web pages usually designed for administrators of the application. If an application
    does not configure the web document root properly and does not include proper
    authorization checks for each page accessed, a directory traversal vulnerability
    could exist. In particular situations, such a weakness could lead to system command
    injection attacks or the ability of an attacker to perform arbitrary code execution.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using OWASP Mutillidae II as our target application, let's determine whether
    it contains any directory traversal vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure Burp and the OWASP BWA VM are running and that Burp is configured in
    the Firefox browser used to view the OWASP BWA applications.
  prefs: []
  type: TYPE_NORMAL
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Firefox browser on the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the request you just performed within the **Proxy** | **HTTP history**
    table. Look for the call to the `login.php` page. Highlight the message, move
    your cursor into the **Raw** tab of the **Request** tab, right-click, and click
    on **Send to Intruder**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch over to the **Intruder** | **Positions** tab, and clear all Burp-defined
    payload markers by clicking the **Clear $** button on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Highlight the value currently stored in the `page` parameter (`login.php`),
    and place a payload marker around it using the **Add  §** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Continue to the **Intruder** | **Payloads** tab, and select the following wordlist
    from the `wfuzz` repository: `admin-panels.txt`**. **The location of the wordlist
    from the GitHub repository follows this folder structure: `wfuzz`/`wordlist`/`general`/`admin-panels.txt`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Load** button within the **Payload Options [Simple list]** section
    of the **Intruder** | **Payloads****,** tab and a popup will display, prompting
    for the location of your wordlist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse to the location where you downloaded the `wfuzz` repository from GitHub.
    Continue to search through the `wfuzz` folder structure (`wfuzz`/`wordlist`/`general`/) until
    you reach the `admin-panels.txt` file, and then select the file by clicking**Open**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll to the bottom and uncheck (by default, it is checked) the option **URL-encode
    these characters**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You are now ready to begin the attack. Click the **Start attack** button at
    the top right-hand corner of the **Intruder** | **Positions** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attack results table will appear. Allow the attacks to complete. There are
    137 payloads in the `admin-panels.txt` wordlist. Sort on the **Length** column
    from ascending to descending order, to see which of the payloads hit a web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the payloads that have larger response lengths. This looks promising! 
    Perhaps we have stumbled upon some administration pages that may contain fingerprinting
    information or unauthorized access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the first page in the list with the largest length, **administrator.php**.
    From the attack results table, look at the **Response** | **Render** tab, and
    notice the page displays the PHP version and the system information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without even being logged in, we were able to force browse to an area of the
    web application that was unmapped. The term *unmapped* means the application itself
    had no direct link to this secret configuration page. However, using Burp Intruder
    and a wordlist containing commonly known administration file names, we were able
    to discover the page using the directory traversal attack.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Local File Include (LFI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web servers control access to privileged files and resources through configuration
    settings. Privileged files include files that should only be accessible by system
    administrators. For example, the `/etc/passwd` file on UNIX-like platforms or
    the `boot.ini` file on Windows systems.
  prefs: []
  type: TYPE_NORMAL
- en: A **LFI** attack is an attempt to access privileged files using directory traversal
    attacks. LFI attacks include different styles including the **dot-dot-slash attack**
    (**../**), **directory brute-forcing**, **directory** **climbing**, or **backtracking**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using OWASP Mutillidae II as our target application, let's determine whether
    it contains any LFI vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure Burp and OWASP BWA VM are running and that Burp is configured in the
    Firefox browser used to view the OWASP BWA applications.
  prefs: []
  type: TYPE_NORMAL
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the request you just performed within the **Proxy** | **HTTP history**
    table. Look for the call to the `login.php` page. Highlight the message, move
    your cursor into the **Raw** tab of the **Request** tab, right-click, and **Send
    to Intruder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch over to the **Intruder** | **Positions** tab, and clear all Burp-defined
    payload markers by clicking the **Clear §** button on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Highlight the value currently stored in the `page` parameter (`login.php`),
    and place a payload marker around it using the **Add  §** button on the right-hand
    side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Continue to the **Intruder** | **Payloads** tab.  Select the following wordlist
    from the `wfuzz` repository: `Traversal.txt`**. **The location of the wordlist
    from the GitHub repository follows this folder structure: `wfuzz`/`wordlist`/`injections`/`Traversal.txt`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Load** button within the **Payload Options [Simple list]** section
    of the **Intruder** | **Payloads** tab. A popup will display, prompting for the
    location of your wordlist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse to the location where you downloaded the `wfuzz` repository from GitHub.
    Continue to search through `wfuzz` folder structure until you reach the `admin-panels.txt`
    file. Select the file and click **Open**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Scroll to the bottom and uncheck (by default, it is checked) the option **URL-encode
    these characters**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now ready to begin the attack.  Click the **Start attack** button at
    the top-right-hand corner of the **Intruder** | **Positions** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attack results table will appear. Allow the attacks to complete. Sort on
    the **Length** column from ascending to descending order, to see which of the
    payloads hit a web page. Notice the payloads with larger lengths; perhaps we gained
    unauthorized access to the system configuration files!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Request #2 in the list. From the attack results table, look at the **Response **|
    **Render** tab and notice the page displays the host file from the system!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Continue scrolling down the list of requests in the attack results table. Look
    at request #6, and then look at the **Response** | **Render** tab and notice the
    page displays the `/etc/passwd` file from the system!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to poorly protected file permissions and lack of application authorization
    checks, attackers are able to read privileged local files on a system containing
    sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Remote File Inclusion (RFI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Remote File Inclusion** (**RFI**) is an attack attempting to access external
    URLs and remotely located files. The attack is possible due to parameter manipulation
    and lack of server-side checks. These oversights allow parameter changes to redirect
    the user to locations that are not whitelisted or sanitized with proper data validation.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using OWASP Mutillidae II as our target application, let's determine whether
    it contains any RFI vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure Burp and OWASP BWA VM are running and that Burp is configured in the
    Firefox browser used to view the OWASP BWA applications.
  prefs: []
  type: TYPE_NORMAL
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the request you just performed within the **Proxy** | **HTTP history**
    table. Look for the call to the `login.php` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00191.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make a note of the `page` parameter that determines the page to load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's see if we can exploit this parameter by providing a URL that is outside
    the application. For demonstration purposes, we will use a URL that we control
    in the OWASP BWA VM. However, in the wild, this URL would be attacker-controlled
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the **Proxy** | **Intercept** tab, and press the **Intercept is on**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the Firefox browser, and reload the login page. The request is paused
    and contained within the **Proxy** | **Intercept** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now let's manipulate the value of the `page` parameter from `login.php` to a
    URL that is external to the application. Let's use the login page to the **GetBoo**
    application. Your URL will be specific to your machine's IP address, so adjust
    accordingly. The new URL will be `http://<your_IP_address>/getboo/`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `login.php` value with `http://<your_IP_address>/getboo/` and click
    the **Forward** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now press the **Intercept is on** again to toggle the intercept button to **OFF
    (Intercept is off)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the Firefox browser, and notice the page loaded is the **GetBoo**
    index page within the context of the Mutillidae application!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `page` parameter does not include proper data validation to ensure the values
    provided to it are whitelisted or contained to a prescribed list of acceptable
    values. By exploiting this weakness, we are able to dictate values to this parameter,
    which should not be allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developer code in an application must include authorization checks on assigned
    roles to ensure an authorized user is not able to elevate their role to a higher
    privilege. Such privilege escalation attacks occur by modifying the value of the
    assigned role and replacing the value with another. In the event that the attack
    is successful, the user gains unauthorized access to resources or functionality
    normally restricted to administrators or more-powerful accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using OWASP Mutillidae II as our target application, let's log in as a regular
    user, John, and determine whether we can escalate our role to admin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure Burp and OWASP BWA VM are running and that Burp is configured in the
    Firefox browser used to view the OWASP BWA applications.
  prefs: []
  type: TYPE_NORMAL
- en: From the OWASP BWA Landing page, click the link to the OWASP Mutillidae II application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Firefox browser to the login screen of OWASP Mutillidae II. From the
    top menu, click **Login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the login screen, log in with these credentials—username: `john` and password:
    `monkey`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to Burp''s **Proxy** | **HTTP history** tab. Find the `POST` and subsequent
    `GET` requests you just made by logging in as `john`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Look at the `GET` request from the listing; notice the cookie name/value pairs
    shown on the **Cookie:** line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name/value pairs of most interest include `username=john` and `uid=3`. What
    if we attempt to manipulate these values to a different role?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's attempt to manipulate the parameters `username` and the `uid` stored in
    the cookie to a different role. We will use Burp's **Proxy** | **Intercept** to
    help us perform this attack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the **Proxy** | **Intercept** tab, and press the **Intercept is on**
    button. Return to the Firefox browser and reload the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The request is paused within the **Proxy** | **Intercept** tab. While it is
    paused, change the value assigned to the username from `john` to `admin`. Also,
    change the value assigned to the `uid` from `3` to `1`*:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the **Forward** button, and press the **Intercept is on** again to toggle
    the intercept button to **OFF (Intercept is off)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the Firefox browser, and notice we are now logged in as an admin!
    We were able to escalate our privileges from a regular user to an admin, since
    the developer did not perform any authorization checks on the assigned role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00199.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several application issues associated with the privilege escalation
    attack shown in this recipe. Any actions related to account provisioning (that
    is, role assignments) should only be allowed by administrators. Without proper
    checks in place, users can attempt to escalate their provisioned roles. Another
    issue exemplified in this recipe is the sequential user ID number (for example,
    `uid=3`). Since this number is easily guessable and because most applications
    start with administrator accounts, changing the digit from `3` to `1` seemed a
    probable guess for association with the admin account.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Insecure Direct Object Reference (IDOR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allowing unauthorized direct access to files or resources on a system based
    on user-supplied input is known as **Insecure Direct Object Reference** (**IDOR**).
    This vulnerability allows the bypassing of authorization checks placed on such
    files or resources. IDOR is a result of unchecked user supplied input to retrieve
    an object without performing authorization checks in the application code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using OWASP Mutillidae II as our target application, let's manipulate the value
    of the `phpfile` parameter to determine whether we can make a call to a direct
    object reference on the system, such as `/etc/passwd` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Mutillidae menu, select **OWASP 2013** | **A4 – Insecure Direct Object
    References** | **Source Viewer**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the **Source Viewer** page, using the default file selected in the drop-down
    box (`upload-file.php`), click the **View File** button to see the contents of
    the file displayed below the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00201.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switch to Burp's **Proxy** | **HTTP history** tab. Find the `POST` request you
    just made while viewing the `upload-file.php` file. Note the `phpfile` parameter
    with the value of the file to display. What would happen if we change the value
    of this parameter to something else?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's perform an IDOR attack by manipulating the value provided to the `phpfile`
    parameter to reference a file on the system instead. For example, let's try changing
    the `upload-file.php` value to `../../../../etc/passwd` via Burp's **Proxy** |
    **Intercept** functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To perform this attack, follow these steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the **Proxy** |**Intercept** tab, and press the **Intercept is on**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the Firefox browser and reload the login page. The request is paused
    and contained within the **Proxy** | **Intercept** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As the request is paused, change the value assigned to the `phpfile` parameter
    to the value `../../../../etc/passwd` instead:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the **Forward** button. Now press the **Intercept is on** button again
    to toggle the intercept button to **OFF (Intercept is off)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the Firefox browser. Notice we can now see the contents of the `/etc/passwd`
    file!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to lack of proper authorization checks on the `phpfile` parameter within
    the application code, we are able to view a privileged file on the system. Developers
    and system administrators provide access controls and checks prior to the revealing
    of sensitive files and resources. When these access controls are missing, IDOR
    vulnerabilities may be present.
  prefs: []
  type: TYPE_NORMAL
