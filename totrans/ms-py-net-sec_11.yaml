- en: Identifying Server Vulnerabilities in Web Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the main vulnerabilities in web applications and the tools
    we can find in the python ecosystem, such as w3af as a vulnerabilities scanner
    in web applications, and sqlmap for detecting sql vulnerabilities. Regarding server
    vulnerabilities, we cover testing heartbleed and SSL vulnerabiliies in servers
    with openssl activated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities in web applications with OWASP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: w3af as a vulnerabilities scanner in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to discover sql vulnerabilities with python tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python script for testing heartbleed and SSL/TLS vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter11` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to install Python distribution in your local machine with at least
    4 GB memory.
  prefs: []
  type: TYPE_NORMAL
- en: Scripts can be executed with Python 2.7 and 3.x versions and w3af is tested
    in a Unix distribution such as Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing vulnerabilities in web applications with OWASP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Web Application Security Project (OWASP) Top 10 is a list of the 10 most
    critical web-application security risks. In this section, we will comment on the
    OWASP top 10 vulnerabilities and explain in detail the cross-site scripting (XSS)
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OWASP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Open Web Application Security Project is an excellent resource to learn
    about ways to protect your web apps from bad behaviors. There are many kinds of
    application-security vulnerabilities. OWASP ranked the top ten application security
    risks at OWASP Top Ten Project: [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project).
  prefs: []
  type: TYPE_NORMAL
- en: 'The full classification can be found in the shared `OWASP.xlsx` Excel file
    located in the GitHub repository inside the chapter folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2b915aec-e598-4ea1-8cd6-f7761421bff4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we can highlight the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OTG-INFO-001 Information leak:** We can make use of search engines such as
    Bing, Google, and Shodan in search of information leaks using the operators or
    dorks that these search engines provide. We could, for example, see what information
    Shodan gives us, for that we carry out the search of the IP or domain, and with
    the service of Shodan we can see the services that it has exposed and open ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-002 Web server fingerprinting:** We will try to find out what kind
    of server our target website is working on, for that we use the whatweb tool that
    we can find in the Kali Linux distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-003 Metadata found in server files:** At this point, we can use
    tools such as Foca or Metagoofil to extract metadata in documents published on
    the website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-004 Enumeration of subdomains and server applications:** We will
    use tools that give us information about possible subdomains, DNS servers, services,
    and ports opened in server applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-005 Comments and Metadata of the Web:** We can find leak information
    in the comments on the web that programmers use to debug the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-006 and OTG-INFO-007 Identify entry points and Website Map:** We
    can detect all the endpoints of entry of the web (requests and answers with `GET`
    and `POST`), for which we are going to use a reverse web proxy (ZAP, Burp, or
    WebScarab) and use its Spider in such a way that it generates a map complete of
    the web and its entry points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-008 Fingerprinting Web Application Framework:** It is about finding
    out what type of framework has been used to develop the web, for example, programming
    language and technology. We can find all this information in the HTTP headers,
    cookies, HTML code, and different files and folders. When we used whatweb tool,
    we could see that JQuery was using other specific technologies that the CMS used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-009 Fingerprinting Web Application:** It is about finding out whether
    some kind of CMS has been used to develop the Web: WordPress, Joomla, or another
    type of CMS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OTG-INFO-0010 Server Architecture:** We can check  whether there is any kind
    of firewall in the middle of the communication. For this task, we can do some
    type of port scanning and see whether there is no Web Application Firewall, for
    example, due to port 80 being unfiltered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP common attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at some of the most common attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL Injection:** The injection of SQL code occurs when data supplied by the
    user is sent unfiltered to an interpreter as part of a query in order to modify
    the original behavior, to execute commands or arbitrary queries in the database.
    The attacker sends raw SQL statements in the request. If your server uses some
    of the request content to build SQL queries, it might perform the attacker''s
    request on the database. In Python, though, if you use **SQLAlchemy** and avoid
    raw SQL statements altogether, you will be safe. If you use raw SQL, make sure
    every variable is correctly quoted. We can find more information and owasp documentation
    about this kind of injection at [https://www.owasp.org/index.php/SQL_Injection](https://www.owasp.org/index.php/SQL_Injection).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '** Cross Site Scripting (XSS):** This attack happens only on web pages that
    display some HTML. The attacker uses some of the query attributes to try to inject
    their piece of `javascript` code on the page to trick the user into performing
    some actions thinking they are on the legitimate website. XSS allows attackers
    to execute scripts in the victim''s browser, allowing them to hijack user sessions,
    destroy websites, or direct the user to a malicious site ([https://www.owasp.org/index.php/XSS](https://www.owasp.org/index.php/XSS)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery (XSRF/CSRF):** This attack is based on attacking
    a service by reusing the user''s credentials from another website. The typical
    CSRF attack happens with POST requests. For instance, a malicious website displays
    a link to a user to trick that user to perform the POST request on your site using
    their existing credentials. A CSRF attack forces the browser of an authenticated
    victim to send a spoofed HTTP request, including the user''s session cookies and
    any other automatically included authentication information, to a vulnerable web
    application. This allows the attacker to force the victim''s browser to generate
    requests that the vulnerable application interprets as legitimate ([https://www.owasp.org/index.php/CSRF](https://www.owasp.org/index.php/CSRF)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sensitive Data Exposure:** Many web applications do not adequately protect
    sensitive data, such as credit card numbers or authentication credentials. Attackers
    can steal or modify such data to carry out fraud, identity theft, or other crimes.
    Sensitive data requires additional protection methods, such as data encryption,
    as well as special precautions when exchanging data with the browser ([https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unvalidated Redirects and Forwards:** Web applications frequently redirect
    and forward users to other pages or websites, and use untrusted data to determine
    the landing page. Without proper validation, attackers can redirect victims to
    phishing or malware sites, or use forwarding to access unauthorized pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command Injection attacks.** Command injection is any time you’re calling
    a process using popen, subprocess, os.system, and taking arguments from variables.
    When calling local commands, there’s a possibility of someone setting those values
    to something malicious ([https://docs.python.org/3/library/shlex.html#shlex.quote](https://docs.python.org/3/library/shlex.html#shlex.quote)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is more information for XSS and CSRF vulnerabilities in python and Django
    applications at [https://docs.djangoproject.com/en/2.1/topics/security/](https://docs.djangoproject.com/en/2.1/topics/security/).
  prefs: []
  type: TYPE_NORMAL
- en: Testing Cross-site scripting (XSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-site scripting is a type of injection attack that occurs when attack vectors
    are injected in the form of a browser-side script.
  prefs: []
  type: TYPE_NORMAL
- en: To test whether a website is vulnerable to XSS, we could use the following script
    where we read from an `XSS-attack-vectors.txt` file that contains all possible
    attack vectors. If, as a result of making a request to the site to analyze together
    with the payload, we obtain is the same information sent by the user that is shown
    again to the user, then we have a clear case of vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the `URL_xss.py` file in the XXS folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find the following code in the `XSS-attack-vectors.txt` file in the
    XXS folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this screenshot, we can see the execution of the previous script, `URL_xss.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d22b7045-b6a2-427f-ab05-2595f5ed2bdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can check this vulnerability on the [testphp.vulnweb.com](http://testphp.vulnweb.com)
    site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4f155b6d-6355-499a-81c3-e800dd3c1e6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we input in the search field one of the vector attacks, we can see that
    we obtain it executes the same code we inject between script tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/26962f04-15c8-48bd-9488-58a474d46494.png)'
  prefs: []
  type: TYPE_IMG
- en: W3af scanner vulnerabilities in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: W3af is the acronym for web application attack and audit framework, and is an
    open source vulnerabilities scanner that it can be used for auditing web security.
  prefs: []
  type: TYPE_NORMAL
- en: W3af overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: W3af is a security audit tool for web applications, it is divided into several
    modules, such as `Attack`, `Audit`, `Exploit`, `Discovery`, `Evasion` and `Brute
    Force`. These modules in W3af come with several secondary modules as, for example,
    we can select the XSS option in the `Audit` module if we need to test Cross-site
    scripting (XSS) vulnerabilities in the web application, assuming that it is necessary
    to perform a certain Audit.
  prefs: []
  type: TYPE_NORMAL
- en: The main feature of W3af is that its audit system is based entirely on plugins
    written in Python, so it manages to create an easily-scalable framework and a
    community of users that contribute to the programming of new plugins in the face
    of web-security failures that can occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'The vulnerabilities that detect and exploit the available plugins are:'
  prefs: []
  type: TYPE_NORMAL
- en: CSRF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XPath Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffer overflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LDAP Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote File Inclusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this screenshot, we can see the w3af official site with doc links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4d29bcb2-5cab-45c8-ba3d-036cbb91b4a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have a set of preconfigured profiles, for example, the OWASP TOP 10, which
    performs a comprehensive vulnerability analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60a25426-fe4c-417e-985e-f8afad4701a5.png)'
  prefs: []
  type: TYPE_IMG
- en: It is a framework that allows different types of tests against web applications
    to determine what vulnerabilities this application can have, detailing levels
    of criticality based on the impact they may have on the web infrastructure or
    on its clients.
  prefs: []
  type: TYPE_NORMAL
- en: Once the analysis is complete, w3af displays detailed information about the
    vulnerabilities found on the specified website, which can be compromised as a
    result of additional exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the results tab, we see the results of the scan over a specific website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/acf93d31-c708-404c-9492-ea5c7b3f443f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Description** tab, we can see a description of the sql injection vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/94da4ae4-bc19-4f9b-9bbd-f92f6e6365cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also we get **Cross-site scripting (XSS) vulnerabilities** in the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7702703b-6961-4b6d-b6af-1410cadf3dfc.png)'
  prefs: []
  type: TYPE_IMG
- en: A complete report of the results of this analysis is available in the shared **testphp_vulnweb_com.pdf**
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this report, we can see the files affected by all detected vulnerabilities,
    such as sql injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3fa55c17-584b-4b98-9473-a5472a7cdc63.png)'
  prefs: []
  type: TYPE_IMG
- en: W3AF profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The profiles in W3AF are saved configurations of plugins enabled and focused
    on specific objectives, frequently. These types of associations are made at the
    moment of initiating the process of information gathering. Using profiles allows
    us to enable only those plugins that are interesting against an objective, deactivating
    the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the profiles, we can highlight:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bruteforce:** It allows us to obtain credentials from authentication forms
    through a brute-force process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**audit_high_risk:** Allows you to identify the most risky vulnerabilities,
    such as SQL injection and XSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full_audit_manual_disc:** It allows us to make a discovery manually and to
    explore the website in search of known vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**full_audit:** It allows a complete audit of the website, using the webSpider
    plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP_TOP10 :** Allows you to search among the main OWASP security flaws.
    For more information about the security flaws, check out: [http://www.owasp.org/index.php/OWASP_Top_Ten_Project](http://www.owasp.org/index.php/OWASP_Top_Ten_Project).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**web_infrastructure:** Uses all the available techniques to obtain a fingerprint
    of the web infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fast_scan:** It allows us to perform a fast scan on the website, using only
    the fastest audit plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: W3af install
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: W3af is a Python tool that needs many dependencies.The specific details for
    the installation of w3af can be found in the official documentation: [http://docs.w3af.org/en/latest/install.html](http://docs.w3af.org/en/latest/install.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The requirements for installing it are:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 2.5 or higher**:** `apt-get install python`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python packages**:** `apt-get install nltk python-nltk python-lxml python-svn
    python-fpconst python-pygooglechart python-soappy python-openssl python-scapy
    python-lxml python-svn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code is available in the GitHub repository ([https://github.com/andresriancho/w3af](https://github.com/andresriancho/w3af)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/563e241a-542c-4a2d-9d58-1d6510fed56f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, to prove that the entire environment is correctly configured, simply go
    to the directory where the framework has been downloaded and execute the `./w3af_console`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: If the environment is found with all the libraries correctly configured, this
    will open the w3af console ready to receive commands. To execute the GTK interface
    from the same directory execute `./w3af_gui`.
  prefs: []
  type: TYPE_NORMAL
- en: This command will open the graphical user interface we saw in overview section.
  prefs: []
  type: TYPE_NORMAL
- en: W3af in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use W3AF from any Python script, it is necessary to know certain details
    of its implementation, as well as the main classes that allow to interact with
    the framework programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: There are several classes included in the framework, however, the most important
    to manage the whole attack process is the `w3afCore` class of the `core.controllers.w3afCore`
    module. An instance of that class contains all the methods and properties needed
    to enable plugins, establish the objective of an attack, manage profiles, and
    above all, start, interrupt, and stop the attack process.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/andresriancho/w3af-module](https://github.com/andresriancho/w3af-module)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find the main controller in this folder inside the GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/andresriancho/w3af-module/tree/master/w3af-repo/w3af/core/controllers](https://github.com/andresriancho/w3af-module/tree/master/w3af-repo/w3af/core/controllers)'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of the `w3afCore` class has the plugins attribute, which allows
    executing several types of actions such as listing the plugins of a certain category,
    activating and deactivating plugins or setting configuration options for those
    plugins that are configurable.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the `w3af_plugins.py` file in the w3af folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Another interesting feature of w3af is that it allows you to manage profiles,
    which include the configuration corresponding to the enabled profiles and attack
    targets.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the  `w3af_profiles.py` file in the w3af
    folder in the GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Discovering sql vulnerabilities with Python tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section explains how to test whether a website is safe from SQL injection
    using the sqlmap penetration-testing tool. sqlmap is an automated tool for finding
    and exploiting SQL injection vulnerabilities that inject values in the parameters
    of the queries.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to SQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP Top 10 put injection as the #1 risk. If an application has a SQL injection
    vulnerability, an attacker could read the data in the database. Including confidential
    information and hashed passwords (or worse, the application keeps the passwords
    in plain text).
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL injection is a technique that is used to steal data by taking advantage
    of a non-validated input vulnerability. It is a code-injection technique where
    an attacker executes malicious SQL queries that control a web application’s database.
    With the right set of queries, a user can gain access to information stored in
    databases. For example, consider the following `php code` segment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user enters `“value’); DROP TABLE table;–”` as the input, the original
    query it transforms in a sql query where we are altering the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Identifying pages vulnerable to SQL Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A simple way to identify websites with the SQL Injection vulnerability is to
    add some characters to the URL, such as quotes, commas, or periods. For example,
    if the page is in PHP and you have a URL where you pass a parameter for a search,
    you can try adding one at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Doing injections will basically be using SQL queries as in the case of union
    and select and also the famous join. It is only a matter of manipulating in the
    URL of the page, such as entering the following lines until you can find the error
    shown above and find the name of the table that is prone or vulnerable to access.
  prefs: []
  type: TYPE_NORMAL
- en: If you observe [http://testphp.vulnweb.com/listproducts.php?cat=1](http://testphp.vulnweb.com/listproducts.php?cat=1),
    where the ‘GET’ parameter cat can be vulnerable to SQL injection, and an attacker
    may be able to gain access to information in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple test to check whether your website is vulnerable would to be to replace
    the value in the get request parameter with an asterisk (*). For example, in the
    following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://testphp.vulnweb.com/listproducts.php?cat=*](http://testphp.vulnweb.com/listproducts.php?cat=*)'
  prefs: []
  type: TYPE_NORMAL
- en: If this results in an error such as the preceding one, we can conclusively say
    that the website is vulnerable to sql injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screen capture, we can see the error returned by the database when
    we try to use an attack vector over the vulnerable parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/80922e96-f6b7-442b-afd3-8aab9b8ef063.png)'
  prefs: []
  type: TYPE_IMG
- en: With Python, we could build a simple script that reads from a `sql-attack-vector.txt` text
    file possible sql attack vectors and checks the output as a result of injecting
    specific strings. The objective is to start from a url where we identify the vulnerable
    parameter and combine the original url with the attack vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the `test_url_sql_injection.py` file in
    the `sql_injection` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find the following code in the `sql-attack-vector.txt` file in the
    `sql_injection` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When executing `test_url_sql_injection.py`, we can see the injectable cat parameter
    that is vulnerable to many vector attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/83c0687c-c1ef-4791-89f7-348735a48ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: Introducing SQLmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQLmap is one of the best-known tools written in Python to detect vulnerabilities,
    such as SQL Injection. To do this, the tool allows requests to the parameters
    of a URL that are indicated, either through a GET or POST request and detect whether
    for some parameter the domain is vulnerable because the parameters are not being
    validated correctly. In addition, if it detects any vulnerability, it has the
    ability to attack the server to discover table names, download the database, and
    perform SQL queries automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about sqlmap at [http://sqlmap.org](http://sqlmap.org).
  prefs: []
  type: TYPE_NORMAL
- en: Sqlmap is an automated tool for finding and exploiting SQL injection vulnerabilities
    written in Python. It could find a SQL injection vulnerability using various techniques,
    such as boolean-based blind, time-based, UNION-query-based, and stacked queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sqlmap currently supports the following databases:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once it detects a SQL injection on the target host, you can choose from a variety
    of options:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform an extensive backend DBMS fingerprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieve the DBMS session user and database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerate users, password hashes, privileges, and databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump the entire DBMS table/columns or the user’s specific DBMS table/columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run custom SQL statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing SQLmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sqlmap comes preinstalled with some linux distributions oriented to security
    tasks, such as kali linux, which is the preferred choice of most penetration testers.
    However, you can install `sqlmap` on other debian-based linux systems using the
    `apt-get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Also we can install it from the source code in the GitHub repository – [https://github.com/sqlmapproject/sqlmap](https://github.com/sqlmapproject/sqlmap):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can look at the set of parameters that can be passed to the `sqlmap.py`
    script with the `-h` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35e8831c-fbcd-4b4e-bdd7-781048bcc6a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters that we will use for the basic SQL Injection are shown in the
    preceding image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d0f18985-5ff0-41f4-9979-00d00ff45700.png)'
  prefs: []
  type: TYPE_IMG
- en: Using SQLMAP to test a website for a SQL Injection vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the main steps we can follow to obtain all information about a database
    that is behind a sql injection vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: List information about the existing databases**'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we have to enter the web url that we want to check along with the -u
    parameter.  We may also use the `–tor` parameter if we wish to test the website
    using proxies. Now typically, we would want to test whether it is possible to
    gain access to a database. For this task we can use the `--dbs` option, which lists
    all the available databases.
  prefs: []
  type: TYPE_NORMAL
- en: '`sqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1 --dbs`'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the execution of the previous command, we observe the presence of two
    databases, `acuart` and `information_schema`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d2cb69e2-3cbd-46b4-ac35-36d1b451aea0.png)'
  prefs: []
  type: TYPE_IMG
- en: We get the following output showing us that there are two available databases.
    Sometimes, the application will tell you that it has identified the database and
    ask whether you want to test other database types. You can go ahead and type ‘Y’.
    Further, it may ask whether you want to test other parameters for vulnerabilities,
    type ‘Y’ here as we want to thoroughly test the web application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: List information about Tables present in a particular Database**'
  prefs: []
  type: TYPE_NORMAL
- en: To try to access any of the databases, we have to modify our command. We now
    use -D to specify the name of the database that we wish to access, and once we
    have access to the database, we want to see whether we can access the tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this task, we can use the `--tables` query to access the acuart database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following image, we see that eight tables have been recovered. In this
    way, we definitely know that the website is vulnerable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fe550ac2-0495-41f8-ac80-aea3322b5a87.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 3: List information about the columns of a particular table**'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to view the columns of a particular table, we can use the following
    command, in which we use `-T` to specify the table name,  and **`--columns`**
    to query the column names.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the command we can try to access the ‘users’ table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 4: Dump the data from the columns**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can access all information in a specific table by using the following
    command, where the `**--**dump` query retrieves all the data from the users table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'From the following image, we can see that we have accessed the data in the
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6c92aa64-3640-4011-9c2d-9184315084b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Other commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similarly, on vulnerable websites, we can literally explore through databases
    to extract information with other commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this command, we can get all users from database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we obtain users registered in the database-management system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d67ef38-867a-4907-aa9f-5277b7e4b8c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With this command, we can get columns from a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we obtain columns from the users table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/948d4ea1-9b96-47c7-9ad7-e817d5366bd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With this command, we can get an interactive shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we obtain a shell to interact with the database with the sql language
    queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/18f7991f-639c-4f3a-8c3a-4efdafa79d07.png)'
  prefs: []
  type: TYPE_IMG
- en: Other tools for detecting SQL Injection vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Python ecosystem, we can find other tools, such as DorkMe and Xsscrapy,
    for discovering sql injection vulnerabilties.
  prefs: []
  type: TYPE_NORMAL
- en: DorkMe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DorkMe is a tool designed with the purpose of making searching for vulnerabilities
    easier with Google Dorks, such as SQL Injection vulnerabilities ([https://github.com/blueudp/DorkMe](https://github.com/blueudp/DorkMe)).
  prefs: []
  type: TYPE_NORMAL
- en: You also need install the `pip install Google-Search-API` Python package.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check dependencies with the `requirements.txt` file and install them
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the options provided by the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f3dcb505-a57c-47a1-9d7b-4a38abce9acd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can check the same `url` we used with sqlmap in the previous section.We
    can use the `--dorks vulns -v` options parameters recommended for the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see we obtain sql injection vulnerabilities with a high impact:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3a242171-0cd7-42ea-b572-43668e9098b0.png)'
  prefs: []
  type: TYPE_IMG
- en: XSScrapy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XSScrapy is an application based on Scrapy and allows us to find XSS vulnerabilities
    and SQL-injection-type vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: The source code is available in the GitHub repository: [https://github.com/DanMcInerney/xsscrapy](https://github.com/DanMcInerney/xsscrapy).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it on our machine, we could clone the repository and execute the
    `python pip` command together with the `requirements.txt` file, which contains
    the Python dependencies and modules used by the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the main dependencies you need to install is `scrapy`: [https://scrapy.org/](https://scrapy.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Scrapy is a framework for Python that allows you to `perform webscraping tasks,
    web crawling processes, and data analysis`. It allows us to recursively scan the
    contents of a website and apply a set of rules on said contents to extract information
    that may be useful to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main elements in Scrapy:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interpreter:** Allows quick tests, as well as creating projects with a defined
    structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spiders:** Code routines that are responsible for making HTTP requests to
    a list of domains given by the client and applying rules in the form of regular or
    XPATH expressions on the content returned from HTTP requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XPath expressions:** With XPath expressions, we can get to a fairly detailed
    level of the information we want to extract. For example, if we want to extract
    the download links from a page, it is enough to obtain the Xpath expression of
    the element and access the href attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Items:** Scrapy uses a mechanism based on XPATH expressions called "**Xpath
    selectors**". These selectors are responsible for applying Xpath rules defined
    by the developer and composing Python objects that contain the information extracted.
    The items are like containers of information, they allow us to store the information
    following the rules that we apply when return the contents that we are obtaining.
    They contain the fields of information we want to extract.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this screenshot, we can see the most recent scrapy version available on
    the official site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de0b41a1-c16d-4835-9c8e-5a4f242152d4.png)'
  prefs: []
  type: TYPE_IMG
- en: You can install it with the **pip install scrapy** command. Also is available
    in the conda repository and you can install it with the `conda install -c conda-forge
    scrapy`command.
  prefs: []
  type: TYPE_NORMAL
- en: 'XSScrapy runs in command-line mode and has the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a40b68a3-b0cb-44c2-9a82-552111ab4e38.png)'
  prefs: []
  type: TYPE_IMG
- en: The most common option to use is in which the URL (`-u`/url) to be analyzed
    is parameterized, and from the root URL, the tool is able to follow the internal
    links to analyze the successive links.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting parameter is one that allows us to establish the maximum
    number of simultaneous connections against the site that we are analyzing (`-c`/-connections)
    something that is very practical to prevent a firewall or IDS system detecting
    the attack and blocking requests from the IP where they are made.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if the website requires authentication (digest or basic), it is
    possible to indicate a user login and password with the `-l` (login) and `-p`
    (password) parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try to execute this script with the previous site where we have found
    an XSS vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the execution of this script, we can see that it detect a `sql` injection
    in a php site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1a57a179-98cb-4e8c-8483-d854e6e6ffdf.png)'
  prefs: []
  type: TYPE_IMG
- en: The execution results of this analysis are available in the `testphp.vulnweb.com.txt` shared
    file, available in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Testing heartbleed and SSL/TLS vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section explains how to test whether a website is safe from SQL injection
    using the sqlmap penetration-testing tool. sqlmap is an automated tool for finding
    and exploiting SQL injection vulnerabilities injecting values in the parameters
    of the queries.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing OpenSSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Openssl is an implementation of SSL and TLS protocols that is widely used by
    servers of all types; a fairly high percentage of servers on the internet use
    it to ensure communication between clients and servers using strong encryption
    mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is an implementation that throughout its years of development has
    been violated on several occasions, affecting the confidentiality and privacy
    of user information. Some vulnerabilities that have been made public have been
    corrected; however, the security patches that should be applied to a vulnerable
    version of OpenSSL are not applied as quickly, thus leaving vulnerable servers
    on the internet that we can find in Shodan.
  prefs: []
  type: TYPE_NORMAL
- en: Finding vulnerable servers in Shodan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can easily make a script that obtains the results of a server that can be
    vulnerable to heartbleed due to a vulnerable OpenSSL version.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the `ShodanSearchOpenSSL.py` file in the `heartbleed_shodan`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in this image, the total number of servers that can be vulnerable
    and have an OpenSSL v1.0 is 3,900:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/25ef6860-8d38-4e66-aab8-9f6a4e6ff8f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we make the request from the web interface, we see even more results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7875cba2-8c33-4114-b7ba-2bb5478a06d7.png)'
  prefs: []
  type: TYPE_IMG
- en: An attacker could try to gain access to any of these servers; for this, you
    can use an exploit that is in the [https://www.exploit-db.com/exploits/32745](https://www.exploit-db.com/exploits/32745) URL.
    In the next section, we are going to analyze this vulnerability and how to exploit
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Heartbleed vulnerability (OpenSSL CVE-2014-0160)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability CVE-2014-0160, also known as Heartbleed, is considered one of
    the biggest security failures on the internet to date.
  prefs: []
  type: TYPE_NORMAL
- en: It is one of the most critical vulnerabilities in the `OpenSSL` package. To
    understand the impact of this vulnerability, it is necessary to understand the
    operation of the "HeartBeat" extension, which has been a central element in the
    operation of OpenSSL, since it allows us improve the performance of clients and
    servers that use an encrypted channel, such as SSL.
  prefs: []
  type: TYPE_NORMAL
- en: To establish an SSL connection with a server, a process called "HandShake" has
    to be completed, consisting of the exchange of symmetric and asymmetric keys for
    establishing the encrypted connection between client and server. This process
    is quite expensive in terms of time and computing resources.
  prefs: []
  type: TYPE_NORMAL
- en: HeartBeat is a mechanism that allows us to optimize the time of establishment
    of the handshake in such a way that it allows the server to indicate that the
    SSL session must be maintained while the client is using it.
  prefs: []
  type: TYPE_NORMAL
- en: The mechanism is that the client inserts a payload and indicates the length
    of said payload in one of the fields of the structure. Subsequently, the server
    receives said packet and is responsible for composing a response message with
    a structure called `TLS1_HB_RESPONSE`, which will be composed simply by the "n"
    bytes that are indicated in the length of the `TLS1_HB_REQUEST` structure.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation problem introduced in OpenSSL is found in the incorrect validation
    of the length of the data sent in the `TLS_HB_REQUEST` structure, since when it
    is going to compose the `TLS1_HB_RESPONSE` structure, the server is responsible
    for locating the exact location of the `TLS_HB_REQUEST` structure in the memory
    of the server and reading the "n" bytes of the field where the payload is based
    on the value set in the length field.
  prefs: []
  type: TYPE_NORMAL
- en: This means that an attacker can send a payload with a data byte and set an arbitrary
    value in the length field, which is usually less than or equal to 64 kBytes, and
    the server will send a `TLS1_HB_RESPONSE` message with 64 kBytes of information
    stored in the memory of the server.
  prefs: []
  type: TYPE_NORMAL
- en: This data may have sensitive user information and passwords of the system, therefore
    it is a very serious vulnerability that has affected millions of servers because
    OpenSSL is a widely-used implementation by Apache and Ngnix servers. As we can
    see in Shodan, today there are still servers that use version 1.0.1 and most can
    be vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the the code in `Test_heartbeat_vulnerability.py` in the `heartbleed_shodan`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: The script tries to perform a HandShake with the server in the indicated port
    and later, it is responsible for sending a packet with the malicious structure, `TLS1_HB_REQUEST`.
  prefs: []
  type: TYPE_NORMAL
- en: If the data packet returned by the server is of the "24" type, it indicates
    that it is a response with the `TLS1_HB_RESPONSE` structure, and in the case that
    the payload is greater than the size of the payload sent in the request packet,
    it can be considered that the server is vulnerable and that it has returned information
    related to the memory of the server, otherwise it is assumed that the server has
    processed the malicious request, but has not returned any additional data. This
    indicates that there has been no information leak and that the server is not vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the script on a vulnerable server, the output will be similar
    to the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/57aa2e26-1164-4706-b971-7857370875aa.png)'
  prefs: []
  type: TYPE_IMG
- en: To detect this bug in a server with openssl activated, we send a specific request
    and if the response server is equal to specific heartbleed payload, then the server
    is vulnerable and you could access information that, in theory, should be protected
    with ssl.
  prefs: []
  type: TYPE_NORMAL
- en: The response from the server includes information that is stored in the memory
    of the process. In addition to being a serious vulnerability that affects many
    services, it is very easy to detect a vulnerable target and then periodically
    extract chunks from the server's memory.
  prefs: []
  type: TYPE_NORMAL
- en: We can combine the shodan search with checking for heartbleed vulnerability
    in servers.
  prefs: []
  type: TYPE_NORMAL
- en: For this task, we have defined the `shodanSearchVulnerable()` and `checkVulnerability()`
    methods for checking vulnerability for each sever that matches with the “OpenSSL
    1.0.1” Shodan search.
  prefs: []
  type: TYPE_NORMAL
- en: For python 2.x , you can find the the code in  `testShodan_openssl_python2.py`in
    the`heartbleed_shodan` folder.
  prefs: []
  type: TYPE_NORMAL
- en: For python 3.x, you can find the the code in `testShodan_openssl_python3.py`in
    the `heartbleed_shodan` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we review the main methods we can develop for searching
    in shodan servers that can be vulnerable because of openssl version vulnerable,
    also we need to check whether port 443 is opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have defined our method for searching in shodan and checked that `port
    443` is opened, we can check with the `socket` module specific heartbleed vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Other tools for testing openssl vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we cover some tools we can use for testing openssl vulnerabilities
    related to heartbleed and certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Heartbleed-masstest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tool allows us to scan multiple hosts for Heartbleed, in an efficient way
    with multithreading. This tests for OpenSSL versions vulnerable to Heartbleed
    without exploiting the server, so the heartbeat request does not cause the server
    to leak any data from memory or expose any data in an unauthorized manner: [https://github.com/musalbas/heartbleed-masstest](https://github.com/musalbas/heartbleed-masstest).
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for Heartbleed with the nmap port scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nmap has a Heartbleed script that does a great job of detecting vulnerable
    servers. The script is available on the OpenSSL-Heartbleed nmap script page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nmap.org/nsedoc/scripts/ssl-heartbleed.html](http://nmap.org/nsedoc/scripts/ssl-heartbleed.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://svn.nmap.org/nmap/scripts/ssl-heartbleed.nse](https://svn.nmap.org/nmap/scripts/ssl-heartbleed.nse)'
  prefs: []
  type: TYPE_NORMAL
- en: In the Windows operating system, by default, scripts are located in the `C:\Program
    Files (x86)\Nmap\scripts` path.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux operating system, by default, scripts are located in the `/usr/share/nmap/scripts/`
    path.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'All we need to do is use the Heartbleed script and add in the IP address of
    our target site. If the target we are analyzing is vulnerable, we will see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/081c95cd-444d-4a99-9d54-c3548dd4c947.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing SSL/TLS configurations with SSLyze script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSLyze is a Python tool that works with python 3.6 and analyzes the SSL configuration
    of a server to detect issues such as bad certificates and dangerous cipher suites.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tool is available on the `pypi` repository and you can install it from
    source code or with the pip install command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pypi.org/project/SSLyze/](https://pypi.org/project/SSLyze/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/nabla-c0d3/sslyze](https://github.com/nabla-c0d3/sslyze)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also it''s necessary to install some dependencies, such as `nassl`, also available
    in the pypi repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pypi.org/project/nassl/](https://pypi.org/project/nassl/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/nabla-c0d3/nassl](https://github.com/nabla-c0d3/nassl)'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the options that the script provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7ab6fc9d-d479-4a73-9feb-bae03b64836e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the options it provide is HeartbleedPlugin for detecting this vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/edecd339-9f8c-4ca7-a9fb-08dc01296eb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also it provides another plugin for detecting OpenSSL cipher suites the server
    is using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2d99e43d-c5e8-480a-99a4-ab36aaf2e692.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we try to execute the script over a specific IP address, it returns a report
    with results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8f701679-aa3f-46b4-81d0-ea7ae14db25a.png)'
  prefs: []
  type: TYPE_IMG
- en: The execution results of this analysis are available in the `sslyze_72.249.130.4.txt` shared
    file, available in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Other services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several online services that allow you to determine whether a server
    is affected with this vulnerability and others for testing ssl versions and certificates
    in servers and domains, such as ssllabs fror qualys.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these links, we can some services for doing this kind of testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://filippo.io/Heartbleed](https://filippo.io/Heartbleed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ssllabs.com/ssltest/index.html](https://www.ssllabs.com/ssltest/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The qualys online service returns the results in the form of a **report** where
    we see possible problems that the version of openssl that the server is using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dfa631a6-0027-4e19-bc8b-a3c7138ff7cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see in detail the SSL/TLS version and information about possible
    vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/30fabd61-e4eb-4fdd-9765-37ecdb4f8844.png)'
  prefs: []
  type: TYPE_IMG
- en: With the Shodan service, you can see more information related to CVE vulnerabilities
    detected in a server and SSL certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screenshot, we can see other CVE related to configuration problems
    in servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f1769398-c548-456c-956a-4468ff4aced7.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The analysis of vulnerabilities in web applications is currently the best field
    in which to perform security audits. One of the objectives of this chapter was
    to learn about the tools in the python ecosystem that allow us to identify server
    vulnerabilities in web applications, such as w3af and sqlmap. In the sql injection
    section, we covered sql injection and tools for detecting this kind of vulnerability
    with sqlmap and xssscrapy. Also, we looked at how to detect vulnerabilities related
    to OpenSSL in servers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore programming packages and python modules
    for extracting information about geolocation IP addresses, extracting metadata
    from images and documents, and identifying web technology used by a site in the
    front and the back.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is an attack that injects malicious scripts into web
    pages to redirect users to fake websites or gather personal information?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the technique where an attacker inserts SQL database commands into a
    data-input field of an order form used by a web-based application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tools allows you to detect vulnerabilities in web applications related
    with JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool allows you to obtain data structures from websites?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool allows you to detect sql-injection-type vulnerabilities in web applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which profile in the w3af tool performs a scan to identify the vulnerabilities
    with higher risk, such as SQL Injection and Cross-site scripting (XSS)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is the main class in w3af API that contains all the methods and properties
    needed to enable plugins, establish the objective of an attack, and manage profiles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the slmap option that lists all the available databases?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the nmap script that allows us to scan for Heartbleed vulnerabilities
    in a server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the process that allows us to establish an SSL connection with a server,
    consisting of the exchange of symmetric and asymmetric keys to establish the encrypted
    connection between client and server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following links, you will find more information about the tools mentioned
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/](https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blog.sqreen.io/preventing-sql-injections-in-python/](https://blog.sqreen.io/preventing-sql-injections-in-python/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://hackertarget.com/sqlmaptutorial](https://hackertarget.com/sqlmaptutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://packetstormsecurity.com/files/tags/python](https://packetstormsecurity.com/files/tags/python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://packetstormsecurity.com/files/90362/Simple-Log-File-Analyzer 1.0.html](https://packetstormsecurity.com/files/90362/Simple-Log-File-Analyzer%201.0.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/mpgn/heartbleed-PoC](https://github.com/mpgn/heartbleed-PoC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
