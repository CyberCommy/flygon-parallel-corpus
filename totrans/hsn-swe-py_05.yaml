- en: The hms_sys System Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project that the next several chapters will focus on is being written for
    an imaginary company, *Hand Made Stuff*, that specializes in connecting consumers
    with artisans who create and sell a variety of unique handmade items. Those products
    cover a wide range of materials and purposes, and include furniture, craft, and
    jewelry items, such as beads and bits and pieces for costuming. Pretty much anything
    that someone is willing to make and someone else is willing to buy.
  prefs: []
  type: TYPE_NORMAL
- en: Goals for the system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***Hand Made Stuff** (**HMS**)* is now looking for a way to streamline the
    business process that they use to allow artisans to make their wares available
    through the main website. At present, when an Artisan has created something that
    they''re willing to sell, they send an email to someone at the *HMS* central office,
    with one or more attached photos if it''s something new, sometimes with new photos
    if it''s a new version or set of a previously-offered products. Someone in the
    *HMS* central office copies the relevant information into their web system and
    does a bit of basic setup to make the items available. From there, once a consumer
    decides that they want to order something an Artisan has made, the order goes
    through another manual process that involves the *HMS* central office emailing
    the Artisan with the order information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All of these manual processes are time-consuming, and sometimes error-prone.
    On occasion, they have taken so long that more than one customer has tried to
    purchase the same item because the information was still being processed to get
    the first order in motion:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/264d72a0-93af-4dfe-aceb-4d3d1b0e1fee.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Hand Made Stuff**''s* website runs on an off-the-shelf system that is not
    easily modifiable. It does have an API, but that API was designed to be used for
    internal access processes, so there are security concerns about opening access
    to it up enough to allow artisans to connect to it through new web-application
    development.'
  prefs: []
  type: TYPE_NORMAL
- en: The business that this imaginary company does is, perhaps, not terribly realistic.
    It certainly doesn't feel like it'd actually be able to compete with existing
    businesses such as Etsy or (maybe) craigslist or eBay. Even so, the implementation
    concepts for the system are reasonably realistic, in that they are variations
    of tasks that need to be implemented across several real-world problem domains.
    They're just combined in an unusual fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Since the following chapters are intended to represent individual development
    iterations, in a process that's at least somewhat along the lines of a Kanban
    methodology, there are some artifacts from the pre-development processes that
    are worth noting before getting into what those iterations/chapters will look
    like.
  prefs: []
  type: TYPE_NORMAL
- en: What's known/designed before development starts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary goals of the new system center around streamlining and (as much
    as possible) automating the existing process to get artisans'' products into the
    online catalog. Specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: '**artisans** should be able to submit product information without having to
    go through an email-based process. As part of that change:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some data-entry control will be enforced, to prevent simple mistakes (missing
    or invalid data).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: artisans will be able to modify their product data, with some limitations, and
    with a review still required before those revisions go live. At a minimum, though,
    they will be able to deactivate live product listings, and activate existing-but-deactivated
    items as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product Reviewers** will be able to make revisions directly (for simple changes,
    at least), and send items back for major revisions. This part of the process is
    loosely defined, and may need further detail and definition later in the development
    cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Product Managers''** data-entry tasks will be reduced significantly,
    at least as far as the setup of new products is concerned. The new system will
    take care of most or all of that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The use-case diagram for the new process, then, looks like the following before
    any detailed design has taken place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/87aea1eb-499b-4a4e-b26c-3c343cd42c96.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The intention is for each Artisan to be supplied with an installable application
    that allows them to interact with the *HMS* main office. That local application
    will connect to an Artisan gateway that will handle the Artisan-to-main-office
    communications, and store the incoming data from artisans as a sort of staging
    area for anything that''s pending approval. From there, a **Reviewer** (and/or
    **Product manager**) application will allow **Product reviewers** and managers
    to move Artisan-supplied products into the main web store, using its native API.
    The logical architecture, with some rough inter-process communication flows, at
    this point looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/582f6f74-1300-4257-9313-85345973ac82.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Between these diagrams and the initial concept noted earlier, there are a lot
    of specific user needs that have already been captured. It's possible that more
    will arise during development or at least planning for development (as stories
    for iterations are fleshed out).
  prefs: []
  type: TYPE_NORMAL
- en: 'The actual data structure behind artisans and their products is not known yet,
    only that products are distinct elements that can be owned by one and only one
    Artisan. More detail will be needed to implement these, as well as to determine
    what data moves where (and when), but the relationship between them is already
    diagrammable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/060a3516-45ed-4e68-9e69-6cd6e9cbe1b6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The current lack of information about the inner data structure of these elements
    also makes any sort of UI design specification difficult, if not impossible. Similarly,
    it will be difficult to determine any business rules that aren't already implied
    by the use-case and logical-architecture/data-flow diagrams. Those, too, will
    require more details before anything more useful can be discerned.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few other varied items that could be inferred from this information
    and fall into one of the following pre-development steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Risks**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fact that the connection between the **Review/Manage Application** and the
    **Web Store Database** is one-way probably indicates some concern that the data
    flow needs to be carefully controlled. Realistically, it will probably be necessary
    for the application to be able to at least read from the database, if only so
    that existing products can be found and modified, rather than creating new product
    entries over and over again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use-case diagram shows that an Artisan can activate or deactivate a product
    without involving the **Product Reviewer**, but the architecture and flow don't
    have any obvious way to handle that capability. At a minimum, an examination of
    a connection from the Artisan gateway to the **Web Store Database** should be
    undertaken, but that's something that can happen later, during the relevant development
    iteration. Since the web store system has an API, it may be that the process can
    be managed by an API call to the **Web Store Application**, from the **Artisan** **Gateway**,
    but that hasn't been evaluated yet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project-management planning data**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the project has made it to the development shop, the odds are that all of
    the feasibility, cost-analysis, and other business-level examinations have been
    made and approved. Though there may not be any specific information needed from
    these results, knowing that they are probably available if a question arises is
    a good thing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the iteration chapters will look like
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the interest of showing what an Agile process might look like as a system
    is developed under it, the development of `hms_sys` will be broken down into several
    iterations. Each iteration, with a single, high-level goal, covers one or more
    chapters, and is concerned with a common set of Stories. Of the agile methodologies
    discussed in [Chapter 4](5d9146f5-67e4-4aee-b9d7-bc945eadc93d.xhtml), *Methodologies,
    Paradigms, and Practices*, these chapters are closer to being a Kanban approach
    than anything else, since the number and total sizes of stories being completed
    in each iteration vary significantly between iterations. In a Scrum setting, these
    iterations would be time-constrained, broken out into time-limited chunks – that
    is, each iteration would be planned to last for some specific length of time.
    The following chapters and their corresponding iterations are goal-oriented instead,
    with each intended to achieve some milestone of system functionality. In that
    respect, they are also close to following a **Feature-Driven Development** model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each iteration will address the same five items:'
  prefs: []
  type: TYPE_NORMAL
- en: Iteration goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Assembly of stories and tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement analysis and definition activities from the SDLC model, as/if needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System architecture and design activities, also from the SDLC model, as/if needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and testing the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System integration, testing, and acceptance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Post-development considerations and impact:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation/installation/distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations/use and maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decommissioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iteration goals and stories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each iteration will have a very specific, and reasonably tightly-focused set
    of goals to be accomplished, building upon the accomplishments of previous iterations
    until the final system is complete. In order, the goals for each iteration are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Development foundations**:Setting up projects and processes. Each of the
    functional iterations needs be testable, buildable, and deployable by the time
    they are finished, so some attention needs to be paid early in the system project
    to making sure that there is some sort of common foundation to build those on
    as development progresses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business object foundations**:Definition and development of business-object
    data structures and functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business-object data-persistence**:Making sure that the various business
    objects in use can be stored and retrieved as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service foundations**:Building out the bare-bones functionality for the main
    office and Artisan services, which will be the backbone of the communication and
    data-exchange processes for the system as a whole.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service communication**:Defining, detailing, and implementing the actual
    communication processes between components of the system, particularly the service-layer
    implementations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these iterations has a perhaps-surprising amount of design- and implementation-level
    decision-making that has to happen, and a lot of opportunities to exercise various
    software-engineering principles across a wide variety of functional, conceptual,
    and implementation scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Each iteration's efforts will be captured in a set of user stories, of the type
    described when examining the Scrum and Kanban methodologies. Each iteration's
    criteria for being complete will include having all of the stories associated
    with it complete, or at least resolved. It's possible that some stories will have
    to be moved to later iterations in order to accommodate functional dependencies,
    for example, in which case it may not be possible to complete an implementation
    of those stories until later in the system's development.
  prefs: []
  type: TYPE_NORMAL
- en: Writing and testing the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once all of the stories have been defined in sufficient detail to allow development,
    the code itself will be written, both for the actual functionality associated
    with each story, and for automated testing of that code – unit-testing with regression-testing
    capabilities baked in. If possible and practical, integration- and system-testing
    code will also be written with an eye toward providing the same automated, repeatable
    testing of new code from those perspectives. The end goal of each iteration will
    be a deployable and functional code-base that has been tested (and that can be
    retested on demand). It may not be complete or even usable during the early iterations,
    but it will be stable and predictable in terms of which capabilities it provides.
  prefs: []
  type: TYPE_NORMAL
- en: This part of the process will form the bulk of the next few chapters. Writing
    code is, after all, the key aspect of development.
  prefs: []
  type: TYPE_NORMAL
- en: Post-development considerations and impact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The operations/use, maintenance, and decommissioning phases of `hms_sys` will
    be discussed in some depth after development is complete, but as development unfolds
    some effort will be made to anticipate specific needs that relate to those parts
    of the system's life. There may or may not be code written during the core development
    phases to address concerns in the system's active life, but any expected needs
    that surface during those efforts could, at a minimum, have some documentation
    written around them as part of the development effort, targeted for use by system
    administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pre-development and high-level conceptual design items for `hms_sys` are
    fairly straightforward, at least at the level of detail that's available coming
    out of the pre-development planning cycle(s). More detail will bubble to the surface
    once the user stories for the individual iterations' functionalities are fleshed
    out, along with a host of questions and implementation decisions and details.
    There's one iteration, though, that will happen first.
  prefs: []
  type: TYPE_NORMAL
- en: That first iteration, as hinted at, is concerned more with the definition of
    the tools, processes, and practices that will be in play through the real development
    of the final system. The odds are good that most of the decisions and setup that
    will be part of that will already have been decided upon by the development team,
    and by those who manage the team. Even so, it's worth looking at some of the options
    and decision-making criteria that will hopefully have gone into making those decisions.
    They can (and often do) have a significant impact on how well things work during
    development.
  prefs: []
  type: TYPE_NORMAL
