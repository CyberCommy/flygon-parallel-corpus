- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About the Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks to its extensive support for managing hundreds of containers that run
    cloud-native applications, Kubernetes is the most popular open source container
    orchestration platform that makes cluster management easy. This workshop adopts
    a practical approach to get you acquainted with the Kubernetes environment and
    its applications.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with an introduction to the fundamentals of Kubernetes, you'll install
    and set up your Kubernetes environment. You'll understand how to write YAML files
    and deploy your first simple web application container using Pod. You'll then
    assign human-friendly names to Pods, explore various Kubernetes entities and functions,
    and discover when to use them. As you work through the chapters, this Kubernetes
    book will show you how you can make full-scale use of Kubernetes by applying a
    variety of techniques for designing components and deploying clusters. You'll
    also get to grips with security policies for limiting access to certain functions
    inside the cluster. Toward the end of the book, you'll get a rundown of Kubernetes
    advanced features for building your own controller and upgrading to a Kubernetes
    cluster without downtime.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this workshop, you'll be able to manage containers and run cloud-based
    applications efficiently using Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Audience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you are new to the world of web programming or are an experienced developer
    or software engineer looking to use Kubernetes for managing and scaling containerized
    applications, you'll find this workshop useful. A basic understanding of Docker
    and containerization is necessary to make the most of this book.
  prefs: []
  type: TYPE_NORMAL
- en: About the Chapters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Chapter 1*, *Introduction to Kubernetes and Containers*, begins with containerization
    technologies as well as various underlying Linux technologies that enable containerization.
    The chapter ends by introducing Kubernetes into the picture, while laying out
    the advantages it brings to the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 2*, *An Overview of Kubernetes*, gives you your first hands-on introduction
    to Kubernetes and provides an overview of the architecture of Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *kubectl – Kubernetes Command Center*, lays out the various ways
    of using kubectl while underlining the principle of declarative management.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *How to Communicate with Kubernetes (API Server)*, dives into
    the details of the Kubernetes API server and the various ways of communicating
    with it.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 5*, *Pods*, introduces the basic Kubernetes object used to deploy
    any application.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 6*, *Labels and Annotations*, covers the basic mechanism used in Kubernetes
    to group, classify, and link different objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 7*, *Kubernetes Controllers*, introduces various Kubernetes controllers,
    such as Deployments and StatefulSets, among others, which are some of the key
    enablers of the declarative management approach.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 8*, *Service Discovery*, describes how you can make different Kubernetes
    objects discoverable within the cluster as well as from outside the cluster.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 9*, *Storing and Reading Data on Disk*, explains the various data
    storage abstractions offered by Kubernetes to enable applications to read and
    store data on disks.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 10*, *ConfigMaps and Secrets*, teaches you how to decouple application
    configuration data from the application itself, while looking at the advantages
    of taking this approach.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 11*, *Build Your Own HA Cluster*, walks you through setting up your
    own highly available, multi-node Kubernetes cluster on the **Amazon Web Services**
    (**AWS**) platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 12*, *Your Application and HA*, lays out some concepts behind continuous
    integration using Kubernetes and demonstrates a few of them using a highly available,
    multi-node, managed Kubernetes cluster running on **Amazon Elastic Kubernetes
    Service**.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 13*, *Runtime and Network Security in Kubernetes*, gives you an overview
    of the ways in which your application and cluster can be attacked, before covering
    the access control and security features offered by Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 14*, *Running Stateful Components in Kubernetes*, teaches you how
    to properly use different Kubernetes abstractions to reliably deploy stateful
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 15*, *Monitoring and Autoscaling in Kubernetes*, covers the ways in
    which you can monitor different Kubernetes objects and then use that information
    to scale the capacity of your cluster.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 16*, *Kubernetes Admission Controllers*, describes how Kubernetes
    allows us to extend the functionalities provided by the API server to implement
    custom policies before a request is accepted by the API server.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 17*, *Advanced Scheduling in Kubernetes*, describes how the scheduler
    places pods on the Kubernetes cluster. You will use advanced features to influence
    scheduler placement decisions for the pods.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 18*, *Upgrading Your Cluster without Downtime*, teaches you how you
    can upgrade your Kubernetes platform to a newer version without suffering any
    downtime for your platform or application.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 19*, *Custom Resource Definitions in Kubernetes*, shows you one of
    the main ways in which to extend the functionalities provided by Kubernetes. You
    will see how custom resources allow you to implement concepts specific to your
    own domain on your cluster.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to the activities presented in the chapters can be found at this
    address: [https://packt.live/304PEoD](https://packt.live/304PEoD).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, and user input are shown as follows: "Create a file named
    `sample-pod.yaml` in your current working directory."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code, a terminal command, or text to create a YAML file is set as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'New important words are shown like this: "Kubernetes provides this capability
    via **Admission Controllers**."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Key parts of code snippets are highlighted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Words that you see on the screen, for example, in menus or dialog boxes, appear
    in the text like this: "On the left sidebar, click on `Configuration` and then
    on `Data Sources`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Long code snippets are truncated and the corresponding names of the code files
    on GitHub are placed at the top of the truncated code. The permalinks to the entire
    code are placed below the code snippet. It should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: mutatingcontroller.go
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this example can be found at [https://packt.live/35ieNiX](https://packt.live/35ieNiX).
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we explore the book in detail, we need to set up specific software and
    tools. In the following section, we shall see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need at least a dual core CPU with virtualization support, 4 GB of memory,
    and 20 GB of free disk space.
  prefs: []
  type: TYPE_NORMAL
- en: Operating System Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our recommended operating system is Ubuntu 20.04 LTS or macOS 10.15\. If you
    are using Windows, you can dual boot Ubuntu. We have provided the instructions
    for that at the end of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to have virtualization features enabled on your hardware as well as
    your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Linux, you can run the following command to check whether virtualization
    is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You should get a non-empty response to this command. If you get an empty response,
    then you don't have virtualization enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'In macOS, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If virtualization is enabled, you should be able to see `VMX` in your output.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You will not be able to follow the instructions in the book if your host environment
    is virtualized, since Minikube (by default) runs all Kubernetes components in
    a virtual machine, which will not work if the host environment itself is virtualized.
    It is possible to use Minikube without a hypervisor, but your results may sometimes
    be different compared to our demonstrations in this book. Therefore, our recommendation
    is that one of the recommended operating systems is directly installed on your
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installation and Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section lists installation instructions for all the software that you will
    need for this book. Since we are recommending Ubuntu, we will use the APT package
    manager to install most of the required software in Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS, we recommend that you use Homebrew for convenience. You can install
    it by running this script in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The terminal output for this script will show you what changes will be applied
    and then ask for your confirmation. Once confirmed, the installation can be completed.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Your Package Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before you use APT to install any packages in Ubuntu, make sure that your package
    lists are up to date. Use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, you may choose to upgrade any upgradable packages on your machine
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, in the case of macOS, update the package lists for Homebrew using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Installing Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code bundle for this workshop is available on our GitHub repository. You
    can use Git to clone the repository to get all the code files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to install Git on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you use Xcode on macOS, it is likely that you may already have Git installed.
    You can check that by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get a `Command not found` error, then you don''t have it installed.
    You can install it via Homebrew using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: jq
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'jq is a JSON parser that is useful for extracting any information from API
    responses in JSON format. You can install it using the following command on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following command for installation on macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tree
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Tree is a package that will allow you to see the directory structure in the
    terminal. You can install it using the following command on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following command for installation on macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The AWS CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The AWS command line tool is a CLI tool that you can use from your terminal
    to manage your AWS resources. You can install it using the installation instructions
    at this URL: [https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Minikube and kubectl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Minikube allows us to create a single-node Kubernetes cluster for learning and
    testing purposes. kubectl is a command line interface tool that allows us to communicate
    with our cluster. You will find detailed installation instructions for these tools
    in *Chapter 2*, *An Overview of Kubernetes*.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you have Minikube installed already, we recommend that you work with
    the version that is specified in *Chapter 2*, *An Overview of Kubernetes*, in
    order to guarantee the reproducibility of all instructions in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Minikube requires you to have a hypervisor installed. We will go with VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'VirtualBox is an open source hypervisor that can be used by Minikube to virtualize
    a node for our cluster. Use the following command to install VirtualBox on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For installation on macOS, first get the appropriate file from this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, follow the installation instructions mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.virtualbox.org/manual/ch02.html#installation-mac](https://www.virtualbox.org/manual/ch02.html#installation-mac).'
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker is the default containerization engine used by Kubernetes. You will learn
    more about Docker in *Chapter 1*, *Introduction to Kubernetes and Containers*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Docker, follow the installation instructions at this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Docker in Mac, following the installation instructions at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Docker in Ubuntu, following the installation instructions at the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/engine/install/ubuntu/](https://docs.docker.com/engine/install/ubuntu/).'
  prefs: []
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go is a programming language that is used to build the applications demonstrated
    in this book. Also, Kubernetes is written in Go. To install Go on your machine,
    use the following command for Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For installation on macOS, use the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to install Go:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The code is tested with Go versions 1.13 and 1.14\. Please make sure that you
    have these versions although the code is expected to work for all 1.x versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to set a few environment variables. Use the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: kops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: kops is a command line interface tool that allows you to set up a Kubernetes
    cluster on AWS. The actual process of installing Kubernetes using kops is covered
    in *Chapter 11*, *Build Your Own HA Cluster*. To ensure the reproducibility of
    the instructions given in this book, we recommend that you install kops version
    1.15.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'For installation on Ubuntu, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the binary for kops version 1.15.1 using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, make the binary executable using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the executable to your path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether kops has been successfully installed by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If kops has been successfully installed, you should get a response stating the
    version as 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'For installation on macOS, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the binary for kops version 1.15.1 using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, make the binary executable using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the executable to your path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether kops has been successfully installed by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If kops has been successfully installed, you should get a response stating the
    version as 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: Dual-Booting Ubuntu for Windows Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will find instructions on how to dual-boot Ubuntu if you
    are running Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before installing any operating system, it is highly recommended that you back
    up your system state as well as all of your data.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing Partitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have Windows set up on your machine, it is most likely that your hard
    disk is completely utilized – that is, all of the available space is partitioned
    and formatted. We need to have some unallocated space on the hard disk. Hence,
    we will resize a partition with plenty of free space to make space for our Ubuntu
    partitions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Computer Management utility. Press `Win + R` and enter `compmgmt.msc`:![Figure
    0.1: The Computer Management utility on Windows'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B14870_0_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.1: The Computer Management utility on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the left side pane, go to the `Storage > Disk Management` option as shown
    here:![Figure 0.2: Disk Management'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B14870_0_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.2: Disk Management'
  prefs: []
  type: TYPE_NORMAL
- en: You will see a summary of all your partitions in the lower half of the screen.
    You can also see the drive letters associated with all of the partitions and information
    about the Windows boot drive. If you have a partition that has plenty of free
    space (20 GB +) and is neither the boot drive (`C:`), nor the recovery partition,
    nor the EFI system partition, this will be the ideal option to choose. If there's
    no such partition, then you can resize the `C:` drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will choose the `D:` drive. You can right-click on any
    partition and open `Properties` to check the free space available:![Figure 0.3:
    Checking the properties of the D: drive'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B14870_0_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.3: Checking the properties of the D: drive'
  prefs: []
  type: TYPE_NORMAL
- en: Now, before we resize the partition, we need to ensure that there are no errors
    on the filesystem or any hardware faults. We will do this by using the **chkdsk**
    utility on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Command Prompt by pressing `Win + R` and entering `cmd.exe`. Now, run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the drive letter with the one that you want to use. You should see
    a response similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 0.4: Scanning a drive for any filesystem errors'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B14870_0_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.4: Scanning a drive for any filesystem errors'
  prefs: []
  type: TYPE_NORMAL
- en: Note that in this screenshot, Windows reports that it has scanned the filesystem
    and found no problems. If any problems are encountered for your case, you should
    get them fixed first to prevent the loss of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, come back to the `Computer Management` window, right-click on the desired
    drive, and then click on `Shrink Volume`, as shown here:![Figure 0.5: Opening
    the Shrink Volume dialog box'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B14870_0_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.5: Opening the Shrink Volume dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the prompt window, enter the amount of space you want to clear in the only
    field that you can edit. In this example, we are clearing approximately 25 GB
    of disk space by shrinking our `D:` drive:![Figure 0.6: Clearing 25 GB by shrinking
    the existing volume'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B14870_0_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.6: Clearing 25 GB by shrinking the existing volume'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you shrink your drive, you should be able to see unallocated space on
    your drive, as seen here:![Figure 0.7: Unallocated space after shrinking the volume'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B14870_0_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.7: Unallocated space after shrinking the volume'
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to install Ubuntu. But first, we need to download it and create
    a bootable USB, which is one of the most convenient installation media.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Bootable USB Drive to Install Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will need a flash drive with a minimum capacity of 4 GB. Note that all
    the data on this will be erased:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the ISO image for Ubuntu Desktop from this link: [https://releases.ubuntu.com/20.04/](https://releases.ubuntu.com/20.04/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to burn the ISO image to a USB flash disk and create a bootable
    USB drive. There are many tools available for this, and you can use any of them.
    In this example, we are using Rufus, which is free and open source. You can get
    it from this link: [https://www.fosshub.com/Rufus.html](https://www.fosshub.com/Rufus.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have installed Rufus, plug in your USB flash disk and open Rufus. Ensure
    that the proper `Device` option is selected, as shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the `SELECT` button under `Boot selection` and then open the Ubuntu 18.04
    image that you have downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The choice for `Partition scheme` will depend on how your BIOS and your disk
    drive are configured. `GPT` will be the best option for most modern systems, while
    `MBR` will be compatible with older systems:![Figure 0.8: Configurations for Rufus'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B14870_0_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.8: Configurations for Rufus'
  prefs: []
  type: TYPE_NORMAL
- en: You may leave all other options on default, and then press `START`. After completion,
    close Rufus. You now have a bootable USB drive ready to install Ubuntu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we will use the bootable USB drive to install Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: To install Ubuntu, boot using the bootable installation media that we just created.
    In most cases, you should be able to do that by simply having the USB drive plugged
    in while starting up your machine. If you don't automatically boot into the Ubuntu
    setup, go into your BIOS settings and ensure that your USB device is at the highest
    boot priority and that Secure Boot is turned off. The instructions for entering
    the BIOS setup are usually displayed on the splash screen (the screen with your
    PC manufacturer logo when you start up your computer) that is displayed during
    POST checks. You may also have the option to enter a boot menu while starting
    up. Usually, you have to hold down `Delete`, `F1`, `F2`, `F12`, or some other
    key while your PC boots up. It depends on your motherboard's BIOS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a screen with a `Try Ubuntu` or `Install Ubuntu` option. If you
    don't see this screen, and instead you see a shell with a message that begins
    with `Minimal BASH Like Line Editing is Supported...`, then it is likely that
    there may have been some data corruption while downloading the ISO file or creating
    your bootable USB drive. Check the integrity of the downloaded ISO file by calculating
    the `MD5`, `SHA1`, or `SHA256` hash of your downloaded file and comparing it to
    the ones you can find in the files named `MD5SUMS`, `SHA1SUMS`, or `SHA256SUMS`
    on the Ubuntu download page mentioned earlier. Then, repeat the steps in the previous
    section to reformat and recreate the bootable USB drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have set the highest boot priority to the correct USB device in the
    BIOS and you are still unable to boot using your USB device (your system may just
    ignore it and boot into Windows instead), then there are two most likely issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '- The USB drive was not properly configured to be recognized as a bootable
    device or the GRUB bootloader was not properly set up. Verifying the integrity
    of your downloaded image and recreating the bootable USB drive should fix this
    in most cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '- You have chosen the wrong `Partition scheme` option for your system configuration.
    Try the other one and recreate the USB drive.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you boot your machine using the USB drive, select `Install Ubuntu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the language that you want and then press `Continue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, choose the appropriate keyboard layout and continue to the
    next screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select `Normal installation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `Download updates while installing Ubuntu` and `Install third-party
    software for graphics and Wi-Fi hardware and additional media formats` options.
  prefs: []
  type: TYPE_NORMAL
- en: Then, continue to the next screen.
  prefs: []
  type: TYPE_NORMAL
- en: On the next screen, select `Install Ubuntu alongside Windows Boot Manager`,
    and then click `Install now`. You will see a prompt describing the changes that
    Ubuntu will make to your system, such as the new partitions that will be created.
    Confirm the changes and proceed to the next screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, choose your region and press `Continue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, set your name (optional), username, computer name, and password,
    and then press `Continue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The installation should now begin. It will take a while depending on your system
    configurations. Once the installation is complete, you will be prompted to restart
    your computer. Unplug your USB drive, and then click `Restart Now`.
  prefs: []
  type: TYPE_NORMAL
- en: If you forget to remove your USB drive, you may boot back into the Ubuntu installation.
    In that case, just exit the setup. If a live instance of Ubuntu has been started
    up, restart your machine. Remember to remove the USB drive this time.
  prefs: []
  type: TYPE_NORMAL
- en: If, after restarting, you boot directly into Windows with no option to choose
    the operating system, the likely issue is that the GRUB bootloader installed by
    Ubuntu has not taken precedence over the Windows bootloader. In some systems,
    the precedence/priority for bootloaders on your hard disk is set in the BIOS.
    You will need to explore your BIOS settings menu to find the appropriate setting.
    It may be named something similar to `UEFI Hard Disk Drive Priorities`. Ensure
    that `GRUB`/`Ubuntu` is set to the highest priority.
  prefs: []
  type: TYPE_NORMAL
- en: Other Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Docker Hub account**: You can create a free Docker account at this link:
    [https://hub.docker.com/](https://hub.docker.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS account**: You will need your own AWS account and some basic knowledge
    about using AWS. You can create an account here: [https://aws.amazon.com/](https://aws.amazon.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The requirements of the exercises and activities in this book go beyond the
    AWS free tier, so you should be aware that you will incur bills for the use of
    the cloud service. You can use the pricing information available here: [https://aws.amazon.com/pricing/](https://aws.amazon.com/pricing/).'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Code Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find the complete code files of this book at [https://packt.live/3bE3zWY](https://packt.live/3bE3zWY).
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing Git, you can clone the repository using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If you have any issues or questions about installation, please email us at `workshops@packt.com`.
  prefs: []
  type: TYPE_NORMAL
