- en: Chapter 13. Synchronizing Data and Supporting Replication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover two features that were released in phpMyAdmin
    3.3.0\. The first feature is the ability to synchronize databases, and was asked
    for by developers who work on more than one server. The second feature permits
    the management of MySQL replication, which is used in environments where performance
    and data security are important. These features are somewhat related because we
    usually need to synchronize the database to a slave server when setting it up
    in a replication process.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronizing data and structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In earlier phpMyAdmin versions, it was possible to achieve some synchronization
    of the structure and data between two databases on the same server or on different
    servers, but this required manual operations. It was (and still is) possible to
    export structure and/or data from one database and import in another one. We can
    even visually compare the structure of two tables and adjust them according to
    our needs. However, comparing the two databases to ascertain what needs to be
    imported had to be done with the developer's own eyeballs. Moreover, differences
    in structure between the databases were not taken into account, possibly resulting
    in errors when a column was missing in the target table.
  prefs: []
  type: TYPE_NORMAL
- en: The **synchronize** feature of phpMyAdmin permits much flexibility, by taking
    care of the initial comparison process and, of course, by performing the synchronization
    itself. We will first discuss the reasons for synchronizing, and then examine
    and experiment with all the steps involved.
  prefs: []
  type: TYPE_NORMAL
- en: Goals of synchronization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the reasons for wanting to synchronize two databases may be many, we
    can group them into the following categories.
  prefs: []
  type: TYPE_NORMAL
- en: Moving between the development and production servers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A sound database development strategy includes performing development and testing
    on a server that is distinct from the production one. If having a separate development
    server is not an option, having at least a distinct development database is encouraged.
    Over time, differences in structure between test and production environments build
    up, and this is normal. For example, a column may be added in the test version,
    or character column may be enlarged. The synchronize feature permits us to first
    see the differences and then apply them to production if they make sense.
  prefs: []
  type: TYPE_NORMAL
- en: Moving data sometimes needs to be done the other way around, for example, to
    populate a test database with real production data in order to measure performance.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration between database designers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the easy manner in which a MySQL test server can be put in place, the
    situation might arise where each member of a development team has his own server
    (or his own copy of the database) in which he develops some aspect of a project.
    When the time comes to reconcile everyone's changes for the same table, the synchronize
    feature is invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for replication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MySQL supports asynchronous replication between a master server and one or
    many slave servers. This data replication is termed "asynchronous" because the
    connection between master and slaves does not need to be permanent. However, to
    put a replication process in action (and assuming that the master already contains
    some data), one needs to copy all the data over to the slaves. A suggestion to
    accomplish this copy is given in the MySQL manual that can found at [http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html](http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html),
    and is mentioned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '"If you already have data on your master and you want to use it to synchronize
    your slave, you will need to create a data snapshot. You can create a snapshot
    using `mysqldump` (...)"'
  prefs: []
  type: TYPE_NORMAL
- en: However, this requires using a command-line tool that is not always possible
    depending on the hosting options. Besides, some parts of the database may already
    exist on the slave; therefore, the synchronize feature comes in handy because
    it's integrated into phpMyAdmin, and also because it takes care of the comparison
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: Over viewing the synchronization process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The important principle is that synchronization is done from a source database
    to a target database. During this operation, the source database remains unchanged.
    It's up to us to correctly identify which database is the source and which one
    is the target (and will be possibly modified).
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole process is subdivided into steps which can be stopped at any stage:'
  prefs: []
  type: TYPE_NORMAL
- en: Server and database choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full or selective synchronization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We could elect to stop the process for one of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: We don't have the necessary credentials to connect to one of the servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We see discrepancies between two databases and are not ready to synchronize
    because further research needs to be done
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We notice after the comparison phase that the target database is adequately
    synchronized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before performing synchronization, we will put the necessary elements in place.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for the synchronization exercise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we will play with only the `author` and `book` tables, this exercise will
    assume that there are no other tables in the `marc_book` database. We start by
    copying the `marc_book` database to `marc_book_dev` (refer to [Chapter 9](ch09.html
    "Chapter 9. Performing Table and Database Operations") for the exact method for
    doing this).Then we open the `marc_book_dev` database and perform the following
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `book` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete one row of the `author` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the type of the `name` column from `VARCHAR(30)` to `VARCHAR(29)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the `phone` column from the `author` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Changing Data and Structure") covers how
    to perform the previous actions.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing source and target servers and databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The initial Synchronize page is displayed via the **Synchronize** menu tab in
    `Server` view. Please note that this is the only place where this menu is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first panel permits us to connect to servers (if needed) and to pick the
    correct database. If the `$cfg[''AllowArbitraryServer'']` parameter is set to
    its default value of `false`, the following panel appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing source and target servers and databases](img/7782_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that we can only use the servers already defined in `config.inc.php`.
    If arbitrary servers are allowed, we see a different panel, shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing source and target servers and databases](img/7782_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For both the source and target databases, we can select the server location.
    By default, the selector is placed on **Enter manually** and we can enter its
    hostname, port, socket name, username, password, and database name. In most cases,
    the port should be left to the default 3306 and the socket name should be left
    empty. Notice that we are currently connected to a MySQL server (via the normal
    login panel) and this panel could permit us to connect to two more servers.
  prefs: []
  type: TYPE_NORMAL
- en: Another choice for server location is **Current connection**. This refers to
    the server on which we are connected for normal phpMyAdmin operations; its name
    is displayed at the top of the main panel. Should we choose this, a JavaScript-enabled
    browser hides all choices except for the database name (connection credentials
    are unnecessary in this situation) and a selector becomes available, showing all
    of the databases to which we have access.
  prefs: []
  type: TYPE_NORMAL
- en: It's perfectly possible to pick the same server on both the source and target
    sides; however, we would at least choose a source database different to the target
    one in this case. Another common case is to pick the current server and some database
    as the source, and a remote server with the same database as the target, assuming
    that the remote server is the production one and that both servers hold a database
    with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, let us pick **Current connection** for both source and target
    servers; we can then choose `marc_book` as the source database and `marc_book_dev`
    as the target one, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing source and target servers and databases](img/7782_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After clicking on **Go**, phpMyAdmin attempts to connect to the servers if needed.
    At this point, a connection error message may be displayed. However, the connection
    should hopefully succeed and the program will start comparing both databases and
    then show us the results.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing comparison results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The comparison results panel contains three sections. The first section displays
    the structure and data differences, and contains icons that will be used to initiate
    a selective synchronization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing comparison results](img/7782_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As depicted in the upper part, the red **S** icon triggers structure synchronization,
    whereas the green **D** icon is for data synchronization. Then, for each table,
    we get a rundown of the differences. The central **Difference** column would be
    empty in the case of identical structure and data for the corresponding table.
    Here we see a red **S** and a green **D** for both tables, but the reason is not
    the same for each table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The middle part shows the actions that are scheduled as part of the synchronization
    process (there are currently none, as can be seen in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing comparison results](img/7782_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The lower part contains a checkbox **(Would you like to delete all the previous
    rows from target tables?)** and two action buttons. We will see their purpose
    in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing comparison results](img/7782_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please note that the book table has a plus sign (+) next to it on the **Source**
    side, to show that this table is in the source database but not in the target
    database. We even see a **not present** comment for this table on the **Target**
    side. If a table was in the target database but not in the source one, it would
    be marked with a minus sign (-) on the **Target** side.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we can decide that we are satisfied with the comparison and don't
    want to proceed further; in this case, we would just have to continue in phpMyAdmin
    by picking a database and resuming our work. We also have the opportunity of synchronizing
    the databases in one sweep **(complete synchronization)** or to make changes in
    a more granular way **(selective synchronization)**. Let us examine both methods.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a complete synchronization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we don't want to ask ourselves too many questions and just need a complete
    synchronization, we click on **Synchronize Databases**. Note that in this case,
    we don't have to use any red **S** or green **D** icons.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If one of the target tables contains some rows that are not present in the corresponding
    source table, these will remain in the target tables, unless we tick the **Would
    you like to delete..**. checkbox. This is a safety net to avoid unintended loss
    of data. However, we should select this option if we want an exact synchronization.
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking, we obtain the following message: **Target database has been
    synchronized with source database**. In the lower part of the screen, we see the
    queries that had to be executed in order to achieve this operation. We also get
    a visual confirmation that the databases are now synchronized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing a complete synchronization](img/7782_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Performing a selective synchronization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we prefer to be more cautious and receive a preliminary feedback on the actions
    that are about to be done, we can synchronize selected tables. This section assumes
    that the databases are in the same state as at the end of the *Preparing for the
    synchronization exercise* section, covered previously in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the red **S** icon on the line describing the `author` table,
    this **S** icon turns to grey and the middle part of the screen is updated with
    the actions to be done, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing a selective synchronization](img/7782_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: No real action on the data has been done yet! We still can change our mind by
    clicking on the same icon which would turn back to red, removing the proposed
    changes as depicted in the middle part of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we click on the green **D** icon and see another line of proposed changes
    show up, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing a selective synchronization](img/7782_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A row in the `author` table needs to be inserted because there is one less author
    in the target database. Altogether four rows need to be updated, because we removed
    the `phone` column in the same table.
  prefs: []
  type: TYPE_NORMAL
- en: We can now click on **Apply Selected Changes** button. The **Would you like
    to delete..**. checkbox does not apply to this operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now see that the upper part of the screen proposes fewer changes to make:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing a selective synchronization](img/7782_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can go on by selecting structure or data changes and then applying them in
    the order we deem appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the section describing the synchronization feature. We continue
    with coverage of replication support.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting MySQL replication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the *Preparing for replication* section, we saw an overview of MySQL replication.
    In this section, we cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How we can use phpMyAdmin to configure replication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to prepare a test environment containing one master server and two slave
    servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to send commands to control the servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to obtain information on replication for servers, databases, and tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: phpMyAdmin's interface offers a **Replication** page; however, other pages contain
    either information about replication or links to control replication actions.
    We will point to each appropriate location when covering the related subject.
  prefs: []
  type: TYPE_NORMAL
- en: How to use this section depends on how many servers we have at our disposal.
    If we have at least two servers and want to configure them via phpMyAdmin in a
    master/slave relationship, we can follow the *Configuring replication* section.
    If instead we only have one server to play with, then we should take advice from
    the *Setting up a test environment* section to install many instances of the MySQL
    server on the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: The Replication menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `Server` view, the **Replication** menu is only shown to privileged users,
    such as the MySQL root user. When a server is already configured as a master server
    or a slave server (or both), the **Replication** page is used to display status
    information and provide links that send commands.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring replication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this exercise, we assume that the server does not currently occupy the role
    of master or slave server. phpMyAdmin cannot directly configure all aspects of
    MySQL replication. The reason is that, contrary to manipulating database structure
    and data by sending queries to the MySQL server, replication configuration consists
    (in part) of command lines stored in a MySQL configuration file, often named `my.cnf`.
    phpMyAdmin, being a web application, does not have access to this file. This is
    how the MySQL server's developers intended the configuration to be—at a configuration
    file level.
  prefs: []
  type: TYPE_NORMAL
- en: The best that phpMyAdmin can do in this situation is to guide us by generating
    (on screen) the proper command lines in reaction to our preferences, then it's
    up to us to copy these lines where they need to go and to restart the server(s).
    phpMyAdmin cannot even read the current replication configuration lines; it can
    only deduce server status via some `SHOW` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us enter the **Replication** menu and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring replication](img/7782_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Master server configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we choose to configure the server as a master by clicking on the appropriate
    **configure** link. The panel that appears gives us a thorough advice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Master server configuration](img/7782_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first paragraph confirms that this server is not configured as a master
    in a replication process. We want to achieve this configuration, but first we
    need to think about the kind of replication we want. Should all databases be replicated,
    except for some of them? Or do we want the opposite? A convenient drop-down list
    offers us these choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Replicate all databases; Ignore:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore all databases; Replicate:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first choice (which is the default) implies that, in general, all databases
    are replicated; we don''t even have to enumerate them in the configuration file.
    In this case, the databases selector is used to specify which database we want
    to exclude from the replication process. Let us pick up the **mysql** database
    and see what happens in our JavaScript-enabled browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Master server configuration](img/7782_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We notice that a line appeared, stating `binlog_ignore_db=mysql`. This is a
    MySQL server instruction (not a SQL statement) that tells the server to ignore
    sending transactions about this database to the binary log. Let us examine the
    meaning of the other lines. The `server-id` is a unique ID generated by phpMyAdmin;
    each server that participates in replication must have a unique server ID. Therefore,
    we either track the server IDs by hand, ensuring their uniqueness, or we simply
    use the number randomly generated by phpMyAdmin. We also see the `log-bin` and
    `log-error` instructions; in fact, binary logging is mandatory in order for any
    replication to occur.
  prefs: []
  type: TYPE_NORMAL
- en: We could add other database names to the list by using *Ctrl* + Click or *Command*
    + Click, depending on our workstation's OS. However, all that phpMyAdmin does
    is to generate correct lines; to make them operational, we still need to follow
    the given advice and paste these lines at the end of the `[mysqld]` section of
    our MySQL configuration file. We should then restart the MySQL server process—the
    way to do this depends on our environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'After our server has been restarted, we go back to the **Replication** menu;
    at this point, we see a different panel regarding the master:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Master server configuration](img/7782_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can use the **Show master status** link to get some information about the
    master, including the current binary log name and position, and information on
    which databases to replicate or to ignore, as specified previously.
  prefs: []
  type: TYPE_NORMAL
- en: The **Show connected slaves** link would report nothing currently, as no slave
    is yet connected to this master.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now would be the time to use the **Add slave replication user** link, because
    this master needs to have a separate account dedicated to replication. The slaves
    will use this account created on the master to connect to it. Clicking on this
    link displays the following panel, in which a user account, **replic**, is being
    created with a password of our choosing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Master server configuration](img/7782_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After clicking on **Go**, phpMyAdmin takes care of creating this user with the
    correct permissions set.
  prefs: []
  type: TYPE_NORMAL
- en: Slave server configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, on the machine that will act as a slave server in the replication process,
    we start phpMyAdmin. In the **Replication** menu, we click on **configure** in
    the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Slave server configuration](img/7782_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The slave server configuration panel appears, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Slave server configuration](img/7782_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As with the master configuration, we get a suggestion about having a unique
    server ID in the configuration file for the slave, and we should follow this advice.
  prefs: []
  type: TYPE_NORMAL
- en: In this panel, we enter the username and password of the dedicated replication
    account we created on the master. We also have to indicate the hostname and port
    number corresponding to the master server. After filling this panel and clicking
    on **Go**, phpMyAdmin sends the appropriate `CHANGE MASTER` command to the slave,
    which puts this server in slave mode.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a test environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The replication process occurs between at least two instances of the MySQL
    server. In production, this normally implies a minimum of two physical servers
    to procure these benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Better performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased redundancy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, due to MySQL's configurable port number (the default being 3306), data
    directory, and socket, it's possible to have more than one MySQL instance on the
    same server. This setup can be configured manually, or via an installation system
    such as the MySQL Sandbox. This is an open source project located at [http://mysqlsandbox.net](http://mysqlsandbox.net).
    With this tool, we can set up one or many MySQL servers very quickly. By using
    the powerful `make_replication_sandbox` Linux shell command, we can install an
    environment that consists of one master server and two slave servers. Each server
    can be started or stopped individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following exercises assume that the MySQL Sandbox has been installed on
    your server and that phpMyAdmin''s `config.inc.php` contains a reference to these
    Sandbox servers, as shown in the following code block (please adjust the socket
    names to your own environment):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we use the `$cfg[''Servers''][$i][''verbose'']` directive to give a unique
    name to each instance, as the real server name is `localhost` for all of these
    instances. Each Sandbox server initially contains two databases: `mysql` and `test`.'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling a slave server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will assume that the Sandbox testing environment has been set. However,
    the explanations are useful for all situations in which we have a slave server.
    After connecting to a slave and once again opening the **Replication** menu, we
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling a slave server](img/7782_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following options are available:'
  prefs: []
  type: TYPE_NORMAL
- en: The **See slave status table** link permits us to receive information about
    all the system variables related to replication for this slave server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Control slave:** link reveals more options; some of them can toggle between
    the stop and start condition:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Full stop** option is used to stop both the IO thread (the part of the
    MySQL server responsible for receiving updates from the master and writing them
    to the slave's relay log) and the SQL thread (which reads the updates from the
    relay log and executes them)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Reset slave** option stops the slave, sends a `RESET SLAVE` command that
    causes it to forget its replication position in the master's binary log, and then
    restarts the slave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **SQL Thread Stop only** option and **IO Thread Stop only** option are used
    to stop just the respective thread
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Error management:** link permits to tell the slave server to skip some
    of the events (updates) sent from the master. For more details, please refer to
    [http://dev.mysql.com/doc/refman/5.1/en/set-global-sql-slave-skip-counter.html](http://dev.mysql.com/doc/refman/5.1/en/set-global-sql-slave-skip-counter.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Change or reconfigure master server** link could be used to specify that
    this slave server should now receive updates from a different master.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining replication information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the **Replication** menu, other screens in phpMyAdmin inform us about
    replication-related items. These screens are not found with the other replication
    dialogs; rather they are scattered on various pages, where they display replication
    information in the context of the respective pages.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering replication status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By entering the **Status** panel in `Server` view, we first get a brief message,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '"This MySQL server works as master in replication process. For further information
    about replication status on the server, please visit the replication section."'
  prefs: []
  type: TYPE_NORMAL
- en: There are a few **Replication** links on this page that show us the status variables
    of either the master or slave servers, and some links to get information about
    how many slave hosts are connected and the status of replication in general.
  prefs: []
  type: TYPE_NORMAL
- en: Replicated databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the master server, having a look at the **Databases** menu in `Server` view
    shows us that some databases can potentially be replicated, with a green checkmark
    in the **Master replication** column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Replicated databases](img/7782_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is because this server is configured with a binary log and these databases
    are not excluded from replication.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have the following line of code in the `[mysqld]` section within the
    master''s configuration file, we can exclude from the binary log all transactions
    that affect the `mysql` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, the output of the **Databases** page shows a red icon next to the
    `mysql` database.
  prefs: []
  type: TYPE_NORMAL
- en: If this is a slave server, a **Server replication** column is shown.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that a slave server can itself have a binary log; therefore, in this case,
    both **Master replication** and **Slave replication** columns are shown. This
    means that this slave could in turn be a master server for another slave server.
  prefs: []
  type: TYPE_NORMAL
- en: Replicated tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us suppose that on the master server, we create a table named `employee`
    in the `test` database. At this point, replication does its magic and we can have
    a look at the `test` database on a slave server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Replicated tables](img/7782_13_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, the **Replication** column is shown as a reminder. We should not modify
    this table on the slave server directly, because its existence is for replication
    purpose only. If we decide to alter it directly, our changes will be done only
    in this table, introducing inconsistencies between the master and this slave,
    which is not a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learnt how to synchronize both the structure and data from
    one database to another, on the same server or on different servers. We covered
    the goals of synchronization and how to perform a complete or selective synchronization.
    We then examined how to use phpMyAdmin to guide us into replication setup, including
    a master and a slave server; how to prepare a test environment using the MySQL
    Sandbox, and how to control the slave servers.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will show you how to keep permanent bookmarks of your queries.
  prefs: []
  type: TYPE_NORMAL
