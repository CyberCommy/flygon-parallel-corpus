- en: Chapter 10. Wireless Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypassing MAC address filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WEP encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WPA/WPA2 encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial-of-service attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wireless networks are on the rise in the current age. The need for instant
    network access on-the-go or the ability to be on the Internet at any point in
    time at any location is increasing. Employees and guests all enter the corporate
    network with the need to access the Internet to either give presentations or pitch
    their product; even employee mobile devices might need wireless access following
    BYOD policies. However, one should know that wireless protocols with respect to
    security do have quite a few issues. The only way to guess the correctness of
    a device is via the Mac ID, which can be exploited. In this chapter, we are going
    to explore the different vulnerabilities observed in wireless networks. Before
    we jump in, let us understand a few terminologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wi-Fi interface modes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Master**: Access point or base station'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed**: Infrastructure mode (client)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ad-Hoc**: Device to device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mesh:** (Mesh cloud/network)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repeater**: Range extender'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor:** RFMON='
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wi-Fi frames**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management frames**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Beacon frame**: The access point periodically sends a beacon frame to announce
    its presence and relay information, such as a timestamp, SSID, and other parameters
    regarding the access point to radio NICs that are within range. Radio NICs continually
    scan all 802.11 radio channels and listen to beacons as the basis for choosing
    which access point is best to associate with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probe**: Two types: Probe request and Probe response:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probe request frame**: A station sends a probe request frame when it needs
    to obtain information from another station. For example, a radio NIC would send
    a probe request to determine which access points are within range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probe response frame**: A station will respond with a probe response frame,
    containing capability information, supported data rates, and so on after it receives
    a probe request frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a wireless network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most crucial part of wireless testing is to ensure the correctness of the
    tester''s wireless setup. Extensive configurations are required for a proper testing
    environment, plus the user should have a decent knowledge of wireless communication
    protocols. One of the core components on which the entire testing is based is
    the wireless adaptor. The wrong wireless adaptor can foil the entire testing activity.
    The dependency is on software, and a major role is played by the aircrack-ng suite
    designed for wireless testing. The compatibility list for wireless adaptors can
    be found at [https://www.aircrack-ng.org/doku.php?id=compatibility_drivers](https://www.aircrack-ng.org/doku.php?id=compatibility_drivers)
    . For our demo purposes we will be using the ALFA card model name **ALFA AWUS0360H**
    **;** it supports the **b** and **g** protocols. Some wireless adapters supported
    by Kali are:'
  prefs: []
  type: TYPE_NORMAL
- en: Atheros AR9271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ralink RT3070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ralink RT3572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realtek 8187L (Wireless G adapters)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While choosing a Wi-Fi card, the following can be kept in mind for better selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '802.11a-5 GHZ rate: Up to 54 Mbps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '802.11b-2.4 GHZ rate: Up to 11 Mbps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '802.11g-2.4 GHZ rate: Up to 54 Mbps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '802.11n-2.4 GHZ rate: Up to 300 Mbps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '802.11ac(draft)-5 GHZ rate: Up to 1.73Gps!!!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be performing wireless testing via a Kali machine hosted on a virtual
    machine. To set up the wireless network we will need a Kali OS, wireless adaptor,
    and a target wireless connection. Once these are available we can begin our pen
    test phase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up the card on to a virtual machine, we will have to ensure that the
    option **Automatically connect new USB devices** is turned on in the edit virtual
    machine settings of VMplayer, as shown in the following screenshot:![How to do
    it...](img/image_10_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the device has been detected, check it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check if we can enable the monitor mode. **Monitor** mode allows a computer
    with a **Wireless Network Interface Controller** (**WNIC**) to monitor all traffic
    received from the wireless network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we see some potentially troublesome services are running; we will have to
    disable them. We can do so by killing the process using the `kill` command and
    the process ID (`PID`) mentioned in the preceding screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can begin to check if **Monitor** mode can be turned on:![How to do it...](img/image_10_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We were able to set up our adaptor and turn on Monitor mode. We can now begin
    the exercises.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bypassing MAC address filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A MAC address is the unique identity of the user who tries to authenticate over
    a wireless network. Often as a best practice users prefer to Mac-filter their
    networks to protect themselves from attackers; however it is very easy to change
    a Mac address and attack the network. In this recipe, we are going to see how
    one can change the Mac address of a wireless card.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A wireless card and a Kali machine are required to perform this exercise. In
    this recipe, we will scan the available network and the devices connected to it,
    after which we will change the Mac ID of the wireless card to that of the host
    connected to the network.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin, ensure that you stop **Monitor** mode, enabled in the previous
    recipe, by issuing the stop monitor command on its interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us check our MAC address for our device, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will disable the network interface using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We now select one of the Network device and use `macchanger` to change our
    Mac address. We will change it to a legitimate authenticated user''s Mac, which
    can be found by running the `airodump-ng` command explained in the next recipe
    to see which Mac ID is connected to our target router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the absence of Mac filtering, if the user decides to maintain anonymity,
    a random Mac address can be obtained from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can enable the wireless device using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the basic step before any pen testing activity begins, now we will look
    into cracking the wireless protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing network traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to understand the basics of using a wireless adaptor
    to sniff wireless data packets; to do so we will have to change the wireless card
    to **Monitor** mode. For sniffing we will be using the `airodump-ng` command from
    the `aircrack-ng` suite.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the Alfa card for this exercise; ensure that the wireless adaptor
    is connected as in the earlier recipe and we can start sniffing traffic.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the wireless device is not turned on, turn it on using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Put the card into monitor mode using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have a monitor interface on we will issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can capture a particular ESSID as well; all we have to do is mention a specific
    channel and write to a file; in this case we are writing into a file called sniff:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_011.jpg)![How to do it...](img/image_10_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These packets can then be viewed in the browser, Wireshark, or Excel based on
    the extension. Wireshark is used to open the CAP file, as shown in the following
    screenshot:![How to do it...](img/image_10_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we are done capturing the packets, we can terminate it using the keyboard
    combination *Ctrl* + *C* and the files are saved with the CAP extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `airodump-ng` command is a part of the `aircrack-ng` suite and it performs
    the task of dumping all sniffed packets on the network; these are saved with the
    `.cap` extension and can be opened in Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we've covered the basics of sniffing wireless packets. Beyond this we
    can start to understand how wireless encryptions are cracked.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WEP encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn about WEP encryption cracking. **Wired
    Equivalent Privacy** (**WEP**) is a security protocol, specified in the IEEE **Wireless
    Fidelity** (**Wi-Fi**) standard, 802.11b, and designed to provide a **Wireless
    Local Area Network** (**WLAN**) with a level of security and privacy comparable
    to what is usually expected of a wired LAN. WEP works on RC4 encryption and has
    been widely used on the Internet as a part of HTTPS. The flaw here is not RC4
    but the way RC4 had been implemented. The problem was the reuse of IVs. For this
    exercise, we will be using a tool called **Wifite**. This tool is used to attack
    multiple WEP-, WPA-, and WPS-encrypted networks in a row. This tool is customizable
    and can be automated with only a few arguments. Wifite aims to be the "set it
    and forget it" wireless auditing tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this activity, we will require wifite (preinstalled in Kali), an active
    and running wireless adaptor, and a wireless router running WEP encryption.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To ensure that the wifite framework is updated, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all the available wireless networks, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_014.jpg)![How to do it...](img/image_10_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this, one can have a look of all the wireless devices available in the
    vicinity. Use *Ctrl* + *C* to break out of the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following command to start Wifite again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the command has listed all the detected wireless networks with
    their ESSID, BSSID, and more. Keep in mind the number corresponding to the target
    ID. Now we should break out of the listing mode and enter the following keyboard
    combination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we hit the *Ctrl* + *C* combination, it prompts us to provide the target
    number. Once this is done wifite will automatically start working on WEP cracking
    and give you the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the background, what the framework does initially is put the wireless adaptor
    into monitor mode using the `airmon-ng` command, a part of the `aircrack-ng` suite,
    and start the enumeration list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wifite -upgrade`: This command upgrades the wifite framework to the latest
    version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wifite -showb`: This command lists all the available wireless networks detected
    over the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The details of how WEP cracking works are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: WEP prepares a keyschedule (seed); this is a concatenation of the user's shared
    secret key with a random-generated 24-bit initialization vector (IV). The IV increases
    the life of the secret key because the station can change the IV for each frame
    transmission. WEP then sends that output as a resulting "seed" to a pseudo-random
    number generator that produces a keystream. The length of this keystream is equal
    to the length of the frame's payload plus a 32-bit (**Integrity Check Value**
    (**ICV**)).
  prefs: []
  type: TYPE_NORMAL
- en: The reason WEP failed is because the IVs were short and in clear text; the 24-bit
    field keystream generated by RC4 is relatively small. As the IV's are static and
    the stream of IV is short ,hence they are reused. There has been no standard as
    to how the IV has to be set or changed; there are possible scenarios where wireless
    adapters from the same vendors end up having the same IV sequences.
  prefs: []
  type: TYPE_NORMAL
- en: An attacker can keep sniffing data and collect all the IVs available and then
    successfully crack the password. For more information, visit [http://www.isaac.cs.berkeley.edu/isaac/wep-faq.html](http://www.isaac.cs.berkeley.edu/isaac/wep-faq.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the `all` feature when wifite prompts us to select a network; however,
    you should keep in mind your country's IT and cyber laws to avoid doing anything
    illegal.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WPA/WPA2 encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to see how attackers break WPA2 encryption. WPA
    Wi-Fi protected access is the successor to WEP encryption after it was realized
    that WEP encryption failed. In WPA2-PSK we force the victim into multiple authentication
    handshakes with the wireless router and capture all the traffic as the handshakes
    contain the pre-shared key. Once we gain a substantial amount of handshakes, we
    try dictionary-based password guessing against the captured packets to see if
    we can successfully guess the password. In this recipe, we are going to see how
    WPA/WPA2 can be cracked.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this we are going to rely exclusively on the `aircrack-ng` suite; since
    it is pre-built in Kali we don't need to configure much. One other thing we require
    is a wireless router with WPA/WPA2 encryption. Let us begin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we will switch our wireless device to monitor mode using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can list all available wireless networks using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have a list of available wireless networks and our network BSSIDs
    and ESSID available, we can start capturing the packets dedicated to that channel
    only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will have to de-authenticate an existing client to capture their handshake
    request to the wireless router as it will contain the authentication creds. Only
    during deauth will we be able to successfully capture the encrypted password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now the authenticated user will be forced to re-authenticate almost 1,000 times,
    after which, if we look at our `airodump-ng` in the top-right corner, we will
    find the WPA handshake, which means we have been successful in capturing the traffic.
    We can now terminate the dump by pressing *Ctrl* + *C*. The more authentication
    packets, the better our chances of cracking the passkey.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now commence with the WPA cracking on the dumped file. We need to note
    that the file name gets saved in multiple extensions and gets appended by `-01`
    based on iteration numbers; `rockyou.txt` is a dictionary of words containing
    popular passwords and alphanumeric combinations that will be used against the
    capture file to guess the password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully managed to decrypt the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand the commands of the preceding recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`airmon-ng start wlan0`: This starts the wireless adaptor and sets it to monitor
    mode; monitor mode is essential for injecting and sniffing packets over the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`airodump-ng wlan0mon`: This command lists the wireless networks available
    whose packets we can capture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the explanation for the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--bssid`: This is the MAC address of the router, which is the station that
    supplies the wireless network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the explanation for the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--deauth`: This command sends a `RESET` packet to authenticated clients so
    that when they try to re-authenticate; the handshakes are captured for us to crack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Aireplay-ng`, `airodump-ng`, and `airmon-ng` commands are all a part of
    aircrack.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method is basically regarded as brute force, which is the only way right
    now through which cracking WPA is possible. The routers that support WPS can also
    be cracked. In the next recipe, we will look at how WPS can be cracked.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**WPS** stands for **Wi-Fi Protected Setup**. This was introduced in 2006 and
    the main purpose of WPS was to ease the process of adding new devices to the network;
    there was no need to remember long WPA or WEP passphrases. However, the security
    of WPS was short-lived; in 2011 a major security flaw was revealed that affected
    wireless routers that supported WPS.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we are going to use a tool called **Reaver**. It is an open
    source WPS cracking tool preinstalled in Kali Linux. Reaver performs a brute force
    attack on the WPS pin number. Once we get the WPS PIN, the WPA PSK is recovered.
    For this exercise we will require a wireless router that has the WPS feature enabled.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To scan for WPS enabled routers there is a package that comes with Reaver called
    `wash`; enter the following command to list the WPS-enabled device. Note that
    monitor mode is required to see the Beacon packets, understand whether the AP
    supports WPS, and tell whether WPS access is locked. This helps us in understand
    if the attack is possible or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If case a user is getting an error like the one below, enter the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We use the `-C` command to ignore **FCS** (**Frame Check Sequence**) errors.
    Once we get the AP''s BSSID we will use the `reaver` command to attempt a WPS
    attack using the Pixie Dust method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The network name is mentioned if the wireless device contains spaces. The Reaver
    starts the Pixie Dust attack to bruteforce the PINs and the approximate time is
    5 to 10 minutes. **PixieWPS** is a tool used for the offline brute forcing of
    WPS pins, while exploiting the low or non-existing entropy of some wireless access
    points. If we run a non-Pixie Dust attack, the time may escalate to 5 or 6 hours:![How
    to do it...](img/image_10_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s dive through the commands and what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wash -i wlan0mon`: This command scans for all the devices with WPS enabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wash -i wlan0mon -C`: The `-C` command ignores FCS packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reaver -i wlan0mon -c X -b xx:xx:xx:xx:xx:xx -K x -vv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`: This specifies interaction with the specified interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-b`: This specifies using the BSSID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-K (x)`: `X` is the numeric type, `K` is the parameter to set Pixie Dust'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: The specifies the channel on which the network is running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-vv`: This shows us more non-critical information about the process to gain
    a better understanding of what the script is doing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PixieWPS is a tool used for offline brute-forcing of WPS pins, while exploiting
    the low or non-existing entropy of some wireless access points, and is also known
    as the Pixie Dust attack; it was discovered by Dominique Bongard. The PixieWPS
    tool (developed by wiire), was born out of Kali forums.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we are going to see how denial-of-service attacks take place
    on networks.
  prefs: []
  type: TYPE_NORMAL
- en: Denial-of-service attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most dominant attacks is a denial-of-service attack, where the entire
    wireless network can be disrupted; in this attack legitimate users will not get
    access to the network. Wireless networks are easily prone to such attacks. Since
    the identification of a user is based on the Mac address it becomes very difficult
    to track the source of this activity. There are a few ways in which this happens
    such as by spoofing a fake source address, or requesting configuration changes
    by replicating the router. A few devices also respond to DoS attacks by completely
    shutting down the network. One resort is to spam or flood the wireless network
    with junk packets or keep sending Deauth packets to all the users on the network.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to see how DoS attacks take place.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need a user who is actively browsing the Internet or network and on
    the other end we will have our Kali Linux machine and the wireless adaptor connected
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the simplest ways to execute a DoS attack is the Deauth attack; here
    we will use `aireplay` to perform a Deauth attack over a network via the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also there are a few payloads available in Websploit; one is called Wi-Fi jammer.
    Use the following command in the Kali terminal to execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And the connection with the `bssid` is rendered inaccessible:![How to do it...](img/image_10_028.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand the commands that have been used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`aireplay-ng --deauth 100 -a (BSSID) -c wlan0mon`: Here, the `--deauth` command
    launches a `deauth` request followed by `100`, which specifies that the `deauth`
    request is sent 100 times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the attacker wants to keep sending the Deauth continuously and never stop,
    one can use the  `--deauth 0` to send never-ending `deauth` requests to the target.
  prefs: []
  type: TYPE_NORMAL
- en: '`websploit`: This initializes the Websploit framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use wifi`/`wifi_jammer`: This command will load the jammer module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set bssid xx:xx:xx:xx:xx:xx`: Where `xx:xx:xx:xx:xx:xx` will be the `bssid`;
    the same applies to `essid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set interface wlanx`: Where `wlanx` will be the interface our adapter is connected
    on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run`: This executes the script and launches the attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wireless attacks are very difficult to spot; the best one can do is to have
    preventive and hardening measures in place. SANS has developed a very good checklist
    that discusses the hardening of wireless networks. This can be found at [https://www.sans.org/score/checklists/wireless](https://www.sans.org/score/checklists/wireless)
    .
  prefs: []
  type: TYPE_NORMAL
- en: There are others tools that provide the above functionalities for wireless attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, here is a an explanation for readers having trouble understanding BSSID,
    ESSID, and monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BSSID**: This is the Mac address of the access point; BSSID stands for Base
    Service Station ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESSID**: This is the name of the WLAN network, the readable name that the
    user sees when they connect to the WLAN network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor mode**: This allows a wireless network interface to monitor all the
    traffic over the wireless network, be it from client to AP, AP to client, or AP
    to client broadcasts. Monitor mode is used for packet analysis, which the majority
    of the tools mentioned above make use of.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AP** stands for the access point. It is also regarded as the wireless device
    that is used to connect the clients; a wireless router is an access point. An
    attacker can create a fake access point and can manipulate users to connect to
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Beacon frame** is a management frame in wireless standard; it contains information
    about the network, and they are periodically transmitted to announce the presence
    of a WLAN network.'
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of the wireless testing chapter.
  prefs: []
  type: TYPE_NORMAL
