- en: Chapter 5. Debugging and Profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During development, every developer faces problems, and it becomes unclear what
    is really going on here and why the problem is generated. Most the time, these
    issues can be logical or with the data. It is always hard to find such issues.
    Debugging is a process to find such issues and problems and fix them. Similarly,
    we often need to know how many resources a script consumes, including memory consumption,
    CPU, and how much time it takes to execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Xdebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with Sublime Text 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling with Xdebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP DebugBar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xdebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xdebug is an extension for PHP that provides both debugging and profiling information
    for PHP scripts. Xdebug displays a full-stake trace information for errors, including
    function names, line numbers, and filenames. Also, it provides the ability to
    debug scripts interactively using different IDEs, such as Sublime Text, Eclipse,
    PHP Storm, and Zend Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether Xdebug is installed and enabled on our PHP installation, we
    need to check the phpinfo() details. On the phpinfo details page, search for Xdebug,
    and you should see details similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Xdebug](graphics/B05225_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This means that our PHP installation has Xdebug installed. Now, we need to configure
    Xdebug. Either the Xdebug configuration will be in the `php.ini` file, or it will
    have its separate `.ini` file. At our installation, we will have a separate `20-xdebug.ini`
    file placed at the `/etc/php/7.0/fpm/conf.d/` path.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the purpose of this book, we will use the Homestead Vagrant box from Laravel.
    It provides complete tools on the Ubuntu 14.04 LTS installation, including PHP7
    with Xdebug, NGINX, and MySQL. For the purpose of development, this Vagrant box
    is a perfect solution. More information can be found at [https://laravel.com/docs/5.1/homestead](https://laravel.com/docs/5.1/homestead).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `20-xdebug.ini` file and place the following configuration in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding are the minimum configurations we should use that enable remote
    debugging and set an IDE key. Now, restart PHP by issuing the following command
    in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready to debug some code.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Sublime Text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Sublime Text editor has a plugin that can be used to debug PHP code with
    Xdebug. First, let's install the `xdebug` package for Sublime Text.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this topic, we will use Sublime Text 3, which is still in beta. It is your
    own choice to use version 2 or 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to **Tools** | **Command Pallet**. A popup similar to the following
    will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Sublime Text](graphics/B05225_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **Package Control: Install Package**, and a popup similar to the following
    screenshot will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Sublime Text](graphics/B05225_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Type in `xdebug`, and the **Xdebug Client** package will be displayed. Click
    on it and wait for a while until it is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a project in Sublime Text and save it. Open the Sublime Text project
    file and insert the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code is important, and it has to be entered for Xdebug. Path
    mapping is the most important part. It should have a full path to the root of
    the application on the remote host and a full path to the root of the application
    on the localhost.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s start debugging. Create a file at the project''s root, name it
    `index.php`, and place the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, right-click on a line in the editor and select **Xdebug**. Then, click
    on **Add/Remove Breakpoint**. Let''s add a few breakpoints as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Sublime Text](graphics/B05225_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a breakpoint is added to a line, a filled circle will be displayed on the
    left-hand side near the line number, as can be seen in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are ready to debug our PHP code. Navigate to **Tools** | **Xdebug**
    | **Start Debugging (Launch in Browser)**. A browser window will open the application
    along with a Sublime Text debug session parameter. The browser windows will be
    in the loading state because as soon as the first breakpoint is reached, the execution
    stops. The browser window will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Sublime Text](graphics/B05225_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some new small windows will also open in the Sublime Text editor that will
    display debugging information along with all the variables available, as in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Sublime Text](graphics/B05225_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, our `$a`, `$b`, and `$c` arrays are uninitialized
    because the execution cursor is at Line 22, and it has stopped there. Also, all
    server variables, cookies, environment variables, request data, and POST and GET
    data can be seen here. This way, we can debug all kind of variables, arrays, and
    objects and check what data each variable, object, or array holds at a certain
    point. This gives us the possibility to find out the errors that are very hard
    to detect without debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s move the execution cursor ahead. Right-click in the editor code
    section and go to **Xdebug** | **Step Into**. The cursor will move ahead, and
    the variables data may change according to the next line. This can be noted in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Sublime Text](graphics/B05225_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Debugging can be stopped by clicking on **Tools** | **Xdebug** | **Stop Debugging**.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eclipse is the most free and powerful IDE widely used. It supports almost all
    major programming languages, including PHP. We will discuss how to configure Eclipse
    to use Xdebug to debug.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open the project in Eclipse. Then, click on the down arrow to the right
    of the small bug icon in the tool bar, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](graphics/B05225_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, click on the **Debug Configuration** menu, and the following windows
    will open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](graphics/B05225_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **PHP Web Application** on left panel and then click on the **Add New**
    icon in the top-left corner. This will add a new configuration, as shown in the
    preceding screenshot. Give the configuration a name. Now, we need to add a PHP
    server to our configuration. Click on the **New** button on the right-hand side
    panel, and the following window will open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](graphics/B05225_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will enter the server name as `PHP Server`. The server name can be anything
    as long as it is user-friendly and can be recognized for later use. In the **Base
    URL** field, enter the complete URL of the application. **Document Root** should
    be the local path of the root of the application. After entering all the valid
    data, click on the **Next** button, and we will see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](graphics/B05225_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select **XDebug** in the **Debugger** drop-down list and leave rest of the
    fields as they are. Click on the **Next** button, and we will have the path mapping
    window. It is very important to map the correct local path to the correct remote
    path. Click on the **Add** button, and we will have the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](graphics/B05225_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter the full path to the document root of the application on the remote server.
    Then, select **Path in File System** and enter the local path of the application's
    document root. Click on **OK** and then click on the **Finish** button in the
    path mapping window. Then, click on **Finish** in the next window to complete
    adding a PHP server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, our configuration is ready. First, we will add some breakpoints to our
    PHP file by clicking on the line number bar and a small blue dot will appear there,
    as shown in the following screenshot. Now, click on the small bug icon on the
    tool bar, select **Debug As**, and then click on **PHP Web Application**. The
    debug process will start, and a window will be opened in the browser. It will
    be in the loading state, same as we saw in Sublime Text debugging. Also, the Debug
    perspective will be opened in Eclipse, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging with Eclipse](graphics/B05225_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we click on the small (**X**)= icon in the right-hand side bar, we will
    see all the variables there. Also, it is possible to edit any variable data, even
    the element values of any array, object properties, and cookie data. The modified
    data will be retained for the current debug session.
  prefs: []
  type: TYPE_NORMAL
- en: To step into the next line, we will just press *F5*, and the execution cursor
    will be moved to the next line. To step out to the next breakpoint, we will press
    *F6*.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling with Xdebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Profiling gives us information about the cost of each script or task executed
    in an application. It helps to provide information about how much time a task
    takes, and hence we can optimize our code to consume less time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xdebug has a profiler that is disabled by default. To enable the profiler,
    open the configuration file and place the following two lines in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first line enables the profiler. The second line, where we defined the output
    directory for the profiler file, is important. In this directory, Xdebug will
    store the output file when the profiler is executed. The output file is stored
    with a name, such as `cachegrind.out.id`. This file contains all the profile data
    in a simple text format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are set to profile a simple installation of the Laravel application
    home page. The installation is a fresh and clean one. Now, let''s open the application
    in a browser and append `?XDEBUG_PROFILE=on` at the end, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://application_url.com?XDEBUG_PROFILE=on`'
  prefs: []
  type: TYPE_NORMAL
- en: After this page is loaded, a `cachegrind` file will be generated at the specified
    location. Now, when we open the file in a text editor, we will just see some text
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cachegrind` file can be opened with different tools. One of the tools for
    Windows is WinCacheGrind. For Mac, we have qcachegrind. Any of these applications
    will view the file data in such a way that we will see all the data in an interactive
    form that can be easily analyzed. Also, PHP Storm has a nice analyzer for cachegrind.
    For this topic, we used PHP Storm IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'After opening the file in PHP Storm, we will get a window similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Profiling with Xdebug](graphics/B05225_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, we have execution statistics in the upper
    pane that shows the time (in ms) taken by each called script individually along
    with the number of times it is called. In the lower pane, we have the callees
    that called this script.
  prefs: []
  type: TYPE_NORMAL
- en: We can analyze which script takes more time, and we can optimize this script
    to reduce its execution time. Also, we can find out whether, at a certain point,
    we need to call a specific script or not. If not, then we can remove this call.
  prefs: []
  type: TYPE_NORMAL
- en: PHP DebugBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP DebugBar is another awesome tool that displays a nice and full information
    bar at the bottom of the page. It can display custom messages added for the purposes
    of debugging and full request information including `$_COOKIE`, `$_SERVER`, `$_POST`,
    and `$_GET` arrays along with the data if any of them have. Besides that, PHP
    DebugBar displays details about exceptions if there are any, database queries
    executed, and their details. Also it displays the memory taken by the script and
    the time the page is loaded in.
  prefs: []
  type: TYPE_NORMAL
- en: According to the PHP Debug website, DebugBar integrates easily in any application
    project and displays debugging and profiling data from any part of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Its installation is easy. You can either download the complete source code,
    place it somewhere in your application, and set up the autoloader to load all
    the classes, or use composer to install it. We will use composer as it is the
    easy and clean way to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Composer is a nice tool for PHP to manage the dependencies of a project. It
    is written in PHP and is freely available from [https://getcomposer.org/](https://getcomposer.org/).
    We assume that composer is installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your project''s `composer.json` file, place the following code in the required
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and then issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Composer will start updating the dependencies and install composer. Also,
    it will generate the autoloader file and/or the other dependencies required for
    DebugBar.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The preceding composer command will only work if composer is installed globally
    on the system. If it is not, we have to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command should be executed in the folder where `composer.phar`
    is placed.
  prefs: []
  type: TYPE_NORMAL
- en: 'After it is installed, the project tree for the DebugBar can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP DebugBar](graphics/B05225_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The directories' structure may be a little bit different, but normally, it will
    be as we previously noted. The `src` directory has the complete source code for
    DebugBar. The `vendor` directory has some third-party modules or PHP tools that
    may or may not be required. Also, note that the `vendor` folder has the autoloader
    to autoload all the classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check our installation now to see whether it is working or not. Create
    a new file in your project root and name it `index.php`. After this, place the
    following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we first included our autoloader, which is generated
    by composer for us to autoload all the classes. Then, we used the `DebugBar\StandardDebugbar`
    namespace. After this, we instantiated two objects: `StandardDebugBar` and `getJavascriptRenderer`.
    The `StandardDebugBar` object is an array of objects that has objects for different
    collectors, such as message collectors and others. The `getJavascriptRenderer`
    object is responsible for placing the required JavaScript and CSS code at the
    header and displaying the bar at the bottom of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: We used the `$debugbar` object to add messages to the message collector. Collectors
    are responsible for collecting data from different sources, such as databases,
    HTTP requests, messages, and others.
  prefs: []
  type: TYPE_NORMAL
- en: In the head section of the HTML code, we used the `renderHead` method of `$debugbarRenderer`
    to place the required JavaScript and CSS code. After this, just before the end
    of the `<body>` block, we used the `render` method of the same object to display
    the debug bar.
  prefs: []
  type: TYPE_NORMAL
- en: Now, load the application in the browser, and if you notice a bar at the bottom
    of the browser as in the following screenshot, then congrats! DebugBar is properly
    installed and is working fine.
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP DebugBar](graphics/B05225_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the right-hand side, we have the memory consumed by our application and the
    time it is loaded in.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the **Messages** tab, we will see the messages we added, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP DebugBar](graphics/B05225_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'DebugBar provides data collectors, which are used to collect data from different
    sources. These are called *base collectors*, and some of the data collectors are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The message collector collects log messages, as shown in the preceding example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TimeData collector collects the total execution time as well as the execution
    time for a specific operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exceptions collector displays all the exceptions that have occurred
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PDO collector logs SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The RequestData collector collects data of PHP global variables, such as `$_SERVER`,
    `$_POST`, `$_GET`, and others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The config collector is used to display any key-value pairs of arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, there are some collectors that provide the ability to collect data from
    third-party frameworks such as Twig, Swift Mailer, Doctrine, and others. These
    collectors are called bridge collectors. PHP DebugBar can be easily integrated
    into famous PHP frameworks such as Laravel and Zend Framework 2 too.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A complete discussion of PHP DebugBar is not possible in this book. Therefore,
    only a simple introduction is provided here. PHP DebugBar has a nice documentation
    that provides complete details with examples. The documentation can be found at
    [http://phpdebugbar.com/docs/readme.html](http://phpdebugbar.com/docs/readme.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed different tools to debug a PHP application. We
    used Xdebug, Sublime Text 3, and Eclipse to debug our applications. Then, we used
    the Xdebug profiler to profile an application to find out the execution statistics.
    Finally, we discussed PHP DebugBar to debug an application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss load testing tools, which we can use to
    place load or virtual visitors on our application in order to load test it, and
    find out how much load our application can bear, and how it affects the performance.
  prefs: []
  type: TYPE_NORMAL
