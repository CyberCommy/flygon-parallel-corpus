- en: Chapter 8. ReactJS API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned about the React router which allows us
    to create single-page applications and ensures our UI is in sync with URLs. We
    have also covered the advantages of the React router, dynamic route matching,
    and how we can configure our components in the router to be rendered in DOM with
    matching URLs. With the React router browser history feature, the user can navigate
    backwards/forwards and restore the previous state of the application. Now we are
    going to check how we can integrate React API with other APIs such as Facebook,
    Twitter, and Git.
  prefs: []
  type: TYPE_NORMAL
- en: React Top-Level API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are talking about the React API, it's the first step to getting into
    the React library. Different uses of React will provide different outputs. For
    example, using the React `script` tag will make top-level APIs available on the
    `React` global, using ES6 with npm will allow us to write `import React from 'react'`,
    and using ES5 with npm will allow us to write `var React = require('react')`,
    so there are multiple ways to initialize React with different features.
  prefs: []
  type: TYPE_NORMAL
- en: React API component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally, we are building components that fit into other components while
    we are dealing with React and we are assuming that whatever is built with React
    is a component. However, this is not true. There needs to be some other way to
    write supporting code to bridge the external world with React. Observe the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `render` method is used to update the property of the component and we can
    then declare a new element to render it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another method, is `unmountComponentAtNode`, is used to clean your code. When
    we have a SAP built with React components, we have to plug `unmountComponentAtNode`
    to initiate at the right time, which results in cleaning the app''s life cycle.
    Observe the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Most of the time, I have observed that developers don't call the `unmountComponentAtNode`
    method and this results in having a memory-leak issue in their app.
  prefs: []
  type: TYPE_NORMAL
- en: Mount/Unmount components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's always recommended to have a custom wrapper API in your API. Suppose you
    have a single root or more than one root and it will be deleted at some period,
    so in that case you will not lose it. Facebook has such a setup, which automatically
    calls `unmountComponentAtNode`.
  prefs: []
  type: TYPE_NORMAL
- en: I also suggest not calling `ReactDOM.render()` every time but an ideal way is
    to write or use it through the library. In that case the application will use
    mounting and unmounting to manage it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom wrapper will help you to manage configurations in one place,
    such as internationalization, routers, and user data. It would be very painful
    to set up all the configuration, every time, in different places.
  prefs: []
  type: TYPE_NORMAL
- en: Object-oriented programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A declared variable gets overridden if we declare it again beneath its declaration,
    the same way as `ReactDOM.render`overrides its declared properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It might be confusing to suggest that object-oriented programming will override
    all declared properties if we just override one property within your component.
  prefs: []
  type: TYPE_NORMAL
- en: You might think that we generally use `setProps` as a helper function, to help
    to override selective properties, but as we are working with React we can't use
    it; thus, it is recommended to have a custom wrapper ;n your API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, you will see a boilerplate to help you to understand
    it better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, it seems that we can still write better code in object-oriented
    APIs but for that we must know about the natural object-oriented API and its use
    in the React component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can understand from the preceding example, the difference between an **imperative**
    API and a **declarative** API. This example also shows how we can provide an imperative
    on top of a declarative API or vice versa. While creating a custom web component
    with React, we can use a declarative API as a wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: React integration with other APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React integration is nothing but converting a web component to a React component
    by using JSX, Redux, and other React methods.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see one practical example of React integration with another API.
  prefs: []
  type: TYPE_NORMAL
- en: React integration with the Facebook API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app will help you to integrate the Facebook API and you will have access
    to your profile picture and however many friends you have in your friends list.
    You will also see how many likes, comments, and posts there are in a respective
    friend's list.
  prefs: []
  type: TYPE_NORMAL
- en: To start with, you have to install the Node.js server and add the npm package
    in your system.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't know how to install Node.js then please see the following instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we have to download and install Node.js version 0.12.10, if we have not
    installed it on the system. We can download Node.js from [http://nodejs.org](http://nodejs.org)
    and it includes the npm package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the setup is done, we can check whether Node.js was set up properly or
    not. Open the command prompt and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the Node.js installed version, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Node](graphics/image_08_001-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should be able to see version information, which ensures that the installation
    was successful.
  prefs: []
  type: TYPE_NORMAL
- en: After installing Node, you will have `babel-plugin-syntax-object-rest-spread`
    and `babel-plugin-transform-object-rest-spread`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a basic difference between these two: `spread` will only allow you
    to read the syntax but `transform` will allow you to transform your syntax back
    to ES5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After getting this done, you will have to store plugins into the `.babelrc`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First we need to create a `package.json` file for our project, which includes
    the project information and dependencies. Now, open the command prompt/console
    and navigate to the directory you have created. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This command will initialize our app and ask several questions before creating
    a JSON file named `package.json`. The utility will ask questions about the project
    name, description, entry point, version, author name, dependencies, license information,
    and so on. Once the command is executed, it will generate a `package.json` file
    in the root directory of your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have created my `package.json` file with my requirements, which are shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, you can see the `name` of the application, the `version`
    of your application, and the `description` of your application. Observe the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, you can set up your `scripts`, to detail such things
    as how to `start` your server, what to `build`, what is `clean`, and `deploy`
    and `dev`. Please make sure whatever path you have defined in the respective variable
    is correct, otherwise your application won''t work as expected. Observe the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code shows the `author` name, `license` (if applicable), and
    `keywords` for your application. Observe the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you can see, in the preceding code, the `dependencies` of your application
    which will help you set the required components and fetch data, as well as the
    frontend stuff. You can also see defined `devDependencies` and their versions,
    which are linked to your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up the `package.json` file, we have our HTML markup as shown
    in the following code, named `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure your application with a unique ID in `config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding code, you can have your configuration in one file.
    You can name it `index.js`. This file includes your `appId`, which is very important
    when it comes to to running your app in your local directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have your ID, you have to register your app in Facebook at [https://developers.facebook.com](https://developers.facebook.com)
    and there you will have to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Facebook developer account:![Setting up the application](graphics/image_08_002-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After logging in, you will see on the right-hand side a drop-down called **My
    apps**. Click on that and open up the list menu. There you will find **Add new
    app**. Clicking that will open a dialog saying, **Create a New App ID**, as shown
    in the following screenshot:![Setting up the application](graphics/image_08_003-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the required details and click on the **Create App ID** button.
  prefs: []
  type: TYPE_NORMAL
- en: After creating your app ID, please jump to the **Dashboard** page and you will
    see a screen resembling the following:![Setting up the application](graphics/image_08_004-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Dashboard** page, your left-hand side navigation shows the **Settings**
    link. Please click on that to set the **Basic** and **Advanced** settings for
    your app:![Setting up the application](graphics/image_08_005-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are able to see the preceding screen, you will be able to see that
    your dynamic generated **App ID**, **Display Name**category, and **App Secret**
    are automatically filled in. You will also see **App Domains**. This field is
    very important when it comes to accessing your app as a website and notifying
    that we need to define the domain here. However, if you write your `localhost`
    as the domain straightaway, it will not be accepted and your application will
    have errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make your localhost accessible, we have to define its platform. Now, please
    scroll down a bit to access **+** **Add platform**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](graphics/image_08_006-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on **+ Add Platform**, you will see the following options on
    the screen and you will have to select a **Website** to run your application on
    your local server:![Setting up the application](graphics/image_08_007-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have selected **Website** as a platform, one more field will be added
    to your screen as shown in the following screenshot:![Setting up the application](graphics/image_08_008-2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you get the preceding screen, you have to define the **Site URL** as `http://localhost:3000/`
    and then, in a similar way, you will have to define the same domain in the **App
    Domains** field, as shown in the following screenshot:![Setting up the application](graphics/image_08_009-3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After doing the aforementioned changes, please save your changes by clicking
    on the **Save Changes** button at the bottom-right side:![Setting up the application](graphics/image_08_010-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your ID is created, which you can use in your `config.js` file to link your
    app to run in the local server.
  prefs: []
  type: TYPE_NORMAL
- en: After setting up the `config.js` file, the next step is to set your required
    files in that app and inject your dynamic stuff into the HTML ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can import required components, utils, and CSS in the `index.js` file and
    put it in a different folder so that it will not conflict with your configuration
    `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you can see that I have imported `React` for React-supported
    files and imported the required CSS files. As a final step, the `render` method
    will do the trick for you after defining your HTML ID into the selector. Make
    sure `document.querySelector` has the correct selector, otherwise your application
    will not render with the correct structure.
  prefs: []
  type: TYPE_NORMAL
- en: You can see in the preceding code that I have created one component called `App`
    and imported it.
  prefs: []
  type: TYPE_NORMAL
- en: In the `App.js` file, I have imported several components, which helped me to
    fetch data from my Facebook account with the help of the Facebook API integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following code structure of the `App.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding imported JavaScript files have been set up to fetch data, building
    the structure about how it will be executed in your application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code defines constants to create styles for the wrapper, which
    will be applied while your page renders in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code extends components, with details of mount/unmount, which
    we have already covered in previous chapters. If you are still unsure about this
    area, then please revisit it.
  prefs: []
  type: TYPE_NORMAL
- en: '`window.fbAsyncInit` will sync the Facebook API with the login setup and it
    will also validate the status of the login.'
  prefs: []
  type: TYPE_NORMAL
- en: It will also async Facebook data such as your profile and friends list, which
    has separate JavaScript and will be covered later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Defining a scope array means we are accessing the user's Facebook friends and
    posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](graphics/image_08_011-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, you can see default login permission access in
    the **App Review** tab while creating the Facebook login app. We can submit the
    approval to access any other user information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `mainRender` method will render the `Profile`, `myFriends`
    (friend list), and `status` and it will return the value in the `render return`.
    You can see, in the `render` method, one `<div>` tag; have called it `{this.mainRender()}`
    to inject the data inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you know, here we are dealing with third-party API integration. We are not
    sure about how long we will be connected to that API and how long it will take
    to load the content. It''s better to have a content loader (spinner), which indicates
    that the user should wait for a while, so we have used the following spinner to
    show the progress in loading the content on the page. The code for the spinner
    is also included in the `App.js` file. Here''s a look at the spinner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](graphics/image_08_012-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also choose your own custom spinner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your application page is ready, your final output should look like the
    following screenshot, where you will see the basic look and feel, along with the
    required elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](graphics/B05743_08_13-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you hit your local server, the preceding screen will ask your permission
    to proceed with the login process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you press the **Agree** button, it will redirect you to the Facebook login
    page. This can be achieved through the following code (`Login.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After importing the React `PropTypes`, in the following code you will see that
    I have defined a constant to create styles for the login page. You can also define
    styles here and you can put them into one CSS file and have an external file call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows the HTML structure of the login page and it also has
    the `Login.propTypes` defined for the login button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When you click on the **Agree** button, your application will be redirected
    to the Facebook login page. Please refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](graphics/image_08_014-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you login with your credentials, it will ask you for permission to access
    your data as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](graphics/image_08_015-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have provided the required details and pressed the **Continue** as
    button, it will give you the final screen with the final output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](graphics/image_08_016-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For security reasons, I have blurred my friends' profile pictures and their
    names, but you will get the same layout in your Facebook account. Now you're thinking
    about fetching a friends list in your application, right? So, with help of the
    following code, I have fetched a list in my custom app.
  prefs: []
  type: TYPE_NORMAL
- en: '`FriendList.js` is imported in the `App.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see in the preceding code snippets, we are also importing `React`,
    `constants`, and `FriendItem` to get the data. Here we are just importing `FriendItem`
    but it will have a separate file to deal with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code defines the wrapper styles for the friends list content.
    As I said earlier, you can also have those in a separate CSS file and have an
    external call, whichever is convenient for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you can see a condition to validate whether someone has
    friends or no friends. If someone does not have a friends list in their Facebook
    account, it will show the aforementioned message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If your account has friends, then you will get a full list of friends including
    their profile pictures, likes, comments, and the number of posts, so in this way
    you can also have Facebook API integration with React.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have explored integrating the Facebook API with the help of React, and you
    can also integrate with other APIs in a similar way.
  prefs: []
  type: TYPE_NORMAL
- en: We have used constants, utils, and extended components to achieve integration
    and get the expected output.
  prefs: []
  type: TYPE_NORMAL
- en: The key examples shown in this chapter will help you to understand or clarify
    your concept of the integration of other APIs with React.
  prefs: []
  type: TYPE_NORMAL
