- en: Chapter 5. Testing and Optimizing for Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the course of this book, we've explored some of the essentials of
    responsive web design, using HTML5 and CSS3, and learned how to begin to modify
    our code to make content responsive across different devices.
  prefs: []
  type: TYPE_NORMAL
- en: We should keep in mind that building just a responsive website is not enough—we
    must also test and optimize content to work as efficiently as possible across
    different devices. If pages on our site are slow to load, then this will clearly
    be a concern. Throughout the course of this chapter, we will look at some of the
    tips and tricks we can use to begin to ensure that our sites are sufficiently
    responsive and content loads quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring why pages load slowly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the performance of our sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring site performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for cross-browser compatibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curious? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the importance of speed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advent of using different devices that can access the Internet means speed
    is critical—the time it takes to download content from hosting servers and how
    quickly the user can interact with the site are key to the success of any site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why it is important to focus on the performance of our website on the mobile
    devices or those devices with lesser screen resolution? There are several reasons
    for this, they include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Nearly 80 percent of Internet users own a smartphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Around 90 percent of users go online through a mobile device, with 48% of users
    using search engines to research new products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Approximately 72 percent of users abandon a website if the loading time is more
    than 5–6 seconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile digital media time is now significantly higher compared to desktop use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we do not consider statistics such as these, then we may go ahead and construct
    our site, but end up with a customer losing both income and market share, if we
    have not fully considered the extent of where our site should work. Coupled with
    this is the question of performance; if our site is slow, then this will put customers
    off and contribute to lost sales.
  prefs: []
  type: TYPE_NORMAL
- en: A study performed by San Francisco-based Kissmetrics shows that mobile users
    wait between 6–10 seconds before they close the website and lose faith in it.
    At the same time, tests performed by Guy Podjarny for the Mediaqueri.es website
    ([http://mediaqueri.es](http://mediaqueri.es)) indicate that we're frequently
    downloading the same content for both large and small screens; this is entirely
    unnecessary when, with some simple changes, we can vary content to better suit
    desktop PCs or mobile devices!
  prefs: []
  type: TYPE_NORMAL
- en: So, what can we do? Well, before we start exploring where to make changes, let's
    take a look at some of the reasons why sites run slowly.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding why pages load slowly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although we may build a great site that works well across multiple devices,
    it''s still no good if it is slow! Every website will of course operate differently,
    but there are a number of factors to allow for, which can affect page (and site)
    speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Downloading data unnecessarily**: On a responsive site, we may hide elements
    that are not displayed on smaller devices; the use of `display: none` in code
    means that we still download content, even though we''re not showing it on screen,
    resulting in slower sites and higher bandwidth usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Downloading images before shrinking them**: If we have not optimized our
    site with properly sized images, then we may end up downloading images that are
    larger than necessary on a mobile device. We can of course make them fluid by
    using percentage-based size values, but if the original image is still too large,
    this places extra demand on the server and browser to resize them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A complicated DOM in use on the site**: When creating a responsive site,
    we have to add in a layer of extra code to manage different devices; this makes
    the DOM more complicated and slows our site down. It is, therefore, imperative
    that we don''t add any any unnecessary elements that require additional parsing
    time by the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Downloading media or feeds from external sources**: It goes without saying
    that these are not under our control; if our site is dependent on them, then the
    speed of our site will be affected if these external sources fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use of Flash**: Sites that rely heavy on using Flash will clearly be slower
    to access than those that don''t use the technology. It is worth considering if
    our site really needs to use it; recent changes by Adobe mean that Flash as a
    technology is being retired in favor of animation using other means such as HTML5
    Canvas or WebGL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is one other point to consider, which we''ve not covered in this list;
    the average size of a page has significantly increased since the dawn of the Internet
    in the mid-nineties. Although these figures may not be 100% accurate, they still
    give a stark impression of how things have changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1995**: At that time, the average page size used to be around 14.1 KB. The
    reason for it can be that it contained around two or three embedded objects such
    as images. That meant just two or three calls to the server on which the website
    was hosted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2008**: The average page size increased to around 498 KB in size, with an
    average use of around 70 objects that includes changes to CSS, images, and JavaScript.
    Although this is tempered with the increased availability of broadband, not everyone
    can afford fast access, so we will lose customers if our site is slow to load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All is not lost though—there are some tricks we can use to help optimize the
    performance of our sites. Many of these apply equally to standard sites as well
    as responsive ones—let's take a look in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've explored some of the reasons why our site might be slow, and the
    consequences we face if we do not address performance issues. Although some of
    the issues we could face may not be easy to solve, we can still effect changes
    that help improve performance of our sites.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Google
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Analysis shows that if a page takes longer than 4–5 seconds to load, then customers
    will frequently vote with their feet (that is, walk away). Any delay of more than
    a second can equally lead to a poor user experience.
  prefs: []
  type: TYPE_NORMAL
- en: A great source that can help us understand where some of our issues are is that
    behemoth, Google. We may knock it for being omnipotent, but it clearly knows some
    useful tricks!
  prefs: []
  type: TYPE_NORMAL
- en: Google states that our page doesn't have to entirely load within 4–5 seconds,
    but should be usable within this time; any content that is of a lower priority
    can be put below the fold or loaded in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'At a basic level, Google recommends that our server response time should be
    less than 200 ms—we should also explore aspects such as client-side rendering
    to help reduce the time taken to load our content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting with Google](img/image_05_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although much of this applies to any site, this is particularly important for
    responsive sites, given the extra code required to manage the experience for mobile
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google also recommends that we should consider performing these tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimize the number of redirections and roundtrips required to render content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize JavaScript execution and image sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid external blocking of the JavaScript and CSS in above-the-fold content,
    by pushing scripts to the bottom of the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the number of domains called from a page, which helps avoid redirection
    between mobile and desktop clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, we can explore the use of other tricks to help with performance.
    These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use of cache**: We can consider using this as a means to store data temporarily,
    that doesn''t change very often; it will help reduce the number of requests to
    the server (and consequently bandwidth usage), if the content hasn''t changed.
    With the advent of HTML5, we can even use the offline AppCache facility. This
    has the added bonus of making content available offline, if our Internet access
    fails. A similar technique exists with local storage; while this is not available
    offline by default, it can be used to cache more persistent content if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use of Scalable Vector Graphics (SVGs)**: Unlike JPEG or PNG images, these
    can resize without loss of quality, so are perfect for responsive designs; their
    size is often smaller than an equivalent standard image. These will not suit every
    application though, as their use is more suited for line drawings or logos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply fragment caching**: If we''re generating dynamic pages that require
    server resources to render but where only a small part changes, then applying
    fragment caching means we can store static versions of the content that doesn''t
    change. When a page is then requested, we send the cached content, and only apply
    the changes needed to update the content. This reduces the number of calls to
    our database backend and therefore the resources required to display our content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimize the database**: If our website is one where content is posted from
    different sources, then content will be updated frequently; garbage data will
    equally increase. We should spend time regularly cleaning content in our database
    to ensure it is as small and working as efficiently as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking things further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to explore things further, then there are some more advanced, invasive
    changes we can use to help optimize our site. These involve more work, so should
    be planned as longer term changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enabling GZip compression**: We can use this to compress resources, which
    will make pages load faster. However, this shouldn''t be applied across a site
    without planning; some elements such as CSS or JavaScript can be compressed or
    minified during development, so applying GZip compression will not result in any
    benefits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Choosing our host**: There are dozens of hosts available; each will offer
    different levels of functionality and performance that can have an impact on the
    operation of our site. It''s important to take time to choose the right host;
    it''s worth comparing different hosts to see how they fare, and get recommendations
    from others as to who has performed well over longer periods of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check [http://www.whoishostingthis.com](http://www.whoishostingthis.com) for
    reviews on companies and see how they stack up against others.
  prefs: []
  type: TYPE_NORMAL
- en: '**Excluding content or media that is not required**: This should almost be
    self-explanatory, but we should not load content that isn''t needed! It''s key
    to understand client requirements; if clients insist on making everything available
    from both desktop and mobile devices, then it may be necessary to take them through
    the reasons why this isn''t a good course of action and encourage them to see
    that providing less content on a mobile device won''t necessarily result in a
    poor user experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploring the use of Content Delivery Networks (CDNs)**: This helps render
    content more quickly, as it is fetched from the nearest local server to the client.
    Content is normally uploaded to one central point, but is then replicated to several
    key servers around the world; this reduces the distance travelled and time taken
    to render content on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limiting HTTP requests**: As a part of development, we should consider the
    number of HTTP requests that our site will have to make to the server and aim
    to reduce these as much as possible. This reduction will help toward reducing
    network traffic and improving performance, as we do not have to access the DOM
    as frequently, nor wait as long for content to be downloaded. We can use tools
    such as creating image sprites or pre-processors to merge multiple CSS files into
    one, to help with keeping HTTP requests to a minimum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It takes time to optimize a site, but the effort spent in refining it will pay
    dividends in increased patronage and ultimately increased sales. The trouble is,
    we won't know how well our site performs unless we test it; let's explore some
    of the tools we can use to help gauge how well our site is operating, in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the performance of our site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We built our responsive pages, improved the look and feel, and also optimized
    the performance of our site. But before the application goes live, it is the duty
    of a developer (or dedicated tester) to test the performance of the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a set of tools that we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mobiReady** ([http://ready.mobi/](http://ready.mobi/)): This free tool is
    used for testing the performance of a responsive website across different resolutions
    in parallel. It gives each page a score out of five, based on factors such as
    data sent or received and number of requests made.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Webpagetest** ([http://www.webpagetest.org/](http://www.webpagetest.org/)):
    This online tool helps in testing the performance of a website with respect to
    specific location and browser for which we want the result. We can test a page
    for a number of different factors, such as caching static content, effective use
    of CDN, or if keep alive has been enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google''s Pagespeed Insights****Tool** ([https://developers.google.com/speed/pagespeed/insights/](https://developers.google.com/speed/pagespeed/insights/)):
    With this tool we can do the speed analysis of our responsive website for both
    desktop and mobile versions of the site. This tool rates the website out of 100
    for the speed and user experience, providing a list of pointers we can fix, along
    with details on how they can be fixed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IntoDns.com** ([http://www.intodns.com/](http://www.intodns.com/)): Although
    this is not a performance testing tool as such, it can help determine if the performance
    of our site is affected, as a result of issues with our DNS. It provides a report
    of the website and mail servers, which we can use to fix issues and ultimately
    help keep performance at peak efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YSlow** ([http://yslow.org/](http://yslow.org/)): This bookmarklet grades
    any chosen website into either one of three predefined rulesets or a custom one
    we define. It offers suggestions for where we can improve the page''s performance,
    based on an array of different values, such as DNS lookups, making AJAX cacheable,
    avoiding CSS expressions, and configuring eTags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some useful tools, which can help with performance and optimization
    of our site (with plenty more available online). However, we are missing out on
    an opportunity, if we focus purely on these tools. What about using what is already
    available in our browser?
  prefs: []
  type: TYPE_NORMAL
- en: 'Most (if not all) browsers have some form of DOM inspector built in to the
    browser or available as a standalone option. These can provide some good information
    that we can use as a precursor to more in-depth details from external services.
    To see what is possible, let''s explore what we can get if we run a simple check
    on a website in a DOM inspector; for this example, we will use that doyenne of
    online retail, Amazon; it has sites available all over the world. We will perform
    the same test twice: the first one will be as a desktop browser and the second
    as an (emulated) mobile version, using Chrome''s built-in DOM inspector.'
  prefs: []
  type: TYPE_NORMAL
- en: Working through a desktop example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our test, we''ll start with a desktop browser—we''ll use Google''s Chrome
    as it has a good set of tools; other browsers can also be used, but you may not
    get quite the same results. Let''s make a start, using Amazon as the basis for
    our test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working through a desktop example](img/image_05_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what we need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Fire up Chrome, then press ***Shift*** + ***Ctrl*** + ***I*** to display the
    Developer toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the red record button toward the top left of the window, then click
    on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert back to Chrome's window, then browse to [http://www.amazon.com](http://www.amazon.com).
    As soon as the page has finished loading, click on the red record button to stop
    recording.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we will have a set of results we can browse through, similar
    to this extract:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working through a desktop example](img/image_05_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At first, these results may not make sense, but the details we want are at the
    foot of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working through a desktop example](img/image_05_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This shows the number of server requests made, the amount of content transferred,
    and the times taken to initially parse the DOM (`DOMContentLoaded`); then, fully
    download the content (indicated by **Finish** and the **Load** event being fired).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `DOMContentLoaded` time relates to parsing the document only,
    and does not allow for whether other resources such as scripts, images, or external
    style sheets have been downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Even though Amazon's site downloads a reasonable amount of content, they've
    made good use of some of the tricks we've covered, to help reduce bandwidth usage
    and increase page rendering speed. How can we tell? Try clicking on the bottom
    two links shown in the screenshot (or links 4 and 5 in the asset list shown within
    the browser).
  prefs: []
  type: TYPE_NORMAL
- en: The first link shows a minified CSS style sheet; if we look at it in more detail,
    it is possible to surmise that some of the links within were generated using an
    automated process. The PNG filename in one example is over 70+ characters long!
    The use of long names will increase the file size of the file concerned; images
    need to be accurately named, but with sensible filename lengths!
  prefs: []
  type: TYPE_NORMAL
- en: Considering the size of the page and the number of requests, it is possible
    to think that this website faces performance issues. However, if we look more
    carefully, we can see a lot of content is being loaded in the background. This
    means we're still providing a good user experience, with prioritized content being
    loaded first, and content of lesser priority being loaded in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about what all of the settings mean within the Network tab of
    Chrome's developer toolbar, take a look at the main documentation on the Google
    Developer's site, at [http://bit.ly/2ay9H8g](http://bit.ly/2ay9H8g).
  prefs: []
  type: TYPE_NORMAL
- en: Let's change track now, and focus on viewing the same site on a mobile device—this
    time the iPhone 6 Plus.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing on a mobile device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We perform the same test again, but this time set Chrome to emulate an iPhone
    6 Plus, then we should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing on a mobile device](img/image_05_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The real test though is in the number of requests made, amount of data transferred,
    and the time taken to load the page. This time around, our browser made 103 requests,
    with 1.8 MB transferred from the server and completed the total download in approximately
    12 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing on a mobile device](img/image_05_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can clearly see that to provide best user experience to its customers,
    Amazon has cleverly reduced the page size and the number of requests.
  prefs: []
  type: TYPE_NORMAL
- en: We should constantly monitor our sites for performance; with CSS3 attributes
    being added or updated frequently, we can begin to update our site and start to
    remove dependencies on external libraries, which allows us to increase the speed
    of our site and ultimately provide a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn some of the best practices and paradigms that
    will help us in achieving the actual goals of web development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Brick-first design paradigm**: When constructing responsive sites, it is
    better practice to base our design about mobile devices as our baseline, before
    adding the extra functionality to manage desktop use. Our mindset should be to
    incorporate the bare minimum required to satisfy users on mobile devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Today, we know that a major portion of sales of mobile devices annually has
    been overtaken by smartphones. Although a large percentage of users do not buy
    mobile devices frequently, they still have devices which are capable of supporting
    web applications and even native applications. Adding to these numbers we still
    have those people who use some old generation smartphones too. We can even add
    other devices like Kindles and semi web-capable devices; if we add these numbers
    we might reach a staggering sum!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for this huge audience, let''s consider some cases:'
  prefs: []
  type: TYPE_NORMAL
- en: They are not going to carry out research
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are not going to read long articles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chances are that those users with older cell phones might have to navigate
    the page using a standard key pad similar to a normal landline phone, rather than
    benefit from using a standard keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: The small size of screens on older devices makes it harder to provide a mobile-first
    layout; it makes it ever more important that we only display the bare essentials
    for these users, and that other elements are removed from display or download.
  prefs: []
  type: TYPE_NORMAL
- en: Providing support for older browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another best practice to follow to improve the performance of our website for
    those old devices, which have limited functionalities and are not as fast as today's
    mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: We know that since we have the Internet, we have web browsers to display the
    content. We should not forget that there are users who still use older mobile
    devices and which lack the features of modern equivalents; we can handle this
    using graceful degradation.
  prefs: []
  type: TYPE_NORMAL
- en: Graceful degradation is a strategy, which is used to handle the design of web
    pages for different browsers. If we built a website using the graceful degradation
    strategy, then it is intended to be viewed first by the modern browsers and then
    in the old browsers, which have less features. It should degrade in such a way
    that our website still looks good with respect to look and feel and is still functional
    but with less features.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that graceful degradation does not mean that we are telling our users to
    download the most recent browser to view our website.
  prefs: []
  type: TYPE_NORMAL
- en: But today's modern designers and developers do not like this approach. The main
    reason is that it often turns into a demand where our users should download the
    most recent and updated browser in order to view the best view of our website.
    We should remember that this is not graceful degradation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are asking our users to download a modern browser, then that means we
    are using a browser-centric approach. Some points we should remember to follow
    for graceful degradation, which can equally apply to progressive enhancement:'
  prefs: []
  type: TYPE_NORMAL
- en: We should write HTML, which is valid and standard compliant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should use external style sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should always link our scripts externally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should always make sure that our content is accessible for old browsers without
    CSS or JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering which features to support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When developing responsive sites, we should check to see if our target browser
    or device can support a specific feature, rather than simply assuming it can be
    used.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we were to install the latest Chrome browser on an old Android
    phone, we might be tempted to assume that it will support the latest features,
    such as CSS animations, background parallax effects, and WebGL.
  prefs: []
  type: TYPE_NORMAL
- en: But, is this really the case? What would happen if we were to try to operate
    a site that relied on a feature that is not supported on an older Android device?
    The end result might be that our browser becomes unresponsive or crash; we would
    be forced to have to reboot it to restore service.
  prefs: []
  type: TYPE_NORMAL
- en: This issue was faced by Android users recently in a big way and in this the
    most noticeable application to suffer was Google Talk/Hangout. With their upgrade,
    the most lightweight chat service of Google was turned to an almost unusable application
    due to performance issues on the older devices.
  prefs: []
  type: TYPE_NORMAL
- en: This way it is really important to filter out those features, which are less
    usable and have less relevance on small screens. A great example is the applications
    that make use of proximity sensors. This helped push manufacturers to make this
    a standard feature across all newer smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: Let the user choose what they want
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We developed an eye-catching, responsive, animated, and touch-oriented website
    but for a user who has poor Internet connection or an old device?
  prefs: []
  type: TYPE_NORMAL
- en: What should we do if the site appears to be hanging during the initial load
    or on subsequent page refreshes?
  prefs: []
  type: TYPE_NORMAL
- en: The reader will of course be confused as to what they should do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple thing we should do. Ever run Gmail on an old device or slow
    Internet connection? If yes, then you must have noticed **Load basic HTML (for
    slow connections)**, or even this gem, where slower connections mean we may be
    forced to use Gmail''s simple view, because a slow Internet connection makes using
    the standard view impossible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let the user choose what they want](img/image_05_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the elite few who are used to high-speed cable or broadband connections,
    they may find it hard to believe that other users do not have that luxury, and
    are forced to use the basic view, as would be the case in our example. Using this
    option loads the basic GUI version of Gmail, which is optimized for slower connections,
    and allows the user to interact with the site.
  prefs: []
  type: TYPE_NORMAL
- en: This illustrates a great point—if a site must use the latest features, then
    we should consider implementing a basic or standard mode in our application. We
    progressed from the days of a select few sites that have all of the latest features
    and which get all of the traffic, providing a user with what they are looking
    for on the website is what they care about.
  prefs: []
  type: TYPE_NORMAL
- en: Do we need to include a whole library?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We should always follow the standard of either *use it* or *keep it*. It is
    difficult to keep track of all the libraries and modules which are in use; we
    have to strike a fine balance between the libraries we use and maintaining site
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: Many frameworks and libraries now have the option to customize the functionality
    provided within; for example, we may only require key elements of jQuery (if we
    were using it); we can select to exclude redundant functionality when downloading
    the library. However, if we are still at a development phase, then we will require
    the whole library; we can choose the parts needed to run our application, before
    minifying it for production use.
  prefs: []
  type: TYPE_NORMAL
- en: Considering cross-browser compatibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A question that must always be at the back of the minds of any developer is
    how to retain maximum browser compatibility when constructing sites; it does not
    matter if the UI is stunning, if it doesn't work on enough browsers!
  prefs: []
  type: TYPE_NORMAL
- en: Any site that does not support its target browser market (that is, those browsers
    most used by the site's audience), risks losing business and reputation. This
    makes it even more important that we not only test our site, but test it across
    multiple browsers if we're making it responsive. This testing is a key step to
    retaining customer satisfaction and market share. There are a number of techniques
    we can use to help reduce issues related to cross-browser compatibility, before
    we consider some of the solutions available, let's look at some of the challenges
    we face in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Outlining the challenges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The utopia for any designer is to have a 100% bug-free site; the reality though
    is that while this will always be at the back of the developer's mind, it is impossible
    to achieve!
  prefs: []
  type: TYPE_NORMAL
- en: Why? One key consideration is the use of CSS3 (and those elements of CSS4 that
    now exist); although support is constantly improving, there is still a way to
    go before every browser offers consistent support for all CSS3 attributes. In
    the same vein, support for responsive media and media queries are not supported
    by older browsers, so we must consider how much support we can afford to offer
    for these browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Considering possible solutions, we've touched on three elements which are key
    considerations for responsive sites, to work around them, there are a number of
    options open to us.
  prefs: []
  type: TYPE_NORMAL
- en: We can (and should) consider constructing our site using the base content that
    will work on any browser; we can then progressively enhance the experience, by
    adding extra features that may only work for some browsers, but are not key to
    the overall user experience. In comparison, we could take the view that we build
    our site around the latest technologies and browsers, but then add in support
    to allow content to degrade gracefully, when used on older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Can we work around these issues? Absolutely, there are a number of different
    options on offer. There is one point we should consider though, using a JavaScript
    solution isn''t necessarily the best solution; there are a number of tips and
    tricks we can use to help retain compatibility. Before we touch on these, let''s
    take a moment to consider some of the options available when using JavaScript
    as a solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adapt.js**: This script doesn''t use media queries; instead, it works out
    which CSS file to load, based on values such as the browser''s window size. This
    script can be downloaded from [http://adapt.960.gs/](http://adapt.960.gs/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modernizr.js**: This library allows us to pick and choose elements we want
    to support, such as HTML5 `<video>` elements; when chosen elements are detected
    as being in use, Modernizr provides us with an option to gracefully degrade content,
    and not let our site simply fall into a heap! The library is available from [https://modernizr.com/download](https://modernizr.com/download).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Respond.js**: This solution uses JavaScript to provide breakpoint support
    for older browsers (such as IE6-8), based on the sizes we specify when configuring
    our pages. We can use it in a similar way to standard CSS-based breakpoints, such
    as setting device-width to 414px, to cater for an iPhone 6 Plus in portrait mode.
    More details and downloads of the library are available from [http://responsejs.com/](http://responsejs.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although these solutions will work perfectly well, they all suffer from one
    inherent drawback—JavaScript! In this modern age, most browsers are likely to
    have this switched on by default, but there will be instances where this is not
    the case; let's explore why using JavaScript isn't always the right solution.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the drawbacks of JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the construction phase of any responsive site, we will naturally need
    to work out which breakpoints we want to support. This will be based on statistics
    such as Google Analytics. The normal route would then be to use media queries
    in our CSS style sheet to load elements when needed. This works fine for recent
    browsers (anything within the last year to eighteen months), but with older browsers
    this will prove an issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can support them using JavaScript-based solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: All of the solutions we've touched on need JavaScript – if it's switched off,
    then they clearly won't work!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the solutions use AJAX to fetch content (such as Adapt.js). This can
    show a brief flash when getting the content. The developers have tried to reduce
    this to the absolute minimum, but no matter how much they try, it will be impossible
    to get rid of it; it will look odd when used on a site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the solutions won't work on older devices, Adapt.js being a good example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use a default style sheet if JavaScript is switched off, using `<no script>`
    tags; the question is, what screen size do we support?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JavaScript will require the server to load additional resources, which
    places additional demand on the server; JavaScript was always designed to provide
    additional functionality, and shouldn't be used when that functionality is key
    to the successful operation of a site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clearly these drawbacks make for a less attractive option when using JavaScript!
    Two key questions we should ask though are: do we really need to support older
    browsers, such as IE8, and use JavaScript to support them?'
  prefs: []
  type: TYPE_NORMAL
- en: Providing a CSS-based solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The question of which browsers to support is one that will divide both developers
    and designers; on one hand, we will have creatives that want to take advantage
    of the latest functionality, while others will state that we must support as wide
    a browser population as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latter might normally require the use of JavaScript for older browsers;
    given that this requires extra resources that we must call from the server, it
    makes sense to use CSS where possible. To this end, we can consider using the
    relatively new `@supports` feature, (or feature queries, to give it its technical
    name). This works in a similar way to media queries and allows us to style elements
    based on whether the chosen style is supported in the browser. This has gained
    great support in most recent browsers (except of course IE, which always likes
    to be different!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Providing a CSS-based solution](img/image_05_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then create code such as this in the main markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And style it using code such as this, when it is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'However if it isn''t supported, then we simply add a feature query to allow
    it to gracefully degrade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The beauty of this is that we're not reliant on any external libraries to help
    support what might be core functionality; we can use this to support new CSS3
    styles and existing properties. Granted, it means that our style code base will
    increase, but this is tempered as the increase is in an existing file that is
    already cached, than having to call an additional new resource from the server!
  prefs: []
  type: TYPE_NORMAL
- en: Testing site compatibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this stage, our site would be optimized and tested for performance, but what
    about compatibility?
  prefs: []
  type: TYPE_NORMAL
- en: Although a wide range of available browsers have remained relatively static
    (at least for the ones in mainstream use), the functionality they offer is constantly
    changing; this makes it difficult for developers and designers to handle all of
    the nuances required to support each browser.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the wide range makes it costly to support. In an ideal world, we
    would support every device available, but this is impossible; instead, we must
    use analytical software to determine which devices are being used for our site
    and therefore worthy of support.
  prefs: []
  type: TYPE_NORMAL
- en: Working out a solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we test our site on a device such as an iPhone 6, there is a good chance
    it will work as well on other Apple devices, such as iPads. The same can be said
    for testing on a mobile device such as a Samsung Galaxy S4; we can use this principle
    to help prioritize support for particular mobile devices, if they require more
    tweaks to be made than in comparison to other devices.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately though, we must use analytical software to determine who visits our
    site; the information such as browser, source, OS, and device used will help determine
    what our target audience should be. This does not mean we completely neglect other
    devices; we should try to ensure they work with our site too, but this will not
    be a priority during development.
  prefs: []
  type: TYPE_NORMAL
- en: 'A key point to note is that we should not attempt to support every device;
    this is too costly to manage, and we would never keep up with all of the devices
    available for sale! Instead, we can use our analytics software to determine which
    devices are being used by our visitors; we can then test a number of different
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Screen size**: This should encompass a variety of different resolutions for
    desktop and mobile devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection speed**: Testing across different connection speeds will help
    us understand how the site behaves and identify opportunities or weaknesses where
    we may need to effect changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pixel density**: Some devices will support higher pixel density, which allows
    them to display higher resolution images or content. When designing sites (and
    particularly responsive ones), we clearly want to position our content in the
    right place on screen. The clarity afforded by high-resolution displays makes
    it easier to fine-tune how this content is displayed on screen; this will make
    it easier to view and fix any issues with displaying web content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interaction style**: The ability to view the Internet across different devices
    means that we should consider how our visitors interact with the site: is it purely
    on a desktop, or do they use tablets, smartphones, or gaming-based devices? It''s
    most likely that the former two will be used to an extent, but the latter is not
    likely to feature as highly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we've determined which devices we should be supporting, then there are
    a range of tools available for us to use, to test browser compatibility. These
    include physical devices (ideal, but expensive to maintain), emulators, or online
    services (these can be commercial or free). Let's take a look at a selection of
    what is available, to help us with testing browser compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring tools available for testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we plan to test a mobile or responsive website, there are factors which
    we need to consider before we start testing, to help deliver a website which looks
    consistent across all the devices and browsers. These factors include answering
    these three questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Does the website look good?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any known bugs or defects?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is our website really responsive?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To help test our sites, we can use any one of several tools available (either
    paid or free); a key point to note though, is that we can already get a good idea
    of how well our sites work, by simply using the Developer toolbar that is available
    in most browsers!
  prefs: []
  type: TYPE_NORMAL
- en: 'Granted, it''s not something we should absolutely rely on, but it provides
    a perfect starting point. We can always move up to a commercial option when we''ve
    outgrown the capabilities offered in a browser. Let''s take a brief look at what''s
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing with Chrome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can easily emulate a mobile device within Chrome, by pressing ***Ctrl***
    + ***Shift*** + ***M*** ; Chrome displays a toolbar at the top of the window,
    which allows us to select different devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing with Chrome](img/image_05_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the menu entry (currently showing iPhone 6 Plus) and change
    it to Edit, we can add new devices; this allows us to set specific dimensions,
    user agent strings, and whether the device supports high-resolution images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing with Chrome](img/image_05_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's switch now, and take a look at the options available in Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Working in Firefox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The responsive design view option is available using the same ***Ctrl*** + ***Shift***
    + ***M*** option as Chrome; we can also access it by navigating to **Tools** |
    **Web Developer** | **Responsive Design Mode** from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the mode is activated in Firefox, we can switch between different screen
    sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working in Firefox](img/image_05_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although browsers can go some way in providing an indication of how well our
    site works, they can only cater to a limited range of views. Sometimes, we need
    to take things a step further and use commercial solutions to test our sites across
    multiple browsers at the same time. Let's take a look at some of the options available
    commercially.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring our options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''ve spent any time developing code, then there is a good chance you
    may already be aware of Browserstack (from [https://www.browserstack.com](https://www.browserstack.com)).
    Other options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GhostLab**: [https://www.vanamco.com/ghostlab/](https://www.vanamco.com/ghostlab/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Muir**: [http://labs.iqfoundry.com/](http://labs.iqfoundry.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CrossBrowserTesting**: [http://www.crossbrowsertesting.com/](http://www.crossbrowsertesting.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If, however, all we need to do is check our site for its level of responsiveness,
    then we don''t need to use paid options. There are a number of sites that allow
    us to check, without needing to install plugins or additional tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Am I Responsive**: [http://ami.responsive.is](http://ami.responsive.is)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ScreenQueries**: [http://screenqueri.es](http://screenqueri.es)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cybercrab''s screen check facility**: [http://cybercrab.com/screencheck](http://cybercrab.com/screencheck)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remy Sharp''s check site**: [http://responsivepx.com](http://responsivepx.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also use bookmarklets to check to see how well our sites work on different
    devices—a couple of examples to try are at [http://codebomber.com/jquery/resizer](http://codebomber.com/jquery/resizer)
    and [http://responsive.victorcoulon.fr/](http://responsive.victorcoulon.fr/);
    it is worth noting that the current browsers already include this functionality,
    making the bookmarklets less attractive as an option.
  prefs: []
  type: TYPE_NORMAL
- en: Following best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key question we must ask ourselves is to what extent we will support the use
    of particular browsers when developing our websites. The answer to this will lie
    in monitoring analytical software, to determine which browsers are being used.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, it should show modern browsers being used, but there are still
    limited instances of old browsers in use; for example, IE6 is still being used,
    although its market share is now a tiny 0.25%, as at April 2016\. This raises
    the question of what we should support, if monitoring analytics for our sites
    shows that only a tiny percentage (that is, lower than 1%, for example) of usage
    is for older browsers, then we may take the decision to not support them if the
    effort and resources required do not justify the return from such a small market
    share.
  prefs: []
  type: TYPE_NORMAL
- en: 'This said, there are some basic tips that can help us optimize our sites:'
  prefs: []
  type: TYPE_NORMAL
- en: We should avoid using hacks where possible. Conditional comments are a better
    option, although we should regularly check and remove styles if they are no longer
    applicable (such as vendor prefixes, which no longer apply).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to use `<!DOCType html>` in your code. This will indicate to the browser
    that it should follow HTML5 rules; it will degrade automatically if the browser
    does not support HTML5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the W3C Validation Service to check our code for consistency. A better
    option though is to build this into part of the development process; we can easily
    do this with Node.js, so it can be done automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the age of modern sites, JavaScript has become an essential tool for development.
    It is all too easy to resort to using it, without really considering the options
    available. Try to avoid using JavaScript if possible. It was designed to complement
    existing code, and should not be relied on to provide core functionality. The
    state of CSS is such now that styling functionality that previously was only possible
    with JavaScript may now be feasible with CSS and provide smoother results to boot!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what performance is and what the consequences are
    if a website has poor performance. Then, we explored what factors could cause
    our web page to load slowly. In this chapter, we also learned how we can measure
    the performance of a website with the help of various tools available online,
    and covered the steps we can take to improve the performance of our websites.
    We then covered some of the best practices we can follow with relevance to the
    performance of the website.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to explore the importance of maintaining cross-browser compatibility
    and considered some of the solutions that are available to deal with cross-browser
    issues. Then, we covered the challenges that are present in testing cross-browser
    compatibility across a wide combination of available browsers and devices. Apart
    from that, we discovered how to tackle this problem and devise a strategy to get
    the maximum output. Finally, we saw some of the tools that are available online
    to test the compatibility of our website across various browser-device combinations.
    We have now reached the end of our journey through the essentials of creating
    responsive sites. We hope you enjoyed reading this book as much as we have writing
    it, and that it helps you make a start into the world of responsive design using
    little more than plain HTML and CSS.
  prefs: []
  type: TYPE_NORMAL
