- en: Animations with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Animating a todo list with ReactCSSTransitionGroup
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using react-animations library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first animation with React pose
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animations are very common in any web application. Since CSS3, animations have
    become widespread and easy to implement. The most common use of animations are
    transitions, where you can change CSS properties and define the duration or delay.
    React can handle animations using an animation add-on called `ReactCSSTransitionGroup`.
    In the following recipes, we are going to use `ReactCSSTransitionGroup` to create
    some animations. `ReactCSSTransitionGroup` is an add-on component for implementing
    basic CSS animations and transitions smoothly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Animating a todo list with ReactCSSTransitionGroup
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to animate a todo list using `ReactCSSTransitionGroup`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install the `react-addons-css-transition-group` package:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to make a Todo list with some animations:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create our `Todo` component:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File: src/components/Todo/index.jsx'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in our `List` component, we need to include `ReactCSSTransitionGroup`
    and use it as a wrapper in our list elements. We need to specify the name of our
    transition using the `transitionName` prop, and `transitionAppear` adds a transition
    at the first animation mount. By default, it is `false`:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'File: src/components/Todo/List.jsx'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, using `transitionName`, we will add some styles using the special classes
    that are created by `ReactCSSTransitionGroup`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'File: src/components/Todo/List.css'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to include the elements we want to animate inside our `ReactCSSTransitionGroup`
    component. Every time we add an item to our Todo list, we can see that our special
    classes (`.todo-enter` and `.todo-enter-active`) are being injected for a second
    to start our animation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/39d3ce5a-af0e-46ee-942a-6c6cfec5d6e8.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'And if we remove an item, we will see the `.todo-leave` and `.todo-leave-active` classes for
    a second:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff4cc9b6-789b-4149-9551-0a0cbbd8701c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: As you can see, using `ReactCSSTransitionGroup` helps us to handle the states
    of our animations. You can use this to create better animations in your React
    application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Using react-animations library
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to use the library react-animations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install the following packages:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s do some animation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to use `Radium` to create our inline styles to use our animations from
    the `react-animations` package. First, let''s create our component:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are using the `fadeIn` animation. We need to import the
    animation we want to use from `react-animations`, add the animation to our `Radium`
    styles, then use `<StyleRoot>` as a wrapper for our animation, and finally specify
    the inline style, `fadeIn`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to use another animation, for example, `bounce`, then you need
    to add the bounce animation and create a style for it:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, using animations from `react-animations` is very easy. There
    are a lot more animations:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '`bounce`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fadeIn`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fadeOut`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flash`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flip`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rollIn`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rollOut`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotateIn`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotateOut`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rubberBand`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shake`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`swing`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoomIn`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoomOut`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To see all the available animations, visit the official repository at [https://github.com/FormidableLabs/react-animations](https://github.com/FormidableLabs/react-animations).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first animation with React Pose
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Pose is a declarative motion system for HTML, SVG, and React. It is a
    very cool library with which you can do amazing animations with React.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we will need to install the following packages and update
    our `react` and `react-dom` to be `16.4.2` or higher:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create a React pose animation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create our component structure:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing we need to do is to create our first posed `div` with the
    states of our animation (`normal` and `hover`) and create a styled `div` using
    `styled-components`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to add our `StyledCircle` component into our `render` method:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we need to create some event methods, and we are going to use
    the local state to change the size of the circle and the color when the user clicks:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our first view is going to be a blue circle with the label Click me!:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d598d075-98ae-4cf2-b619-93a389c20bc1.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'If we hover over the circle, we are going to see the pose animation, which
    increases the scale of the circle:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac3f8e69-19c8-4e0f-b7a2-9f7d40f4a6d5.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'Finally, if we click on the circle, we are going to see the that our circle
    change its background color randomly:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们点击圆圈，我们会看到我们的圆圈会随机改变背景颜色：
- en: '![](assets/1eda21d4-cc03-48ea-b429-608a33aedc0f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1eda21d4-cc03-48ea-b429-608a33aedc0f.png)'
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can even combine the animations from `react-animations` library. For example,
    if we want to flip the circle when the user clicks on it, then we can do this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以结合`react-animations`库中的动画。例如，如果我们想要在用户点击圆圈时翻转它，那么我们可以这样做：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File: src/components/Animations/index.jsx'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：src/components/Animations/index.jsx
