- en: Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once an application is deployed to a production environment, monitoring is one
    of the key aspects that comes into play. Here, we need to take control of uncommon
    and unexpected behaviors; it’s essential to be aware of how the application is
    working so we can take action as soon as possible in order to solve any undesired
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter gives some recommendations with regards to the techniques and tools
    that can be used to monitor the performance of an application, bearing in mind
    technical and business metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application Monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business Monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Spring applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APM application monitoring tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Response time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every single application is created to solve specific business requirements
    and accomplish certain business goals, so it is essential to assess on a regular
    basis an application to verify whether these goals are being accomplished. As
    part of this verification process, we want to measure the health and performance
    of our application using metrics that can give us insights into the following
    factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application Monitoring**: When we are talking about the health of an application,
    it is important to know the amount of resources that are being used, such as CPU,
    memory consumption, threads, or I/O processes. Recognizing potential errors and
    bottlenecks is important to know whether or not we need to scale, tune, or refactor
    our code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business Monitoring**: These metrics are helpful to understand key business
    indicators about the business itself. For example, if we have an online store,
    we want to know whether or not we are accomplishing the established sales goals,
    or in a banking application, we would like to know how many transactions and customers
    we receive in a certain branch office, channel, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to use the banking application created in [Chapter 5](218e4202-6930-4310-9777-7e23d708a85d.xhtml),
    *Model-View-Controller Architectures*, as an example to list a number of monitoring
    concepts that can apply to it. Let's start showing how we can monitor the aforementioned
    application using the tooling that Spring Framework brings out-of-the-box.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Spring applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Framework has some built-in features for monitoring and providing metrics
    to know the health of applications. We have multiple ways to do this, so let''s
    review some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: We can use an old-fashioned approach that implies creating interceptors around
    methods to log everything we want around them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring Actuator can be used along side Spring Boot applications. Using this
    library, we can review the health of an application; it provides an easy way to
    monitor applications via HTTP requests or JMX. Additionally, we can use tools
    to index the data produced and to create graphs that are helpful to understand
    the metrics. There are plenty of options to create graphs, including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ELK Stack (ElasticSearch, Logstash, and Kibana)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring-boot-admin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prometheus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telegraph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Influx, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphana, among others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring Actuator can be integrated as part of an existing Spring Boot application
    adding the following dependency as part of the `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If we are using **Maven**, we would add the following dependency as part of
    the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Actuator supports many configurations that must be provided in the `application.properties`
    file. We are going to add some properties to this file to provide metadata, such
    as the name, description, and version of our application. Also, we are going to
    run the Actuator endpoints in another port with the security model disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, after running the application, some endpoints provided by Actuator will
    be available. Let''s review some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Health**: This endpoint provides some information in general about the application
    health in the `http://localhost:8091/health` URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8d5f15d3-6f32-492a-9935-29bbe1682df3.png)'
  prefs: []
  type: TYPE_IMG
- en: Health endpoint result
  prefs: []
  type: TYPE_NORMAL
- en: '**Info**: This endpoint provides information about the metadata of the application,
    which was previously configured in the `application.properties` file. The information
    is available at `http://localhost:8080/info`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f3815279-0a6e-48e3-b0d9-70c843c01a74.png)'
  prefs: []
  type: TYPE_IMG
- en: Info endpoint result
  prefs: []
  type: TYPE_NORMAL
- en: '**Metrics**: This provides information about the OS, JVM, threads, classes
    loaded, and memory. We can view this information at `http://localhost:8080/metrics`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ec82d481-c29c-47c5-bff4-049bc530f29f.png)'
  prefs: []
  type: TYPE_IMG
- en: Metrics endpoint result
  prefs: []
  type: TYPE_NORMAL
- en: '**Trace**: This provides information about the most recent requests made to our
    application. We can view this information at `http://localhost:8080/trace`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/21a2ccbe-974f-4563-b825-4691964aee60.png)'
  prefs: []
  type: TYPE_IMG
- en: Trace endpoint result
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to review all endpoints, we can find these in the official documentation
    of spring: [https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints).'
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in the Actuator library, we are getting snapshots of our application
    at a certain time, knowing the status and health of the application, or even tracing
    the most commonly used endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the information provided is enough. If you are looking to have graphics
    and inspect historical data, you should integrate the tools we mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Actuator also offers the ability to collect custom metrics about the
    application; this is helpful for gathering business metrics. For example, if we
    are working with an application to create savings accounts, we can collect metrics
    to know how many accounts are being created. Then, after opening more branch offices,
    we can see how many more accounts are created and figure out the impact it has
    on the business itself.
  prefs: []
  type: TYPE_NORMAL
- en: The key factor when we are collecting business metrics is to understand what
    is important for the business. To achieve this task, it is important to work together
    with business people.
  prefs: []
  type: TYPE_NORMAL
- en: 'Business metrics are also helpful for understanding the impact we generate
    after releasing new features. It also facilitates an understanding of unexpected
    behaviors or bugs. Imagine that you roll out a new application version using a
    different email provider; you should compare the number of emails that are being
    delivered after the change with the number of emails delivered before changing
    the email provider. If you find a big difference in these numbers, you will need
    to check what is happening because the difference should not be too much. If you
    want to learn how to create custom metrics, I encourage you to visit this link:
    [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html).'
  prefs: []
  type: TYPE_NORMAL
- en: There are many tools available on the market that allow us to monitor applications
    without changing the code, and these tools are referred to as **Application Performance
    Management** tools (**APM**). We are going to review how these work in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Application Performance Management (APM) tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A huge evolution has emerged in monitoring and tools since the rise of the
    cloud; there are tools and companies that just work on APM tools entirely. Several
    of them are based on the JVM and bytecode instrumentation, and today these tools
    have evolved to even measure user experiences of our applications. The most popular
    at the moment are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: New Relic ([https://newrelic.com/](https://newrelic.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Dynamics ([https://www.appdynamics.com/](https://www.appdynamics.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynatrace ([https://www.dynatrace.com/technologies/java-monitoring/spring/](https://www.dynatrace.com/technologies/java-monitoring/spring/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataDog ([https://www.datadoghq.com/](https://www.datadoghq.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these tools give us the ability to monitor our application layers, health
    (CPU, memory, threads, I/O), databases, and top SQL queries. They also allow us
    to detect bottlenecks, business indicators, and responses time. For example, we
    are going to monitor our application using New Relic.
  prefs: []
  type: TYPE_NORMAL
- en: New Relic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New Relic is a tool that provides instrumentation for our entire environment,
    not just our application. Consequently, we can monitor the entire environment
    of our applications, including factors such as databases, application servers,
    load balancers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we are going to create a trial account at the following link ([https://newrelic.com/signup](https://newrelic.com/signup)).
    After you have signed up for a New Relic account, you will be directed to the
    control panel, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54cd2652-036d-484f-80a0-6f85e5ec3ece.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to continue this process with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose to monitor applications and accept a 14-day free trial:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/791b2339-8423-4551-9197-520f2f4ebabf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Java application option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f823f831-4abe-4cc6-b023-036755c14777.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Generate a license key and download and install the agent. Here, we are going
    to create a folder name `newrelic` in the root of our application, and copy the
    content of the ZIP that was recently downloaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da07a472-7cca-4175-b9cb-f718b6bbad83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now going to replace `newrelic.yml` with our key license and application
    name, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2bfb8361-e0c0-4205-8ba1-38b837964ed2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Restart your application, including the `javaagent` parameter, as shown in
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, to run the application with the agent would appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can see our new relic dashboard with the same name (Banking App
    Monitoring Packt), which we define in our `newrelic.yaml` file. This will contain
    all the information on our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28cc6220-22e5-442e-89f0-187686a21967.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also navigate to the application several times to see more data provided
    to the APM.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then drill down on the information provided, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The response time:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e8d633dd-5851-433e-b8e0-b29a61173975.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Database metrics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6bf3a771-e500-49cb-9d5d-0ebb20db3f77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'JVM metrics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/76333a5a-d4ac-4c7b-a36c-dc211cf521bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Web transactions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/74538b32-fe33-473f-b116-97ded2ed4ae5.png)'
  prefs: []
  type: TYPE_IMG
- en: You can explore all the tabs from the left-hand menu to see more metrics of
    our applications. As we have learned, with all these tools, we can ensure the
    health of our applications and review whether we are free from problems and bottlenecks.
    You can then continue exploring the APMs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we have learned how to collect useful metrics regarding
    indicators both from a technical and business perspective. We have also learned
    how to use APMs to monitor our environment and get the information that we need
    in order to understand the health, status, and statistics of most-used transactions,
    including the response time of our applications. All this information will help
    us to maintain our applications in production, and to respond quickly to any possible
    performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to review security practices and how to write
    them using Spring.
  prefs: []
  type: TYPE_NORMAL
