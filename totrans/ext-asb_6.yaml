- en: Chapter 6. Fitting It All Together – Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the time you reach this chapter, you will have successfully created your
    own custom modules and plugins as per your requirements. Now, you might find yourself
    wondering, what next?
  prefs: []
  type: TYPE_NORMAL
- en: Ansible is a great community product. It provides a number of modules and plugins
    for everyone to use. Now that you are familiar with the Python API, have already
    written an Ansible module and probably a plugin, too, it's time to give back to
    the community. Since you had some requirements that could not be met by the native
    Ansible, chances are that other people are also in need of further help. Let's
    look at various ways in which one can give back to the community.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover how to configure Ansible to integrate your modules in
    the existing Ansible library. The chapter will also cover how you can distribute
    your modules and help improve Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To take full advantage of Ansible, it is necessary to configure Ansible properly.
    Although stock settings are sufficient for most users, power users may want to
    tweak things and make a few changes.
  prefs: []
  type: TYPE_NORMAL
- en: Global persistent settings are defined in the Ansible configuration file located
    at `/etc/ansible/ansible.cfg`. However, you can also place custom configuration
    files in the root of the Ansible play or in the home directory of the user. Settings
    can also be changed by setting environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: With so many ways to configure Ansible, an important question arises – how does
    Ansible prioritize the configuration file? How does it choose which configuration
    to use during a playbook execution?
  prefs: []
  type: TYPE_NORMAL
- en: 'In Ansible version 1.9, configurations are processed in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ANSIBLE_CONFIG`: Environment variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.cfg`: Current working directory from where Ansible is called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.ansible.cfg`: Configuration file stored in the user''s home directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/ansible/ansible.cfg`: Default configuration file in case no other configuration
    is found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible will process the configurations in the above order. Whichever configuration
    is found first will be used during execution. To keep everything clean, Ansible
    does not merge the configuration files. All the files are kept separate.
  prefs: []
  type: TYPE_NORMAL
- en: Environment configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By setting environment variables, you can override any existing configurations
    loaded from the configuration file. In the present version of Ansible, environment
    configurations take the top most priority. To find the complete list of environment
    variables supported by Ansible, you need to look into the source code. The following
    list contains a few environment variables you should know in order to get your
    modules and plugins working:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Environment variable | Default value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_ACTION_PLUGINS` | `~/.ansible/plugins/action:/usr/share/ansible/plugins/action`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_CACHE_PLUGINS` | `~/.ansible/plugins/cache:/usr/share/ansible/plugins/cache`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_CALLBACK_PLUGINS` | `~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_CONNECTION_PLUGINS` | `~/.ansible/plugins/connection:/usr/share/ansible/plugins/connection`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_LOOKUP_PLUGINS` | `~/.ansible/plugins/lookup:/usr/share/ansible/plugins/lookup`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_INVENTORY_PLUGINS` | `~/.ansible/plugins/inventory:/usr/share/ansible/plugins/inventory`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_VARS_PLUGINS` | `~/.ansible/plugins/vars:/usr/share/ansible/plugins/vars`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_FILTER_PLUGINS` | `~/.ansible/plugins/filter:/usr/share/ansible/plugins/filter`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_KEEP_REMOTE_FILES` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `ANSIBLE_PRIVATE_KEY_FILE` | `None` |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Fun fact**'
  prefs: []
  type: TYPE_NORMAL
- en: If you have cowsay installed on the management node, Ansible playbook runs will
    use cowsay and make the output more interesting. If you don't want cowsay enabled,
    simply set `nocows=0` in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to contribute to Ansible, it is important to know where and
    how to contribute and what to contribute. To reduce duplication of effort, you
    need to stay in touch with the community. There might be instances in which a
    feature you want to work on is already being worked on by someone else, or perhaps
    a bug you think you can fix is picked up by someone else and is currently being
    worked upon. Also, there may arise situations when you need some help from the
    community in finishing off some task; maybe you are stuck at some point and have
    a few unanswered questions. This is where community comes into play. Ansible has
    its own IRC channel and mailing list for such purposes.
  prefs: []
  type: TYPE_NORMAL
- en: You can join the `#ansible` channel on [irc.freenode.net](http://irc.freenode.net),
    where you can talk to the community members, discuss features, and get help. This
    is where people live chat with each other. For user who don't have an IRC client,
    they can connect through the Web UI using [https://webchat.freenode.net/](https://webchat.freenode.net/).
    However, since Ansible is a global community, not all members will be available
    around the clock, and it might so happen your question remains unanswered. If
    so, you can drop an e-mail to the mailing list where the question is more likely
    to get the attention of core developers and advanced users.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may want to join the following mailing lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The** **Ansible Project list**: [https://groups.google.com/forum/#!forum/ansible-project](https://groups.google.com/forum/#!forum/ansible-project)
    (a general user discussion mailing list for sharing Ansible tips and asking questions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The** **Ansible Development list**: [https://groups.google.com/forum/#!forum/ansible-devel](https://groups.google.com/forum/#!forum/ansible-devel)
    (discuss features in progress, suggest feature requests, get help extending Ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The** **Ansible Anounce list**: [https://groups.google.com/forum/#!forum/ansible-announce](https://groups.google.com/forum/#!forum/ansible-announce)
    (A read-only list that shares information about the new releases of Ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible is an open source project hosted on GitHub. Anyone having a GitHub account
    can contribute to the Ansible project. The project takes in contributions through
    GitHub pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: Galaxy–sharing roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a playbook for a task you want to automate helps you save time and effort
    every time you have to deploy. This can also save time for others if you can share
    the roles with the community.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible provides a great platform to share your plays. Galaxy is a platform
    where you can share your pre-packaged units of work as "roles," which can be integrated
    or dropped into the playbooks and used. Some roles can be dropped in directly,
    while others may require a bit of tweaking. What's more, that Galaxy provides
    a reliability score against each shared role. You can choose from a number of
    available roles, rate them, and comment on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Roles are hosted on GitHub. Galaxy allows integration with GitHub, and you
    can use your existing GitHub account to log into Galaxy and share the roles. To
    share your role, create a GitHub repository, clone it, and initialize a Galaxy
    role in the cloned repository. This can be done with the following bit of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will create a directory structure needed to organize the code. You can
    then use this directory structure to create an Ansible role. Once you have your
    role ready, test it in a playbook, and verify if it's working as expected. You
    might then push it to the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: To upload the code to Galaxy, you need to log in to the Galaxy platform ([https://galaxy.ansible.com](https://galaxy.ansible.com))
    using your GitHub account. By using the **Add a Role** option from the menu and
    supplying the required credentials, Galaxy will import the role from your GitHub
    repository and make it available on the Galaxy platform for the entire community.
  prefs: []
  type: TYPE_NORMAL
- en: You might also want to apply tags to your repository, which Galaxy, by default,
    treats as version numbers. This allows users to choose between different versions.
    If there are no tags specified, users will always be able to download only the
    latest available code on your GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Galaxy – best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While writing any role you may want to share through Galaxy, there are a few
    best practices that should be followed in order to ensure everything runs smoothly
    for the end user:'
  prefs: []
  type: TYPE_NORMAL
- en: Always document whatever you make and place it in the `README.md` file. This
    is the file the end user refers to while using the role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include and list all the dependencies explicitly. Never assume anything.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefix the variables with the role name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the role before you share it. The more testing you perform, the less chances
    of it being broken.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These best practices also apply to any contribution you make in general to Ansible.
    Whether you are developing a module or plugin, or are writing a role that you
    plan to share with the community, these practices ensure everything runs smoothly.
    Though it's not mandatory, it is highly recommended to follow these best practices
    in order to make the contribution easy for others, as well as to understand and
    extend later whenever required.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing modules and plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By this stage, you will have developed your own Ansible module or plugin. Now,
    you want to share it with both your friends and strangers and help them simplify
    their tasks. You might also want to collaborate on developing a module or plugin
    and require help from the general public.
  prefs: []
  type: TYPE_NORMAL
- en: One of the great developer collaboration platforms is GitHub. You can create
    a repository on GitHub and push your code to it. You might accompany your module
    code with an Ansible playbook, demonstrating how to use the module or plugin you
    just developed.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub allows people to contribute to one single project. It's usually a good
    idea to put your code online on GitHub, for it provides a number of advantages.
    Other than encouraging a collaborative nature, it provides version control, where
    you can roll back your changes if required, as well as track any changes made
    to the code base in the past. While collaborating, you might choose which pull
    request to address and which to ignore by going through the proposed change, thus
    allowing you control over your repository.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a module into Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible modules are hosted in two separate subrepositories of Ansible, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible-modules-core`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-modules-extras`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The module repository, `ansible-modules-core`, contains the most popular modules
    that are shipped with Ansible. These are the core modules that are used most and
    are essential to address basic functionalities of a system. The repository contains
    almost every essential feature required for Ansible to function properly. This
    repository does not take in module submissions directly. However, you can report
    and fix bugs if you come across any.
  prefs: []
  type: TYPE_NORMAL
- en: The module repository, `ansible-modules-extras`, is a subset of `ansible-modules`
    that contains modules of a lower priority (that is, modules that cannot be considered
    core modules). New modules are submitted to this repository. Depending on the
    popularity and completeness of the module, a module can be promoted to the core
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible, being an open source project hosted on GitHub, takes in contributions
    by means of GitHub pull requests. To get your modules into Ansible you need to
    understand how the GitHub pull request works:'
  prefs: []
  type: TYPE_NORMAL
- en: Fork the Ansible project from [https://github.com/ansible/ansible-modules-extras](https://github.com/ansible/ansible-modules-extras)
    or [https://github.com/ansible/ansible-modules-core](https://github.com/ansible/ansible-modules-core)
    to your GitHub account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File an issue on [https://github.com/ansible/ansible-modules-extras/issues](https://github.com/ansible/ansible-modules-extras/issues)
    or [https://github.com/ansible/ansible-modules-core/issues](https://github.com/ansible/ansible-modules-core/issues)
    for the feature you are tying to address. If you are trying to fix a bug, an issue
    should already exist against the bug. If not, create one and assign it to yourself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push in your module or the patch to fix a bug against the bug number you just
    created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raise a pull request to the source repository (that is, Ansible).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once done, the reviewers will verify the code, review it, and check if it addresses
    the issue. You might receive some reviews or change requests after the review
    that you'll have to fix. There might be multiple iterations before your code gets
    merged.
  prefs: []
  type: TYPE_NORMAL
- en: If your module or plugin is merged in the Ansible repository, it will be available
    to all Ansible users with the next release.
  prefs: []
  type: TYPE_NORMAL
- en: Getting plugins into Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the previous chapter, Ansible plugins are categorized as per
    their function into different groups such as action, callback, lookup, and so
    on. Unlike modules, Ansible plugins are a part of the Ansible repository itself.
    There are no different repositories like extras and core. You can directly open
    an issue in the Ansible repository, discuss it over the mailing list, and put
    up a pull request upon approval.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link lists the existing plugins in the Ansible repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins)'
  prefs: []
  type: TYPE_NORMAL
- en: Points to remember
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When submitting a new module, there are a few things one should keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Always discuss the feature you are proposing. This will help you save time and
    effort in case the feature is already being worked upon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all features you propose will be accepted. There will always be a call on
    the use case and what the module/plugin brings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's good practice to maintain the module/plugin you have written.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be active in picking up and fixing any bugs that are reported against your module.
    This will make your module more reliable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your module as generic as possible (that is, it should accept user arguments
    and adapt accordingly, providing the user with more flexibility). Although, it
    should focus on one particular task for which it was created. This increases the
    chances of acceptance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, you should be both familiar and comfortable working with the Ansible
    Python API. You may even have your own Ansible modules or plugins that you want
    to share with the community. The following are a few best practices you should
    follow when sharing your modules, plugins, and roles with the community:'
  prefs: []
  type: TYPE_NORMAL
- en: Always test your module before submitting a pull request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your modules as generic as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always document whatever you create, be it a module, plugin, or an Ansible role
    that you share across Galaxy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List down any dependencies explicitly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep the discussion going on the mailing list and IRC channels. Being an active
    member gets you more visibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered topics like configuring your Ansible environment and how
    to get your modules and plugins into the Ansible repository. It also touched upon
    how you can distribute your module through Git. This chapter also introduced you
    to the Galaxy platform, a service provided by Ansible to share your roles. The
    chapter also gave pointers on best practices and various things you should keep
    in mind while submitting your module.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will take you through a series of scenarios where Ansible can
    come in handy. The chapter will also integrate everything that has been covered
    thus far in the previous chapters, combine it all, and present a scenario that
    will give you an idea of how you can use Ansible to its full effect.
  prefs: []
  type: TYPE_NORMAL
