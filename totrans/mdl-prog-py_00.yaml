- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modular programming is a way of organizing your program's source code. By organizing
    your code into modules (Python source files) and packages (collections of modules),
    and then importing those modules and packages into your program, you can keep
    your programs logically organized and keep potential problems to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: As your program grows and changes, you will often have to rewrite or expand
    certain parts of your code. Modular programming techniques help to manage these
    changes, minimizing side-effects, and keeping your code under control.
  prefs: []
  type: TYPE_NORMAL
- en: As you work with modular programming techniques, you will learn a number of
    common patterns for using modules and packages, including the divide and conquer
    approach to programming, the use of abstraction and encapsulation, and the idea
    of writing extensible modules.
  prefs: []
  type: TYPE_NORMAL
- en: Modular programming techniques are also a great way of sharing your code, either
    by making it available for other people to use or by reusing your code in another
    program. Using popular tools such as GitHub and the Python Package Index, you
    will learn how to publish your code, as well as use code written by other people.
  prefs: []
  type: TYPE_NORMAL
- en: Putting all these techniques together, you will learn how apply "modular thinking"
    to create better programs. You will see how modules can be used to deal with complexity
    and change in a large program and how modular programming really is the foundation
    of good programming technique.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the book, you will have an excellent understanding of how modules
    and packages work in Python and how to use them to create high-quality and robust
    software that can be shared with others.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Introducing Modular Programming"), *Introducing
    Modular Programming*, looks at the ways you can use Python modules and packages
    to help organize your programs, why it is important to use modular techniques,
    and how modular programming helps you to deal with the ongoing process of programming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Writing Your First Modular Program"), *Writing
    Your First Modular Program*, introduces the *divide and conquer* approach to programming
    and applies this technique to the process of building an inventory control system
    based on modular programming principles.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Using Modules and Packages"), *Using Modules
    and Packages*, covers the nuts and bolts of modular programming using Python,
    including nested packages, package and module initialization techniques, relative
    imports, choosing what gets imported, and how to deal with circular references.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Using Modules for Real-World Programming"),
    *Using Modules for Real-World Programming*, uses the implementation of a chart-generation
    library to show how modular techniques help to deal with changing requirements
    in the best possible way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Working with Module Patterns"), *Working
    with Module Patterns*, looks at a number of standard patterns for working with
    modules and packages, including the divide and conquer technique, abstraction,
    encapsulation, wrappers, and how to write extensible modules using dynamic imports,
    plugins, and hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Creating Reusable Modules"), *Creating Reusable
    Modules*, shows how to design and create modules and packages that are intended
    to be shared with other people.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Advanced Module Techniques"), *Advanced Module
    Techniques*, looks at some of the more distinctive aspects of modular programming
    in Python, including optional and local imports, tweaking the module search path,
    "gotchas" to be aware of, how to use modules and packages for rapid application
    development, working with package globals, package configuration, and package
    data files.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Testing and Deploying Modules"), *Testing
    and Deploying Modules*, examines the concept of unit testing, how to prepare your
    modules and packages for publication, how to upload and publish your work, and
    how to make use of modules and packages written by other people.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Modular Programming as a Foundation for Good
    Programming Technique"), *Modular Programming as a Foundation for Good Programming
    Technique*, shows how modular techniques help to deal with the ongoing process
    of programming by dealing with change and managing complexity, and how modular
    programming techniques help you to be a more effective programmer.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All you need to follow through the examples in this book is a computer running
    any recent version of Python. While the examples all use Python 3, they can easily
    be adapted to work with Python 2 only a few changes.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at the beginner to intermediate level Python programmer who
    wishes to use modular programming techniques to create high-quality and well organized
    programs. While the reader must know the basics of Python, no prior knowledge
    of modular programming is required.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "
    This one-line program would be saved in a file on disk, typically named something
    like `hello.py` "'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the **Next** button moves you to the next screen."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
