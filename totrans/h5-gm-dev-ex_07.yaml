- en: Chapter 7. Using Local Storage to Store Game Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Local storage is a new specification from HTML5\. It allows a website to store
    information in the browser locally and access the stored data later. This is a
    useful feature in game development because we can use it as a memory slot to save
    any game data locally in a web browser.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We are going to add game data storing in the CSS3 memory matching game we built
    in *Chapter 3, Building* a *Memory Matching Game in CSS3*. Besides storing and
    loading the game data, we will also notify the player for breaking a record with
    a nice 3D ribbon with pure CSS3 styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Storing data by using HTML5 local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the object in the local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifying players for breaking a new record with a nice ribbon effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the entire game progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the final result we will create through this
    chapter. So, let''s get on with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Local Storage to Store Game Data](img/1260_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Storing data by using HTML5 local storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember the CSS3 memory matching game we made in *Chapter 3?* Imagine now we
    have published our game and players are trying their best to perform well in the
    game.
  prefs: []
  type: TYPE_NORMAL
- en: We want to show the players whether they played better or worse than the last
    time. We will save the latest score and inform players whether they are better
    or not this time by comparing the scores.
  prefs: []
  type: TYPE_NORMAL
- en: They may feel proud when performing better. This may make them addicted and
    they may keep trying to get higher scores.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a game over dialog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before actually saving anything in the local storage, we need a game over screen.
    We have made a few games in previous chapters. We made a Ping Pong game, memory
    matching game, Untangle puzzle game, and a music game. In these games, we did
    not create any game over screen. Imagine now we are playing the CSS3 memory matching
    game that we built in *Chapter 3*. We successfully match and remove all cards.
    Once we finish, a game over screen pops up and shows the time we utilized to complete
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Creating a game over dialog with the elapsed played time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will continue with the code from the memory matching game we made in *Chapter
    3*. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the CSS3 matching game folder as our working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download a background image from the following URL (we will use it as the background
    of the pop up):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://gamedesign.cc/html5games/popup_bg.jpg](http://gamedesign.cc/html5games/popup_bg.jpg
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Place the image in the `images` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `index.html` into any text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need a font for the game over pop up. Add the following font embedding
    CSS into the `head` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Before the `game` section, we add a `div` named `timer` to show the elapsed
    playing time. In addition, we add a new `popup` section containing the HTML markup
    of the pop-up dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will now move on to the style sheet. As it is just for styling and not related
    to our logic yet, we can simply copy the `matchgame.css` file from `matching_game_with_game_over`
    in the code example bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is time to edit the game logic part. Open the `html5games.matchgame.js` file
    in an editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the jQuery ready function, we need a variable to store the elapsed time
    of the game. Then, we create a timer to count the game every second as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add a `countTimer` function which will be executed every second. It displays
    the elapsed seconds in the minute and second format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `removeTookCards` function which we wrote earlier, add the following
    highlighted code that executes the game over logic after removing all cards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At last, we create the following `gameover` function. It stops the counting
    timer, displays the elapsed time in the game over pop up, and finally shows the
    pop up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, save all files and open the game in a browser. Try finishing the memory
    matching game and the game over screen will pop up, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Creating a game over dialog with the elapsed played time](img/1260_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have used the CSS3 transition animation to show the game over pop up. We
    benchmark the score by using the time a player utilized to finish the game.
  prefs: []
  type: TYPE_NORMAL
- en: Saving scores in the browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine now we are going to display how well the player played the last time.
    The game over screen includes the elapsed time as the last score alongside the
    current game score. Players can then see how well they do this time compared to
    last time.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Saving the game score
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to add a few markups in the `popup` section to display the last
    score. Add the following HTML in the `popup` section in `index.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then, we open the `html5games.matchgame.js` to modify some game logic in the
    `gameover` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following highlighted code in the `gameover` function. It loads the
    saved score from local storage and displays it as the score last time. Then, save
    the current score in the local storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It is now time to save all files and test the game in the browser. When you
    finish the game for the first time, the last score should be `00:00`. Then, try
    to finish the game for the second time. The game over pop up will show the elapsed
    time you played the last time. The following screenshot shows the game over screen
    with the current and last score:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Saving the game score](img/1260_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just built a basic scoring system that compares a player's score with his/her
    last score.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and loading data with local storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can store data by using the `setItem` function from the `localStorage` object.
    The following table shows the usage of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '| Argument | Definition | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `key` | The key is the name of the record that we used to identify an entry.
    | The key is a string and each record has a unique key. Writing a new value to
    an existing key overwrites the old value. |'
  prefs: []
  type: TYPE_TB
- en: '| `value` | The value is any data which will be stored. | It can be any data,
    but the final storage is in a string. We will discuss this shortly. |'
  prefs: []
  type: TYPE_TB
- en: In our example, we save the game elapsed time as the score with the following
    code by using the key `last-elapsed-item:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Complementary to `setItem`, we get the stored data by using the `getItem` function
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The function returns the stored value of the given key. It returns `null` when
    trying to get a non-existent key. This can be used to check whether we have stored
    any data for a specific key.
  prefs: []
  type: TYPE_NORMAL
- en: The local storage saves the string value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The local storage stores data in a key-value pair. The key and value are both
    strings. If we save numbers, Boolean, or any type other than string, then it will
    convert the value into a string while saving.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, problems occur when we load a saved value from the local storage. The
    loaded value is a string regardless of the type we are saving. We need to explicitly
    parse the value into the correct type before using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we save a floating number into the local storage, we need to
    use the `parseFloat` function when loading it. The following code snippet shows
    how we can use `parseFloat` to retrieve a stored floating number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the manipulation may be incorrect if we forget
    to convert the `gameScore` from string to float. For instance, if we add the `gameScore`
    by 1 without the `parseFloat` function, the result will be **13.2341** instead
    of **14.234**. So, be sure to convert the value from local storage to its correct
    type.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Size limitation of local storage**'
  prefs: []
  type: TYPE_NORMAL
- en: There is a size limitation on the data stored through `localStorage` for each
    domain. This size limitation may be slightly different in different browsers.
    Normally, the size limitation is 5 MB. If the limit is exceeded, then the browser
    throws a `QUOTA_EXCEEDED_ERR` exception when setting a key-value into `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: Treating the local storage object as an associated array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides using the `setItem` and `getItem` functions, we can treat the `localStorage`
    object as an associated array and access the stored entries by using square brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we can replace the following code with the latter version:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `setItem` and `getItem:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Access `localStorage` as an array as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Saving objects in the local storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, imagine that we are saving not only the score, but also the date and time
    when the ranking is created. We can either save two separate keys for the score
    and date time of playing, or pack the two values into one object and store it
    in the local storage.
  prefs: []
  type: TYPE_NORMAL
- en: We will pack all the game data into one object and store it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Saving the time alongside the score
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, open the `index.html` file from our CSS3 memory matching game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the HTML markup with the last score by the following HTML (it shows
    both scores and the date time in the game over pop up):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The HTML markup is now ready. We will move on to the game logic. Open the `html5games.matchgame.js`
    file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will modify the `gameover` function. Add the following highlighted code
    to the `gameover` function. It gets the current date time when the game ends and
    packs a formatted date time with elapsed time together into local storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We will save the files and open the game in a web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we finish the game for the first time, we will get a screen similar to
    the following screenshot which will show our game score and state that there are
    no previous records:![Time for action Saving the time alongside the score](img/1260_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now try reloading the page and play the game again. When we finish the game
    for the second time, the game over dialog will show our saved record. The following
    screenshot shows how it should look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Saving the time alongside the score](img/1260_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just used a `Date` object in JavaScript to get the current date and
    time when the game is over. In addition, we packed the game over date and time
    and the game elapsed time in one object and saved it into the local storage. The
    saved object is encoded in a JSON string. It will also load the last saved date
    and time and the game elapsed time from the storage and parse it back to the JavaScript
    object from a string.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the current date and time in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Date` object in JavaScript is used to working with date and time. When
    we create an instance from the `Date` object, by default it stores the current
    date and time. Therefore, we can easily get the current date and time information
    by using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As we display the date and time in a human-friendly format, we also need to
    add zero padding to minutes and seconds when they are less than 10\. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table lists some useful functions in the `Date` object to get
    the date and time:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `getFullYear` | Returns the year in four digits |'
  prefs: []
  type: TYPE_TB
- en: '| `getMonth` | Returns the month in integer, starting from 0 (Jan is 0 and
    Dec is 11) |'
  prefs: []
  type: TYPE_TB
- en: '| `getDate` | Returns the day of the month, starting from 1 |'
  prefs: []
  type: TYPE_TB
- en: '| `getDay` | Returns the day of the week, starting from 0 (Sunday is 0 and
    Saturday is 6) |'
  prefs: []
  type: TYPE_TB
- en: '| `getHours` | Returns the hour, starting from 0 to 23 |'
  prefs: []
  type: TYPE_TB
- en: '| `getMinutes` | Returns the minutes |'
  prefs: []
  type: TYPE_TB
- en: '| `getSeconds` | Returns the seconds |'
  prefs: []
  type: TYPE_TB
- en: '| `getMilliseconds` | Returns the milliseconds in 3 digits |'
  prefs: []
  type: TYPE_TB
- en: '| `getTime` | Returns the number of milliseconds since 1 Jan, 1970 00:00 |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Mozilla Developer Network provides a detailed reference for using the `Date`
    object at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date](http://https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)'
  prefs: []
  type: TYPE_NORMAL
- en: Using the native JSON to encode an object into a string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used JSON to represent the game level data in *Chapter 4, Building an Untangle
    Game with Canvas and Drawing API.*
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON is an object notation format that is friendly for machines to parse and
    generate. In this example, we packed the final elapsed time and the date and time
    into an object. Then, we encoded the object into JSON. Modern web browsers come
    with a native JSON support. We can easily encode any JavaScript object into JSON
    by using the `stringify` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, we only use the first parameter for the `stringify` function. It
    is the object that we are going to encode as a string. The following code snippet
    demonstrates the result of an encoded JavaScript object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `stringify` method can parse objects with data structure into a string well.
    However, it cannot convert anything from an object into a string. For instance,
    it will return an error if we try to pass a DOM element into it. It will return
    the string representing the date if we pass a Date object. Alternatively, it will
    drop all methods definition of the parsing object.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a stored object from a JSON string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The complete form of **JSON** is **JavaScript Object Notation**. From the name,
    we know that it uses the syntax from JavaScript to represent an object. Therefore,
    it is very easy to parse a JSON formatted string back to a JavaScript object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how we can use the parse function in the JSON
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can open the console in the Web Inspector to test the JSON JavaScript functions.
    The following screenshot shows the running result of the code snippets we just
    discussed when encoding an object and parsing them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading a stored object from a JSON string](img/1260_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inspecting the local storage in a console window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After we have saved something in the local storage, we may want to know what
    is exactly saved before we write the loading part. We can inspect what we have
    saved by using the storage panel in the Web Inspector. It lists all the saved
    key-value pairs under the same domain. The following screenshot shows that we
    have the **last-score** saved with value **{"savedTime":"23/2/2011 19:27:02","score":23}**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value is the result of the `JSON.stringify` function we used to encode
    the object into JSON. You may also try saving an object directly into local storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspecting the local storage in a console window](img/1260_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides `localStorage`, there are other storage approaches that were not discussed.
    These approaches include the **Web SQL Database** ([http://www.w3.org/TR/webdatabase/](http://www.w3.org/TR/webdatabase/)),
    which uses SQLite to store data, and **IndexedDB** ([https://developer.mozilla.org/en/IndexedDB](https://developer.mozilla.org/en/IndexedDB)).
  prefs: []
  type: TYPE_NORMAL
- en: Notifying players of breaking a new record with a nice ribbon effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that we want to encourage players by informing them that they broke
    a new record compared to the last score. We want to show a ribbon with `New Record`
    text on it. Thanks to the new CSS3 properties, we can create a ribbon effect completely
    in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Creating a ribbon in CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new record ribbon and display it when a player breaks his/her
    last score. So, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, open `index.html` where we will add the ribbon HTML markup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following highlighted HTML right after `popup-box` and before `popup-box-content:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to focus on the style sheet. The entire ribbon effect is done
    in CSS. Open the `matchgame.css` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `popup-box` styling, we need to add a relative position to it. We do
    this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to add the following styles that create the ribbon effect to
    the CSS file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we need to modify the game over logic a little bit. Open the `html5games.matchgame.js`
    file and locate the `gameover` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `gameover` function which compares the current
    score with the last score to determine the new record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We will test the game in a web browser. Try finishing a game slowly and then
    finish another game fast. When you break the last score, the game over pop up
    shows a nice **NEW RECORD** ribbon, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Creating a ribbon in CSS3](img/1260_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have just created a ribbon effect in a pure CSS3 style with some help from
    JavaScript to show and hide it. The ribbon is composited by a little triangle
    overlaid by a rectangle, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1260_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, how can we create a triangle in CSS? We can create a triangle by setting
    both width and height to 0 and drawing only one border. The size of the triangle
    is then decided by the border width. The following code is for the triangle CSS
    we used in our new record ribbon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following PVM Garage website provides a detailed explanation on pure CSS3
    ribbon usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.pvmgarage.com/2010/01/how-to-create-depth-and-nice-3d-ribbons-only-using-css3/](http://www.pvmgarage.com/2010/01/how-to-create-depth-and-nice-3d-ribbons-only-using-css3/)'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero Saving and comparing only to the fastest time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each time the game finishes, it compares the last score with the current score.
    Then, it saves the current score.
  prefs: []
  type: TYPE_NORMAL
- en: How about changing the code to save the highest score and show the new record
    ribbon when breaking the highest score?
  prefs: []
  type: TYPE_NORMAL
- en: Saving the entire game progress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have enhanced our CSS3 memory matching game by adding a game over screen
    and storing the game record. Imagine now that a player is in the mid game and
    accidentally closes the web browser. Once the player opens the game again, the
    game starts from the beginning and the game that the player was playing is lost.
    With the local storage, we can encode the entire game data into JSON and store
    them. In this way, players can resume their game later.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the game progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to pack the game data into one object and save it into the local
    storage every second.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Saving all essential game data in the local storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will continue work with our CSS3 memory matching game:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `html5games.matchgame.js` JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code at the top of the JavaScript file after declaring the
    `matchingGame` variable. This code creates an object named `savingObject` to save
    the array of deck and removed cards and the current elapsed time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the jQuery function, add the following highlighted code. It clones the order
    of the deck to the `savingObject`. In addition, it assigns an index to each card
    in the DOM data attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a `countTimer` function that executes every second. We add the following
    highlighted code in the `countTimer` function. It saves the current elapsed time
    in the `savingObject` and also saves the object in the local storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The game removes cards when the player finds a matching pair. We replace the
    original `$(".card-removed").remove()`; code with the following highlighted code
    in the `removeTookCards` function. It remembers which cards are removed in the
    `savingObject:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to remove the saved game data in the local storage when the game is
    over. Add the following code in the `gameover` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'At last, we have a function to save the `savingObject` in the local storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We have modified the code a lot and it is now time to test the game in a web
    browser. After the game runs, try clearing several matching cards. Then, open
    the storage panel in the Web Inspector. The local storage should contain an entry
    similar to the one shown in the following screenshot. It is a record with a key
    `savingObject` and a value with a long string in a JSON format. The JSON string
    contains the shuffled deck, removed cards, and the current elapsed time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Saving all essential game data in the local storage](img/1260_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just entered all essential game data into an object named `savingObject`.
    This `savingObject` contains all information that we need to recreate the game
    later. It includes the order of cards, removed cards, and the current elapsed
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we saved `savingObject` in `localStorage` on each second. The object
    is encoded into JSON using the `stringify` function we used earlier in this chapter.
    Then, we recreated the game by parsing the JSON string from the local storage.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a record from the local storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to remove the saved record when the game is over. Otherwise, the new
    game will not start. Local storage provides a `remoteItem` function to remove
    a specific record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we use the function to remove the record with the given key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to remove all stored records, then you can use the `localStorage.clear()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning an array in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We cloned the shuffled deck in `savingObject`, so that we could use the order
    of the deck to recreate the cards when we resumed the game. However, we cannot
    copy an array by assigning the array to another variable. The following code fails
    to copy an array A to array B:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `slice` function provides an easy way to clone an array with only primitive
    types of elements. We can clone an array with the `slice` function as long as
    it does not contain another array or object as an element. The following code
    successfully clones an array A to B:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `slice` function is normally used to create a new array by selecting a
    range of elements from an existing array. When using the `slice` function without
    any arguments, it clones the entire array. The Mozilla Developer Network provides
    a detailed usage on the `slice` function at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice](http://https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice)'
  prefs: []
  type: TYPE_NORMAL
- en: Resuming the game progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have saved the game progress, but have not yet written the logic for resuming
    the game. So, let's move on to the resuming part.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Resuming a game from the local storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `html5games.matchgame.js` JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the jQuery ready function, we used the saved order of deck in the previous
    game instead of shuffling a new deck. Add the following highlighted code into
    the `ready` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After initializing the cards in the ready function, we remove cards which were
    removed in the previous game. We also restore the saved elapsed time from the
    saved value. Add the following highlighted code in the jQuery ready function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create the following function to retrieve `savingObject` from the
    local storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all files and open the game in web a browser. Try playing the game by
    removing several matching cards. Then, close the browser window and open the game
    again. The game should resume from the state where we closed the window, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Resuming a game from the local storage](img/1260_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just finished the game loading part by parsing the saved JSON string of the
    entire game status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we restored the elapsed time and order of deck from the loaded `savingObject`.
    Restoring these two properties is simply variable assigning. The tricky part is
    recreating the card removing. In the game saving section, we assigned an index
    to each card DOM by **custom data attribute** `data-card-index`. We stored the
    index of each removed card when saving the game, so we can know which cards are
    removed when loading the game. Then, we can remove those cards when the game sets
    up. The following code removes the cards in a jQuery game `ready` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tracking the storage changes with the storage event**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, we may want to listen to the changes of the `localStorage`. We can
    do that by listening to the `storage` event. It is fired when anything is changed
    in the `localStorage`. The following link from *Dive into HTML5* provides a detailed
    discussion on how we can use the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://diveintohtml5.org/storage.html#storage-event](http://diveintohtml5.org/storage.html#storage-event)'
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz Using local storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider whether each of the following statements is true or not:'
  prefs: []
  type: TYPE_NORMAL
- en: We can save an integer or object directly in the local storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can save the data of an object into the local storage by encoding them into
    a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use `localStorage["hello"] = "world"` to save the value "world" with
    key "hello" in the local storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned a lot in this chapter about using the local storage to save the game
    data in a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Saving and retrieving basic data into the key-value pair local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding an object into the JSON formatted string and parsing the string back
    to a JavaScript object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the entire game progress, so the game can resume even if left mid way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also created a nice 3D ribbon as a **new record** badge in pure CSS3 styling.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned about improving our previous games by using the local
    storage, we are ready to move on to an advanced feature named **WebSocket** which
    connects players together in a real time interaction.
  prefs: []
  type: TYPE_NORMAL
