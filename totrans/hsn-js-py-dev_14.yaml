- en: What Is Node.js?
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've examined the use of JavaScript on the frontend, let's dive into
    its role in the "JavaScript everywhere" paradigm using Node.js. We discussed Node.js
    in [Chapter 2](94fc54d0-7655-4e18-ac2b-762a0752afaa.xhtml), *Can We Use JavaScript
    Server-Side? Sure!*, so now it's time to dive deeper into how we can use it to
    create rich server-side applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: History and usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation and usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grammar and structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello, World!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be prepared to work with the code provided in the `Chapter-11` directory of
    the repository: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-11](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-11).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  prefs: []
  type: TYPE_NORMAL
- en: History and usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First released in 2009, Node.js has been widely adopted in the industry by major
    corporations and smaller companies alike. There are literally thousands of packages
    available for use in Node.js, creating a rich ecosystem of users and a community
    of developers. As with any open source project, community support is crucial to
    the adoption and longevity of the technology.
  prefs: []
  type: TYPE_NORMAL
- en: From a technical standpoint, Node.js is a runtime environment in a single-threaded
    event loop. What this means in practice is that it can handle thousands upon thousands
    of concurrent connections without the overhead of switching between contexts.
    For those who are more familiar with other architectural patterns, a single thread
    might seem counterintuitive, and it used to be held up as an example of Node.js's
    perceived breakpoint. However, it can be argued that the stability and reliability
    of a Node.js system has shown this paradigm to be sustainable. There are ways
    to augment a server's capacity for handling requests, but it should be noted that
    it's a bit more nuanced than just throwing additional hardware resources at the
    problem. How to scale Node.js is a bit out of scope for this book, but there are
    techniques involving the underlying library, called libuv.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the biggest feather in Node.js's cap might be its powering
    of Twitter. According to SimilarTech, its 4.3 billion monthly visits stand as
    a testament to its power. Now, I'm sure the Twitter team has done some incredible
    architecting over the years to power the platform, and we rarely see the famous
    Twitter "fail whale" anymore; I would argue that the reliance on Node.js is a
    good thing that has helped provide sustainability and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Onward to using it!
  prefs: []
  type: TYPE_NORMAL
- en: Installation and usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to install Node.js is to use the installers provided for you
    at [https://nodejs.org](https://nodejs.org). These packages will guide you through
    the installation of Node.js on your system. Be sure to also install `npm`, Node's
    package manager. You can refer to [Chapter 3](4257dcd7-525c-4ca9-9695-d9cfcff438d7.xhtml), *Nitty-Gritty
    Grammar*, for more details on installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s give it a go:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `node`. You will see a simple `>` to indicate that Node.js is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `console.log("Hi!")` and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's really as simple as that! Exit the command prompt either by hitting *Ctrl
    + C* twice or typing `.exit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, that''s fairly basic. Let''s do something a bit more interesting. Here''s
    the contents of `chapter-11/guessing-game/guessing-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Run the program with `node guessing-game.js`. As you can probably tell from
    the code, the program will select a random number between 1 and 10 and then ask
    you to guess it. You can enter numbers at the command prompt in order to guess
    the number.
  prefs: []
  type: TYPE_NORMAL
- en: Let's break down this example in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Grammar and structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The great thing about Node.js is that you already know how to write it! Take
    this for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **JavaScript** | **Node.js** |'
  prefs: []
  type: TYPE_TB
- en: '| **`console.log("Hello!")`** | **`console.log("Hello!")`** |'
  prefs: []
  type: TYPE_TB
- en: 'That''s not a trick: it''s identical. Node.js is syntactically almost identical
    to browser-based JavaScript, right down to the fight between ES5 and ES6, as we''ve
    discussed previously. In my experience, there is still a preponderance of ES5-style
    code in use with Node.js, so you will see code with `var` instead of `let` or
    `const`, as well as a healthy use of semicolons. You can review [Chapter 3](4257dcd7-525c-4ca9-9695-d9cfcff438d7.xhtml), *Nitty-Gritty
    Grammar* for more information on these distinctions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our guessing game example, we see one thing that is new to us – the first
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const readline = require(''readline'')`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js is a *modular* system, which means that not all parts of the language
    will be brought in at once. Rather, modules will be included when the `require()`
    statement is issued. Some of these modules will be built-in to Node.js, as `readline`
    is, and some will be installed via npm (more to come on that part). We use the
    `readline.createInterface()` method to create a way to use our input and output,
    and then the rest of the code of our guessing game program should make some sense.
    It''s simply going to ask the question over and over until the number entered
    equals the random number generated by the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at an example that reads files from the filesystem, which
    is something we can't do from an ordinary client-side web application.
  prefs: []
  type: TYPE_NORMAL
- en: Customer lookup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Take a look at the customer-lookup directory, [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-11/customer-lookup](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-11/customer-lookup),
    and run the script with `node index.js`. It''s fairly simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of this will look familiar, like the `readline` interface. Here''s something
    new that we''re working with, though: `const fs = require(''fs'')`. This is bringing
    in the filesystem module so that we can work with files stored on the filesystem.
    If you look in the data directory, you will find four basic JSON files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re doing three things in the `getCustomers()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `readdirSync` to get a list of files in the data directory. When working
    with filesystems, you can interact with the system in a synchronous or asynchronous
    manner, similar to interacting with APIs and Ajax. For ease of use in this example,
    we'll be working with the synchronous filesystem calls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now `files` will be a listing of the files in the data directory. Loop through
    the files and store the contents in the `data` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the parsed JSON into the `customers` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far so good. The `ask()` function should also be easy to understand, as we're
    just seeing whether the number entered by the user exists in the array and then
    returning the data in the associated file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at how we can use an open source project in Node.js to achieve
    a (rather silly) goal: creating a text-art representation of a photo.'
  prefs: []
  type: TYPE_NORMAL
- en: ASCII art and packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll be working with the instructions in the GitHub repository at [https://www.npmjs.com/package/asciify-image](https://www.npmjs.com/package/asciify-image):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7553f1bb-1fe2-4e98-bde5-4baa497be6b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 - An ASCII art representation of me!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the installation step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory called `ascii-art`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cd ascii-art`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm init`. You can accept the defaults provided by npm.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install asciify-image`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s have some fun:'
  prefs: []
  type: TYPE_NORMAL
- en: Place an image in the `ascii-art` directory, such as a JPEG sized to no more
    than 200 x 200 pixels or so. Name it `image.jpg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create `index.js` in the directory and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Execute the program with `node index.js` and view your wonderful artwork! Depending
    on your terminal colors, you may have to work with some of the options to change
    colors around to display on a light background. These are documented in the GitHub
    repository linked previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What have we shown here? First, we used npm to initialize a project and then
    install a dependency. If you noticed, running these created some files and directories
    for you. Your directory structure should look close to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `node_modules` directory will have a lot more files inside it. If you're
    familiar with source control such as Git, you'll know that the `node_modules`
    directory should always be *ignored* and not committed to source control.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at `package.json`, which will look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we dissect this a bit, we'll find that this npm entry point into our program
    is actually rather simple. There's some metadata about the project, an object
    of dependencies with their version, and some scripts that we can use to control
    our project.
  prefs: []
  type: TYPE_NORMAL
- en: If you're familiar with npm, you may have used the `npm start` command to run
    a project instead of manually entering `node`. However, in our `package.json`,
    we don't have a start script. Let's add one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `scripts` object to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to pay attention to your commas, as this is valid JSON and will
    break if commas are improperly used. Now, to start our program, we only have to
    type `npm start`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a very basic example of npm scripts. It is conventional in Node.js
    to use `package.json` to control all of the scripts for building and testing.
    You can name your commands as you''d like and execute them like this: `npm run
    my-fun-command`.'
  prefs: []
  type: TYPE_NORMAL
- en: For our next trick, we'll create a "Hello, World!" application from scratch.
    It will, however, do a bit more than just say hello.
  prefs: []
  type: TYPE_NORMAL
- en: Hello, World!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new directory called `hello-world` and initialize a node project with
    `npm init`, similar to how we did previously. In [Chapter 13](57b3ea57-b927-47f6-b07e-d1dd11796e1a.xhtml),* Using
    Express*, we'll work with Express, a popular web server for Node.js. However,
    for now, we'll use a very bare-bones method of creating a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start off your `index.js` script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As with `fs` and `readline`, `http` is built in to Node, so we don''t have
    to use `npm install` to get it. Rather, this will work out of the box. Add a start
    script in your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then fire it up!
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/080f19a7-30c4-4f87-b7a9-7e6da46b72fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 - Executing npm start
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, our output isn''t super helpful, but if we read our code, we can see that
    we''ve done this: "Create an HTTP server listening on port `8080`. Send a 200
    OK message and output ''Hello, World!''". Let''s now pull up a browser and go
    to [http://localhost:8080](http://localhost:8080). We should see a simple page
    greeting us.'
  prefs: []
  type: TYPE_NORMAL
- en: Great! Easy enough so far. Stop your server with *Ctrl* + *C* and let's code
    some more.
  prefs: []
  type: TYPE_NORMAL
- en: What if we could use the ASCII art generator that we used in the previous example
    to ask the user for input and then display the image in the browser? Let's try
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to run `npm install asciify-image`, and then let''s try this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s similar to what we did previously to output to the command line, but
    we''re using the `http` server `res` object to send a reply. Start your server
    with `npm start` and let''s see what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f58391fa-224c-4ea7-9119-01b6d66894ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 - Raw output
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, that''s not even close to what we wanted to see. Here''s the rub: what
    we sent to the browser was *ANSI-encoded text*, not actual HTML. We''ll have to
    do a little work to convert it. Quit the server again and…'
  prefs: []
  type: TYPE_NORMAL
- en: 'One moment. Why do we have to keep starting and stopping the server? It turns
    out we *don''t* *really* have to. There are tools to reload our server when the
    file changes. Let''s install one called **supervisor**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm install supervisor`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify your `package.json` start script to read `supervisor index.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now start your server with `npm start` and, as you code, the server will restart
    itself upon saving, making development much faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the code. What we''re going to need is a package to convert ANSI to
    HTML. Install `ansi-to-html` with `npm install` and let''s get going:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you refresh the browser, you'll see that we're getting closer!
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de16bcff-7512-4268-8e40-11e230153d8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 - It's HTML!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we really just need a little CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add that in our `index.js` and concatenate it to the output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now refresh and we should see our image!
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6ca08eed-b3e4-4b0e-8305-121ad05fde11.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 - ANSI to HTML
  prefs: []
  type: TYPE_NORMAL
- en: Fantastic! It's a little more exciting than just printing out "Hello, World!",
    don't you think?
  prefs: []
  type: TYPE_NORMAL
- en: Let's build on our Node.js skills by revisiting our Pokémon game from [Chapter
    7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events, Event-Driven Design,
    and APIs*, but this time, in Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Pokéapi, revisited
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to make a little terminal **command-line interface** (**CLI**) game
    using the Pokéapi ([https://pokeapi.co](https://pokeapi.co)). Since we have the
    basic logic of the game at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code),
    we're just going to get the beginnings going and then you can finish the game
    as a challenge by porting over the logic from the frontend to the backend with
    Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start with a fresh directory and begin a new project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir pokecli`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm init`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install asciify-image axios terminal-kit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the Pokéapi logo from [https://pokeapi.co](https://pokeapi.co) to a new
    `img` directory with Save Image in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a new `index.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `package.json` with a start script, as we''ve done previously: `"start":
    "node index.js"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your file structure should look like this, minus the `node_modules` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s begin working on our `index.js`. First off, we need to include the packages
    we''re using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, since we''re going to use the API to retrieve and store our Pokémon,
    let''s create a new object to store them at the top level so that we''ll have
    access to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re going to work with Terminal Kit ([https://www.npmjs.com/package/terminal-kit](https://www.npmjs.com/package/terminal-kit))
    to create a better CLI experience than the standard `console.log` output and `readline`
    input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What we're doing here is first creating a terminate function that will exit
    our Node.js program after stopping `term` from capturing input, for cleanup purposes.
    The next method specifies that when we hit *Ctrl* + *C*, the program will call
    the `terminate()` function to exit. *This is an important part of our program,
    as `term` does not exit with Ctrl + C* *by default.* Lastly, we tell `term` to
    capture input.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start our game, begin with a splash screen of the Pokéapi logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can do this directly using `term` instead of the `asciify-image` library
    (don''t worry, we''ll use that later):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c7fb371b-261a-4275-bb5f-30662794ae8f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 - Pokéapi splash screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, write a function to retrieve information from the API using the Axios
    Ajax library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Axios ([https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios))
    is a package to make requests easier than `fetch` by reducing the number of promises
    required. As we saw in previous chapters, `fetch` is powerful, but does require
    a bit of chaining of promise resolutions to operate. This time, let's use Axios.
    Note that the function is an `async` function, as it'll return a promise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start our game with a `start()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We'll keep it simple. Note that this function also uses the async/await pattern
    and calls our function, which uses the API to retrieve a list of Pokémon. At this
    point, it would be a good idea to test our program by using `console.log()` to
    output the value of `pokemon`. You'll need to invoke the `start()` function in
    your program. You should see nice JSON data of 50 Pokémon.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `start()` function, we''ll ask the player to choose their Pokémon with
    a message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll use our `pokemon` variable to create a grid menu with `term` to
    ask our player which Pokémon they''d like, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read the documentation on `term` to see more about what the options
    are for grid menus. We should run our code now, so in order to do that, add an
    invocation to the `start()` function at the end of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run our code with `npm start`, we''ll see this new addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8ce5459-6acd-49ca-b053-4544769c5316.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 - Menu
  prefs: []
  type: TYPE_NORMAL
- en: 'With the arrow keys, we can navigate around the grid and choose our Pokémon
    by hitting *Enter*. In our code, we''re assigning to our `pokes` object''s two
    entries: `player` and `computer`. Now, `computer` will be a randomly selected
    entry from our `pokemon` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll need more than the name and URL of our Pokémon to play, so we''re going
    to make a helper function. Add this to our `start` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll write the `createPokemon` function like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Let's unpack what this function is doing. First, we're going to get the information
    about our Pokémon (once for the player and once for the computer) from the API.
    The Pokémon moves section is a little more complicated, due to the fact that the
    gameplay is complex. For our purposes, we're simply going to assign the first
    two moves possible for our Pokémon in our `pokes` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the image, we''re using a small helper function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re almost done with the beginnings of our game! We need to add a few lines
    to our `gridMenu` method in `start`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now we can play!
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dfe94d19-f122-47cf-8d43-a51ccd88f404.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 - Introducing your Pokémon!
  prefs: []
  type: TYPE_NORMAL
- en: 'The program continues with the computer''s choice of Pokémon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/602352a9-38c0-457e-b178-03b787b84a97.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 - The scary enemy Pokémon
  prefs: []
  type: TYPE_NORMAL
- en: For right now, we haven't included any actual gameplay using the moves and hitpoints.
    That can be a challenge for you to complete the `play()` function based on the
    logic from [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml),* Events, Event-Driven
    Design, and API**s*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code is here: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-11/pokecli](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-11/pokecli).'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! We've done way more than "Hello, World!".
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've learned in this chapter that Node.js is a full-fledged programming language,
    capable of doing pretty much anything backend-related. We'll get into databases
    with Node.js in [Chapter 18](b36b27d1-f6cf-4382-ac73-f21a1aeabd3d.xhtml)*, Node.js
    and MongoDB*, but, for the meantime, we can rest assured that it can do what we'd
    expect from a modern programming language.
  prefs: []
  type: TYPE_NORMAL
- en: The great thing about Node.js is that its grammar and structure *is* regular
    JavaScript! A few of the terms are different, but all in all, if you can read
    and write JavaScript, you can read and write Node.js. As with every language,
    there are differences in terminology and usage, but the fact is that Node.js and
    JavaScript are the same language!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discuss Node.js and Python and where certain choices
    make sense for using one versus the other.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information, you can refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'libuv: [https://en.wikipedia.org/wiki/Libuv](https://en.wikipedia.org/wiki/Libuv)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Market Share and Web Usage Statistics: [https://www.similartech.com/technologies/nodejs](https://www.similartech.com/technologies/nodejs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
