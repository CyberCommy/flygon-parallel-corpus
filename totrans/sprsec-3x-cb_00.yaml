- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Security is a security layer that comes with Spring framework. Spring
    framework is an active open source project which has made further development
    of the application easier. It provides various layers to handle different scenarios
    and challenges that we face during the design and implementation life cycle of
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Security layer of Spring framework is very loosely coupled with the
    Spring framework, hence it can be easily integrated with other applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this book we will be integrating Spring Security with other frameworks and
    we will also demonstrate it with coded examples.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Basic Security"), *Basic Security*, covers
    the basics of security in a J2ee application. It introduces to the reader the
    various mechanisms of applying security to authenticate and authorize the users
    to the application. It also explains container management security.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Spring Security with Struts 2"), *Spring
    Security with Struts 2*, provides steps to integrate Spring Security in a Struts
    2 application. It demonstrates database authentication and LDAP authentication
    and authorization with other security mechanism offered by Spring framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Spring Security with JSF"), *Spring Security
    with JSF*, explains all the aspects of Spring Security with a JSF application.
    It shows how to make the JSF application communicate with Spring Security using
    listeners.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Spring Security with Grails"), *Spring Security
    with Grails*, demonstrates how the grails application can seamlessly integrate
    with Spring Security. We have also shown how Spring Security UI offers screens
    to create users and roles. We have demonstrated the use of Spring Security tags
    in GSP pages.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Spring Security with GWT"), *Spring Security
    with GWT*, focuses on the GWT framework. The GWT framework is integrated with
    GWT and Spring Security can be used to authenticate and authorize users accessing
    the GWT application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Spring Security with Vaadin"), *Spring Security
    with Vaadin*, puts forward various options for integrating Spring Security with
    the Vaadin framework. We have created a sample product catalog application to
    demonstrate Spring Security integration with the Vaadin framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Spring Security with Wicket"), *Spring Security
    with Wicket*, demonstrates the integration of the wicket framework with Spring
    Security. Wicket itself has an authentication and authorization framework inbuilt,
    but the challenge was to make wicket use an external framework for authentication
    and authorization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Spring Security with ORM and NoSQL DB"),
    *Spring Security with ORM and NoSQL DB*, explains Hibernate and MongoDB in authentication
    and authorization using Spring Security API classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Spring Security with Spring Social"), *Spring
    Security with Spring Social*, introduces Spring Social, which is a framework developed
    by Spring Source to provide integration to social networking sites. Spring Social
    intern uses Spring Security to do the authentication and authorization. The chapter
    demonstrates how Spring Social and Spring Security integrate with each other by
    demonstrating a Facebook login application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Spring Security with Spring Web Services"),
    *Spring Security with WebServices*, explains various options to secure RESTFUL
    and SOAP based webservices.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. More on Spring Security"), *More on Spring
    Security*, is a miscellaneous chapter. It explains integrating Spring Security
    with the Kaptcha API and providing multiple input authentications.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to complete all the recipes in this book you will need an understanding
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: JBOSS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netbeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache DS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for all Spring-based application developers as well as Java web
    developers who wish to implement robust security mechanisms into web application
    development using Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: Readers are assumed to have a working knowledge of Java web application development,
    a basic understanding of the Spring framework, and some knowledge of the fundamentals
    of the Spring Security framework architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Working knowledge of other web frameworks such as Grails and so on would be
    an added advantage to exploit the whole breadth of recipes provided in this book,
    but this is not mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text are shown as follows: "We can include other contexts through
    the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "After clicking on **submit** we need to get an authenticated session."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
