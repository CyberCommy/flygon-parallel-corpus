- en: Chapter 4. Building Fast and Responsive Websites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Building pages using basic HTML5 markup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CSS3 features for progressive enhancement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying responsive design with media query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dynamic loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying user agent detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding mobile bookmark bubble to the home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Contact page with textarea and autogrow forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making buttons with instant response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding WebKit chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a mobile sitemap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On mobile devices, bandwidth is not always as good as on a desktop computer.
    If you are on a slow 3G network, things can get loaded much slower than on a Wi-Fi
    hotspot. Even for Wi-Fi connections, many mobile browsers process slower than
    desktop computers. So when we create mobile sites, they have to be fast and responsive.
  prefs: []
  type: TYPE_NORMAL
- en: 'From this chapter onwards, we will also start to introduce HTML5 features.
    HTML5 is a set of technologies consisting of semantics, new CSS rules and properties,
    and new JavaScript APIs which could be used to build better structured web pages
    and powerful web applications. The following are the eight main HTML5 features:'
  prefs: []
  type: TYPE_NORMAL
- en: Semantics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline and storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multimedia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3D, graphics, and effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance and integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all of these features are mobile exclusive; some are related more to mobile
    web, while some are more general for both mobile and desktop web. We will talk
    about each of these features and see how best they could help with our mobile
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the examples created using the new semantic tags and CSS3, we will
    discuss many ways to fully leverage what the mobile browser is offering and how
    to build a website using these unique features.
  prefs: []
  type: TYPE_NORMAL
- en: Building pages using HTML5 semantics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 introduced a richer set of tags; these tags give meaning to structure.
    Semantics is a fundamental aspect of HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: We won't be going through all the tags here, but will cover some of the most
    commonly used ones.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's create a new HTML file, and name it `ch04r01.html`. Let's create
    a fictional site about music.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our HTML document, type in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `header` element is often used for `h1` to `h6` elements; it could appear
    as the head of the entire page or the head of any block-level element. It often
    contains a title, subtitle, or tagline.
  prefs: []
  type: TYPE_NORMAL
- en: '`<header>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `nav` element represents navigation for a document. The `nav` element is
    a section containing links to other documents or to parts within the current document.
  prefs: []
  type: TYPE_NORMAL
- en: Not all groups of links on a page need to be in a `nav` element. It's only groups
    of primary or secondary navigation links. In particular, it is common for footers
    to have a list of links to various key parts of a site, but the footer element
    is more appropriate in such cases.
  prefs: []
  type: TYPE_NORMAL
- en: '`<nav>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `footer` element represents the "footer" of a document or section of a document.
    The footer element typically contains metadata about its enclosing section, such
    as who wrote it, links to related documents, copyright data, and so on. Contact
    information for the section given in a footer should be marked up using the address
    element.
  prefs: []
  type: TYPE_NORMAL
- en: '`<footer>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `small` element can be used for small print. It is not intended to present
    the main focus of the page. The small element should not be used for lengthy paragraphs
    or sections of text. It is only intended for short text such as copyright information.
  prefs: []
  type: TYPE_NORMAL
- en: '`<small>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Semantics is more than just a richer set of tags. What we need is more than
    just more meaningful tags. To extend beyond tags, we could also add extra semantics
    that are machine-readable; data that browsers, scripts, or robots can understand,
    enabling a more useful, data-driven web for both programs and your users. These
    semantics are: **RDFa (Resource Description Framework in attributes), Microdata**,
    and **Microformats**.'
  prefs: []
  type: TYPE_NORMAL
- en: RDFa
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'RDFa provides a set of machine-readable HTML attributes. By using RDFa, authors
    could turn existing human-readable information into machine-readable data without
    repeating content. The latest spec can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/rdfa-in-html/](http://www.w3.org/TR/rdfa-in-html/).'
  prefs: []
  type: TYPE_NORMAL
- en: Microdata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Microdata uses attributes to define groups of name-value pairs of data. You
    could learn more about it at: [http://html5doctor.com/microdata/](http://html5doctor.com/microdata/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can dig deeper into microdata by reading the W3C Working Draft at: [http://www.w3.org/TR/microdata/](http://www.w3.org/TR/microdata/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also read the W3C Editor''s Draft at: [http://dev.w3.org/html5/md/](http://dev.w3.org/html5/md/).'
  prefs: []
  type: TYPE_NORMAL
- en: Microformats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Microformats are designed for human''s first and machine''s second. There are
    currently 34 microformats specs, some are published, and some are drafts. You
    can learn more about them at: [http://html5doctor.com/microformats/](http://html5doctor.com/microformats/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Using HTML5 on mobile web* in [Chapter 1](ch01.html "Chapter 1. HTML5 and
    the Mobile Web"),*HTML5 and the Mobile Web*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Making HTML5 render cross-browser* in [Chapter 1](ch01.html "Chapter 1. HTML5
    and the Mobile Web"),*HTML5 and the Mobile Web*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CSS3 features for progressive enhancement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 enhances web applications and websites using a wide range of styles and
    effects. With CSS3, one can create a set of rich UI that is imageless. On mobile,
    fewer images means faster loading, which is one way to boost performance. With
    the wide support of CSS3 on most modern smartphone browsers and polyfills for
    fallback (polyfills are used as fallback to make HTML5 features work on browsers
    that don't support HTML5 natively), it's not just safe but necessary to start
    using CSS3!
  prefs: []
  type: TYPE_NORMAL
- en: '![Using CSS3 features for progressive enhancement](img/1963_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's style the page created in the previous example. First copy `ch04r01.html`
    and rename it as `ch04r02.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add in the following style rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'By running this code in the browser, here is what we can see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we used CSS3 gradients to style the header element. Traditionally,
    to create a gradient like the previous example, one would have to use Photoshop
    or Illustrator, but now you can create it using purely CSS!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'By looking at each aforementioned rule, we can see that different browsers
    use different CSS rules for gradients. There are six different variations just
    to make sure it''s cross-browser compatible. You must be thinking: "Oh, man, it''s
    pretty time consuming to take care of each browser." Don''t worry, this rule isn''t
    typed out manually. The **Ultimate CSS Gradient Generator** comes to the rescue!
    A powerful Photoshop-like CSS gradient editor from ColorZilla can help you make
    it painless to create CSS3 gradients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you take IE9 and below into consideration, CSS3 PIE ([http://css3pie.com/](http://css3pie.com/))
    can be used for support.
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading `PIE.htc`, include it in your CSS using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Supported features include:'
  prefs: []
  type: TYPE_NORMAL
- en: border-radius
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: box-shadow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: border-image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3 backgrounds (`-pie-background`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGBA color values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PIE custom properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding CSS3 gradients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Jeffrey Way*, editor at nettuts, has an excellent article about CSS3 gradients.
    You can view it at: [http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-understanding-css3-gradients/.](http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-understanding-css3-gradients/.)'
  prefs: []
  type: TYPE_NORMAL
- en: CSS3, please!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*CSS3 Please!*, by *Paul Irish*, has the latest syntax on gradients and many
    other CSS3 features at: [http://css3please.com/](http://css3please.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Using HTML5 on mobile web* in [Chapter 1](ch01.html "Chapter 1. HTML5 and
    the Mobile Web")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying responsive design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design is one of the most important concepts in recent mobile development.
    It emphasizes the concept that the browser should respond to the screen/browser
    resize to render differently. A mobile first responsive design could make pages
    degrade gracefully on desktop browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '*So why do we need responsive web design?*'
  prefs: []
  type: TYPE_NORMAL
- en: When we apply fixed layout on a desktop web page, there are often whitespaces
    on the left or right of the screen depending on the browser screen size. Mobile
    browsers also come with different sizes, and with limited viewport space, every
    pixel is vital, so it's important to utilize every pixel available on the screen.
    To eliminate unnecessary whitespaces on the left or right of the page, responsive
    design is used.
  prefs: []
  type: TYPE_NORMAL
- en: '*How could media queries help with responsive design?*'
  prefs: []
  type: TYPE_NORMAL
- en: Media queries are used to style content based on the screen size update, so
    for the same HTML element, there could be two separate rules applied. Which one
    is rendered depends on the size of the browser viewport.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will use an HTML5 polyfill named `respond.js`. It is created
    by *Scott Jehl* (from the jQuery Mobile team). It's located at `ch04_code/js`
    in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's create an HTML document named `ch04r03.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code in HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you render the page on a mobile device, this page will look exactly the
    same as the previous recipe. But if you render it in a desktop browser, it will
    look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the top of the file, we used **Modernizr** to first detect if Media Queries
    are supported by the current browser. If not, we will load `respond.min.js:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing, you need to have the `/*/mediaquery*/` comment at the
    end of the rule for it to work. This might be improved in future versions of `respond.js:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the Mobile Boilerplate site, I have explained further about Media Queries,
    and you can find the slides at: [http://html5boilerplate.com/mobile/](http://html5boilerplate.com/mobile/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Andy Clarke* created *320 and up* which is also based on the idea of responsive
    design. You can download it at: [http://stuffandnonsense.co.uk/projects/320andup/](http://stuffandnonsense.co.uk/projects/320andup/).'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing polyfills script loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: Script loading is important to any browser, but more so for mobile devices because
    of the low bandwidth. Modernizr comes with a dynamic loading solution.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's create an HTML document and name it `ch03r04.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enter the following code in your code editor, and run it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing, Modernizr 2.0 Preview was in Beta 1\. In this beta release,
    there are two great new features. One is that you can choose to customize the
    features that you want to detect. The other great feature is that you can have
    `yepnope.js` (also known as `Modernizr.load` by *Alex Sexton* and *Ralph Holzmann)*.
    `Yepnope.js` provides a dynamic JavaScript loader, and you can learn more about
    it in the *There's more* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With Modernizr, we could first detect if a feature already exists or not in
    the current user agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If it doesn''t exist, we will load the `shim geolocation.js` using `yepnope`.
    And on completion, we could append the latitude and longitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a couple of optional resources that will be helpful to developers.
    Modernizr test suite is one of them. It is useful in helping developers know at
    a glance what features are supported on a certain device. You can find out more
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://modernizr.github.com/Modernizr/test/index.html](http://modernizr.github.com/Modernizr/test/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: yepnope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'yepnope is an asynchronous conditional resource loader that''s super-fast and
    allows you to load only the scripts that your users need. To find out more about
    it, go to: [http://yepnopejs.com/](http://yepnopejs.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Using CSS3 features for progressive enhancement*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying user agent detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: When developing a mobile site, it's good to have user agent detection. This
    could help you with redirection script or help you to determine if you want to
    load/not to load something based on user agent.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s see how you could tell if a user could redirect from one site
    to another based on user agent detection. There are a couple of ways to do this:
    You could do this in the server config, in your server-side programming language,
    or use it from the frontend JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can download the redirection script from: [http://detectmobilebrowser.com/](http://detectmobilebrowser.com/).
    It comes with many different versions. In this example, let''s use the Apache
    config `.htaccess`.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you download the file and open it, you will see script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To redirect a desktop site to a mobile site, one could change the `http://example.com/mobile`
    to your site address.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User agent detection is not only useful for redirecting sites, it's also useful
    when you are trying to determine if something should be loaded in the first place,
    based on the user agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'When building the Mobile Boilerplate site, I used the JavaScript version of
    the detection script to determine if the site should render the embedded content
    based on the user agent (mobile or desktop):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With this script for desktop browsers, the slides are loaded and displayed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1963_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the mobile version, it is not displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1963_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Methods of mobile browser detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An article on mobile tuts explains different methods of mobile browser detection:
    [http://mobile.tutsplus.com/tutorials/mobile-web-apps/mobile- browser-detection/](http://mobile.tutsplus.com/tutorials/mobile-web-apps/mobile).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding mobile bookmark bubble to the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: iOS'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapters, we have talked about the ability to bookmark your
    site on certain mobile devices. Although this is a pretty cool feature to bring
    web apps a step closer to native apps, there is one issue with it: there isn''t
    an API you can use to call the bookmark action, so many users simply are not aware
    of such a feature on their phone. To tackle this issue, a couple of frameworks
    provide a bookmark bubble using CSS and JavaScript. The script adds a promo bubble
    to the bottom of your web app page, asking users to bookmark the web app to their
    device''s home screen.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned, many frameworks provide this feature, but for simplicity''s sake,
    let''s use one that is standalone. Google released an open source library named
    *The Mobile Bookmark Bubble* for this task. First, let''s download it at: [http://code.google.com/p/mobile-bookmark-bubble/](http://code.google.com/p/mobile-bookmark-bubble/).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The library comes with a `sample.js`. Just include both `bookmark_bubble.js`
    and the `sample.js` in any webpage created; you would then see something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The library uses HTML5 local storage to track whether the promo has already
    been displayed, to avoid constantly nagging users. The current implementation
    of this library specifically targets Mobile Safari, the web browser used on iPhone
    and iPad devices.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Enabling iPhone start screen in full screen mode* in [Chapter 2](ch02.html
    "Chapter 2. Mobile Setup and Optimization")'
  prefs: []
  type: TYPE_NORMAL
- en: Building Contact page with textarea and autogrow forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: On native apps like SMS, the textarea grows automatically. On mobile web, if
    you create a textarea, you will realize it is a fixed size. When the lines of
    text you type exceed the textarea height, it becomes very hard to see the text.
    In this example, we will see how we could create a textarea that autogrows when
    you are typing in more lines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s create an HTML document and name it `ch04r05.html`. In this example,
    we will use `helper.js` in Mobile Boilerplate: [https://github.com/h5bp/ mobile-boilerplate](http://github.com/h5bp/)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter this code in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of how it renders in Palm webOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the script, we have key-up event listener. This will detect if the textarea
    height has changed. We measure the height of the content and if it's changed,
    we will change the CSS style of the textarea to increase the height.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The original concept is from Google''s Code blog. You can read more about it
    at: [http://googlecode.blogspot.com/2009/07/gmail-for-mobile-html5 -series.html](http://googlecode.blogspot.com/2009/07/gmail-for-mobile-html5).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Making buttons with instant response*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making buttons with instant response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: iOS, Android'
  prefs: []
  type: TYPE_NORMAL
- en: On a mobile device browser, button response can be slightly slower than on a
    native application. On mobile browsers, there is a `touchstart` event. By detecting
    this event instead of the click event, it will make the clicking faster.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will use a function in Mobile Boilerplate. Create a file
    called `ch04r06.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code will create a form with a submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is the excerpt of the fast button function, and here we will see
    how the function works.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top, we have the main function defined. This is only used if `addEventListener`
    is supported, where it listens to `touchstart` and `click` events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onTouchStart` method is used to listen to `touchmove` and `touchend` events.
    `stopPropagation` is used to stop the propagation of the event in the listeners,
    so that it stops bubbling up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`touchmove` is used to test if the user is dragging. If users drag past 10
    px, we will reset it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code prevents ghost clicks and invokes the actual click handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can read more about fast button at Google''s blog. It explains in detail
    the background and theory behind the idea at: [http://code.google.com/mobile/articles/
    fast_buttons.html](http://code.google.com/mobile/articles/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Building Contact page with textarea and autogrow forms*'
  prefs: []
  type: TYPE_NORMAL
- en: Hiding WebKit chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: iOS, Android'
  prefs: []
  type: TYPE_NORMAL
- en: The URL bar at the top of mobile Safari on iOS and Android uses a large space.
    Many developers will hide it on page load as mobile real estate is limited. Every
    pixel is important and, by hiding the URL bar, it helps you to leverage every
    pixel on the screen to maximize the display area.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's create an HTML document and name it `ch04r07.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you render it in the browser, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now uncomment the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the content again and you can see the chrome is now hidden, allowing
    the footer to display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the script inside Boilerplate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'It detects if there is any hash in the URL. If there is, we will stop running
    the script because it means there is an inline anchor. If there isn''t any hash,
    we will wait for a second and if there isn''t scrolling, Android uses 1 px y pos
    for hiding, while it''s 0 in iOS. The script normalizes the two. It''s made by
    *Scott Jehl* at: [https://gist.github.com/1183357](http://gist.github.com/1183357).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also included in Mobile Boilerplate at: [https://github.com/h5bp/mobile-boilerplate/blob/master/js/mylibs/helper.js](http://github.com/h5bp/mobile-boilerplate/blob/master/js/mylibs/helper.js).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Building Contact page with textarea and autogrow forms*'
  prefs: []
  type: TYPE_NORMAL
- en: Building a mobile sitemap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target device: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: Many developers are familiar with Google Sitemap. As the biggest search engine,
    making sure it gets our content is very important. For mobile SEO purposes, Google
    came up with **Mobile Sitemap**. Google recommends that people update their mobile
    sitemaps to the format described next.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's create an XML document and name it `sitemap.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can add the following code to the XML document. For the particular site
    you have, the URL should be the URL of your pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: All the URLs are enclosed inside`<loc></loc>`.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have included`<mobile:mobile/>`. Otherwise, sites will not be
    properly crawled.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sitemaps follow a particular schema; the aforementioned XML schema is used to
    tell Google search engine the location of the mobile web page. Normally, if a
    site is built using a CMS system, there should be a way to auto-generate the URLs,
    and they should all be listed within`<loc></loc>`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mobile sitemap cannot contain desktop-only URLs. However, it can contain content
    for both desktop and mobile.
  prefs: []
  type: TYPE_NORMAL
- en: For websites with dedicated mobile content and a dedicated URL, you may direct
    users from `example.com` to `m.example.com`. In this case, use a 301 redirect
    for both users and Googlebot-Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: If you serve all types of content from `example.com`, this is not considered
    cloaking by Google.
  prefs: []
  type: TYPE_NORMAL
- en: Google and mobile-friendly site building
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the Google Webmaster site, there is a blog post about how to make websites
    mobile friendly: [http://googlewebmastercentral.blogspot.com/2011/02/making-websites-mobile-friendly.html](http://googlewebmastercentral.blogspot.com/2011/02/making-websites-mobile-friendly.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Google and mobile site indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is another blog on Google Webmaster site, which talks about how to help
    Google index your mobile site: [http://googlewebmastercentral.blogspot.com/2009/](http://googlewebmastercentral.blogspot.com/2009/)'
  prefs: []
  type: TYPE_NORMAL
