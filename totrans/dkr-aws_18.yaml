- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, Container and Docker Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – the Docker client communicates via the Docker API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – the Docker Engine runs natively on Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – Docker images are published to Docker registries for download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to enable the **Expose daemon on tcp://localhost:2375 without TLS**
    setting under **General** settings, and ensure the DOCKER_HOST environment variable
    is set to **localhost:2375** wherever you run the Docker client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to add the `USER_BASE/bin` path to your `PATH` environment variable. 
    You can determine the `USER_BASE` portion by running the `python -m site --user-base` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2, Building Applications Using Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – you use the `FROM` and `AS` directives to define multi-stage Dockerfiles –
    for example, `FROM nginx AS build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – by default, the `docker-compose up` command does not fail with an error
    of any of the services started by the command fails.  You can use the `--exit-code-from`
    flag to indicate whether a specific service failure should cause the `docker-compose
    up` command to fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must use the `docker-compose up` command if you want Docker Compose to wait
    until a service_healthy condition is met.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should use a port-mapping of just `8000`. This will create a dynamic port
    mapping, where the Docker Engine will select an available port from the ephemeral
    port range on the Docker Engine operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Makefile requires recipe commands to be intended with a single Tab character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `$(shell <command>)` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should add the test recipe to the `.PHONY` target, for example, `.PHONY:
    test`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `build` and `image` properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3, Getting Started with AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you should set up an administrative IAM user to perform administrative
    actions on your account.  The root account should only be used for billing or
    emergency access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – the AWS best practice is to create IAM roles that define a set of IAM
    permissions that apply to one or more resources.  You should then grant IAM users/groups
    the ability to assume a given role or set of roles as applicable to your use cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AdministratorAccess.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pip install awscli --user`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you must store an access key ID and a secret access key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `~/.aws/credentials` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to add the `mfa_serial` parameter to the profile and specify the ARN
    of the MFA device for the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No – CloudFormation always attempts to create any new resources successfully
    before removing old resources.  In this scenario, because you have defined a fixed
    Name value, CloudFormation will not be able to create a new resource with the
    same name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4, Introduction to ECS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ECS cluster, ECS task definition, and ECS service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: YAML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – when using static port mappings, you can only have one instance of a
    given static port mapping per ECS container instance (assuming a single network
    interface).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – the ECS CLI is recommended for sandbox/test environments only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would create an ECS task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – ECS task definitions are immutable and a given revision of a task definition
    cannot be modified.  You can, however, create a new revision of a given ECS task
    definition that is based off the previous revision but includes changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you need to run `curl localhost:51678/v1/metadata`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5, Publishing Docker Images Using ECR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`aws ecr get-login`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – at the time of writing, ECR only supports private registries
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ECR life cycle policies – see [https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you can use both ECR resource policies and/or IAM policies to configure
    access to ECR from the same account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – it is possible (although not best practice) to use ECR resource policies
    to grant access to IAM principals, such as IAM roles in the same account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – you must configure ECR resource policies in the source account, and IAM
    policies in the remote account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6, Building Custom ECS Container Instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `variables` section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you can (and should) reference environment variable values for your
    AWS credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you can use the manifest post processor ([https://www.packer.io/docs/post-processors/manifest.html](https://www.packer.io/docs/post-processors/manifest.html))
    to capture the AMI ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, an 8 GB operating system partition and a 22 GB device-mapper logical
    volume is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: File provisioner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cloud init startup script may be attempting to run package updates on the
    EC2 instance.  This will fail after a lengthy timeout if there is no public internet
    connectivity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7, Creating ECS Clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – EC2 autoscaling groups only support dynamic IP addressing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Base64 encoding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `AWS::Region` pseudo-parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – the `Ref` intrinsic function can refer to both resources and parameters
    in a CloudFormation template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to first run `cfn-init` to download the CloudFormation Init metadata,
    and then `cfn-signal` to notify CloudFormation the result of running `cfn-init`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to ensure that you are writing the name of the ECS cluster that each
    instance should join to `/etc/ecs/ecs.config` in the UserData script – for example, `echo
    "ECS_CLUSTER=<cluster-name>" > /etc/ecs/ecs.config`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – this command is only used to create stacks.  You should use the `aws
    cloudformation deploy` command to create and update stacks as required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ECS agent on each instance cannot communicate with the ECS service API,
    which at the time of writing is only available as a public endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8, Deploying Applications Using ECS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Listener.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – a target group can only accept registrations once the associated application
    load-balancer listener has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `AWS::EC2::SecurityGroupIngress` and `AWS::EC2::SecurityGroupEgress` resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should mark the `essential` property on the short-lived container definition
    as `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `DependsOn` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CREATE`, `UPDATE`, and `DELETE`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IAM role associated with the Lambda function does not have the permissions
    to create a log stream for the Lambda function log group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9, Managing Secrets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – the KMS service allows you to use AWS-created keys as well as your own
    private keys
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A KMS alias
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CloudFormation Exports
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you can recover the secret for a configurable period of time, up to
    a maximum of 30 days
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The AWS CLI and `jq` utility
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must grant the `kms:Decrypt` permission for the KMS key that was used to
    encrypt the secret value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `NoEcho` property
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `AWS_DEFAULT_REGION` environment variable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10, Isolating Network Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use either the `awsvpc` (recommended) or `host` networking mode, which
    ensure your containers will obtain an IP address from the attached EC2 instance
    Elastic Network Interface (ENI).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – the `awsvpc` network mode is required for ECS task networking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to ensure the security groups configured for your ECS service permit
    access from the load-balancers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You enable ECS task networking for an ECS task definition, however your containers
    fail on startup with an error that states they are unable to reach a location
    that is located on the internet. How can you resolve this issue?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two – see [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One – a t2.micro supports a maximum of two ENIs, however, one ENI must be reserved
    for operating-system and ECS-agent communications.  Task-networking only allows
    a single task definition per ENI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 10 – given you can have a maximum of 1 ECS task definition running in task-networking
    mode (see previous answer) and you can run up to 10 containers in a single ECS
    task definition (see [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_limits.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_limits.html)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must use the IP target type when using the awsvpc network mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should remove the loadBalancers property from the ECS service definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 11, Managing the ECS Infrastructure Life Cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – you are responsible for invoking and managing ECS container-instance
    draining.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`EC2_INSTANCE_LAUNCHING` and `EC2_INSTANCE_TERMINATING`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ABANDON` or `CONTINUE`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you can publish life cycle hooks to SNS, SQS, or CloudWatch Events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is likely that your Lambda function is failing due to reaching the maximum
    function-execution timeout of 5 minutes, meaning the life cycle hook will never
    complete and eventually times out. You should ensure your Lambda function republishes
    the life cycle hook if the function execution-timeout is about to be reached,
    which will automatically re-invoke your function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should configure the `UpdatePolicy` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `MinSuccessfulInstancesPercent` property to 100.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Lambda permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 12, ECS Auto Scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – you are responsible for autoscaling your ECS container instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EC2 autoscaling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application Auto Scaling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the `memoryReservation` parameter with a value of 300 and the `memory`
    parameter with a value of 1,024 .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Divide the ECS container-instance CPU-unit allocation evenly across each ECS
    task (that is, configure each task with a CPU allocation of 333 units).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Three.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should disable autoscaling during rolling updates. You can do this by configuring
    the `AutoScalingRollingUpdate.SuspendProcesses` property of the CloudFormation
    `UpdatePolicy` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zero tasks – based upon the current state of the cluster, one ECS task is running
    on each instance.  Given each task has a static port mapping to TCP port `80`,
    you cannot schedule another task as all ports are in use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Four – you should use the worst-case scenario of 500 MB memory per container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 13, Continuously Delivering ECS Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`buildspec.yml`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – CodeBuild uses containers and includes its own agent to run build scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker in Docker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CloudFormation Change Sets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cloudformation.amazonaws.com
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure your build script logs into ECR before attempting to push the image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow the `codebuild.amazonaws.com` service principal to have pull access to
    the repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the container is running with the privileged flag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 14, Fargate and ECS Service Discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only the `awsvpc` networking mode is supported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you must ensure the ECS agent can communicate via the ENI allocated
    to your Fargate ECS task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to ensure the IAM role referenced by the ExecutionRoleArn property
    of the task definition permits access to the ECR repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No – Fargate only supports CloudWatch logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – ECS service discovery uses Route53 zones to publish service-registration
    information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A service discovery namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must configure a supported CPU/memory configuration when configuring Fargate
    ECS task definitions.  See [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html)
    for supported configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: UDP Port `2000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – traces must be published to an X-Ray daemon running in your environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 15, Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – Elastic Beanstalk supports single-container and multi-container Docker
    applications
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Dockerrun.aws.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add IAM permissions to pull ECR images to the virtual machine instance role
    used by your Elastic Beanstalk EC2 instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – Elastic Beanstalk uses bind mounts for volumes, which assign root:root
    permissions, causing non-root containers to fail when writing to the volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you can set the `leader_only` property to true in the `container_commands` key so
    it runs a command on only one Elastic Beanstalk instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – the eb ssh command is used to establish SSH access to Elastic Beanstalk
    EC2 instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 16, Docker Swarm in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docker service create`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False – Docker Swarm includes two node types: master and slave.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – Docker for AWS provides integration with classic AWS elastic load-balancers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – the Cloudstore AWS volume plugin creates an EBS-backed volume when the
    backing is set to relocatable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – because the EBS volumes are in different availability zones, a snapshot
    will first be created of the original volume, and then a new volume created from
    the snapshot will then be attached to the new database service container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`--with-registry-auth`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to install a system component that will automatically refresh Docker
    credentials periodically, such as [https://github.com/mRoca/docker-swarm-aws-ecr-auth](https://github.com/mRoca/docker-swarm-aws-ecr-auth).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Version 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – you should configure the restart policy as either `never` or `on-failure`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 17, Elastic Kubernetes Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True – for Docker CE 18.06 and higher
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the custom command string in the `args` property (this is the equivalent
    of the CMD directive in a Dockerfile)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False – Kubernetes includes two node types: manager and worker'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – at the time or writing, Kubernetes supported integration with classic
    Elastic Load Balancers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: kube-proxy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A job
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – EKS manages the Kubernetes manager nodes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None – there is no default storage class in EKS, you must create your own
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the task as in initContainer in the pod
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
