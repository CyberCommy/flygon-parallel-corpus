- en: Chapter 2. Building a To-do List with Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using the Laravel PHP framework and jQuery to build
    a to-do list with Ajax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through out this chapter, we''ll show you the basics of **RESTful controllers**,
    **RESTful routing**, and **Request types**. The list of topics covered in this
    chapter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and migrating our to-do list's database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a to-do list's model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting data to the database with Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the list from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to allow only Ajax requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and migrating our to-do list's database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know from the previous chapter, migrations are very helpful to control
    development steps. We'll use migrations again in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our first migration, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When you run this command, **Artisan** will generate a migration to generate
    a database table named `todos`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we should edit the migration file for the necessary database table columns.
    When you open the folder `migration` in `app/database/` with a file manager, you
    will see the migration file under it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open and edit the file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To build a simple to-do list, we need five columns:'
  prefs: []
  type: TYPE_NORMAL
- en: The `id` column will store ID numbers of to-do tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `title` column will store a to-do task's title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `status` column will store the status of each task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `created_at` and `updated_at` columns will store the created and updated
    dates of tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you write `$table->timestamps()` in the migration file, Laravel's `migration`
  prefs: []
  type: TYPE_NORMAL
- en: 'class automatically creates `created_at` and `updated_at` columns. As you know
    from [Chapter 1](ch01.html "Chapter 1. Building a URL Shortener Website"), *Building
    a URL Shortener Website*, to apply migrations, we should run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After the command is run, if you check your database, you will see that our
    `todos` table and columns have been created. Now we need to write our model.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a todos model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a model, you should open the `app/models/` directory with your file
    manager. Create a file named `Todo.php` under the directory and write the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's examine the `Todo.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: As you see, our `Todo` class extends an `Eloquent` model, which is the **ORM**
    (**Object Relational Mapper**) database class of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: The `protected $table = 'todos';` code tells `Eloquent` about our model's table
    name. If we don't set the `table` variable, `Eloquent` accepts the plural version
    of the lower case model name as the table name. So this isn't required technically.
  prefs: []
  type: TYPE_NORMAL
- en: Now, our application needs a template file, so let's create it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel uses a template engine that is called **Blade** for static and application
    template files. Laravel calls the template files from the `app/views/` directory,
    so we need to create our first template under this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file with the name `index.blade.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The file contains the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code may be difficult to understand if you're writing a Blade
    template for the first time, so we'll try to examine it. You see a `foreach` loop
    in the file. This statement loops our `todo` records.
  prefs: []
  type: TYPE_NORMAL
- en: We will provide you with more knowledge about it when we are creating our controller
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '`If` and `else` statements are used for separating finished and waiting tasks.
    We use `if` and `else` statements for styling the tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need one more template file for appending new records to the task list on
    the fly. Create a file with the name `ajaxData.blade.php` under the `app/views/`
    folder. The file contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Also, you will see the `/assets/` directory in the source path of static files.
    When you look at the `app/views` directory, there is no directory named `assets`.
    Laravel separates the system and public files. Public accessible files stay under
    your `public` folder in `root`. So you should create a directory under your public
    folder for `asset` files.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend working with these types of organized folders for developing tidy
    and easy-to-read code. Finally, you will see that we are calling jQuery from its
    main website. We also recommend this way for getting the latest, stable jQuery
    in your application.
  prefs: []
  type: TYPE_NORMAL
- en: You can style your application as you wish, hence we'll not examine styling
    code here. We are putting our `style.css` files under `/public/assets/css/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For performing Ajax requests, we need JavaScript coding. This code posts our
    `add_task` and `edit_task` forms, and updates them when our tasks are completed.
    Let''s create a JavaScript file with the name `todo.js` in `/public/assets/js/`.
    The files contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's examine the JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting data to the database with Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this application, we'll use the **Ajax POST** method for inserting data to
    the database. jQuery is the best JavaScript framework for these kinds of applications.
    jQuery also comes with powerful selector functions.
  prefs: []
  type: TYPE_NORMAL
- en: We have two forms in our HTML code, so we need to post them with Ajax to insert
    or update the data. We'll do it with jQuery's `post()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll serve our JavaScript files under `/public/assets/js`, so let''s create
    a `todo.js` file under this directory. First we need a request to add new tasks.
    The JavaScript code contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This code posts our `add_task` form to the server if the user remembers to provide
    a title to the task. If the user forgets to provide a title to the task, the code
    does not post the form. After it is posted, the code will hide the form and append
    the task list with a new record. Meanwhile, we will be waiting for the response
    to get the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we need a second form to update a task''s title. The code will update the
    task''s title and change the text of updated records via Ajax on-the-fly. On-the-fly
    programming (or live coding) is a style of programming in which the programmer/performer/composer
    augments and modifies the program while it is running, without stopping or restarting,
    in order to assert expressive, programmable control for performance, composition,
    and experimentation at runtime. Because of the fundamental powers of programming
    languages, we believe the technical and aesthetic aspects of on-the-fly programming
    are worth exploring in web applications. The update form''s code should be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Laravel has the RESTful controller feature. This means you can define the RESTful
    base of the routes and controller functions. Also, routes can be defined for different
    request types such as **POST**, **GET**, **PUT**, or **DELETE**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before defining the routes, we need to code our controller. The controller
    files stay under `app/controllers/`; create a file in it named `TodoController.php`.
    The controller code should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's examine the code.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the code, RESTful functions define syntaxes such as `postFunction`,
    `getFunction`, `putFunction`, or `deleteFunction`.
  prefs: []
  type: TYPE_NORMAL
- en: We have two post forms, so we need two POST functions and one GET method to
    get records from the database and show them in the template in the `foreach` statement
    to the visitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the `postUpdate()` method in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following points explain the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The method needs a record called `id` to update. The route where we post would
    be similar to `/update/record_id`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$task = Todo::find($id);` is that part of the method which finds the record
    from the database which has the given `id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$task->title = Input::get("title");` means to get the value of the form element
    named `title` and updating the `title` column record as the posted value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$task->save();` applies the changes and runs the update query on the database
    server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s examine the `postAdd()` method. This method works like our `getIndex()`
    method. The first part of the code creates a new record on the database server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following points explain the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The code line `$last_todo = $todo->id;` gets the ID of this record. It is equivalent
    to the `mysql_insert_id()` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code line `$todos = Todo::whereId($last_todo)->get();` fetches the record
    from the `todo` table which has an `id` column equal to `$last_todo` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code line `View::make("ajaxData") ->with("todos", $todos);` is very important
    to understand Laravel''s view mechanism:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code line `View::make("ajaxData")` refers to our template file. Do you remember
    the `ajaxData.blade.php` file, which we created under `/app/views/`? The code
    calls this file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code line `->with("todos", $todos);` assigns the last record to the template
    file as a variable named `todos` (the first parameter). So, we can show the last
    record in the template file with the `foreach` loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the list from the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also need a method for getting the existing data from our database server.
    In our controller file, we need the function as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s examine the `getIndex()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: In the code, `$todos = Todo:all()` means to get all records from the database
    and assign them to the `$todos` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the code, `View::make("index")` defines our template file. Did you remember
    the `index.blade.php file`, which we created under `/app/views/`? The code calls
    this file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the code, `->with("todos", $todos);` assigns the records to the template
    file. So, we can show the records in the template file with the `foreach` loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we will define our routes. For defining routes, you should open the
    `routes.php` file in the `apps` folder. Laravel has a great feature for defining
    routes named the RESTful controller. You can define all the routes with a single
    line of code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code assigns all the applications'' root-based requests to the
    `TodoController` function. If you need to, you can also define the routes manually
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to allow only Ajax requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application accepts all POST and GET requests even without Ajax. But we
    just need to allow an Ajax request for `add` and `update` functions. Laravel's
    `Request` class provides many methods for examining the HTTP request for your
    applications. One of these functions is named `ajax()`. We can check the request
    type under controllers or route filters.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing the request using route filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Route filters provide a convenient way of limiting, accessing, or filtering
    the requests to a given route. There are several filters included in Laravel,
    which are located in the `filters.php` file in the `app` folder. We can define
    our custom filter under this file. We''ll not use this method in this chapter,
    but we''ll examine route filters in further chapters. The route filter for an
    Ajax request should be as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Attaching a filter to a route is also very easy. Check the sample route shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we defined a route filter to the route with the `before`
    variable. This means, our application first checks the request type and then calls
    the controller function and passes the data.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing the request using the controller side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can check for the request type under controller. We''ll use this method
    in this section. This method is useful for function-based filtering. For doing
    this, we should change our `add` and `update` functions as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we coded to add a new task, updated it, and listed the tasks.
    We also need to update each status and delete the tasks. For doing that, we need
    two functions that are called `getDone()` and `getDelete()`. As you know from
    previous sections of this chapter, these functions are RESTful and accept GET
    method requests. So, our function should be as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to update the `todo.js` file. The final JavaScript code should
    be as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we tried to understand how to use Ajax with Laravel. Throughout
    the chapter, we used the basics of templating, request filtering, routing, and
    RESTful controllers. We also learned to update and delete data from our database.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we'll try to examine Laravel's file validation and file
    processing methods.
  prefs: []
  type: TYPE_NORMAL
