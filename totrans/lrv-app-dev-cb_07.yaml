- en: Chapter 7. Creating and Using Composer Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Generators package to set up an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Composer package in Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your Composer package to Packagist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a non-Packagist package to Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom artisan command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great features in Laravel is the ease in which we can include the
    class libraries that others have made using bundles. On the Laravel site, there
    are already many useful bundles, some of which automate certain tasks while others
    easily integrate with third-party APIs.
  prefs: []
  type: TYPE_NORMAL
- en: A recent addition to the PHP world is Composer, which allows us to use libraries
    (or packages) that aren't specific to Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll get up-and-running with using bundles, and we'll even
    create our own bundle that others can download. We'll also see how to incorporate
    Composer into our Laravel installation to open up a wide range of PHP libraries
    that we can use in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best features of Laravel is how modular it is. Most of the framework
    is built using libraries, or **packages**, that are well tested and widely used
    in other projects. By using Composer for dependency management, we can easily
    include other packages and seamlessly integrate them into our Laravel app.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this recipe, we''ll be installing two popular packages into our app: Jeffrey
    Way''s Laravel 4 Generators and the `Imagine` image processing packages.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel using Composer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://packagist.org/](https://packagist.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, search for `way generator` as shown in the following screenshot:![How
    to do it...](graphics/2827OS_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the link for **way/generators**:![How to do it...](graphics/2827OS_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the details at [https://packagist.org/packages/way/generators](https://packagist.org/packages/way/generators)
    and take notice of the **require** line to get the package''s version. For our
    purposes, we''ll use **"way/generators": "1.0.*"**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our application''s root directory, open up the `composer.json` file and
    add in the package to the `require` section so it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Go back to [http://packagist.org](http://packagist.org) and perform a search
    for `imagine` as shown in the following screenshot:![How to do it...](graphics/2827OS_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the link to **imagine/imagine** and copy the require code for **dev-master**:![How
    to do it...](graphics/2827OS_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to our `composer.json` file and update the `require` section to include
    the `imagine` package . It should now look similar to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the command line, and in the root of our application, run the Composer
    update as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll add the Generator Service Provider, so open the `app/config/app.php`
    file and in the providers array, add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get our package, we first go to [packagist.org](http://packagist.org) and
    search for the package we want. We could also click on the **Browse packages**
    link. It will display a list of the most recent packages as well as the most popular.
    After clicking on the package we want, we'll be taken to the detail page, which
    lists various links including the package's repository and home page. We could
    also click on the package's maintainer link to see other packages they have released.
  prefs: []
  type: TYPE_NORMAL
- en: Underneath, we'll see the various versions of the package. If we open that version's
    detail page, we'll find the code we need to use for our `composer.json` file.
    We could either choose to use a strict version number, add a wildcard to the version,
    or use `dev-master`, which will install whatever is updated on the package's master
    branch. For the `Generators` package, we'll only use Version 1.0, but allow any
    minor fixes to that version. For the `imagine` package, we'll use `dev-master`,
    so whatever is in their repository's master branch will be downloaded, regardless
    of version number.
  prefs: []
  type: TYPE_NORMAL
- en: We then run update on Composer and it will automatically download and install
    all of the packages we chose. Finally, to use `Generators` in our app, we need
    to register the service provider in our app's config file.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Generators package to set up an app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Generators` is a popular Laravel package that automates quite a bit of file
    creation. In addition to `controllers` and `models`, it can also generate `views`,
    `migrations`, `seeds`, and more, all through a command-line interface.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be using the Laravel 4 Generators package maintained
    by *Jeffrey Way* that was installed in the *Downloading and installing packages*
    recipe. We'll also need a properly configured MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command line in the root of our app and, using the generator, create
    a scaffold for our cities as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, create a scaffold for our superheroes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In our project, look in the `app/database/seeds` directory and find a file
    named `CitiesTableSeeder.php`. Open it and add some data to the `$cities` array
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/database/seeds` directory, open `SuperheroesTableSeeder.php` and
    add some data to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, run the migration then seed the database as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Open up a web browser and go to `http://{your-server}/cities`. We will see our
    data as shown in the following screenshot:![How to do it…](graphics/2827OS_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to `http://{your-server}/superheroes` and we will see our data
    as shown in the following screenshot:![How to do it…](graphics/2827OS_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by running the scaffold generator for our cities and superheroes tables.
    Using the `--fields` tag, we can determine which columns we want in our table
    and also set options such as data type. For our cities table, we'll only need
    the name of the city. For our superheroes table, we'll want the name of the hero
    as well as the ID of the city where they live.
  prefs: []
  type: TYPE_NORMAL
- en: When we run the generator, many files will automatically be created for us.
    For example, with cities, we'll get `City.php` in our models, `CitiesController.php`
    in controllers, and a `cities` directory in our views with the index, show, create,
    and edit views. We then get a migration named `Create_cities_table.php`, a `CitiesTableSeeder.php`
    seed file, and `CitiesTest.php` in our `tests` directory. We'll also have our
    `DatabaseSeeder.php` file and our `routes.php` file updated to include everything
    we need.
  prefs: []
  type: TYPE_NORMAL
- en: To add some data to our tables, we opened the `CitiesTableSeeder.php` file and
    updated our `$cities` array with arrays that represent each row we want to add.
    We did the same thing for our `SuperheroesTableSeeder.php` file. Finally, we run
    the migrations and seeder and our database will be created and all the data will
    be inserted.
  prefs: []
  type: TYPE_NORMAL
- en: The `Generators` package has already created the views and controllers we need
    to manipulate the data, so we can easily go to our browser and see all of our
    data. We can also create new rows, update existing rows, and delete rows.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Composer package in Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Laravel's Workbench, we can easily create a package that can be used and
    installed by Composer. We can also add functionality so that the package integrates
    seamlessly into our Laravel app. In this recipe, we'll be creating a simple package
    that will display a list of Vimeo videos for a specified user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/config` directory, open the `workbench.php` file and update it
    with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, use artisan to set up our package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the directory that will hold our source files and create a file named
    `Vimeolist.php`. In this example, we would put the file in `workbench/matula/vimeolist/src/Matula/Vimeolist/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same directory as the file we just created, open the file named `VimeolistServiceProvider.php`
    and update it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `app.php` file in the `app/config` directory, and in the `providers`
    array, add our service provider as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, add a route to display the data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to update our workbench's configuration file to hold our name
    and e-mail address. This will then be used for any other packages that we create
    in Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we run the artisan command to create the files we need for our package.
    By using the `--resources` flag, it will also generate other files and directories
    that can be used specifically for Laravel. Once it's completed, there will be
    a new folder in our workbench directory that holds all our package's files. After
    drilling down into the directories, we'll get to a directory that holds our service
    provider file, and in this directory, we'll add our class file.
  prefs: []
  type: TYPE_NORMAL
- en: This example class will simply get a list of videos for a user from the Vimeo
    API. We have methods that will allow us to set a username, get the contents of
    the API endpoint, turn the JSON into a PHP object, and then create and return
    a formatted array. As a best practice, we should also make sure our code is tested
    and that we can put those files in the `test` directory.
  prefs: []
  type: TYPE_NORMAL
- en: To better integrate with Laravel, we need to update the service provider. We
    first update the `register` method and set the name we want to pass to Laravel's
    `app` variable and then we update the `provides` method to return the package
    name. Next, we need to update our app configuration file to actually register
    the service provider. Then, once we run the `dump-autoload` command in Composer,
    our new package will be available to use.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we create a route to interact with the package. We'll have one optional
    parameter, that is, the username. We also need to make sure the `$app` variable
    is available in our route. Then, when we call `$app['vimeolist']`, the service
    provider will automatically instantiate our class and allow us to access the Vimeo
    list. For our purposes, we're only using the `dd()` helper function of Laravel
    to display the data, but we could also pass it to a view and make it look nicer.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Laravel also has the option to create a facade for our package, so we could
    call it using something similar to `$vimeo = Vimeolist::setUser()`. There are
    also many other options for packages that can be found in the documentation at
    [http://laravel.com/docs/packages](http://laravel.com/docs/packages).
  prefs: []
  type: TYPE_NORMAL
- en: Adding your Composer package to Packagist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make it easier to distribute our packages, we should submit them to the website
    [packagist.org](http://packagist.org). In this recipe, we'll see how to set up
    our package on GitHub and add it to Packagist.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need to have completed the *Creating a Composer package
    in Laravel* recipe, and we'll also need an active GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command line, move to the `workbench/matula/vimeolist` directory and
    set up our `git` repository as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Create a new GitHub repository at [https://github.com/new](https://github.com/new)
    and give it the name `vimeolist`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add our package to GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Go to [https://packagist.org/login/](https://packagist.org/login/) and log in
    using your GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green **Submit Package** button shown in the following screenshot:![How
    to do it...](graphics/2827OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Repository URL** text field, add the Git read-only URL from GitHub
    as shown in the following screenshot:![How to do it...](graphics/2827OS_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Check,** and if everything works, click on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by creating a `git` repository in our package's main directory. We
    then create a repository in GitHub for our files, add that remote to our local
    repository, and then push our local repository to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: On the Packagist site, we log in using our GitHub account and allow the [packagist.org](http://packagist.org)
    access. Then, we submit our packages at [https://packagist.org/packages/submit](https://packagist.org/packages/submit)
    using the GitHub URL from our repository. After clicking on **Check**, Packagist
    will look through the code and format it for use with Composer. If there are any
    errors, we will be prompted with what we need to do to fix them.
  prefs: []
  type: TYPE_NORMAL
- en: If everything checks out and we click on **Submit**, our package will then be
    listed on the Packagist website.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a Composer package in Laravel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a non-Packagist package to Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a single line to our `composer.json` file and having Composer automatically
    download and install a package is great, but it requires the package to be available
    on [packagist.org](http://packagist.org). In this recipe, we'll see how to install
    packages that aren't available on Packagist.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On GitHub, we'll need to find a package we want to use. For this example, we'll
    use the `UniversalForms` package found at [https://github.com/wesleytodd/Universal-Forms-PHP](https://github.com/wesleytodd/Universal-Forms-PHP).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open our main `composer.json` file and update the `require` section as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In `composer.json`, under the `require` section, add the repository we want
    to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, update Composer as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `app/config/app.php` file and update the `providers` array with the
    following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, instantiate the class and use it on our routes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to add in the line for the required packages just like with
    other Composer packages. However, since this package isn't available on [packagist.org](http://packagist.org),
    it will throw an error if we try to update Composer. To get it to work, we need
    to add in a repository for Composer to use. Composer has many different options
    for using other repositories, and they can be found at [http://getcomposer.org/doc/05-repositories.md#vcs](http://getcomposer.org/doc/05-repositories.md#vcs).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we update Composer and it will install the package for us. Since this
    package comes with a Laravel service provider, we then update our configuration
    file to register it.
  prefs: []
  type: TYPE_NORMAL
- en: Now we're able to use the package in our app. For our purposes, we'll instantiate
    the class outside of the routes and pass it into the routes' closure. Then we
    can use the library like normal. This particular package will take a JSON string
    or file and automatically create our form output for us.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom artisan command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel's artisan command-line tool makes many tasks easy to accomplish. If
    we want to make our own tasks and use artisan to run them, the process is quite
    simple. In this recipe, we'll see how to make an artisan task that automatically
    creates an HTML5 skeleton in our `views` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command line, run the `artisan` command to create our needed files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/commands` directory, open the `SkeletonCommand.php` file and update
    the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/start` directory, open the `artisan.php` file and add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, test out the new command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to use the `command:make` function of artisan and pass in
    the name of the command we want to use. After this runs, we'll find a new file
    in our `app/commands` directory with the same name as the name we chose.
  prefs: []
  type: TYPE_NORMAL
- en: In our `SkeletonCommand` file, we start by adding in a name. This will be the
    command to which artisan will respond. Next, we set a description, which will
    display when we list out all the artisan commands.
  prefs: []
  type: TYPE_NORMAL
- en: For this command, we'll be accessing the filesystem, so we need to make sure
    to add Laravel's `Filesystem` class and that we instantiate it in our constructor.
    Then, we come to the `fire()` method. This is where all the code we want to run
    should go. For our purpose, we use a single argument to determine what our `view`
    file name will be, and if the `--blade` parameter is set to `true`, we'll make
    it a `blade` file. Then, we create a string that holds our HTML5 skeleton, though
    we could also make this a separate file and pull in the text.
  prefs: []
  type: TYPE_NORMAL
- en: We then create the new file using the template as our HTML and display a success
    message in the console.
  prefs: []
  type: TYPE_NORMAL
