- en: Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this book, we have discussed a lot of techniques and methodologies
    revolving around Metasploit. From exploit development to scripting Armitage, we
    covered it all. However, to achieve best practices with Metasploit, we must know
    tips and tricks to make the most of the Metasploit framework. In this chapter,
    we will cover some quick tips and scripts that will aid penetration testing with
    Metasploit. In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Automation scripts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party plugins
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cheat sheets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving time with shorthand commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's delve deep into this final chapter and learn some cool tips and tricks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Automation using Minion script
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I was randomly checking GitHub for automation scripts when I found this gem
    of a script. Minion is a plugin for Metasploit, and it can be very handy for quick
    exploitation and scans. The `minion` plugin for Metasploit can be downloaded from
    [https://github.com/T-S-A/Minion](https://github.com/T-S-A/Minion).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you download the file, copy it to the `~/.msf4/plugins` directory, and
    fire up `msfconsole`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c784529-c763-45f4-b9f6-986da6b7dfaa.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: 'In the previous chapters, we saw how we can quickly load a plugin into Metasploit
    using the load command. Similarly, let''s load the `minion` plugin using the `load
    minion` command, as shown in the preceding screenshot. Once loaded successfully,
    switch to the workspace you have been working on or perform a Nmap scan if there
    are no hosts in the workspace:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d19df6ba-558b-4815-b73a-7fcfbbadf834.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'Because the `db_nmap` scan has populated a good number of results, let''s see
    what `minion` options are enabled to be used:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a6bf20d-da16-4751-af70-87f82c4ae853.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'Plenty! We can see that we have the MySQL service on the target host. Let''s
    use the `mysql_enum` command as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a529f592-5dca-45f5-8e18-2c2148a07fc8.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: 'Wow! We never had to load the module, fill in any options, or launch the module
    because the `minion` plugin has automated it for us. We can see that we have the
    MySQL version of the target host. Let''s use the MySQL attack command from `minion`
    as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb7c6aac-5de9-4ae6-9ec8-151805809f36.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Amazing! Minion plugin automated the brute force attack for us, which resulted
    in a successful login at the target with the username as root and the password
    as blank. The beautiful part of the script is that you can edit and customize
    it, and add more modules and commands, which will also aid you in developing plugins
    for Metasploit.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Using connect as Netcat
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers a great command named `connect` to provide features similar
    to the Netcat utility. Suppose a system shell is waiting for us to connect on
    some port at the target system, and we don''t want to switch from our Metasploit
    console. We can use the `connect` command to connect with the target, as shown
    in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93733b15-1002-4f0e-bc68-c394777821dd.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: We can see that we initialized a connect with the listener from within the Metasploit
    framework, which might come in handy in taking reverse connections at the target
    where the initial access hasn't been gained through Metasploit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Shell upgrades and background sessions
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we don''t need to interact with the compromised host on the fly.
    In such situations, we can instruct Metasploit to background the newly created
    session as soon as a service is exploited using the `-z` switch, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/209a37d8-732e-400b-a0a4-89fb83a2c038.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: 'As we can see that we have a command shell opened, it is always desirable to
    have better-controlled access like the one provided by Meterpreter. In such scenarios,
    we can upgrade the session using the `-u` switch, as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e06feeb-56fe-4d9e-9847-d6816e729dcc.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Amazing! We just updated our shell to a Meterpreter shell and gained better
    control of the target.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Naming conventions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a sizeable penetration test scenario, we may get a large number of system
    and Meterpreter shells. In such cases, it is better to name all the shells for
    easy identification. Consider the following scenario:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca2a63aa-c451-4a25-9138-ffbfbf4735b0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: 'We can name a shell using the `-n` switch, as shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c8f481a-638d-477d-a0dd-4f8f1655c942.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: The naming seems better and easy to remember, as we can see in the preceding
    screenshot.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Changing the prompt and making use of database variables
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How cool is it to work on your favorite penetration testing framework and have
    your prompt? Very easy, I would say. To have your prompt in Metasploit, all you
    need to do is to set a prompt variable to anything of your choice. Taking the
    fun apart, suppose that you tend to forget what workspace you are currently using,
    you can make use of prompt with the database variable `%W` to have it in easy
    access, as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a94735f9-ea54-4c48-ab0e-6d4e6957a9e7.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: 'In addition, you can always do something like what''s shown in the following
    screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54b029de-89e7-453e-9e83-f7bd9d5f9d2a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: We can see that we have used `%D` to display the current local working directory,
    `%H` for the hostname, `%J` for the number of jobs currently running, `%L` for
    the local IP address (Quite Handy), `%S` for the number of sessions we have, `%T`
    for the timestamp, `%U` for the username, and `%W` for the workspace.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Saving configurations in Metasploit
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the time, I forget to switch to the workspace I created for a particular
    scan and ended up merging results in the default workspace. However, such problems
    can be avoided using the `save` command in Metasploit. Suppose you have shifted
    the workspace and customized your prompts and other things. You can hit the `save`
    command to save the configuration. This means that next time you fire up Metasploit,
    you will land up with the same parameters and workspace you left behind, as shown
    in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01c5eab5-a9c9-4585-a0eb-c3af2f2d2af5.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'Let''s fire up Metasploit and see if everything from our previous session got
    saved successfully or not:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb0437b6-ef22-415e-b097-76bbdccd2040.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Yup! Everything was collected in the configuration file. No more hassle in switching
    workspaces all the time from now on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Using inline handler and renaming jobs
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers a quick way to set up handlers using the `handler` command,
    as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cd2abbb-83c6-49e5-ab1c-50c688828c8f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we can define the payload using the `-p` switch and host and
    port with the `-H` and `-P` switches. Running the handler command will quickly
    spawn a handler as a background job. Speaking of background jobs, they too can
    be renamed using the `rename_job` command, as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf202b37-f58a-47c5-bbd9-4a58fda6d7e9.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Running commands on multiple Meterpreters
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Yup! We can run Meterpreter commands on numerous open Meterpreter sessions
    using the `-c` switch with the `sessions` command, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/378505be-3fc2-4857-9acf-b21c170f5f6f.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: We can see that Metasploit has intelligently skipped a non-Meterpreter session,
    and we have made the command run on all the Meterpreter sessions, as shown in
    the preceding screenshot.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Automating the Social Engineering Toolkit
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Social Engineering Toolkit** (**SET**) is a Python-based set of tools
    that target the human side of penetration testing. We can use SET to perform phishing
    attacks, web jacking attacks that involve victim redirection stating that the
    original website has moved to a different place, file format-based exploits that
    target particular software for exploitation of the victim's system, and many others.
    The best thing about using SET is the menu-driven approach, which will set up
    quick exploitation vectors in no time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Tutorials on SET can be found at: [https://www.social-engineer.org/framework/se-tools/computer-based/social-engineer-toolkit-set/](https://www.social-engineer.org/framework/se-tools/computer-based/social-engineer-toolkit-set/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'SET is extremely fast at generating client-side exploitation templates. However,
    we can make it faster using the automation scripts. Let''s see an example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a409d10f-689f-4dfe-96fa-6555781b08c7.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we fed `se-script` to the `seautomate` tool, which
    resulted in a payload generation and the automated setup of an exploit handler.
    Let''s analyze the `se-script` in more detail:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0b90fcf-42d3-47c7-a485-8628e2007786.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: You might be wondering how the numbers in the script can invoke a payload generation
    and exploit handler setup process.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed earlier, SET is a menu-driven tool. Hence, the numbers in the
    script denote the ID of the menu option. Let's break down the entire automation
    process into smaller steps.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'The first number in the script is `1`. Hence, the `Social - Engineering Attacks`
    option is selected when `1` is processed:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3141c845-a8b1-4e17-ad39-3c93b99160b9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: 'The next number in the script is `4`. Therefore, the `Create a Payload and
    Listener` option is selected, as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33953706-5a0a-4042-8a3c-dfa166aaebca.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'The next number is `2`, which denotes the payload type as `Windows Reverse_TCP
    Meterpreter`, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e158ee8-8be1-46f6-971a-8f61dc9282d1.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to specify the IP address of the listener, which is `192.168.10.103`
    in the script. This can be visualized manually:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14c1cec9-5e37-4941-8606-b4d144aa3c8b.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'In the next command, we have `4444`, which is the port number for the listener:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a955100-20c3-4f31-a874-4d6da9c61a82.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'We have `yes` as the next command in the script. The `yes` in the script denotes
    initialization of the listener:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcde75ae-a39a-4b71-99d9-3b2d664e6d2d.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we provide `yes`, the control is shifted to Metasploit and the exploit
    reverse handler is set up automatically, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2a54ba0-9515-4e0a-a885-2a5893ac52c3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: We can automate any attack in SET in a similar manner as discussed previously.
    SET saves a good amount of time when generating customized payloads for client-side
    exploitation. However, using the `seautomate` tool, we made it ultra-fast.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Cheat sheets on Metasploit and penetration testing
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find some excellent cheat sheets on Metasploit at the following links:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf](https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://null-byte.wonderhowto.com/how-to/hack-like-pro-ultimate-command-cheat-sheet-for-metasploits-meterpreter-0149146/](https://null-byte.wonderhowto.com/how-to/hack-like-pro-ultimate-command-cheat-sheet-for-metasploits-meterpreter-0149146/)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://null-byte.wonderhowto.com/how-to/hack-like-pro-ultimate-list-hacking-scripts-for-metasploits-meterpreter-0149339/](https://null-byte.wonderhowto.com/how-to/hack-like-pro-ultimate-list-hacking-scripts-for-metasploits-meterpreter-0149339/)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to SANS posters for more on penetration testing at [https://www.sans.org/security-resources/posters/pen-testing](https://www.sans.org/security-resources/posters/pen-testing) and
    refer to [https://github.com/coreb1t/awesome-pentest-cheat-sheets](https://github.com/coreb1t/awesome-pentest-cheat-sheets) for
    most of the cheat sheets on penetration testing tools and techniques.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we covered Metasploit and various other related subjects in a
    practical way. We covered exploit development, module development, porting exploits
    in Metasploit, client-side attacks, service-based penetration testing, evasion
    techniques, techniques used by law enforcement agencies, and Armitage. We also
    had a look at the fundamentals of Ruby programming and Cortana for Armitage.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们以实用的方式涵盖了Metasploit和其他相关主题。我们涵盖了利用开发、模块开发、在Metasploit中移植利用、客户端攻击、基于服务的渗透测试、规避技术、执法机构使用的技术以及Armitage。我们还深入了解了Ruby编程和Armitage中的Cortana的基础知识。
- en: 'Once you have read this book, you may find that the following resources provide
    further details on these topics:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本书后，您可能会发现以下资源提供了有关这些主题的更多详细信息：
- en: In order to learn Ruby programming, refer to: [http://ruby-doc.com/docs/ProgrammingRuby/](http://ruby-doc.com/docs/ProgrammingRuby/)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要学习Ruby编程，请参阅：[http://ruby-doc.com/docs/ProgrammingRuby/](http://ruby-doc.com/docs/ProgrammingRuby/)
- en: For assembly programming, refer to: [https://github.com/jaspergould/awesome-asm](https://github.com/jaspergould/awesome-asm)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关汇编语言编程，请参阅：[https://github.com/jaspergould/awesome-asm](https://github.com/jaspergould/awesome-asm)
- en: For exploit development, refer to: [https://www.corelan.be/](https://www.corelan.be/)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关利用开发，请参阅：[https://www.corelan.be/](https://www.corelan.be/)
- en: For Metasploit development, refer to: [https://github.com/rapid7/metasploit-framework/wiki](https://github.com/rapid7/metasploit-framework/wiki)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Metasploit开发，请参阅：[https://github.com/rapid7/metasploit-framework/wiki](https://github.com/rapid7/metasploit-framework/wiki)
- en: For SCADA-based exploitation, refer to: [https://scadahacker.com/](https://scadahacker.com/)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关基于SCADA的利用，请参阅：[https://scadahacker.com/](https://scadahacker.com/)
- en: For in-depth attack documentation on Metasploit, refer to: [https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Metasploit的深入攻击文档，请参阅：[https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)
- en: For more information on Cortana scripting, refer to: [http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Cortana脚本的更多信息，请参阅：[http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf)
- en: For Cortana script resources, refer to: [https://github.com/rsmudge/cortana-scripts](https://github.com/rsmudge/cortana-scripts)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Cortana脚本资源，请参阅：[https://github.com/rsmudge/cortana-scripts](https://github.com/rsmudge/cortana-scripts)
