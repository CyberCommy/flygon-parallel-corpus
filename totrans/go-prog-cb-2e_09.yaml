- en: Testing Go Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will be different from the previous chapters; this chapter will
    focus on testing and testing methodologies. Go provides excellent testing support
    out of the box. However, it can be difficult to understand for developers coming
    from more dynamic languages where monkey patching and mocking are relatively straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Go testing encourages a specific structure for your code. In particular, testing
    and mocking interfaces is very straightforward and well supported. Some types
    of code can be more difficult to test. For example, it can be difficult to test
    code that makes use of package-level global variables, places that have not been
    abstracted into interfaces, and structures that have non-exported variables or
    methods. This chapter will share some recipes for testing Go code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Mocking using the standard library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Mockgen package to mock interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using table-driven tests to improve coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using third-party testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior testing using Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application, then create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`, and
    you have the option to work from that directory rather than typing the examples
    manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Mocking using the standard library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Go, mocking typically means implementing an interface with a test version
    that allows you to control runtime behavior from tests. It may also refer to mocking
    functions and methods, for which we'll explore another trick in this recipe. This
    trick uses the `Patch` and `Restore` functions defined at [https://play.golang.org/p/oLF1XnRX3C](https://play.golang.org/p/oLF1XnRX3C).
  prefs: []
  type: TYPE_NORMAL
- en: In general, it's better to compose code so that you can use interfaces frequently
    and so that the code is in small, testable chunks. Code that contains lots of
    branching conditions or deeply nested logic can be tricky to test and tests tend
    to be more brittle at the end. This is because a developer will need to keep track
    of more mock objects, patches, return values, and states within their tests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/mocking`, and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `mock.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `patch.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `mock_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Fill in tests for the remaining functions and go up one directory and run `go
    test`. Ensure that all the tests pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe demonstrates how to mock interfaces as well as functions that have
    been declared as variables. There are also certain libraries that can mimic this
    patch/restore directly on declared functions, but they bypass a lot of Go''s type
    safety to accomplish that feat. If you need to patch functions from an external
    package, you may use the following trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For this recipe, we start by setting up our test and using table-driven tests.
    There's a lot of literature about this technique, such as [https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests),
    and I recommend exploring it further. Once our tests are set up, we choose outputs
    for our mocked functions. In order to mock our interface, our mocked objects define
    closures that can be rewritten at runtime. The patch/restore technique is applied
    to change our global function and restore it after each loop. This is thanks to
    `t.Run`, which sets up a new function for each loop of the test.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Mockgen package to mock interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous example used our custom mock objects. When you're working with
    a lot of interfaces, writing these can become cumbersome and error-prone. This
    is a place where generating code makes a lot of sense. Fortunately, there's a
    package called `github.com/golang/mock/gomock` that provides a generation of mock
    objects and gives us a very useful library to use in conjunction with interface
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore some of the functionality of `gomock` and will cover
    trade-offs on where, when, and how to work with and generate mock objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/golang/mock/mockgen` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/mockgen` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `interface.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Create a directory named `internal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `mockgen -destination internal/mocks.go -package internal github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter9/mockgen
    GetSetter` command. This will create a file named `internal/mocks.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `interface_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Fill in tests for the remaining functions, go up one directory, and run `go
    test`. Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mock objects that have been generated allow tests to specify what arguments
    are expected, the number of times a function will be called, and what to return.
    They also allow us to set additional artifacts. For example, we could write to
    a channel directly if the original function had a similar workflow. The `interface_test.go`
    file showcases some examples of using mock objects while calling them in line.
    Generally, tests will look more like `exec_test.go`, where we'll want intercept
    interface function calls performed by our actual code and change their behavior
    at test time.
  prefs: []
  type: TYPE_NORMAL
- en: The `exec_test.go` file also showcases how you might use mocked objects in a
    table-driven test environment. The `Any()` function means that the mocked function
    can be called zero or more times, which is great for cases where the code terminates
    early.
  prefs: []
  type: TYPE_NORMAL
- en: One last trick demonstrated in this recipe is sticking mocked objects into the
    `internal` package. This is useful when you need to mock functions declared in
    packages outside of your own. This allows those methods to be defined in a `non
    _test.go` file, but they won't be visible to users of your libraries as they cannot
    import from the internal package. Generally, it's easier to just stick mocked
    objects into `_test.go` files, using the same package name as the tests you're
    currently writing.
  prefs: []
  type: TYPE_NORMAL
- en: Using table-driven tests to improve coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate the process of how to write a table-driven test,
    collect test coverage, and improve it. It will also make use of the `github.com/cweill/gotests`
    package to generate tests. If you've been downloading the test code for other
    chapters, these should look very familiar. Using a combination of this recipe
    and the previous two, you should be able to achieve 100% test coverage in all
    cases with some work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/coverage`, and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `coverage.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Run the `gotests -all -w` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will generate a file named `coverage_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Fill in the `TODO` section with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `go test -cover` command, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following item to the `TODO` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `go test -cover` command, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Open the `coverage.html` file in a browser to see a graphical coverage report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `go test -cover` command comes with a basic Go installation. It can be used
    to collect a coverage report of your Go application. In addition, it has the ability
    to output coverage metrics and an HTML coverage report. This tool is often wrapped
    by other tools, which will be covered in the next recipe. These table-driven test
    styles are covered at [https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests)
    and are an excellent way to make clean tests that can handle many cases without
    writing a bunch of extra code.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe starts by automatically generating test code, then filling in test
    cases as needed to help create more coverage. The only time this is especially
    tricky is when you have non-variable functions or methods being invoked. For example,
    it can be tricky to make `gob.Encode()` return an error to increase test coverage.
    It can also seem quirky to use the method described in the *Mocking using the
    standard library* recipe of this chapter and use `var gobEncode = gob.Encode`
    to allow patching. For this reason, it can be difficult to advocate for 100% test
    coverage and instead argue for focusing on testing the external interface extensively—that
    is, testing many variations of input and output—and in some cases, as we'll see
    in the *Behavior testing using Go* recipe of this chapter, fuzzing can become
    useful.
  prefs: []
  type: TYPE_NORMAL
- en: Using third-party testing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of helpful tools for Go testing: tools that make it easier
    to get an idea of code coverage at a per-function level, tools to implement assertions
    to reduce testing lines of code, and test runners. This recipe will cover the `github.com/axw/gocov`
    and `github.com/smartystreets/goconvey` packages in order to demonstrate some
    of this functionality. There are a number of other notable test frameworks depending
    on your needs. The `github.com/smartystreets/goconvey` package supports both assertions
    and is a test runner. It used to be the cleanest way to have labeled subtests
    prior to Go 1.7.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/axw/gocov/gocov` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/smartystreets/goconvey` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/tools`, and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `funcs.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `structs.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `funcs_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `structs_test.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `gocov test | gocov report` command, and you will see the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `goconvey` command, and it will open a browser that should look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c786af09-2ea5-4497-931c-aa087f5fa85d.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe demonstrates how to wire the `goconvey` command into your tests.
    The `Convey` keyword basically replaces `t.Run` and adds additional labels in
    the `goconvey` web UI, but it behaves slightly differently. If you have nested
    `Convey` blocks, they''re always re-executed in order, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code, using the `goconvey` command, will print `1`. If we had
    used the built-in `t.Run` instead, it would print `2` instead. In other words,
    Go `t.Run` tests are run sequentially and are never repeated. This behavior can
    be useful for putting the setup code into outer `Convey` blocks, but it's important
    to remember this distinction if you have to work with both.
  prefs: []
  type: TYPE_NORMAL
- en: When using `Convey` assertions, there are check marks on successes in the web
    UI and in additional stats. It can also reduce the size of checks to a single
    line, and it's even possible to create custom assertions.
  prefs: []
  type: TYPE_NORMAL
- en: If you leave the `goconvey` web interface up and turn on notifications, as you
    save your code, tests will automatically be run and you'll receive notifications
    on any increase or decrease in coverage, as well as when your build fails.
  prefs: []
  type: TYPE_NORMAL
- en: All three tools assertions, the test runner, and the web UI can be used independently
    or together.
  prefs: []
  type: TYPE_NORMAL
- en: The `gocov` tool can be useful when working toward higher test coverage. It
    can quickly identify functions that are lacking in coverage and help you to dive deep
    into your coverage report. In addition, `gocov` can be used to generate an alternate
    HTML report that is shipped with the Go code by using the `github.com/matm/gocov-html`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: Behavior testing using Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Behavior testing or integration testing is a good method of implementing end-to-end
    black box testing. One popular framework for this type of testing is Cucumber ([https://cucumber.io/](https://cucumber.io/)),
    which uses the Gherkin language to describe the steps to a test in English, and
    then implements those steps in code. Go has a Cucumber library as well (`github.com/DATA-DOG/godog`).
    This recipe will use the `godog` package to write behavior tests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/DATA-DOG/godog/cmd/godog` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/bdd`, and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `handler.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new directory called `features`, and create a file called `features/handler.go`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `godog` command, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give you a skeleton to implement the tests that we wrote in our
    feature file; copy those into `handler_test.go` and implement the first two steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `godog` command, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Fill in the remaining two steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `godog` command, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cucumber frameworks work excellently for pair programming, end-to-end testing,
    and any sort of testing that is best communicated with written instructions and
    is understandable for non-technical people. Once a step has been implemented,
    it's generally possible to reuse it wherever it's needed. If you want to test
    integrations between services, tests can be written to use actual HTTP clients
    if you first ensure that your environment is set up to receive HTTP connections.
  prefs: []
  type: TYPE_NORMAL
- en: The datadog implementation of **behavior-driven development** (**BDD**) is lacking
    a few features that you might expect if you've used other Cucumber frameworks,
    including lack of examples, passing a context between functions, and a number
    of other keywords. However, it's a good start, and by using a few tricks in this
    recipe, such as globals for tracking state (and ensuring that you clean up those
    globals between scenarios), it's possible to build a fairly robust set of tests.
    The datadog testing package also uses a third-party test runner, so it's impossible
    to put it together with packages such as `gocov` or `go test -cover`.
  prefs: []
  type: TYPE_NORMAL
