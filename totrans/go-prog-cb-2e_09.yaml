- en: Testing Go Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will be different from the previous chapters; this chapter will
    focus on testing and testing methodologies. Go provides excellent testing support
    out of the box. However, it can be difficult to understand for developers coming
    from more dynamic languages where monkey patching and mocking are relatively straightforward.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Go testing encourages a specific structure for your code. In particular, testing
    and mocking interfaces is very straightforward and well supported. Some types
    of code can be more difficult to test. For example, it can be difficult to test
    code that makes use of package-level global variables, places that have not been
    abstracted into interfaces, and structures that have non-exported variables or
    methods. This chapter will share some recipes for testing Go code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Mocking using the standard library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Mockgen package to mock interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using table-driven tests to improve coverage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using third-party testing tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior testing using Go
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application, then create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`, and
    you have the option to work from that directory rather than typing the examples
    manually:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Mocking using the standard library
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Go, mocking typically means implementing an interface with a test version
    that allows you to control runtime behavior from tests. It may also refer to mocking
    functions and methods, for which we'll explore another trick in this recipe. This
    trick uses the `Patch` and `Restore` functions defined at [https://play.golang.org/p/oLF1XnRX3C](https://play.golang.org/p/oLF1XnRX3C).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: In general, it's better to compose code so that you can use interfaces frequently
    and so that the code is in small, testable chunks. Code that contains lots of
    branching conditions or deeply nested logic can be tricky to test and tests tend
    to be more brittle at the end. This is because a developer will need to keep track
    of more mock objects, patches, return values, and states within their tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/mocking`, and
    navigate to this directory.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file called `mock.go` with the following content:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a file called `patch.go` with the following content:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a file called `mock_test.go` with the following content:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a file called `exec_test.go` with the following content:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Fill in tests for the remaining functions and go up one directory and run `go
    test`. Ensure that all the tests pass:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe demonstrates how to mock interfaces as well as functions that have
    been declared as variables. There are also certain libraries that can mimic this
    patch/restore directly on declared functions, but they bypass a lot of Go''s type
    safety to accomplish that feat. If you need to patch functions from an external
    package, you may use the following trick:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this recipe, we start by setting up our test and using table-driven tests.
    There's a lot of literature about this technique, such as [https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests),
    and I recommend exploring it further. Once our tests are set up, we choose outputs
    for our mocked functions. In order to mock our interface, our mocked objects define
    closures that can be rewritten at runtime. The patch/restore technique is applied
    to change our global function and restore it after each loop. This is thanks to
    `t.Run`, which sets up a new function for each loop of the test.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Using the Mockgen package to mock interfaces
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous example used our custom mock objects. When you're working with
    a lot of interfaces, writing these can become cumbersome and error-prone. This
    is a place where generating code makes a lot of sense. Fortunately, there's a
    package called `github.com/golang/mock/gomock` that provides a generation of mock
    objects and gives us a very useful library to use in conjunction with interface
    testing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore some of the functionality of `gomock` and will cover
    trade-offs on where, when, and how to work with and generate mock objects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/golang/mock/mockgen` command.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/mockgen` and
    navigate to this directory.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a file called `interface.go` with the following content:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a directory named `internal`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `mockgen -destination internal/mocks.go -package internal github.com/PacktPublishing/Go-Programming-Cookbook-Second-Edition/chapter9/mockgen
    GetSetter` command. This will create a file named `internal/mocks.go`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `exec.go` with the following content:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a file called `interface_test.go` with the following content:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a file called `exec_test.go` with the following content:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Fill in tests for the remaining functions, go up one directory, and run `go
    test`. Ensure that all the tests pass.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mock objects that have been generated allow tests to specify what arguments
    are expected, the number of times a function will be called, and what to return.
    They also allow us to set additional artifacts. For example, we could write to
    a channel directly if the original function had a similar workflow. The `interface_test.go`
    file showcases some examples of using mock objects while calling them in line.
    Generally, tests will look more like `exec_test.go`, where we'll want intercept
    interface function calls performed by our actual code and change their behavior
    at test time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The `exec_test.go` file also showcases how you might use mocked objects in a
    table-driven test environment. The `Any()` function means that the mocked function
    can be called zero or more times, which is great for cases where the code terminates
    early.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: One last trick demonstrated in this recipe is sticking mocked objects into the
    `internal` package. This is useful when you need to mock functions declared in
    packages outside of your own. This allows those methods to be defined in a `non
    _test.go` file, but they won't be visible to users of your libraries as they cannot
    import from the internal package. Generally, it's easier to just stick mocked
    objects into `_test.go` files, using the same package name as the tests you're
    currently writing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Using table-driven tests to improve coverage
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will demonstrate the process of how to write a table-driven test,
    collect test coverage, and improve it. It will also make use of the `github.com/cweill/gotests`
    package to generate tests. If you've been downloading the test code for other
    chapters, these should look very familiar. Using a combination of this recipe
    and the previous two, you should be able to achieve 100% test coverage in all
    cases with some work.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/coverage`, and
    navigate to this directory.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a file called `coverage.go` with the following content:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run the `gotests -all -w` command.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will generate a file named `coverage_test.go` with the following content:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Fill in the `TODO` section with the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the `go test -cover` command, and you will see the following output:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following item to the `TODO` section:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the `go test -cover` command, and you will see the following output:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the following commands:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Open the `coverage.html` file in a browser to see a graphical coverage report.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `go test -cover` command comes with a basic Go installation. It can be used
    to collect a coverage report of your Go application. In addition, it has the ability
    to output coverage metrics and an HTML coverage report. This tool is often wrapped
    by other tools, which will be covered in the next recipe. These table-driven test
    styles are covered at [https://github.com/golang/go/wiki/TableDrivenTests](https://github.com/golang/go/wiki/TableDrivenTests)
    and are an excellent way to make clean tests that can handle many cases without
    writing a bunch of extra code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: This recipe starts by automatically generating test code, then filling in test
    cases as needed to help create more coverage. The only time this is especially
    tricky is when you have non-variable functions or methods being invoked. For example,
    it can be tricky to make `gob.Encode()` return an error to increase test coverage.
    It can also seem quirky to use the method described in the *Mocking using the
    standard library* recipe of this chapter and use `var gobEncode = gob.Encode`
    to allow patching. For this reason, it can be difficult to advocate for 100% test
    coverage and instead argue for focusing on testing the external interface extensively—that
    is, testing many variations of input and output—and in some cases, as we'll see
    in the *Behavior testing using Go* recipe of this chapter, fuzzing can become
    useful.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Using third-party testing tools
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of helpful tools for Go testing: tools that make it easier
    to get an idea of code coverage at a per-function level, tools to implement assertions
    to reduce testing lines of code, and test runners. This recipe will cover the `github.com/axw/gocov`
    and `github.com/smartystreets/goconvey` packages in order to demonstrate some
    of this functionality. There are a number of other notable test frameworks depending
    on your needs. The `github.com/smartystreets/goconvey` package supports both assertions
    and is a test runner. It used to be the cleanest way to have labeled subtests
    prior to Go 1.7.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/axw/gocov/gocov` command.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/smartystreets/goconvey` command.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/tools`, and
    navigate to this directory.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file called `funcs.go` with the following content:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file called `structs.go` with the following content:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a file called `funcs_test.go` with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a file called `structs_test.go` with the following content:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the `gocov test | gocov report` command, and you will see the following
    output:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the `goconvey` command, and it will open a browser that should look like
    this:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c786af09-2ea5-4497-931c-aa087f5fa85d.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: Ensure that all the tests pass.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe demonstrates how to wire the `goconvey` command into your tests.
    The `Convey` keyword basically replaces `t.Run` and adds additional labels in
    the `goconvey` web UI, but it behaves slightly differently. If you have nested
    `Convey` blocks, they''re always re-executed in order, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding code, using the `goconvey` command, will print `1`. If we had
    used the built-in `t.Run` instead, it would print `2` instead. In other words,
    Go `t.Run` tests are run sequentially and are never repeated. This behavior can
    be useful for putting the setup code into outer `Convey` blocks, but it's important
    to remember this distinction if you have to work with both.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: When using `Convey` assertions, there are check marks on successes in the web
    UI and in additional stats. It can also reduce the size of checks to a single
    line, and it's even possible to create custom assertions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: If you leave the `goconvey` web interface up and turn on notifications, as you
    save your code, tests will automatically be run and you'll receive notifications
    on any increase or decrease in coverage, as well as when your build fails.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: All three tools assertions, the test runner, and the web UI can be used independently
    or together.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: The `gocov` tool can be useful when working toward higher test coverage. It
    can quickly identify functions that are lacking in coverage and help you to dive deep
    into your coverage report. In addition, `gocov` can be used to generate an alternate
    HTML report that is shipped with the Go code by using the `github.com/matm/gocov-html`
    package.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Behavior testing using Go
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Behavior testing or integration testing is a good method of implementing end-to-end
    black box testing. One popular framework for this type of testing is Cucumber ([https://cucumber.io/](https://cucumber.io/)),
    which uses the Gherkin language to describe the steps to a test in English, and
    then implements those steps in code. Go has a Cucumber library as well (`github.com/DATA-DOG/godog`).
    This recipe will use the `godog` package to write behavior tests.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go get github.com/DATA-DOG/godog/cmd/godog` command.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter9/bdd`, and
    navigate to this directory.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see a file called `go.mod` that contains the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a file called `handler.go` with the following content:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a new directory called `features`, and create a file called `features/handler.go`
    with the following content:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the `godog` command, and you will see the following output:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This should give you a skeleton to implement the tests that we wrote in our
    feature file; copy those into `handler_test.go` and implement the first two steps:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the `godog` command, and you will see the following output:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Fill in the remaining two steps:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the `godog` command, and you will see the following output:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cucumber frameworks work excellently for pair programming, end-to-end testing,
    and any sort of testing that is best communicated with written instructions and
    is understandable for non-technical people. Once a step has been implemented,
    it's generally possible to reuse it wherever it's needed. If you want to test
    integrations between services, tests can be written to use actual HTTP clients
    if you first ensure that your environment is set up to receive HTTP connections.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber框架非常适用于配对编程、端到端测试以及任何需要通过书面说明进行最佳沟通并且非技术人员可以理解的测试。一旦一个步骤被实现，通常可以在需要的任何地方重复使用它。如果您想要测试服务之间的集成，可以编写测试来使用实际的HTTP客户端，只要首先确保您的环境已设置为接收HTTP连接。
- en: The datadog implementation of **behavior-driven development** (**BDD**) is lacking
    a few features that you might expect if you've used other Cucumber frameworks,
    including lack of examples, passing a context between functions, and a number
    of other keywords. However, it's a good start, and by using a few tricks in this
    recipe, such as globals for tracking state (and ensuring that you clean up those
    globals between scenarios), it's possible to build a fairly robust set of tests.
    The datadog testing package also uses a third-party test runner, so it's impossible
    to put it together with packages such as `gocov` or `go test -cover`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog对**行为驱动开发**（BDD）的实现缺少一些功能，如果您曾经使用过其他Cucumber框架，可能会期望这些功能，包括缺乏示例、在函数之间传递上下文，以及许多其他关键字。然而，这是一个很好的开始，通过在这个配方中使用一些技巧，比如使用全局变量来跟踪状态（并确保在场景之间清理这些全局变量），可以构建一个相当健壮的测试集。Datadog测试包还使用了第三方测试运行器，因此无法与诸如`gocov`或`go
    test -cover`等包一起使用。
