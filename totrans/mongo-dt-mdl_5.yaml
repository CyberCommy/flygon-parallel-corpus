- en: Chapter 5. Optimizing Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have taken a great step forward in comprehending how to improve
    read and write performance using indexes, let's see how we can analyze them if
    these indexes are behaving as expected, and also how indexes can influence a database's
    lifecycle. In addition to this, through this analysis, we will be able to evaluate
    and optimize the created queries and indexes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: So, in this chapter, we will study the concept of query plans and how MongoDB
    handles it. This includes understanding query covering and query selectivity,
    and how these plans behave when used in sharded environments and through replica
    sets.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the query plan
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run a query, MongoDB will internally figure out the best way to do it
    by choosing from a set of possibilities extracted after query analysis (performed
    by the MongoDB query optimizer). These possibilities are called **query plans**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a better understanding of a query plan, we must go back to the cursor
    concept and one of the cursor methods: `explain()`. The `explain()` method is
    one of the big changes in the MongoDB 3.0 release. It has been significantly enhanced
    due to the new query introspection system.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Not only has the output changed, as we saw earlier, but also the way we use
    it. We now can pass to the `explain()` method an option parameter that specifies
    the verbosity of the `explain` output. The possible modes are `"queryPlanner"`,
    `"executionStats"`, and `"allPlansExecution"`. The default mode is `"queryPlanner"`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: In the `"queryPlanner"` mode, MongoDB runs the query optimizer to choose the
    winning plan under evaluation, and returns the information to the evaluated method.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `"executionStats"` mode, MongoDB runs the query optimizer to choose the
    winning plan, executes it, and returns the information to the evaluated method.
    If we are executing the `explain()` method for a write operation, it returns the
    information about the operation that would be performed but does not actually
    execute it.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, in the `"allPlansExecution"` mode, MongoDB runs the query optimizer
    to choose the winning plan, executes it, and returns the information to the evaluated
    method as well as information for the other candidate plans.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more about the `explain()` method in the MongoDB 3.0 reference
    guide at [http://docs.mongodb.org/manual/reference/method/db.collection.explain/#db.collection.explain](http://docs.mongodb.org/manual/reference/method/db.collection.explain/#db.collection.explain).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The output of an `explain` execution shows us the query plans as a tree of stages.
    From the leaf to the root, each stage passes its results to the parent node. The
    first stage, which happens on the leaf node, accesses the collection or indices
    and passes the results to internal nodes. These internal nodes manipulate the
    results from which the final stage or the root node derives the result set.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four stages:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '`COLLSCAN`: This means that a full collection scan happened during this stage'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IXSCAN`: This indicates that an index key scan happened during this stage'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FETCH`: This is the stage when we are retrieving documents'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHARD_MERGE`: This is the stage where results that came from each shard are
    merged and passed to the parent stage'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed information about the winning plan stages can be found in the `explain.queryPlanner.winningPlan`
    key of the `explain()` execution output. The `explain.queryPlanner.winningPlan.stage`
    key shows us the name of the root stage. If there are one or more child stages,
    the stage will have an `inputStage` or `inputStages` key depending on how many
    stages we have. The child stages will be represented by the keys `explain.queryPlanner.winningPlan.inputStage`
    and `explain.queryPlanner.winningPlan.inputStages` of the `explain()` execution
    output.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about the `explain()` method, visit the MongoDB 3.0 manual page
    at [http://docs.mongodb.org/manual/reference/explain-results/](http://docs.mongodb.org/manual/reference/explain-results/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: All these changes in the execution and the output of the `explain()` method
    were made mainly to improve the DBAs' productivity. One of the biggest advantages
    compared to the previous MongoDB versions is that `explain()` does not need to
    execute the query to calculate the query plan. It also exposes query introspection
    to a wider range of operations including find, count, update, remove, group, and
    aggregate, giving DBAs the power to optimize queries of each type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating queries
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting straight to the point, the `explain` method will give us statistics
    from the query execution. For instance, we will see in these statistics whether
    a cursor is used or an index.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the following `products` collection as an example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we have already seen, when the collection is created, an index in the `_id`
    field is added automatically. To get all the documents in the collection, we will
    execute the following query in the mongod shell:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result of the query will be the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To help you understand how MongoDB reaches this result, let''s use the `explain`
    method on the cursor that was returned by the command `find`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result of this operation is a document with information about the selected
    query plan:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Initially, let''s check only four fields in this document: `queryPlanner.winningPlan.stage`,
    `queryPlanner.executionStats.nReturned`, `queryPlanner.executionStats.totalKeysExamined`,
    and `queryPlanner.executionStats.totalDocsExamined`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The `queryPlanner.winningPlan.stage` field is showing us that a full collection
    scan will be performed.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `queryPlanner.executionStats.nReturned` field shows how many documents match
    the query criteria. In other words, it shows us how many documents will be returned
    from the query execution. In this case, the result will be three documents.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `queryPlanner.executionStats.totalDocsExamined` field is the number of documents
    from the collection that will be scanned. In the example, all the documents were
    scanned.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `queryPlanner.executionStats.totalKeysExamined` field shows the number of
    index entries that were scanned.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When executing a collection scan, as in the preceding example, `nscanned` also
    represents the number of documents scanned in the collection.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What happens if we create an index of the `price` field of our collection?
    Let''s see:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Obviously, the query result will be the same three documents that were returned
    in the previous execution. However, the result for the `explain` command will
    be the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The returned document is fairly different from the previous one. Once again,
    let''s focus on these four fields: `queryPlanner.winningPlan.stage`, `queryPlanner.executionStats.nReturned`,
    `queryPlanner.executionStats.totalKeysExamined`, and `queryPlanner.executionStats.totalDocsExamined`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: This time, we can see that we did not have a full collection scan. Instead of
    this, we had a `FETCH` stage with a child `IXSCAN` stage, as we can see in the
    `queryPlanner.winningPlan.inputStage.stage` field. This means that the query used
    an index. The name of the index can be found in the field `queryPlanner.winningPlan.inputStage.indexName`,
    in the example, `price_1`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the mean difference in this result is that both `queryPlanner.executionStats.totalDocsExamined`
    and `queryPlanner.executionStats.totalKeysExamined`, returned the value `3`, showing
    us that three documents were scanned. It is quite different from the 10 documents
    that we saw when executing the query without an index.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: One point we should make is that the number of documents and keys scanned is
    the same as we can see in `queryPlanner.executionStats.totalDocsExamined` and
    `queryPlanner.executionStats.totalKeysExamined`. This means that our query was
    not covered by the index. In the next section, we will see how to cover a query
    using an index and what its benefits are.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Covering a query
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we can choose to create indexes with one or more fields, considering
    the frequency that they appear in our queries. We can also choose to create indexes
    in order to improve query performance, using them not only to match the criteria
    but also to extract results from the index itself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: We may say that, when we have a query, all the fields in the criteria are part
    of an index and when all the fields in the query are part of the same index, this
    query is covered by the index.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example shown in the previous section, we had an index created of the
    `price` field of the `products` collection:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When we execute the following query, which retrieves the documents where the
    `price` field has a value greater than `65` but with a projection where we excluded
    the `_id` field from the result and included only the `price` field, we will have
    a different result from the one previously shown:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result will be:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then we analyze the query using the `explain` command, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'By doing this, we also have a different result from the previous example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first thing we notice is that the value of `queryPlanner.executionStats.totalDocsExamined`
    is `0`. This can be explained because our query is covered by the index. This
    means that we do not need to scan the documents from the collection. We will use
    the index to return the results, as we can observe in the value `3` for the `queryPlanner.executionStats.totalKeysExamined`
    field.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Another difference is that the `IXSCAN` stage is not a child of the `FETCH`
    stage. Every time that an index covers a query, `IXSCAN` will not be a descendent
    of the `FETCH` stage.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Queries that are covered by the index can be extremely fast. This happens because
    the index keys are usually much smaller than the document itself and also because
    the index is in volatile memory or in disk sequential write mode.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, it's not always the case that we will have a query covered, even
    though we had the same conditions that were described previously.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering the following `customers` collection:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And an index created of the `followedSellers` field, executing the following
    command on mongod shell:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we execute the following query on mongod shell, which was supposed to be
    covered by the index, since we are using `followedSellers` on the query criteria:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we analyze this query using the `explain` command on the mongod shell,
    to see if the query is covered by the index, we can observe:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We have the following document as a result. We can see that, despite using
    a field that is in the index in the criteria and restricting the result to this
    field, the returned output has the `FETCH` stage as a parent of the `IXSCAN` stage.
    In addition, the values for `totalDocsExamined` and `totalKeysExamined` are different:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `totalDocsExamined` field returned `2`, which means that it was necessary
    to scan two of the five documents from the collection. Meanwhile, the `totalKeysExamined`
    field returned `4`, showing that it was necessary to scan four index entries for
    the returned result.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Another situation in which we do not have the query covered by an index is when
    the query execution is used in an index of a field that is part of an embedded
    document.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the example using the `products` collection that was already used
    in [Chapter 4](ch04.html "Chapter 4. Indexing"), *Indexing*, with an index of
    the `supplier.name` field:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following query will not be covered by the index:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that, though this query is not covered by the index, it will use the
    index in its plan.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when we are executing a query in a sharded collection, through **mongos**,
    this query will never be covered by an index.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: The query optimizer
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you understand both evaluating query performance using the `explain()`
    method and how to take advantage of an index by covering a query, we will proceed
    to meet the huge responsibility of selecting and maintaining the query plan in
    MongoDB, the query optimizer.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: The query optimizer is responsible for processing and selecting the best and
    most efficient query plan for a query. For this purpose, it takes into account
    all the collection indexes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: The process performed by the query optimizer is not an exact science, meaning
    that it is a little bit empirical—in other words, based on trial and error.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: When we execute a query for the very first time, the query optimizer will run
    the query against all available indexes of the collection and choose the most
    efficient one. Thereafter, every time we run the same query or queries with the
    same pattern, the selected index will be used for the query plan.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the same `products` collection we used previously in this chapter, the
    following queries will run through the same query plan because they have the same
    pattern:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As the collection's data changes, the query optimizer re-evaluates it. Moreover,
    as the collection grows (more precisely for each 1,000 write operations, during
    each index creation, when the `mongod` process restarts, or when we call the `explain()`
    method), the optimizer re-evaluates itself.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Even with this marvelous automatic process known as the query optimizer, we
    may want to choose which index we want to use. For this, we use the `hint` method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that we have these indexes in our previous `products` collection:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we want to retrieve all the products where the `price` field has a value
    greater than 10, sorted by the `name` field in descending order, use the following
    command to do this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The index chosen by the query optimizer will be the one created on the `name`
    and `price` fields, as we could see running the `explain()` method:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result is:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'However, we can force the use of the index only of the `price` field, in this
    manner:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To be certain, we use the `explain` method:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This produces the following document:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Reading from many MongoDB instances
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have spoken a lot about reading from one MongoDB instance. Nevertheless,
    it is important that we speak briefly about reading from a sharded environment
    or from a replica set.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading from many MongoDB instances](img/B04075_05_01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: When we are reading from a shard, it is important to have the shard key as part
    of the query criteria. This is because, when we have the shard key, we will target
    the execution on one specific shard, whereas if we do not have the shard key,
    we will force the execution on all the shards in the cluster. Thus, the performance
    of a query in a sharded environment is linked to the shard key to a great extent.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: By default, when we have a replica set in MongoDB, we will always read from
    the primary. We can modify this behavior to force a read operation execution on
    to a secondary node by modifying the read preferences.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that we have a replica set with three nodes: `rs1s1`, `rs1s2`, and
    `rs1s3` and that `rs1s1` is the primary node, and `rs1s2` and `rs1s3` are the
    secondary nodes. To execute a read operation forcing the read on a secondary node,
    we could do:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In addition, we have the following read preference options:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '`primary`, which is the default option and will force the user to read from
    the primary.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`primaryPreferred`, which will read preferably from the primary but, in the
    case of unavailability, will read from a secondary.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`secondaryPreferred`, which will read from a secondary but, in the case of
    unavailability, will read from the primary.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nearest`, which will read from the lowest network latency node in the cluster.
    In other words, with the shortest network distance, regardless of whether it is
    the primary or a secondary node.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nearest`，它将从集群中网络延迟最低的节点读取。换句话说，就是从网络距离最短的节点读取，无论它是主节点还是辅助节点。'
- en: In short, if our application wants to maximize consistency, then we should prioritize
    the read on the primary; when we are looking for availability, we should use `primaryPreferred`
    because we can guarantee consistency on most of the reads. When something goes
    wrong in the primary node, we can count on any secondary node. Finally, if we
    are looking for the lowest latency, we may use `nearest`, reminding ourselves
    that we do not have a guarantee of data consistency because we are prioritizing
    the lowest latency network node.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果我们的应用程序希望最大化一致性，那么我们应该优先考虑在主节点上进行读取；当我们寻求可用性时，我们应该使用`primaryPreferred`，因为我们可以保证大多数读取的一致性。当主节点出现问题时，我们可以依靠任何辅助节点。最后，如果我们寻求最低的延迟，我们可以使用`nearest`，提醒自己我们没有数据一致性的保证，因为我们优先考虑最低延迟的网络节点。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned to analyze query performance using MongoDB's native
    tools and to optimize our queries with this.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了使用MongoDB的原生工具分析查询性能，并优化我们的查询。
- en: In the next chapter, we will talk about how to manage our database and its collections
    better by doing a functional or geographic segregation. You will also see how
    to maintain collections that should support a high read and write throughput.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何通过功能或地理分离更好地管理我们的数据库和其集合。您还将了解如何维护应支持高读写吞吐量的集合。
