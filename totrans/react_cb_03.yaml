- en: Handling Events, Binding and Useful React Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Binding methods using the constructor versus using arrow functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating form elements with events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying information in a modal with react-popup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Airbnb React/JSX Style Guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating our title and meta tags with React Helmet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter contains recipes related to handling events, binding methods in
    React and we will implement some of the most useful React packages.
  prefs: []
  type: TYPE_NORMAL
- en: Binding methods using the constructor versus using arrow functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to learn the two ways of binding methods in React:
    using the constructor and using arrow functions.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe is straightforward, and the goal is to bind a method using the
    class constructor and using arrow functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new component called `Calculator`. We will create a basic calculator
    with two inputs and one button. The skeleton of our component is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Calculator/Calculator.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to add two new methods, one to handle the inputs (`onChange`
    event) and one to manage the result button (`onClick`). We can use the same `handleOnChange`
    method for both inputs. Since we have the names of the fields (which are the same
    as the state) we can dynamically update each state, and in the `handleResult`
    method, we just sum both numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in our `render` method, we need to add the events to the inputs and the
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Our CSS code for this is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Calculator/Calculator.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application right now, you will see that if you try to write
    something in the inputs or you click on the button, you will get an error such
    as this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9ed7bb44-c080-4114-9cd3-19c9f1f2dac3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The reason is that we need to bind those methods to the class to have access
    to it. Let''s bind our methods first using our constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the constructor to bind the methods is good if you want to list all of
    them on the top of the component. If you look at the `Calculator` component, it
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f4a63dfb-2cfd-42c1-b791-ce5adf207567.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s use arrow functions to automatically bind our methods instead of
    doing it on the constructor. For this you need to remove your bindings methods
    in the constructor and change the `handleOnChange` and `handleResult` methods to
    arrow functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will get the same result. I prefer arrow functions to bind methods because
    you use less code and you don't need to add the methods to the constructor manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, you have two options to bind methods in your React components.
    The constructor option is most commonly used at the moment, but the arrow functions
    are getting more popular. You decide which binding option you like the most.
  prefs: []
  type: TYPE_NORMAL
- en: Creating form elements with events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed in the previous chapter that we used some simple forms
    with events, but in this recipe, we will see this topic in more depth. In [Chapter
    6](69fdac67-4387-49ad-89bb-b3407133caaf.xhtml), *Creating Forms with Redux Form*,
    we are going to learn how to handle forms with Redux Form.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a new component called `Person`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The skeleton we are going to use for this component is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Person/Person.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the `firstName`, `lastName`, `email`, and `phone` fields to our
    form. The `render` method should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use these CSS styles for our form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Person/Person.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run your application, you should see this view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0b242cf6-c919-460c-8441-b290a1516c01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use our local state in the inputs. The only way we can retrieve the
    values from the inputs in React is by connecting the value of each field to a
    specific local state like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you try to type something, you will notice that you are not allowed to write
    anything, and this is because all the inputs are connected to the local state,
    and the only way we can re-render the typed text is by updating the local state.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, the only way we can update our local state is by detecting
    a change in our inputs, and that will happen when the user inputs something. Let''s
    add a method for the `onChange` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Like I mentioned in the last recipe when we use an arrow function in our methods
    we are automatically binding the class to the method. Otherwise, you will need
    to bind the method in the constructor. In our `firstName` input, we need to call
    this method on the `onChange` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'But here we have a problem. If we have four fields, then you will probably
    think you need to create four different methods (one for each state), but there
    is a better way to solve this: to get the value of the input name within the `e
    (e.target.name)` object. In this way, we can update all the states with the same
    method. Our `handleOnChange` method should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With this `([name])` syntax in the object, we can update all the states we
    have in our forms dynamically. Now we need to add this method to the `onChange`
    of all the inputs. After this, you will be able to write into the inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'All forms need to submit the information they have collected from the user.
    We need to use the `onSubmit` event of our form and call a `handleOnSubmit` method to
    retrieve all the input values through the local state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After we created this method we need to call it on the `onSubmit` event of
    the `form` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can test this. Open your browser console, and when you write some values
    in the inputs you will be able to see the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dac2236e-5543-45a4-b6b3-6148da23c718.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to validate the required fields. Let''s suppose that the `firstName`
    and `lastName` fields are mandatory. If a user doesn''t write a value in the fields,
    we want to add an error class to display a red border around the input. The first
    thing you need to do is to add a new local state for errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add any fields you want to validate here, and the value is Boolean
    (`true` means there is an error, `false` means it is okay). Then, in the `handleOnSubmit`
    method, we need to update the state if we have an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in your `render` method you need to add a ternary validation in the `className`
    prop of the `firstName` and `lastName` fields, and if you want to be fancy you
    can also add an error message below the inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to add the error classes, `.error` and `.errorMessage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you submit your form without `firstName` or `lastName` now, you will get
    this view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/03ba5fa4-6da1-4b49-9ac0-61dabc07d396.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The full `Person` component should be like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Person/Person.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are essential for any web application, and handling them with React is
    easy using local state, but it is not the only way to manage them. If your forms
    are complex, with multiple steps (are typically used on user registration), you
    probably need to keep the values throughout the entire process. In this scenario,
    it is painless to handle forms using Redux Form, which we are going to learn about
    in [Chapter 6](69fdac67-4387-49ad-89bb-b3407133caaf.xhtml)*, Creating Forms with
    Redux Form*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are more events you can use in React:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Keyboard events**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onKeyDown` is executed when a key is depressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onKeyPress` is executed after the key is released, but before `onKeyUp` is
    triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onKeyUp` is executed last after the key is pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Focus events**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`onFocus`** is executed when a control receives focus'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onBlur` is executed when a control loses focus'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forms events**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onChange` is executed when the user changes the value in a form control'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onSubmit` is a particular prop for `<form>` that is called when a button is
    pressed, or when the user hits the `return` key within a field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mouse events**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onClick` is when the mouse button is pressed and released'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onContextMenu` is when the right button is pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDoubleClick` is when the user performs a double-click'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseDown` is when the mouse button is depressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseEnter` is when the mouse moves over an element or its children'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseLeave` is when the mouse leaves an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseMove` is when the mouse moves'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseOut` is when the mouse moves off an element or over one of its children'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseOver` is when the mouse moves over an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseUp` is when a mouse button is released'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drag and drop events**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onDrag`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragEnd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragEnter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragExit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragLeave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragOver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragStart`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDrop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For drag and drop, events I recommend using the `react-dnd` ([https://github.com/react-dnd/react-dnd](https://github.com/react-dnd/react-dnd))
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying information in a modal with react-popup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A modal is a dialog box/popup that is displayed over the current window, is
    suitable for almost all projects. In this recipe, we will learn how to implement
    a basic modal using the `react-popup` package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you need to install `react-popup`. Let''s do it with this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the last recipe''s code, we are going to add a basic popup to display
    information about the person that we registered in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `App.jsx` file and import the `Popup` object from `react-popup`.
    For now, we are going to import `Popup.css` (the code is too large to put it in
    here, but you can copy and paste the CSS demo code from the code repository for
    this project: `Chapter03/Recipe3/popup/src/components/Popup.css`). Then, after
    `<Footer />` add the `<Popup />` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in our `Person.js` file, we need to include the popup as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify our `handleOnSubmit` method to implement the popup. First, we
    need to validate that we are receiving at least the `firstName`, `lastName`, and
    `email` (phone will be optional). If we get all the necessary information, then
    we will create a popup and display the user''s information. One of the things
    I like about `react-popup` is that it allows us to use JSX code in its content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you did everything correctly, you should be able to see the popup like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/db91155c-0691-4581-ace0-3b22048479cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the code, the phone is optional, so if we don''t include
    it we won''t render it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/689c3af4-5c25-4e59-ad11-f94b3fbe6b6b.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`react-popup` provides configuration to execute an action. In our example,
    we used that action to close the popup when the user presses the `Close` button,
    but we can pass Redux actions to do other things, such as send some information
    or even add forms inside our popup.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Airbnb React/JSX Style Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Airbnb React/JSX Style Guide is the most popular style guide for coding in React.
    In this recipe, we are going to implement the ESLint with the Airbnb React/JSX
    Style Guide rules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To implement the Airbnb React/JSX Style Guide, we need to install some packages,
    such as `eslint`, `eslint-config-airbnb`, `eslint-plugin-babel`, and `eslint-plugin-react`.
  prefs: []
  type: TYPE_NORMAL
- en: I don't like to force anyone to use a specific IDE, but I would like to recommend
    some of the best editors to work with React.
  prefs: []
  type: TYPE_NORMAL
- en: '**Atom** - [https://atom.io](https://atom.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In my personal opinion, Atom is the best IDE for working with React. For this
    recipe, we are going to use Atom.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pros**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIT License (open source)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to install and configure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a lot of plugins and themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works perfectly with React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Mac, Linux, and Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use Nuclide to React Native (https://nuclide.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cons**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's slow compared with other IDEs (if you have 8 GB of RAM you should be fine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code **(VSC) - [https://code.visualstudio.com](https://code.visualstudio.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VSC is another good IDE for working with React.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pros**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIT License (open source)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to install
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a lot of plugins and themes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works perfectly with React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Mac, Linux, and Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cons**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft (I'm not a big fan of Microsoft)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration can be confusing at the beginning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sublime Text - **[https://www.sublimetext.com](https://www.sublimetext.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text was my first love, but I have to accept that Atom has taken its
    place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pros**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to install
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a lot of plugins and themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Mac, Linux, and Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cons**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is not free ($80 USD per license).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is still not mature enough to work with React.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some plugins are hard to configure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing all the necessary packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There are some rules of Airbnb React/JSX Style Guide that I prefer not to use
    or change the default values a little bit, but it depends whether you keep them
    or remove them.
  prefs: []
  type: TYPE_NORMAL
- en: You can check all the ESLint rules on the official website ([https://eslint.org/docs/rules](https://eslint.org/docs/rules))
    and all the special React ESLint rules at [https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules](https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules).
  prefs: []
  type: TYPE_NORMAL
- en: 'The rules that I prefer not to use or I prefer to change the default values
    of are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`comma-dangle`: off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arrow-parens`: off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max-len`: 120'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-param-reassign`: off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function-paren-newline`: off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react/require-default-props`: off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enable our ESLint, we need to create a `.eslintrc` file and add the rules
    we want to turn off:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating `.eslintrc` file. You need to create a new file called `.eslintrc` at
    the root level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a script to run the linter. In your `package.json` file, you need to add
    a new script to run the linter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have added the `lint` script, you can run the linter validation with
    this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can see the linter errors you have in your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7c38007a-39f0-40e4-9028-9fef772c0ab6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to fix the linter errors. The first error is Component should be
    written as a pure function `react/prefer-stateless-function`*.* That means our
    `App` component can be written in a functional component because we don''t use
    any local state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have this error: JSX not allowed in files with extension ''`.js`''
    `/react/jsx-filename-extension`. This error means that in the files where we use
    JSX code, we need to use the `.jsx` extension instead of `.js`. We have six files
    with this problem (`App.js`, `Person.js`, `index.js`, `Content.js`, `Footer.js`,
    and `Header.js`). We just need to rename the files and change the extension to
    `.jsx` (`App.jsx`, `Person.jsx`, `Content.jsx`, `Footer.jsx`, and `Header.jsx`).
    Due to `react-scripts`, we won''t change our `index.js` to `index.jsx` for now.
    Otherwise, we will get an error like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1d6d78b2-c4cd-4d1d-b3af-bfdf8433b323.png)In [Chapter 10](e95b58ed-e32c-4488-ab8e-b332e235bda8.xhtml)*,
    Mastering Webpack 4.x*, we will be able to rename all our JSX files with the `.jsx`
    extension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to suppress the lint error. We have to write this comment at the top
    of our `index.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at this error: *Expected a line break after this opening brace*/`object-curly-newline`,
    and this error: *Expected a line break before this closing brace*/`object-curly-newline`.
    In our `Person.jsx` file, we have this object in our `handleOnChange` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The rule says we need to add a break-line before and after the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s look at Warning: Unexpected console statement /no-console. The console.log
    generated a warning in our linter that won''t affect us, but if you need to have
    a console and you want to avoid the warning, you can add an exception with an
    ESLint comment like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'More ESLint comments do the same thing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to disable the consoles in the entire file, then at the beginning
    of the file you can do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '*Err**or: ''document'' is not defined**/no-undef.* There are two ways to fix
    this error in our `index.jsx` where we are using the global object document. The
    first one is to add a special comment to specify that the document object is a
    global variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'I don''t like this way. I prefer to add a `globals` node into our `.eslintrc`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The linter validation is essential for any project. Sometimes, this is a topic
    of discussion because most developers do not like to follow standards, but once
    everyone gets familiar with this style guide everything is more comfortable, and
    you will deliver better quality code.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we know how to run the linter validation in our Terminal, but you can
    also add the ESLint validator to your IDE (Atom and VSC). For this example, we
    are going to use Atom.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Atom plugins**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Atom (on a Mac) you can go to Preferences | +Install, and then you can find
    the Atom plugins. I''ll give you a list of the plugins I use to improve my IDE
    and increase my productivity:'
  prefs: []
  type: TYPE_NORMAL
- en: '`linter-eslint`: Lint JS on the fly, using ESLint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`editorconfig`: Helps developers maintain consistent coding styles between
    different editors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`language-babel`: Supports React syntax'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minimap`: A preview of the full source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pigments`: A package for displaying colors in projects and files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort-lines`: Sorts your lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`teletype`: Shares your workspace with team members and allows them to collaborate
    on code in real time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have installed these, packages if you go to a file with lint errors,
    you will be able to see them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc4e7ab5-771d-4df9-b1b2-120cdfdcd448.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Configuring EditorConfig**'
  prefs: []
  type: TYPE_NORMAL
- en: EditorConfig is also very useful for maintaining consistent coding styles when
    people in our team uses different editors. EditorConfig is supported by a lot
    of editors. You can check whether your editor is supported on the official website,
    [http://editorconfig.org](http://editorconfig.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration I use is this one; you need to create a file called `.editorconfig` in
    your `root` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You can affect all the files with [*], and specific files with [*.extension]**.**
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running the linter validation in our IDE or with the Terminal is not enough
    to be sure that we are going to validate 100% of our code, and we are not going
    to inject any linter errors into our Git repositories. The most effective way
    to be 100% sure we are sending validated code to our Git repositories is to use
    Git hooks. That means you run the linter validator before performing a commit
    (pre-commit) or before a push (pre-push). I prefer to run the linter on the pre-commit
    and the unit tests on the pre-push (we are going to cover unit tests in [Chapter
    12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml), *Testing and Debugging*)*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Husky is the package we are going to use to modify our Git hooks; you can install
    it with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have added this package, we need to alter our `package.json` and add
    new scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using four scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`precommit`: Runs before a commit is performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postmerge`: Runs after performing a merge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postrewrite`: This hook is called by commands that rewrite commits (git commit
    `--amend`, `git-rebase`; currently, `git-filter-branch` does not call it!).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*prepush`: I didn''t add this Git hook at this moment, but this is useful
    for running our unit tests (`"prepush": "npm test"`), we are going to add this
    Git hook in [Chapter 12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml), *Testing
    and Debugging*, when we cover the unit tests topic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, in our `precommit`, we will run our linter validator, and if the
    validator fails, the commit will not be executed until you fix all the linter
    errors. The postmerge and postrewrite hooks help us to sync our npm packages,
    so for example, if User A adds new npm packages, then User B pulls the new code
    and will automatically run the `npm install` command to install the new packages
    in the User B local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our title and meta tags with React Helmet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all projects, it is vital to be able to change our site title and our meta
    tags with information on each specific page to be SEO friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install a package called `react-helmet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React Helmet is the best way to handle the title and meta tags to improve the
    SEO on our websites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have installed the `react-helmet` package using the same component
    of `App.jsx`, we need to import React Helmet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We can change the title of our page by adding the title prop to the `Helmet`
    component like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If you start your application, you will see the title in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9f0739d6-85dd-42b3-baa8-1b039de69d09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to change your meta tags, you can do it like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With that code, we are going to get this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a5fa102a-2877-4269-adda-176dd3a83664.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also do this if you want to add the HTML code directly into the `Helmet`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have noticed that there is a flashing change on the title in the first
    load of the page, and this is because in our `index.html` file we have the title *React
    App *by default. You can change that by editing this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'File: public/index.html'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have only changed our title in the main component (`<App />`), but
    in [Chapter 4](78759181-e63f-4734-beea-35a6e4372e6b.xhtml)*, Adding Routes to
    Our Application with React Router V4, *we are going to be able to change our titles
    and meta tags in different components based on a route.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml), *Implementing
    Server-Side* *Rendering*, we are going to learn how to implement server-side rendering
    in our application. You can also use React Helmet with server-side rendering,
    but you need to make some changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in your `index.html` (Note: this file will change to a JavaScript file
    in [Chapter 11](884074f8-0a8a-4e3f-b9dc-b817e0f3f7c3.xhtml)*, Implementing Server-Side
    Rendering; *Do not try to add this to your current `index.html` file) you will
    need to add something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: And with this, we are going to be able to update our titles and meta tags using
    server-side rendering.
  prefs: []
  type: TYPE_NORMAL
