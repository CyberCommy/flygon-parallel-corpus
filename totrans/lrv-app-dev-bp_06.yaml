- en: Chapter 6. Creating a Photo Gallery System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll code a simple photo gallery system with Laravel. We''ll
    also cover Laravel''s built-in file validation, file upload, and the **hasMany**
    database relation mechanism. We will use the `validation` class to validate the
    data and files. Also, we''ll cover the file class for processing files. The following
    topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Album model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Image model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an album
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a photo upload form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving photos between albums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a table and migrating albums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We assume that you''ve already defined the database credentials in the `database.php`
    file located at `app/config/`. To build a photo gallery system, we need a database
    that has two tables: `albums` and `images`. To create a new database, simply run
    the following SQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully creating the database for the application, we will first
    need to create the `albums` table and install it in the database. To do this,
    open up your terminal, navigate through your project folder, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will generate a migration file under `app/database/migrations`
    to generate a new MySQL table, named `posts`, in our `laravel_photogallery` database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define our table columns, we need to edit the migration file. After editing,
    the file should have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the file, we need to use a simple artisan command again to execute
    migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If no error has occurred, please check the `laravel_photogallery` database for
    the `albums` table and its columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the columns in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This column is used for storing the ID of the album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This column is used for storing the name of the album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This column is used for storing the description of the album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cover_image`: This column is for storing the cover image of the album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've successfully created our `albums` table, so we need to code our **Album**
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Album model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will benefit from using the Eloquent ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the following code as `Album.php` in the `app/models/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We have set the database table name using the `protected $table` variable; we've
    also set the editable columns using the `protected $fillable` variable, which
    we've already seen and used in previous chapters. The variables that are defined
    in the model are enough for using Laravel's Eloquent ORM. We'll cover the `public
    Photos ()` function in the *Assigning a photo to an album* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Our **Album** model is ready; now we need an **Image** model and a database
    to assign photos to albums. Let's create them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the images database with the migrating class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create our migration file for images, open up your terminal, navigate through
    your project folder, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you know, the command will generate a migration file in `app/database/migrations`.
    Let''s edit the migration file; the final code should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing the migration file, run the following migrate command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you know, the command creates the `images` table and its columns. If no error
    has occurred, check the `laravel_photogallery` database for the `users` table
    and the columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the columns in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This column is used for storing the id of the image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`album_id`: This column is used for storing the id of the image''s album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This column is used for storing the description of the image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: This column is used for storing the path of the image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to explain one more thing for this migration file. As you can see in
    the migration code, there is a `foreign` key. We use the `foreign` key when we
    need to link two tables. We have an `albums` table and each album will have images.
    If the album is deleted from the database, you want all its images to be deleted
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Image model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve already created the `images` table. So, as you know, we need a model
    to operate database tables on Laravel. To create that, save the following code
    as Image.php in the `app/models/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Our **Image** model is ready; now we need a controller to create the albums
    on our database. Let's create that.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an album
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know from the previous chapters in this book, Laravel has a great RESTful
    controller mechanism. We'll continue to use that to keep the code simple and short
    during development. In the next chapters, we'll cover another great controller/routing
    method named **Resource Controllers**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list, create, and delete an album, we need some functions in our controller.
    To create them, save the following code as `AlbumsController.php` in the `app/controllers/`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `postCreate()` function first validates the posted data of the form. We'll
    cover validation next. If the data is validated successfully, we will rename the
    cover image and upload it with a new filename, because the code overwrites files
    which have the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getDelete()` function is deleting the album along with assigned images
    (which are stored in an `images` table) from the database. Please remember the
    following migration file code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Before creating our templates, we need to define the routes. So, open up the
    `routes.php` file in the `app` folder and replace the code with the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need some template files to show, create, and list the albums. First,
    we should create the index template. To create that, save the following code as
    `index.blade.php` in the `app/views/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Adding a template for creating albums
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see in the following code, we prefer to use Twitter''s bootstrap
    **CSS** framework. This framework allows you to rapidly create useful, responsive,
    and multi-browser supported interfaces. Next, we need to create a template for
    creating albums. To create that, save the following code as `createalbum.blade.php`
    in the `app/views/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The template creates a basic upload form and shows the validation errors which
    are passed from the controller side. We need just one more template file to list
    the album images. So, to create it, save the following code as `album.blade.php`
    in the `app/views/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may remember, we have used the `hasMany()` Eloquent method on our model
    side. On the controller side, we use the function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The code fetches the whole image data in an array that belongs to the album.
    Because of that, we use the `foreach` loop in the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating a photo upload form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we need to create a photo upload form. We''ll upload the photos and assign
    them to the albums. Let''s first set the routes; open the `routes.php` file in
    the `app` folder and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We need a template for the photo upload form. To create that, save the following
    code as `addimage.blade.php` in the `app/views/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Before creating the template, we need to code our controller. So, save the
    following code as `ImageController.php` in the `app/controllers/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The controller has three functions; the first one is the `getForm()` function.
    This function basically shows our photo upload form. The second one validates
    and inserts the data into the database. We'll explain the validating and inserting
    functions in the next section. The third one is the `getDelete()` function. This
    function basically deletes the image records from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Validating the photo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Laravel has a powerful validation library, which has been mentioned in this
    book many times. We validate the data in controllers as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s examine the code. We defined some rules in `array`. We have two validation
    rules in the `rules` array. The first rule is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding rule means that the `album_id` field is required (must be posted
    in the form), it must be a numeric value, and must exist in the `id` column of
    the `albums` table as we want to assign images to `albums`. The second rule is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding rule means that the `image` field is required (must be posted
    in the form) and its content must be an image. Then we check the posted form data
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The validation function needs two variables. The first one is the data that
    we need to validate. In this case, we set that using the `Input::all()` method,
    which means we need to validate the posted form data. The second one is the `rules`
    variable. The `rules` variable must be set as an array as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Laravel's validation class comes with many predefined rules. You can see the
    updated list of all available validation rules at [http://laravel.com/docs/validation#available-validation-rules](http://laravel.com/docs/validation#available-validation-rules).
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, we need to validate only specific MIME types, such as `JPEG, BMP,
    ORG, and PNG`. You can easily set the validation rule for this kind of validation
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we check the validation process using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If validation fails, we redirect the browser to the image upload form. Then,
    we show the rules in the template file using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Assigning a photo to an album
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `postAdd( )` function is used for processing the request to create a new
    image record in the database. We get the author''s ID using the following previously
    mentioned method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the following method, we assign the current user with the blog post.
    We have a new method in the query as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve defined a `public Photos ()` function in our Album model using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `hasMany()` method is an Eloquent function for creating relations between
    tables. Basically, the function has one `required` variable and one optional variable.
    The first variable (`required`) is for defining the target model. The second,
    which is the optional variable, is for defining the source column of the current
    model's table. In this case, we store the albums' IDs in the `album_id` column
    in the `images` table. Because of that, we need to define the second variable
    as `album_id` in the function. The second parameter is only required if your ID
    doesn't follow the convention. Using this method, we can pass our albums' information
    and assigned images' data to the template at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can remember from [Chapter 4](ch04.html "Chapter 4. Building a Personal
    Blog"), *Building a Personal Blog*, we can list the relational data in the `foreach`
    loop. Let''s have a quick look at the image-listing section of code in our template
    file, which is located in `app/views/ album.blade.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Moving photos between albums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Moving photos between albums is a great feature for managing the album''s images.
    Many photo gallery systems come with this feature. So, we can code it easily with
    Laravel. We need a form and controller function for adding this feature to our
    photo gallery system. Let''s code the controller function first. Open the `ImagesController.php`
    file which is located in `app/controllers/` and add the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding code, we use the `Validation` class again.
    Let''s examine the rules. The first rule is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding rule means that the `new_album` field is `required` (must be
    posted in the form), must be a numeric value, and exist in the `id` column of
    the `albums` table. We want to assign images to albums, so the images must exist.
    The second rule is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding rule means that the `photo` field is `required` (must be posted
    in the form), must be a numeric value, and exist in the `id` column of the `images`
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'After successful validation, we update the `album_id` column of the `photos`
    field and redirect the browser to show the new album of photos using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The final code of the `Images` controller should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Our controller is ready, so we need to set up the updated form''s route in
    `app/routes.php`. Open the file and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The final code located in `app/routes.php` should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Creating an update form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to create our update form in our template file. Open the template
    file which is located in `app/views/ album.blade.php` and change the `foreach`
    loop as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've created a simple photo gallery system with Laravel's
    built-in functions and the Eloquent database driver. We've learned how to validate
    the data, and about the powerful data relation method in Eloquent named hasMany.
    In the next chapters, we'll learn to work with more complex tables, and relational
    data and relation types.
  prefs: []
  type: TYPE_NORMAL
