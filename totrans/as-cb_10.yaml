- en: Chapter 10. Beta Testing Your Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You did everything you could do to ensure the quality and performance of your
    app. Now it is time to ship your app to your beta users to see what they think
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before shipping your app, you should have a look at Crashlytics first. You can
    find it at [https://try.crashlytics.com](https://try.crashlytics.com).
  prefs: []
  type: TYPE_NORMAL
- en: Crashlytics can provide you with real-time crash reporting information not only
    during your beta tests, but also after releasing your app on the Play Store. Sooner
    or later, your app runs on a device that you have not tested your app on and it
    crashes on it. Crashlytics can help you find the cause for this.
  prefs: []
  type: TYPE_NORMAL
- en: Just download their SDK, add a few lines of code to your app, and you are good
    to go.
  prefs: []
  type: TYPE_NORMAL
- en: Distribute your app and get it tested before revealing your app to a large audience
    by publishing it on the Play Store. Learn from their feedback and improve your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'At last, you can put this logo on your website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Beta Testing Your Apps](img/B04299_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Build variants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play Store beta distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A typical software release cycle goes like this, although it does not necessarily
    have to go through each phase:'
  prefs: []
  type: TYPE_NORMAL
- en: Alpha -> closed beta -> open beta -> release.
  prefs: []
  type: TYPE_NORMAL
- en: You could release your app directly on the Google Play Store, but having at
    least one beta round is a clever thing to do. Gathering feedback and applying
    further improvements can make your app even better.
  prefs: []
  type: TYPE_NORMAL
- en: We will have a look at how to set up multiple different flavors for your app
    and how to define different build types for it. For example, your release app
    will most likely use different API endpoints than those you used to debug and
    test, at least I hope so.
  prefs: []
  type: TYPE_NORMAL
- en: The minimum API level you choose, the required features, and the requested permissions
    will affect the number of devices that your app will be available for in the Play
    Store. Also, we will have a preview of how runtime permissions that come with
    Android Marshmallow require a different approach.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will find out what we need to do to distribute a beta or alpha version
    of our app using the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Build variants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio supports different configurations for your app. For example,
    your app might use different API endpoints for debugging. For this purpose, we
    will use build types.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, you may have different versions of your app. A single project
    can have multiple customized versions of the app. If these changes are minimal
    and, for example, just change the look of an app in case it is a white label solution
    using a flavor is the way to go.
  prefs: []
  type: TYPE_NORMAL
- en: A build variant is the combination of a build type and a particular flavor.
    The upcoming recipe will demonstrate how to use these.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you just need a recent copy of Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will build a simple messaging app that uses different build types and build
    flavors:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio, name it `WhiteLabelMessenger`, enter
    a company name in the **Company Domain** field, and click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose **Phone and Tablet** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Blank activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the suggested values and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file and add a few extra strings. They should look like
    these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create an `icon.xml` and a `background.xml` resource file in the `res/drawable`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `res/drawable` folder, create a new file and name it `icon.xml`. It
    will draw a blue-colored circle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `res/drawable` folder, create a new file and name it `background.xml`.
    It defines a gradient blue background:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `activity_main.xml` file and modify it so that it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `androidmanifest.xml` file and a permission to send SMS messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `onCreate` method of the `MainActivity` file. You can press *Shift*
    two times to display a search panel. Type `onCreate` on the search panel and select
    the `onCreate` method of the `MainActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an on click listener on the `MainActivity` class and implement the `onClick`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Select the `app` folder. Next, choose **Edit flavors** from the **Build** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The list only contains a defaultConfig. Click on the **+** button to add a new
    flavor. Name it `blueFlavor` and give it the same values as `min sdk version`
    and `target sdk version` as is the case with **defaultConfig**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **application id** field, use the package name **+** the extension .`blue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **version code** and **version name** for this flavor and click on
    the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat step 14 to 16 for another flavor. Name that flavor `greenFlavor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now your `build.gradle` file should contain the flavors as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the **Project** panel, select the `src` folder under the `app` folder. Then,
    create a new folder and name it `blueFlavor`. Within that folder, you can maintain
    the same structure, as is the case for the `main` folder. For this recipe, it
    is sufficient just to add a `res` folder and within that folder another one called
    `drawable`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same thing for the `greenFlavor` build's flavor. The project structure
    will now look like this:![How to do it...](img/B04299_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `background.xml` and `icon.xml` files from the `/main/res/drawable`
    folder and paste them in the `blueFlavor/res/drawable` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat this for `greenFlavor` and open the `background.xml` file in the `greenFlavor/res/drawable`
    folder. Modify its content. For the green flavor, we will be using a gradient
    green color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, within the same folder, open the `icon.xml` file and make the `drawable`
    folder appear in green as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The same thing can be done to use different values (or classes or layouts) for
    the debug and release build types. Create a `debug` folder in the `app/src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within that folder, create a `res` folder and within that, a `values` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `strings.xml` file from the `main/res/values` folder and paste it into
    the `debug/res/values` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file and modify the `really_send_sms` string resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A better approach for this purpose of course will be to use a constants class
    that defines different values, but for the sake of simplicity, we will modify
    the string resource instead.
  prefs: []
  type: TYPE_NORMAL
- en: Build variants
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Select the `app` folder and choose **Select Build Variant** from the **Build**
    menu. It will display the **Build variants** panel as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build variants](img/B04299_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And follow the next steps in **Build Variants**:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the **greenFlavorDebug** build variant and run the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything goes well, the app has a green look and behaves as if it is being
    debugged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now change the build variant to **blueFlavorDebug** and run the app again. Indeed,
    it looks blue now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More or less the same thing applies to the debug and release build types; however,
    this time instead of the looks, the behavior or data (or end points for that matter)
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Releasing the app requires signing, which is something we will do when we distribute
    the app to the Play Store, which has been described in the last recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '![Build types](img/B04299_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is basically all there is to tell about build variants. Most ideal build
    types and flavors contain just a small number of modifications. If the differences
    between the various flavors of your app are more than just some tweaks in layouts,
    drawables, or constant values, you will have to consider a different approach.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Android Studio comes with a couple of other great features to finalize your
    app. One of them is creating technical documentation automatically. Just add some
    comments to a class or method, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you choose **Generate JavaDoc** from the **Tools** menu and define the
    path in the **output directory** field in the dialog that appears, you just need
    to click the **OK** button and all documentation is being generated as HTML files.
    The outcome will be displayed in your browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/B04299_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Android Studio tip**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you often need to return to a particular place in your code? Create a bookmark
    with the *Cmd* + *F3* (for Windows: *F11*) shortcut.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To display a list of bookmarks and to choose from them, use the shortcut *Cmd*
    + *F3* (for Windows: *Shift* + *F11*).'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The number of different types of devices that your app will target depends on
    the feature requirements (which needs permissions) and the markets at which you
    are targeting (by explicitly selecting specific countries or by offering your
    app in specific languages).
  prefs: []
  type: TYPE_NORMAL
- en: If, for example, your app requires both a front and a back camera, you will
    be targeting a smaller number of devices, as would be the case if you just require
    a back camera.
  prefs: []
  type: TYPE_NORMAL
- en: Usually when installing an app, the user is asked to accept (or decline) all
    the required permissions, as it has been defined in the `AndroidManifest` file
    of an app.
  prefs: []
  type: TYPE_NORMAL
- en: With the introduction of Android 6 (Marshmallow), the way a user is asked for
    particular permissions has changed. Only if a certain type of permission is required,
    the user will be prompted so that he can allow or deny that permission.
  prefs: []
  type: TYPE_NORMAL
- en: With that, there is an opportunity for the app to explain why this permission
    is needed. After this, the whole thing makes much more sense to the user. These
    so-called runtime permissions require a somewhat different development approach.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we will modify the previous app that sends SMSs. Now we need
    to ask the user's permission once he hits the button in order to send an SMS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test runtime permissions, you need to have a device running on Android 6.0
    or higher or you need to have a virtual device running on Android Marshmallow
    or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that you have downloaded the Android 6.x SDK (API Level 23 or
    above).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, how do these runtime permissions look and how do we handle them? This can
    be checked with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `AndroidManifest` file and add the permission (according to the new
    model) to send SMS messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Open the `build.gradle` file in the `app` folder and set the value for `compileSdkVersion`
    to the latest available version. Also, change the values for each `minSdkVersion`
    and `targetSdkVersion` to `23` or above.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `onClick` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a constant value so that later we will know to which permission request
    the permission result is referring to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `sendSms` method. We will use the `SmsManager` method to send
    the `Y-E-A-H` text to the phone number that the user has entered. Once the message
    has been sent, a toast will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, implement the `onRequestPermissionsResult` method. If the granted
    permission is the permission for an SMS, then call the `sendSms` method. If the
    permission is denied, a toast will be displayed and the **send** button and the
    edit text to enter the phone number will be disabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Run your app. Use a device running on Android 6.0 or higher or create a virtual
    device that runs on the API level 23 or above.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the permission to send the SMS will not be asked upfront (that is, if the
    user installs the application). Instead, a dialog asking for permission pops up
    as soon as you hit the **Send** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you agree with the request permission, the SMS message will be sent. If you
    deny the requested permission, the edit box and the button will be disabled and
    a toast will be displayed to provide feedback:![How to do it...](img/B04299_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This recipe has demonstrated the basic idea of runtime permissions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how and when to ask for permission, or how and when to provide feedback
    about particular features that are not available, you can check the Google guidelines
    at [https://www.google.com/design/spec/patterns/permissions.html](https://www.google.com/design/spec/patterns/permissions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Android Studio tip**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily extract code from a method that has become too large. Just mark
    the code that you want to move and use the shortcut *Cmd* + *Alt* + *M* (for Windows:
    *Ctrl* + *Alt* + *M*).'
  prefs: []
  type: TYPE_NORMAL
- en: Play Store beta distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right, we are going to upload our app to the Play Store as a beta distribution.
    Exciting, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the app from the first recipe; although, any
    app that you consider to be ready for the beta launch will do.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you do have some artwork for it as well, such as icons and screenshots.
    Don't worry, for this recipe, you can download these items as well from <[www.packtpub.com](http://www.packtpub.com)>.
    Also, think about your app's metadata, such as title, description, and category.
  prefs: []
  type: TYPE_NORMAL
- en: Most important is that you do have a developers account and that you do have
    access to the Google Play Developer console. If you do not have an account, you
    need to register first via [http://developer.android.com/distribute/googleplay/start.html](http://developer.android.com/distribute/googleplay/start.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Getting your app into the Play Store is not so hard. It just takes some time
    to set up things the right way:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to your **Google Play Developer Console** webpage or register first
    if you need to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the dashboard, click on the **Add new application** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog, enter the **Title** of the application `Blue Messenger` and click
    on the **Upload now APK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice the **production**, **beta**, and **alpha** tabs. Ideally, you
    start with alpha testing, but for demonstration purposes, we will choose the **beta**
    tab right away. On that, the **Upload your first APK to beta** button is shown.
    Click on that button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Android Studio, open the app that we created for the first (or second) recipe
    and from the **Build** menu, choose the **Generate signed APK** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `app` module and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **path** to your key store. If you do have one, click on the **Create
    new…** button and find a good place for your key store file (with the `.jks` extension).
    Enter a **password** for it, repeat the password, and enter a suitable value for
    **First and last name**. Then, click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **key store password**, create a new **key alias**, and name it `whitelabelmessenger`.
    Enter a **password** for the key and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **master password** if needed and click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the **destination path** if you wish and then select a **build type**
    and **flavor**. Choose **release** and **blueFlavor** and then click on the **OK**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new dialog informs us that a new-signed APK has been created successfully
    if everything goes well. Click on the **Reveal in Finder** (or find it using Windows
    Explorer in case you are using Windows) button to see the APK file that has just
    been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your browser, upload this APK file. Once the APK file has been uploaded,
    the version is displayed on the **beta** tab; you can pick a testing method and
    you see the number of supported devices, which will depend on the API level you
    have chosen and the required feature that comes with the SMS permission (which
    will exclude many tablets right away for example).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the testing method, click on the **Setup closed beta testing** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a list by clicking on the **Create a list** button. Give the list a name,
    for example, **Internal testing** and add the e-mail addresses of the testers
    (or just for practicing purpose, enter your own). When you are done, click on
    the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your own e-mail address as **Feedback channel** and click on the **Save
    draft** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although we are not publishing anything on the store yet, you need to enter
    some values for the **Store listing** section, which is an option that you can
    select from the menu on the left-hand side of the webpage:![How to do it...](img/B04299_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter title, short, and long description. Also, add two screenshots, a high-resolution
    icon and a feature graphic image. You can download these resources from <[www.packtpub.com](http://www.packtpub.com)>
    or you can create them yourself by capturing screenshots from your app and have
    some fun with some kind of a paint program to give them the right widths and heights.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At **categorization**, choose **applications** as the **application type** and
    **Social** or **Communication** as the **category**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your **contact details** and select **Not submitting a privacy policy
    at this time** (unless you do want to do so, of course).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save draft** button and continue with the **Content Rating**
    section by choosing this option from the menu on the left-hand side of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rate your app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Click on the **Continue** button, enter your **e-mail address**, and answer
    the questions about whether your app has any violent, sexual, or other potential
    dangerous content or features. Finally, click on the **Save Questionnaire** button:'
  prefs: []
  type: TYPE_NORMAL
- en: You may now click on the **Calculate Rating** button. Your rating will be displayed
    after that. Click on the **Apply Rating** button and you are done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next section is **Pricing and Distribution**. Pick this option from the
    **menu** on the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it a free app by clicking on the **Free** button and **choose to select
    all countries** (or specify specific countries if you wish). After that, click
    on the **Save Draft** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By now, the **Publish app** button should be enabled. Click on it. If it is
    not enabled, you can click on the **I can't publish?** link to find out what information
    is missing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, the term "publishing" is a bit confusing. It actually means, in this context,
    that the app will be published for the test users that are on the list that you
    just created. Do not worry. Until you promote the app to production, nothing will
    be available at the Play Store, although the term "publishing" seems to suggest
    this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While your app status says **Pending publication**, you can investigate some
    other options such as the list of devices your app is supporting, the required
    features, and permissions and options for analytical purposes, including features
    split testing (A/B tests).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a break
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Pending publication** status may take a couple of hours (or perhaps even
    longer) as recently (since April 2015) Google announced that it will be reviewing
    the apps upfront (in a half-manual-half-automated way) even for alpha and beta
    distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Eat a marshmallow or have some coffee or have a walk in the park. Return within
    a couple of hours to check whether your app's status has changed to **Published**.
    It may take some time, but it will.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your testers might need to change their (security) settings to **allow to install
    apps outside of Google Play Store**.
  prefs: []
  type: TYPE_NORMAL
- en: There are some other things that look confusing. Behind the package name, there
    will be a link that reads **View in Play Store…** and a hint saying that alpha
    and beta apps are not listed in the Play Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **APK** item in the menu on the left-hand side of the webpage.
    By following the link, you will find **Opt In Url** on the **Beta** tab that your
    test users can download and use to install the beta app:![Have a break](img/B04299_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Huge! Your first beta distribution is ready to be tested. You might need multiple
    iterations to get things right or maybe just one beta version will turn out to
    be sufficient to find out that your app is ready for the **Play Store**.
  prefs: []
  type: TYPE_NORMAL
- en: To release your app on the Play Store, click on the **Promote to Prod** button,
    if you dare…
  prefs: []
  type: TYPE_NORMAL
- en: And with that, this book ends. There is so much more to tell and to learn about
    Android development, such as services, Android Pay, **Near Field Communication**
    (**NFC**), and Bluetooth to name just a few; however, by reading this book, you
    have seen most of the elements of the Android Studio IDE and that was what we
    were aiming at.
  prefs: []
  type: TYPE_NORMAL
- en: So this is it for now. Thank you for reading, and happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should be aware of the fact that besides technology, methodology will be
    just as important. It is hard to develop an app that is not only technically perfect
    but also has a lot of users who are so happy with your app and its flow, usability,
    and appearance that they all give you the five stars that you deserve.
  prefs: []
  type: TYPE_NORMAL
- en: I assume you do not want to develop an app for months or for years only to find
    out later that actually nobody cares about it. To find out at an early stage what
    makes people really want to use your app, you should consider the lean start-up
    methodology for your app development.
  prefs: []
  type: TYPE_NORMAL
- en: '**Build – Measure – Learn**'
  prefs: []
  type: TYPE_NORMAL
- en: The **lean start-up** methodology is a method to develop businesses and products
    (or services). The idea is that experiments based on hypotheses, validated learning,
    and iterative product releases lead to shorter product development cycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most important key elements of the lean start-up methodology are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Minimum viable product** (**MVP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split testing and actionable metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In short, a MVP is a version of a product that takes minimal effort to test
    particular ypotheses.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the Lean start-up methodologies, check out the website [http://theleanstartup.com](http://theleanstartup.com),
    read Eric Ries' book, or find a lean start-up event near you from [http://www.leanstartupcircle.com](http://www.leanstartupcircle.com).
  prefs: []
  type: TYPE_NORMAL
- en: The **Play Store developer console** provides options for split testing and
    to measure how your app is being used. Google analytics can help you to do this
    as it is the easiest way to get actionable metrics, which you will need to gather
    for feedback in order to improve your app by learning from it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous** **deployment** nicely fits into the Lean Start-up methodology.
    It can improve the quality and speed of your app development.'
  prefs: []
  type: TYPE_NORMAL
- en: You might wonder what continuous deployment is about. It takes another book
    to fully explain the concept, but here is a short introduction to continuous integration
    and continuous delivery, which, if combined, is what continuous deployment is
    about.
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous integration** (**CI**) is the process where developers commit
    their changes and merge results to a source code repository. A build server observes
    the code repository for changes, pulling and compiling code. The server also runs
    automated tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous delivery** is the process of creating deployable versions of your
    app automatically, for example, by publishing an alpha or beta app in the Play
    Store. For this reason, it is important that the submitted and validated code
    will be in an always-deployable state.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up continuous deployment will take some upfront, but in the end, it
    will result in smaller and faster development cycles.
  prefs: []
  type: TYPE_NORMAL
- en: For a continuous deployment of your Android app, both `Jenkins` and `TeamCity`
    will be suitable. `Teamcity` is recommended most often and does integrate with
    Android Studio using a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: To learn how to set up a `TeamCity` server or to find any further information,
    you can check the website of Packt Publishing that offers some great books that
    explain the concept of continuous integration and `TeamCity` in particular.
  prefs: []
  type: TYPE_NORMAL
