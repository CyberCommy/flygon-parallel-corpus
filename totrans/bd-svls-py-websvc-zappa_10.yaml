- en: Advanced Zappa Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to explore various settings and configurations
    provided by Zappa. This really helps you to deploy your application in an efficient
    way. Hence, there are various settings to configure your application. These settings
    are related to some AWS services and their features and functionality. We are
    going to explore these settings by applying them to our existing Quote API application
    that we developed in [Chapter 9](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d),
    *Asynchronous Task Execution on AWS Lambda*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the server warm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling CORS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling a larger project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling bash compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching unhandled exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some prerequisites to meet before moving ahead. The following requirements
    need to be fulfilled in order to meet the prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 16.04/Windows/macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipenv tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Falcon API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registered domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some previously configured prerequisites can be used from [Chapter 9](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d), *Asynchronous
    Task Execution on AWS Lambda*. This means that you can continue with your configured
    domain and AWS service. You may need to update the Zappa setting file for this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move ahead and explore additional settings uses with the Quote API application.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the server warm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa enables a feature that keeps AWS Lambda in a warm state. AWS Lambda has
    a cold start because of containerization, and so Lambda requires that you set
    up the environment in order to execute functions. Whenever AWS Lambda receives
    a request, it instantiates the Lambda function along with its required environment
    and finally destroys the instance after fulfilling the request.
  prefs: []
  type: TYPE_NORMAL
- en: That's how AWS Lambda works. Hence, Zappa implements this mechanism using the
    AWS CloudWatch event schedule feature in order to keep the instantiated Lambda
    instance in a warm state. Keeping Lambda in the warm state is nothing but triggering
    the CloudWatch event as a ping request every four minutes to prevent the destruction of
    the Lambda instance.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is enabled by default, but if you want to disable this feature,
    then you can set the `keep_warm` flag to `false` in the Zappa settings JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is used to disable the keep warm feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In our case, we want to keep the default setting as it is so that our application
    will always be in a warm state. Let's move on to the next section, where we will
    explore other useful settings.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling CORS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS**) is an essential part of serving
    the API over the same domain or a different hosted domain. The AWS API Gateway
    provides a feature to enable CORS functionality. Once you have configured an API
    resource on an API Gateway, you must enable CORS using the API Gateway web console.
    Enabling CORS over API Gateway resources requires that you set the `OPTION` method
    with some response headers, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access-Control-Allow-Methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access-Control-Allow-Headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access-Control-Allow-Origin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can take a look at the manual process of configuring CORS in the API Gateway
    in AWS's official documentation ([https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Zappa automates the process of configuring CORS with API Gateway resources
    by using a setting attribute called `cors`, as mentioned in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Zappa sets the default value of `cors` as `false`. If you want to enable CORS
    for your API resources, then you can set it `true`. It also supports adding response
    headers.
  prefs: []
  type: TYPE_NORMAL
- en: '`"cors": true` doesn''t work well with `"binary_support": true`. Hence, you
    can disable the API Gateway-level CORS, or you can add application-level CORS
    functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, you can also use application-level CORS. There are
    many libraries available for integrating CORS, and some frameworks have good libraries
    such as `django-cors-headers` ([https://github.com/ottoyiu/django-cors-headers](https://github.com/ottoyiu/django-cors-headers))
    and Flask-CORS ([https://github.com/corydolphin/flask-cors](https://github.com/corydolphin/flask-cors)).
  prefs: []
  type: TYPE_NORMAL
- en: That's all for configuring the CORS feature. I would prefer to enable CORS at
    the application level as you would have better control in handling it.
  prefs: []
  type: TYPE_NORMAL
- en: Handling larger projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to discuss the process of handling large-sized
    projects over AWS Lamda. AWS Lambda, by default, supports different code entry
    types. Now, we are going to discuss this feature in more detail, as we will show
    you how we can process this through the AWS Lambda console and using the Zappa
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Handling larger projects using the AWS Lambda console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS Lambda supports three different code entry types—Edit code inline, Upload
    a ZIP file, and Upload a file from Amazon S3, as mentioned in the following screenshot
    of the AWS Lambda function web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This entry type allows a user to put their code base in AWS Lambda. Let''s
    elaborate:'
  prefs: []
  type: TYPE_NORMAL
- en: Using this entry type, you can put code directly through AWS Lambda's web console,
    as mentioned in the preceding screenshot. With the help of its online editor,
    you can write and perform code execution. This can be considered for a small code
    base.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upload a ZIP file**: AWS Lambda supports uploading a `.zip` file of your
    code base. We discussed the build packaging of the code base in [Chapter 1](part0021.html#K0RQ0-8241a43bed654018b51365a570bcef1d),
    *Amazon Web Services for Serverless*. This feature has a limitation regarding
    the file size as it only supports files that are 50 MB in size for uploading,
    but it has another option for large-sized projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upload a file from Amazon S3**: This feature allows a user to upload the
    build package to Amazon S3 storage, irrespective of size. This means that you
    can refer to the uploaded build package on Amazon S3 with its S3 link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling larger projects using Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa does consider the build package size while processing for deployment.
    Zappa only supports two code entry types, which are Upload a .ZIP file directly
    on AWS Lambda and Upload a .ZIP file on Amazon S3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Set `"slim_handler"` to `true` in case the project size is more than 50 MB.
    Once you set this attribute, Zappa will automatically upload the build package
    to the Amazon S3 bucket and will configure the AWS Lambda handler function to
    consider the build package from Amazon S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling bash tab compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bash tab compilation is a feature in the command-line environment. This will
    display a list of autocomplete suggestions by pressing the *Tab* key. Zappa has
    many commands, and if you register the `Zappa` module with the Python `argcomplete`
    module, the `zappa` command will support the tab compilation feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to acquire this feature, you need to install the `argcomplete` ([https://github.com/kislyuk/argcomplete](https://github.com/kislyuk/argcomplete))
    module, either on your system or in the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'System-level installation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Virtual environment installation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you configure the module, then you need to activate Python''s `argcomplete` module
    at a global level. The following is the command to activate the global Python
    `argcomplete` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to register the `Zappa` module with `argcomplete`, you need to add
    the following line in your `~/.bashrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Source it again for immediate effect in the current context of Terminal by
    executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, once you register the `Zappa` module with `argcomplete`, Zappa commands
    will be available in the compilation. The following is a screenshot of Zappa command
    compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is how you can use `argcomplete` for Zappa commands. However, it would
    be helpful to be more productive in the deployment process. Let's move on to the
    next section, where we will discuss catching unhandled exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Catching unhandled exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa provides a feature to capture unhandled exceptions. This will allow you
    to process the unhandled exception to raise an alert notification via email, SNS,
    or other sources. It depends on your requirements, but you can choose any sources
    to raise a notification. This will be really helpful so that you can track anything
    that's broken down in any deployed environment.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we wanted to send bulk email notifications to all developers
    and QA engineers for any deployed environment, Zappa provides an easy way to configure
    the mechanism of catching the unhandled exception. With the help of the `exception_handler`
    attribute, you can bind an exception handler method from which you can process
    the exception to send bulk email notifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a code snippet of the Zappa settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, the exception handler is a method that's defined in a module. So, let's
    modify our existing project from  [Chapter 9](part0219.html#6GRB60-8241a43bed654018b51365a570bcef1d), *Asynchronous
    Task Execution on AWS Lambda,* to add the exception handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File—`notify.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are publishing the exception and event data to a subscribed email in
    the `"UnhandledException"` topic.
  prefs: []
  type: TYPE_NORMAL
- en: We can enhance the subscriptions to manage the list of email subscriptions of
    developers and QA engineers. This is how this feature is really helpful in tracing
    unhandled exceptions. We hope that this is beneficial for managing your deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about some additional features of Zappa. These features
    allow us to manage DevOps operations in a very efficient way. We also explored
    handling large-sized projects, implementing CORS, and managing unhandled exceptions.
    I hope you enjoyed this chapter and that you become hands-on with these features
    in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the use of keeping AWS Lambda in a warm state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is CORS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the deployment flow for large-sized projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
