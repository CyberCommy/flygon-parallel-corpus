- en: Chapter 12. Spring with Web Service Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see how Spring provides support to the `JAX_WS` web
    service and also see how to create a web service in **Spring Web Service** (**Spring-WS**)
    framework. We shall also see how the Spring Web Service can be consumed by demonstrating
    a client application, along with the annotations supported by Spring for Web services.
  prefs: []
  type: TYPE_NORMAL
- en: Spring with JAX-WS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's create a simple JAX-WS web service. We shall also see
    how we can integrate the JAX-WS Web Service with Spring. JAX-WS is the latest
    version of JAX-RPC, which used remote method invocation protocol to access Web
    services.
  prefs: []
  type: TYPE_NORMAL
- en: All we need to do here is to expose Spring's service layer as `JAX_WS` service
    provider layer. This can be done using the `@webservice` annotation and involves
    just a few steps. Let us jot down the steps involved in it.
  prefs: []
  type: TYPE_NORMAL
- en: Create a `PACKTJAXWS-Spring` simple Maven web project or a Dynamic web project
    in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to configure JAX-WS servlet in a `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a `Context.xml` application file and add the web service information
    to it. We will be providing the web service name and the service provider class
    information here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to make all the jars available in a classpath. Since it is a maven
    project, we only need to update the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We shall now create a web service class with the `@WebService` annotation. We
    have also defined the kind of binding we might need, such as `SOAPBinding` and
    `Style`. The `@Webmethod` annotation specifies the method which provides the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We should add the Maven JAR files to the build path of our eclipse project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the application: `http://localhost:8080/PACKTJAXWS-Spring/jaxws-spring`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be able to see the WSDL URL and on clicking on link, the WSDL file
    should open up.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Web Services with JAXB marshalling for request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's look at developing a simple web service using the Spring
    Web Service framework. We need JAXB for marshalling and unmarshalling the XML
    request. The Spring Web Service supports contract first web service. We need to
    design a XSD/WSDL first and then launch the web service.
  prefs: []
  type: TYPE_NORMAL
- en: We are creating an author web service which will give us a list of authors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring the web.xml file**: Let us first do a web service configuration
    in a `web.xml` file. We need to configure the Spring Web Service servlet. The
    Message Dispatcher servlet needs to be defined and the URL patterns it will handle.
    The `contextConfigLocation` is specified instead of allowing the default (`/WEB-INF/spring-ws-servlet.xml`)
    because this location makes the configuration easier to share with the unit test.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Configuring the Spring Context file** (`/src/main/resources/spring-ws-context.xml`):
    The `EndPoint` class needs to be configured in the `spring-ws-context.xml`. The
    class is annotated with `@EndPointAnnotation`. The `AuthorEndpoint` is defined
    as a bean and will automatically be registered with Spring Web Services, since
    the class is identified as an endpoint by the `@Endpoint` annotation. This configuration
    uses the `author.xsd`, which is a xml schema descriptor file that was used to
    generate the JAXB beans to generate the WSDL. The location URI matches the URL
    pattern specified in the `web.xml`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The JAXB marshaller/unmarshaller is configured using Spring OXM and also set
    on the `MarshallingMethodEndpointAdapter` bean.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Defining the XSD Author.xsd**: A very simple XSD defines an element to indicate
    an incoming request to get all authors (name element isn''t used) and an author
    response element that contains a list of author elements.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**author.xsd**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Marshalling the AuthorService**: Let us create an Interface `MarshallingAuthorService`
    for getting authors using the following JAXB generated beans:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the `get-authors-request` element: `GetAuthorsRequst`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the `author-response` element: `AuthorResponse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also has constants for the namespace (matches XSD) and a request constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating an Endpoint class**: Let us create an endpoint class marked with
    the `@Endpoint` annotation. This class will implement the method of `MarshallingAuthorService`.
    The `getAuthors` method is indicated to handle a specific namespace and an incoming
    request element. The endpoint just prepares a static response, but this could
    very easily have a DAO injected into it and have the information retrieved from
    a database, which is then mapped into the JAXB beans. The AuthorResponse is created
    using the JAXB Fluent API which is less verbose than the standard JAXB API.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Adding dependency information**: Also ensure that you add the following dependency
    in your maven `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Build and deploy the application**: We need to do this on the tomcat to see
    the WSDL URL. Thus, we have completed all the steps for providing a web service.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing a client application for Spring Web Services using JAXB unmarshalling
    for request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us write a simple client application for the author service. The `org.springbyexample.ws.service`
    package is scanned for beans and will find the `AuthorServiceClient`, and inject
    the web service template into it. The JAXB marshaller/umarshaller is defined and
    set on this template.
  prefs: []
  type: TYPE_NORMAL
- en: The import of the `jetty-context.xml` isn't relevant to creating a client, but
    it creates an embedded Jetty instance that loads the `spring-ws-context.xml` and
    its services. The client in the unit test is then able to run in isolation.
  prefs: []
  type: TYPE_NORMAL
- en: '**AuthorServiceClientTest.xml**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**AuthorServiceClient**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, Spring Web Services can handle almost everything. The template
    just needs to be called and it will return the `AuthorResponse` from the service
    endpoint. The client can be used like this: `AuthorResponse response = client.getAuthors(new
    GetAuthorsRequest());`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how we can integrate `JAX_WS` with Spring Web
    Service. We have also demonstrated how to create Spring Web Services and an endpoint
    class, as well as how to access the web service by accessing the WSDL URL.
  prefs: []
  type: TYPE_NORMAL
