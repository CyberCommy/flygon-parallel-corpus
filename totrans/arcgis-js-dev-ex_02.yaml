- en: Chapter 2. Layers and Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The two basic components that make up our web mapping application are layers
    and widgets. A map object is similar to a canvas that holds all the layers, and
    users can interact with it, such as panning and zooming into the map. Layers are
    primarily associated with a particular data source. Widgets are composed of JavaScript
    logic and an HTML template (if it requires user interaction). Widgets can interact
    with the map or can function independently. Esri has developed a lot of general-purpose
    widgets, and these are bundled with the API. We will discuss how to use these
    widgets throughout this book. We will also see how to develop custom widgets in
    the next chapter. This chapter sets the starting point in the development of a
    full-fledged web mapping application displaying historical earthquake data. We
    will be gaining a strong foothold in the following topics as we progress through
    the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Data sources supported by the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The concept of layers in the context of the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functional classification of layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different types of layers and their properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Featurelayers versus DynamicMapService versus graphics layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Esri's in-built widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data sources supported by the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcGIS JavaScript API is a powerful and flexible client-side mapping software
    that provides support for integrating a variety of spatial data sources, which
    is currently in production. It also provides support for visualizing flat file
    formats, such as CSV, with some latitude and longitude information.
  prefs: []
  type: TYPE_NORMAL
- en: In order to leverage full capabilities provided by the ArcGIS JavaScript API,
    it is important to know the list of data sources it supports and the properties
    and methods it exposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data sources supported by the ArcGIS JavaScript API as of version 3.14
    can be broadly grouped as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS Server services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OGC compliant GIS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flat file formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom web services (preferably REST services)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's review the different data source formats and understand how to get the
    necessary information about the data to consume in the ArcGIS JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Flat file formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The API provides native support to render flat file formats such as KML and
    CSV.
  prefs: []
  type: TYPE_NORMAL
- en: KML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Keyhole Markup Language** (**KML**) is a spatial file format that was initially
    developed by Google and is currently maintained by OGC. It provides support for
    point, line, and polygon geometry, and even image overlays. KML is an XML well
    known for this versatility, but it is pretty verbose and is used in Google Maps.
    KML files can be opened in any text edit such as Notepad++.'
  prefs: []
  type: TYPE_NORMAL
- en: CSV files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CSV file is a plain text file format that stores tabular data with field
    values separated by commas. CSV files contain information about latitude and longitude
    or coordinate values such as *X* and *Y* coordinates in separate fields. A CSV
    file can be read by the API, and the location information can be converted to
    point to the location on the API.
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ArcGIS Server can be used to share spatial data over the Web. In our case, if
    we have data as shape files, personal geodatabases, file geodatabases, or enterprise
    geodatabases, we can use ArcGIS Server to serve the data over the Web as REST
    services. ArcGIS JavaScript is capable of consuming these services and displaying
    them onto the map. In case of other spatial formats, such as DWG, we can either
    use the ArcGIS desktop or **Feature Manipulation Engine** (**FME**), which is
    a spatial ETL tool for converting into the Esri file format and publishing it
    via ArcGIS Server.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you had taken an introductory course in GIS, you''d be familiar with the
    classic image of GIS layers overlaid on each other. Layers, in the context of
    the API, are data resources available as REST endpoints or a JSON object. (That''s
    right, you can construct a web map layer using a JSON string.) We will deal with
    the sources and types of these map layers very soon, but before that, let''s list
    the most important considerations of any map layer:'
  prefs: []
  type: TYPE_NORMAL
- en: A layer is a container object for any data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data can be added to the map object using the layer object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layers form a stack architecture—the first layer added is at the bottom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The norm is to have the *Basemap layer* at the bottom
  prefs: []
  type: TYPE_NORMAL
- en: The map object has a special in-built layer to contain all map graphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is called the *graphics layer* and is at the top layer *always*
  prefs: []
  type: TYPE_NORMAL
- en: All other functional layers are added in between
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visibility of the layers can be turned on or off at any time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding layers to a map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before dealing with the different types of layers, we will discuss how to add
    any layer to the map object, because the process is going to be the same for any
    layer type, and also it''s very simple. In the following diagram, we can see all
    the types of layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding layers to a map](graphics/B04959_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two methods by which you can add any layer to the map object. Suppose
    `prjMap` is the name of the map object defined, and we need to add a layer; you
    can adopt one of these two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Method 1**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Method 2**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It's as simple as that! The second method is the preferred method, as there
    are certain widgets or functionalities that have to wait until all the layers
    in the map have been loaded. Using the second method will enable us to use an
    event handler that gets fired after all the layers are loaded. We will discuss
    about these event handlers toward the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The functional classification of layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Functionally, the different types of layer that could be added to a map can
    be classified as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Basemap or Tiledmap layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss each of these independently.
  prefs: []
  type: TYPE_NORMAL
- en: Basemap layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Basemap layers is are layers that can be used as a reference background map.
    Usually, satellite imagery, topographical maps (maps showing elevation), or street
    maps serve this purpose. Basemaps are usually cached image tiles. This means that
    the Basemap is a static resource. Since they are static and are served as image
    tiles, we can't interact with (as in query or select) the features seen on the
    Basemap. And since this is the Basemap, this is the bottom-most layers as well
    as being the layer, that's added first to the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the API provides different methods to add a `basemap` property to the
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `basemap` property to the map object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Use the in-built `basemap` gallery provided by the API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows us to toggle between multiple basemaps, such as satellite imagery,
    Streets maps, Topographic maps, National Geographic maps, OpenStreetMaps, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Create your own basemaps by adding Tiledmap layers to the map object (we'll
    discuss about Tiledmap layers very soon).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download the project folder called `B04959_02_CODE_01` and open `index.html`
    to get a feel for the Basemap gallery widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basemap layers](graphics/B04959_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Functional layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Functional layers display all the recent changes and are hence dynamic in nature
    as opposed to the relatively static nature of the Basemap or cached tile layers.
    Functional layers are layers you can interact with. The API provides options to
    perform different operations on most of these layers, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting feature/s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the attributes and geometry of features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing queries on the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering features (applying styling to the features using different symbols,
    colors, width, and other graphic properties)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing create, update, and delete (CRUD) operations on features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional layers will be *reprojected-on-the-fly*, based on the spatial reference
    of the Basemap. This means that functional layers could be of a different spatial
    reference system than the Basemap and they'd still align with the Basemap, as
    the API will request the reprojected data of the functional layers from the server.
    There are different types of functional layer, such as dynamic layers and feature
    layers, which will be dealt with very soon.
  prefs: []
  type: TYPE_NORMAL
- en: Graphics layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graphics layers have the greatest versatility in terms of operations. Here,
    you can add as much data as you need to the attributes object. You can assign
    or modify its geometry (using the **Draw** toolbar or even programmatically),
    add symbology, query it (with functional layers, the query or update operations
    might be disabled), delete it, use it for selecting features from functional layers,
    or just use it as a redlining tool. But the graphics layer also has the shortest
    lifespan because it doesn't persist after a session—these are just stored on the
    client side. And due to these properties, it makes sense to have the graphics
    layer as the top-most layer, doesn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A developer needs to be cautious about the spatial reference of the input data
    source when dealing with graphic layers. `esri/geometry/webMercatorUtils` is a
    handy module that lets us convert Web Mercator coordinates to geographic and vice
    versa.
  prefs: []
  type: TYPE_NORMAL
- en: Types of layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We got a glimpse of the functional classification of layers. The API provides
    a host of modules to load layers from different data sources that generally fall
    into one of the functional classifications that we looked into. We are going to
    review some of the most important types of layers provided by the API and the
    methods and properties it exposes.
  prefs: []
  type: TYPE_NORMAL
- en: The ArcGIS Tiledmap service layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the cached Tiledmap layer served by the ArcGIS Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Module Name | `esri/layers/ArcGISTiledMapServiceLayer` |'
  prefs: []
  type: TYPE_TB
- en: '| Data Source Type | `ArcGIS REST Service` |'
  prefs: []
  type: TYPE_TB
- en: '| Layer Type | `BaseMap /Tiled Cache Layer` |'
  prefs: []
  type: TYPE_TB
- en: '| Response Type | `Cached image tiles` |'
  prefs: []
  type: TYPE_TB
- en: '| Constructor | `new ArcGISTiledMapServiceLayer(url, options?)` |'
  prefs: []
  type: TYPE_TB
- en: '| Preferred Alias Name | `ArcGISTiledMapServiceLayer` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Preferred alias names**'
  prefs: []
  type: TYPE_NORMAL
- en: Preferred alias names provided by the API as part of the code convention and
    be accessed at [https://developers.arcgis.com/javascript/jsapi/argument_aliases.html](https://developers.arcgis.com/javascript/jsapi/argument_aliases.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Why do we need to use a different Basemap when we already have a lot of options
    provided by Esri? Well, we found an aesthetic and visually informative tile map
    service from NOAA displaying a color shaded relief of the world''s topography
    and bathymetry (ocean floor elevation differences):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ArcGIS Tiledmap service layer](graphics/B04959_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may consider using this as the Basemap for displaying any world-wide phenomena
    such as hazards or earthquakes. How do we do that? If you look at the constructor
    for this module, it looks for a required `URL` parameter and an optional `options`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The URL of the NOAA service we were talking about is [http://maps.ngdc.noaa.gov/arcgis/rest/services/etopo1/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/etopo1/MapServer).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to consume this as `ArcGISTiledMapLayer` (Code Reference: `B04959_02_CODE1.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That's all the code you need to write to see that beautiful map on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service catalog of the Tiledmap service provides us with a lot of useful
    information that a developer should consider before using the Tiledmap service
    in the application. Let''s consult the service catalog of the previously mentioned
    `ArcGISTiledMapServiceLayer`. In the screenshot of the service catalog provided
    in the next section, the developer can comprehend a lot of information about the
    data source:'
  prefs: []
  type: TYPE_NORMAL
- en: Spatial Reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TileInfo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial Extent and FullExtent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Min Scale and Max Scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layers contributing to the tiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spatial Reference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Spatial Reference** of the Tiledmap service or Basemap is one of the important
    properties overlooked by developers in the initial stages of coding. The **Spatial
    Reference** of the Tiledmap service is set as the spatial reference of the entire
    map. Operational layers, such as the dynamic map service and feature layers, added
    to the map that conforms to this is **Spatial Reference**, whatever their individual
    spatial reference is.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spatial Reference](graphics/B04959_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: TileInfo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**TileInfo** provides information about the tiling scheme followed by `TiledMapService`.
    The **Level of Detail** can be used to set the zoom extent of the map.'
  prefs: []
  type: TYPE_NORMAL
- en: Extent and Scale Info
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Extent and scale info provides us information about the extent within which
    the tiles are visible.
  prefs: []
  type: TYPE_NORMAL
- en: Download the complete code from project folder `B04959_02_CODE_02` and see your
    beautiful Tiledmap in action.
  prefs: []
  type: TYPE_NORMAL
- en: The ArcGIS DynamicMapService layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This module, as the name suggests, is a dynamically hosted resource from the
    ArcGIS Server REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Names | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Module Name | `esri/layers/ArcGISDynamicMapServiceLayer` |'
  prefs: []
  type: TYPE_TB
- en: '| Data Source Type | `ArcGIS REST Service` |'
  prefs: []
  type: TYPE_TB
- en: '| Layer Type | `Functional Layer` |'
  prefs: []
  type: TYPE_TB
- en: '| Response Type | `Dynamically generated images` |'
  prefs: []
  type: TYPE_TB
- en: '| Constructor | `new ArcGISDynamicMapServiceLayer(url, options?)` |'
  prefs: []
  type: TYPE_TB
- en: The dynamic map layer actually represents all the data exposed by the non-cached
    map service. For the same reason, dynamic map layers are a kind of composite layer
    because a map service generally has more than one layer.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see what this means in a moment. We'll refer to the service catalog (yeah,
    it's a fancy term for the interface that appears when we navigate to the map service
    URL).
  prefs: []
  type: TYPE_NORMAL
- en: Open this URL of a map service in the browser—[http://maps.ngdc.noaa.gov/arcgis/rest/services/SampleWorldCities/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/SampleWorldCities/MapServer).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be able to see all the data layers exposed by the map service. So,
    when you consume this map service, all the data will be displayed on the map as
    part of a single DynamicMapService layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ArcGIS DynamicMapService layer](graphics/B04959_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you cannot see the service catalog for any service shown previously, it doesn't
    mean that the service is offline; it might be that service browsing is turned
    off on the production machine.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to try the URL by appending a query parameter named `f` with a value
    as `json`, for example, `{{url}}?f=json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier, we discussed how to add `ArcGISTiledMapServiceLayer` to the map. The
    following code adds the `ArcGISDynamicMapService` layer upon the existing tiled
    layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you would have observed, both `ArcGISDynamicMapServiceLayer` and `ArcGISTiledMapServiceLayer`
    consume a map service. So, how do we actually know which map service should be
    used as a Tiledmap service or which can be used as a DynamicMapService? You might
    have guessed it right. The service catalog is the answer. There is a particular
    heading in the service catalog that you have to look for in the map services that
    distinguishes a cached tile map service from the non-cached map service. This
    is called **TileInfo**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The attribute that differentiates cached tile map services from non-cached map
    services is called Tile Info.
  prefs: []
  type: TYPE_NORMAL
- en: TileInfo has information on the level of detail information. The levels of details
    determine the discrete scale levels at which the map will be displayed. These
    levels of details are also known as the zoom levels, and the markers in the zoom
    control of the map correspond with these zoom levels.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there is a similarity with how Tiledmap service and DynamicMapService responses
    are served. Both are served as images. While Tiledmap services serve multiple
    image tiles for each extent, a DynamicMapService serves just one image for a given
    extent.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you notice your **Networks** tab, there will be a `GET` request method named
    `export` appended to the DynamicMapService that we declared. This is the `GET`
    request that fetched the dynamic map image from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ArcGIS DynamicMapService layer](graphics/B04959_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Observe the name-value pairs in the query string of the preceding `GET` request.
    You''ll notice the following fieldnames:'
  prefs: []
  type: TYPE_NORMAL
- en: The `dpi` fieldname defines the resolution of the image in dots per inch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `transparent` fieldname defines that the response image is transparent,
    and so, the background Basemap can be viewed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `format` fieldname has a value of `png`, which is the format of the response
    image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value for the `bbox` fieldname requests the extent (consisting of four coordinates—`Xmin`,
    `Ymin`, `Xmax`, and `Ymax`) for which the image is requested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value for the `bboxSR` fieldname defines the spatial reference in which
    the `bbox` coordinates were defined, and `imageSR` defines the spatial reference
    in which the response image is requested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value last fieldname called `f` defines the format of the response; it's
    an `image` of course
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Exercise**'
  prefs: []
  type: TYPE_NORMAL
- en: Change the value for the `f` field name from `image` to `html` in the preceding
    `GET` request and see what you get.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you check out the API page, you will see that this module provides a lot
    of properties and methods. The following table shows some of the most important
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `exportMapImage(imageParameters?, callback_function?)` | This exports a map
    using values as specified by the `imageParameters` object. The callback function
    event returns the map image. |'
  prefs: []
  type: TYPE_TB
- en: '| `refresh()` | This refreshes the map by making a new request to the server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `setDPI(dotsPerInch)` | This enables setting the image resolution in dots
    per inch for the exported map. |'
  prefs: []
  type: TYPE_TB
- en: '| `setLayerDefinitions(stringArray of Layerdefintions)` | This enables us to
    filter the data displayed by the DynamicMapService. |'
  prefs: []
  type: TYPE_TB
- en: '| `setVisibleLayers(Array_of_LayerIds)` | This makes visible only the layers
    whose IDs are passed in as the parameter. |'
  prefs: []
  type: TYPE_TB
- en: 'Now, make sure you have the following requirements to display the DynamicMapService:'
  prefs: []
  type: TYPE_NORMAL
- en: Only display the `Cities` layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide a transparency of 0.5 for the dynamic map image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display only cities with a population greater than 1 million
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following snippet guides you in how to accomplish this (Code Reference:
    `B04959_02_CODE2.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the `showAttribution` property in the options object of any map object
    is set to `true`, all the attributions for the data source are shown in the bottom-right
    corner of the map.
  prefs: []
  type: TYPE_NORMAL
- en: The `setLayerDefinitions()` method accepts a string array of `where` clauses.
    While passing the layer definitions for a DynamicMapService, keep the following
    things in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'The index of the definition expression (`where` clause) should match the index
    of the layer on which the expression is applied. For example, if the `Cities`
    layer had an index of `5` in the preceding map service, the layer definition would
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these conditions are met, the resulting map will look like this. The semi-transparent
    blue dots are the world cities with a population greater than one million:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ArcGIS DynamicMapService layer](graphics/B04959_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Feature layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A feature layer is an individual layer of a map service that has a geometry
    type. An individual layer in a map service could be a feature layer or even a
    raster layer; for example, [http://sampleserver4.arcgisonline.com/ArcGIS/rest/services/Elevation/ESRI_Elevation_World/MapServer/1](http://sampleserver4.arcgisonline.com/ArcGIS/rest/services/Elevation/ESRI_Elevation_World/MapServer/1)
    and [http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer/0](http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer/0)
    are both individual layers of a map service, but the former URL is a raster layer
    resource and the latter is a feature layer resource. The raster layer doesn't
    have a geometry type attribute in Service Catalog, whereas the feature layer has
    one of the geometry types point, multipoint, polyline, or polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'A feature layer is a very versatile entity because it supports advanced querying,
    selecting, rendering, and sometimes even editing facilities. A feature layer (or
    a raster layer) is identified using the index in the map service it belongs to:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Names | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Module Name | `esri/layers/FeatureLayer` |'
  prefs: []
  type: TYPE_TB
- en: '| Data Source Type | `ArcGIS REST Service` |'
  prefs: []
  type: TYPE_TB
- en: '| Layer Type | `Functional Layer` |'
  prefs: []
  type: TYPE_TB
- en: '| Response Type | `Feature Collection (Feature has geometry, attribute and
    symbology)` |'
  prefs: []
  type: TYPE_TB
- en: '| Constructor | `new FeatureLayer(url, options?)` |'
  prefs: []
  type: TYPE_TB
- en: 'Adding the feature layer/s to the map is the same as adding a DynamicMapService
    layer or a Tiledmap service layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The FeatureLayer constructor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `FeatureLayer` constructor has two arguments—the `FeatureLayer` URL and
    an optional `options` object. The `options` object provides a bunch of options
    to configure the `FeatureLayer` constructor. One of the most important `options`
    property is named `mode`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mode` property defines how the feature layer is rendered on the map. Since
    feature layers stream the actual geometry of the feature, unlike the map service
    (which provides a dynamically generated image) or a Tiledmap service (which just
    serves pre-rendered cached tiles), the rendering of feature layers on a map has
    some performance considerations. There are four types of mode by which a feature
    layer can be rendered. The four modes are numeric values provided as constants
    by the API. If the callback function alias of the feature layer module is a feature
    layer, the four modes can be accessed using the following decorations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FeatureLayer.MODE_SNAPSHOT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This fetches all the features from the server once and resides on the client—a
    one-time overhead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is updated when the additional filters are applied
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FeatureLayer.MODE_ONDEMAND`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features are fetched as needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous little chunks of overhead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default `MODE`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FeatureLayer.MODE_SELECTION`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only features selected using `selectFeatures()` method is displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FeatureLayer.MODE_AUTO`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This switches between `MODE_SNAPSHOT` or `MODE_ONDEMAND` (this choice is made
    by the API)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best of both worlds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will try to add a `FeatureLayer` constructor for historical earthquakes to
    the map. The map service providing these feature layers can be found at [http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer).
  prefs: []
  type: TYPE_NORMAL
- en: 'The earthquakes layer is the fifth layer in the map service. But you can try
    other feature layers too. Here''s a code snippet that lets you add a feature layer
    to the map object (Code Reference: `B04959_02_CODE3.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `id` property assigns an ID to the feature layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `opacity` property lets us define an opacity for the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `definitionExpression` property is a `where` clause that lets us filter
    the features shown on the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `outFields` property lets us define the fields provided by the feature layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of the `FeatureLayer` superimposed over the DynamicMapService
    layer and the Tiledmap service layer. The semi-transparent colored circles represent
    the locations where any earthquake ever happened, which had a magnitude of more
    than 6 Richter scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The FeatureLayer constructor](graphics/B04959_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you pan the map or zoom around the map, the features are fetched and a
    corresponding `GET` request is fired, which fetches the features *on demand*.
    If you open the **Networks** tab in the developer console just after loading a
    feature layer, you will be able to understand a lot of things:'
  prefs: []
  type: TYPE_NORMAL
- en: The API uses the `query` method of the feature layer to fetch the features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the query string, there will be query parameters, such as `geometry`, `spatialRel`,
    `geometryType`, and `inSR` which define the extent for which features need to
    be fetched. Other `FeatureLayer` constructor options, such as `outFields` and
    the `where` clause (corresponding to `definitionExpression`), can also be found
    in the query string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you click on the **Preview** or **Response** tab, you will notice that the
    `GET` request fetches an array of features. Each feature has an attributes object
    and a geometry object. The attributes object will contain the field names mentioned
    in the `outFields` array and the corresponding field value of the particular feature:![The
    FeatureLayer constructor](graphics/B04959_02_09.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll deal with how to query and select the features in a feature layer in
    the next chapter. As of now, we are better off knowing what the following method
    does to the feature layer object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `clear()` | Clears all graphics |'
  prefs: []
  type: TYPE_TB
- en: '| `clearSelection()` | Clears the current selection |'
  prefs: []
  type: TYPE_TB
- en: '| `getSelectedFeatures()` | Gets the currently selected features |'
  prefs: []
  type: TYPE_TB
- en: '| `hide()` | Sets the visibility of the layer to `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `isEditable()` | Returns true if the `FeatureLayer` is editable |'
  prefs: []
  type: TYPE_TB
- en: '| `setInfoTemplate(infoTemplate)` | Specify or change the `info` template for
    a layer |'
  prefs: []
  type: TYPE_TB
- en: '| `setOpacity(opacity)` | Initial opacity of the layer (where `1` is opaque,
    `0` is transparent) |'
  prefs: []
  type: TYPE_TB
- en: '| `show()` | Sets the visibility of the layer to `true` |'
  prefs: []
  type: TYPE_TB
- en: Infotemplates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Infotemplates provide a simple way to deliver an HTML popup displaying the information
    about a feature when we on click it. We will discuss Infotemplates in detail in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Infotemplates](graphics/B04959_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Graphics layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We've already discussed about graphics layer a bit. We know that the map object,
    by default, contains a graphics layer, and it can be referenced using the `graphics`
    property of the map object. We can also create our own graphics layers and add
    them to the map. However, the default graphics layer provided by the map remains
    at the top.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand more about the graphics layer and the `Graphic` object that
    is added to the graphics layer. The graphics layer is a container for the `Graphic`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `Graphic` object has the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: Geometry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infotemplate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geometry
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Geometry will have a type (point, multipoint, polyline, polygon, and extent),
    a spatial reference, and the coordinates making up the geometry.
  prefs: []
  type: TYPE_NORMAL
- en: Symbol
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A symbol is a much more complex object because it is associated with the geometry
    it symbolizes. Also, the styling of the symbol is defined by the colors or picture
    used to fill up the symbol and the size of the symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review a snippet to understand this better. This is a simple snippet
    to construct a symbol for a polygon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Symbol](graphics/B04959_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Attributes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The attributes of a graphic is a key-value pair object that stores information
    about the graphic.
  prefs: []
  type: TYPE_NORMAL
- en: InfoTemplate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`InfoTemplate` is the HTML template that can be used to display relevant information
    about a graphic when we click on it.'
  prefs: []
  type: TYPE_NORMAL
- en: Map and layer properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many common properties between the layers that give us relevant information
    about the layer. For example, properties such as `fullExtent`, `id`, `infoTemplates`,
    `initialExtent`, `layerInfos`, `maxRecordCount`, `maxScale`, `minScale`, `opacity`,
    `spatialReference`, `units`, `url`, and `visibleLayers` are the same for dynamic
    map layer as well Tiledmap layer, whereas properties such as `dynamicLayerInfos`
    and `layerDefinitions` are specific to the DynamicMapService layer. So, is the
    `tileInfo` property specific to Tiledmap layer?
  prefs: []
  type: TYPE_NORMAL
- en: Try to explore these properties by logging the properties to the console. For
    example, if you need to print a list of fields in a feature layer, use the `fields`
    property of the feature layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a code snippet that logs certain information regarding the feature
    layer and the DynamicMapService layer to the console (code reference: `B04959_02_CODE5.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the screen output you will get in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`Featurelayer.fields` returns an array of field objects. Each object contains
    properties such as `alias`, `length`, `name`, `nullable`, and `type`. `DynamicLayer.layerInfos`
    returns an array of the `layerInfo` object. The `layerInfo` object provides information
    about the layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Map and layer properties](graphics/B04959_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Map and layer events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changing the extent of the map, adding a layer to a map, adding a group of
    layers to the map, or even clicking on the map or a mouse—the API has an event
    handler for all of it. While using the event, let''s stick to dojo''s on module
    to handle events. Find the prototype of handling events using dojo''s `"dojo/on"`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Map and layer events](graphics/B04959_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '| Target | Event | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Map | `extent-change` | Fires when the extent of the map has changed |'
  prefs: []
  type: TYPE_TB
- en: '| Map | `layers-add-result` | Fires whenever you use the `map.addLayers()`
    method, after all the layers being added to the map are loaded |'
  prefs: []
  type: TYPE_TB
- en: '| Map | `load` | This one is obvious |'
  prefs: []
  type: TYPE_TB
- en: '| Map | `basemap-change` |   |'
  prefs: []
  type: TYPE_TB
- en: '| Feature layer | `selection-complete` | After selecting features from a feature
    layer |'
  prefs: []
  type: TYPE_TB
- en: 'In the preceding code snippet, which logged out certain layer properties, you
    might have noticed that the entire code snippet was encompassed in an `on` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We needed to print out all the layer-related properties inside the `on` event
    since we need to wait until all the layers are loaded, or we will get an undefined
    for most of the properties. This particular event named `layers-add-result` is
    fired only after all the layer arrays added to the map is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Using Esri widgets – the genie's lamp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Widgets are the cornerstone of dojo. Widgets are UI components that can be built,
    configured, and extended in dojo to do a specific task. So, when someone provides
    us with a widget that accomplishes a task we need to do, all we have to do to
    instantiate it is configure it a bit and provide it with the container node reference
    where the widget should reside.
  prefs: []
  type: TYPE_NORMAL
- en: So, the good news is Esri provides us with in-built widgets that accomplish
    a lot of things, such as querying features, geocoding addresses (converting a
    text address into a location on a map), adding a widget to display the map legend,
    adding widgets to search for attributes, and even adding a widget to toggle between
    multiple basemaps. All the Esri built widgets can be located under `esri/dijits`
    in the table of contents section of the API reference page.
  prefs: []
  type: TYPE_NORMAL
- en: The BaseMapGallery widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Well, you''re not surprised that this widget does exist, right? We gave you
    a heads-up at the beginning of this chapter when we were dealing with `TiledMapLayers`.
    The Basemap layer widget provides us a with widget with which we can toggle a
    Basemap from a gallery of basemaps. See the following prototype code for integrating
    basemaps into our application (code reference: `B04959_02_CODE6`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The Legend widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A map legend lists the layers in the map and the symbology used by all the
    layers. Constructing a legend by ourselves involves getting the `layerinfos` and
    `drawinginfos` and listing them in a `div`—the process sounds like a pain in the
    neck. Luckily for us, Esri provides us `dijit` (probably a portmanteau for dojo
    and widget) for constructing legends:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Legend widget](graphics/B04959_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We use the following code to initiate the **Legend** widget (Code Reference:
    `B04959_02_CODE6`)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of ground in this chapter. We tried to identify the process
    by which data is added to the map. We identified the data source, such as ArcGIS
    Server service, OGC data, CSV, KML, and so on. Then, we covered the API provided
    modules that support the display of, and further operations on, three major ArcGIS
    REST service data sources, namely the ArcGIS Tiledmap service layer, the ArcGIS
    DynamicMapService layer, and the feature layer. You also learned how to instantiate
    the layers and how to navigate their properties and events. We also dealt with
    a special kind of layer namely graphics layer, which is the top-most layer in
    the map and is used as a container object for all the graphics in the map. We
    got a taste of the plethora of in-built widgets provided by Esri. In the next
    chapter, we will have an in-depth look into writing spatial queries and retrieving
    the results. You will also learn how to use geometry services and the geometry
    engine to process geometric operations.
  prefs: []
  type: TYPE_NORMAL
