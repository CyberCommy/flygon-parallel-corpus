- en: 8\. Introduction to Apache OpenWhisk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Run OpenWhisk with IBM Cloud Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create, list, invoke, update, and delete OpenWhisk actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize and invoke OpenWhisk web actions and sequences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate OpenWhisk action invocation with feeds, triggers, and rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter covers Apache OpenWhisk and how to work with its actions, triggers,
    and packages.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OpenWhisk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now in this book, we have learned about the **Kubeless** framework, which
    is an open source Kubernetes-native serverless framework. We discussed the **Kubeless**
    architecture, and created and worked with the **Kubeless** functions and triggers.
    In this chapter, we shall be learning about **OpenWhisk**, which is another open
    source serverless framework that can be deployed on top of Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenWhisk** is an open source serverless framework that is part of the Apache
    Software Foundation. This was originally developed at IBM with the project code
    name of Whisk, and later branded as **OpenWhisk** once the source code was open
    sourced. **Apache OpenWhisk** supports many programming languages, including Ballerina,
    Go, Java, JavaScript, PHP, Python, Ruby, Swift, and .NET Core. It allows us to
    invoke functions written in these programming languages in response to events.
    OpenWhisk supports many deployment options, such as on-premises and cloud infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four core components of OpenWhisk:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Actions**: These contain application logic written in one of the supported
    languages that will be executed in response to events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sequences**: These link multiple actions together to create more complex
    processing pipelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggers and rules**: These automate the invocation of actions by binding
    them to external event sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages**: These combine related actions together for distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates how these components interact with each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: OpenWhisk core components'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.1: OpenWhisk core components'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the next section, we will learn how to run Apache OpenWhisk with IBM Cloud
    Functions.
  prefs: []
  type: TYPE_NORMAL
- en: Running OpenWhisk with IBM Cloud Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenWhisk is a framework that can be deployed on-premises or in a cloud infrastructure.
    However, OpenWhisk is also available as a managed service from IBM, the creator
    of the OpenWhisk project. **IBM Cloud Functions** is the name for the managed
    OpenWhisk implementation on the IBM Cloud infrastructure. This book will use this
    service to deploy our serverless functions because IBM Cloud Functions is the
    easiest way to start working with OpenWhisk. We will first begin by setting up
    an IBM Cloud account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 24: Setting Up an IBM Cloud Account'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we are going to set up an account on IBM Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A credit card is not required to register with IBM Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to register on IBM Cloud at [https://cloud.ibm.com/registration](https://cloud.ibm.com/registration).
    Then, fill in the required data and submit the form. It should look similar to
    the following screenshot:![](image/C12607_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.2: IBM Cloud registration page'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once the registration is complete, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: IBM Cloud registration completion page'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: At this point, we will receive an email with an activation link. Click on the
    **Confirm account** button to activate your account, as shown in the following
    figure:![](image/C12607_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.4: IBM Cloud Activation Email'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When you click on the **Confirm account** button in the email, we will be taken
    to the IBM Cloud welcome screen. Click on the **Log in** button to log in with
    the credentials used to register with **IBM Cloud**, as shown in the following
    figure:![](image/C12607_08_05..jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.5: IBM Cloud welcome page'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Acknowledge the privacy data by clicking on the **Proceed** button, as shown
    in the following figure:![Figure 8.6: IBM Cloud privacy policy'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_06..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.6: IBM Cloud privacy policy'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can skip the introduction video and proceed to the home page. Now you can
    click the **hamburger** icon (![](image/C12607_08_icon.png)) in the top-left corner
    of the screen and select **Functions** from the menu, as shown in the following
    figure:![](image/C12607_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.7: IBM Cloud home page'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This will take you to the **IBM Cloud** functions page (https://cloud.ibm.com/functions/),
    as shown in the following figure:![Figure 8.8: IBM Cloud Functions page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.8: IBM Cloud Functions page'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: OpenWhisk offers a CLI named `wsk` to create and manage OpenWhisk entities.
    Next, we will install the **OpenWhisk CLI**, which will be used to interact with
    the OpenWhisk platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 25: Installing the IBM Cloud CLI'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to install the IBM Cloud CLI with the Cloud
    Functions plugin, which supports OpenWhisk:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to download the compressed IBM Cloud CLI file. Use the `curl`
    command with the `-Lo` flag to download the CLI, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9: Downloading the IBM Cloud CLI'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.9: Downloading the IBM Cloud CLI'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next, we will extract the `tar.gz` file using the `tar` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10: Extracting the IBM Cloud CLI'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.10: Extracting the IBM Cloud CLI'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Then move the `ibmcloud` executable file to the `/usr/local/bin/` path, as
    shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11: Moving ibmcloud to /usr/local/bin'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.11: Moving ibmcloud to /usr/local/bin'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we will log in to IBM Cloud using the IBM Cloud CLI. Execute the following
    command, replacing `<YOUR_EMAIL>` with the email address used when registering
    to IBM Cloud. Provide the email and password used during the registration phase
    when prompted and set the region number as **5** (**us-south**), as you can see
    in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12: Logging in to IBM Cloud'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.12: Logging in to IBM Cloud'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we will install the Cloud Functions plugin using the `ibmcloud` CLI, as
    shown in the following command. This plugin will be used when we work with OpenWhisk
    entities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13: Installing Cloud Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.13: Installing Cloud Functions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next, we will provide the target organization (the organization name is your
    email address) and the space (which defaults to `dev`) using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14: Setting the target organization and space'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.14: Setting the target organization and space'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now the configurations are done. We can use `ibmcloud wsk` to interact with
    OpenWhisk entities, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15: Listing OpenWhisk actions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.15: Listing OpenWhisk actions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this book, we will be using the `wsk` command to manage OpenWhisk entities
    instead of the `ibmcloud wsk` command provided by IBM Cloud Functions. Both of
    them provide the same functionality. The only difference is that `wsk` is the
    standard CLI for OpenWhisk and `ibmcloud fn` is from the IBM Cloud Functions plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a Linux alias, `wsk="ibmcloud wsk"`. First, open the `~/.bashrc`
    file with your favorite text editor. In the following command, we will be using
    the `vim` text editor to open the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line at the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Source the `~/.bashrc` file to apply the changes, as shown in the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16: Sourcing the bashrc file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.16: Sourcing the bashrc file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we should be able to invoke OpenWhisk with the `wsk` command. Execute the
    following command to verify the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print the help page of the `wsk` command, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17: Output for wsk command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.17: Output for wsk command'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now, let's proceed to the next section on OpenWhisk actions.
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In OpenWhisk, actions are code snippets written by developers that will be
    executed in response to events. These actions can be written in any programming
    language supported by OpenWhisk:'
  prefs: []
  type: TYPE_NORMAL
- en: Ballerina
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, we can use a custom Docker image if our preferred language runtime is
    not supported by OpenWhisk yet. These actions will receive a JSON object as input,
    then perform the necessary processing within the action, and finally return a
    JSON object with the processed results. In the following sections, we will focus
    on how to write, create, list, invoke, update, and delete OpenWhisk actions using
    the `wsk` CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Actions for OpenWhisk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When writing OpenWhisk actions with your preferred language, there are few
    standards that you must follow. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Each action should have a function named `main`, which is the entry point of
    the action. The source code can have additional functions, but the `main` function
    will be executed once the action is triggered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function must return a JSON object as the response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this chapter, we will be mainly using JavaScript to create the function code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example in which we create a JavaScript code (`random-number.js`)
    that conforms to the rules we''ve just mentioned. This is a simple function that
    generates a random number between 0 to 1 and returns the generated number as the
    function''s response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a PHP function that conforms to the rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating Actions on the OpenWhisk Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now it''s time to create an action on the OpenWhisk framework by using the
    action code written in the previous section. We will be using the `wsk action
    create` command, which has the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`<action-name>` is the identifier of the action. It should be unique to prevent
    naming conflicts. `<action-file-name>` is the file that contains the source code
    of the action. Let''s execute the following command to create an OpenWhisk action
    named `randomNumber` using the action source code in the `random-number.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output we receive from this command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18: Creating a randomNumber action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.18: Creating a randomNumber action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see in the output, whenever an action is successfully created, the
    CLI prompt appropriately informs the reader of the status of the action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenWhisk framework will determine the runtime to execute the action based
    on the extension of the source code file. In the preceding scenario, the Node.js
    `10` runtime will be selected for the provided `.js` file. You can use the `--kind`
    flag with the `wsk action create` command if you want to override the default
    runtime selected by the OpenWhisk framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19: Creating a randomNumber action with the nodejs:8 runtime'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.19: Creating a randomNumber action with the nodejs:8 runtime'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The preceding output indicates that `secondRandomNumber` was created successfully.
    At the end of this section, we have deployed two OpenWhisk actions.
  prefs: []
  type: TYPE_NORMAL
- en: Having learned how to create actions on the OpenWhisk framework, next we shall
    work on listing OpenWhisk actions.
  prefs: []
  type: TYPE_NORMAL
- en: Listing OpenWhisk Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we are going to list the OpenWhisk actions in our environment
    with the `wsk` CLI using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20: Listing all actions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.20: Listing all actions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'From the preceding output, we can see the two actions we created earlier with
    the names `randomNumber` and `secondRandomNumber`. The `wsk action list` command
    lists the actions and the runtime of these actions, such as `nodejs:8` or `nodejs:10`.
    By default, the action list will be sorted based on the last update time, so the
    most recently updated action will be at the top of the list. If we want the list
    to be sorted alphabetically, we can use the `--name-sort` (or `-n`) flag, as shown
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.21: Listing all actions sorted by name in ascending order'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.21: Listing all actions sorted by name in ascending order'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Invoking OpenWhisk Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now our actions are ready to be invoked. OpenWhisk actions can be invoked in
    two ways using the `wsk` CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: Request-response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fire-and-forget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **request-response** method is synchronous; the action invocation will wait
    until the results are available. On the other hand, the **fire-and-forget** method
    is asynchronous. This will return an ID called the activation ID, which can be
    used later to get the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the standard format of the `wsk` command to invoke the action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Request-Response Invocation Method**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **request-response** method, the `wsk action invoke` command is used
    with the `--blocking` (or `-b`) flag, which asks the `wsk` CLI to wait for the
    invocation results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will return the following output in the terminal, which
    contains the result returned from the method with other metadata about the method
    invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the output (`"number": 0.6488215545330562`) returned by the main
    function within the `response` section of the returned JSON object. This is the
    random number generated by the JavaScript function that we wrote previously. The
    returned JSON object contains an activation ID (`"activationId": "002738b1acee4abba738b1aceedabb60")`,
    which we can use to get the results later. This output includes other important
    values, such as the action invocation status (`"status": "success"`), the start
    time (`"start": 156482976619`), the end time (`"end": 1564829766237`), and the
    execution duration (`"duration": 46`) of this action.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We will discuss how to get the activation results using `activationId` in the
    **Fire-and-Forget Invocation Method** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `--result` (or `-r`) flag if we need to get the result of the
    action without the other metadata, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.22: Invoking the randomNumber action using the request-and-response
    method'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.22: Invoking the randomNumber action using the request-and-response
    method'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Fire-and-Forget Invocation Method**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Action invocations with the **fire-and-forget** method do not wait for the
    result of the action. Instead, they return an activation ID that we can use to
    get the results of the action. This invocation method uses a similar command to
    the request-response method but without the `--blocking` (or `-b`) flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.23: Invoking the randomNumber action using the fire-and-forget method'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.23: Invoking the randomNumber action using the fire-and-forget method'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the preceding result, we can see the returned activation ID of `2b90ade473e443bc90ade473e4b3bcff`
    (please note that your activation ID will be different).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use the `wsk activation get` command to get the results for a given
    activation ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to replace `<activation_id>` with the value returned when you invoked
    the function using the `wsk action invoke` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would prefer to retrieve only a summary of the activation, the `--summary`
    (or `-s`) flag should be provided with the `wsk activation get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from the preceding command will print a summary of the activation
    details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.24: The activation summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.24: The activation summary'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `wsk activation result` command returns only the results of the action,
    omitting any metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.25: The activation result'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.25: The activation result'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `wsk activation list` command can be used to list all the activations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.26: Listing activations'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.26: Listing activations'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The preceding command returns a list of activations sorted by the **datetime**
    of the activation''s invocation. The following table describes the information
    provided by each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.27: Column description'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.27: Column description'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Updating OpenWhisk Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to update the source code of an action once
    it has been created on the OpenWhisk platform. We might want to update the action
    for several reasons. There could be a bug in the code, or we may simply want to
    enhance the code. The `wsk action update` command can be used to update an OpenWhisk
    action using the `wsk` CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We already have an action that prints a random number, which is defined in
    the `random-number.js` function. This function prints a value between 0 and 1,
    but what if we want to print a random number between 1 and 100? This can now be
    done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can execute the `wsk action update` command to update the `randomNumber`
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_08_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.28: Updating the randomNumber action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we can verify the result of the updated action by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.29: Invoking the randomNumber action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.29: Invoking the randomNumber action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see, the `randomNumber` action has returned a number between 1 to
    100\. We can invoke the `randomNumber` function number multiple times to verify
    that it returns an output number between 1 and 100.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting OpenWhisk Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will discuss how to delete an OpenWhisk action. The `wsk
    action delete` command is used to delete OpenWhisk actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s execute the `wsk action delete` command to delete the `randomNumber`
    and `secondRandomNumber` actions we created in the preceding sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_08_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.30: Deleting the randomNumber and secondRandomNumber actions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now we have learned how to write, create, list, invoke, update, and delete OpenWhisk
    actions. Let's move on to an exercise in which you will create your first OpenWhisk
    action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 26: Creating Your First OpenWhisk Action'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will first create a JavaScript function that receives
    exam marks as input and returns the exam results using the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Return `Pass` if marks are equal to or above 60.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return `Fail` if marks are below 60.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we will create an action named `examResults` in the OpenWhisk framework
    with the previously mentioned JavaScript function code. Then, we will invoke the
    action to verify that it returns the results as expected. Once the action response
    is verified, we will update the action to return the exam grade with the results
    based on the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Return `Pass with grade A` if marks are equal to or above 80.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return `Pass with grade B` if marks are equal to or above 70.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return `Pass with grade C` if marks are equal to or above 60.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return `Fail` if marks are below 60.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, we will invoke the action to verify the results and finally delete the
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The code files for this exercise can be found at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson08/Exercise26](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson08/Exercise26).
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a JavaScript function in the `exam-result.js` file that
    will return the exam results based on the provided exam marks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the OpenWhisk action named `examResult` from the `exam-result.js`
    file created in *step 1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.31: Creating the examResult action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.31: Creating the examResult action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once the action creation is successful, we can invoke the `examResult` action
    by sending a value between 0 to 100 to the `examMarks` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32: Invoking the examResult action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.32: Invoking the examResult action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'At this step, we are going to create a new JavaScript function in `exam-result-02.js`
    to return the exam results with the `grade` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s update the OpenWhisk action with the previously updated `exam-result-02.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.33: Updating the examResult action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.33: Updating the examResult action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once the action is updated, we can invoke the action multiple times with different
    exam marks as parameters to verify the functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.34: Invoking the examResult action with different parameter values'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.34: Invoking the examResult action with different parameter values'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Finally, we will delete the `examResult` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.35: Deleting the examResult action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.35: Deleting the examResult action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this exercise, we learned how to create a JavaScript function that follows
    the standards for OpenWhisk actions. Then we created the action and invoked it
    with the `wsk` CLI. After that, we changed the logic of the function code and
    updated the action with the latest function code. Finally, we performed a cleanup
    by deleting the action.
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk Sequences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In OpenWhisk, and in general with programming, functions (known as actions in
    OpenWhisk) are expected to perform a single focused task. This will help to reduce
    code duplication by reusing the same function code. But creating complex applications
    requires connecting multiple actions together to achieve the desired result. OpenWhisk
    sequences are used to chain multiple OpenWhisk actions (which can be in different
    programming language runtimes) together and create more complex processing pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates how a sequence can be constructed by chaining
    multiple actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.36: OpenWhisk sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.36: OpenWhisk sequence'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can pass parameters (if any) to the sequence, which will be used as the input
    for the first action. Then, the output of each action will be the input for the
    next action, and the final action of the sequence will return its result as the
    output of the sequence. Actions written in different programming languages can
    also be chained together with sequences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequences can be created using the `wsk action create` command with the `--sequence`
    flag to provide a comma-separated list of actions to invoke:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In order to demonstrate the concept of OpenWhisk sequences, we will be creating
    a sequence named `login` in the following section, which consists of two actions,
    named **authentication** and **authorization**. The `login` action will be invoked
    when a user tries to log in to the application. If the user provides correct credentials
    at login, they can view all the content on the system. But if the user fails to
    provide the correct login credentials, they can only view the public content of
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Authentication is verifying the user's identity, and authorization is granting
    the required level of access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create the `authentication.js` function. This function will receive
    two parameters, named `username` and `password`. If the username and password
    match the hardcoded values of `admin` (for the `username` parameter) and `openwhisk`
    (for the `password` parameter), the function will return `authenticationResult`
    as `true`. Otherwise, `authenticationResult` will be `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The next function is `authorization.js`, which takes the `authenticationSuccess`
    value as input and displays appropriate content to the users. If the user is successfully
    authenticated (`authenticationSuccess = true`), the `''Authentication Success!
    You can view all content''` message will be displayed. If authentication failed
    (`authenticationSuccess != true`), the `''Authentication Failed! You can view
    only public content''` message will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s deploy both actions with the `wsk action create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.37: Creating authentication and authorization actions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.37: Creating authentication and authorization actions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now both authentication and authorization actions are ready. Let''s create
    a sequence named `login` by combining `authentication` and `authorization` actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_08_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.38: Creating a login sequence'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now it''s time to test the login sequence. First, we will invoke the login
    sequence by sending the correct credentials (`username` = `admin` and `password`
    = `openwhisk`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_08_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.39: Invoking the login sequence with valid credentials'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The expected result for a successful login is shown in the preceding screenshot.
    Now, let''s invoke the login sequence by sending incorrect credentials (`username`
    = `hacker` and `password` = `hacker`). This time we expect to receive an authentication
    failure message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.40: Invoking the login sequence with invalid credentials'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.40: Invoking the login sequence with invalid credentials'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this section, we learned about OpenWhisk sequences. We created multiple actions,
    linked them together using a sequence, and invoked the sequence by sending the
    required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 27: Creating OpenWhisk Sequences'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will create a sequence with two actions written in different
    languages. The first action, written in Python, receives the marks for two exams
    and returns the average marks. The second action, written in JavaScript, receives
    the average marks and returns either pass or fail.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The code files for this exercise can be found at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson08/Exercise27](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson08/Exercise27).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the first function (`calculate-average.py`), which calculates the average
    marks. This function will receive the marks for two exams as the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an OpenWhisk action named `calculateAverage` from `calculate-average.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.41: Creating the calculateAverage action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.41: Creating the calculateAverage action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check that the `calculateAverage` action is working as expected by invoking
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:![Figure 8.42: Invoking the calculateAverage
    action'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_08_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.42: Invoking the calculateAverage action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Create the second function (`show-result.js`), which returns the exam result
    (`Pass` or `Fail`) based on the average marks. The exam results will be based
    on the logic as marks less than 0 or greater than 100 will return an `Error`;
    marks greater than or equal to 60 will return `Pass`; else it will return `Fail`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an OpenWhisk action named `showResult` from `show-result.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.43: Creating the showResult action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.43: Creating the showResult action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check that the `showResult` action is working as expected by invoking it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.44: Invoking the showResult action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.44: Invoking the showResult action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create the `getExamResults` sequence with the `calculateAverage` and `showResult`
    actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.45: Creating the getExamResults sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.45: Creating the getExamResults sequence'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Invoke the `getExamResults` sequence and verify the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.46: Invoking the getExamResults sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.46: Invoking the getExamResults sequence'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: OpenWhisk Web Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we have invoked our OpenWhisk actions through the `wsk` CLI with the
    `wsk action invoke` command. Even though this invocation method is very simple
    and suits us well during the development stage, the `wsk` CLI cannot be used by
    external parties, such as external applications or users, to invoke our actions.
    As a solution, we can use OpenWhisk web actions, which will allow actions to be
    invoked through HTTP requests with a publicly available URL.
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk standard actions require authentication when invoking the action (this
    is handled internally by the **wsk** CLI) and must return a JSON payload as the
    response. In contrast, web actions can be invoked without authentication and can
    return additional information, such as HTTP headers and non-JSON payloads such
    as HTML and binary data.
  prefs: []
  type: TYPE_NORMAL
- en: An OpenWhisk standard action can be converted to a web action by sending the
    `--web true` (or `--web yes`) flag when creating (`wsk action create`) or updating
    (`wsk action update`) actions with the `wsk` CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a JavaScript function (`web-action.js`) to be invoked as a web
    action. This function will return **Hello, Stranger** if we did not pass a value
    for the name parameter and returns `Hello` with the name when we pass a value
    for the `name` parameter with the web action URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create a web action by sending the `--web true` flag with the `wsk
    action create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.47: Creating myWebAction as a web action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.47: Creating myWebAction as a web action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Then, we can invoke the created web action using the web action URL. The general
    format of a web action URL is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s discuss each component of this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`APIHOST`: The `APIHOST` value for IBM Cloud Functions is `openwhisk.ng.bluemix.net`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QUALIFIED_ACTION_NAME`: The fully qualified name of the web action in `<namespace>/<package-name>/<action-name>`
    format. If the action is not in a named `package`, use `default` as the value
    of `<package-name>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXT`: The extension that represents the expected response type of the web
    action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use the `--url` flag with the `wsk action get` command to retrieve the
    URL of a web action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.48: Retrieving the public URL of myWebAction'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.48: Retrieving the public URL of myWebAction'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We need to append `.json` as an extension to the preceding URL since our web
    action is responding with a JSON payload. Now we can either open this URL in a
    web browser or use the `curl` command to retrieve the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s invoke in the preceding URL using a web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.49: Invoking myWebAction from a web browser without the name parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.49: Invoking myWebAction from a web browser without the name parameter'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Hello, Stranger** is the expected response because we did not pass a value
    for the `name` parameter in the query.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s invoke the same URL by appending `?name=OpenWhisk` at the end of
    the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://us-south.functions.cloud.ibm.com/api/v1/web/sathsara89%40gmail.com_dev/default/myWebAction.json?name=OpenWhisk](https://us-south.functions.cloud.ibm.com/api/v1/web/sathsara89%40gmail.com_dev/default/myWebAction.json?name=OpenWhisk)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.50: Invoking myWebAction from a web browser with the name parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.50: Invoking myWebAction from a web browser with the name parameter'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can invoke the same URL as a `curl` request with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.51: Invoking myWebAction as a curl command with the name parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_51.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.51: Invoking myWebAction as a curl command with the name parameter'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This command will produce the same output as we saw in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we discussed previously, OpenWhisk web actions can be configured to return
    additional information including HTTP headers, HTTP status codes, and body content
    of different types using one or more of the following fields in the JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '`headers`: This field is used to send HTTP headers in the response. An example
    would be to send `Content-Type` as `text/html`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statusCode`: This will send a valid HTTP response code. The status code of
    **200 OK** will be sent unless specified explicitly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body`: This contains the response content, which is either plain text, a JSON
    object or array, or a base64-encoded string for binary data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we will update the `web-action.js` function to send the response in the
    format we discussed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will update the `myWebAction` action with the latest function code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.52: Updating myWebAction'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_52.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.52: Updating myWebAction'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let''s invoke the updated action with the following `curl` command. We will
    provide `name=OpenWhisk` as a query parameter in the URL. Also, the `-v` option
    is used to print verbose output, which will help us to verify the fields we added
    to the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the response we received after the preceding `curl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, we have received `HTTP/1.1 200 OK` as the HTTP response code,
    `Content-Type: text/html` as a header, a cookie, and `<html><body><h3>Hello, OpenWhisk</h3></body></html>`
    as the body of the response.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s invoke the same `curl` request without the `name=OpenWhisk` query
    parameter. This time, the expected response code is `HTTP/1.1 400 Bad Request`
    because we did not pass a value for the query parameter. Also, the `curl` command
    will respond with `<html><body><h3>Hello, Stranger</h3></body></html>` as the
    HTTP response body code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the response from the preceding `curl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we introduced OpenWhisk web actions and discussed the differences
    between standard actions and web actions. Then, we created a web action using
    the `wsk` CLI. Next, we learned about the format of the URL exposed by web actions.
    We invoked the web action with both web browser and `curl` commands. Then, we
    discussed the additional information that can be returned with web actions. Finally,
    we updated our web action to include headers, **statusCode**, and the body in
    the response and invoked the web action using the `curl` command to verify the
    response.
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk Feeds, Triggers, and Rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous sections, we learned how to invoke actions either with the
    **wsk** CLI or with HTTP requests using web actions. In this section, we are going
    to learn how to automate action invocation with OpenWhisk feeds, triggers, and
    rules. The following diagram illustrates how actions are invoked with events from
    external event sources using feeds, triggers, and rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.53: OpenWhisk Feeds, triggers, and rules'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.53: OpenWhisk Feeds, triggers, and rules'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Triggers are different types of events sent from event sources. These triggers
    can be fired either manually with the `wsk` CLI or automatically from events occurring
    in external event sources. Some examples of an event source are a Git repository,
    an email account, or a Slack channel. As illustrated in the preceding diagram,
    feeds are used to connect the triggers to external event sources. Examples for
    feeds are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A commit is made to a Git repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incoming email messages to a particular account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message received by a Slack channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As illustrated, the rule is the component that connects triggers with actions.
    A rule will connect one trigger with one action. Once this link is created, every
    invocation of the trigger will execute the associated action. The following scenarios
    are also possible by creating an appropriate set of rules:'
  prefs: []
  type: TYPE_NORMAL
- en: A single trigger to execute multiple actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single action to be executed in response to multiple triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start by creating a simple action to be invoked with triggers and rules.
    Create a file named `triggers-rules.js` and add the following JavaScript function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we will create the action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to create our first trigger. We will use the `wsk trigger create`
    command to create the trigger using the `wsk` CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a trigger called `myTrigger`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.54: Creating myTrigger'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.54: Creating myTrigger'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can list the available triggers to make sure that `myTrigger` has been created
    successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.55: Listing all triggers'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.55: Listing all triggers'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Triggers are useless until we connect them with actions through a rule. Now
    we will be creating an OpenWhisk rule with the `wsk rule create` command, which
    has the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a rule named `myRule` to connect the `myTrigger` and `triggerAndRules`
    actions together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.56: Creating myRule to connect myTrigger with the triggersAndRules
    action'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_56.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.56: Creating myRule to connect myTrigger with the triggersAndRules
    action'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can get the details about `myRule`, which shows the trigger and action associated
    with the rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This command will print detailed output about `myRule` as shown in the following
    screenshot, which includes the **namespace**, **version**, **status**, and associated
    **triggers** and **actions** of **rule**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.57: Getting the details of myRule'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.57: Getting the details of myRule'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It''s time to see triggers in action once the **action**, **trigger**, and
    **rule** are ready. Let''s fire the trigger using the `wsk trigger fire` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.58: Firing myTrigger'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.58: Firing myTrigger'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This will print the ID of the activation for the trigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s execute the following command to list the last two activations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.59: Listing the last two activations'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.59: Listing the last two activations'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see that the `myTrigger` trigger activation
    is recorded, followed by the `triggersAndRules` action activation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can print the result of the `triggersAndRules` action activation to make
    sure that the action was invoked properly by the trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.60: Printing the result of the activation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.60: Printing the result of the activation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this section, we discussed how to automate action invocation with feeds,
    triggers, and rules. We created an action, a trigger, and then a rule to connect
    them. Finally, we invoked the action by firing the trigger.
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk CronJob Triggers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding section, we discussed how to fire a trigger with the `wsk trigger
    fire` command. However, there are situations in which we need to automate the
    firing of triggers. An example would be performing a periodic task, such as running
    system backups, log archiving, or database purging. OpenWhisk provides cron-based
    triggers for invoking serverless functions at fixed intervals. The `/whisk.system/alarms`
    package provided by OpenWhisk can be used to fire triggers at scheduled intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'This package includes the following feeds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.61: Feeds available in alarms package'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_61.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.61: Feeds available in alarms package'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the following exercise, let's learn how to create a cron job-based trigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 28: Creating CronJob Triggers'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we are going to create an OpenWhisk action that will be invoked
    every minute using feeds, triggers, and rules. The function code will print the
    current date and time as the output so we can verify that the cron job trigger
    has correctly invoked the action.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The code files for this exercise can be found at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson08/Exercise28](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson08/Exercise28).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating the function code. This function will return the current
    date and time. Create a `date-time.js` file with the following code and create
    an action called `dateTimeAction`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.62: Creating dateTimeAction'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_62.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.62: Creating dateTimeAction'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The next step is to create a trigger with the `/whisk.system/alarms/alarm`
    feed. The cron value is provided as `"* * * * *"`, which aims to trigger this
    action every minute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the response for the `wsk trigger create` command. Make sure there
    is `ok: created trigger dateTimeCronTrigger` at the end of the output, which indicates
    the successful creation of `dateTimeCronTrigger`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the rule (`dateTimeRule`) to connect the action (`dateTimeAction`) with
    the trigger (`dateTimeCronTrigger`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.63: Creating dateTimeRule to connect dateTimeCronTrigger with dateTimeAction'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_63.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.63: Creating dateTimeRule to connect dateTimeCronTrigger with dateTimeAction'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This action will now be triggered every minute. Allow the cron job trigger
    to run for around 5 minutes. We can list the last 6 activations with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.64: Listing the last six activations'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_64.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.64: Listing the last six activations'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'List the summary of the activations of `dateTimeAction` to make sure it has
    printed the current datetime every minute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.65: Printing the summary of dateTimeAction activations'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_65.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.65: Printing the summary of dateTimeAction activations'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Check the value of the `currentDateTime` field, printed for each invocation
    to verify that this action was invoked every minute as scheduled. In the preceding
    screenshot, we can see that the action was invoked at **09:37:02**, then again
    at **09:38:03**, and finally at **09:39:03**.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we created a simple function that prints the current date
    and time. Then, we created a cron job trigger to invoke this action every minute.
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk Packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenWhisk packages allow us to organize our actions by bundling the related
    actions together. As an example, consider that we have multiple actions, such
    as `createOrder`, `processOrder`, `dispatchOrder`, and `refundOrder`. These actions
    will perform the relevant application logic when an application user creates an
    order, processes an order, dispatches an order, and refunds an order respectively.
    In this case, we can create a package named `order` to group all order-related
    actions together.
  prefs: []
  type: TYPE_NORMAL
- en: As we learned previously, action names should be unique. Packages help to prevent
    naming conflicts because we can create multiple actions with the same name by
    placing them in different packages. As an example, the `retrieveInfo` action from
    the `order` package may retrieve information about an order, but the `retrieveInfo`
    action from the customer package can retrieve information about a customer.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have created many actions without bothering about packages. How was
    this possible? This is because OpenWhisk places actions into default packages
    if we do not mention any specific package during action creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of packages in OpenWhisk:'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in packages (packages come with OpenWhisk)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-defined packages (other packages created by users)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the packages available in a namespace can be retrieved with the `wsk package
    list <namespace>` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.66: Listing the packages in the /whisk.system namespace'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_66.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.66: Listing the packages in the /whisk.system namespace'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Packages can be created with the `wsk package create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we introduced the concept of packages and discussed the built-in
    packages and user-defined packages of OpenWhisk. In the next exercise, we will
    create a package and add an action to the newly created package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 29: Creating OpenWhisk Packages'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a package named `arithmetic` that contains
    all arithmetic-related actions, such as add, subtract, multiply, and divide. We
    will create a function that receives two numbers as input and returns the result
    by adding the numbers. Then, we will create this action within the `arithmetic`
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a package named `arithmetic`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.67: Creating the arithmetic package'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_67.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.67: Creating the arithmetic package'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we are going to create an action that will be added to our `arithmetic`
    package. Create a file named `add.js` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create the action and add it to the `arithmetic` package simultaneously
    with the `wsk action create` command. This will only require us to prefix the
    action name with the package name. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: In the output, we can see that the action has been successfully created in the
    `arithmetic` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.68: Adding an add action to the arithmetic package'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_68.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.68: Adding an add action to the arithmetic package'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now we can verify that our `add` action has been placed in the arithmetic package
    using the `wsk action list` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.69: Listing the actions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_69.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.69: Listing the actions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `wsk package get` command will return JSON output that describes the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.70: Getting a detailed description of the arithmetic package'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_70.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.70: Getting a detailed description of the arithmetic package'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can use the `--summary` flag if we want to see a summary of the package
    description, which lists the actions within the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.71: Getting the summary description of the arithmetic package'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_08_71.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.71: Getting the summary description of the arithmetic package'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 8: Receive Daily Weather Updates via Email'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine that you are working for a disaster management center and need to be
    updated with weather information. You have decided to create an application that
    can send you weather updates via email at specified intervals. To achieve this,
    you have decided to deploy an application that can retrieve the current weather
    in a specific city and send a daily email at 8.00 AM with the current weather
    information to a specified email address. In this activity, we will be using external
    services to retrieve weather information (**OpenWeather**) and send emails (**SendGrid**).
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to have the following before we start this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: An **OpenWeather** account (to retrieve current weather information)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **SendGrid** account (to send emails)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zip` installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute the following steps to create an **OpenWeather** account and a SendGrid
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an **OpenWeather** ([https://openweathermap.org/](https://openweathermap.org/))
    account to retrieve current weather information and save the API key. Create an
    **OpenWeather** account at [https://home.openweathermap.org/users/sign_up](https://home.openweathermap.org/users/sign_up).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **API keys** tab ([https://home.openweathermap.org/api_keys](https://home.openweathermap.org/api_keys))
    and save the API key as this API key is required to fetch the data from the OpenWeather
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Test the OpenWeather API using `https://api.openweathermap.org/data/2.5/weather?q=London&appid=<YOUR-API-KEY>`
    in a web browser. Please note that you need to replace **<YOUR-API-KEY>** with
    your API key from *step 1*.
  prefs: []
  type: TYPE_NORMAL
- en: Create a SendGrid ([https://sendgrid.com](https://sendgrid.com)) account and
    save the API key. This is used to send emails. Create a SendGrid account at [https://signup.sendgrid.com/](https://signup.sendgrid.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Settings > API Keys** and click on the **Create API Key** button.
  prefs: []
  type: TYPE_NORMAL
- en: Provide a name in the **API Key Name** field, select the **Full Access** radio
    button, and click on the **Create & View** button to create an API key with full
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Once the key is generated, copy the API key and save it somewhere safe as you
    will see this key only once.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Detailed steps on creating an **OpenWeather** account and a SendGrid account
    are available in the *Appendix* section on page 432.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are ready to start the activity. Execute the following steps to complete
    this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a function in any language that you are familiar with (and supported
    by the OpenWhisk framework) that will take the city name as a parameter and return
    a JSON object with weather information retrieved from the OpenWeather API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For this solution, we will be using functions written in JavaScript. However,
    you can use any language that you are familiar with to write the functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example function written in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Create a second function (in any language that you are familiar with and is
    supported by the OpenWhisk framework) that will take a message as input and send
    the input message to a specified email address using the SendGrid service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example function written in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Create a third function (in any language that you are familiar with and is supported
    by the OpenWhisk framework) that will take the JSON object with the weather data
    and format it as a string message to be sent as the email body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example function written in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a sequence connecting all three actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, create the trigger and rule to invoke the sequence daily at 8.00 AM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution to the activity can be found on page 432.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we first learned about the history and the core concepts of
    Apache OpenWhisk. Then, we learned how to set up IBM Cloud Functions with CLI
    to run our serverless functions. After that, OpenWhisk actions were introduced,
    which are the code snippets written in one of the languages supported by OpenWhisk.
    We discussed how to write, create, list, invoke, update, and delete OpenWhisk
    actions using the `wsk` CLI. Next, we went over OpenWhisk sequences, which are
    used to combine multiple actions together to create a more complex processing
    pipeline. Going forward, we learned how to expose actions publicly using a URL
    with web actions. We discussed how web actions allow us to return additional information
    from the action, such as HTTP headers and non-JSON payloads, including HTML and
    binary data. The next section was on feeds, triggers, and rules that automate
    action invocation using events from external event sources. Finally, OpenWhisk
    packages were discussed, which are used to organize related actions by bundling
    them together.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we shall learn about OpenFaaS and work with an
    OpenFaaS function.
  prefs: []
  type: TYPE_NORMAL
