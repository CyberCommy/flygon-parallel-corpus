- en: Targeting Wireless Devices and Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A decade ago, there weren't as many mobile devices in the world. Back then,
    only laptops were using wireless networking technology, until the smartphone industry
    kicked off. Modern-day organizations are adopting the **bring-your-own-device**
    (**BYOD**) concept, where organizations allow their employees to connect their
    personal mobile devices, such as a smartphone, tablet, or laptop, to the corporate
    network securely, as it will create an increase in overall productivity.
  prefs: []
  type: TYPE_NORMAL
- en: As more mobile devices are introduced to a corporate network, this creates a
    few security concerns and threatens the security posture of a corporate wireless
    and wired network infrastructure. In addition, the configurations on a wireless
    network device, such as an **access point** (**AP**) or wireless router, may not
    be up to the company's standards. At times, a network administrator may forget
    to apply a security configuration or simply deploy a device in a production network
    using default settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Types of wireless networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless authentication modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless encryption standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluetooth hacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before the inception of wireless networking, each device required a physical
    cable that connected the device's **network interface card** (**NIC**) to the
    network switch to communicate with other devices and share resources. The major
    limitation of using a wired network is that the end devices, such as computers
    or servers, were limited by the length of the network cable. As with most Category
    (CAT) cables, such as CAT 5, 5e, and 6, the maximum cable length is 100 meters.
    Furthermore, the inconvenience of having to move around with a very lengthy cable
    is just too frustrating at times for certain users.
  prefs: []
  type: TYPE_NORMAL
- en: The creation of the IEEE 802.11 standard, which uses radio channels, paved the
    way for modern wireless networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some advantages of using the IEEE 802.11 wireless networking:'
  prefs: []
  type: TYPE_NORMAL
- en: It eliminates the need to run cables to each end device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides network connectivity to areas where it's difficult to lay network
    cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows devices to roam the within area of the access point (AP) or wireless
    router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, using a wireless network can create some concerns. The following are
    some disadvantages of using IEEE 802.11:'
  prefs: []
  type: TYPE_NORMAL
- en: Wireless encryption can be broken due to security vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bandwidth on a wireless network is usually lower than a wired network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interference from other radio-emitting devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The signal weakens over distance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless network topologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss various types of wireless network topologies.
    Before attacking a wireless network, a penetration tester should have an understanding
    of wireless network designs and how clients are interconnected.
  prefs: []
  type: TYPE_NORMAL
- en: Independent Basic Service Set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within an **Independent Basic Service Set** (**IBSS**), there are no APs or
    wireless routers in this design/topology. Each client device establishes a connection
    with the others over the IEEE 802.11 standard. This is known as an ad hoc network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/48b760bf-8f2b-46e9-8e8d-595b756f63fd.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Basic Service Set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a **Basic Server Set** (**BSS**) design, all clients are interconnected
    with the use of a wireless router or an AP. The wireless router or AP is responsible
    for moving network traffic between clients and the wired network. This type of
    topology is also known as infrastructure mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/679c4f79-d192-46bd-8262-873ab4263474.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Extended Service Set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Extended Service Set** (**ESS**) mode is very similar to BSS. Within
    an ESS, there are multiple APs or wireless routers connected to the same wired
    network. This design is useful for extending a wireless signal throughout a building
    or compound, allowing users to access the resources within the network while a
    user may roam around:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d5c62cd3-7627-4c46-aff3-271163066911.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wireless standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Institute for** **Electrical and Electronic Engineers** (**IEEE**) has
    created many standards within the computing and IT industry. One very popular
    standard known by professionals within the field of networking and security is
    the IEEE 802.11 standard, which outlines how wireless communication operates on
    both the 2.4 GHz and 5 GHz frequencies. Regular consumers know this technology
    by another name: Wi-Fi.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table outlines the different variations of the IEEE 802.11 standards,
    with their operating frequencies and the maximum bandwidth capacity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d52e178c-e2a1-4256-98ed-bb7e0c466d5b.png)'
  prefs: []
  type: TYPE_IMG
- en: If you're targeting a wireless network that is operating on the 5 GHz frequency
    and your wireless network adapter is using a standard frequency, which operates
    on 2.4 GHz only, you won't be able to successfully execute any attacks on the
    target network.
  prefs: []
  type: TYPE_NORMAL
- en: Service Set Identifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Service Set Identifier** (**SSID**) is most commonly known as the name
    of the wireless network, as it is seen by laptops, smartphones, and other mobile
    devices. The SSID is used to help us differentiate a particular network from another.
    An AP or wireless router continuously advertizes its SSIDs via broadcast messages,
    while clients, such as laptops, capture these broadcast messages (better known
    as beacons) to obtain the SSID it contains.
  prefs: []
  type: TYPE_NORMAL
- en: 'SSIDs are usually human-readable text or characters of a maximum length of
    32 bytes. The following is an example of SSIDs discovered by an Android tablet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/7d658a0b-0880-4cf5-b00c-88d8d298d1a6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wireless authentication modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On a wireless network, there are usually three different ways a client device
    can be authenticated to a wireless router or an access point:'
  prefs: []
  type: TYPE_NORMAL
- en: Open authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared-key authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The open authentication system is quite simple. The wireless router or AP is
    not configured with a password, and simply broadcasts its SSID to everyone who
    is near. A client who wishes to connect can do so freely, without having to provide
    any sort of credentials or identity before gaining access to the wireless network.
    An example of using open authentication is the free hotspot service in public
    areas and venues, such as coffee shops.
  prefs: []
  type: TYPE_NORMAL
- en: Within the shared-key authentication system, the wireless router or AP is configured
    with a pre-shared key (PSK). This method allows clients to connect to the wireless
    network only if they can provide the correct key. Clients without the appropriate
    key will be denied access. This method is most commonly found in home networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In centralized authentication, a centralized authentication server is used
    to manage network user accounts, privileges, and accounting. The wireless router
    or AP is not configured with a secret key, but rather, communicates with the centralized
    authentication system to query each login attempt on the wireless network. Let''s
    imagine a user wants to connect their laptop to the wireless network, so they
    select the appropriate SSID and attempt to connect. The wireless router sends
    a login request to the user. The user is prompted to enter their user credentials
    for the network; the wireless router will then send the login credentials to the
    authentication server for validation. If approved, the authentication server tells
    the wireless router to allow access and assign certain privileges to the user.
    If the account is not valid, the authentication server tells the wireless router
    not to grant access to the network. This method is usually found in corporate
    networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/e75522c0-2250-46cd-a2c5-21d19a215215.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Both **Remote Authentication Dial-In User Service (RADIUS)** and **Terminal
    Access Controller Access-Control System Plus (TACACS+)** are examples of centralized
    authentication servers.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless encryption standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a penetration tester, it's important to understand the various types of wireless
    encryption and their standards.
  prefs: []
  type: TYPE_NORMAL
- en: Wired Equivalent Privacy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Wired Equivalent Privacy** (**WEP**) standard was the first encryption
    standard implemented within an IEEE 802.11 network. It's designed to provide data
    confidentiality during all wireless communications between an access point and
    a client. WEP uses the **RC4** encryption cipher/algorithm to ensure confidentiality
    during transmission; however, the WEP encryption standard uses a **24-bit initialization
    vector (IV)**. The IV, in this case, is used to create a stream of ciphers for
    the RC4 encryption algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the various key sizes for WEP:'
  prefs: []
  type: TYPE_NORMAL
- en: A 64-bit WEP uses a 40-bit key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 128-bit WEP uses a 104-bit key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 256-bit WEP uses 232-bit key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WEP has been known for its design flaws over the years and is considered a security
    vulnerability when applied to an IEEE 802.11 network.
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi Protected Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Wi-Fi Protected Access** (**WPA**) is another encryption standard designed
    for the IEEE 802.11 network and is the successor of the WEP standard. WPA utilizes
    the **Temporal Key Integrity Protocol** (**TKIP**), which uses the **RC4** cipher
    (128-bit per packet) for data encryption (confidentiality). TKIP, however, mitigated
    the vulnerabilities from WEP by simply increasing the size of **initialization
    vectors** (**IVs**) and mixing their functions. The **128-bit** **Temporal Key**
    is combined with the client device''s **media access control** (**MAC**) address
    and the IVs to create a keystream that is then used for data encryption.'
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi Protected Access 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Wi-Fi Protected Access 2** (**WPA2**) is the successor of the WPA encryption
    standard for IEEE 802.11 wireless networks. This standard uses the **Advanced
    Encryption Standard** (**AES**), which is superior to the RC4 encryption cipher
    suite. AES provides a stronger encryption of datagram blocks to ensure data confidentiality.
    Furthermore, WPA2 applies the **Counter Mode with Cipher Block Chaining Message
    Authentication Code Protocol** (**CCMP**), which is superior to TKIP. CCMP handles
    data encryption by using a 128-bit key to provide confidentiality together with
    AES, which creates 128-bit data blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: Further information on wireless security standards can be found on the Wi-Fi
    Alliance website: [https://www.wi-fi.org/discover-wi-fi/security](https://www.wi-fi.org/discover-wi-fi/security).
  prefs: []
  type: TYPE_NORMAL
- en: Wireless threats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are security threats when using wireless networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rogue access point**: At times, a penetration tester will need to check the
    security posture of a company''s wireless network and the security awareness of
    the employees. A **rogue access point** is where a penetration tester would set
    up a *fake* access point with an SSID to trick users into establishing a connection.
    Imagine creating an SSID on a rogue access point, naming it *Company XYZ VIP Access*, and
    leaving it open. A lot of people seeing this name will think there are special
    resources on this wireless network. This technique will allow the pentester to
    sniff traffic easily and obtain sensitive data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![image](img/2b1650da-1556-4701-931b-5ae03e0883ae.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Evil twin**: The **evil twin** setup is a bit similar to the rogue access
    point configuration. However, with an evil twin, the penetration tester deploys
    an access point within the corporate network using the same SSID as the actual
    organization. When users connect, they will be able to access the local resources
    without realizing they had connected to an unauthorized access point. This would
    allow the pentester to intercept and sniff traffic easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AP and client MAC spoofing**: A penetration tester can record the MAC address
    of an access point and clients that are associated. Capturing this information
    will allow the penetration tester to mimic either an access point into tricking
    victims to connect to or use the MAC address of the client to establish a connection
    to an access point with the MAC filtering feature enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**De-authentication attack**: A penetration tester sends specially-crafted
    packets to an access point for the purpose of creating a disassociation between
    the access point and its connected client devices. To it put simply: a de-authentication
    attack will cause the access point to knock off one or more clients. This attack
    also has the following benefits:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hidden SSIDs. This is done by monitoring the probes sent by a client
    device and its association with an access point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing the WPA2 handshake that is used to crack the password for the wireless
    network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For most of the following attacks, we'll be using the aircrack-ng suite of tools
    to help us accomplish our objectives.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aircrack-ng** can be found at [www.aircrack-ng.org](http://www.aircrack-ng.org).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – checking whether a wireless card supports injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A quick and easy method to determine whether your wireless NIC supports packet
    injection is to use the `aireplay-ng` tool. Using the `aireplay --test <*interface*>` command
    will test for packet injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a demonstration of using the command. As you can see, our
    card supports packet injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/d4ea5890-920e-438c-927e-e8fc8dcce420.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition, the `-9` parameter can be used instead of `--test`.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/1d309638-8232-46fe-b699-43e44230babd.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look carefully at the output, you'll see the packet loss ratio was obtained
    for each access point.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – detecting access points and their manufacturers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can detect each access point that is within range of our Kali NetHunter
    device. We''ll be able to determine the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The MAC address or BSSID of the access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its signal rating by displaying a PWR value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its encryption standard, cipher, and authentication method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the network or ESSID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get started, ensure your wireless network adapter is in monitoring mode.
    Before enabling monitoring mode, we need to ensure there aren''t any processes
    that may hamper this process. Therefore, we use the following command to kill
    any such process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can configure our network adapter to monitoring mode using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You device will begin capturing beacons and probes across the airways:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/056294dd-0e26-4bc4-a352-cc73401d077d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pressing the *A* key on your keyboard will allow you to cycle through various
    filters. These filters include view access points only, view clients only, view
    access point and clients only, and finally, view access points, clients, and acknowledgement
    messages only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s determine the manufacturer of a product that can help in researching
    known vulnerabilities about a vendor-specific product. The **airodump-ng** tool
    will identify access points of specific manufacturers, we can do this by using
    the `airodump-ng <*interface*> --manufacturer` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/05b97c78-7612-4210-9dc2-2739b716f318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise – discovering the WPS version of an access point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to use additional parameters with our **airodump-ng**
    tool on Kali NetHunter. Using the `--bssid` syntax to specify the access point
    to target, and `–c` to tell our wireless network adapter to listen on a particular
    channel, will help us monitor a specific wireless network. We will use `--wps`
    to indicate the WPS mode and version of the target access point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output after running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/1f270500-6c8a-48cb-a2ef-5d436e2823ef.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon executing our command, we get the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/24da979f-6dda-495f-87fb-d95fc53d56c0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see this access point has WPS enabled and is using version 2.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – de-authentication attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A de-authentication attack simply attempts to knock all associated/connected
    clients off an access point. In this exercise, we are going to use the **aireplay-ng**
    tool to help us accomplish our task:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your wireless NIC is in monitoring mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use **airodump-ng** to obtain your target's BSSID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `aireplay -0 0 –a <*target''s BSSID*> <*monitoring interface*>` command
    to send a continuous steam of deauth frames to the target access point. The result
    will knock all connected clients off the network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](img/5961db56-998e-49a6-8d1a-abfb309dfc40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The aireplay-ng tool supports many attack modes. The following screenshot was
    taken from the *manual* page of aireplay-ng:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/338d51dd-ace8-453a-bfce-7b90059e24f9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise – de-authenticating a specific client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're targeting a specific client on a wireless network, we can use the
    following command to send deauth frames to the access point but only knock off
    the specified client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `airodump-ng --bssid <*target''s BSSID*> -c <*channel #*> <*monitor
    interface*>` command to actively monitor the target network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/322a4592-fa57-4792-8fc8-045ae49c2ce3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there are a few stations (client) that are associated with
    the access point. Let''s attempt a client disassociation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`-0` indicates we are executing a de-authentication attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0` specifics a continuous attack. If `2` is used, it means to send only 2
    deauth messages to the target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c` allows you to specify a specific station (client device) to de-authenticate.
    If this parameter is absent, the attack will de-authenticate all clients associated
    with the access point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will get the following screenshot after running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/30af9292-1110-46d7-b9fd-00c324ccafb8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise – detecting a de-authentication attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this book, we looked at using an amazing tool called **tcpdump**
    to capture network traffic. Another great benefit of using this tool is to detect
    a de-authentication attack. As the attack is happening on the airwaves, we will
    be able to see it and determine its target.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we can use the `tcpdump -n -e -s0 -vvv -i wlan0 | grep DeAuth` command.
  prefs: []
  type: TYPE_NORMAL
- en: '`-n` specifics not to resolve the IP address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-e` indicates to print the MAC addresses of IEEE 802.11 and Ethernet traffic
    types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v` indicates the level of verbosity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i` specifies the interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will get the following output after running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/44cb443f-c0b1-475a-befc-4adee0379b2b.png)'
  prefs: []
  type: TYPE_IMG
- en: The BSSID shown in the preceding screenshot indicates the victim access point.
    If this is your access point, this is an indication you're being targeted by a
    hacker.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – discovering hidden SSIDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many organization tend to disable the broadcast of their SSID on the access
    point. Over a decade ago, we considered this a security configuration for wireless
    networks. However, with advanced penetration-testing tools and techniques, a pentester
    or a security auditor can uncover any hidden SSIDs within a few minutes. As a
    penetration tester, it''s your job to uncover your target''s wireless network
    if it''s hidden from mobile devices. You need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the monitoring mode on your wireless network adapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `airodump-ng <*monitoring interface*>` command to display all nearby
    ESSIDs. Notice there is a network with an unusual format for its name, `<length:
    6>`. This indicates the access point has disabled the SSID from being broadcast:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](img/7dfd0be2-6837-46be-be69-1ebc4da7a02c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Monitor this specific access point to determine whether there are any associated
    or connected clients. Use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output after running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/e00f9ff3-c2ca-45ca-899b-88e89e4b5011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, there's currently one client connected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a brief de-authentication attack to force the client to reconnect upon
    disconnection. In the following screenshot, we will send a de-authentication attack
    using only 20 frames to the target access point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](img/4bf9530c-0d9e-4e15-b21c-3ece0ca113d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Midway during our de-authentication attack, the client was temporarily disconnected
    and sent out probes to look for the `dd-wrt` network. Once the connection was
    re-established, airodump-ng matched the information of the probe (sent by the
    station/client) with the ESSID and BSSID information. As we can see, the SSID/ESSID
    has been revealed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/ab27ca74-2911-4def-9cc8-2abf4ffa465f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise – cracking WEP and WPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step in cracking WEP and WPA is to capture sufficient data from our
    target wireless network. I would recommend you capture at least 15,000 data frames
    using `airodump-ng`. We can use the following command to capture and store the
    data offline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `–w` parameter will allow `airodump-ng` to write its data to the
    specified file. We will capture enough frames until we acquire the WPA handshake:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/af3907d9-a83d-44a4-8d8f-6df30f4a168e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we were able to capture the WPA handshake. To increase the likelihood
    of a client having to re-authenticate, you can attempt to use a de-authentication
    attack; this will ensure the client provides the secret key during the authentication
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `aircrack-ng <*file name*>` command to verify the wireless access point
    ESSID, BSSID, and whether a handshake was obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/06700d2d-3674-4247-850d-b1c85cd4d03d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our next step is to attempt to recover the pre-shared key (PSK) from the captured
    data. We will use **aircrack-ng** with a password dictionary file. To quickly
    locate pre-built dictionary files within Kali NetHunter or Kali Linux, use the
    `locate` following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output after running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/3af92fcd-92e9-4c08-947c-9c231273373c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now it''s time to recover the pre-shared key (PSK); let''s use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`aircrack-ng dd-wrt-01.cap –w /usr/share/metasploit-framework/data/wordlists/password.lst`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you hit *Enter* on the keyboard, **aircrack-ng** will attempt a dictionary
    attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/b3690d0b-6974-4b6e-ae27-7c021b96d674.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the pre-shared key (PSK) was obtained successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking WEP Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cracking the WEP passphrase is similiar to cracking WPA/WPA2\. In this subsection,
    we will demonstrate this method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform packet capturing  previously mentioned, we can again use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I would recommend you capture a minimum of 15,000 data frames and ensure the
    handshake is acquired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the handshake is obtained, ensure your .cap file has been saved offline.
    Use the `ls -l *cap` command to view all .cap files within our directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](img/a61b3034-8964-4700-b119-5e7930178205.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see there are two capture files. For our exercise, we will be using the `ptw.cap`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s attempt some WEP cracking techniques. To initiate `aircrack-ng`, use
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you hit *Enter*, `aircrack-ng` will attempt to recover the WEP key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/91678ab6-2541-4334-a0dc-3e7039295811.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have found our key.
  prefs: []
  type: TYPE_NORMAL
- en: Bluetooth hacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to wireless hacking on IEEE 802.11 networks, Bluetooth hacking also
    exists on the IEEE 802.15 networks as well. As we know, a Bluetooth connection
    is established over a short distance, by creating an ad hoc network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/c186b656-2314-44da-ab42-dc6b0adeace2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a short list of various types of Bluetooth attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bluejacking**: This allows a malicious user to send unsolicited messages
    over a Bluetooth connected to another Bluetooth-enabled device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bluesnarfing**: This is when an attacker is able to access the information
    on another Bluetooth-enabled device. Information may include the victim''s email
    messages, their address book details, or SMS messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bluesniffing**: The concept of war driving in search of Bluetooth-enabled
    devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bluebugging**: This is when an attacker is able to take control of a victim''s
    Bluetooth-enabled device. This allows the attacker to listen on telephone calls
    and send messages from the victim''s device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed various wireless topologies, as it is important
    for a penetration tester to have an understanding of the landscape prior to and
    during the attacking phase. We covered current wireless authentication modes and
    encryption standards, and looked at their similarities and differences. Furthermore,
    we dived into discussing wireless threats and explored a variety of penetration
    testing attacks. Finally, we covered various Bluetooth attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discuss avoiding detection. You'll learn about various
    way to be stealthy during a penetration test.
  prefs: []
  type: TYPE_NORMAL
