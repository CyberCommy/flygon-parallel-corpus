- en: Serverless Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will focus on serverless architectures and using them with the
    Go language. Serverless architectures are one where the developer does not manage
    the backend server. This includes services such as Amazon Lambda, Google App Engine
    and Firebase. These services allow you to quickly deploy applications and store
    data on the web.
  prefs: []
  type: TYPE_NORMAL
- en: All of the recipes in this chapter deal with third-party services that bill
    for use; ensure that you clean up when you're done using them. Otherwise, think
    of these recipes as kick-starters for spinning up larger applications on these
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Go programming on Lambda with Apex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apex serverless logging and metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google App Engine with Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Firebase using `firebase.google.com/go`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go programming on Lambda with Apex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apex is a tool for building, deploying, and managing AWS Lambda functions. It
    used to provide a Go `shim` for managing Lambda functions in code, but this is
    now done using the native AWS library ([https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go)).
    This recipe will explore creating Go Lambda functions and deploying them with
    Apex.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Apex from [http://apex.run/#installation](http://apex.run/#installation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Terminal or console application and create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All the code we will cover in this
    recipe will be run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`. Here,
    you have the option to work from that directory rather than typing in the examples
    manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/lambda` and
    navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create an Amazon account and an IAM role that can edit Lambda functions, which
    can be done from [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `~/.aws/credentials` with the following content, copying
    your credentials from what you set up in the Amazon console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an environment variable to hold your desired region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Remove the `lambda/functions/hello` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `lambda/functions/greeter1/main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `lambda/functions/greeter/main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the newly deployed functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Clean up the deployed services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Lambda makes it easy to run functions on demand without maintaining a server.
    Apex provides facilities for deploying, versioning, and testing functions as you
    ship them to Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Go library ([https://github.com/aws/aws-lambda-go](https://github.com/aws/aws-lambda-go))
    provides native Go compilation in Lambda and allows us to deploy Go code as Lambda
    functions. This is accomplished by defining a handler, processing incoming request
    payloads, and returning a response. Currently, the functions you define must follow
    these rules:'
  prefs: []
  type: TYPE_NORMAL
- en: The handler must be a function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The handler may take between zero and two arguments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are two arguments, the first argument must satisfy the `context.Context`
    interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The handler may return between zero and two arguments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are two return values, the second argument must be an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is one return value, it must be an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we defined two greeter functions, one that took a full name
    and one where we split the name into a first name and last name. If we modified
    a single function, `greeter`, instead of creating two, Apex would have deployed
    the new version instead and called in `v2` rather than `v1` in all the preceding
    examples. It would be possible to roll back with `apex rollback greeter` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Apex serverless logging and metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with serverless functions such as Lambda, it is valuable to have
    portable, structured logs. In addition, you can combine the earlier recipes that
    dealt with logging with this recipe. The recipes that we covered in Chapter 4,
    *Error Handling in Go*, are just as relevant. Because we're using Apex to manage
    our Lambda functions, we chose to use the Apex logger for this recipe. We'll also
    rely on metrics provided by Apex, as well as the AWS console. The earlier recipes
    explored more complex logging and metrics examples, and those still apply—the
    Apex logger can easily be configured to aggregate logs using, for example, Amazon
    Kinesis or Elasticsearch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section of the *Go programming on Lambda with Apex*
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/logging` and
    navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create an Amazon account and an IAM role that can edit Lambda functions, which
    can be done at [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `~/.aws/credentials` file with the following content, copying your
    credentials from what you set up in the Amazon console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an environment variable to hold your desired region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `apex init` command and follow the onscreen instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Remove the `lambda/functions/hello` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `lambda/functions/secret/main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy it to your specified region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To invoke it, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Check your metrics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Clean up the deployed services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we created a new Lambda function called secret that will respond
    with whether or not you guessed a secret phrase. The function parses an incoming
    JSON request, performs some logging using `Stderr`, and returns a response.
  prefs: []
  type: TYPE_NORMAL
- en: After using the function a few times, we can see that our logs are visible using
    the `apex logs` command. This command can be run on a single Lambda function or
    across all of our managed functions. This is especially useful if you are chaining
    Apex commands together and want to watch logs across many services.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we have shown you how to use the `apex metrics` command to collect
    general metrics about your application, including cost and invocations. You can
    also see a lot of this information directly in the AWS console in the Lambda section.
    Like the other recipes, we tried to clean up after ourselves at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Google App Engine with Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Engine is a Google service that facilitates the quick deployment of web
    applications. These applications have access to cloud storage and various other
    Google APIs. The general idea is that App Engine will scale easily with the load
    and simplify any operations management associated with hosting an app. This recipe
    will show how to create and optionally deploy a basic App Engine application.
    This recipe won't get into the details of setting up a Google Cloud account, setting
    up billing, or the specifics on cleaning up your instance. As a minimum requirement,
    access to Google Cloud Datastore ([https://cloud.google.com/datastore/docs/concepts/overview](https://cloud.google.com/datastore/docs/concepts/overview))
    is required for this recipe to work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.11.1 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Google Cloud SDK from [https://cloud.google.com/appengine/docs/flexible/go/quickstart](https://cloud.google.com/appengine/docs/flexible/go/quickstart).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an app that allows you to perform datastore access and record the app
    name. For this recipe, we'll use `go-cookbook`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `gcloud components install app-engine-go` Go app engine component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Terminal or console application and create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All the code we will cover in this
    recipe will be run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`. Here,
    you have the option of working from that directory rather than typing in the examples
    manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/appengine` and
    navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `app.yml` with the following content, replacing `go-cookbook`
    with the name of the app you created in the *Getting ready* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `message.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `controller.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Run the `gcloud config set project go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `gcloud auth application-default login` command and follow the instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export PORT=8080` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `export GCLOUD_DATASET_ID=go-cookbook` command, where `go-cookbook`
    is the project you created in the *Getting ready* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `go build` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `./appengine` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to [http://localhost:8080/?message=hello%20there](http://localhost:8080/?message=hello%20there).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try a few more messages (`?message=other`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, deploy the app to your instance with `gcloud app deploy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the deployed app with `gcloud app browse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optionally clean up your `appengine` instance and datastore at the following
    URLs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://console.cloud.google.com/datastore](https://console.cloud.google.com/datastore)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://console.cloud.google.com/appengine](https://console.cloud.google.com/appengine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, run the `go test` command. Ensure that
    all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the cloud SDK is configured to point at your application and has been authenticated,
    the GCloud tool allows quick deployment and configuration, allowing local applications
    to access Google services.
  prefs: []
  type: TYPE_NORMAL
- en: After authenticating and setting the port, we run the application on `localhost`,
    and we can begin working with the code. The application defines a message object
    that can be stored and retrieved from the datastore. This demonstrates how you
    might isolate this sort of code. You may also use a storage/database interface,
    as shown in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up a handler that attempts to insert a message into the datastore,
    then retrieves all the messages, displaying them in a browser. This creates something
    resembling a basic guestbook. You may notice that the message doesn't always appear
    immediately. If you navigate without a message parameter or send another message,
    it should appear on a reload.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, ensure that you clean up the instances if you're no longer using them.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Firebase using firebase.google.com/go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase is another Google Cloud service that creates a scalable, easy-to-manage
    database that can support authentication and works especially well with mobile
    applications. For this recipe, we'll use the latest Firestore as our database
    backend. The Firebase service provides significantly more than what will be covered
    in this recipe, but we will just be looking at storing and retrieving data. We'll
    also look into how to set up authentication for your application and wrap the
    Firebase client with our own custom client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure your environment according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.11.1 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Firebase account, project, and database at [https://console.firebase.google.com/](https://console.firebase.google.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This recipe runs in test mode, which is not secure by default.
  prefs: []
  type: TYPE_NORMAL
- en: Generate a service admin token by going to [https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk](https://console.firebase.google.com/project/go-cookbook/settings/serviceaccounts/adminsdk).
    Here, `go-cookbook` is replaced with your project name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the downloaded token to `/tmp/service_account.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Terminal or console application and create and navigate to a project directory
    such as `~/projects/go-programming-cookbook`. All the code we will cover in this
    recipe will be run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original`. Here,
    you have the option to work from that directory rather than typing in the examples
    manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter13/firebase` and
    navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `client.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `auth.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run `go build ./example`. You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase provides convenient functions so that you can log in with a credentials
    file. After we're logged in, we can store any sort of structured, map-like object.
    In this case, we are storing `map[string]interface{}`. This data is accessible
    by a number of clients, including on the web and via mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: The client code wraps all the operations in an interface for ease of testing.
    This is a common pattern when writing client code and is also used in other recipes.
    In our case, we create a `Get` and `Set` function that stores and retrieves a
    value by a key. We also expose `Close()` so that code that's using the client
    can defer `close()` and clean up our connection at the end.
  prefs: []
  type: TYPE_NORMAL
