- en: Building a Home Security Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry
    Pi Web Server*, we were introduced to the web framework CherryPy. Using CherryPy,
    we are able to turn our Raspberry Pi into a web server. In [Chapter 8](049458f1-d6ac-433a-93ab-f55501ff9523.xhtml),
    *Reading Raspberry Pi GPIO Sensor Data Using Python*, we learned how to read sensory
    data from the GPIO.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take the lessons that we learned from the previous
    two and create a home security dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our dashboard using CherryPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying sensory data on our dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge required to complete this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reader will need a working knowledge of the Python programming language
    to complete this chapter. A basic understanding of HTML, including CSS, is also
    required.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will build two different home security dashboards in this chapter. The first
    one will involve the use of a temperature and humidity sensor, and the next one
    will involve an active buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: This project should take a couple of hours to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DHT11 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A latching push-button, switch, or key switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PIR sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An active buzzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Raspberry Pi camera module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our dashboard using CherryPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create our home security dashboard, we will modify the code we wrote in [Chapter
    7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry Pi Web
    Server*. These modifications include adding sensory data from the GPIO—something
    we became very good at by the end of [Chapter 8](049458f1-d6ac-433a-93ab-f55501ff9523.xhtml),
    *Reading Raspberry Pi GPIO Sensor Data Using Python*.
  prefs: []
  type: TYPE_NORMAL
- en: Two of the inputs, the temperature and humidity sensor and the Pi camera, will
    require additional steps so that we can integrate them into our dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Using the DHT11 to find temperature and humidity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DHT11 temperature and humidity sensor is a low-cost hobbyist-grade sensor,
    capable of providing basic measurements. The DHT11 comes in two different versions,
    the four-pin model and the three-pin model.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the three-pin model for our project (see the following picture):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/05c744f6-b954-47ce-9212-2af4eecdfbac.png)'
  prefs: []
  type: TYPE_IMG
- en: The library we will be using to read DHT11 data, the `Adafruit DHT` library,
    does not come pre-installed on Raspbian (as of the time of writing). To install
    it, we will clone the library's GitHub project and build it from the source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a Terminal window, and type the following command to use `git` and
    download the source code (at the time of writing, `git` came pre-installed with
    Raspbian):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the progress of the code downloading. Now, change directories
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You will be in the `source code` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the progress displayed in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d072cdb7-4d9b-434e-a8ff-140ffe801ade.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you do not receive any errors, the `Adafruit DHT` library should now be
    installed on your Raspberry Pi. To verify this, open up Thonny and check the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f7b5c282-0a2d-4cbb-88a3-08fd18a698b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s wire up the circuit. Connect the DHT11 sensor to the Raspberry
    Pi as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: GND from DHT11 to GND on the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VCC on DHT11 to 5V DC on the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal on the DHT11 to GPIO pin 19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See the following Fritzing diagram for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6caf4ad6-d61c-44e0-8d83-812dadc76f80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the DHT11 is wired up, it is time to write some code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `dht-test.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e261501e-b9b0-4a45-a941-c1d50a855082.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at the code. We will start by importing the `Adafruit_DHT`
    library. We then create a new `DHT11` object, and call it `dht_sensor`. The `humidity`
    and `temperature` are set from the `read_retry` method on the `Adafruit_DHT` class.
  prefs: []
  type: TYPE_NORMAL
- en: We then print out the values of `humidity` and `temperature` to the shell.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Pi camera to take a photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](c4822610-2d5b-4b3a-8b29-5789ae0e7665.xhtml), *Using the GPIO
    to Connect to the Outside World*, we tried out the special Raspberry Pi camera
    module and wrote code to turn on a camera preview. It's time to put the camera
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install a Raspberry Pi camera module onto the Raspberry Pi through the CSI
    camera port (be sure to enable the camera in the Raspberry Pi Configuration screen,
    if it''s not already enabled). Let''s write some code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `pi-camera-test.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This program imports `PiCamera` and sleeps before creating a new `PiCamera`
    object called `pi_cam`. The `start_preview` method shows us what the camera sees
    in a full screen.
  prefs: []
  type: TYPE_NORMAL
- en: The capture method creates a new image file called `myimage.png`, and stores
    it in the default directory `/home/pi`.
  prefs: []
  type: TYPE_NORMAL
- en: We have `5` seconds to position our camera before a photo is taken.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a picture of my work area, taken with the Raspberry Pi camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/501926f5-b41a-4fb4-bb94-da115688f2e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating our dashboard using CherryPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry
    Pi Web Server*, we created a weather dashboard using the Bootstrap framework with
    the `WeatherDashboardHTML.py` file. We will revisit that code and modify it for
    our home security dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our home security dashboard, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `security-dashboard.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not run the code yet, as we still have to create the `SecurityData` class.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we've made a few changes to `WeatherDashboardHTML.py` in order
    to create `security-dashboard.py`. Before we run the code, let's point out a few
    of the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most obvious change is the use of the `SecurityData` class. As you can
    imagine, this class will be used to obtain data for our dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the following line to automatically refresh our page every `30` seconds
    (we did not automatically refresh our weather dashboard, as weather data does
    not change often):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For our home security dashboard, we use a bit of CSS magic to represent a blinking
    LED. This is accomplished by the adding the `led.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For the data fields, we will access methods from our `SecurityData` object.
    We will go into more detail on these methods in the upcoming section. For our
    main section, we will create a dictionary called `conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We use the `conf` dictionary to pass configuration data to the `cherrypy quickstart` method.
    This configuration data allows us to use the static files `led.css`, `intruder.png`,
    `all-clear.png`, and `not-armed.png` with our CherryPy server.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS file `led.css` was mentioned previously. The other three files are self-described
    images that are used in our dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use static files or directories with CherryPy, you must create and
    then pass in configuration information. An absolute path (as opposed to a relative
    path) must be part of the configuration information.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration information states that the CSS and image files are located
    in the directories named `styles` and `images`, respectively. These directories
    are both located in the `/home/pi` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the files in the `images` directory (be sure
    to place your files in the correct directories):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/54f70c24-38f3-45dd-9eee-7db79364230f.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying sensory data on our dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To provide our dashboard data, we will create a new Python file called `SecurityData.py`
    where we will store the `SecurityData` class. Before we do that, let's build our
    circuit.
  prefs: []
  type: TYPE_NORMAL
- en: Home security dashboard with a temperature sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will build our first version of the home security dashboard with a DHT11
    temperature and humidity sensor, a PIR sensor, and a latching button (or key switch).
    The following is the Fritzing diagram for our home security dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/56fe1cf8-ea5b-4089-9019-42d61ca7b0b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The circuit connects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: GND from DHT11 to GND
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VCC on DHT11 to 5V DC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal on the DHT11 to GPIO pin 19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GND from PIR sensor to GND
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VCC on PIR sensor to 5V DC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal on PIR sensor to GPIO pin4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One end of the latching button to GPIO pin 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other end of the latching button to GND
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pi camera module to CSI port (not shown)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Following is a photo of our circuit. One thing to note is the separate breadboard
    for our DHT11 sensor (easier to fit on a micro breadboard), as well as the key
    switch in place of a latching button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/04677e64-df43-436f-a745-76726f0485fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now it''s time to write the code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `SecurityData.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should get an output to the shell indicating the `temperature` and `humidity`
    level in the room, an `on` or `off` indicating the position of the switch, and
    the current time. Try turning the switch on and off to see if the value changes
    in the output.
  prefs: []
  type: TYPE_NORMAL
- en: Before we run the dashboard code (`security-dashboard.py`), let's review the
    `SecurityData` class. As we can see, the first part of the code is standard boilerplate
    code that we have already become familiar with. The `getRoomConditions` and `getDetectedMessage` methods
    are either self-explanatory or something we have already covered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `getArmedStatus` method does a little trick to keep our code simple and
    compact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can see that `getArmedStatus` returns either `on` or `off`, not `True` or
    `False` as most methods with a binary return do. We do this for the armed section
    of our dashboard code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML-generated code from the `index` method of the `SecurityDashboard`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `getArmedStatus` method is called during the construction
    of the a div tag in place of the CSS class name. The words `on` and `off` refer
    to CSS classes in our `led.css` file. When `on` is returned, we get a blinking
    red LED-type graphic. When `off` is returned, we get a black dot.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the position of the latching switch (or key switch) determines whether
    or not the div tag has a CSS class name of `on` or a CSS class name of `off` through
    the `getArmedStatus` method of the `SecurityData` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our code gets really interesting with the `getSecurityImage` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Our first conditional statement checks to see whether the circuit is armed (switch
    is in the `on` position). If it's not armed, then all that we need to do is set
    the detected message to nothing, and return a reference to the `not-armed.png`
    file (`/not-armed.png` was defined in the configuration information that we set
    up in the `security-dashboard.py` file).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the code in the `SecurityDashboard` class (`security-dashboard.py`
    file), we can see that the `getSecurityImage` method is called near the bottom
    of the generated HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If the switch in our circuit is not `on`, we will get the following in our
    dashboard footer with no description after it (blank `detected_message` value):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0a3c09bd-7a1f-4de6-b4c2-b55576a6eb85.png)'
  prefs: []
  type: TYPE_IMG
- en: The second conditional statement in our code is reached when the switch is `on` and
    motion has been detected. In this case, we set the resolution of our Pi camera
    and then take a photo.
  prefs: []
  type: TYPE_NORMAL
- en: We probably could have set the resolution of the Pi camera during the instantiation
    of the class, and this would probably have made more sense. However, putting this
    line here makes it easier to adjust the resolution prior to completing the code,
    as the line exists in the method we are focusing on.
  prefs: []
  type: TYPE_NORMAL
- en: We call the file `intruder.png` and store it in the location where the configuration
    code in the `security-dashboard.py` file can find it.
  prefs: []
  type: TYPE_NORMAL
- en: We also create a `detected_message` value based on the current time. This message
    will provide a timestamp to the image we acquire from the Pi camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final `else:` statement is where we return `/all-clear.png`. By the time
    our code has reached this point, we know that the switch is `on` and there hasn''t
    been any motion detected. The image we will see at the footer of our dashboard
    will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/681072ff-ecb3-46a7-8081-eaf54ec7bddd.png)'
  prefs: []
  type: TYPE_IMG
- en: As with the `NOT ARMED` message, there won't be a description after `ALL CLEAR`.
    We will only see this graphic when the switch is `on` and the PIR sensor did not
    pick up any motion (`motion_detected` is `false`).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's run the dashboard code. If you haven't done so already, stop the
    `SecurityData` program by clicking on the red button. Click on the tab for the
    `security-dashboard.py` file, and click Run. Wait a few seconds in order to let
    CherryPy get running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a web browser, and navigate to the following address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With the switch in the `off` position, you should see the following dashboard
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2747d648-0f9a-443a-b1c1-6b41b37f7b57.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the LED under the Armed section is black, and we get a `NOT ARMED`
    message in the footer. We can also see that `temperature` and `humidity` are displayed,
    even though the system is not armed.
  prefs: []
  type: TYPE_NORMAL
- en: The Last Check box shows us when the code last checked the status of the switch.
    If you wait 30 seconds, you should see the page refresh with the same information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, turn on the switch, and stand back so that the PIR sensor does not detect
    you. You should see a screen similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/59607798-8731-417c-a215-12ee661d22f3.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that the LED in the Armed section now turns to a flashing red,
    the `temperature` and `humidity` readings are either the same or slightly different,
    the Last Check has been updated to the current time, and the `ALL CLEAR` message
    appears in the footer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see if we can capture an intruder. Point the Pi camera to a doorway,
    and wait for the PIR sensor to trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d3e9d7b6-cdec-4b3d-8562-6f73a6ccaf28.png)'
  prefs: []
  type: TYPE_IMG
- en: It appears that we have caught our intruder!
  prefs: []
  type: TYPE_NORMAL
- en: Home security dashboard with quick response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed that it takes a really long time for our page to refresh.
    This is due to the 30-second refresh time, of course, as well as the long time
    it takes for the DHT11 to read a value.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change our code to make it quicker, and give it a buzzer to scare away
    an intruders.
  prefs: []
  type: TYPE_NORMAL
- en: Replace the DHT11 with a buzzer connected to GPIO pin 17 (we shouldn't need
    a Fritzing diagram for this simple change).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating the `SecurityDataQuick` data class:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `SecurityDataQuick.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our shell, we should see the values of the switch and current time. Stop
    the program by clicking on the red button.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, there have been a few changes. One change we did not make was
    changing the class name. Keeping it as `SecurityData` means fewer changes for
    our dashboard code later on.
  prefs: []
  type: TYPE_NORMAL
- en: We added the library for the `GPIO Zero` buzzer, and have removed any code relating
    to the DHT11 sensor. We have also created a new method called `sound_buzzer`,
    which we will call in the event that an intruder is detected.
  prefs: []
  type: TYPE_NORMAL
- en: A new variable called `alarm_status` has been added, with a corresponding `getAlarmStatus` method.
    We have moved the core logic of our class to this method (away from `getSecurityImage`),
    as it is here where we check on the status of our switch and PIR sensor. The variable,
    `alarm_status`, is used elsewhere to determine if a photo is to be taken. We also
    sound the alarm in this method if an intruder is detected.
  prefs: []
  type: TYPE_NORMAL
- en: As a result of adding the new method, we change `getSecurityImage`. By using
    `alarm_status` in the `getSecurityImage` method, we do not need to check the status
    of the sensors. We may now use `getSecurityImage` for its intended use—taking
    a photo if an intruder has been detected.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s now time to change the dashboard code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `SecurityDataQuick.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to your web browser and refresh the dashboard page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our dashboard should now match the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/57ba904c-a2b4-411b-bff3-8947fa32c3a3.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](assets/3990c950-4f8d-47fd-a2e8-f7c7526f3164.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](assets/01356c4e-7034-4ecf-8ad8-52a1258fc0dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Our dashboard should refresh every two seconds instead of 30, and a buzzer should
    sound when motion is detected in armed mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the code. The changes to our dashboard are pretty self-explanatory.
    Of note, however, is the change to the middle box on our dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We replaced room `temperature` and `humidity` with the status of the switch
    and PIR sensor through the `getAlarmStatus` method. With this change, we are able
    to use the `getAlarmStatus` method as our `initialization` method where we set
    the status of the `SecurityData` class variable `alarm_status`.
  prefs: []
  type: TYPE_NORMAL
- en: If we really wanted to be sticklers about it, we could change our code so that
    we initialize the `SecurityData` class with the values of the switch and PIR sensor.
    As it stands, `SecurityData` is more of a utility type class where certain methods
    must be called before others. We'll let it slide for now.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, building a security application with the Raspberry Pi is pretty
    easy. Although we our viewing our dashboard and hosting our sensors on the same
    Raspberry Pi, it is not too difficult to set up the Raspberry Pi to serve up the
    dashboard to other computers in your network (or even the internet). In [Chapter
    10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to Web Services*,
    we will take our interaction with
  prefs: []
  type: TYPE_NORMAL
- en: sensory data a step further and publish it to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True or false? The DHT11 sensor is an expensive and highly accurate sensor for
    temperature and humidity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The DHT11 sensor can detect UV rays from the sun.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Code needed to run the DHT11 comes pre-installed with Raspbian.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you set the resolution of the Pi camera module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you set up CherryPy so that it can access local static files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you set up an automatic refresh for a web page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Through the use of CSS, we are able to simulate a flashing LED.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `SecurityData` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who or what did we find as our intruder?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we wanted to be sticklers, how would we change our `SecurityData` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The refresh method used in our code is effective, but a little clunky. Our dashboards
    may be improved through the use of AJAX code, where the fields are updated but
    not the page. Please consult the CherryPy documentation for further information.
  prefs: []
  type: TYPE_NORMAL
