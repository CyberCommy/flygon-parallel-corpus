- en: Chapter 8. Interactive Leap Motion Apps with JavaFX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have come to the most exciting part of the book, where we will dive into
    the new touchless era of computer-human interaction through body language translated
    into commands to control surrounding objects and computers.
  prefs: []
  type: TYPE_NORMAL
- en: Every day we notice the rise of input interfaces that are less mouse-centric
    and more in favor of touchless input. *Gestures* are one of the ways humans can
    communicate with machines naturally these days.
  prefs: []
  type: TYPE_NORMAL
- en: For decades, motion controls have held a persistent place in our visions of
    the future. We've watched the super heroes, mad scientists, and space cowboys
    of popular media control digital experiences with just a wave of their hands.
  prefs: []
  type: TYPE_NORMAL
- en: '![Interactive Leap Motion Apps with JavaFX](img/B03998_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tom Cruise does his computing by gesturing
  prefs: []
  type: TYPE_NORMAL
- en: We've been captivated by these powerful, natural, and intuitive interactions—imagining
    what it would be like to have that power at our own fingertips. For example, *Star
    Trek's Holodeck* and *Minority Report's pre-crime visioning computers*. Do you
    remember how Tom Cruise does his computing in the latter using gestures on a transparent
    display? All exude a sense of power and mastery, along with paradoxical perceptions
    of simplicity, ease, intuitiveness, and humanity. Simply, these experiences feel
    magical.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several devices on the market that actually allow us to interact
    with computers using just some parts of our body: many games for the **Xbox**,
    the Microsoft game console, use the **Kinect** controller to recognize the user''s
    body movements. The myoelectric armband detects movements in your muscles and
    translates them into gestures so that you can interact with your computer. Leap
    Motion controller recognizes users'' hands and fingers and translate the movements
    and gestures to the computer.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about gesture recognition using the **Leap Motion**
    device, an awesome device that allows a touchless approach to developing enhanced
    JavaFX applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the topics that we will discuss in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Leap controller, how it works, and where to get one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting and installing the SDK, configuring its driver, and verifying whether
    it works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics of Leap-based application building blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing amazing touchless JavaFX applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Leap Motion controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a very tiny device with 13 mm height, 30 mm width, 76 mm depth, and
    a weight of 45 grams (*final dimensions: 0.5" x 1.2" x 3"*). With the Leap Motion
    software running on your computer, just plug the controller into the USB on your
    Mac or PC and you are ready to go (without any external power source).'
  prefs: []
  type: TYPE_NORMAL
- en: Here it works with what it finds above it, capturing the individual movements
    of your hands and fingers in almost real time (200-300 fps) and translating the
    gestures into different actions on the application running on your computer. Launched
    in 2013, this $79.99 device is called the Leap Motion controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Leap Motion controller](img/B03998_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Leap Motion size compared to human hand
  prefs: []
  type: TYPE_NORMAL
- en: From the developer's point of view, this device allows designing applications
    that can be controlled simply by gestures and movements of the user's *hands*
    and *fingers*, just like in *Minority Report!*
  prefs: []
  type: TYPE_NORMAL
- en: It senses how you naturally move your hands and lets you use your computer in
    a whole new way—point, wave, reach, grab, or pick something up and move it. You
    can do things you never dreamed possible.
  prefs: []
  type: TYPE_NORMAL
- en: Check your hand; just one hand has 29 bones, 29 joints, 123 ligaments, 48 nerves,
    and 30 arteries. That's sophisticated and complicated. The controller has come
    really close to figuring it all out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, when you think about it, the magic of Leap Motion comes in the software,
    but the company works hard on the hardware to deliver their technology. It has
    been in development since they started in 2011\. The evolution is shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Leap Motion controller](img/B03998_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The evolution of the Leap Motion controller
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Leap Motion's technology, which relies on special receiver hardware and custom
    software, can track movements to 1/100th millimeter with no visible lag time.
    The Leap Motion controller has a *150-degree* field of view, and it tracks individual
    hands and all 10 fingers at 290 fps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main hardware of the device consists of three infrared LEDs combined with
    two monochromatic infrared (IR) cameras. While the LEDs generate a 3D pattern
    of dots of IR light, the cameras scan the reflected data at nearly 290 fps. Everything
    within a radius of 50 cm will be scanned and processed, with a resolution of 0.01
    mm. The main components of the device are shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/B03998_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Leap Motion Controller Hardware layers and internal components
  prefs: []
  type: TYPE_NORMAL
- en: This is the future of computer interaction Leap Motion's incredibly fast and
    accurate natural user interface, which sends all movement data to the computer
    in a very precise way. The data will be analyzed in the host computer by the Leap
    Motion proprietary software detection algorithm, and any Leap-enabled application
    can be interfaced directly without using any other physical input device.
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mapping the coordinate values received from the controller to the appropriate
    JavaFX coordinate system is a fundamental task when using the Leap Motion controller
    in your application.
  prefs: []
  type: TYPE_NORMAL
- en: From the previous discussion, you can observe that the device can detect hands,
    fingers, and reflective tools within a super-wide 150-degree field of view and
    a z-axis for depth. This means you can move your hands in 3D, just like you do
    in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: 'The device coordinate system uses a right-handed Cartesian coordinate system,
    with the origin at the center of the device. This is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The coordinate system](img/B03998_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Coordinate system centered in the device
  prefs: []
  type: TYPE_NORMAL
- en: Every time the device scans and analyzes your hand movement into data, a Frame
    object containing a list of all the processed and tracked data in terms of instances
    (hands, fingers, and tools) is generated, including a set of motion gestures found
    in the frame (*swipe, tap, or circle*).
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, the y-axis positive direction is the opposite of the
    downward orientation in most computer graphics systems, including JavaFX.
  prefs: []
  type: TYPE_NORMAL
- en: However, the fact that the data is referred to the device position and not to
    the screen, as we are accustomed to with mouse and touch events, changes dramatically
    the way we need to think.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the API provides several useful methods to find where our hands
    and fingers are pointing at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have been inspired by this amazing technology, we need to engage and start
    developing something with the device. So, we need to get one first.
  prefs: []
  type: TYPE_NORMAL
- en: The device is available from many vendors such as Amazon, Best buy, and others.
    However, you can also buy it from the Leap Motion store ([http://store-world.leapmotion.com](http://store-world.leapmotion.com)).
  prefs: []
  type: TYPE_NORMAL
- en: I bought my device at the end of 2014, and it is possible that you can find
    special discounts in some of the stores now.
  prefs: []
  type: TYPE_NORMAL
- en: Package contents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you buy the Leap Motion package, it should contain at least the items
    shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Package contents](img/B03998_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Leap Motion package contents
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the package includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Leap Motion controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two custom-length USB 2.0 cables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Welcome card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important information guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with the Leap SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the hardware, we need to install the software and start development.
    This is a very easy task; just point your mouse to the address bar of your favorite
    browser, type the URL [https://developer.leapmotion.com/downloads](https://developer.leapmotion.com/downloads),
    and click on the *Enter* key.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the latest version is SDK 2.2.6.29154\. Click on your
    operating system icon to start downloading the supported version. Alternatively,
    just click on the green button with the label **Download SDK 2.2.6.29154 for OSX**
    (for Mac OS X). This will detect your PC/laptop OS and allow you to download the
    suitable SDK for your OS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the controller driver and software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The installation process and getting your device ready for interaction require
    a few simple steps. After downloading the `zip` content, extract it, install the
    software installer, and everything should be in place:'
  prefs: []
  type: TYPE_NORMAL
- en: Download, extract, and run the software installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installation, connect your Leap Motion controller and open the Visualizer,
    as shown in the following screenshot:![Installing the controller driver and software](img/B03998_08_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the Visualizer
  prefs: []
  type: TYPE_NORMAL
- en: The SDK consists of a `LeapJava.jar` libraries and a bunch of native libraries
    for controller integration. One easy way to integrate `LeapJava.jar` on your system
    is by adding the JAR to `<JAVA_HOME>/jre/lib/ext` on Linux or Windows (or `/Library/Java/Extensions
    on the Mac`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the native libraries (`LeapJava.dll`, `Leap.dll`, and `Leapd.dll` for Windows;
    `libLeapJava.dylib` and `libLeap.dylib` for the Mac; and `libLeapJava.so` and
    `libLeap.so` for Linux) to the `<JAVA_HOME>/jre/bin` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, you can just add the JAR to every project as a dependency and
    load the native libraries as a VM argument `-Djava.library.path=<native library
    path>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SDK also includes many examples based on supported languages, including
    the `HelloWorld.java` example, which is a very good base from which to start understanding
    how to integrate your controller with your Java application.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying whether it works
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If everything is okay, a small Leap Motion icon should appear on the taskbar
    notification area (Windows) or menu bar (Mac), and it should be green as shown
    in the previous screenshot. The LED indicator on the device should be lit with
    a green light and *facing you for the correct orientation of the device*.
  prefs: []
  type: TYPE_NORMAL
- en: If you are able to interact and see the visualization of your fingers and hands
    when the visualizer opens, as shown in the following screenshot, then it is time
    to start development.
  prefs: []
  type: TYPE_NORMAL
- en: '![Verifying whether it works](img/B03998_08_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Leap Motion Diagnostic Visualizer application
  prefs: []
  type: TYPE_NORMAL
- en: Supported languages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we deep dive into our application, I would like to just mention that
    the Leap Motion SDK supports many languages, including Java and others such as
    JavaScript for Web, C#, C++, Python, Unity, Objective-C, and the Unreal gaming
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: The Leap JavaFX application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like you, I can't wait to start the development process, and now you will learn
    how to interact touchlessly with a JavaFX 8 3D-based application connected to
    a Leap motion device.
  prefs: []
  type: TYPE_NORMAL
- en: Given that the 3D API has not so far been covered in this book, this is good
    opportunity to briefly describe the 3D API and bring Leap Motion v2 skeletal modeling
    (hand in 3D) with some 3D interaction into our JavaFX application.
  prefs: []
  type: TYPE_NORMAL
- en: The Leap Motion API v2.0 introduces a new skeletal tracking model that provides
    additional information about hands and fingers, predicts the positions of fingers
    and hands that are not clearly in view, and also improves overall tracking data.
    For more information on the API, visit [https://developer.leapmotion.com/documentation/java/devguide/Intro_Skeleton_API.html?proglang=java](https://developer.leapmotion.com/documentation/java/devguide/Intro_Skeleton_API.html?proglang=java).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to build and show how the new skeletal model from Leap Motion v2
    can be easily integrated into a JavaFX 3D scene. We will use the predefined 3D
    shapes API provided by JavaFX to quickly create 3D objects out of the box. These
    shapes include boxes, cylinders, and spheres that we will use in our application.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaFX 3D API at a glance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3D means *three-dimensional* or something that has *width*, *height*, and *depth*
    (or *length*). Our physical environment is three-dimensional and we move around
    in 3D every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JavaFX 3D Graphics library includes Shape3D API, and there are two types
    of 3D shapes in JavaFX:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Predefined shapes**: These are provided to make it easier for you to quickly
    create 3D objects out-of-the-box. These shapes include boxes, cylinders, and spheres.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User-defined shapes**: The JavaFX Mesh class hierarchy contains the `TriangleMesh`
    subclass. The Triangle mesh is the most typical kind of mesh used in 3D layouts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our application, we are going to use the predefined shapes. For more information
    about the JavaFX 3D API and examples, please visit [http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm](http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm).
  prefs: []
  type: TYPE_NORMAL
- en: More learning resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the rich resources that will help you in the development and integration
    process between the Leap Motion controller and your normal Java application is
    the `HelloWorld.java` example bundled with the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Another resource that discusses integration with Java is the *Getting Started
    with Java Development* section from Leap motion documentation, and it is available
    at [https://developer.leapmotion.com/documentation/java/devguide/Leap_Guides.html](https://developer.leapmotion.com/documentation/java/devguide/Leap_Guides.html).
  prefs: []
  type: TYPE_NORMAL
- en: The basic application structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After taking a look inside the `HelloWorld.java` example and the documentation
    example, you will notice the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a `Controller` object, allowing the connection between the Leap device
    and the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need a `Listener` subclass to handle events from the controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gesture tracking is enabled in the `onConnect()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main method in this class is `onFrame()`, a `callback` method dispatched
    when a new `Frame` object with motion tracking data is available. This object
    contains list of hands, fingers, or tools and several vectors with their position,
    orientation, and velocity of movement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If gestures are enabled, we'll also get a list of the gestures found, based
    on the analysis of the last frames. In addition, you will know the status of the
    gesture whether it has just begun, is in progress, or has ended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JavaFX 8 3D application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The application we are going to discuss here is a complex JavaFX 8 3D application
    that will help you understand the Leap-based application development structure,
    interact with the device to recognize *hand positions*, and interact with *gestures*
    to model our hand in a 3D environment.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more resources, including more advanced concepts for developing
    Leap-based applications with JavaFX, in the examples section later on.
  prefs: []
  type: TYPE_NORMAL
- en: In this application, we are going to detect bones, arms, and joints (position
    and directions) in the form of cylinder and sphere shapes to model our hands in
    3D into our JavaFX application `SubScene`. Then, we will detect their position
    to model our real hand movement above the Leap Motion device.
  prefs: []
  type: TYPE_NORMAL
- en: We will also add the raw `image` so that you can see the model and your real
    hand in the application's background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application consists of three classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LeapListener.java`: This class is the listener that interacts with the Leap
    Motion controller thread to transfer all the analyzed data (arms, bones, fingers,
    and joints) to the JavaFX application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LeapJavaFX.java`: This class is a JavaFX application thread that will interact
    with `LeapListener.java` in order to create 3D shapes (on every frame), without
    keeping track of previous ones. Thanks to the power of Observable JavaFX bean
    properties, which allows data transferred from the Leap thread to be rendered
    into the JavaFX thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pair.java`: This is a small pair convenience class to store the two bones
    linked in every joint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's start and see how we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have to enable images on the Leap Motion control panel by checking the **Allow
    Images** option under the **General** tab, and make sure you disable the **Robust
    Mode** option for higher image under the **Tracking** tab.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we will explain the main bridge to our application, which is the Leap
    event listener `LeapListener.java`.
  prefs: []
  type: TYPE_NORMAL
- en: The main concern when developing a JavaFX application is how to mix the JavaFX
    thread with other non-JavaFX threads, which in our case is the Leap Motion Event
    `Listener` subclass that handles events at a very high rate.
  prefs: []
  type: TYPE_NORMAL
- en: In order to bring these events to a JavaFX thread, we will use the `BooleanProperty`
    objects in the `LeapListener.java` class. Since we will be listening to changes
    only in `doneList` object, we don't need the lists to be observable too, because
    they will be triggering events with any change (adding one bone).
  prefs: []
  type: TYPE_NORMAL
- en: 'That is why they are plain lists and we use only one Boolean observable property
    to set it to true after creating all the lists in every Leap `Frame` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To get the raw images we have to set this policy `onInit()` and, due to privacy
    reasons, the user must also enable the feature in the Leap Motion control panel
    for any application to get the raw camera images.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: (*As you know, if you want to process gestures, here is where you enable this
    feature, so maybe you can keep them commented.*)
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead with creating the Frame method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For every frame, reset `doneList`, process the data, and finally set it to `true`
    if we have bones or arms (if no hand is over the Leap, the frames are still being
    processed). Expose the property to be listened on the JavaFX app.
  prefs: []
  type: TYPE_NORMAL
- en: Now processing the frame object data. First, images (this could be done at the
    end). Clear the list on every frame and then retrieve the images (from the left
    and right cameras). The Leap documentation is really helpful if you want to understand
    how this works. Visit [https://developer.leapmotion.com/documentation/java/devguide/Leap_Images.html](https://developer.leapmotion.com/documentation/java/devguide/Leap_Images.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, this code is part of the first example, adding `PixelWriter` to generate
    a JavaFX image. Since Leap gives bright pixels, I''ve negated them *(1- (r|g|b))*
    to get a negative image, more visible on the hands. Also, I flipped the image
    from left to right as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then clear the bone, arms, and joint lists, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the list of bones; for every finger found, iterate over the types of bones
    of this finger (up to 5) to avoid the metacarpals of the ring and middle fingers.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will iterate over the hands list to get each hand arm and add it to
    the arms list as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now getting the fingers joints. It''s a little bit complex to explain in detail
    how to get every joint. Basically, I find the fingers of every hand, identifying
    the four fingers other than the thumb. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once I have identified the fingers, I just define the joints between every
    pair of them (the first three joints) and a joint for the wrist (the last one).
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the preceding code returns a fresh copy of the bones collection to
    avoid concurrent exceptions iterating this list. Note that the Leap frame rate
    is really high. In a powerful computer, it is nearly 5 - 10 ms. The code is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is faster than a JavaFX pulse (60 fps, or approximately 16 ms), so lists
    can be changed while the bones are rendered. With this *clone* method, we avoid
    any concurrent problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Listener method for the LeapJavaFX application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the Leap listener class and controller, then add the listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a perspective camera for the 3D `subScene`, translate to the middle,
    bottom of the screen, and to the user. Also, add some punctual light. The code
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `ImageView` for the Leap image, which is 640 x 240 with robust mode
    off (uncheck the option in the Leap control panel), so we scale it up on Y to
    get a more visible image. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create a group with the camera and an inner group with light as the root for
    the `subScene`. Note that the depth buffer and antialiasing are enabled for better
    rendering. The camera is also added to the `subScene`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main root will be a `StackPane`: on the back, the `ImageView`, on the front,
    the transparent `SubScene`. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the material for fingers and arms, with a diffuse color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We listen to changes in `doneList`. Whenever it is `true` (after every frame!),
    we process the 3D hand(s) rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'First, get the fresh copy of the bones, arms, and joints collection. Then,
    if there are valid images in the JavaFX thread, we set the image on the `ImageView`
    and remove all the root children except for the light (so we are recreating the
    hand bones all over again):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Bones Iterate over the list and add the bones to the scene. If the collection
    changes, there won't be any concurrent exceptions when we iterate over its copy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we create a cylinder for every bone. This involves some calculations. If
    you want to go into detail, take each bone as a vector with a position and a direction.
    Create a vertical cylinder whose radius is half of the width of the bone and whose
    height is the same as its length. Then, assign it the material. The code is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we get the cross product of the real bone direction with the vertical
    one; this gives us the perpendicular vector of rotation. (Signs are due to changes
    in the coordinate systems). The `ang` object is the angle between those two vectors.
    A transformation can be applied with translation to the center of the bone and
    a rotation of `ang` around the given vector. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now spheres at the beginning and at the end of every bone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the joints; we use cylinders again. The distance between the two elements
    connected gives the length and we get the position and direction to generate and
    transform the cylinder. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we take the length from the distance between elbow and wrist. All
    of this is in the API at: [https://developer.leapmotion.com/documentation/java/api/Leap.Arm.html](https://developer.leapmotion.com/documentation/java/api/Leap.Arm.html).
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Running the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Congratulations! Now connect your Leap controller (the leap icon should be
    green) and run your application. If everything is okay, you should initially see
    an empty application scene, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/B03998_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Initial run of the Leap JavaFX application
  prefs: []
  type: TYPE_NORMAL
- en: 'Move and wave your hand around and the skeletal modeling of your hand should
    appear with your real hands in the background, responding to your real movements
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/B03998_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Interaction of Leap JavaFX application and Leap Controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Try a different arm or hand pattern and position; you should have this replicated
    in your JavaFX application scene, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/B03998_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Interaction of Leap JavaFX application and Leap Controller, with a different
    hand pattern
  prefs: []
  type: TYPE_NORMAL
- en: More examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more examples of using JavaFX with the Leap Motion device, please refer
    to online resources such as [http://www.parleys.com/share.html#play/525467d6e4b0a43ac12124ad](http://www.parleys.com/share.html#play/525467d6e4b0a43ac12124ad)
    or [http://jperedadnr.blogspot.com.es/2013/06/leap-motion-controller-and-javafx-new.html](http://jperedadnr.blogspot.com.es/2013/06/leap-motion-controller-and-javafx-new.html).
    For interaction with other programming languages, please visit [https://developer.leapmotion.com/gallery](https://developer.leapmotion.com/gallery).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the impressive Leap Motion device, and the
    really nice combination effects that result from using it to enhance JavaFX applications.
  prefs: []
  type: TYPE_NORMAL
- en: You began by learning about the device and how it works. Next, we discussed
    its SDK for Java and explored a simple application where you learned about listening
    and processing the data from the Leap device in one thread, while triggering events
    in the JavaFX thread to deal with them in the scene graph.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I'll provide advanced tools and resources intended for
    true JavaFX gurus.
  prefs: []
  type: TYPE_NORMAL
