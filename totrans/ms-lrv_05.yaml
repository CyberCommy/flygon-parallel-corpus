- en: Chapter 5. Using the Form Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to use Laravel''s form builder. The form
    builder will be demonstrated to facilitate the building of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Form (open and close)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input (text, HTML5 password, HTML5 e-mail, and so on.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anchor tags (href links)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we'll see an example of how to use the form builder to create the month,
    date, and year selection elements for the accommodations reservation software
    form, and how to create a macro to reduce the code duplication.
  prefs: []
  type: TYPE_NORMAL
- en: History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The form builder package in Laravel 4 is called HTML. This was used to help
    you create HTML, particularly developers who also have to perform web designer
    duties but prefer to use Laravel facades and helper methods. For example, the
    following Laravel facade `select()` method, where the options for the language,
    British and American English in this example, are passed as an array parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be used as an alternative to the standard HTML, which requires much
    more repetitious code, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since frameworks are constantly evolving, they need to adapt to fulfill the
    needs of most of their users. Also, whenever possible, they should continue to
    be more efficient. In some cases, this means rewriting or refactoring pieces of
    the framework, adding features, or even *removing* them.
  prefs: []
  type: TYPE_NORMAL
- en: 'As strange as it may seem, there are several valid reasons for removing the
    features. The following is a list of reasons for removing packages:'
  prefs: []
  type: TYPE_NORMAL
- en: To ease the burden and quantity of packages and features that framework core
    developers need to maintain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To reduce the number of packages that are downloaded and autoloaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To remove a feature that is not essential.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML package was removed from the core of Laravel 5 and is now an external
    package. In this case, any of the previous reasons could be cited for the reason
    that this package was removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML, which helps developers build forms, can be used if the frontend developer
    is also a backend or full-stack developer and prefers Laravel's way of doing things.
    In other situations, however, the web application HTML interface can be built
    using a JavaScript framework or a library, such as AngularJS or Backbone.js. In
    this case, the Laravel form package would not be necessary. Alternatively, as
    previously stated, Laravel can be used to create an application that is merely
    a RESTful API. In this case, including the HTML package in the framework core
    would not be necessary and thus remains auxiliary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this particular case, certain Laravel packages were removed to lighten up
    the overall experience and to move toward a more *component-based* approach, which
    is similar to that used in Symfony.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the HTML package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you desire to use the HTML package in Laravel 5, installing it is a simple
    process. A group of developers in the Laravel community formed a repository called
    the Laravel collective, where the packages that have been removed from Laravel
    are maintained. To install the HTML package, simple use the `composer` command
    to add the package to the application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `illuminate/HTML` package has been deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will install the HTML package and the `composer.json` will show you the
    package added to the `require` section as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: At this point, the package is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the `HTMLServiceProvider` to the list of providers in the
    `config/app.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, the `Form` and `Html` aliases need to be added to the `config/app.php`
    file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Building web pages with Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel's approach to building web content is flexible. As much or as little
    of Laravel can be used to create HTML. Laravel uses the `filename.blade.php` convention
    to state that the file should be parsed by the blade parser, which actually converts
    the file into plain PHP. The name blade was inspired by the .NET's razor templating
    engine, so this may be familiar to someone who has used it. Laravel 5 provides
    a working demonstration of a form in the `/resources/views/` directory. This view
    is shown when the `/home` route is requested and the user is not currently logged
    in. This form is obviously not created using the Laravel form methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The route is defined in the `routes` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: An explanation of how this route uses middleware to check how to perform the
    user authentication will be discussed in [Chapter 7](ch07.html "Chapter 7. Filtering
    Requests with Middleware"), *Filtering Requests with Middleware*.
  prefs: []
  type: TYPE_NORMAL
- en: The master template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the following `app` (or `master`) template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The Laravel 5 master template is a standard HTML5 template with the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the browser is older than Internet Explorer 9:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses the HTML5 Shim from the CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses the Respond.js JavaScript code from the CDN to retrofit media queries and
    CSS3 features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `@if (Auth::guest())`, if the user is not authenticated, the login form
    is displayed; otherwise, the logout option is displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter bootstrap 3.x is included in the CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The jQuery2.x is included in the CDN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any template that extends this template can override the content section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows you the login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An example page](graphics/B04559_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The source code for the login page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: From static HTML to static methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This login page begins with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It obviously uses the object-oriented paradigm to state that the `app.blade.php`
    template will be rendered. The following line overrides the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For this exercise, the form builder will be used instead of the static HTML.
  prefs: []
  type: TYPE_NORMAL
- en: The form tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will convert a static `form` tag to a `FormBuilder` method. The HTML is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The method facade that we will use is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `FormBuilder.php` class, the `$reserved` attribute is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The attributes that we need to pass to an array to the `open()` method are
    class, role, method, and action. Since method and action are reserved words, it
    is necessary to pass the parameters in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Laravel form facade method array element | HTML Form tag attribute |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| method | method |'
  prefs: []
  type: TYPE_TB
- en: '| url | action |'
  prefs: []
  type: TYPE_TB
- en: '| role | role |'
  prefs: []
  type: TYPE_TB
- en: '| class | class |'
  prefs: []
  type: TYPE_TB
- en: 'Thus, the method call looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `{!! !!}` tags are used to start and end parsing of the form builder methods.
    The form method, `POST`, is placed first in the list of attributes in the HTML
    form tag.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `action` attribute actually needs to be a `url`. If the `action` parameter
    is used, then it refers to the controller action. In this case, the `url` parameter
    produces the `action` attribute of the `form` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other attributes will be passed to the array and added to the list of attributes.
    The resultant HTML will be produced as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The CRSF token is automatically added, as the `form` method is `POST`.
  prefs: []
  type: TYPE_NORMAL
- en: The text input field
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To convert the input fields, a facade is used. The input field''s HTML is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Converting the preceding input field using a façade looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the text field becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The input fields have the same signature. Of course, this can be refactored
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The label tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `label` tags are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To convert the `label` tags (`E-Mail Address` and `Password`), we will first
    create an array to hold the attributes, and then pass this array to the labels,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the form label code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Checkbox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To convert the checkbox to a facade, we will convert this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is converted to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that the PHP parameters should be sent in single quotation marks if
    there are no variables or other special characters, such as line breaks, inside
    the string to parse, while the HTML produced will have double quotes.
  prefs: []
  type: TYPE_NORMAL
- en: The submit button
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lastly, the submit button will be converted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code after conversion is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the array parameter provides an easy way to provide any desired attributes,
    even those that are not among the list of standard HTML form elements.
  prefs: []
  type: TYPE_NORMAL
- en: The anchor tag with links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To convert the links, a helper method is used. Consider the following line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line of code after conversion becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `link_to_route()` method may be used to link to a route. For similar helper
    functions, visit [http://laravelcollective.com/docs/5.0/html](http://laravelcollective.com/docs/5.0/html).
  prefs: []
  type: TYPE_NORMAL
- en: Closing the form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To end the form, we'll convert the traditional HTML form tag `</form>` to a
    Laravel `{!! Form::close() !!}` form method.
  prefs: []
  type: TYPE_NORMAL
- en: The resultant form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By putting everything together, the page now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Our example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to create a form to reserve a room in our accommodation, we can
    easily call a route from our controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to create a new view that is located at `resources/views/auth/reserve.blade.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this view, we can create a form to reserve a room in an accommodation where
    the user can select the start date, which comprises of the start day of the month
    and year, and the end date, which also comprises of the start day of the month
    and year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our example](graphics/B04559_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The form would begin as before, with a POST to `reserve-room`. Then, the form
    label would be placed next to the select input fields. Finally, the day, the month,
    and the year select form elements would be created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Month select
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, in the `selectMonth` method, the first parameter is the name of the
    input attribute, while the second attribute is the default value. Here, the PHP
    date method is used to extract the numeric portion of the current month—March
    in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output, shown here formatted, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Date select
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A similar technique is applied for the selection of the date, but using the
    `selectRange` method, the range of the days in the month are passed to the method.
    Similarly, the PHP date function is used to send the current date to the method
    as the fourth parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the formatted output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The date that should be selected is 30, since today is March 30, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the months that do not have 31 days, usually a JavaScript method would be
    used to modify the number of days based on the month and/or the year.
  prefs: []
  type: TYPE_NORMAL
- en: Year select
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same technique that is used for the date range is applied for the selection
    of the year; once again, using the `selectRange` method. The range of the years
    is passed to the method. The PHP date function is used to send the current year
    to the method as the fourth parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the formatted output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Here, the current year that is selected is 2015.
  prefs: []
  type: TYPE_NORMAL
- en: Form macros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have the same code that generates our month, date, and year selection form
    block two times: once for the start date and once for the end date. To refactor
    the code, we can apply the DRY (don''t repeat yourself) principle and create a
    form macro. This will allow us to avoid calling the form element creation method
    twice, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the month, date, and year generation code is placed into a macro, which
    is inside the PHP tags, and it is necessary to add `echo` to print out the result.
    The `monthDayYear` name is given to this macro method. Calling our macro two times:
    once after each label; each time adding a different suffix via the `$suffix` variable.
    Now, our form code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The choice to include the HTML form generation package in Laravel 5 can ease
    the burden of having to create numerous HTML forms. This approach allows developers
    to use methods, create reusable macros, and use a familiar Laravel approach to
    build the frontend. Once the basic methods are learned, it is very easy to simply
    copy and paste the previously created form elements, and then change their element's
    name and/or the array that is sent to them.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the size of the project, this approach may or may not be the right
    choice. For a very small application, the difference in the amount of code that
    needs to be written is not very evident, although, as is the case with the `selectMonth`
    and `selectRange` methods, the amount of code necessary is drastic.
  prefs: []
  type: TYPE_NORMAL
- en: This technique, combined with the use of macros, makes it easy to reduce the
    occurrence of copy duplication. Also, one of the major problems with the frontend
    design is that the contents of the class of the various elements may need to change
    throughout the entire application. This would mean performing a large find and
    replace operation, where changes are required to be made to HTML, such as changing
    class attributes. By creating an array of attributes, including class, for similar
    elements, changes made to the entire form can be performed simply by modifying
    the array that those elements use.
  prefs: []
  type: TYPE_NORMAL
- en: In a larger project, however, where parts of forms may be repeated throughout
    the application, the wise use of macros can easily reduce the amount of code necessary
    to be written. Not only this, but macros can isolate the code inside from changes
    that would require more than one block of code to be changed throughout multiple
    files. In the example, where the month, date, and year is to be selected, it is
    possible that this could be used up to 20 times in a large application. Any changes
    made to the desired block of HTML can be simply done to the macro and the result
    would be reflected in all of the elements that use it.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the choice of whether or not to use this package will reside with
    the developer and the designer. Since a designer who wants to use an alternative
    frontend design tool may not prefer, nor be competent, to work with the methods
    in the package, he or she may want to not use it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, the history and the installation of the HTML Laravel composer
    package was outlined. The construction of the master template was explained and
    then the form components, such as the various form input types, were shown through
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the construction of a form for the room reservation, as used in the
    book's example software, was explained, as well as a "do not repeat yourself"
    form macro creation technique.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at a way to use annotations to reduce
    the time required to create routing for the application's controllers.
  prefs: []
  type: TYPE_NORMAL
