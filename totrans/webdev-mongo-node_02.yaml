- en: Getting Up and Running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the necessary steps to set up your development
    environment. These will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MongoDB on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying that everything is set up properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow these sections carefully, as we need the development environment to be
    up and running before we jump into the chapters where we dive into actual coding.
    For the remainder of this book, it's going to be assumed that you are using either
    a Mac with OS X, Linux, or Windows 7/Windows 8\. You will also need super user
    and/or administrator privileges on the computer, as you will be installing the
    Node and MongoDB server. The code and examples after this chapter will all be
    OS agnostic and should work in any environment, assuming you have taken the steps
    I outlined earlier to be prepared ahead of time.
  prefs: []
  type: TYPE_NORMAL
- en: You will need a proper text editor to write and edit the code. While any text
    editor you choose will serve this purpose, choosing a better text editor will
    hugely improve your productivity. Sublime Text 3 appears to be the most popular
    text editor, regardless of the platform, at this moment. It is a simple, lightweight
    editor with unlimited plugins made available by developers around the world. If
    you are on a Windows machine, then *Notepad++* is also a good candidate. Also,
    there are JavaScript-based open source editors such as Atom and Brackets, which
    are also worth a try.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you're going to need access to the command line. Linux and Mac have
    access to the command line via the terminal program. A great alternative on the
    Mac is iTerm2 ([http://iterm2.com](http://iterm2.com)). For Windows, the default
    command-line program works but isn't the best. A great alternative there is ConEmu
    ([http://conemu.codeplex.com](http://conemu.codeplex.com)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the remainder of this book, any time I reference a command line or command
    prompt, it will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Node.js installer can be easily obtained by visiting the official Node website
    and accessing the downloads section. Once there, be sure to download the correct
    version depending on your OS and CPU (32-bit or 64-bit). As an alternative, you
    can also use OS-specific package managers to install this. Depending on the OS
    you are using, just jump into the specific subsection to get more details on the
    steps to be followed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can jump into the Node.js download sections by following this link: [https://nodejs.org/en/download](https://nodejs.org/en/download).'
  prefs: []
  type: TYPE_NORMAL
- en: Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a universal installer available from the Node website specifically
    for OS X.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to follow these steps to install Node.js on a Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the download page of the Node.js official website as mentioned earlier
    and click on the Mac OS X installer, which is independent of the processor type
    (32 or 64-bit).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the download is complete, double-click on the `.pkg` file, which will launch
    the Node installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed through each step of the wizard, which should be fairly self-explanatory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, if you have any of the OS X package managers installed, then you don't
    need to manually download the installer.
  prefs: []
  type: TYPE_NORMAL
- en: You may install Node.js via the respective package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation using Homebrew:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Installation using Mac ports:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The installation of Node.js via either an installer or via the package managers
    will include npm alongside. So, we don't need to install it separately.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Node.js on Windows, we will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to determine your processor type, 32-bit or 64-bit. You can do this
    by executing the following command at the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Download the installer depending on the result of this command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the download is complete, double-click on the `.msi` file, which will launch
    the Node installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed through each step of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you get to the custom setup screen, you should notice that the installation
    wizard will install not only the Node.js runtime, but also the npm package manager,
    and configure a path variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So once the installation is done, Node and npm can be executed from any folder
    via the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, if you have any of the Windows package managers installed, then you don''t
    need to manually download the installer. You may install Node.js via the respective
    package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using chocolatey:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `scoop`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because there are so many different flavors and distributions of Linux available,
    installing Node isn't quite as straightforward. However, if you're running Linux
    to begin with, then you are more than aware of this and probably comfortable with
    a few extra steps.
  prefs: []
  type: TYPE_NORMAL
- en: Joyent has an excellent wiki on how to install Node on Linux using the many
    different package manager options available. This covers almost all the popular
    `deb` and `rpm`-based package managers. You can read that wiki by visiting [https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager).
  prefs: []
  type: TYPE_NORMAL
- en: 'For Ubuntu 14.04 and preceding as an example, the steps to install Node would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once these steps have been completed, both Node and npm should be installed
    on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Testing that Node.js is installed properly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that Node has been installed on your system, let's run a quick test to ensure
    everything is working properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access a command line via your terminal program and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Assuming that your Node installation was successful, you should see the version
    number that was installed as an output on the screen, right under the command
    you executed.
  prefs: []
  type: TYPE_NORMAL
- en: Your version numbers will most likely be more recent than those printed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also launch the Node `repl`, a command-line shell that lets you execute
    JavaScript directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Online documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll want to be sure to point your browser to the online documentation for
    Node and bookmark it, as it will undoubtedly become a resource that you will want
    to access on a regular basis. It is not mandatory that you should go through each
    and every section of it, but once you start writing code in Node.js, you will
    need to refer to this document frequently to understand more on the APIs exposed
    by Node.js. The document is available at [http://nodejs.org/api/](http://nodejs.org/api/).
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out the npm registry available at [http://npmjs.com](http://npmjs.com),
    where you can find tens of thousands of modules available for Node developers.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB can also be easily downloaded by visiting the official MongoDB website
    and accessing the downloads section from [http://www.MongoDB.org/downloads](http://www.mongodb.org/downloads).
    Once there, be sure to download the correct version depending on your OS and CPU
    (32-bit or 64-bit).
  prefs: []
  type: TYPE_NORMAL
- en: For Windows users, you can opt to download the MSI installer file, which will
    make the installation much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the version of MongoDB you downloaded, you will want to replace
    `<version>` in the following sections with the appropriate version number that
    matches your file.
  prefs: []
  type: TYPE_NORMAL
- en: Mac OS X installation instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using the Homebrew package manager, MongoDB can be installed using
    the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The remainder of this chapter assumes you are not using Homebrew and need to
    install MongoDB manually. If you are installing MongoDB via Homebrew, you can
    proceed directly to the *Confirming successful MongoDB installation* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the download, open and extract the contents of the `.tgz`
    file. You will want to move the extracted contents to a destination folder, `/MongoDB`.
    You can do this either via the finder or the command line, whichever you prefer,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will want to ensure that the locations of the MongoDB binaries are configured
    in your environment path so that you can execute `MongoDB` and Mongo from any
    working directory. To do this, edit the `.profile` file in your home folder (`~/`)
    and append the location for MongoDB to it. Your `.profile` file should look something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t have this line or are missing `.bash_profile` completely, you
    can create one easily by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You will more than likely have a lot more than what I have in the preceding
    lines of code. The important thing is that you append `:/MongoDB/bin` before the
    `$PATH` at the end. The `:` is a delimiter between different paths (so it's likely
    that you will be adding your path to the end of an existing list, but before the
    trailing `$PATH`).
  prefs: []
  type: TYPE_NORMAL
- en: Here, `mongod` refers to the MongoDB server instance that you need to invoke,
    and `mongo` refers to the Mongo shell, which will be the console through which
    you will be interacting with the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to create a default `data` folder, which MongoDB will use to
    store all data documents. From the command line, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the files have been properly extracted to the `/MongoDB` folder and the
    data folders created, you can then start the MongoDB database server by executing
    the following command from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This should dump a bunch of log statements while the server starts up, but
    ultimately ends with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Your MongoDB server is up and running. You can type *Ctrl-C* to cancel
    and shut down the server.
  prefs: []
  type: TYPE_NORMAL
- en: Windows 7/Windows 8 installation instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After completing the download, the MongoDB website will automatically redirect
    you to a landing page with a link to a Windows *Quick Start* guide at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.MongoDB.org/manual/tutorial/install-MongoDB-on-windows/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/).'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you follow that guide, as it will be the most
    up-to-date and will generally be more detailed than what I can provide here.
  prefs: []
  type: TYPE_NORMAL
- en: Extract the ZIP file that was downloaded to the root `c:\` destination. By default,
    this should extract a folder named `MongoDB-osx-x86_64-2.4.9`. Depending on the
    tool you are using for extraction, you can leave this as it is or change the destination
    folder to simply `MongoDB`. If you don't change the destination during extraction,
    you should rename the folder once it is complete. Either way, be sure that the
    files that are extracted reside in a folder named `c:\MongoDB`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to create a default `data` folder, which MongoDB will use to
    store all the data documents. Using Windows Explorer or Command Prompt, whichever
    you are most comfortable with, create the `c:\data` folder and then `c:\data\db`
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the files have been properly extracted to the `c:\MongoDB` folder and
    both the data folders subsequently created, you can then start the MongoDB database
    server by executing the following command from a prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This should dump a bunch of log statements while the server starts up, but
    will ultimately end with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Your MongoDB server is up and running. You can type *Ctrl*-*C* to
    cancel and shut down the server.
  prefs: []
  type: TYPE_NORMAL
- en: Linux installation instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once again, we will face a slightly more challenging installation process with
    Linux versus Windows or Mac. The official website [http://docs.MongoDB.org/manual/administration/install-on-linux/](http://docs.mongodb.org/manual/administration/install-on-linux/)
    has great instructions on how to install MongoDB on a number of different Linux
    distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue to use Ubuntu as our flavor of choice and use the APT package
    manager for the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these steps are completed, MongoDB should be installed and ready to run
    on your system. Execute the following command in the terminal to be sure. This
    gets the MongoDB daemon up and running, listening for connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Success! Your MongoDB server is up and running. You can type *Ctrl*-*C* to cancel
    and shut down the server.
  prefs: []
  type: TYPE_NORMAL
- en: As you are performing local development on your development machine and not
    a production server, you don't need the MongoDB server to always be up and running.
    This will be an unnecessary strain on your machine for the majority of the time
    you're not developing against the server. Because of this, throughout the remainder
    of this book, it will always be a requirement that you manually launch the server
    every time you launch code that expects to connect to a MongoDB server. If you
    want, you can certainly configure MongoDB to run locally as a service and always
    be up, but the instructions to do so are beyond the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Confirming successful MongoDB installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that MongoDB has been installed on your system, let's run a quick test to
    ensure everything is working properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access a command line via your terminal program and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Assuming that your MongoDB installation was successful, you should see the version
    number that was installed as an output on the screen, right under the command
    you executed.
  prefs: []
  type: TYPE_NORMAL
- en: Your version numbers will most likely be more recent than those printed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Bookmarking the online documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll want to be sure to point your browser to the online documentation for
    MongoDB available at [http://docs.MongoDB.org/manual/](http://docs.mongodb.org/manual/)
    and bookmark it, as it will undoubtedly become a resource that you will want to
    access on a regular basis.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have everything installed and confirmed that it's all working,
    you can write your first quick app that will use both Node and MongoDB. This will
    prove that your environment is good to go, and that you're ready to get started.
    In addition, it will give you a brief taste of the world of Node and MongoDB development!
    Don't worry if a lot of the following is confusing or just doesn't make sense
    to you, it will all be made clear throughout the rest of the book!
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we need to create a folder for our application where this application''s
    specific code will reside, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating the sample application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `testapp` folder that we just created will be the root of our sample Node
    application. Even though it''s not necessary, it''s important and also best practice
    that we should create the `package.json` file for our Node app, which will hold
    the necessary data regarding the application such as its version, name, description,
    development, and runtime dependencies. This can be done by issuing the following
    command from the `testapp` folder root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This command will follow up by asking you a few questions, such as the name
    and version number of your newly created application. It is not necessary that
    you fill in all the details in one go, and you can skip the steps by pressing
    *Enter* and the default values will be entered, which you may update later.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the dependent modules in place
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start to write any Node.js code, we need to get our dependencies
    in place by using `npm`. Since this is a basic app, we will be using it to test
    our Node.js connectivity with the MongoDB server. So, the only dependent module
    that we need is the native MongoDB client for Node.js. We can easily install that
    by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: After `npm` installs the MongoDB driver, you can list the contents of the directory
    and you will notice that a new folder was created, `node_modules`. This is where,
    surprisingly enough, all Node modules are stored whenever you install them from
    `npm`. Inside the `node_modules` folder, there should be a single folder named
    `MongoDB`. Also, you will notice that the `package.json` file of our sample application
    will be updated by this new dependency entry.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the application code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s write the simple application code to test things out. This app
    is going to basically connect to our locally running MongoDB server, insert a
    few records as seed data, and then provide the output on whether or not the data
    was inserted properly into MongoDB. You can download a Gist of the code via this
    URL: [http://bit.ly/1JpT8QL](http://bit.ly/1JpT8QL).'
  prefs: []
  type: TYPE_NORMAL
- en: Using your editor of choice, create a new file named `app.js` and save it to
    the application root, which is the `testapp` folder. Just copy the content of
    the preceding Gist on to the `app.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's go through and explain what each section of the code is doing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line requires the MongoDB Node driver that we installed via `npm`.
    This is the required convention used in Node.js for bringing in external file
    dependencies to the current file in context.
  prefs: []
  type: TYPE_NORMAL
- en: We will explain more about this in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we declare the variables for the database server information
    and collection we want to work with. Here, `myproject` is the database we want
    to use and `chapters` is the collection. In MongoDB, if you reference and try
    to use a collection that doesn't exist, it will automatically be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step would be to define some data that we can insert into MongoDB
    to verify that everything is fine. So, we create an array of chapters here, which
    can be inserted into the database and collections we set up in the previous steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can take a look at the rest of the code where we insert this data into
    the MongoDB database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we initiate a connection with the MongoDB server, and if the connection
    was proper, the `db` variable will have the `connection` object that we can use
    for further operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the preceding code closely - do you remember something that we learned
    in [Chapter 1](7af048ea-93a4-4290-a37b-c530857e55d9.xhtml), *Welcome to JavaScript
    in the Full Stack*? We are using a `callback` for the `connection` call that we
    are making here. As discussed in the first chapter, this function will be registered
    as a `callback` to trigger once the connection attempt is completed. Upon connection
    completion, this will be triggered by either an `error` or a `db` object, depending
    on whether we were able to make proper connectivity or not. So, if you look at
    the code in the `callback` function, we are not checking whether any error was
    raised in the connection attempt before logging connected correctly to the server.
    Now, that''s your task to add and check while we try to run this app! Take a look
    at the following code block in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This does nothing but use the `db` object we got in the connection call and
    get the `collection` named `chapters`. Remember, we set that value to `sampleCollection`
    at the beginning of the code. Once we get the `collection`, we make an `insert`
    call to put the chapters we have defined in the array `chapters`. As you can see,
    this `insert` call is also done via an asynchronous call by attaching the `callback`
    function. This `callback` function will be triggered once the `insert` operation
    is completed by the code residing inside the MongoDB native client, which we required
    as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will take a look at the code inside the `callback` function, which
    we passed to the `insert` function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here, we process the values passed via the `callback` to find out whether the
    `insert` operation succeeded or not and if the data related to the records that
    have been inserted. So, we check whether there was an error, and, if not, proceed
    to print the number of records that got inserted. Here, the result array will
    contain the records that we inserted into MongoDB if the operation was a success.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can go ahead and try to run this code, as we have understood what it
    does.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the sample app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have the complete code saved to `app.js`, it''s time to execute it
    and see what happens. However, before you can launch an app that clearly relies
    on a connection to MongoDB, you need to first boot up the MongoDB daemon instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In Windows, if you haven't set a `PATH` variable for `mongod`, you may need
    to use the full path while executing MongoDB, which is `c:\MongoDB\bin\mongod.exe`.
    For your needs, the remainder of this book will refer to the `mongod` command,
    but you may always need to execute the full path in each instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to launch the app itself, execute the following command after moving to
    the `root` folder where `app.js` is located:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'When the app first executes, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Checking the actual database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at the database itself to see what happened during
    the execution of the app. Since the server is currently up and running, we can
    connect to it using the Mongo shell-a command line interface to the MongoDB server.
    Execute the following commands to connect to the server using Mongo and run a
    query against the chapter''s collection. As you can see in the upcoming code,
    Mongo shell connects to a default database named `test` initially. We need to
    manually specify the database name to switch to if it''s something other than
    `test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Here, `pretty` is used as part of the command to format the result from the
    `find` command. This is used only in a shell context. It does more of a prettification
    task for the JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If you run the Node app again, the records will be inserted into the Mongo server
    again. So, if you repeat the command multiple times, the result will have more
    records in the output. We are not handling this case in this chapter as we intend
    to have only specific code, that will be simple enough to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took time to make sure your development environment was
    properly configured with both the Node runtime environment and the MongoDB server.
    After making sure both were properly installed, we wrote a basic app that utilized
    both technologies. The app connected to a locally running MongoDB server, and
    inserted sample records.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the tedious but necessary tasks of setup and installation are out of
    the way, we can move on to some fun and start learning!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will review a primer on the JavaScript language and
    understand the basics of Node. Then, we will review the basic **CRUD** (`create`,
    `read`, `update`, `delete`) operations with MongoDB using the Mongo shell.
  prefs: []
  type: TYPE_NORMAL
