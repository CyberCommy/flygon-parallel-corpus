- en: Security and Keys
  prefs: []
  type: TYPE_NORMAL
- en: Security is no simple matter. It's important to keep security in mind when designing
    your applications from the beginning. For example, if you accidentally committed
    your keys to your repository, you'd have to do some trickery to either remove
    that from the repository's history or, more likely, you'd have to revoke those
    credentials and generate new ones.
  prefs: []
  type: TYPE_NORMAL
- en: We simply can't have our database credentials visible to the world in our frontend
    JavaScript, but there are ways for the frontend to work with databases. The first
    step is to implement the proper security and understand where we can put our credentials,
    both for the frontend and the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication versus authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gitignore` and environment variables for credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Be prepared to work with the code provided in the `Chapter-17` directory of
    the repository: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-17](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-17).
    As we''ll be working with command-line tools, also have your terminal or command-line
    shell available. We''ll need a modern browser and a local code editor.'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication versus authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we begin our exploration of security with JavaScript, it''s important to
    understand the vital difference between **authentication** and **authorization**.
    In a nutshell, *authentication* is a process whereby a system affirms and acknowledges
    that you are who you say you are. Think of going to the store to buy a bottle
    of wine. You may be asked to provide identification that proves you are of or
    above the legal consumption age of your locale. The clerk has *authenticated*
    you with your photo ID to say that *yes, you are **you** because I, the clerk,
    have matched your face to the photo in the I.D.* A second case is when you fly
    on an airline. When you pass through security, they''re also going to check your
    ID for the same reason: are you who you say you are?'
  prefs: []
  type: TYPE_NORMAL
- en: 'These two use cases end, however, with *authorization*. Authorization says:
    *I know you are who you say you are*. Now, are you allowed to do what you want?
    In our wine example, if you are above the age of 21 in the United States, or 18
    in most other parts of the world, you are *authorized* to consume alcoholic beverages.
    Now, the security agent at the airport does not really care about your age for
    any real reason; they are only concerned about whether you are who you say you
    are and whether you have a valid ticket for the flight you''re about to board.
    You are then *authorized* to enter the secure area of the airport and board your
    flight.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue our airline example a step further. In today''s age of enhanced
    security for travel, the authentication and authorization process neither begins
    nor ends with the security agent. The process looks more like this if you book
    a commercial airline ticket online:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2cfb4f4c-323b-4ea0-9294-f881a660a623.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.1 – Airline website authentication and authorization
  prefs: []
  type: TYPE_NORMAL
- en: When using an airline's website, you may have an account and be *authorized*
    to proceed to log in, or you may already be logged in and *authorized* to search
    flights. If you are logged out, you must *authenticate* to search for flights.
    To book a flight, you may have to have certain details, such as a visa, in order
    to be *authorized* to book that flight. You may also be on a watchlist or blacklist
    for traveling to a country, so your journey would end before it even began. There
    are so many steps, but many of these happen behind the scenes; for example, you
    may not know that when you entered your name to book a ticket, your name was searched
    against global records to see whether you are authorized to fly. Your visa number
    may have been cross-referenced to see whether you are authorized to fly to that
    country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as you need to be authenticated and authorized to fly, your web application
    should also be designed to allow authentication and authorization. Consider our
    restaurant finder application from [Chapter 15](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml), *Combining
    Node.js with the Frontend*, that allowed us to search for and save different restaurants
    in Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ef4dd2ef-aa5c-4dcd-b4bc-06f34822670c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.2 – Our restaurant app
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember, we started our Firebase app with *open permissions *in the
    Real-Time Database section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/743e5363-57b0-422c-a1f7-a2170c413910.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.3 – Our Firebase security rules
  prefs: []
  type: TYPE_NORMAL
- en: This is obviously *not a good idea* for a production website. So, to mitigate
    this, let's return to Firebase and set up some authentication and authorization!
  prefs: []
  type: TYPE_NORMAL
- en: Using Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For ease of use, I've replicated our restaurant finder app in the `Chapter-17` directory
    in the GitHub repository. Don't forget to include your own environment variables
    in the `.env` file from [Chapter 15](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml), *Combining
    Node.js with the Frontend*, restaurant finder. Take a moment to get this set up
    and working before we move on.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we'll need to do is go to Firebase and configure it to use authentication.
    In the Firebase console, access the Authentication section and set up a sign-in
    method; for example, you can set up Google authentication. There's a list of methods
    you can use here, so go ahead and add one or more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''re going to set our rules in the Real-Time Database section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What we're saying here is that the user is allowed to read and write from the
    `restaurants/<user id>` section of your database if the authenticated data is
    not `null` and if the user ID matches the user ID of the location in the database
    to which you are attempting to write and read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our rules are set up, let''s try to save a restaurant:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the app by executing `npm start` in the root directory and access `http://localhost:3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for a restaurant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempt to save the restaurant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Witness an epic fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What you should see is an error screen that looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d501fa1-013e-4b2b-9f37-670e0a5b4579.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.4 – Error, error!
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, if we go to our developer tools and inspect the Network tab''s
    WS tab (**WS** for **WebSockets**, which is how Firebase communicates), we might
    see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/99c9094a-e1c5-423b-afe7-d2e1453c136d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.5 – WebSockets communication inspector
  prefs: []
  type: TYPE_NORMAL
- en: Great! We've now proven that our Firebase rules work and will not allow saving
    to `/restaurants/<user_id>` because we are not authenticated. It's time to set
    that up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we''re going to do is change our `App.js` script a bit. There
    are a few different conventions when writing React, and we''re going to continue
    moving forward with the class-based method. Here''s what our `App.js` script will
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The first piece to notice is that we''ve included a new `npm` module: `react-cookies`.
    While cookies are easy to read from a browser, there are modules that make it
    just a little bit easier. When we retrieve the user''s ID, we''re going to store
    it in a cookie so that the browser remembers that the user is authenticated.'
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need to use a cookie? If you remember, the web is inherently *stateless*,
    so cookies are one means of transferring information from one part of an application
    to another and from session to session. It's a basic example, but it's important
    to remember not to store any sensitive information in a cookie; a token or username
    is probably the most that you'd want to put in one for an auth workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve also introduced a new component, `SignIn`, which is conditionally rendered
    if the user variable doesn''t exist—that is, if the user isn''t logged in. Let''s
    take a look at that component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two things to note here:'
  prefs: []
  type: TYPE_NORMAL
- en: We're using `GoogleAuthProvider` for our `SignIn` mechanism. If you chose a
    different authentication method when setting up Firebase, this provider may be
    different, but the rest of the code should be the same or similar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `signInWithPopup` method is copied almost directly from the Firebase documentation.
    The only change made here is to create the `self` variable so that we can maintain
    the scope to `this` inside another method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When this is rendered, it'll be a simple button stating **Sign In** if the user
    isn't already logged in. It will activate a popup to log in with your Google account,
    and then proceed as before. Not so scary, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to deal with our user. Did you notice in `App.js` that we''re
    passing the `user` prop to Finder? That''ll make it easy to pass a reference to
    our user in our basic application, as follows in `Finder.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the only method that''s changed in this instance, and if you look closely,
    the change is to destructure `user` from `this.props` and use it in our database
    reference. If you remember our security rules, we''ve had to change our database
    structure a bit to accommodate easy *authorization* of our authenticated user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'What we stated in our security rules is that the node of the format `restaurants.$uid`
    is where we''ll store each individual user''s restaurants. Our Firebase structure
    now looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d6e776b-1525-41b9-8c24-00ab97d6d99e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.6 – An example of how our Firebase structure could look
  prefs: []
  type: TYPE_NORMAL
- en: In this construction, we see the `TT8PYnjX6FP1YikssoHnINIpukZ2` node inside
    `restaurants`. That's the **uid** (**user ID**) of the authenticated user, and
    within that node, we find the user's saved restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: This database structure is simple but provides easy authorization. Our rules
    state "give the user TT8 permission to see and alter the data within their own
    node and nothing more."
  prefs: []
  type: TYPE_NORMAL
- en: We've discussed our `.env` variables a bit previously, so let's take a bit of
    a deeper look into them. We'll be deploying our app to Heroku to create a publicly
    visible website.
  prefs: []
  type: TYPE_NORMAL
- en: .gitignore and environment variables for credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've been working with `.env` files, I've made it a point to note that these
    files should *never* be committed to the repository. In fact, a good practice
    is to add an entry to your `.gitignore` file before you create any sensitive files
    to ensure you never accidentally commit your credentials. Even if you later delete
    it from your repository, the file history is maintained and you'll have to invalidate
    (or *cycle*) those keys so that they are not exposed in history.
  prefs: []
  type: TYPE_NORMAL
- en: 'While a full section on Git is beyond the scope of our work here, let''s take
    a look at an example of a `.gitignore` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Several of these are entries created by the `create-react-app` scaffold. Note
    specifically `.env*`. The asterisk (or *star*, or *splat*) is a regular expression
    wildcard to specify that any file that starts with `.env` is ignored. You can
    have `.env.prod` and it will be ignored. **Be sure to ignore your credential files!**
  prefs: []
  type: TYPE_NORMAL
- en: I also like to change `/node_modules` to `*node_modules*` in case you have subdirectories
    with their own node modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Storing variables in `.env` files is convenient, but there are also in-memory
    environment variables that can be created. To demonstrate this functionality,
    we''re going to deploy our project to Heroku, a cloud application platform. Let''s
    get set up:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new account at [https://heroku.com](https://heroku.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Heroku **Command-Line Interface** (**CLI**) as per the documentation
    provided. Be sure to follow the login instructions as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new repository in the restaurant finder directory: `git init`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute `heroku create --ssh-git`. It''ll provide the Git URL of your Heroku
    endpoint, as well as the `https://` URL. Go ahead and access the HTTPS URL. You
    should see a welcome message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/02fa5a98-733f-46d6-a767-9c4d892a0684.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.7 – Hooray! We have a blank Heroku application!
  prefs: []
  type: TYPE_NORMAL
- en: We can now continue with organizing our application's logic.
  prefs: []
  type: TYPE_NORMAL
- en: Reorganizing our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next thing we''re going to do that''s different than in [Chapter 15](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml), *Combining
    Node.js with the Frontend*, is reorganize our files just a touch. This isn''t
    completely necessary, but it provides a nice logical distinction between the frontend
    and backend, which is especially useful when deploying production-level code.
    There''s an additional semantic difference between our previous application and
    what we''re going to create here: we''re not going to serve a running development
    React application, but rather a static production build.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you recall, our previous restaurant had a structure that looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/744d7cfd-6930-474e-b548-d96918240d23.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.8 – Proxy versus apps, explained.
  prefs: []
  type: TYPE_NORMAL
- en: We were actually using the React app as the web server and proxying through
    it to the Express backend in order to use the Yelp API. Now, however, we're going
    to use Express as the main web server and serve a production-level build of our
    React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our application logic previously looked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to turn that logic on its head and state the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `client` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `yarn.lock` file if you still have it. We're going to focus on using
    NPM instead of `yarn`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move all of the files into the client directory, except for the API directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''re going to make a new `package.json` at our root level: `npm install
    dotenv express yelp-fusion`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you noticed, we also installed Express, which we didn't do before. We're
    going to use this to make routing our requests much easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `package.json`, at the *root* level, add these scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Since we're dealing with Heroku, we can also remove the `proxy` line from `package.json`,
    as everything will be running on the same server and will not need a proxy. Now,
    how about the `postinstall` line in our `package.json`? What we're going to do
    is make a *production-ready* build of our application. `create-react-app` gives
    us that functionality for free with the `npm run build` script. When we deploy
    to Heroku, it will run `npm install` and then, `postinstall`, to create a production
    build of our React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re now ready to add a new piece of metadata to our project so that Heroku
    will serve up our application: the **Procfile**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A Procfile will tell Heroku what to do with our code. Your Procfile will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In essence, all it''s doing is telling Heroku where to begin the program: run
    `npm start`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our directory structure should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Our next important step is to modify our `api.js` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, this looks pretty similar to before, except for the addition of Express.
    But take a look at the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Aha! Here''s our secret sauce: this line states to use the `client/build` directory
    as static assets as opposed to Node.js code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing on, we''re defining our Express routing to handle requests of the
    format `/search`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For the next part of our secret sauce, if the route does *not* match `/search`,
    send it along to the static React build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Add everything to your Git repository: `git add`. Now you can execute `git status`
    to be sure that your `.env` file is not *included*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, commit your code: `git commit -m "Initial commit`. If you need some help
    with Git, the Heroku documentation provides references. Next, deploy to Heroku:
    `git push heroku master`. This will take a little while, as Heroku is going to
    not only deploy your code with Git but also create a production build of your
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the URL provided by the build script and hopefully, you''ll see a fantastic
    error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/43161e56-8693-4b56-806a-6bb334d483a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.9 – Oh no! An error! Actually it's not a bad thing!
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! What this is telling us is that the application is running, but we don''t
    have some important pieces: our environment variables. Execute `heroku config:set
    <entry>` for each entry in your `.env` files (both the root and in `client`).'
  prefs: []
  type: TYPE_NORMAL
- en: When you refresh the page, you'll see the Sign In button. However, if you click
    it, nothing will happen. It may spawn a popup for a second, but it won't bring
    up the authentication window. We need to go back to the Firebase console to add
    our Firebase URL as an *authorized* URL.
  prefs: []
  type: TYPE_NORMAL
- en: In the Firebase console, navigate to the authentication section and enter your
    Heroku URL to the Authorized domains section. Return to your Heroku app, refresh,
    and lo and behold! The authentication panel works. If you go to Saved!, you'll
    even see your saved restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: 'That wasn''t so bad! Heroku''s method of storing environment variables doesn''t
    vary too much from our `.env` file, but it handles it for us without needing to
    do much work. However, there''s one last piece we''ll need to configure: our search
    *does not work*. If you look at the console error messages, you should see a note
    indicating that a connection to `localhost:3000` is refused. We need to take one
    last step to abstract our code away from using `localhost`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/components/search/Search.jsx`, you may recognize this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'OK! We''ve hardcoded our `fetch` call to `localhost` and our proxied path.
    Let''s change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Commit your changes and push to Heroku again. As you're developing, you can
    also use `heroku local web` to spawn a browser and test your changes without committing
    and deploying.
  prefs: []
  type: TYPE_NORMAL
- en: With any luck, you should have a fully functional front-to-back application
    with credentials secured in Heroku environment variables! Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about authentication, authorization, and the difference
    between the two. Remember that it''s usually not enough to only do one or the
    other: most applications that need credentials need a combination of both.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firebase is a useful cloud storage database that you can use with existing
    login systems and can not only be useful as a development resource but can also scale
    to production-level usage. Lastly, remember these points: because JavaScript is
    client-side, we have to protect sensitive information in different manners than
    a purely backend application:'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticate and authorize to determine who can use which resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Separate our sensitive data from our public data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Never commit keys and sensitive data to a repository!**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's up to all of us to be good digital citizens, but there are bad actors out
    there. Protect yourself and your code!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be tying together Node.js and MongoDB to persist
    our data. We'll be revisiting our starship game, but this time with persistent
    storage.
  prefs: []
  type: TYPE_NORMAL
