- en: Components, Mixins, and Functional Components
  prefs: []
  type: TYPE_NORMAL
- en: Building a Vue application is like putting a puzzle together. Each piece of
    the puzzle is a component, and each piece has a slot to fill.
  prefs: []
  type: TYPE_NORMAL
- en: Components play a big part in Vue development. In Vue, each part of your code
    will be a component—it could be a layout, page, container, or button, but ultimately,
    it's a component. Learning how to interact with them and reuse them is the key
    to cleaning up code and performance in your Vue application. Components are the
    code that will, in the end, render something on the screen, whatever the size
    might be.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about how we can make a visual component that
    can be reused in many places. We'll use slots to place data inside our components,
    create functional components for seriously fast rendering, implement direct communication
    between parent and child components, and finally, look at loading your components
    asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Let's put these all those pieces together and create the beautiful puzzle that
    is a Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a visual template component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using slots and named slots to place data inside your components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data to your component and validating the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating functional components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing your children components data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic injected component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dependency injection component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a component `mixin`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loading your components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js** and **Vue-CLI****.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention Windows users: you need to install an NPM package called `windows-build-tools` to
    be able to install the following required packages. To do so, open PowerShell
    as an administrator and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install **Vue-CLI**, you need to open Terminal (macOS or Linux) or the Command
    Prompt*/*PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a visual template component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Components can be data-driven, stateless, stateful, or a simple visual component.
    But what is a visual component? A visual component is a component that has only
    one purpose: visual manipulation.'
  prefs: []
  type: TYPE_NORMAL
- en: A visual component could have a simple Scoped CSS with some `div` HTML elements,
    or it could be a more complex component that can calculate the position of the
    element on the screen in real-time.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a card wrapper component that follows the Material Design guide.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue-CLI, as we did in
    the 'Creating Your first project with Vue CLI' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem***,** or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new project, open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s follow these steps and create a visual template component:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file called `MaterialCardBox.vue` in the `src/components`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we will start with the template of our component. We need to
    create the box for the card. By using the Material Design guide, this box will
    have a shadow and rounded corners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<script>` part of our component, we will add just our basic name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create our elevation CSS stylesheet rules. To do this, create a
    file named `elevation.css` in the `style` folder. There, we will create the elevations
    from `0` to `24`, to follow all the elevations on the Material Design guide:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For styling our card in the `<style>` part of the component, we need to set
    the `scoped` attribute inside the `<style>` tag to make sure that the visual style
    won''t interfere with any other components within our application. We will make
    this card follow the Material Design guide. We need to import the `Roboto` font
    family and apply it to all elements that will be wrapped inside this component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5f9be750-4b22-4898-a28a-c02bba7912d9.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A visual component is a component that will wrap any component and place the
    wrapped data with custom styles. As this component mixes with others, it can form
    a new component without the need to reapply or rewrite any style in your code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Scoped CSS at [https://vue-loader.vuejs.org/guide/scoped-css.html#child-component-root-elements](https://vue-loader.vuejs.org/guide/scoped-css.html#child-component-root-elements).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about Material Design cards at [https://material.io/components/cards/](https://material.io/components/cards/).
  prefs: []
  type: TYPE_NORMAL
- en: Check out the Roboto font family at [https://fonts.google.com/specimen/Roboto](https://fonts.google.com/specimen/Roboto).
  prefs: []
  type: TYPE_NORMAL
- en: Using slots and named slots to place data inside your components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes the pieces of the puzzle go missing, and you find yourself with a
    blank spot. Imagine that you could fill that empty spot with a piece that you
    crafted yourself, not the original one that came with the puzzle box. That's a
    rough analogy for what a Vue slot is.
  prefs: []
  type: TYPE_NORMAL
- en: Vue slots are like open spaces in your component that other components can fill
    with text, HTML elements, or other Vue components. You can declare where the slot
    will be and how it will behave in your component.
  prefs: []
  type: TYPE_NORMAL
- en: With this technique, you can create a component and, when needed, customize
    it without any effort at all.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue-CLI, as we did
    in the *Creating Your first project with Vue CLI* recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem***,** or use the project from the *Creating a
    visual template component* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to create slots and named slots in components:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's open the file called `MaterialCardBox.vue` in the components folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<template>` part of the component, we will need to add four main sections
    on the card. Those sections are based on the Material Design card anatomy and
    are the `header`, `media`, `main section`, and `action` areas. We will use the
    default slot for the `main section`, and the rest will all be named scopes. For
    some named slots, we will add a fallback configuration that will be displayed
    if the user doesn''t choose any setting on the slot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create our text CSS stylesheet rules for the component. In
    the `style` folder, create a new file called `cardStyles.css`, and there we will
    add the rules for the card text and headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<style>` part of the component, we need to create some CSS stylesheets
    to follow the rules of our design guide:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `App.vue` file, in the `src` folder, we need to add elements to those
    slots. Those elements will be added to each one of the named slots, and for the
    default slot. We will change the component in the `<template>` part of the file.
    To add a named slot, we need to use a directive called `v-slot:` and then the
    name of the slot we want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For the default slot, we don't need to use a directive; it just needs to be
    wrapped in the component to be placed in the `<slot />` part of the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/82443046-abca-438a-9a1a-0be3390fecda.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Slots are places where you can put anything that can be rendered into the DOM.
    We choose the position of our slot and tell the component where to render when
    it receives any information.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we used named slots, which are designed to work with a component
    that requires more than one slot. To place any information in that component within
    the Vue single file (`.vue`) `<template>` part, you need to add the `v-slot:`
    directive so that Vue is able to know where to place the information that was
    passed down.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vue slots at [https://vuejs.org/v2/guide/components-slots.html](https://vuejs.org/v2/guide/components-slots.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the Material Design card anatomy at [https://material.io/components/cards/#anatomy](https://material.io/components/cards/#anatomy).
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to your component and validating the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now know how to place data inside your component through slots, but those
    slots were made for HTML DOM elements or Vue components. Sometimes, you need to
    pass data such as strings, arrays, Booleans, or even objects.
  prefs: []
  type: TYPE_NORMAL
- en: The whole application is like a puzzle, where each piece is a component. Communication
    between components is an important part of it. The possibility to pass data to
    a component is the first step to connect the puzzle, and then validating the data
    is the final step to connect the pieces.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to pass data to a component and validate the
    data that was passed to the component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue-CLI, as we did
    in the recipe *Creating Your first project with Vue CLI* in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml),* Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the *Using slots and
    name slots to place data inside your components* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to pass data to the component and validate it:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's open the file called `MaterialCardBox.vue` in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, we create a new property, called `props`.
    This property receives the component data, and that data can be used for visual
    manipulation, variables inside your code, or a function that needs to be executed.
    In this property, we need to declare the name of the attribute, the type, if it''s
    required, and the validation function. This function will be executed at runtime
    to validate whether the passed attribute is a valid one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `computed` property, in the `<script>` part of the component, we need
    to create a set of visual manipulation rules that will be used for rendering the
    card. Those rules will be `showMediaContent`, `showActionsButtons`, `showHeader`,
    and `cardElevation`. Each rule will check the received `props` and the `$slots` objects
    to see whether the relevant card part needs to be rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the visual manipulation rules, we need to add the created rules
    to the `<template>` part of our component. They will affect the appearance and
    behavior of our card. For example, if there is no header slot defined, and there
    is a header property defined, we show the fallback header. That header is the
    data that was passed down via `props`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ab464f57-6b57-4caa-b845-afec0d64684c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each Vue component is a JavaScript object that has a render function. This render
    function is called when it is time to render it in the HTML DOM. A single file
    component is an abstraction of this object.
  prefs: []
  type: TYPE_NORMAL
- en: When we are declaring that our component has unique props that can be passed,
    it opens a tiny door for other components or JavaScript to place information inside
    our component. We are then able to use those values inside our component to render
    data, do some calculations, or make visual rules.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, using the single file component, we are passing those rules as
    HTML attributes because `vue-template-compiler` will take those attributes and
    transform them into JavaScript objects.
  prefs: []
  type: TYPE_NORMAL
- en: When those values are passed to our component, Vue first checks whether the
    passed attribute matches the correct type, and then we execute our validation
    function on top of each value to see whether it matches what we'd expect.
  prefs: []
  type: TYPE_NORMAL
- en: After all of this is done, the component life cycle continues, and we can render
    our component.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `props` at [https://vuejs.org/v2/guide/components-props.html](https://vuejs.org/v2/guide/components-props.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `vue-template-compiler` at [https://vue-loader.vuejs.org/guide/](https://vue-loader.vuejs.org/guide/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating functional components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The beauty of functional components is their simplicity. They're a stateless
    component, without any data, computed property, or even a life cycle. They're
    just a render function that is called when the data that is passed changed.
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering how this can be useful. Well, a functional component is
    a perfect companion for UI components that don't need to keep any data inside
    them, or visual components that are just rendered components that don't require
    any data manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: As the name implies, they are simple function components, and they have nothing
    more than the render function. They are a stripped-down version of a component
    used exclusively for performance rendering and visual elements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, create your Vue project with Vue-CLI, as we did in the
    recipe '*Creating Your first project with Vue CLI*' in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem***, **or use the project from the '*Passing data
    to your component and validating the data*'recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these instructions to create a Vue functional component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `MaterialButton.vue` in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this component, we need to validate whether the prop we''ll receive is a
    valid color. To do this, install in the project the `is-color` module. You''ll
    need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows) and
    execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<script>` part of our component, we need to create the `props` object
    that the functional component will receive. As a functional component is just
    a render function with no state – it''s stateless – the `<script>` part of the
    component is trimmed down to `props`, `injections`, and `slots`. There will be
    four `props` objects: `backgroundColor`, `textColor`, `isRound`, and `isFlat`.
    These won''t be required when installing the component, as we will have a default
    value defined in `props`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` part of our component, we first need to add the `functional` attribute to
    the `<template>` tag to indicate to the `vue-template-compiler` that this component
    is a functional component. We need to create a button HTML element, with a basic
    `class` attribute button and a dynamic `class` attribute based on the `props` object
    received. Different from the normal component, we need to specify the `props` property in
    order to use the functional component. For the style of the button, we need to
    create a dynamic `style` attribute, also based on `props`. To emit all the event
    listeners directly to the parent, we can call the `v-on` directive and pass the `listeners`
    property. This will bind all the event listeners without needing to declare each
    one. Inside the button, we will add a `div` HTML element for visual enhancement,
    and add `<slot>` where the text will be placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make it pretty. In the `<style>` part of the component, we need
    to create all the CSS stylesheet rules for this button. We need to add the `scoped`
    attribute to `<style>` so that all the CSS stylesheet rules won''t affect any
    other elements in our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/da07bacd-c897-42be-9dc2-536e8ae144c6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functional components are as simple as a render function. They don't have any
    sort of data, function, or access to the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: They were first introduced in Vue as a JavaScript object `render()` function
    only; later, they were added to `vue-template-compiler` for the Vue single file
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'A functional component works by receiving two arguments: `createElement` and
    `context`. As we saw in the single file, we only had access to the elements as
    they weren''t in the `this` property of the JavaScript object. This occurs because
    as the context is passed to the render function, there is no `this` property.'
  prefs: []
  type: TYPE_NORMAL
- en: A functional component provides the fastest rendering possible on Vue, as it
    doesn't depend on the life cycle of a component to check for the rendering; it
    just renders each time data is changed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about functional components at [https://vuejs.org/v2/guide/render-function.html#Functional-Components](https://vuejs.org/v2/guide/render-function.html#Functional-Components).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the `is-color` module at [https://www.npmjs.com/package/is-color](https://www.npmjs.com/package/is-color).
  prefs: []
  type: TYPE_NORMAL
- en: Accessing your children components data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, parent-child communications are done via events or props. But sometimes,
    you need to access data, functions, or computed properties that exist in the child
    or the parent function.
  prefs: []
  type: TYPE_NORMAL
- en: Vue provides a way to interact in both ways, opening doors to communications
    and events, such as props and event listeners.
  prefs: []
  type: TYPE_NORMAL
- en: There is another way to access the data between the components: by using direct
    access. This can be done with the help of a special attribute in the template
    when using the single file component or a direct call of the object inside the
    JavaScript. This method is seen by some as a little lazy, but there are times
    when there really is no other way to do it than this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start your component, create your Vue project with Vue-CLI, as we did in
    the '*Creating Your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Creating functional
    components*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to separate the recipe into four parts. The first three parts will
    cover the creation of new components –  `StarRatingInput`, `StarRatingDisplay`,
    and `StarRating`–and the last part will cover the parent-child direct manipulation
    of the data and function access.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the star rating input
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are going to create a star rating input, based on a five-star ranking system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a custom star rating input:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `StarRatingInput.vue` in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, create a `maxRating` property in the
    `props` property that is a number, non-required, and has a default value of `5`.
    In the `data` property, we need to create our `rating` property, with the default
    value of `0`. In the `methods` property, we need to create three methods: `updateRating`,
    `emitFinalVoting`, and `getStarName`. The `updateRating` method will save the
    rating to the data, `emitFinalVoting` will call `updateRating` and emit the rating
    to the parent component through a `final-vote` event, and `getStarName` will receive
    a value and return the icon name of the star:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` part of the component, we need to create a `<slot>` component
    to place the text before the star rating. We''ll create a dynamic list of stars
    based on the `maxRating` value that we received via the `props` property. Each
    star that is created will have a listener attached to it in the `mouseenter`,
    `focus`, and `click` events. `mouseenter` and `focus`, when fired, will call the
    `updateRating` method, and `click` will call `emitFinalVote`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to import the Material Design icons into our application. Create a
    new styling file in the `styles` folder called `materialIcons.css`, and add the
    CSS stylesheet rules for `font-family`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `main.js` file and import the created stylesheet into it. The `css-loader` webpack will
    handle the processing of imported `.css` files in JavaScript files. This will
    help development because you don''t need to re-import the file elsewhere:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To style our component, we will create a common styling file in the `src/style` folder
    called `starRating.css`. There we will add the common styles that will be shared
    between the `StarRatingDisplay` and `StarRatingInput` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<style>` part of the component, we need to create all the CSS stylesheet
    rules. Then, on the `StarRatingInput.vue` component file located in the `src/components`
    folder we need to add the `scoped` attribute to `<style>` so that all the CSS
    stylesheet rules won''t affect any other elements in our application. Here, we
    will import the common styles that we created and add new ones for the input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/18715858-a5b0-4fa7-97db-d68268fd190d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the StarRatingDisplay component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have our input, we need a way to display the selected choice to
    the user. Follow these steps to create a `StarRatingDisplay` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new component called `StarRatingDisplay.vue` in the `src/components`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, in the `props` property, we need to
    create three new properties: `maxRating`, `rating`, and `votes`. All three of
    them will be numbers and non-required and have a default value. In the `methods`
    property, we need to create a new method called `getStarName`, which will receive
    a value and return the icon name of the star:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In `<template>`, we need to create a dynamic list of stars based on the `maxRating` value
    that we received via the `props`property. After the list, we need to display that
    we received votes, and if we receive any votes, we will display them too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<style>` part of the component, we need to create all the CSS stylesheet
    rules. We need to add the `scoped` attribute to `<style>`so that all the CSS stylesheet
    rules won''t affect any other elements in our application. Here, we will import
    the common styles that we created and add new ones for the display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows) and execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b65b034f-a304-4975-8858-2bd46e378bce.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the StarRating component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After creating the input and the display, we need to join both together in a
    single component. This component will be the final component that we'll use in
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create the final `StarRating` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `StarRating.vue` in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, we need to import the `StarRatingDisplay`
    and `StarRatingInput` components. In the `props` property, we need to create three
    new properties: `maxRating`, `rating`, and `votes`. All three of them will be
    numbers and non-required, with a default value. In the `data` property, we need
    to create our `rating` property, with a default value of `0`, and a property called
    `voted`, with a default value of `false`. In the `methods` property, we need to
    add a new method called `vote`, which will receive `rank` as an argument. It will
    define `rating` as the received value and define the inside variable of the `voted` component
    as `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` part, we will place both the components, displaying the
    input of the rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Data manipulation on child components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that all of our components are ready, we need to add them to our application.
    The base application will access the child component, and it will set the rating
    to 5 stars.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to understand and manipulate the data in the child
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `App.vue` file, in the `<template>` part of the component, remove the
    `main-text` attribute of the `MaterialCardBox` component and place it as the default
    slot of the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before the placed text, we will add the `StarRating` component. We will add
    a `ref` attribute to it. This attribute will indicate to Vue to link this component
    directly to a special property in the `this` object of the component. In the action
    buttons, we will add the listeners for the click event—one for `resetVote` and
    another for `forceVote`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<script>` part of the component, we will create a `methods` property,
    and add two new methods: `resetVote` and `forceVote`. Those methods will access
    the `StarRating` component and reset the data or set the data to a 5-star vote,
    respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `ref` property is added to the component, Vue adds a link to the referenced
    element to the `$refs` property inside the `this` property object of JavaScript.
    From there, you have full access to the component.
  prefs: []
  type: TYPE_NORMAL
- en: This method is commonly used to manipulate HTML DOM elements without the need
    to call for document query selector functions.
  prefs: []
  type: TYPE_NORMAL
- en: However, the main function of this property is to give access to the Vue component
    directly, enabling you the ability to execute functions and see the computed properties,
    variables, and changed variables of the component—like full access to the component
    from the outside.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the same way that a parent can access a child component, a child can access
    a parent component by calling `$parent` on the `this` object. An event can access
    the root element of the Vue application by calling the `$root` property.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about parent-child communication at [https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Parent-Component-Instance](https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Parent-Component-Instance).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic injected component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some cases where your component can be defined by the kind of variable
    you are receiving or the type of data that you have; then, you need to change
    the component on the fly, without the need to set a lot of Vue `v-if`, `v-else-if`,
    and `v-else` directives.
  prefs: []
  type: TYPE_NORMAL
- en: In those cases, the best thing to do is to use dynamic components, when a computed
    property or a function can define the component that will be used to be rendered,
    and the decision is taken in real time.
  prefs: []
  type: TYPE_NORMAL
- en: These decisions sometimes can be simple if there are two responses, but they
    can be more complex with a long switch case, where you may have a long list of
    possible components to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``@vue/cli-service-global``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue-CLI, as we did
    in the '*Creating Your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Accessing* *your
    children components data*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a dynamic injected component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `StarRating.vue` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, we need to create a `computed` property
    with a new computed value called `starComponent`. This value will check whether
    the user has voted. If they haven''t, it will return the `StarRatingInput` component;
    otherwise, it will return the `StarRatingDisplay` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` part of the component, we will remove both of the existing
    components and replace them with a special component called `<component>`. This
    special component has a named attribute that you can point to anywhere that returns
    a valid Vue component. In our case, we will point to the computed `starComponent` property.
    We will take all the bind props that were defined from both of the other components
    and put them inside this new component, including the text that is placed in `<slot>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the Vue special `<component>` component, we declared what the component
    should render according to the rules set on the computed property.
  prefs: []
  type: TYPE_NORMAL
- en: Being a generic component, you always need to guarantee that everything will
    be there for each of the components that can be rendered. The best way to do this
    is by using the `v-bind` directive with the props and rules that need to be defined,
    but it's possible to define it directly on the component also, as it will be passed
    down as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about dynamic components at [https://vuejs.org/v2/guide/components.html#Dynamic-Components](https://vuejs.org/v2/guide/components.html#Dynamic-Components).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dependency injection component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessing data directly from a child or a parent component without knowing whether
    they exist can be very dangerous.
  prefs: []
  type: TYPE_NORMAL
- en: In Vue, it's possible to make your component behavior like an interface and
    have a common and abstract function that won't change in the development process.
    The process of dependency injection is a common paradigm in the developing world
    and has been implemented in Vue also.
  prefs: []
  type: TYPE_NORMAL
- en: There are some pros and cons to using the internal Vue dependency injection,
    but it is always a good way to make sure that your children's components know
    what to expect from the parent component when developing it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue-CLI, as we did
    in the '*Creating Your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem***, **or use the project from the '*Creating
    a dynamic injected component*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to create a dependency injection component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `StarRating.vue` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, add a new property called `provide`.
    In our case, we will just be adding a key-value to check whether the component
    is a child of the specific component. Create an object in the property with the
    `starRating` key and the `true` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Open the `StarRatingDisplay.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, we will add a new property called `inject`.
    This property will receive an object with a key named `starRating`, and the value
    will be an object that will have a `default()` function. This function will log
    an error if this component is not a child of the `StarRating` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Open the `StarRatingInput.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, we will add a new property called `inject`.
    This property will receive an object with a key named `starRating`, and the value
    will be an object that will have a `default()` function. This function will log
    an error if this component is not a child of the `StarRating` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At runtime, Vue will check for the injected property of `starRating` in the
    `StarRatingDisplay` and `StarRatingInput` components, and if the parent component
    does not provide this value, it will log an error on the console.
  prefs: []
  type: TYPE_NORMAL
- en: Using component injection is commonly used to maintain a way of a common interface
    between bounded components, such as a menu and an item. An item may need some
    function or data that is stored in the menu, or we may need to check whether it's
    a child of the menu.
  prefs: []
  type: TYPE_NORMAL
- en: The main downside of dependency injection is that there is no more reactivity
    on the shared element. Because of that, it's mostly used to share functions or
    check component links.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about component dependency injection at [https://vuejs.org/v2/guide/components-edge-cases.html#Dependency-Injection](https://vuejs.org/v2/guide/components-edge-cases.html#Dependency-Injection).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a component mixin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times where you find yourself rewriting the same code over and over.
    However, there is a way to prevent this and make yourself far more productive.
  prefs: []
  type: TYPE_NORMAL
- en: You can use what is called a `mixin`, a special code import in Vue that joins
    code parts from outside your component to your current component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue-CLI, as we did
    in the recipe '*Creating Your First Project with Vue CLI*' in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Creating a dependency
    injection component*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to create a component mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `StarRating.vue` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part, we need to extract the `props` property into a new
    file called `starRatingDisplay.js` that we need to create in the `mixins` folder.
    This new file will be our first `mixin`, and will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the `StarRating.vue` component, we need to import this newly created
    file and add it to a new property called `mixin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will open the `StarRatingDisplay.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part, we will extract the `inject` property into a new file
    called `starRatingChild.js`, which will be created in the `mixins` folder. This
    will be our `mixin` for the `inject` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the `StarRatingDisplay.vue` file, in the `<script>` part, we will extract
    the `methods` property into a new file called `starRatingName.js`, which will
    be created in the `mixins` folder. This will be our `mixin` for the `getStarName` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the `StarRatingDisplay.vue` file, we need to import those newly created
    files and add them to a new property called `mixin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Open the `StarRatingInput.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part, we remove the `inject` properties and extract the `props`property
    into a new file called `starRatingBase.js`, which will be created in the `mixins` folder.
    This will be our `mixin` for the `props` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the `StarRatingInput.vue` file, we need to rename the `rating` data property to
    `rank`, and in the `getStarName` method, we need to add a new constant that will
    receive either the `rating` props or the `rank` data. Finally, we need to import
    the `starRatingChild` `mixin` and the `starRatingBase` `mixin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mixins work as an object merge, but do make sure you don't replace an already-existing
    property in your component with an imported one.
  prefs: []
  type: TYPE_NORMAL
- en: The order of the `mixins` properties is important as well, as they will be checked
    and imported as a `for` loop, so the last `mixin` won't change any properties
    from any of their ancestors.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we took a lot of repeated parts of our code and split them into four different
    small JavaScript files that are easier to maintain and improve productivity without
    needing to rewrite code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about mixins at [https://vuejs.org/v2/guide/mixins.html](https://vuejs.org/v2/guide/mixins.html).
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading your components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`webpack` and Vue were born to be together. When using `webpack` as the bundler
    for your Vue project, it''s possible to make your components load when they are
    needed or asynchronously. This is commonly known as lazy loading.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue-CLI, as we did
    in the '*Creating Your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml), *Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Creating a component
    mixin*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to import your component with a lazy loading technique:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<script>` part of the component, we will take the imports at the top
    of the script and transform them into lazy load functions for each component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we declare a function that returns an `import()` function for each component,
    `webpack` knows that this import function will be code-splitting, and it will
    make the component a new file on the bundle.
  prefs: []
  type: TYPE_NORMAL
- en: The `import()` function was introduced as a proposal by the TC39 for module
    loading syntax. The base functionality of this function is to load any module
    that is declared asynchronously, avoiding the need to place all the files on the
    first load.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about async components at [https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components](https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the TC39 dynamic import at [https://github.com/tc39/proposal-dynamic-import](https://github.com/tc39/proposal-dynamic-import).
  prefs: []
  type: TYPE_NORMAL
