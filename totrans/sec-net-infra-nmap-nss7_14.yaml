- en: Gaining Network Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be getting insights into how to gain access to a compromised
    system using various techniques and covert channels. We will learn about various
    skills required to gain access to a compromised system including password cracking,
    generating backdoors, and employing deceptive social engineering techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Gaining remote access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating backdoors using Backdoor Factory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting remote services using Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hacking embedded devices using RouterSploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering using SET
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining remote access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have seen various techniques and tools that could be
    used to gather information about the target and enumerate services running on
    the system. We also glanced at the vulnerability assessment process using OpenVAS.
    Having followed these phases, we should now have sufficient information about
    our target in order to actually compromise the system and gain access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gaining access to a remote system can be achieved in either of the two possible
    ways as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Direct access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target behind the router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/07e148ba-258f-4361-ba21-5c7b0e1d1d62.png)'
  prefs: []
  type: TYPE_IMG
- en: In this type, the attacker has direct access to the target system. The attacker
    essentially knows the IP address of the target system and connects to it remotely.
    The attacker then exploits an existing vulnerability on the target system which
    gives further access.
  prefs: []
  type: TYPE_NORMAL
- en: Target behind router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/d8a21e20-2101-4e33-b0bc-818cebe7a0ca.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this scenario, the target machine is behind a router or a firewall with **Network
    Address Translation** (**NAT**) enabled. The target system has private IP address
    and isn't directly accessible over the internet. The attacker can only reach to
    the public interface of the router/firewall but won't be able to reach to the
    target system. In this case, the attacker will have to send the victim some kind
    of payload either through email or messenger and once the victim opens the payload,
    it will create a reverse connection back to the attacker passing through the router/firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Password is one of the basic mechanism used for authenticating a user into
    a system. During our information gathering and enumeration phase, we may come
    across various services running on the target which are password-protected such
    as SSH, FTP, and so on. In order to gain access to these services, we will want
    to crack passwords using some of the following techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dictionary attack**: In a dictionary attack, we feed the password cracker
    a file with a large number of words. The password cracker then tries all the words
    from the supplied file as probable passwords on the target system. If matched,
    we are presented with the correct password. In Kali Linux, there are several word-lists
    which can be used for password cracking. These word-lists are located in `/usr/share/wordlists` as
    shown in the following image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1edc9e1f-b289-4e44-a010-ad8a88884d4f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Brute-force attack**: If password isn''t any of the words from the word-list
    we provided, then we might have to launch a brute-force attack. In a brute-force
    attack, we first specify the minimum length, maximum length, and a custom character
    set. The password cracker then tries all permutations and combinations formed
    out of this character set as a probable password on the target. However, this
    process is resource and time-consuming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rainbow tables**: A password is never stored on a system in plain-text format.
    It is always hashed using some kind of algorithm in order to make it unreadable.
    Rainbow tables have pre-computed hashes for passwords within the given character-set.
    If we have password hashes from the target system then we could feed them to the
    rainbow tables. The rainbow tables will try for a possible match in their existing
    hash tables. This method works very fast as compared to brute-force but requires
    a huge amount of computing resources and storage space to store the rainbow tables.
    Also, the rainbow tables get defeated if the password hashes are stored with a
    salt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying hashes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we learned in the previous section, passwords are never stored in a plain-text
    format and are always hashed using some kind of algorithm. In order to crack the
    password hash, we first must identify what algorithm has been used to hash the
    password. Kali Linux has a tool called `hash-identifier` which takes a password
    hash as an input and tells us the probable hash algorithm used, as shown in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ea1c199-1562-47f2-9a65-33191e305d05.png)'
  prefs: []
  type: TYPE_IMG
- en: Cracking Windows passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows operating system stores passwords in a file called **Security Accounts
    Manager** (**SAM**) and the type of hashing algorithm used is LM or NTLM.
  prefs: []
  type: TYPE_NORMAL
- en: We first exploit an SMB vulnerability in a remote Windows system and get Meterpreter
    access using Metasploit as shown in the following image. The Meterpreter has a
    very useful utility called `mimikatz` which can be used to dump hashes or even
    plain-text passwords from the compromised system. We initiate this tool using
    command `load mimikatz`. Then we use a command `kerberos` to reveal plain-text
    credentials. We get to know that the user `shareuser` has a password `admin`.
    Using the `msv` command we can also dump the raw hashes from the compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e48e8443-7460-457a-a3da-5963f34ca50e.png)'
  prefs: []
  type: TYPE_IMG
- en: Password profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already learned about the dictionary attacks in the previous section.
    During a particular engagement with an organization we may identify a certain
    pattern that is used for all the passwords. So, we may want to have a word-list
    inline with a particular pattern. Password profiling helps us generate word-lists
    aligned with the specific pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux has a tool called crunch which helps us generate word-lists using
    custom patterns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding syntax will generate a word-list with words of minimum length
    `3`, maximum length `5`, and containing all possible permutations and combinations
    from the character-set `0123456789abcedefghijklmnopqrstuvwxyz`. For further help,
    we can refer to crunch help using `man crunch` command, as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28d696ec-ba0d-464c-bc8c-74169eb15601.png)'
  prefs: []
  type: TYPE_IMG
- en: Password cracking with Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hydra is a very powerful and efficient password cracking tool that is part
    of the default Kali Linux installation. Hydra is capable of cracking passwords
    for various protocols such as FTP, SSH, HTTP, and so on. Hydra can be launched
    from the Terminal as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command would launch a password cracking attack against the FTP
    server running on IP address `192.168.25.129` and try out all passwords from the
    word-list `passlist.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8336a925-45e9-433d-ae5e-7b330f546345.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating backdoors using Backdoor Factory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A quick look at the dictionary meaning of the word *backdoor* gives us *achieved
    by using indirect or dishonest means*. In the computing world, backdoors are something
    which are hidden and are used to get covert entry into the system. For example,
    if we get a plain executable file from some unknown person, we may get suspicious.
    However, if we get a genuine-looking installer then we might execute it. However,
    that installer might have a hidden backdoor which may open up our system to the
    attacker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a backdoor typically involves patching a genuine looking executable
    with our shellcode. Kali Linux has a special tool `backdoor-factory` which helps
    us create backdoors. The `backdoor-factory` can be launched from the Terminal
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8828717-27b8-4953-9444-5adcae216d36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now execute the command as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command would open the file `putty.exe` located at `/root/Desktop`, inject
    reverse TCP shell into the executable, and configure the backdoor to connect to
    IP address `192.168.25.128` on port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/449ab564-d3ff-4dc3-ac34-02f899f8c991.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploiting remote services using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we go ahead and exploit the services on remote target system, we must
    know what all the services are running and what their exact versions are. We can
    do a quick Nmap scan to list service version information as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f5eb0a3-9ef4-43cf-b24e-866fbdbc4d18.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding result shows there are many services running which we can exploit
    using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting vsftpd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the Nmap scan and enumeration, we got to know that our target is running
    an FTP server. The server version is vsftpd 2.3.4 and is active on port `21`.
    We open the Metasploit framework using the `msfconsole` command and then search
    for any exploit matching vsftp as shown in the following image.  Metasploit has
    an exploit `vsftpd_234_backdoor` which we can use to compromise the target.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/259023a6-5f31-4e3f-9422-fc5126c83c4c.png)'
  prefs: []
  type: TYPE_IMG
- en: We select the vsftp exploit and set the `RHOST` parameter as the IP address
    of the target. Then we run the exploit as shown in the following image. The exploit
    was successful and it opened up a command shell. Using the `whoami` command, we
    could know that we have got root access to our target.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/864c6961-227f-4496-9ba0-5c1aedfa92a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploiting Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Nmap scan and enumeration, we got to know that our target is running
    an Apache Tomcat web server. It is active on port `8180`. We can hit the target
    IP on port `8180` through the browser and see the web server default page as shown
    in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48a49955-7d12-40fc-8b78-f2862cef598b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we open up the Metasploit console and search for any exploits matching
    Tomcat server as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db477a4a-6134-4a36-a98a-e6b744834105.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll use the exploit `tomcat_mgr_deploy` as shown in the following image. We
    implicitly select the exploit payload as `java/meterpreter/reverse_tcp`  and then
    configure other options such as RHOST, LHOST, the default username/password, and
    the target port.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5dfde7ad-287c-411e-b0a6-7ac4d00c3cca.png)'
  prefs: []
  type: TYPE_IMG
- en: The exploit was successful and it gave us a Meterpreter session.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking embedded devices using RouterSploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how Metasploit can be effectively used for
    exploiting remote services. The targets were mainly Windows and Linux operating
    systems. The number of internet-connected devices is rapidly increasing. These
    devices have embedded firmware which are also prone to attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'RouterSploit is a command-line tool which can be used for exploiting embedded
    devices. However, it isn''t part of the default Kali Linux installation. We can
    install RouterSploit using the command `apt-get install routersploit`. Once installed
    it can be launched from the Terminal by typing in `routersploit` as shown in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24f5b3ff-54d5-4500-95ed-006fc1b4bcf0.png)'
  prefs: []
  type: TYPE_IMG
- en: RouterSploit has an interface very similar to that of the Metasploit console.
    We can quickly scan the target device using the `scanners/autopwn` option as shown
    in the following image. We simply set the target IP address and run the scanner.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb3bd827-da78-4682-8653-49bc1cabbf03.png)'
  prefs: []
  type: TYPE_IMG
- en: Social engineering using SET
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the very first section of this chapter we saw two possible scenarios of exploitation.
    Either the attacker has direct access to the target system or the target system
    is behind the router/firewall and the attacker can reach only till the public
    interface of router/firewall.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the second scenario, the attacker has to send some kind of payload
    to the victim and trick him into executing the payload. Once executed, it will
    establish a reverse connection back to the attacker. This is a covert technique
    and involves the use of social engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux offers an excellent framework for performing various social engineering
    attacks. The social engineering toolkit can be accessed at Applications | Exploitation
    Tools | SET.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial screen of SET gives various options related to social engineering
    attacks as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a49ffa50-d0a5-4aa3-b225-17994962a780.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We select option `1) Social-Engineering Attacks` and then we are presented
    with an array of attacks as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1284b55e-b5ec-44aa-8020-e6fe449da437.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We select option `4) Create a Payload and Listener` and then select the payload
    `Windows Shell Reverse_TCP`. Then we set the IP address and port for the listener
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af9b11b1-991a-4554-9aaf-b6d01256f4f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'SET automatically launches Metasploit and starts the listener. As soon as our
    victim downloads and executes the payload, a Meterpreter session opens up as shown
    in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a408fa9-ea5b-49e6-9798-ca58e1745269.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we covered various tools and techniques for getting access to
    our target system including cracking passwords, creating backdoors, exploiting
    services, and launching social engineering attacks.
  prefs: []
  type: TYPE_NORMAL
