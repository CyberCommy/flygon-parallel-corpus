- en: Text Processing and Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about text processing and regular expressions.
    Text processing is a process of creating or modifying the text. Python has a very
    powerful library called regular expressions that does tasks such as searching
    and extracting the data. You will learn how to do it with files and also learn
    to read and write to files.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to learn about the `re` Python module for regular expressions and
    processing text in Python. We are going to learn about the `match()`, `search()`,
    `findall()`, and `sub()` functions of `re` module. We are also going to learn
    about text wrapping in Python using the `textwrap` module. Finally, we will learn
    about unicode characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Text wrapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text wrapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about the `textwrap` Python module. This module
    provides the `TextWrapper` class that does all the work. The `textwrap` module
    is used for formatting and wrapping plain text. This module provides five main
    functions: `wrap()`, `fill()`, `dedent()`, `indent()`, and `shorten()`. We are
    going to learn these functions one by one now.
  prefs: []
  type: TYPE_NORMAL
- en: The wrap() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `wrap()` function is used to wrap an entire paragraph in to a single string.
    The output will be a list of output lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is `textwrap.wrap(text, width)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text`: Text to wrap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width`: Maximum length allowed of a wrapped line. The default value is `70`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we will see an example of `wrap()`. Create a `wrap_example.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `textwrap` module of Python. First, we
    created a string named `sample_string`. Next, using the `TextWrapper` class we
    specified the width. Next, using the `wrap` function the string was wrapped to
    the width of `30`. And next, we printed the lines.
  prefs: []
  type: TYPE_NORMAL
- en: The fill() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `fill()` function works similarly to `textwrap.wrap`, except it returns
    the data joined into a single, newline-separated string. This function wraps the
    input in text and returns a single string containing the wrapped text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`text`: Text to wrap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width`: Maximum length allowed of a wrapped line. The default value is `70`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we will see an example of `fill()`. Create a `fill_example.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `fill()` function. The procedure is the
    same as what we did in `wrap()`. First, we created a string variable. Next, we
    created the `textwrap` object. Then, we applied the `fill()` function. Finally,
    we printed the output.
  prefs: []
  type: TYPE_NORMAL
- en: The dedent() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dedent()` is another function of the `textwrap` module. This function removes
    the common leading `whitespaces` from every line of your text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`text` is the text to `dedent`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will see an example of `dedent()`. Create a `dedent_example.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we created a `str1` string variable. Then we used `textwrap.dedent()` to
    remove the common leading whitespaces. Tabs and spaces are considered whitespaces,
    but they are not equal. Therefore, the only common whitespace, which in our case
    is `tab`, is removed.
  prefs: []
  type: TYPE_NORMAL
- en: The indent() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `indent()` function is used to add the specified prefix to the beginning
    of the selected lines in your text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`text`: The main string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefix`: The prefix to add'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a `indent_example.py` script and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `fill()` and `indent()` functions of the
    `textwrap` module. First, we used the `fill` method to store the data into the `w` variable. Next,
    we used the `indent` method. Using `indent(),` each line in the output will have
    a `*` prefix. And next, we printed the output.
  prefs: []
  type: TYPE_NORMAL
- en: The shorten() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This function of the `textwrap` module is used truncate the text to fit in the
    specified width. For example, if you want to create a summary or preview, use
    the `shorten()` function. Using `shorten()`, all the whitespaces in your text
    will get standardized into a single space.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will see an example of `shorten()`. Create a `shorten_example.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `shorten()` function to truncate our text
    and fit that text in a specified width. First, all the whitespaces truncated into
    the single space. If the result fited in the specified width, the result was displayed
    on the screen. If not, then the words of the specified width was displayed on
    the screen and the rest was placed in the placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about regular expressions in Python.
    Regular expression is a specialized programming language, which is embedded in
    Python and is available to users through the `re` module. We can define the rules
    for the set of strings that we want to match. Using regular expressions, we can
    extract specific information from files, code, documents, spreadsheets, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, a regular expression is denoted as `re` and can be imported through
    the `re` module. Regular expressions support four things:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whitespace characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table lists the identifiers, and there''s a description for each
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Identifier** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `\w` | Matches alphanumeric characters, including underscore (`_`) |'
  prefs: []
  type: TYPE_TB
- en: '| `\W` | Matches non-alphanumeric characters, excluding underscore (`_`) |'
  prefs: []
  type: TYPE_TB
- en: '| `\d` | Matches a digit |'
  prefs: []
  type: TYPE_TB
- en: '| `\D` | Matches a non-digit |'
  prefs: []
  type: TYPE_TB
- en: '| `\s` | Matches a space |'
  prefs: []
  type: TYPE_TB
- en: '| `\S` | Matches anything but a space |'
  prefs: []
  type: TYPE_TB
- en: '| `.` | Matches a period (`.`) |'
  prefs: []
  type: TYPE_TB
- en: '| `\b` | Matches any character except a new line |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists the modifiers, and there''s a description for each
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Modifier** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `^` | Matches start of the string |'
  prefs: []
  type: TYPE_TB
- en: '| `$` | Matches end of the string |'
  prefs: []
  type: TYPE_TB
- en: '| `?` | Matches `0` or `1` |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Matches `0` or more |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Matches `1` or more |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;` | Matches either or `x/y` |'
  prefs: []
  type: TYPE_TB
- en: '| `[ ]` | Matches range |'
  prefs: []
  type: TYPE_TB
- en: '| `{x}` | Amount of preceding code |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists the whitespace characters, and there''s a description
    for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Character** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `\s` | Space |'
  prefs: []
  type: TYPE_TB
- en: '| `\t` | Tab |'
  prefs: []
  type: TYPE_TB
- en: '| `\n` | New line |'
  prefs: []
  type: TYPE_TB
- en: '| `\e` | Escape |'
  prefs: []
  type: TYPE_TB
- en: '| `\f` | Form feed |'
  prefs: []
  type: TYPE_TB
- en: '| `\r` | Return |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists the flags, and there''s a description for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Flag** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `re.IGNORECASE` | Case-insensitive matching |'
  prefs: []
  type: TYPE_TB
- en: '| `re.DOTALL` | Matches any character including new lines |'
  prefs: []
  type: TYPE_TB
- en: '| `re.MULTILINE` | Multiline matching |'
  prefs: []
  type: TYPE_TB
- en: '| `Re.ASCII` | Makes escape match only on ASCII characters |'
  prefs: []
  type: TYPE_TB
- en: Now we are going to see some examples of regular expressions. We are going to
    learn about the `match()`, `search()`, `findall()`, and `sub()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: To use regular expressions in Python, you must import the `re` module in your
    scripts so that you will be able to use all the functions and methods for regular
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to learn about these functions one by one in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: The match() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `match()` function is a function of the `re` module. This function will
    match the specified `re` pattern with the string. If the match is found, a `match`
    object will be returned. A `match` object will contain the information about the
    `match`. If a match is not found, we will get the result as `None`. The `match`
    object has two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`group(num)`: Returns an entire match'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups()`: Return all matching subgroups in tuple'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax for this function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going see an example of `re.match()`. Create a `re_match.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we imported the `re` module to use regular expressions
    in Python. Then we created a `str_line` string. Next, we created an `obj` match
    object and store the match pattern result in it. In this example, the `(.*) enjoy
    (.*?) .*` pattern will print everything before the `enjoy` keyword, and it will
    print only one word after the `enjoy` keyword. Next, we used the `groups()` method
    of `match` object. It will print all the matched substrings in a tuple. So, the
    output you will get will be, `('This is python tutorial. Do you', 'learning')`.
  prefs: []
  type: TYPE_NORMAL
- en: The search() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `search()` function of the `re` module will search through a string. It
    will look for any location for the specified `re` pattern. The `search()` will
    take a pattern and text and it will search through our specified string for a
    match. It will return a `match` object when a match is found. It will return `None`
    if no match found. The `match` object has two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`group(num)`: Returns an entire match'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups()`: Returns all matching subgroups in tuple'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax for this function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `re_search.py` script and write following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we used the `search()` method of `match` object to
    find the `re` pattern. After importing the re module, we specified the pattern
    in a list. In that list, we wrote two strings: `programming` and `hello`. Next,
    we created a string: `Python programming is fun`. We wrote a for loop that will
    check for a specified pattern one by one. If a match is found, the `if` block
    will be executed. If no match is found, the `else` block will be executed.'
  prefs: []
  type: TYPE_NORMAL
- en: The findall() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the methods of the `match` object. The `findall()` method finds
    all the matches and then returns them as a list of strings. Each element of the
    list represents as a match. This method searches for the pattern without overlapping.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `re_findall_example.py` script and write the following content in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we have written three examples of the `findall()` method.
    In the first example, we defined a pattern and a string. We found that pattern
    from the string using the `findall()` method and then printed it. In the second
    example, we created a string and we found the words whose first two letters are
    `pe` using `findall()` and then printing them. We will get the list of words whose
    first two letters are `pe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, we found the words whose first three letters are `pic` and then
    print them. Here, also, we will get the list of strings. In the third example,
    we created a string in which we specified `hello` in uppercase and lowercase,
    and a word: `bye`. Using `findall()`, we find the words whose first two letters
    are `he`. Also in `findall()`, we used a `re.IGNORECASE` flag that will ignore
    the case of the word and printed them.'
  prefs: []
  type: TYPE_NORMAL
- en: The sub() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the most important functions of the re module. The `sub()` is
    used for replacing the `re` pattern with the specified replacement. It will replace
    all the occurrences of the `re` pattern with the replacement string. The syntax
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`pattern`: The `re` pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repl_str`: The replacement string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string`: The main string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count`: The number of occurrences to be replaced. The default value is `0`,
    which means replacing all occurrences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we are going to create a `re_sub.py` script and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used `sub()` to replace the `re` pattern with a
    specified replacement string. We replaced `Peter` with `Mary`. So, all the occurrences
    of Peter will be replaced by Mary. Next, we also included the `count` parameter.
    We mentioned `count=1`: it means only one occurrence of Peter will be replaced
    and other occurrences of Peter will remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will learn about the `subn()` function of the re module. The `subn()`
    function works the same as `sub()` with the additional functionality. The `subn()`
    function will return a tuple containing the new string and the number of replacements
    performed. Let''s look at an the example of `subn()`. Create a `re_subn.py` script and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `subn()` function to replace the RE pattern.
    As a result, we got a tuple containing the replaced string and the number of replacements.
  prefs: []
  type: TYPE_NORMAL
- en: Unicode strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about how to print Unicode strings in
    Python. Python handles Unicode strings in a very easy way. The string type actually
    holds Unicode strings, not a sequence of bytes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `python3` console in your system and start writing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Unicode code point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about the unicode code point. Python
    has a powerful built-in function named `ord()` to get a Unicode code point from
    a given character. So, let''s see an example of getting a Unicode code point from
    a character, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The transformation from Unicode code point to byte string is known as encoding.
    So, let''s see an example of how to encode Unicode code point, as shown in following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Decoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The transformation from a byte string to a Unicode code point is known as decoding. So,
    let''s see an example of how to decode a byte string to get a Unicode code point
    as shown in following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Avoiding UnicodeDecodeError
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`UnicodeDecodeError` occurs whenever byte strings cannot decode to Unicode
    code points. To avoid this exception, we can pass `replace`, `backslashreplace`,
    or `ignore` to the error argument in `decode` the as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about regular expressions, using which we can define
    the rules for a set of strings that we want to match. We learned about the four
    functions of the `re` module: `match()`, `search()`, `findall()`, and `sub()`.'
  prefs: []
  type: TYPE_NORMAL
- en: We learned about the `textwrap` module, which is used for formatting and wrapping
    plain text. We also learned about the `wrap()`, `fill()`, `dedent()`, `indent()`,
    and `shorten()` functions of the `textwrap` module. Finally, we learned about
    the Unicode characters and how to print the Unicode strings in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about standard documenting and reporting
    of information using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a regular expression in Python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to check that a string contains only a certain set of
    characters (in this case, `a–z`, `A–Z`, and `0–9`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which module in Python supports regular expressions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) `re`
  prefs: []
  type: TYPE_NORMAL
- en: b) `regex`
  prefs: []
  type: TYPE_NORMAL
- en: c) `pyregex`
  prefs: []
  type: TYPE_NORMAL
- en: d) None of the above
  prefs: []
  type: TYPE_NORMAL
- en: What does the `re.match` function do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Matches a pattern at the start of the string
  prefs: []
  type: TYPE_NORMAL
- en: b) Matches a pattern at any position in the string
  prefs: []
  type: TYPE_NORMAL
- en: c) Such a function does not exist
  prefs: []
  type: TYPE_NORMAL
- en: d) None of the above
  prefs: []
  type: TYPE_NORMAL
- en: What is the output of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sentence: `"we are humans"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Matched: `re.match(r''(.*) (.*?) (.*)''`, `sentence)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`print(matched.group())`'
  prefs: []
  type: TYPE_NORMAL
- en: a) `('we', 'are', 'humans')`
  prefs: []
  type: TYPE_NORMAL
- en: b) `(we, are, humans)`
  prefs: []
  type: TYPE_NORMAL
- en: c) `('we', 'humans')`
  prefs: []
  type: TYPE_NORMAL
- en: d) `'we are humans'`
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regular expressions: [https://docs.python.org/3.2/library/re.html](https://docs.python.org/3.2/library/re.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Textwrap documentation: [https://docs.python.org/3/library/textwrap.html](https://docs.python.org/3/library/textwrap.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unicode documentation: [https://docs.python.org/3/howto/unicode.html](https://docs.python.org/3/howto/unicode.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
