- en: '*Chapter 1*: Installing and Setting Up Cypress'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cypress is an end-to-end test automation framework built and engineered for
    modern web applications. It focuses on eliminating inconsistencies in tests by
    ensuring that you can write, debug, and run tests on the browser without needing
    additional configuration or additional packages. Cypress works as a standalone
    application and can be installed on macOS, Unix/Linux, and Windows operating systems
    either using Hyphenate applications or command-line tools. Cypress was mainly
    built for developers who write their applications using JavaScript because it
    can be used to test all applications that run on a browser. In this chapter, we
    are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cypress on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Cypress on macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Cypress via direct download
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening the Cypress test runner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching Cypress browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding npm scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Cypress tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how to properly set up Cypress
    on both Windows and Mac operating systems and how to run Cypress tests. You will
    also understand how npm scripts can be used to automate the process of running
    tests and opening the test runner.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cypress can be installed as a standalone application on your computer and can
    be run on a machine that has at least 2 GB of RAM and that meets any of the following
    operating system requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: macOS 10.9 and above (64-bit only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux Ubuntu 12.04 and above, Fedora 21, and Debian 8 (64-bit only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 7 and above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to use Cypress on one of the operating systems listed here, Node.js
    8 or above must be installed first. Node.js is a JavaScript runtime environment
    that allows JavaScript code to be run outside the browser. Installing Node.js
    installs npm, which allows us to install JavaScript packages from [https://www.npmjs.com/](https://www.npmjs.com/).
    npm is the default package manager for Node.js, and users can either use it or
    use third-party package managers such as Yarn. In this section, we will install
    Cypress on both macOS and Windows operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cypress on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will install Cypress and Node.js on Windows operating systems
    so that we can run our tests.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you through the installation of Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the official Node.js website ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Windows installer option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the installer package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Node.js package by following the instructions on the Node.js website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's initialize the project.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a best practice, Cypress is installed in the directory where the project
    is located; that way, we can be sure that the Cypress tests belong to the project.
    In our case, we will create a folder inside `Documents` and call it `cypress-tests`,
    then navigate to that directory when installing Cypress. We can use the following
    commands in a Windows PowerShell terminal to create the `cypress-tests` directory
    and navigate to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After these commands are run successfully, we will then launch PowerShell and
    navigate to the directory that we just created with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the directory, we will then initialize an empty JavaScript project
    by running the following command in PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will create a default `package.json` file that will be used to define our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cypress on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now install Cypress using npm in our project directory with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After running this command, you should be able to see the installation of Cypress
    and the installation's progress. This approach installs Cypress as a `dev` dependency
    for our empty project.
  prefs: []
  type: TYPE_NORMAL
- en: For the macOS installation, please refer to the next main section.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ Installing Cypress on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how to install Cypress on the Windows operating
    system. We also learned how to use PowerShell to add Cypress to a project and
    also how to initialize an empty project. In the next section, we will look at
    how to install Cypress on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cypress on MacOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I will be using a macOS machine to install both Cypress and
    Node.js. By the end of this section, you will have learned how to initialize an
    empty JavaScript project and also how to add the Cypress testing framework to
    macOS. We will also dive into how we can use either npm, Yarn, or direct Cypress
    downloads in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will guide you through the installation of Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the official Node.js website ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the macOS installer option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the installer package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Node.js package following the instructions on the Node.js website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's initialize the project.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Cypress, we need to navigate to the project folder and install it
    where we want the Cypress tests to be located. In our case, we will create a folder
    inside `Documents` and call it `cypress-tests`, then navigate to that directory
    when installing Cypress using our terminal. We will then launch our terminal application
    and navigate to the directory that we just created using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the directory, we will then initialize an empty JavaScript project
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will create a default `package.json` file that will be used to define our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cypress on Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Cypress, we will use the npm package manager that Node.js comes
    packaged with. To achieve this, we need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After running this command, you should be able to see the installation of Cypress
    in the `package.json` file and the installation progress on the command line.
    This approach installs Cypress as a `dev` dependency for our empty project.
  prefs: []
  type: TYPE_NORMAL
- en: For an alternative package manager that you can use with both Windows and macOS,
    you can use Yarn. We'll see how to install Cypress using Yarn in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cypress using Yarn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In both Windows and macOS, you can choose an alternative package manager. One
    of the available alternatives is the Yarn package manager. Just like npm, you
    first need to download the Yarn package manager using the macOS Homebrew package
    manager by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Just like npm, Yarn does the job of managing dependencies for your project and
    can be used as a project manager. An advantage that Yarn has over npm is that
    it is able to cache downloaded packages in such a way that it does not need to
    re-download the dependencies, therefore leading to better utilization of resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation of Yarn, we can use it to install packages as we would
    with npm by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have one final installation method, which is via direct download. This will
    be covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cypress via direct download
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can install Cypress for Windows, Linux, or macOS via direct download. This
    approach is recommended if you do not need to install the dependencies that come
    with Cypress or if you are only trying Cypress out. It is important to note that
    although this is the quickest way to install Cypress, this version does not come
    with features such as the ability to record tests to the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will guide you through the installation of Cypress via
    direct download:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://cypress.io](https://cypress.io).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Download Now** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cypress will automatically download as it will automatically detect the operating
    system of the user downloading the .zip file. You should then extract the zip
    file and run Cypress without installing any other dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ Installing Cypress on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how to install the Cypress test framework on macOS
    using npm and also how to initialize an empty JavaScript project that will utilize
    the Cypress tests. We also learned how to use the Yarn package manager to install
    Cypress and how to directly download Cypress into our project without using any
    package managers. In the next section, we will look at how to open the Cypress
    test framework.
  prefs: []
  type: TYPE_NORMAL
- en: Opening Cypress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Cypress is the first step on the journey of writing end-to-end tests;
    now, we need to learn how to use the tools that Cypress provides to run the tests
    using both the graphical user interface and the dashboards. There are four ways
    to run the Cypress executable that has been installed on your machine. After opening
    Cypress, you should then see the Cypress test runner. No matter which way you
    open Cypress, the test runner dashboard that you are presented with is the same.
    The following sections detail the different ways to open and run Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Running with Npx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'npx is used to execute npm package binaries and comes with all npm versions
    from version 5.2\. Npx can also be installed using npm from `npmjs.com`. To run
    Cypress using npx, you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Running with Yarn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If Cypress was installed using Yarn, you can then open Cypress using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Running with the node modules path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cypress can also be run by referencing the root path of the installation on
    the node modules. This can either be by using the full path to the `node_modules`
    bin where the Cypress executable is located or by using the npm bin shortcut,
    as shown in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Launching Cypress using the full path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method of launching Cypress references the installed Cypress executable
    located in `node_modules` and works by running the executable to open Cypress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Launching Cypress using the shortcut
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just like launching Cypress using the full path, this method launches Cypress
    in the same way but instead of referencing the full path, it uses the npm bin
    variable to locate the default location of the `node_modules` bin folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Desktop application launch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you downloaded your application as a desktop application, you can open Cypress
    by navigating to the location of the unzipped Cypress folder and clicking the
    Cypress executable that is present in the folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully opened Cypress via our preferred method, we will
    look at how we can choose alternative browsers in Cypress if we do not wish to
    use the default browser that comes packaged with Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ Opening Cypress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how to open the Cypress test framework dashboard
    and also how to run Cypress in different ways, including running the Cypress dashboard
    using *npx*, *Yarn*, or with the *node_modules* path. In the next section, we
    will learn how to switch the browsers of tests running in Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Switching browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cypress comes with Electron as the default browser on installation, but it can
    also integrate with other compatible browsers that contain the **Chromium project**,
    with the exception of Firefox. Currently, Cypress supports Firefox browsers Chrome
    browsers, Chromium, and Edge browsers. When launching Cypress, it will automatically
    find all the compatible browsers on the running machine and you will be able to
    switch between any of the browsers at any time using the test runner. To switch
    from one browser to another, you will need to click on the browser button at the
    top right and choose an alternative browser from the drop-down link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cypress tests can also be run or opened on different browsers using the command
    line, and this can be achieved by specifying the browser while opening the Cypress
    test runner or running the Cypress tests. All Chromium-based browsers, Edge, and
    Firefox can be launched using the command line with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `browser-name` specified in the command can either be Edge, Chrome, or
    Firefox. To specify the path of the browser that Cypress should launch, you can
    choose to run the browser name with the executable binary of the browser instead
    of the name of the browser, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Being able to switch browsers in Cypress ensures that a user can run their test
    suite on different devices and verify that the output from different browsers
    is consistent throughout the test suite. Switching browsers on Cypress also ensures
    that the verification of tests can take place and that all elements visible or
    actions that can be performed on one browser can be performed on another browser.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use the knowledge we've gained so far to try out a practical exercise
    with Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To combine the knowledge of opening Cypress and switching browsers, have a
    go at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the folder we created while initializing Cypress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run all the default tests that Cypress autogenerated when it was launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch the browsers on the test runner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rerun the tests with a different browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have learned how to run Cypress tests in different browsers, in
    the next section, we will explore how we can automate the process of running tests
    using npm scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ Switching browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned the different browsers that Cypress supports and
    how to switch different Cypress browsers either using the command line or using
    the Cypress dashboard. We also went through a simple exercise to help us understand
    how Cypress browser switching works and also how we run our tests using Cypress.
    In the next section, we will look at adding npm scripts to our `package.json`
    file to automate some of the Cypress tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Adding npm scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`scripts` is a `package.json` property that gives a user the ability to run
    commands via the command line in JavaScript applications. npm scripts can be used
    to add environment variables to the properties of an application, package applications
    into production-ready bundles, run tests, or automate any other activity in JavaScript
    applications. npm scripts can either be used as defined by `npmjs.com` or customized
    based on the user''s preferences and applications. In this section, we will learn
    how to write npm scripts to run our Cypress tests, to open our Cypress tests,
    and even to combine different npm scripts to achieve different results.'
  prefs: []
  type: TYPE_NORMAL
- en: Opening a Cypress command script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a `scripts` command to open Cypress, you need to write the script
    name then add the command that npm will run when the script is executed. In this
    case, our command to open Cypress will be embedded in a script called `open`.
    We can achieve this by adding the following command to the `scripts` object in
    `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To run the `open` command, you simply need to run the `npm run open` command,
    and the test runner should open on the default browser selected in the Cypress
    test runner.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ Adding npm scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned what npm scripts are and how to add them to the
    `package.json` file. We also learned how we can run the npm scripts that we have
    added to our `package.json` file to execute and automate tasks in our projects.
    Next, we'll learn how to run tests in Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Running Cypress tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will focus on how we can run Cypress tests on the browser.
    To do this, we will write test scripts that can run the tests similarly to opening
    Cypress scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding scripts will be used to run tests either in the Chrome browser
    or in the Firefox browser depending on what command the user runs on their command-line
    terminal. To execute the tests, you can either run `npm run test:chrome` to run
    the tests in Chrome or `npm run test:firefox` to execute the tests in Firefox.
    The first section of the command instructs Cypress to run the tests in headless
    mode, while the second section instructs Cypress which browser to run the tests
    in. Running Cypress tests is not limited to only Chrome and Firefox and can be
    extended to any browsers that Cypress supports, with the option to customize the
    run script's name as you desire.
  prefs: []
  type: TYPE_NORMAL
- en: Combining Cypress commands using scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `scripts` object in `package.json` gives you the flexibility to combine
    commands to create advanced commands that can carry out different functions, such
    as passing an environment variable to the tests being run, or even instructing
    Cypress to run different tests depending on the variable that has been passed.
    Combining Cypress commands ensures that we write short reusable statements that
    we can then use to construct a command that performs multiple functions when run.
    In the following example, we will use the `scripts` object to write a command
    to open Cypress, set the port, set the environment, and set the browser to either
    Chrome or Firefox depending on the command that we choose to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding scripts can run Cypress tests in two browsers. The scripts also
    assist in the identification of the environment to run the tests as specified
    by the `â€“env` variable. The last two scripts combine a series of scripts that
    run Cypress, attach an environment variable, and select the browser on which to
    run the tests, something that makes the scripts functionality of `package.json`
    very useful when it comes to writing Cypress commands to be executed in the test
    suite. To run the tests in Firefox, we simply run the `npm run test:uat:firefox`
    command for UAT or `test:dev:firefox` for the `dev` environment. You can also
    run Chrome tests with `test:uat:chrome` for UAT tests in Chrome and `test:dev:chrome`
    for the `dev` environment tests.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To run tests in different environments, you need to have configurations for
    running the tests in the different environments already set up in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ Running Cypress tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we looked at how to execute our tests in Cypress. We also looked
    at different ways for our npm scripts to execute our tests by passing environment
    variables and changing parameters such as the browser in the scripts to run our
    tests. We also learned how to combine multiple Cypress commands to run our tests
    and therefore reduce the amount of code that we need to write.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about installing Cypress both on Windows and on
    Mac operating systems. With both installations, we covered installing Cypress
    as a downloaded application or via the command line. We also covered using either
    the default package manager that comes with Node.js (npm) or third-party dependency
    managers such as Yarn. We learned how to utilize the test runner to run our tests
    and also how to automate our scripts in `package.json` to help us run our tests
    effectively. To test our knowledge, we also had an exercise where we practiced
    running tests in different Cypress browsers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be diving into the differences between Selenium
    and Cypress and why Cypress should be the preferred choice. We will be building
    further on the understanding of Cypress that we have gained in this chapter.
  prefs: []
  type: TYPE_NORMAL
