- en: '*Chapter 6*: Displaying Data in Charts and with Custom 2D Graphics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will look at apps that need to show graphs, reports, and complex
    graphics. It's common for apps to include some sort of graph or chart. It's also
    becoming increasingly common to include elements in the UI that can't easily be
    made with standard controls.
  prefs: []
  type: TYPE_NORMAL
- en: As we progress through this chapter, we'll build a dashboard app for our fictional
    business that will display information appropriate to different parts of the business.
    Such apps are common as part of management reporting tools. You can imagine the
    different screens being displayed on monitors mounted on the walls in each department.
    This enables staff to instantly see what's going on in their part of the business.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying graphs and charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom graphics with SkiaSharp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having the UI layout respond to changes in the screen size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have created a dashboard app that shows financial,
    operational, and network information that runs on UWP and the web. It will also
    adjust to different screen proportions, so the contents of each page account for
    different screen sizes and aspect ratios.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you already have your development environment set
    up, including installing the project templates, as was covered in [*Chapter 1*](B17132_01_Final_VK_ePub.xhtml#_idTextAnchor015),
    *Introducing Uno Platform*. The source code for this chapter is at [https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/Chapter06](https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: The code in this chapter makes use of the library from [https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/SharedLibrary](https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/SharedLibrary).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action: [https://bit.ly/3iDchtK](https://bit.ly/3iDchtK)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The app we''ll build in this chapter is called **Dashboard**. It''s an application
    that displays the current activity within the business divided by department.
    This isn''t something that would be available to all staff, but to allow us to
    focus on the features and areas of interest in this chapter, we''ll not concern
    ourselves with how access is controlled. The real version of this app would have
    many features, but we''re going to only implement three:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying current financial information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying live operational information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing where the trains currently are in the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As this application will be used by staff members in their offices, it will
    be available on desktop (via UWP) and in a web browser (with a WASM version).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by creating the solution for the app:'
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, create a new project with the **Multi-Platform App (Uno Platform)**
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the project the name `Dashboard`. You can use a different name, but you'll
    need to adjust all subsequent code snippets accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove all the platform head projects *except* for the **UWP** and **WASM**
    ones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To avoid the need to write more code than necessary, we'll now add a reference
    to the shared library project. Right-click on the solution node in `UnoBookRail.Common.csproj`
    file, and click **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each platform-specific project, we need to add a reference to the common
    library project. Right-click on the `UnoBookRail.Common` and click **OK**. Now
    *repeat this process for the WASM project*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the basic solution structure now ready, we can add some functionality to
    the main page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the individual pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll use a separate page for each area of functionality we''re going to show:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder in the `Views`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Views` folder, add *three* new pages named `FinancePage.xaml`, `OperationsPage.xaml`,
    and `NetworkPage.xaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll now update the main page to be able to navigate between these new pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the main page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app already contains the file `MainPage.xaml`, and we''ll use it as the
    container for the ability to navigate between the other pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the grid in `MainPage.xaml` with the following `NavigationView` control
    that contains options for each of the separate pages we''ll implement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to add the handler for the `NavItemSelected` event mentioned previously
    to do the actual navigation between pages. Add the following to `MainPage.xaml.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to implement the `NavBackRequested` method to handle the user
    pressing the back button to navigate back through the pages. Add the following
    to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Navigation
  prefs: []
  type: TYPE_NORMAL
- en: This app uses a custom-defined frame and a stack-based navigation style. This
    allows the user to press the built-in back button to return to a previous page.
    While this may not be considered the most appropriate for this app, it is one
    of the most popular ways that developers implement navigation within a UWP app.
    For this reason, we thought it appropriate to include this in this book and show
    it can be incorporated into an Uno Platform app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding will allow us to navigate between the pages when an item is selected
    from the menu, but we also want a page to be shown when the app is first opened.
    To do this, add the following call at the *end* of the `MainPage` constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The code in this section shows the simplest way to enable navigation between
    pages in a `NavigationView` control. This is certainly not the only way to do
    this or a recommendation that it should always be done this way.
  prefs: []
  type: TYPE_NORMAL
- en: With all the basics in place, we're now ready to add a graph to the finance
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying charts with controls from SyncFusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SyncFusion is a company that makes UI components for web, desktop, and mobile
    development. Their Uno Platform controls are in the beta state at the time of
    writing and are free to use during this preview period via their community license
    ([https://www.syncfusion.com/products/communitylicense](https://www.syncfusion.com/products/communitylicense)).
    Many different chart types are available, but we''ll use a line chart to create
    a page like the one shown in *Figure 6.1*. The chart is displayed along with some
    arrows that provide some general trend data so that the person viewing them has
    an at-a-glance summary of the data. Imagine them representing how the data compares
    to the same day in the previous week, month, and year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Finance information including a graph from SyncFusion'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.01_B17132.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Finance information including a graph from SyncFusion
  prefs: []
  type: TYPE_NORMAL
- en: Updating references to include the SyncFusion controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The beta version of the SyncFusion Uno chart controls is available with the
    full source code on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: Download or clone the code from [https://github.com/syncfusion/Uno.SfChart](https://github.com/syncfusion/Uno.SfChart).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **Syncfusion.SfChart.Uno.csproj** project to the solution by right-clicking
    on the solution and selecting **Add** | **Existing Project…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the **Syncfusion.SfChart.Uno** project to use the latest version of the
    **Uno.UI** package. This is to avoid any issues from trying to use different versions
    of the library in different projects within the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reference the **Syncfusion.SfChart.Uno** project from the *UWP* and *WASM* projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're now ready to use the controls in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As the SyncFusion controls are only available from the source, while not expected,
    they may have changed when you read this. Hopefully, compiled versions of the
    controls are available, but if you need to get to a state comparable to when this
    was written, use commit **43cd434**.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a line chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can draw a simple line chart by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding this namespace to `FinancePage.xaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now replace the grid with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To provide the data, we need to add the following to the class in `FinancePage.xaml.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These properties require you to add this `using` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We must also create the following class that the `SfChart` object will use
    to find the named properties we referenced in the XAML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We've obviously only created a simple chart here, but the critical point is
    to notice how easy it was. A real dashboard would likely show more than a single
    chart. You can see examples of the charts you could include in the sample app
    included in the repository at [https://github.com/syncfusion/Uno.SfChart](https://github.com/syncfusion/Uno.SfChart).
  prefs: []
  type: TYPE_NORMAL
- en: We've seen how easy it was to include a chart from one vendor to show financial
    information. Let's now add a chart from another to display some different information.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying charts with controls from Infragistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Infragistics is a company that provides UI and UX tools for a variety of platforms.
    They also have a selection of controls to use in Uno Platform apps that are free
    to use while in preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about these controls at [https://www.infragistics.com/products/uno-platform](https://www.infragistics.com/products/uno-platform)
    or follow along as we add a chart to the app to show information relating to the
    current operation of the UnoBookRail business and create a page that looks like
    the one in *Figure 6.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Network operations details shown on a chart from Infragistics'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.02_B17132.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Network operations details shown on a chart from Infragistics
  prefs: []
  type: TYPE_NORMAL
- en: Updating references
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to use the controls in our app, we must first make the following
    modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference the `Infragistics.Uno.Charts` NuGet package in the **UWP** project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference the `Infragistics.Uno.Wasm.Charts` NuGet package in the **WASM**
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference the `Uno.SkiaSharp.Views` and `Uno.SkiaSharp.Wasm` NuGet packages
    in the **WASM** project. This is necessary because the Infragistics controls use
    SkiaSharp to draw the controls. This is different from the SyncFusion control
    we used previously, which uses XAML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With those simple modifications, we can now add the chart to our app.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you notice any strange compilation behaviors after making the preceding changes,
    try cleaning the solution, closing all open instances of Visual Studio, and then
    reopening the solution. This shouldn't be necessary, but we have found this to
    be required on a few occasions.
  prefs: []
  type: TYPE_NORMAL
- en: You may also see entries in the error list from the SyncFusion project despite
    it successfully compiling. These errors can be safely ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a column chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll now add content to the **Operations** page of the app. For simplicity,
    we''re going to only add two pieces of information. We''ll add a chart to show
    how many of each ticket type has been used each hour today. Additionally, we''ll
    display the number of people currently on trains or in stations, based on people
    presenting tickets to enter a station but not having subsequently exited:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following namespace to the `Page` element of `OperationsPage.xaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following XAML as the contents of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `using` directive to `OperationsPage.xaml.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These are needed for the properties we'll add to this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the `OperationsPage` class providing the data shown in
    the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add the `PersonCount` class we''ve just referenced:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With that, we now have a simple page charting the number of passengers traveling
    each hour.
  prefs: []
  type: TYPE_NORMAL
- en: As with the SyncFusion charts, Infragistics has many more charts and other controls
    available. You can find examples of these at [https://github.com/Infragistics/uno-samples](https://github.com/Infragistics/uno-samples).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen different ways of displaying more complex controls using
    libraries from third parties, let's look at drawing something more complicated
    ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing custom graphics with SkiaSharp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'UWP and Uno Platform include support for creating shapes and provide basic
    drawing capabilities. However, sometimes you need to display something in your
    app that can''t easily be done with standard controls, you require fine-grained
    control, or you encounter performance issues when manipulating large numbers of
    XAML controls. In these situations, it can be necessary to draw directly onto
    the UI yourself. One of the ways to do this is with SkiaSharp. SkiaSharp is a
    cross-platform 2D graphics API based on Google''s Skia graphics library that we
    can use in our Uno Platform apps. To show how simple it is to use, we''ll create
    the final part of our application, which shows on a map where the trains in the
    network currently are. In just a few lines of code, we''ll create something that
    looks as in the screenshot shown in *Figure 6.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – The network map shown in the app when running in a browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Author_Figure_6.03_B17132.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – The network map shown in the app when running in a browser
  prefs: []
  type: TYPE_NORMAL
- en: Now you've seen what we're going to create, let's get on and do it.
  prefs: []
  type: TYPE_NORMAL
- en: Updating project references
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The references we need to use SkiaSharp in our app have already been added as
    part of the references we added to use the Infragistics controls. If you've made
    these changes, there's nothing to do here.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are following along and *haven''t* added the Infragistics controls in
    the last section, you''ll need to make the following change to your solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference the `Uno.SkiaSharp.Views` and `Uno.SkiaSharp.Wasm` NuGet packages
    in the **WASM** project:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With the relevant references added, we're now ready to draw the network map.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the network map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To draw the network map in the app, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `NetworkPage.xaml`, add the following as the only content. This is the control
    that will show our drawing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To draw the map on the `SKXamlCanvas` control, we''ll need to add the following
    using declarations to `NetworkPage.xaml.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we must add the `OnPaintSurface` method we referenced in the XAML. This
    method is called by the control whenever it needs to redraw the image. This will
    be when the control is first loaded and whenever the rendered size of the control
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `SetUpCanvas` method to initialize and position the image correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `SetUpCanvas` method sizes our drawing area to be as big as possible without
    distorting or stretching it and ensures it is always centered horizontally and
    vertically. Finally, it clears the canvas and returns it, ready for the other
    methods to draw upon it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `DrawLines` method to draw the branch lines on the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the station positions returned by the library are converted
    to a Skia-specific array used to draw a polygon connecting all the points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `DrawStations` method to draw the station positions on the branch lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `DrawStations` method is simple as all it does is draw a circle for each
    station.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `DrawTrains` method to show where the trains currently are on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `DrawTrains` method is again simple as it loops through the provided data
    and draws a cyan circle at each position. Because this is drawn after the station
    circles, it will appear above them when a train is at a station.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we've only used a few circles and lines to create our map.
    However, SkiaSharp is capable of much more than we have space to cover here. You
    might want to explore the other functionality available by extending the map we've
    just created to include the names of stations or add other details that show the
    direction a train is heading or if it is at a station.
  prefs: []
  type: TYPE_NORMAL
- en: We now have all the pages of our app implemented, but we can further improve
    things by having the content adjust depending on the size of the screen or window.
  prefs: []
  type: TYPE_NORMAL
- en: Responding to changes in the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your apps will need to run on different sized screens and windows. Some of these
    differences will be due to the different devices the app will run on, but you
    may also need to account for windows that can be resized by the user.
  prefs: []
  type: TYPE_NORMAL
- en: It's possible to design multiple versions of a page and load the appropriate
    one at runtime. However, it's usually much easier to create a single page that
    adjusts to the available dimensions. We'll look at how to do that with the features
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the page layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Uno Platform allows you to create a responsive UI by switching between `VisualStates`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s possible to create `AdaptiveTrigger` element that fires based on the
    size of the control to which it is attached. We''ll now use adaptive triggers
    to adjust the **Finance** and **Operations** pages to better lay out their contents
    based on the available width:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following as the first child of `RelativePanel` in `FinancePage.xaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now do a similar thing with the grid in the `OperationsPage.xaml` page.
    Add the following immediately below the row and column definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'With these setters, we''re making use of the row and column definitions we
    created earlier. While the initial code put the controls in separate rows, here
    we''re changing the controls so they are in different columns and span the rows
    when the window is wider. As you can see in *Figure 6.4*, this means that the
    number of people currently on trains is displayed beside the chart, rather than
    below it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – The Finance and Operations pages shown in a landscape layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.04_B17132.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – The Finance and Operations pages shown in a landscape layout
  prefs: []
  type: TYPE_NORMAL
- en: With these two examples, we've seen different ways of changing how the elements
    on a page can be repositioned to change the layout. There is no one right way
    to adjust all pages for different amounts of available space. State triggers can
    be used to change any property on an element, and it's also possible to have multiple
    triggers so you could, for example, have different layouts for small, medium,
    and large screens.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the layout of the elements on the screen isn't the only way to adjust
    what's shown. It's also possible to have the controls themselves adjust, resize,
    and redraw themselves to fit the space.
  prefs: []
  type: TYPE_NORMAL
- en: Stretching and scaling content to fit the available space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the strengths of XAML is its ability to dynamically lay out controls
    and not rely on providing specific sizes for each element. It's possible to resize
    individual XAML controls by setting the `HorizontalAlignment` and `VerticalAlignment`
    properties to control how they make use of the available space. Setting the values
    of these properties to `Stretch` will allow them to take up all the available
    space in their parent element. For more complex scenarios, you can also use a
    `ViewBox` element to transform controls by stretching them in different ways and
    directions.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to know more about creating layouts with XAML elements, you'll find
    some useful links at [https://platform.uno/docs/articles/winui-doc-links-development.html#layouting](https://platform.uno/docs/articles/winui-doc-links-development.html#layouting).
  prefs: []
  type: TYPE_NORMAL
- en: Many controls also automatically adjust to use all or as much of the available
    space as appropriate. We did this with the map we drew with SkiaSharp. The map
    was drawn as large as possible without distorting it. It was aligned in the center
    of the available space regardless of whether the window was of a portrait or landscape
    aspect ratio.
  prefs: []
  type: TYPE_NORMAL
- en: Now that all the pages adjust to the available space, our app and this chapter
    are complete.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built an app that works on UWP and in a web browser. The
    app used graphing controls from SyncFusion and Infragistics. We also created a
    custom map with SkiaSharp. Finally, we looked at how to adjust the UI layout in
    response to different and changing screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is the last in this part of the book. In the next part, we'll move
    on from building apps to look at how to test and deploy them. In the next chapter,
    we'll look at how to use the `Uno.UITest` library as part of your broader testing
    strategy. When building applications that run on multiple platforms, automating
    the testing across those platforms can save lots of time and boost your productivity.
  prefs: []
  type: TYPE_NORMAL
