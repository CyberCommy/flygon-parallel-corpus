- en: Setting up a Docker Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Suddenly it occurred to me: Would it not be great if my trailer could simply
    be lifted up and placed on the ship without its contents being touched?"     
                                                               - Malcolm McLean, American
    trucking entrepreneur'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to get everything set up for Docker development
    on our workstation. We will learn how to set up a Docker development environment
    on Linux, Windows, and OS X workstations. Then we will handle some post-installation
    steps for each OS. Lastly, we will learn how using Docker on each OS differs and
    what to watch out for between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will know the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'How to set up your Docker development environment, irrespective of whether
    your workstation is running on the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The differences to be aware of when using Docker on different OSes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need a development workstation using the OS of your choice, including
    Linux, Windows, or OS X. You will need sudo or admin access on the workstation.
    And since you will be installing Docker software that will be pulled from the
    internet, you will need basic internet connectivity on your workstation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter01](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter01)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action: [http://bit.ly/2rbGXqy](http://bit.ly/2rbGXqy)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Docker development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to get our hands dirty. Let's dive in and set up our workstation.
    No matter what your preferred OS might be, there's a Docker for that. Using the
    following as a guide, we will walk you through the setup of Docker on your workstation.
    We can begin with setting up your Linux workstation, then we'll tackle a Windows
    system, and finish up with what is probably the most common developer option,
    the OS X workstation. While OS X may be the most popular developer option, I would
    recommend that you consider a Linux distribution for your workstation of choice.
    We'll talk more about why I make that recommendation later in the *Installing
    Docker on an OS X workstation* section. But for now, just pay close attention
    during the Linux install discussion in case you are persuaded to develop on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking, there are two flavors of Docker to consider: Docker Enterprise
    Edition, or Docker EE, and Docker Community Edition, or Docker CE. Typically,
    in an enterprise, you would opt for the Enterprise Edition, especially for the
    production environments. It is intended for business-critical use cases, and Docker
    EE, as the name suggests, is certified, secured, and supported at an enterprise-grade
    level. It is a commercial solution that is supported by and purchased from Docker.'
  prefs: []
  type: TYPE_NORMAL
- en: The other flavor, Docker CE, is a community-supported product. CE is available
    free and is often the choice for production environments of small businesses,
    and for developer workstations. Docker CE is a fully capable solution that allows
    the developer to create containers that can be shared with team members, used
    with automated build tools for CI/CD, and, if desired, shared with the Docker
    community at large. As such, it is the ideal option for a developer's workstation.
    It is worth noting that Docker CE has two release paths: stable and edge. We will
    be using the stable release path of Docker CE for all of the installation examples
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to start off the installation discussion with CentOS Linux, but
    feel free to skip ahead to the Ubuntu, Windows, or Mac section if you are in a
    hurry.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker on a Linux workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be executing the Linux installation steps of Docker for both an RPM-based
    workstation (using CentOS) and a DEB-based workstation (using Ubuntu) so that
    you will have instructions that fit the Linux distribution that most closely matches
    what you are currently using, or plan on using at some point in the future. We
    will begin our installation journey with CentOS.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all of the download links used in the installation of all OSes
    in the *References* section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker on a CentOS workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker CE for CentOS requires a maintained version of CentOS 7\. Although installation
    may work on archived versions, they are neither tested nor supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three methods to install Docker CE on CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: Via Docker repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and manually installing the RPMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Docker's convenience scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most common method used is via Docker repositories, so let's begin there.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker CE via the Docker Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will need to install some required packages. Open a terminal window
    and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will make sure that we have both the `yum-config-manager` utility and
    the device mapper storage driver installed on the system. It is illustrated in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Note that your installation of CentOS 7 may already have these installed, and
    in that case the `yum install` command will report that there is nothing to do.![](Images/bbfeed5a-dfc3-4cdb-800d-8f2b7d425e18.png)
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will set up the CentOS stable repository for Docker CE.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that you will still need to set up the stable repository
    even if you want to install the edge releases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following command to set up the stable repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, if you want to use the edge release, you can enable it with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can disable access to the edge release with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the fun begins... We are going to install Docker CE. To do so, enter the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get an error about the need to have `container-selinux` installed, use
    this command to install it, then try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There you have it! Installing Docker CE was way easier than you thought it was
    going to be, right?
  prefs: []
  type: TYPE_NORMAL
- en: Let's use the most basic method to confirm a successful install, by issuing
    the version command.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command validates that we installed Docker CE, and shows us what version
    of Docker was just installed. Enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The latest version of Docker CE, at the time of writing, is 18.03.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/93abb062-6714-4a13-83d1-a131bb53546f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have one more critical step. Although Docker CE is installed, the Docker
    daemon has not yet been started. To start it, we need to issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It should quietly start up, looking something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/24b47ec6-3c2d-4073-8ccd-c2ce213ba130.png)'
  prefs: []
  type: TYPE_IMG
- en: We saw how to validate that Docker installed using the version command. That
    is a great quick test, but there is an easy way to confirm not just the install,
    but that everything started and is working as expected, which is by running our
    first Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s issue the following command to run the hello-world container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is well, you will see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/154e15a3-d7a5-430c-b866-1864ba153fa9.png)'
  prefs: []
  type: TYPE_IMG
- en: We've got Docker CE installed on our CentOS workstation, and it is already working
    and running containers. We are off to a great start. Now that we know how to do
    an install using the Docker repositories, let's have a look at how to manually
    install using a downloaded RPM.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker CE manually using a downloaded RPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way to install Docker CE is to use a downloaded RPM. This method involves
    downloading the Docker CE RPM for the version you wish to install. You need to
    browse to the Docker CE Stable RPM downloads site. The URL for this is [https://download.docker.com/linux/centos/7/x86_64/stable/Packages](https://download.docker.com/linux/centos/7/x86_64/stable/Packages):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/70e0eff2-2b78-4c29-836e-8528b8afb3d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the version of Docker CE you want to download, and when prompted,
    tell your browser to save the file. Next, issue the `yum install` command, providing
    the path and filename for the downloaded RPM file. Your command should look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to start the Docker daemon. You''ll use the preceding command
    in the repo section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And, as we learned before, you can validate the functionality of your installation
    with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: While this method might seem simpler and easier to execute, it is less desirable
    because it is more of a manual process, especially when it comes time to update
    your version of Docker CE. You have to again browse to the downloads page, find
    the later version, download it, then do the `yum install`. Using the Docker Repository
    method described earlier, upgrades are as simple as issuing a `yum upgrade` command.
    Let's now take a look at one more method of installing Docker CE on your CentOS
    workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker CE by running convenience scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third way to install Docker is to use the convenience scripts provided by
    Docker. The scripts allow you to install either the latest edge version or the
    latest test version of Docker. It is not recommended that either of these is used
    in a production environment, but they do serve a purpose for testing and developing
    the latest Docker versions. The scripts are somewhat limited in that they do not
    allow you to customize any options during the install. The same scripts can be
    used across a variety of Linux distributions as they determine the base distro
    you are running and then do the install based on that determination. The process
    is simple.
  prefs: []
  type: TYPE_NORMAL
- en: Use `curl` to pull down the desired script, and then use sudo to run the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The commands to run the latest edge version are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the script will result in output that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a09ba16c-6262-4ae3-b391-a43c0c768ff5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The docker group has been created for you by the script, but since CentOS is
    RPM centric, you still need to start the Docker service yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If this were a Debian-based system, the Docker service would have been started
    automatically by the script.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have examined the three ways to install Docker on your CentOS workstation,
    it is a good time to discuss a few additional steps that are recommended in your
    post-installation setup.
  prefs: []
  type: TYPE_NORMAL
- en: Post-install steps you might want to consider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All three of the install methods automatically create a docker group for you,
    but if you want to be able to run Docker commands without using `root` or sudo,
    then you will want to add your user to the docker group.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that many Docker commands require full admin access to execute, so
    adding a user to the docker group is comparable to granting them root access,
    and the security implications should be considered. If the user already has root
    access on their workstation, adding them to the docker group is only providing
    them a convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the current user to the docker group is easily accomplished with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You will need to log out and log back in to update the group memberships on
    your account, but once you have done that, you should be all set to execute any
    Docker commands without using sudo.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be validated by running the hello-world container without sudo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will want to configure your system to have the Docker service start
    on system-boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Another post-install step you should consider is installing docker-compose.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tool can be an important addition to your Docker tool belt and we will
    be discussing its use in [Chapter 7](1a206f3a-faf8-43cb-9413-d1e451bd2a35.xhtml),
    *Docker Stacks*. The command to install docker-compose is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, your CentOS workstation is now ready to start developing your
    Docker images and deploying your Docker containers. Next up, we will learn how
    to install Docker onto a DEB-based system using an Ubuntu workstation. If you're
    ready, read on.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker on an Ubuntu workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we did on the CentOS workstation, we are going to install Docker CE on our
    Ubuntu workstation. The requirement for installing Docker CE on Ubuntu is that
    you have to be running a 64-bit recent LTS release, such as Bionic, Xenial, or
    Trusty. You can install an edge version of Docker CE onto the Artful version of
    Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three methods to install Docker CE on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: Via Docker repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and manually installing the DEB packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running convenience scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most common method used is via Docker repositories, so let's begin there.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker CE via the Docker Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to set up the Docker repository first, and then we can do the installation,
    so let's take care of the repo now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step will be to update the apt package index. Use the following command
    to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to install some supporting packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to get the GPG key for Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You can confirm that you have added Docker's GPG key successfully; it will have
    a fingerprint of `9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify the key by checking the last eight characters match `0EBFCD88`
    with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we need to actually set up the repository. We will be focusing on the
    stable repo for our examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to install the edge or test versions of Docker CE, be sure to add
    the word `edge` or `test` after the word `stable` (do not replace the word `stable`)
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now that our system is set up with the correct repository for installing Docker
    CE, let's install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by making sure that all of the packages are up to date by issuing the `apt-get
    update` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we will actually install Docker CE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker is installed. You can check the Docker version after the install to
    confirm a successful installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The version command should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/51eddd17-1070-4a6e-891c-16df43cb1920.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s validate that the Docker installation is working as desired. To
    do this, we will run the hello-world Docker image using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/4abbab91-b0ea-4fc9-bf7c-6928739f5e36.png)'
  prefs: []
  type: TYPE_IMG
- en: Did you notice something interesting happened?
  prefs: []
  type: TYPE_NORMAL
- en: We did not have to start Docker after the installation as we did in the CentOS
    installation. That is because, on DEB-based Linux systems, the install process
    also starts Docker for us. Additionally, the Ubuntu workstation is configured
    to start Docker on boot. So both of the Docker start steps are handled for you
    during the installation. Nice! Your Ubuntu workstation now has Docker installed
    and we've verified it is working as desired.
  prefs: []
  type: TYPE_NORMAL
- en: Although using the Docker repository is the best way to install Docker on your
    workstation, let's take a quick look at another way to install Docker CE on an
    Ubuntu workstation, that being by manually installing it with a DEB package.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker CE manually using a DEB package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will show you how to download and install the Docker CE DEB package.
    You should consider using this method if, for whatever reason, the repositories
    are not available for your workstation.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to download the Docker CE package, so start by opening your browser
    and going to the Ubuntu Docker CE packages download site at [https://download.docker.com/linux/ubuntu/dists/.](https://download.docker.com/linux/ubuntu/dists/)
  prefs: []
  type: TYPE_NORMAL
- en: 'There, you will find a list of Ubuntu version folders listed, which looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/22e51e24-f5fb-4fec-986b-3ba7eed038b9.png)'
  prefs: []
  type: TYPE_IMG
- en: You want to select the folder that matches the version of Ubuntu installed on
    your workstation, which in my case is the `xenial` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue browsing to `/pool/stable/` and then to the processor folder that
    matches your workstation hardware. For me that is amd64, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2b78a600-e4fb-47a6-95d5-0332af65eebf.png)'
  prefs: []
  type: TYPE_IMG
- en: Now click on the version of Docker CE you want to download and install.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to select the Save File option before you click OK.
  prefs: []
  type: TYPE_NORMAL
- en: Once the package has been downloaded to your workstation, to install it, just use
    the `dpkg` command for manually installing a package.
  prefs: []
  type: TYPE_NORMAL
- en: 'You provide the path and filename for the downloaded Docker CE package as a
    parameter to `dpkg`. Here is the command I used for the package that was just
    downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d1bfd0e2-c566-4b4e-ac1a-6e904bec3ff5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that Docker is installed, let''s use the version command to confirm successful
    install, and then run the hello-world container to validate that Docker is working
    as desired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This is good. Just like the repository installation, your docker group has been
    created and both of the start steps are handled for you in the manual package
    installation. You do not have to start Docker, and you do not have to configure
    Docker to start on boot. So, you are ready to start creating Docker images and
    running Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: However, before we get going with creating and running, there is one more method
    of installing Docker on an Ubuntu workstation that we will cover. You can use
    Docker's convenience scripts to install the latest edge or test versions of Docker
    CE. Let's take a look at how to do that now.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker CE by running convenience scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another method of installing Docker is to use the convenience scripts provided
    by Docker. The scripts allow you to install either the latest edge version or
    the latest test version of Docker. It is not recommended that either of these
    is used in a production environment, however, they do serve a purpose for testing
    and developing the latest Docker versions. The scripts are somewhat limited in
    that they do not allow you to customize any options in the install. The same scripts
    can be used across a variety of Linux distributions as they determine the base
    distro you are running, and then do the install based on that determination. The
    process is simple. Use `curl` to pull down the desired script, and then use sudo
    to run the script. The commands to run the latest edge version are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to install curl:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now get the script and run the docker script to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the script will result in output that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ab1d1aed-aa83-49e9-978f-f71095f9d532.png)'
  prefs: []
  type: TYPE_IMG
- en: The docker group has been created for you by the script. The Docker service
    has been started, and the workstation has been configured to run Docker on boot.
    So, once again, you are ready to start using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: We have examined the three ways to install Docker on your Ubuntu workstation,
    so now is a good time to discuss an additional step that is recommended for your
    post-installation setup.
  prefs: []
  type: TYPE_NORMAL
- en: Post-install steps you might want to consider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All three of these install methods automatically create a docker group for you,
    but if you want to be able to run Docker commands without using `root` or sudo,
    you will want to add your user to the docker group.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that many Docker commands require full admin access to execute, so
    adding a user to the docker group is comparable to granting them root access,
    and the security implications should be considered. If the user already has root
    access on their workstation, adding them to the docker group is only providing
    them a convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the current user to the docker group is easily accomplished with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You will need to log out and log back in to update the group memberships on
    your account, but once you have done that, you should be all set to execute any
    Docker commands without using sudo.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be validated with the hello-world container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Another post-install step you should consider is installing docker-compose.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tool can be an important addition to your Docker tool belt and we will
    be discussing its use in [Chapter 7](1a206f3a-faf8-43cb-9413-d1e451bd2a35.xhtml),
    *Docker Stacks*. The command to install docker-compose is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, your Ubuntu workstation is now ready to start developing your
    Docker images and deploying your Docker containers. Next up, we will learn how
    to install Docker onto a Windows-based workstation. If you're ready, read on.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker on a Windows workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Windows version of Docker CE is compatible with Windows 10 Pro or Enterprise
    editions. Docker CE on Windows provides a complete Docker development solution
    by integrating with Windows Hyper-V virtualization and networking. Docker CE on
    Windows supports creating and running both Windows and Linux containers. Docker
    CE on Windows is available from the Docker store at [https://store.docker.com/editions/community/docker-ce-desktop-windows](https://store.docker.com/editions/community/docker-ce-desktop-windows).
  prefs: []
  type: TYPE_NORMAL
- en: You will need to log in to the Docker store to download the Docker CE for Windows
    installer, so if you don't already have an account, go ahead and create one now
    and then log in to it.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to save your Docker credentials securely as you will be using them a
    lot in the future.
  prefs: []
  type: TYPE_NORMAL
- en: After logging in, you should see the Get Docker download button. Click on the
    download button and allow the installer to download to your workstation. Once
    the installer has finished downloading, you can click the Run button to begin
    the installation. If you get the security check, confirm that you want to run
    the installer executable by clicking the Run button. If you have UAC enabled on
    your workstation, you may see the User Account Control warning asking you to confirm
    that you want to allow the Docker CE installer to make changes to your device.
    You have to check Yes to continue, so go ahead and click it now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker CE installer will run and it will begin downloading Docker. Once
    the Docker installation files have been successfully downloaded, the installer
    will ask you to confirm your desired configuration. The options here are few.
    It is my recommendation that you add the shortcut to the desktop and that you
    do not check the Use Windows containers instead of Linux containers option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5b9ae48a-1a9d-4633-a64a-c799e62d9895.png)'
  prefs: []
  type: TYPE_IMG
- en: The installer will unpack the Docker CE files. When the files are unpacked,
    you will get the Installation succeeded notification. According to the current
    documentation, the installer will run Docker for you at the end of the installation.
    It has been my experience that it does not always happen. Be patient and give
    it time, but if it does not start that first time you may have to run Docker manually.
  prefs: []
  type: TYPE_NORMAL
- en: If you selected the configuration option to add a shortcut for Docker to your
    desktop, you will now be able to double-click that shortcut icon and start Docker
    for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Docker will run and you will get a Welcome screen that lets you know that Docker
    is up and running. It is recommended that you provide your Docker credentials
    and log in at this time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever Docker is running, you will see a whale icon in the taskbar notifications
    area. If you mouse over that icon, you can get the status of the Docker process.
    You will see such statuses as Docker is starting and Docker is running. You can
    right-click on the icon to bring up the Docker for Windows menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/705619cd-d82e-4c3a-a00a-1b846bd3e499.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have Docker running on your Windows workstation, you can open up a
    Windows PowerShell command window and start using Docker. To verify that the installation
    was completed successfully, open a PowerShell window and enter the version command.
    To confirm that Docker is working as desired, run the hello-world Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Your Windows 10 workstation is now set up to create Docker images and run Docker
    containers. Docker should also be configured to start up on boot so that when
    you need to reboot your workstation, it will start up automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that using Docker CE on a Windows workstation is not exactly like using
    Docker CE on a Linux workstation. There is an additional layer of virtualization
    this is hidden behind the scenes. Docker is running a small Linux VM in Hyper-V
    and all of your Docker interactions are passed through, to, and from, this Linux
    VM. For most use cases, this is never going to present any issues, but it does
    affect performance. We will talk more about this in the *Discovering the differences
    to watch out for between OSes* section.
  prefs: []
  type: TYPE_NORMAL
- en: There is one more bit of setup that we want to take a look at, so if you are
    ready, jump right into the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Post-install steps you might want to consider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are a couple of post-install steps I recommend for your Docker Windows
    workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kitematic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Windows installation of Docker CE integrates with a graphical user interface
    tool called Kitematic. If you are a graphical interface kind of person (and since
    you are using Windows for Docker, I will guess that you are), you will want to
    install this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the `Docker` icon in the taskbar notifications area and right-click on
    it to bring up the Docker for Windows menu. Click on the Kitematic menu option.
    Kitematic is not installed by default. You have to download the archive that contains
    the application. When you click the Kitematic menu option for the first time,
    you will be prompted to download it. Click the Download button, and save the archive
    file to your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b4ee253f-bc5c-4952-b206-a2dab0761e12.png)'
  prefs: []
  type: TYPE_IMG
- en: You will need to unzip the Kitematic archive to use it. The uncompressed Kitematic
    folder needs to be in the `C:\Program Files\Docker` folder with a folder name
    of `Kitematic` for the Docker submenu integration to work correctly. Once you
    have Kitematic installed in the correct path on your Windows workstation, you
    can right-click the `Docker` icon in the task bar notifications area and select
    the Kitematic option again.
  prefs: []
  type: TYPE_NORMAL
- en: You will be prompted to enter your Docker credentials again to connect to Docker
    Hub. You can skip this step, but it is my recommendation that you go ahead and
    log in now. Once you log in (or skip the login step), you will see the Kitematic
    user interface. It allows you to download and run Docker containers on your workstation.
    Go ahead and try one, such as the *hello-world-nginx* container, or if you want
    to play a game, try the Minecraft container.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to create Docker images and run Docker containers in your
    Windows 10 workstation, but we have one more workstation OS to learn how to install
    Docker CE on. Let's look at installing it on an OS X workstation next.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up DockerCompletion for PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have ever used command-line completion, you will want to consider installing
    DockerCompletion for PowerShell. This tool provides command-line completion for
    Docker commands. It is fairly easy to install. You will need your system set up
    to allow the execution of the downloaded module. To do this, open a PowerShell
    command window with Run as Administrator, and issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now close the Administrator command window and open a normal user PowerShell
    command window. To install the `DockerCompletion` module, issue this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, to activate the module in your current PowerShell window, use
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now you can use the features of command completion for all your Docker commands.
    This is a great keystroke saver!
  prefs: []
  type: TYPE_NORMAL
- en: Note that the Import-Module command is only active in the current PowerShell
    command window. If you want to have it available to all future PowerShell sessions,
    you will need to add the `Import-Module DockerCompletion` to your PowerShell profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily edit your PowerShell profile (or create a new one if you haven''t
    already) with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Enter the `Import-Module DockerCompletion` command and save the profile. Now
    your Docker command-line completion feature will be active in all future PowerShell
    sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker on an OS X workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The story for Docker on Mac has advanced a lot in recent years, and it is now
    a real, usable development solution for your Mac workstation. Docker CE for Mac
    requires OS X El Capitan 10.11 or newer macOS releases. The Docker CE app integrates
    with the hypervisor, network, and filesystem built into OS X. The installation
    process is simple: download the Docker installer image and launch it. You can
    download the installer image from the Docker store. You must log in to the Docker
    store be able to download the install image, so, create an account there if you
    don''t have one already.'
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to save your credentials securely as you will need them later.
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Docker store page for Docker CE for Mac at [https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac).
    Remember that you must log into the Docker store to be able to download the installer
    image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in to the Docker store, the Get Docker button will be available
    to click. Go ahead and click on it to start the download. The Docker CE for Mac
    install image may take some time to download. When the download has completed,
    double-click on the `Docker.dmg` image file to mount and open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b5757407-1b67-4886-96a8-7857bf6cd463.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the Docker CE for Mac image has mounted and opened, click the `Docker`
    icon and drag it onto the `Applications` icon to complete the install. The copying `Docker`
    to `Applications` action will be initiated. And when the copy process completes,
    the Docker application will be available to run from your `Applications` folder.
    Double-click on your `Docker` icon to launch it. Launching Docker for the first
    time will caution you that you are running an application downloaded from the
    internet to make sure you really want to open it. When the Docker app opens, you
    will be greeted with a friendly Welcome to Docker message.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking next on the welcome message will warn you that Docker requires elevated
    privileges to run and will inform you that you must provide your credentials to
    install Docker's networking and app links. Enter your username and password. The
    Docker application will launch, adding a whale icon to the menu-notification area.
  prefs: []
  type: TYPE_NORMAL
- en: You will also be prompted to enter Docker store credentials to allow Docker
    for Mac to log in to the store. Enter your credentials and click on the `Log In`
    button. You will get a confirmation showing that you are currently logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'To validate that our installation was successful and confirm the functionality
    of our installation, we will issue the version command and then run Docker''s
    hello-world container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Your macOS workstation is now set up to create Docker images and run Docker
    containers. You are ready to containerize your apps! You can easily use your terminal
    window for all of your Docker work, but you may be interested in the graphical
    UI tool that is available for Mac, called **Kitematic**. Let's install Kitematic
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Post-install steps you might want to consider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are a couple of post-install steps I recommend for your Docker OS X workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kitematic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although you can use the Docker CLI in your OS X terminal window, and probably
    will do so for most of your Docker development work, you have the option of using
    a graphical UI tool called Kitematic instead. To install Kitematic, right-click
    on the whale icon in the OS X menu-notification area to open the Docker for Mac
    menu. Click on the Kitematic menu option to download (and later to run) the Kitematic
    application. If you have not yet installed Kitematic, when you click on the Docker
    for Mac menu for it, you will be shown a message that includes a download link.
    The message also reminds you that you must install Kitematic into your `Applications`
    folder to enable Docker menu-integration. Click the here link to download the
    Kitematic application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dbf3a805-51e9-448a-9656-e50c242ad008.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the download completes, move the downloaded application into your `Applications`
    folder, as directed earlier. Then, using the Docker for Mac menu, click on the
    Kitematic menu option again. This time it will run the Kitematic application.
    The first time you run the application, you will get the standard warning that
    you are running something that has been downloaded from the internet, asking if
    you really want to open it. Click on the Open button to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have Kitematic installed on your Mac workstation, you can click the Docker
    whale icon in the menu bar notifications area and select the Kitematic option
    again.
  prefs: []
  type: TYPE_NORMAL
- en: You will be prompted to enter your Docker credentials to connect Kitematic to
    Docker Hub. You can skip this step, but it is my recommendation that you go ahead
    and log in now. Once you log in (or skip the login step), you will see the Kitematic
    user interface. This allows you to download and run Docker containers on your
    workstation. Go ahead and try one, such as the *hello-world-nginx* container,
    or if you want to play a game, try the Minecraft container.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You are now set up to use both the Docker CLI and the Kitematic
    graphical UI to run your Docker containers and manage your Docker images. However,
    you will do your Docker image creation using the OS X terminal and your favorite
    code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker command-line completion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install Homebrew. You may (probably) already have Homebrew installed on your
    Mac, but if not, you should install it now. Here is the command to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use Homebrew to install `bash-completion`. Here is the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The installation of `bash-completion` will instruct you to add the following
    line to your `~/.bash_profile` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create the links necessary to enable the Docker command-line completion
    feature. There is one link for each of the Docker toolsets. Here are the link
    commands for bash (if you use `zsh`, check the next code block for the link commands):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if you are using `zsh` instead of bash, the link commands are different.
    Here are the link commands for `zsh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Finally, restart your terminal session—you can now use Docker command completion!
    Try it by typing `docker` and hitting the *Tab* key twice.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Enterprise Edition data: [https://www.docker.com/enterprise-edition](https://www.docker.com/enterprise-edition)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Community Edition data: [https://www.docker.com/community-edition](https://www.docker.com/community-edition)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Docker CE for CentOS: [https://store.docker.com/editions/community/docker-ce-server-centos](https://store.docker.com/editions/community/docker-ce-server-centos)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Docker CE for Ubuntu: [https://store.docker.com/editions/community/docker-ce-server-ubuntu](https://store.docker.com/editions/community/docker-ce-server-ubuntu)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Docker CE for Windows: [https://store.docker.com/editions/community/docker-ce-desktop-windows](https://store.docker.com/editions/community/docker-ce-desktop-windows)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download Docker CE for Mac: [https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker CE Stable RPM download site for CentOS: [https://download.docker.com/linux/centos/7/x86_64/stable/Packages](https://download.docker.com/linux/centos/7/x86_64/stable/Packages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker Install Repo: [https://github.com/docker/docker-install](https://github.com/docker/docker-install)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker CE DEB package download site for Ubuntu: [https://download.docker.com/linux/ubuntu/dists/](https://download.docker.com/linux/ubuntu/dists/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Windows Docker containers on Windows: [https://blog.docker.com/2016/09/build-your-first-docker-windows-server-container/](https://blog.docker.com/2016/09/build-your-first-docker-windows-server-container/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DockerCompletion for PowerShell: [https://github.com/matt9ucci/DockerCompletion](https://github.com/matt9ucci/DockerCompletion)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker CE for Mac: [https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line completion for Mac: [https://docs.docker.com/docker-for-mac/#install-shell-completion](https://docs.docker.com/docker-for-mac/#install-shell-completion)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Homebrew on your Mac: [https://brew.sh/](https://brew.sh/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What differences to watch out for between OSes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker images, by design, are self-contained packages that include everything
    needed to run the application they are designed to execute. One of the great strengths
    of Docker is that Docker images can be run on almost any operating system. That
    being said, there are some differences in the experience of running Docker images
    on different OSes. Docker was created on Linux and is deeply integrated with some
    key Linux constructs. So, as you would expect, when you run Docker on Linux, everything
    integrates directly and seamlessly with the OS. Docker leverages the Linux kernel and
    filesystem natively.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, when you run Docker for Windows or Docker for Mac, Docker cannot
    leverage the same constructs that it does natively on Linux because they just
    do not exist on these other OSes. Docker handles this by creating a small, efficient
    Linux VM in a hypervisor for the non-Linux OS. With Docker for Windows, this Linux
    VM is created in Hyper-V. On macOS, the VM is created in a custom hypervisor,
    called **hyperkit**.
  prefs: []
  type: TYPE_NORMAL
- en: As you might expect, there is a performance overhead associated with the helper
    VMs. However, if you do use Windows or OS X for your development workstation,
    you will be pleased to know that Docker has made a lot of positive strides on
    both platforms, reducing the overhead and improving performance significantly
    with each new major version released. There are a lot of reports of high CPU utilization
    for the hyperkit hypervisor on OS X, but I have not personally experienced the
    issue. With the current stable versions of Docker CE, I believe that both Windows
    and OS X can be successfully used for Docker development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still, there are other differences, besides processing performance, to consider.
    There are two that you should be aware of: file mounts and endpoints.'
  prefs: []
  type: TYPE_NORMAL
- en: Docker CE on a Linux OS is able to directly use the filesystem for its file
    mounts in the running containers—this provides native-disk-performance levels.
    You also can change the filesystem drivers used to achieve different levels of
    performance. This is not available for Docker on Windows or Docker on Mac. For
    both Windows and OS X, there is an additional filesystem tool that handles the
    file mounts. On Windows, you will be using Windows shared files, and on OS X it
    is **osxfs**. Unfortunately for the Windows and OS X users, the performance hit
    on the file mounts is significant. Even though Docker has made leaps and bounds
    in improving the file mount story for Windows and for OS X with version 17 and
    later, both are still measurably slower compared to running natively on a Linux
    OS. For Windows specifically, the file mount options are very restrictive. If
    you are developing an application that is disk-utilization heavy, this difference
    might be enough to have you immediately consider switching to a Linux development
    workstation.
  prefs: []
  type: TYPE_NORMAL
- en: One other area that differs between Docker on Linux and Docker for Windows or
    Docker for Mac is the utilization of endpoint ports. One example is with Docker
    for Windows; you are not able to access a container's endpoint from its the host
    using localhost. This is a known bug, but the only workaround is to access your
    container's endpoints from a different host than you are running them on. With
    Docker for Mac, there are other endpoint limitations, such as not being able to
    ping a container (because Docker for Mac cannot route the ping traffic to and
    from the container) and you cannot have per-container IP addressing (because the
    Docker bridge network is not reachable from macOS).
  prefs: []
  type: TYPE_NORMAL
- en: Any of these limitations might be enough for you to consider switching your
    development workstation to an Ubuntu or CentOS operating system. It was for me,
    and you will find that most of the examples found in this book will be executed
    on my Ubuntu workstation. I will try to point out any areas that may be significantly
    different if you are using Windows or OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow! We covered a lot in this first chapter. You should now be able to install
    Docker on your workstation, regardless of the OS that it is running. You should
    be able to install Docker onto a Linux workstation using three different methods,
    and know some of the differences between installing on an RPM-based system and
    a DEB-based system.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered some very significant reasons why you might consider using a
    Linux workstation for your development, instead of using a Windows or macOS workstation.
    And by now, you should be able to easily validate the successful installation
    of Docker by checking the version of Docker installed.
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to easily confirm that Docker is working as desired by running
    a hello-world container. Not bad for your first chapter, right? Well, with this
    foundation, and your newly Docker-ready workstation, let's move right into [Chapter
    2](e66034ed-dcc0-48a8-a2ec-9466669e6649.xhtml), *Learning Docker Commands*, where
    we will learn about many Docker commands you'll use every day.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker for Windows limitations: [https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports](https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker for Mac limitations: [https://docs.docker.com/v17.09/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds](https://docs.docker.com/v17.09/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
