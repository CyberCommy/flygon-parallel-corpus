- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building User Interfaces Using Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about using Blazor to build user interfaces. I will describe
    the different flavors of Blazor and their pros and cons.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to build Blazor components that can execute their code on
    the web server or in the web browser. When hosted with Blazor Server, it uses
    SignalR to communicate needed updates to the user interface in the browser. When
    hosted with Blazor WebAssembly, the components execute their code in the client
    and must make HTTP calls to interact with the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Blazor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing Blazor project templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building components using Blazor Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting a service for a Blazor component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building components using Blazor WebAssembly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving Blazor WebAssembly apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blazor lets you build shared components and interactive web user interfaces
    using C# instead of JavaScript. In April 2019, Microsoft announced that Blazor
    "is no longer experimental and we are committing to ship it as a supported web
    UI framework, including support for running client side in the browser on WebAssembly."
    Blazor is supported on all modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript and friends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditionally, any code that needs to execute in a web browser is written using
    the JavaScript programming language or a higher-level technology that **transpiles**
    (transforms or compiles) into JavaScript. This is because all browsers have supported
    JavaScript for about two decades, so it has become the lowest common denominator
    for implementing business logic on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript does have some issues, however. Although it has superficial similarities
    to C-style languages like C# and Java, it is actually very different once you
    dig beneath the surface. It is a dynamically typed pseudo-functional language
    that uses prototypes instead of class inheritance for object reuse. It might look
    human, but you will get a surprise when it's revealed to actually be a Skrull.
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn't it be great if we could use the same language and libraries in a web
    browser as we do on the server side?
  prefs: []
  type: TYPE_NORMAL
- en: Silverlight – C# and .NET using a plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft made a previous attempt at achieving this goal with a technology named
    Silverlight. When Silverlight 2.0 was released in 2008, a C# and .NET developer
    could use their skills to build libraries and visual components that were executed
    in the web browser by the Silverlight plugin.
  prefs: []
  type: TYPE_NORMAL
- en: By 2011 and Silverlight 5.0, Apple's success with the iPhone and Steve Jobs'
    hatred of browser plugins like Flash eventually led to Microsoft abandoning Silverlight
    since, like Flash, Silverlight is banned from iPhones and iPads.
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly – a target for Blazor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A recent development in browsers has given Microsoft the opportunity to make
    another attempt. In 2017, the **WebAssembly Consensus** was completed, and all
    major browsers now support it: Chromium (Chrome, Edge, Opera, Brave), Firefox,
    and WebKit (Safari). Blazor is not supported by Microsoft''s Internet Explorer
    because it is a legacy web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WebAssembly** (**Wasm** ) is a binary instruction format for a virtual machine
    that provides a way to run code written in multiple languages on the web at near-native
    speed. Wasm is designed as a portable target for the compilation of high-level
    languages like C#.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Blazor hosting models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blazor is a single programming or app model with multiple hosting models:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blazor Server** runs on the server side, so the C# code that you write has
    full access to all resources that your business logic might need without needing
    to authenticate. It then uses SignalR to communicate user interface updates to
    the client side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server must keep a live SignalR connection to each client and track the
    current state of every client, so Blazor Server does not scale well if you need
    to support lots of clients. It first shipped as part of ASP.NET Core 3.0 in September
    2019 and is included with .NET 5.0 and later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor WebAssembly** runs on the client side, so the C# code that you write
    only has access to resources in the browser and it must make HTTP calls (that
    might require authentication) before it can access resources on the server. It
    first shipped as an extension to ASP.NET Core 3.1 in May 2020 and was versioned
    3.2 because it is a Current release and therefore not covered by ASP.NET Core
    3.1''s Long Term Support. The Blazor WebAssembly 3.2 version used the Mono runtime
    and Mono libraries; .NET 5 and later versions use the Mono runtime and the .NET
    5 libraries. "*Blazor WebAssembly runs on a .NET IL interpreter without any JIT
    so it''s not going to win any speed competitions. We have made some significant
    speed improvements though in .NET 5, and we expect to improve things further for
    .NET 6.* "—Daniel Roth'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET MAUI Blazor App** , aka **Blazor Hybrid** , runs in the .NET process,
    renders its web UI to a web view control using a local interop channel, and is
    hosted in a .NET MAUI app. It is conceptually like Electron apps that use Node.js.
    We will see this hosting model in online chapter, *Chapter 19* , *Building Mobile
    and Desktop Apps Using .NET MAUI* (available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ) .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This multi-host model means that, with careful planning, a developer can write
    Blazor components once, and then run them on the web server side, web client side,
    or within a desktop app.
  prefs: []
  type: TYPE_NORMAL
- en: Although Blazor Server is supported on Internet Explorer 11, Blazor WebAssembly
    is not.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor WebAssembly has optional support for **Progressive Web Apps** (**PWAs**
    ), meaning a website visitor can use a browser menu to add the app to their desktop
    and run the app offline.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Blazor components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to understand that Blazor is used to create **user interface
    components** . Components define how to render the user interface, react to user
    events, and can be composed and nested, and compiled into a NuGet Razor class
    library for packaging and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you might create a component named `Rating.razor` , as shown in
    the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@for (int'
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  prefs: []
  type: TYPE_NORMAL
- en: ; i < Maximum; i++)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (i < Value)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: ="oi oi-star-filled"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: ="oi oi-star-empty"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: byte
  prefs: []
  type: TYPE_NORMAL
- en: Maximum { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: byte
  prefs: []
  type: TYPE_NORMAL
- en: Value { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a single file with both markup and an `@code` block, the code can
    be stored in a separate code-behind file named `Rating.razor.cs` . The class in
    this file must be `partial` and have the same name as the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could then use the component on a web page, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: h1
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Review</
  prefs: []
  type: TYPE_NORMAL
- en: h1
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: Rating
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"rating"'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"5"'
  prefs: []
  type: TYPE_NORMAL
- en: Value
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"3"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: textarea
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"comment"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: There are many built-in Blazor components, including ones to set elements like
    `<title>` in the `<head>` section of a web page, and plenty of third parties who
    will sell you components for common purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, Blazor might not be limited to only creating user interface components
    using web technologies. Microsoft has an experimental technology known as **Blazor
    Mobile Bindings** that allows developers to use Blazor to build mobile user interface
    components. Instead of using HTML and CSS to build a web user interface, it uses
    XAML and .NET MAUI to build a cross-platform graphical user interface.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between Blazor and Razor?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might wonder why Blazor components use `.razor` as their file extension.
    Razor is a template markup syntax that allows the mixing of HTML and C#. Older
    technologies that support Razor syntax use the `.cshtml` file extension to indicate
    the mix of C# and HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Razor syntax is used for:'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core MVC **views** and **partial views** that use the `.cshtml` file
    extension. The business logic is separated into a controller class that treats
    the view as a template to push the view model to, which then outputs it to a web
    page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Razor Pages** that use the `.cshtml` file extension. The business logic can
    be embedded or separated into a file that uses the `.cshtml.cs` file extension.
    The output is a web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor components** that use the `.razor` file extension. The output is not
    a web page, although layouts can be used to wrap a component so it outputs as
    a web page, and the `@page` directive can be used to assign a route that defines
    the URL path to retrieve the component as a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing Blazor project templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to understand the choice between the Blazor Server and Blazor WebAssembly
    hosting models is to review the differences in their default project templates.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the Blazor Server project template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us look at the default template for a Blazor Server project. Mostly you
    will see that it is the same as an ASP.NET Core Razor Pages template, with a few
    key additions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Blazor Server App** / `blazorserver`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.BlazorServer`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other Visual Studio options: **Authentication Type** : **None** ; **Configure
    for HTTPS** : selected; **Enable Docker** : cleared'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `Northwind.BlazorServer` as the active OmniSharp
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `Northwind.BlazorServer` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project/folder, open `Northwind.BlazorServer.csproj`
    and note that it is identical to an ASP.NET Core project that uses the Web SDK
    and targets .NET 6.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Program.cs` , and note it is almost identical to an ASP.NET Core project.
    Differences include the section that configures services, with its call to the
    `AddServerSideBlazor` method, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddRazorPages();
  prefs: []
  type: TYPE_NORMAL
- en: '**builder.Services.AddServerSideBlazor();**'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddSingleton<WeatherForecastService>();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also note the section for configuring the HTTP pipeline, which adds the calls
    to the `MapBlazorHub` and `MapFallbackToPage` methods that configure the ASP.NET
    Core app to accept incoming SignalR connections for Blazor components, while other
    requests fall back to a Razor Page named `_Host.cshtml` , as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: app.UseRouting();
  prefs: []
  type: TYPE_NORMAL
- en: '**app.MapBlazorHub();**'
  prefs: []
  type: TYPE_NORMAL
- en: '**app.MapFallbackToPage(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"/_Host"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: app.Run();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, open `_Host.cshtml` and note that it sets a shared layout
    named `_Layout` and renders a Blazor component of type `App` that is prerendered
    on the server, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/"'
  prefs: []
  type: TYPE_NORMAL
- en: '@namespace  Northwind.BlazorServer.Pages'
  prefs: []
  type: TYPE_NORMAL
- en: '@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers'
  prefs: []
  type: TYPE_NORMAL
- en: '@{'
  prefs: []
  type: TYPE_NORMAL
- en: Layout = "_Layout"
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: component
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"typeof(App)"'
  prefs: []
  type: TYPE_NORMAL
- en: render-mode
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"ServerPrerendered"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, open the shared layout file named `_Layout.cshtml` ,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Microsoft.AspNetCore.Components.Web'
  prefs: []
  type: TYPE_NORMAL
- en: '@namespace Northwind.BlazorServer.Pages'
  prefs: []
  type: TYPE_NORMAL
- en: '@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers'
  prefs: []
  type: TYPE_NORMAL
- en: <!DOCTYPE
  prefs: []
  type: TYPE_NORMAL
- en: html
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: html
  prefs: []
  type: TYPE_NORMAL
- en: lang
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"en"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: head
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: meta
  prefs: []
  type: TYPE_NORMAL
- en: charset
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"utf-8"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: meta
  prefs: []
  type: TYPE_NORMAL
- en: name
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"viewport"'
  prefs: []
  type: TYPE_NORMAL
- en: content
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"width=device-width, initial-scale=1.0"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: base
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"~/"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"stylesheet"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"css/bootstrap/bootstrap.min.css"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"css/site.css"'
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"stylesheet"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Northwind.BlazorServer.styles.css"'
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"stylesheet"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: component
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"typeof(HeadOutlet)"'
  prefs: []
  type: TYPE_NORMAL
- en: render-mode
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"ServerPrerendered"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: head
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: body
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@RenderBody()'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"blazor-error-ui"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: environment
  prefs: []
  type: TYPE_NORMAL
- en: include
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Staging,Production"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: An error has occurred. This application may no longer respond until reloaded.
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: environment
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: environment
  prefs: []
  type: TYPE_NORMAL
- en: include
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Development"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: An unhandled exception has occurred. See browser dev tools for details.
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: environment
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"reload"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Reload</
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"dismiss"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00149.jpg)'
  prefs: []
  type: TYPE_IMG
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: src
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"_framework/blazor.server.js"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: body
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: html
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'While reviewing the preceding markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<div id="blazor-error-ui">` for showing Blazor errors that will appear as
    a yellow bar at the bottom of the web page when an error occurs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script block for `blazor.server.js` manages the SignalR connection back
    to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Northwind.BlazorServer` folder, open `App.razor` and note that it defines
    a `Router` for all components found in the current assembly, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: Router
  prefs: []
  type: TYPE_NORMAL
- en: AppAssembly
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@typeof(App).Assembly"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: Found
  prefs: []
  type: TYPE_NORMAL
- en: Context
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"routeData"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: RouteView
  prefs: []
  type: TYPE_NORMAL
- en: RouteData
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@routeData"'
  prefs: []
  type: TYPE_NORMAL
- en: DefaultLayout
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@typeof(MainLayout)"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: FocusOnNavigate
  prefs: []
  type: TYPE_NORMAL
- en: RouteData
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@routeData"'
  prefs: []
  type: TYPE_NORMAL
- en: Selector
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"h1"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: Found
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NotFound
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: PageTitle
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Not found</
  prefs: []
  type: TYPE_NORMAL
- en: PageTitle
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: LayoutView
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@typeof(MainLayout)"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Sorry, there's nothing at this address.</
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: LayoutView
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NotFound
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: Router
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'While reviewing the preceding markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: If a matching route is found, then `RouteView` is executed that sets the default
    layout for the component to `MainLayout` and passes any route data parameters
    to the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a matching route is not found, then `LayoutView` is executed that renders
    the internal markup (in this case, a simple paragraph element with a message telling
    the visitor there is nothing at this address) inside `MainLayout` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Shared` folder, open `MainLayout.razor` and note that it defines `<div>`
    for a sidebar containing a navigation menu that is implemented by the `NavMenu.razor`
    component file in this project, and an HTML5 element such as `<main>` and `<article>`
    for the content, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@inherits LayoutComponentBase'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: PageTitle
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorServer</
  prefs: []
  type: TYPE_NORMAL
- en: PageTitle
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"page"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"sidebar"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavMenu
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: main
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"top-row px-4"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"https://docs.microsoft.com/aspnet/"'
  prefs: []
  type: TYPE_NORMAL
- en: target
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"_blank"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: About</
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: article
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"content px-4"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@Body'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: article
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: main
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Shared` folder, open `MainLayout.razor.css` and note that it contains
    isolated CSS styles for the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Shared` folder, open `NavMenu.razor` and note that it has three menu
    items for **Home** , **Counter** , and **Fetch data** . These are created by using
    a Microsoft-provided Blazor component named `NavLink` , as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"top-row ps-3 navbar navbar-dark"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"container-fluid"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"navbar-brand"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorServer</
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: button
  prefs: []
  type: TYPE_NORMAL
- en: title
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Navigation menu"'
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"navbar-toggler"'
  prefs: []
  type: TYPE_NORMAL
- en: '@'
  prefs: []
  type: TYPE_NORMAL
- en: onclick
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"ToggleNavMenu"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"navbar-toggler-icon"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: button
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@NavMenuCssClass"'
  prefs: []
  type: TYPE_NORMAL
- en: '@'
  prefs: []
  type: TYPE_NORMAL
- en: onclick
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"ToggleNavMenu"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: nav
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"flex-column"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-item px-3"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-link"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: Match
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"NavLinkMatch.All"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-home"'
  prefs: []
  type: TYPE_NORMAL
- en: aria-hidden
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"true"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Home
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-item px-3"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-link"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"counter"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-plus"'
  prefs: []
  type: TYPE_NORMAL
- en: aria-hidden
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"true"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Counter
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-item px-3"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-link"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"fetchdata"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-list-rich"'
  prefs: []
  type: TYPE_NORMAL
- en: aria-hidden
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"true"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Fetch data
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: nav
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: collapseNavMenu = true
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '? NavMenuCssClass => collapseNavMenu ? "collapse"'
  prefs: []
  type: TYPE_NORMAL
- en: ': null'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: void
  prefs: []
  type: TYPE_NORMAL
- en: ToggleNavMenu
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: collapseNavMenu = !collapseNavMenu;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, open `FetchData.razor` and note that it defines a component
    that fetches weather forecasts from an injected dependency weather service and
    then renders them in a table, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/fetchdata"'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: PageTitle
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Weather forecast</
  prefs: []
  type: TYPE_NORMAL
- en: PageTitle
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Northwind.BlazorServer.Data'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject WeatherForecastService ForecastService'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: h1
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Weather forecast</
  prefs: []
  type: TYPE_NORMAL
- en: h1
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: This component demonstrates fetching data from a service.</
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@if (forecasts == null)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '><'
  prefs: []
  type: TYPE_NORMAL
- en: em
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Loading...</
  prefs: []
  type: TYPE_NORMAL
- en: em
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"table"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: thead
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Date</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Temp. (C)</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Temp. (F)</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Summary</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: thead
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tbody
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@foreach (var forecast in forecasts)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@forecast.Date.ToShortDateString()</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@forecast.TemperatureC</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@forecast.TemperatureF</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@forecast.Summary</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tbody
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecast[]? forecasts;
  prefs: []
  type: TYPE_NORMAL
- en: protected
  prefs: []
  type: TYPE_NORMAL
- en: override
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task OnInitializedAsync
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: forecasts = await
  prefs: []
  type: TYPE_NORMAL
- en: ForecastService.GetForecastAsync(DateTime.Now);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Data` folder, open `WeatherForecastService.cs` and note that it is
    *not* a Web API controller class; it is just an ordinary class that returns random
    weather data, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorServer.Data
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecastService
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '[] Summaries = new'
  prefs: []
  type: TYPE_NORMAL
- en: '[]'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Freezing"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Bracing"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Chilly"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Cool"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Mild"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Warm"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"Balmy"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Hot"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Sweltering"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Scorching"'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<WeatherForecast[]> GetForecastAsync(DateTime startDate)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Task.FromResult(Enumerable.Range(1
  prefs: []
  type: TYPE_NORMAL
- en: ', 5'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: .Select(index => new
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecast
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Date = startDate.AddDays(index),
  prefs: []
  type: TYPE_NORMAL
- en: TemperatureC = Random.Shared.Next(-20
  prefs: []
  type: TYPE_NORMAL
- en: ', 55'
  prefs: []
  type: TYPE_NORMAL
- en: ),
  prefs: []
  type: TYPE_NORMAL
- en: Summary = Summaries[Random.Shared.Next(Summaries.Length)]
  prefs: []
  type: TYPE_NORMAL
- en: '}).ToArray());'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CSS and JavaScript isolation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blazor components often need to provide their own CSS to apply styling or JavaScript
    for activities that cannot be performed purely in C#, like access to browser APIs.
    To ensure this does not conflict with site-level CSS and JavaScript, Blazor supports
    CSS and JavaScript isolation. If you have a component named `Index.razor` , simply
    create a CSS file named `Index.razor.css` . The styles defined within this file
    will override any other styles in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Blazor routing to page components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Router` component that we saw in the `App.razor` file enables routing to
    components. The markup for creating an instance of a component looks like an HTML
    tag where the name of the tag is the component type. Components can be embedded
    on a web page using an element, for example, `<Rating Stars="5" />` , or can be
    routed to like a Razor Page or MVC controller.
  prefs: []
  type: TYPE_NORMAL
- en: How to define a routable page component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a routable page component, add the `@page` directive to the top of
    a component''s `.razor` file, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "customers"'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code is the equivalent of an MVC controller decorated with the
    `[Route]` attribute, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '[Route('
  prefs: []
  type: TYPE_NORMAL
- en: '"customers"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: CustomersController
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: The `Router` component scans the assembly specifically in its `AppAssembly`
    parameter for components decorated with the `[Route]` attribute and registers
    their URL paths.
  prefs: []
  type: TYPE_NORMAL
- en: Any single-page component can have multiple `@page` directives to register multiple
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: At runtime, the page component is merged with any specific layout that you have
    specified, just like an MVC view or Razor Page would be. By default, the Blazor
    Server project template defines `MainLayout.razor` as the layout for page components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : By convention, put routable page components in the `Pages`
    folder.'
  prefs: []
  type: TYPE_NORMAL
- en: How to navigate Blazor routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft provides a dependency service named `NavigationManager` that understands
    Blazor routing and the `NavLink` component.
  prefs: []
  type: TYPE_NORMAL
- en: The `NavigateTo` method is used to go to the specified URL.
  prefs: []
  type: TYPE_NORMAL
- en: How to pass route parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blazor routes can include case-insensitive named parameters, and your code
    can most easily access the passed values by binding the parameter to a property
    in the code block using the `[Parameter]` attribute, as shown in the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/customers/{country}"'
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: '>Country parameter as the value: @Country</div'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: Country { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'The recommended way to handle a parameter that should have a default value
    when it is missing is to suffix the parameter with `?` and use the null coalescing
    operator in the `OnParametersSet` method, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/customers/{country?}"'
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: '>Country parameter as the value: @Country</div'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: Country { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: protected
  prefs: []
  type: TYPE_NORMAL
- en: override
  prefs: []
  type: TYPE_NORMAL
- en: void
  prefs: []
  type: TYPE_NORMAL
- en: OnParametersSet
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // if the automatically set property is null
  prefs: []
  type: TYPE_NORMAL
- en: // set its value to USA
  prefs: []
  type: TYPE_NORMAL
- en: Country = Country ?? "USA"
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding base component classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `OnParametersSet` method is defined by the base class that components inherit
    from by default named `ComponentBase` , as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.Components;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: abstract
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: ComponentBase
  prefs: []
  type: TYPE_NORMAL
- en: ': IComponent'
  prefs: []
  type: TYPE_NORMAL
- en: ', IHandleAfterRender'
  prefs: []
  type: TYPE_NORMAL
- en: ', IHandleEvent'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // members not shown
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '`ComponentBase` has some useful methods that you can call and override, as
    shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method(s) | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `InvokeAsync` | Call this method to execute a function on the associated
    renderer''s synchronization context. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnAfterRender` , `OnAfterRenderAsync` | Override these methods to invoke
    code after each time the component has been rendered. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnInitialized` , `OnInitializedAsync` | Override these methods to invoke
    code after the component has received its initial parameters from its parent in
    the render tree. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnParametersSet` , `OnParametersSetAsync` | Override these methods to invoke
    code after the component has received parameters and the values have been assigned
    to properties. |'
  prefs: []
  type: TYPE_TB
- en: '| `ShouldRender` | Override this method to indicate if the component should
    render. |'
  prefs: []
  type: TYPE_TB
- en: '| `StateHasChanged` | Call this method to cause the component to re-render.
    |'
  prefs: []
  type: TYPE_TB
- en: Blazor components can have shared layouts in a similar way to MVC views and
    Razor Pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `.razor` component file, but make it explicitly inherit from `LayoutComponentBase`
    , as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@inherits LayoutComponentBase'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '@Body'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: The base class has a property named `Body` that you can render in the markup
    at the correct place within the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set a default layout for components in the `App.razor` file and its `Router`
    component. To explicitly set a layout for a component, use the `@layout` directive,
    as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/customers"'
  prefs: []
  type: TYPE_NORMAL
- en: '@layout AlternativeLayout'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: How to use the navigation link component with routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In HTML, you use the `<a>` element to define navigation links, as shown in
    the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <a
  prefs: []
  type: TYPE_NORMAL
- en: href="/customers"
  prefs: []
  type: TYPE_NORMAL
- en: '>Customers</a'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Blazor, use the `<NavLink>` component, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"/customers"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customers</
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: The `NavLink` component is better than an anchor element because it automatically
    sets its class to `active` if its `href` is a match on the current location URL.
    If your CSS uses a different class name, then you can set the class name in the
    `NavLink.ActiveClass` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, in the matching algorithm, the `href` is a path *prefix* , so if
    `NavLink` has an `href` of `/customers` , as shown in the preceding code example,
    then it would match all the following paths and set them all to have the `active`
    class style:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: /customers
  prefs: []
  type: TYPE_NORMAL
- en: /customers/USA
  prefs: []
  type: TYPE_NORMAL
- en: /customers/Germany/Berlin
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that the matching algorithm only performs matches on *all* of the
    paths, set the `Match` parameter to `NavLinkMatch.All` , as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"/customers"'
  prefs: []
  type: TYPE_NORMAL
- en: Match
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"NavLinkMatch.All"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customers</
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: If you set other attributes such as `target` , they are passed through to the
    underlying `<a>` element that is generated.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Blazor Server project template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have reviewed the project template and the important parts that
    are specific to Blazor Server, we can start the website and review its behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Properties` folder, open `launchSettings.json` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `applicationUrl` to use port `5000` for `HTTP` and port `5001` for
    `HTTPS` , as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '"profiles"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Northwind.BlazorServer"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"commandName"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Project"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"dotnetRunMessages"'
  prefs: []
  type: TYPE_NORMAL
- en: ': true'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"launchBrowser"'
  prefs: []
  type: TYPE_NORMAL
- en: ': true'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '**"applicationUrl"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"https://localhost:5001;http://localhost:5000"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '"environmentVariables"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"ASPNETCORE_ENVIRONMENT"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Development"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Fetch data** , as shown in *Figure 17.1*
    :![](img/Image00150.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.1: Fetching weather data into a Blazor Server app'
  prefs: []
  type: TYPE_NORMAL
- en: In the browser address bar, change the route to `/apples` and note the missing
    message, as shown in *Figure 17.2* :![](img/Image00151.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.2: The missing component message'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reviewing the Blazor WebAssembly project template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will create a Blazor WebAssembly project. I will not show code in the
    book if the code is the same as in a Blazor Server project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project to the `PracticalApps`
    solution or workspace, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Blazor WebAssembly App** / `blazorwasm`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switches: `--pwa --hosted`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.BlazorWasm`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Authentication Type** : **None**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS** : checked'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ASP.NET Core hosted** : checked'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Progressive Web Application** : checked'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While reviewing the generated folders and files, note that three projects are
    generated, as described in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Northwind.BlazorWasm.Client` is the Blazor WebAssembly project in the `Northwind.BlazorWasm\Client`
    folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.BlazorWasm.Server` is an ASP.NET Core project website in the `Northwind.BlazorWasm\Server`
    folder for hosting the weather service that has the same implementation for returning
    random weather forecasts as before, but is implemented as a proper Web API controller
    class. The project file has project references to `Shared` and `Client` , and
    a package reference to support Blazor WebAssembly on the server side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.BlazorWasm.Shared` is a class library in the `Northwind.BlazorWasm\Shared`
    folder that contains models for the weather service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The folder structure is simplified, as shown in *Figure 17.3* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00152.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: The folder structure for the Blazor WebAssembly project template'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to deploy a Blazor WebAssembly app. You could deploy just
    the `Client` project by placing its published files in any static hosting web
    server. It could be configured to call the weather service that you created in
    *Chapter 16* , *Building and Consuming Web Services* , or you can deploy the `Server`
    project, which references the `Client` app and hosts both the weather service
    and the Blazor WebAssembly app. The app is placed in the server website `wwwroot`
    folder along with any other static assets. You can read more about these choices
    at the following link: [https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly](https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Client` folder, open `Northwind.BlazorWasm.Client.csproj` and note
    that it uses the Blazor WebAssembly SDK and references two WebAssembly packages
    and the `Shared` project, as well as the service worker required for PWA support,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  prefs: []
  type: TYPE_NORMAL
- en: <Nullable>enable</Nullable>
  prefs: []
  type: TYPE_NORMAL
- en: <ImplicitUsings>enable</ImplicitUsings>
  prefs: []
  type: TYPE_NORMAL
- en: <ServiceWorkerAssetsManifest>service-worker-assets.js
  prefs: []
  type: TYPE_NORMAL
- en: </ServiceWorkerAssetsManifest>
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include=
  prefs: []
  type: TYPE_NORMAL
- en: '"Microsoft.AspNetCore.Components.WebAssembly"'
  prefs: []
  type: TYPE_NORMAL
- en: Version="6.0.0"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include=
  prefs: []
  type: TYPE_NORMAL
- en: '"Microsoft.AspNetCore.Components.WebAssembly.DevServer"'
  prefs: []
  type: TYPE_NORMAL
- en: Version="6.0.0"
  prefs: []
  type: TYPE_NORMAL
- en: PrivateAssets="all"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include=
  prefs: []
  type: TYPE_NORMAL
- en: '"..\Shared\Northwind.BlazorWasm.Shared.csproj"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ServiceWorker Include="wwwroot\service-worker.js"
  prefs: []
  type: TYPE_NORMAL
- en: PublishedContent="wwwroot\service-worker.published.js"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: </Project>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Client` folder, open `Program.cs` and note that the host builder is
    for `WebAssembly` instead of server-side ASP.NET Core, and that it registers a
    dependency service for making HTTP requests, which is an extremely common requirement
    for Blazor WebAssembly apps, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.Components.Web;
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.Components.WebAssembly.Hosting;
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorWasm.Client;
  prefs: []
  type: TYPE_NORMAL
- en: var
  prefs: []
  type: TYPE_NORMAL
- en: builder = WebAssemblyHostBuilder.CreateDefault(args);
  prefs: []
  type: TYPE_NORMAL
- en: builder.RootComponents.Add<App>("#app"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: builder.RootComponents.Add<HeadOutlet>("head::after"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddScoped(sp => new
  prefs: []
  type: TYPE_NORMAL
- en: HttpClient
  prefs: []
  type: TYPE_NORMAL
- en: '{ BaseAddress = new'
  prefs: []
  type: TYPE_NORMAL
- en: Uri(builder.HostEnvironment.BaseAddress) });
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: builder.Build().RunAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `wwwroot` folder, open `index.html` and note the `manifest.json` and
    `service-worker.js` files supporting offline work, and the `blazor.webassembly.js`
    script that downloads all the NuGet packages for Blazor WebAssembly, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <!DOCTYPE
  prefs: []
  type: TYPE_NORMAL
- en: html
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: html
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: head
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: meta
  prefs: []
  type: TYPE_NORMAL
- en: charset
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"utf-8"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: meta
  prefs: []
  type: TYPE_NORMAL
- en: name
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"viewport"'
  prefs: []
  type: TYPE_NORMAL
- en: content
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: title
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorWasm</
  prefs: []
  type: TYPE_NORMAL
- en: title
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: base
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"/"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"css/bootstrap/bootstrap.min.css"'
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"stylesheet"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"css/app.css"'
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"stylesheet"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Northwind.BlazorWasm.Client.styles.css"'
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"stylesheet"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"manifest.json"'
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"manifest"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"apple-touch-icon"'
  prefs: []
  type: TYPE_NORMAL
- en: sizes
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"512x512"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"icon-512.png"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: link
  prefs: []
  type: TYPE_NORMAL
- en: rel
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"apple-touch-icon"'
  prefs: []
  type: TYPE_NORMAL
- en: sizes
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"192x192"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"icon-192.png"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: head
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: body
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"app"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Loading...</
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"blazor-error-ui"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: An unhandled error has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '""'
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"reload"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Reload</
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"dismiss"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00149.jpg)'
  prefs: []
  type: TYPE_IMG
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: src
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"_framework/blazor.webassembly.js"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: navigator.serviceWorker.register('service-worker.js'
  prefs: []
  type: TYPE_NORMAL
- en: );</
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: body
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: html
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the following `.razor` files are identical to those in a Blazor Server
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared\MainLayout.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared\NavMenu.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared\SurveyPrompt.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pages\Counter.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pages\Index.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, open `FetchData.razor` and note that the markup is like
    Blazor Server except for the injected dependency service for making HTTP requests,
    as shown highlighted in the following partial markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/fetchdata"'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Northwind.BlazorWasm.Shared'
  prefs: []
  type: TYPE_NORMAL
- en: '**@inject HttpClient Http**'
  prefs: []
  type: TYPE_NORMAL
- en: <h1
  prefs: []
  type: TYPE_NORMAL
- en: '>Weather forecast</h1'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecast[]? forecasts;
  prefs: []
  type: TYPE_NORMAL
- en: protected
  prefs: []
  type: TYPE_NORMAL
- en: override
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: OnInitializedAsync
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '**forecasts =**'
  prefs: []
  type: TYPE_NORMAL
- en: '**await**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Http.GetFromJsonAsync<WeatherForecast[]>(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"WeatherForecast"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorWasm.Server` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the app has the same functionality as before. The Blazor component
    code is executing inside the browser instead of on the server. The weather service
    is running on the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building components using Blazor Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a component to list, create, and edit customers
    in the Northwind database. We will build it first for Blazor Server naively, and
    then refactor it to work with both Blazor Server and Blazor WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: Defining and testing a simple component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the new component to the existing Blazor Server project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project (*not* the `Northwind.BlazorWasm.Server`
    project), in the `Pages` folder, add a new file named `Customers.razor` . In Visual
    Studio, the project item is named **Razor Component** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice** : Component filenames must start with an uppercase letter,
    or you will have compile errors!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add statements to output a heading for the `Customers` component and define
    a code block that defines a property to store the name of a country, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <h3
  prefs: []
  type: TYPE_NORMAL
- en: '>Customers@(string'
  prefs: []
  type: TYPE_NORMAL
- en: .IsNullOrWhiteSpace(Country) ? " Worldwide"
  prefs: []
  type: TYPE_NORMAL
- en: ': " in "'
  prefs: []
  type: TYPE_NORMAL
- en: + Country)</h3
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '? Country { get'
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, in the `Index.razor` component, add statements to the
    bottom of the file to instantiate the `Customers` component twice, once passing
    `Germany` as the country parameter, and once without setting the country, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: Customers
  prefs: []
  type: TYPE_NORMAL
- en: Country
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Germany"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: Customers
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` and note the `Customers` components, as
    shown in *Figure 17.4* :![](img/Image00153.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.4: The Customers component with the Country parameter set to Germany
    and not set'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the component a routable page component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple to turn this component into a routable page component with a route
    parameter for the country:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, in the `Customers.razor` component, add a statement
    at the top of the file to register `/customers` as its route with an optional
    country route parameter, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/customers/{country?}"'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Shared` folder, open `NavMenu.razor` and add two list item elements
    for our routable page component to show customers worldwide and in Germany that
    both use an icon of people, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-item px-3"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-link"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"customers"'
  prefs: []
  type: TYPE_NORMAL
- en: Match
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"NavLinkMatch.All"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-people"'
  prefs: []
  type: TYPE_NORMAL
- en: aria-hidden
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"true"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customers Worldwide
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-item px-3"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-link"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"customers/Germany"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-people"'
  prefs: []
  type: TYPE_NORMAL
- en: aria-hidden
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"true"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customers in Germany
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'We used an icon of people for the customers menu item. You can see the other
    available icons at the following link: [https://iconify.design/icon-sets/oi/](https://iconify.design/icon-sets/oi/)'
  prefs: []
  type: TYPE_NORMAL
- en: Start the website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers in Germany** , and note that
    the country name is correctly passed to the page component and that the component
    uses the same shared layout as the other page components, like `Index.razor` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting entities into a component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have seen the minimum implementation of a component, we can add
    some useful functionality to it. In this case, we will use the Northwind database
    context to fetch customers from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Northwind.BlazorServer.csproj` , add a reference to the Northwind database
    context project for either SQL Server or SQLite, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- change Sqlite to SqlServer if you prefer -->
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include="..\Northwind.Common.DataContext.Sqlite
  prefs: []
  type: TYPE_NORMAL
- en: \Northwind.Common.DataContext.Sqlite.csproj"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Build the `Northwind.BlazorServer` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs` , import the namespace for working with the Northwind database
    context, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared; // AddNorthwindContext extension method
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the section that configures services, add a statement to register the Northwind
    database context in the dependency services collection, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddNorthwindContext();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `_Imports.razor` and import namespaces for working with the Northwind
    entities so that Blazor components that we build do not need to import the namespaces
    individually, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Packt.Shared  @* Northwind entities *@'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: The `_Imports.razor` file only applies to `.razor` files. If you use code-behind
    `.cs` files to implement component code, then they must have namespaces imported
    separately or use global usings to implicitly import the namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, in `Customers.razor` , add statements to inject the
    Northwind database context and then use it to output a table of all customers,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Microsoft.EntityFrameworkCore  @* ToListAsync extension method *@'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/customers/{country?}"'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject NorthwindContext db'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: h3
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customers @(string.IsNullOrWhiteSpace(Country)
  prefs: []
  type: TYPE_NORMAL
- en: '? "Worldwide" : "in " + Country)</'
  prefs: []
  type: TYPE_NORMAL
- en: h3
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@if (customers == null)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '><'
  prefs: []
  type: TYPE_NORMAL
- en: em
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Loading...</
  prefs: []
  type: TYPE_NORMAL
- en: em
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"table"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: thead
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Id</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Company Name</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Address</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Phone</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: thead
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tbody
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@foreach (Customer c in customers)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@c.CustomerId</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@c.CompanyName</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@c.Address<'
  prefs: []
  type: TYPE_NORMAL
- en: br
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '@c.City<'
  prefs: []
  type: TYPE_NORMAL
- en: br
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '@c.PostalCode<'
  prefs: []
  type: TYPE_NORMAL
- en: br
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '@c.Country'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@c.Phone</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"btn btn-info"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"editcustomer/@c.CustomerId"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: i
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-pencil"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: i
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"btn btn-danger"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"deletecustomer/@c.CustomerId"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: i
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-trash"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: i
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tbody
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '? Country { get'
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: IEnumerable<
  prefs: []
  type: TYPE_NORMAL
- en: Customer
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '? customers;'
  prefs: []
  type: TYPE_NORMAL
- en: protected
  prefs: []
  type: TYPE_NORMAL
- en: override
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task OnParametersSetAsync
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (string
  prefs: []
  type: TYPE_NORMAL
- en: .IsNullOrWhiteSpace(Country))
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: customers = await
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: customers = await db.Customers
  prefs: []
  type: TYPE_NORMAL
- en: .Where(c => c.Country == Country).ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` project website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers Worldwide** , and note that the
    table of customers loads from the database and renders in the web page, as shown
    in *Figure 17.5* :![](img/Image00154.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.5: The list of customers worldwide'
  prefs: []
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers in Germany** , and note that
    the table of customers is filtered to only show German customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser address bar, change `Germany` to `UK` , and note that the table
    of customers is filtered to only show UK customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Home** , and note that the customers component
    also works correctly when used as an embedded component on a page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click any of the edit or delete buttons and note that they return a message
    saying `Sorry, there's nothing at this address` . because we have not yet implemented
    that functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Abstracting a service for a Blazor component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, the Blazor component directly calls the Northwind database context
    to fetch the customers. This works fine in Blazor Server since the component executes
    on the server. But this component would not work when hosted in Blazor WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create a local dependency service to enable better reuse of the
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project, in the `Data` folder, add a new file
    named `INorthwindService.cs` . (The Visual Studio project item template is named
    **Interface** .)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to define a contract for a local service that abstracts
    CRUD operations, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: interface
  prefs: []
  type: TYPE_NORMAL
- en: INorthwindService
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: country);
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> GetCustomerAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id);
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer>
  prefs: []
  type: TYPE_NORMAL
- en: CreateCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer>
  prefs: []
  type: TYPE_NORMAL
- en: UpdateCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: DeleteCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Data` folder, add a new file named `NorthwindService.cs` and modify
    its contents to implement the `INorthwindService` interface by using the Northwind
    database context, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.EntityFrameworkCore;
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindService
  prefs: []
  type: TYPE_NORMAL
- en: ': INorthwindService'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindContext db;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindService
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindContext db
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: this
  prefs: []
  type: TYPE_NORMAL
- en: .db = db;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: country)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.Where(c => c.Country == country).ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> GetCustomerAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.FirstOrDefaultAsync
  prefs: []
  type: TYPE_NORMAL
- en: (c => c.CustomerId == id);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer>
  prefs: []
  type: TYPE_NORMAL
- en: CreateCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.Add(c);
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Task.FromResult(c);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer>
  prefs: []
  type: TYPE_NORMAL
- en: UpdateCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: db.Entry(c).State = EntityState.Modified;
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Task.FromResult(c);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: DeleteCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? customer = db.Customers.FirstOrDefaultAsync
  prefs: []
  type: TYPE_NORMAL
- en: (c => c.CustomerId == id).Result;
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customer == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Task.CompletedTask;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.Remove(customer);
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs` , in the section that configures services, add a statement
    to register `NorthwindService` as a transient service that implements the `INorthwindService`
    interface, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<INorthwindService, NorthwindService>();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, open `Customers.razor` and replace the directive to
    inject the Northwind database context with a directive to inject the registered
    Northwind service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject INorthwindService service'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `OnParametersSetAsync` method to call the service, as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: protected
  prefs: []
  type: TYPE_NORMAL
- en: override
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: OnParametersSetAsync
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (string
  prefs: []
  type: TYPE_NORMAL
- en: .IsNullOrWhiteSpace(Country))
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '**customers =**'
  prefs: []
  type: TYPE_NORMAL
- en: '**await**'
  prefs: []
  type: TYPE_NORMAL
- en: '**service.GetCustomersAsync();**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '**customers =**'
  prefs: []
  type: TYPE_NORMAL
- en: '**await**'
  prefs: []
  type: TYPE_NORMAL
- en: '**service.GetCustomersAsync(Country);**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` website project and confirm that it retains
    the same functionality as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining forms using the EditForm component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft provides ready-made components for building forms. We will use them
    to provide, create, and edit functionality for customers.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft provides the `EditForm` component and several form elements such as
    `InputText` to make it easier to use forms with Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: '`EditForm` can have a model set to bind it to an object with properties and
    event handlers for custom validation, as well as recognizing standard Microsoft
    validation attributes on the model class, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: EditForm
  prefs: []
  type: TYPE_NORMAL
- en: Model
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@customer"'
  prefs: []
  type: TYPE_NORMAL
- en: OnSubmit
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"ExtraValidation"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: DataAnnotationsValidator
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: ValidationSummary
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: InputText
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"name"'
  prefs: []
  type: TYPE_NORMAL
- en: '@'
  prefs: []
  type: TYPE_NORMAL
- en: bind-Value
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"customer.CompanyName"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: button
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"submit"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Submit</
  prefs: []
  type: TYPE_NORMAL
- en: button
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: EditForm
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = new
  prefs: []
  type: TYPE_NORMAL
- en: ();
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: void
  prefs: []
  type: TYPE_NORMAL
- en: ExtraValidation()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // perform any extra validation
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to a `ValidationSummary` component, you can use the `ValidationMessage`
    component to show a message next to an individual form element.
  prefs: []
  type: TYPE_NORMAL
- en: Building and using a customer form component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can create a shared component to create or edit a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Shared` folder, create a new file named `CustomerDetail.razor` . (The
    Visual Studio project item template is named **Razor Component** .) This component
    will be reused on multiple page components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to define a form to edit the properties of a customer,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: EditForm
  prefs: []
  type: TYPE_NORMAL
- en: Model
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@Customer"'
  prefs: []
  type: TYPE_NORMAL
- en: OnValidSubmit
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@OnValidSubmit"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: DataAnnotationsValidator
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"form-group"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customer Id</
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: InputText
  prefs: []
  type: TYPE_NORMAL
- en: '@'
  prefs: []
  type: TYPE_NORMAL
- en: bind-Value
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@Customer.CustomerId"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: ValidationMessage
  prefs: []
  type: TYPE_NORMAL
- en: For
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@(() => Customer.CustomerId)"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"form-group "'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Company Name</
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: InputText
  prefs: []
  type: TYPE_NORMAL
- en: '@'
  prefs: []
  type: TYPE_NORMAL
- en: bind-Value
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@Customer.CompanyName"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: ValidationMessage
  prefs: []
  type: TYPE_NORMAL
- en: For
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@(() => Customer.CompanyName)"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"form-group "'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Address</
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: InputText
  prefs: []
  type: TYPE_NORMAL
- en: '@'
  prefs: []
  type: TYPE_NORMAL
- en: bind-Value
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@Customer.Address"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: ValidationMessage
  prefs: []
  type: TYPE_NORMAL
- en: For
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@(() => Customer.Address)"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"form-group "'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Country</
  prefs: []
  type: TYPE_NORMAL
- en: label
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: InputText
  prefs: []
  type: TYPE_NORMAL
- en: '@'
  prefs: []
  type: TYPE_NORMAL
- en: bind-Value
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@Customer.Country"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: ValidationMessage
  prefs: []
  type: TYPE_NORMAL
- en: For
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"@(() => Customer.Country)"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: button
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"submit"'
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"btn btn-@ButtonStyle"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@ButtonText'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: button
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: EditForm
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Customer Customer { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; } = null!;
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: ButtonText { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; } = "Save Changes";
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: ButtonStyle { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; } = "info";
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: EventCallback OnValidSubmit { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Pages` folder, create a new file named `CreateCustomer.razor` . This
    will be a routable page component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to use the customer detail component to create a new customer,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/createcustomer"'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject INorthwindService service'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject NavigationManager navigation'
  prefs: []
  type: TYPE_NORMAL
- en: <h3
  prefs: []
  type: TYPE_NORMAL
- en: '>Create Customer</h3'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <CustomerDetail
  prefs: []
  type: TYPE_NORMAL
- en: ButtonText
  prefs: []
  type: TYPE_NORMAL
- en: ="Create Customer"
  prefs: []
  type: TYPE_NORMAL
- en: Customer
  prefs: []
  type: TYPE_NORMAL
- en: ="@customer"
  prefs: []
  type: TYPE_NORMAL
- en: OnValidSubmit
  prefs: []
  type: TYPE_NORMAL
- en: ="@Create"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: Customer customer = new
  prefs: []
  type: TYPE_NORMAL
- en: ();
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: Create
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: service.CreateCustomerAsync(customer);
  prefs: []
  type: TYPE_NORMAL
- en: navigation.NavigateTo("customers"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, open the file named `Customers.razor` and after the
    `<h3>` element, add a `<div>` element with a button to navigate to the `createcustomer`
    page component, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"form-group"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"btn btn-info"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"createcustomer"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: i
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-plus"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: i
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Create New</
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, create a new file named `EditCustomer.razor` and modify
    its contents to use the customer detail component to edit and save changes to
    an existing customer, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/editcustomer/{customerid}"'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject INorthwindService service'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject NavigationManager navigation'
  prefs: []
  type: TYPE_NORMAL
- en: <h3
  prefs: []
  type: TYPE_NORMAL
- en: '>Edit Customer</h3'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <CustomerDetail
  prefs: []
  type: TYPE_NORMAL
- en: ButtonText
  prefs: []
  type: TYPE_NORMAL
- en: ="Update"
  prefs: []
  type: TYPE_NORMAL
- en: Customer
  prefs: []
  type: TYPE_NORMAL
- en: ="@customer"
  prefs: []
  type: TYPE_NORMAL
- en: OnValidSubmit
  prefs: []
  type: TYPE_NORMAL
- en: ="@Update"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: CustomerId { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: Customer? customer = new
  prefs: []
  type: TYPE_NORMAL
- en: ();
  prefs: []
  type: TYPE_NORMAL
- en: protected
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: override
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: OnParametersSetAsync
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: customer = await
  prefs: []
  type: TYPE_NORMAL
- en: service.GetCustomerAsync(CustomerId);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: Update
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customer is
  prefs: []
  type: TYPE_NORMAL
- en: not
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: service.UpdateCustomerAsync(customer);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: navigation.NavigateTo("customers"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, create a new file named `DeleteCustomer.razor` and modify
    its contents to use the customer detail component to show the customer that is
    about to be deleted, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@page "/deletecustomer/{customerid}"'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject INorthwindService service'
  prefs: []
  type: TYPE_NORMAL
- en: '@inject NavigationManager navigation'
  prefs: []
  type: TYPE_NORMAL
- en: <h3
  prefs: []
  type: TYPE_NORMAL
- en: '>Delete Customer</h3'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: ="alert alert-danger"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Warning! This action cannot be undone!
  prefs: []
  type: TYPE_NORMAL
- en: </div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <CustomerDetail
  prefs: []
  type: TYPE_NORMAL
- en: ButtonText
  prefs: []
  type: TYPE_NORMAL
- en: ="Delete Customer"
  prefs: []
  type: TYPE_NORMAL
- en: ButtonStyle
  prefs: []
  type: TYPE_NORMAL
- en: ="danger"
  prefs: []
  type: TYPE_NORMAL
- en: Customer
  prefs: []
  type: TYPE_NORMAL
- en: ="@customer"
  prefs: []
  type: TYPE_NORMAL
- en: OnValidSubmit
  prefs: []
  type: TYPE_NORMAL
- en: ="@Delete"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: CustomerId { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: Customer? customer = new
  prefs: []
  type: TYPE_NORMAL
- en: ();
  prefs: []
  type: TYPE_NORMAL
- en: protected
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: override
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: OnParametersSetAsync
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: customer = await
  prefs: []
  type: TYPE_NORMAL
- en: service.GetCustomerAsync(CustomerId);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: Delete
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customer is
  prefs: []
  type: TYPE_NORMAL
- en: not
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: service.DeleteCustomerAsync(CustomerId);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: navigation.NavigateTo("customers"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the customer form component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test the customer form component and how to use it to create, edit,
    and delete customers:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Customers Worldwide** and click the **+ Create New** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an invalid **Customer Id** like `ABCDEF` , leave the textbox, and note
    the validation message, as shown in *Figure 17.6* :![](img/Image00155.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.6: Creating a new customer and entering an invalid customer ID'
  prefs: []
  type: TYPE_NORMAL
- en: Change the **Customer Id** to `ABCDE` , enter values for the other textboxes,
    and click the **Create Customer** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the list of customers appears, scroll down to the bottom of the page to
    see the new customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **ABCDE** customer row, click the **Edit** icon button, change the address,
    click the **Update** button, and note that the customer record has been updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **ABCDE** customer row, click the **Delete** icon button, note the warning,
    click the **Delete Customer** button, and note that the customer record has been
    deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building components using Blazor WebAssembly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will reuse the same functionality in the Blazor WebAssembly project so
    that you can clearly see the key differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we abstracted the local dependency service in the `INorthwindService`
    interface, we will be able to reuse all the components and that interface, as
    well as the entity model classes. The only part that will need to be rewritten
    is the implementation of the `NorthwindService` class. Instead of directly calling
    the `NorthwindContext` class, it will call a customer Web API controller on the
    server side, as shown in *Figure 17.7* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00156.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: Comparing implementations using Blazor Server and Blazor WebAssembly'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the server for Blazor WebAssembly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need a web service that the client app can call to get and manage
    customers. If you completed *Chapter 16* , *Building and Consuming Web Services*
    , then you have a customer service in the `Northwind.WebApi` service project that
    you could use. However, to keep this chapter more self-contained, let''s build
    a customer Web API controller in the `Northwind.BlazorWasm.Server` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning!** Unlike previous projects, relative path references for shared
    projects like the entity models and the database are two levels up, for example,
    `"..\.."` .'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Server` project/folder, open `Northwind.BlazorWasm.Server.csproj` and
    add statements to reference the Northwind database context project for either
    SQL Server or SQLite, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- change Sqlite to SqlServer if
  prefs: []
  type: TYPE_NORMAL
- en: you prefer -->
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include="..\..\Northwind.Common.DataContext.Sqlite
  prefs: []
  type: TYPE_NORMAL
- en: \Northwind.Common.DataContext.Sqlite.csproj"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Build the `Northwind.BlazorWasm.Server` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Server` project/folder, open `Program.cs` and add a statement to import
    the namespace for working with the Northwind database context, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared;
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the section that configures services, add a statement to register the Northwind
    database context for either SQL Server or SQLite, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: // if using SQL Server
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddNorthwindContext();
  prefs: []
  type: TYPE_NORMAL
- en: // if using SQLite
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddNorthwindContext(
  prefs: []
  type: TYPE_NORMAL
- en: 'relativePath: Path.Combine(".."'
  prefs: []
  type: TYPE_NORMAL
- en: ', ".."'
  prefs: []
  type: TYPE_NORMAL
- en: ));
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Server` project, in the `Controllers` folder, create a file named `CustomersController.cs`
    and add statements to define a Web API controller class with similar CRUD methods
    as before, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.Mvc; // [ApiController], [Route]
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.EntityFrameworkCore; // ToListAsync, FirstOrDefaultAsync
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared; // NorthwindContext, Customer
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorWasm.Server.Controllers
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '[ApiController'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[Route('
  prefs: []
  type: TYPE_NORMAL
- en: '"api/[controller]"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: CustomersController
  prefs: []
  type: TYPE_NORMAL
- en: ': ControllerBase'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindContext db;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: CustomersController
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindContext db
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: this
  prefs: []
  type: TYPE_NORMAL
- en: .db = db;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet('
  prefs: []
  type: TYPE_NORMAL
- en: '"in/{country}"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '] // different path to disambiguate'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: country)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers
  prefs: []
  type: TYPE_NORMAL
- en: .Where(c => c.Country == country).ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet('
  prefs: []
  type: TYPE_NORMAL
- en: '"{id}"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> GetCustomerAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers
  prefs: []
  type: TYPE_NORMAL
- en: .FirstOrDefaultAsync(c => c.CustomerId == id);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpPost'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> CreateCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (Customer customerToAdd)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? existing = await
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.FirstOrDefaultAsync
  prefs: []
  type: TYPE_NORMAL
- en: (c => c.CustomerId == customerToAdd.CustomerId);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (existing == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.Add(customerToAdd);
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: affected = await
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (affected == 1
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: customerToAdd;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: existing;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpPut'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> UpdateCustomerAsync(Customer c)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: db.Entry(c).State = EntityState.Modified;
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: affected = await
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (affected == 1
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: c;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpDelete('
  prefs: []
  type: TYPE_NORMAL
- en: '"{id}"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: DeleteCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? c = await
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.FirstOrDefaultAsync
  prefs: []
  type: TYPE_NORMAL
- en: (c => c.CustomerId == id);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (c != null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.Remove(c);
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: affected = await
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: affected;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: '0'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the client for Blazor WebAssembly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Second, we can reuse the components from the Blazor Server project. Since the
    components will be identical, we can copy them and only need to make changes to
    the local implementation of the abstracted Northwind service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Client` project, open `Northwind.BlazorWasm.Client.csproj` and add
    statements to reference the Northwind entity models library project (not the database
    context project) for either SQL Server or SQLite, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- change Sqlite to SqlServer if you prefer -->
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include="..\..\Northwind.Common.EntityModels.Sqlite\
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.Common.EntityModels.Sqlite.csproj"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Build the `Northwind.BlazorWasm.Client` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Client` project, open `_Imports.razor` and import the `Packt.Shared`
    namespace to make the Northwind entity model types available in all Blazor components,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Packt.Shared'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Client` project, in the `Shared` folder, open `NavMenu.razor` and add
    a `NavLink` element for customers worldwide and in France, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-item px-3"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-link"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"customers"'
  prefs: []
  type: TYPE_NORMAL
- en: Match
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"NavLinkMatch.All"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-people"'
  prefs: []
  type: TYPE_NORMAL
- en: aria-hidden
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"true"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customers Worldwide
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-item px-3"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"nav-link"'
  prefs: []
  type: TYPE_NORMAL
- en: href
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"customers/France"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"oi oi-people"'
  prefs: []
  type: TYPE_NORMAL
- en: aria-hidden
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"true"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: span
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Customers in France
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: NavLink
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: div
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `CustomerDetail.razor` component from the `Northwind.BlazorServer`
    project's `Shared` folder to the `Northwind.BlazorWasm` `Client` project's `Shared`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following routable page components from the `Northwind.BlazorServer`
    project''s `Pages` folder to the `Northwind.BlazorWasm` `Client` project''s `Pages`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CreateCustomer.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Customers.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeleteCustomer.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EditCustomer.razor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `Client` project, create a `Data` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `INorthwindService.cs` file from the `Northwind.BlazorServer` project's
    `Data` folder into the `Client` project's `Data` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Data` folder, add a new file named `NorthwindService.cs` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to implement the `INorthwindService` interface by using
    an `HttpClient` to call the customers Web API service, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: System.Net.Http.Json; // GetFromJsonAsync, ReadFromJsonAsync
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared; // Customer
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorWasm.Client.Data
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindService
  prefs: []
  type: TYPE_NORMAL
- en: ': INorthwindService'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: HttpClient http;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindService
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: HttpClient http
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: this
  prefs: []
  type: TYPE_NORMAL
- en: .http = http;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: http.GetFromJsonAsync
  prefs: []
  type: TYPE_NORMAL
- en: <List<Customer>>("api/customers"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Customer>> GetCustomersAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: country)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: http.GetFromJsonAsync
  prefs: []
  type: TYPE_NORMAL
- en: <List<Customer>>($"api/customers/in/
  prefs: []
  type: TYPE_NORMAL
- en: '{country}'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer>
  prefs: []
  type: TYPE_NORMAL
- en: GetCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: http.GetFromJsonAsync
  prefs: []
  type: TYPE_NORMAL
- en: <Customer>($"api/customers/
  prefs: []
  type: TYPE_NORMAL
- en: '{id}'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer>
  prefs: []
  type: TYPE_NORMAL
- en: CreateCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: HttpResponseMessage response = await
  prefs: []
  type: TYPE_NORMAL
- en: http.PostAsJsonAsync("api/customers"
  prefs: []
  type: TYPE_NORMAL
- en: ', c);'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: response.Content
  prefs: []
  type: TYPE_NORMAL
- en: .ReadFromJsonAsync<Customer>();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer>
  prefs: []
  type: TYPE_NORMAL
- en: UpdateCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: HttpResponseMessage response = await
  prefs: []
  type: TYPE_NORMAL
- en: http.PutAsJsonAsync("api/customers"
  prefs: []
  type: TYPE_NORMAL
- en: ', c);'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: response.Content
  prefs: []
  type: TYPE_NORMAL
- en: .ReadFromJsonAsync<Customer>();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: DeleteCustomerAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: HttpResponseMessage response = await
  prefs: []
  type: TYPE_NORMAL
- en: http.DeleteAsync($"api/customers/
  prefs: []
  type: TYPE_NORMAL
- en: '{id}'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In `Program.cs` , import the `Packt.Shared` and `Northwind.BlazorWasm.Client.Data`
    namespaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the section for configuring services, add a statement to register the Northwind
    dependency service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<INorthwindService, NorthwindService>();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Blazor WebAssembly components and service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can start the Blazor WebAssembly server hosting project to test if the
    components work with the abstracted Northwind service that calls the customers
    Web API service:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Server` project/folder, start the `Northwind.BlazorWasm.Server` website
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome, show **Developer Tools** , and select the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` . Your port number will be different since
    it is randomly assigned. View the console output to discover what it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Console** tab and note that Blazor WebAssembly has loaded .NET
    assemblies into the browser cache and that they take about 10 MB of space, as
    shown in *Figure 17.8* :![](img/Image00157.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.8: Blazor WebAssembly loading .NET assemblies into the browser cache'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers Worldwide** and note the HTTP
    `GET` request with the JSON response containing all customers, as shown in *Figure
    17.9* :![](img/Image00158.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.9: The HTTP GET request with the JSON response containing all customers'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **+ Create New** button, complete the form to add a new customer as
    before, and note the HTTP `POST` request made, as shown in *Figure 17.10* :![](img/Image00159.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.10: The HTTP POST request for creating a new customer'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the steps as before to edit and then delete the newly created customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improving Blazor WebAssembly apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are common ways to improve Blazor WebAssembly apps. We'll look at some
    of the most popular ones now.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Blazor WebAssembly AOT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the .NET runtime used by Blazor WebAssembly is doing IL interpretation
    using an interpreter written in WebAssembly. Unlike other .NET apps, it does not
    use a just-in-time (JIT) compiler, so the performance of CPU-intensive workloads
    is lower than you might hope for.
  prefs: []
  type: TYPE_NORMAL
- en: In .NET 6, Microsoft has added support for **ahead-of-time** (**AOT** ) compilation,
    but you must explicitly opt-in because although it can dramatically improve runtime
    performance, AOT compilation can take several minutes on small projects like the
    ones in this book and potentially much longer for larger projects. The size of
    the compiled app is also larger than without AOT—typically twice the size. The
    decision to use AOT is therefore based on a balance of increased compile and browser
    download times, with potentially much faster runtimes.
  prefs: []
  type: TYPE_NORMAL
- en: AOT was the top requested feature in a Microsoft survey, and the lack of AOT
    was cited as a primary reason why some developers had not yet adopted .NET for
    developing **single-page applications** (**SPAs** ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the additional required workload for Blazor AOT named **.NET
    WebAssembly build tools** and then enable AOT for our Blazor WebAssembly project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt or terminal with admin rights, install the Blazor AOT
    workload, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: dotnet workload install wasm-tools
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the messages, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: Installing pack Microsoft.NET.Runtime.MonoAOTCompiler.Task version 6.0.0...
  prefs: []
  type: TYPE_NORMAL
- en: Installing pack Microsoft.NETCore.App.Runtime.AOT.Cross.browser-wasm version
    6.0.0...
  prefs: []
  type: TYPE_NORMAL
- en: Successfully installed workload(s) wasm-tools.
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `Northwind.BlazorWasm.Client` project file to enable AOT, as shown
    highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  prefs: []
  type: TYPE_NORMAL
- en: <Nullable>enable</Nullable>
  prefs: []
  type: TYPE_NORMAL
- en: <ImplicitUsings>enable</ImplicitUsings>
  prefs: []
  type: TYPE_NORMAL
- en: <ServiceWorkerAssetsManifest>service-worker-assets.js
  prefs: []
  type: TYPE_NORMAL
- en: </ServiceWorkerAssetsManifest>
  prefs: []
  type: TYPE_NORMAL
- en: '**<RunAOTCompilation>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</RunAOTCompilation>**'
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Publish the `Northwind.BlazorWasm.Client` project, as shown in the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: dotnet publish -c Release
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that 75 assemblies have AOT applied, as shown in the following partial
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorWasm.Client -> C:\Code\PracticalApps\Northwind.BlazorWasm\Client\bin\Release\net6.0\Northwind.BlazorWasm.Client.dll
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.BlazorWasm.Client (Blazor output) -> C:\Code\PracticalApps\Northwind.BlazorWasm\Client\bin\Release\net6.0\wwwroot
  prefs: []
  type: TYPE_NORMAL
- en: 'Optimizing assemblies for size, which may change the behavior of the app. Be
    sure to test after publishing. See: https://aka.ms/dotnet-illink'
  prefs: []
  type: TYPE_NORMAL
- en: AOT'ing 75 assemblies
  prefs: []
  type: TYPE_NORMAL
- en: '[1/75] Microsoft.Extensions.Caching.Abstractions.dll -> Microsoft.Extensions.Caching.Abstractions.dll.bc'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[75/75] Microsoft.EntityFrameworkCore.Sqlite.dll -> Microsoft.EntityFrameworkCore.Sqlite.dll.bc'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling native assets with emcc. This may take a while ...
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: Linking with emcc. This may take a while ...
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing dotnet.wasm ...
  prefs: []
  type: TYPE_NORMAL
- en: Compressing Blazor WebAssembly publish artifacts. This may take a while...
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Wait for the process to finish. The process can take around 20 minutes even
    on a modern multi-core CPU.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `Northwind.BlazorWasm\Client\bin\release\net6.0\publish` folder
    and note the increased size of the download from 10 MB to 112 MB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Without AOT, the downloaded Blazor WebAssembly app took about 10 MB of space.
    With AOT, it took about 112 MB. This increase in size will affect a website visitor's
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: The use of AOT is a balance between slower initial download and faster potential
    execution. Depending on the specifics of your app, AOT might not be worth it.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Progressive Web App support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Progressive Web App (PWA)** support in Blazor WebAssembly projects means
    that the web app gains the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: It acts as a normal web page until the visitor explicitly decides to progress
    to a full app experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the app is installed, launch it from the OS's start menu or desktop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It visually appears in its own app window instead of a browser tab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works offline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It automatically updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us see PWA support in action:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorWasm.Server` web host project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` or whatever your port number is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, in the address bar on the right, click the icon with the tooltip
    **Install Northwind.BlazorWasm** , as shown in *Figure 17.11* :![](img/Image00160.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.11: Installing Northwind.BlazorWasm as an app'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome. You might also need to close the app if it runs automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the **Northwind.BlazorWasm** app from your Windows Start menu or macOS
    Launchpad and note that it has a full app experience.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right of the title bar, click the three dots menu and note that you can
    uninstall the app, but do not do so yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Developer Tools** . On Windows, press F12 or Ctrl + Shift + I
    . On macOS, press Cmd + Shift + I .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Network** tab and then, in the **Throttling** dropdown, select
    the **Offline** preset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Home** and then click **Customers Worldwide**
    , and note the failure to load any customers and the error message at the bottom
    of the app window, as shown in *Figure 17.12* :![](img/Image00161.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.12: Failure to load any customers when the network is offline'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Developer Tools** , set **Throttling** back to **Disabled: No throttling**
    .'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Reload** link in the yellow error bar at the bottom of the app and
    note that functionality returns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could now uninstall the PWA app or just close it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing offline support for PWAs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could improve the experience by caching HTTP `GET` responses from the Web
    API service locally, storing new, modified, or deleted customers locally, and
    then synchronizing with the server later by making the stored HTTP requests once
    network connectivity is restored. But that takes a lot of effort to implement
    well, so it is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the browser compatibility analyzer for Blazor WebAssembly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With .NET 6, Microsoft has unified the .NET library for all workloads. However,
    although in theory, this means that a Blazor WebAssembly app has full access to
    all .NET APIs, in practice, it runs inside a browser sandbox so there are limitations.
    If you call an unsupported API, this will throw a `PlatformNotSupportedException`
    .
  prefs: []
  type: TYPE_NORMAL
- en: To be forewarned about unsupported APIs, you can add a platform compatibility
    analyzer that will warn you when your code uses APIs that are not supported by
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Blazor WebAssembly App** and **Razor Class Library** project templates automatically
    enable browser compatibility checks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To manually activate browser compatibility checks, for example, in a **Class
    Library** project, add an entry to the project file, as shown in the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <SupportedPlatform Include="browser"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft decorates unsupported APIs, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '[UnsupportedOSPlatform('
  prefs: []
  type: TYPE_NORMAL
- en: '"browser"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: void
  prefs: []
  type: TYPE_NORMAL
- en: DoSomethingOutsideTheBrowserSandbox
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : If you create libraries that should not be used in Blazor
    WebAssembly apps, then you should decorate your APIs in the same way.'
  prefs: []
  type: TYPE_NORMAL
- en: Sharing Blazor components in a class library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We currently have components duplicated in a Blazor Server project and a Blazor
    WebAssembly project. It would be better to have them defined once in a class library
    project and reference them from the two other Blazor projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new Razor class library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Razor Class Library** / `razorclasslib`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Blazor.Customers`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Support pages and views: checked'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor.Customers` project, add a project reference to the
    `Northwind.Common.EntityModels.Sqlite` or `SqlServer` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor.Customers` project, add an entry to check browser
    compatibility, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <Project Sdk="Microsoft.NET.Sdk.Razor"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  prefs: []
  type: TYPE_NORMAL
- en: <Nullable>enable</Nullable>
  prefs: []
  type: TYPE_NORMAL
- en: <ImplicitUsings>enable</ImplicitUsings>
  prefs: []
  type: TYPE_NORMAL
- en: <AddRazorSupportForMvc>true
  prefs: []
  type: TYPE_NORMAL
- en: </AddRazorSupportForMvc>
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <FrameworkReference Include="Microsoft.AspNetCore.App"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include="..\Northwind.Common.EntityModels.Sqlite
  prefs: []
  type: TYPE_NORMAL
- en: \Northwind.Common.EntityModels.Sqlite.csproj"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '**<ItemGroup>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<SupportedPlatform Include=**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"browser"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**/>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</ItemGroup>**'
  prefs: []
  type: TYPE_NORMAL
- en: </Project>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project, add a project reference to the `Northwind.Blazor.Customers`
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `Northwind.BlazorServer` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor.Customers` project, delete the `Areas` folder and all
    its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `_Imports.razor` file from the root of the `Northwind.BlazorServer`
    project to the root of the `Northwind.Blazor.Customers` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `_Imports.razor` , delete the two imports for the `Northwind.BlazorServer`
    namespace and add a statement to import the namespace that will contain our shared
    Blazor components, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Northwind.Blazor.Customers.Shared'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Create three folders named `Data` , `Pages` , and `Shared` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move `INorthwindService.cs` from the `Northwind.BlazorServer` project's `Data`
    folder to the `Northwind.Blazor.Customers` project's `Data` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move all the components from the `Northwind.BlazorServer` project's `Shared`
    folder to the `Northwind.Blazor.Customers` project's `Shared` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `CreateCustomer.razor` , `Customers.razor` , `EditCustomer.razor` ,
    and `DeleteCustomer.razor` components from the `Northwind.BlazorServer` project's
    `Pages` folder to the `Northwind.Blazor.Customers` project's `Pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will leave the other page components because they have dependencies on the
    weather service that has not been properly refactored.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.BlazorServer` project, in `_Imports.razor` , remove the `using`
    statement for `Northwind.BlazorServer.Shared` and add statements to import the
    page and shared components in the class library, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Northwind.Blazor.Customers.Pages'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Northwind.Blazor.Customers.Shared'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.BlazorServer` project, in `App.razor` , add a parameter to
    tell the `Router` component to scan the additional assembly to set up the routes
    for the page components in the class library, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <Router AppAssembly="@typeof(App).Assembly"
  prefs: []
  type: TYPE_NORMAL
- en: '**AdditionalAssemblies=**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"new[] { typeof(Customers).Assembly }"**'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : It does not matter which class you specify as long as it
    is in the external assembly. I chose `Customers` since it is the most important
    and obvious component class.'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` project and note that it has the same behavior
    as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice** : You can now reuse the Blazor components in other Blazor
    Server projects. However, you cannot use that class library in Blazor WebAssembly
    projects because it has a dependency on the full ASP.NET Core workload. Creating
    Blazor component libraries that work with both hosting models is beyond the scope
    of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Interop with JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Blazor components do not have access to browser capabilities like
    local storage, geolocation, and media capture, or any JavaScript libraries like
    React or Vue. If you need to interact with them, you can use JavaScript Interop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example that uses the browser window''s alert box and local storage
    that can persist up to 5 MB of data per visitor indefinitely:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.BlazorServer` project, in the `wwwroot` folder, add a folder
    named `scripts` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `scripts` folder, add a file named `interop.js` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: function
  prefs: []
  type: TYPE_NORMAL
- en: messageBox
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: message
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: window
  prefs: []
  type: TYPE_NORMAL
- en: .alert(message);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: function
  prefs: []
  type: TYPE_NORMAL
- en: setColorInStorage
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (typeof
  prefs: []
  type: TYPE_NORMAL
- en: (Storage) !== "undefined"
  prefs: []
  type: TYPE_NORMAL
- en: ) {
  prefs: []
  type: TYPE_NORMAL
- en: localStorage
  prefs: []
  type: TYPE_NORMAL
- en: .setItem("color"
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: document
  prefs: []
  type: TYPE_NORMAL
- en: .getElementById("colorBox"
  prefs: []
  type: TYPE_NORMAL
- en: ).value);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: function
  prefs: []
  type: TYPE_NORMAL
- en: getColorFromStorage
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (typeof
  prefs: []
  type: TYPE_NORMAL
- en: (Storage) !== "undefined"
  prefs: []
  type: TYPE_NORMAL
- en: ) {
  prefs: []
  type: TYPE_NORMAL
- en: document
  prefs: []
  type: TYPE_NORMAL
- en: .getElementById("colorBox"
  prefs: []
  type: TYPE_NORMAL
- en: ).value =
  prefs: []
  type: TYPE_NORMAL
- en: localStorage
  prefs: []
  type: TYPE_NORMAL
- en: .getItem("color"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, in `_Layout.cshtml` , after the `script` element that
    adds Blazor Server support, add a `script` element that references the JavaScript
    file that you just created, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: src
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"scripts/interop.js"'
  prefs: []
  type: TYPE_NORMAL
- en: '></'
  prefs: []
  type: TYPE_NORMAL
- en: script
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Pages` folder, in `Index.razor` , delete the two `Customers` component
    instances and then add a button and a code block that uses the Blazor JavaScript
    runtime dependency service to call a JavaScript function, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <button
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: ="button"
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: ="btn btn-info"
  prefs: []
  type: TYPE_NORMAL
- en: '@onclick'
  prefs: []
  type: TYPE_NORMAL
- en: ="AlertBrowser"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Poke the browser</button
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <hr
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <input
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: ="colorBox"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <button
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: ="button"
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: ="btn btn-info"
  prefs: []
  type: TYPE_NORMAL
- en: '@onclick'
  prefs: []
  type: TYPE_NORMAL
- en: ="SetColor"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Set Color</button
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <button
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: ="button"
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: ="btn btn-info"
  prefs: []
  type: TYPE_NORMAL
- en: '@onclick'
  prefs: []
  type: TYPE_NORMAL
- en: ="GetColor"
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Get Color</button
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@code {'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inject'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: IJSRuntime JSRuntime { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; } = null
  prefs: []
  type: TYPE_NORMAL
- en: '!;'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: AlertBrowser
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: JSRuntime.InvokeVoidAsync(
  prefs: []
  type: TYPE_NORMAL
- en: '"messageBox"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Blazor poking the browser"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: SetColor
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: JSRuntime.InvokeVoidAsync("setColorInStorage"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: GetColor
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: JSRuntime.InvokeVoidAsync("getColorFromStorage"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5001/` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, in the textbox, enter `red` and then click the **Set Color**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show **Developer Tools** , select the **Application** tab, expand **Local Storage**
    , select `https://localhost:5001` , and note the key-value pair `color-red` ,
    as shown in *Figure 17.13* :![](img/Image00162.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.13: Storing a color in browser local storage using JavaScript Interop'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.BlazorServer` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5001/` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click the **Get Color** button and note that the value `red`
    is shown in the textbox, retrieved from local storage between visitor sessions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Libraries of Blazor components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many libraries of Blazor components. Paid component libraries are
    from companies like Telerik, DevExpress, and Syncfusion. Open source Blazor component
    libraries include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Radzen Blazor Components: [https://blazor.radzen.com/](https://blazor.radzen.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Awesome Open Source Blazor Projects: [https://awesomeopensource.com/projects/blazor](https://awesomeopensource.com/projects/blazor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the two primary hosting models for Blazor, and how are they different?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Blazor Server website project, compared to an ASP.NET Core MVC website
    project, what extra configuration is required in the Startup class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the benefits of Blazor is being able to implement client-side components
    using C# and .NET instead of JavaScript. Does a Blazor component need any JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Blazor project, what does the `App.razor` file do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a benefit of using the `<NavLink>` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you pass a value into a component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a benefit of using the `<EditForm>` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you execute some statements when parameters are set?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you execute some statements when a component appears?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are two key differences in the `Program` class between a Blazor Server
    and Blazor WebAssembly project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 17.2 – Practice by creating a times table component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a component that renders a times table based on a parameter named `Number`
    and then test your component in two ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, by adding an instance of your component to the `Index.razor` file, as
    shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: timestable
  prefs: []
  type: TYPE_NORMAL
- en: Number
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"6"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, by entering a path in the browser address bar, as shown in the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://localhost:5001/timestable/6`'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.3 – Practice by creating a country navigation item
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add an action method to the `CustomersController` class to return a list of
    country names.
  prefs: []
  type: TYPE_NORMAL
- en: In the shared `NavMenu` component, call the customer's web service to get the
    list of country names and loop through them, creating a menu item for each country.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.4 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-17---building-user-interfaces-using-blazor](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-17---building-user-interfaces-using-blazor)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build Blazor components hosted for both
    Server and WebAssembly. You saw some of the key differences between the two hosting
    models, like how data should be managed using dependency services.
  prefs: []
  type: TYPE_NORMAL
