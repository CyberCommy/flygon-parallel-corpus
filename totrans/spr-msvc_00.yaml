- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservice is an architecture style and pattern in which complex systems are
    decomposed into smaller services that work together to form larger business services.
    Microservices are services that are autonomous, self-contained, and independently
    deployable. In today's world, many enterprises use microservices as the default
    standard for building large, service-oriented enterprise applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring framework is a popular programming framework with the developer community
    for many years. Spring Boot removed the need to have a heavyweight application
    container and provided a means to deploy lightweight, server-less applications.
    Spring Cloud combines many Netflix OSS components and provides an ecosystem to
    run and manage large-scale microservices. It provides capabilities such as load
    balancing, service registry, monitoring, service gateway, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: However, microservices come with their own challenges, such as monitoring, managing,
    distributing, scaling, discovering, and so on, especially when deploying at scale.
    Adopting microservices without addressing the common microservices challenges
    would lead to catastrophic results. The most important part of this book is a
    technology-agnostic microservice capability model that helps address all the common
    microservice challenges.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this book is to enlighten readers with a pragmatic approach and
    guidelines for implementing responsive microservices at scale. This book will
    take readers on a deep dive into Spring Boot, Spring Cloud, Docker, Mesos, and
    Marathon. Readers of this book will understand how Spring Boot is used to deploy
    autonomous services server-less by removing the need to have a heavyweight application
    server. Readers will learn different Spring Cloud capabilities and also realize
    the use of Docker for containerization and of Mesos and Marathon for compute resource
    abstraction and cluster-wide control, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: I am sure readers will enjoy each and every section of this book. Also, I honestly
    believe that this book adds tremendous value by successfully conceiving microservices
    in your business. Throughout this book, I have used practical aspects of microservices
    implementation by providing a number of examples, including a case study from
    the travel domain. In the end, you will have learned how to implement microservice
    architectures using the Spring framework, Spring Boot, and Spring Cloud. These
    are battle-tested, robust tools to develop and deploy scalable microservices.
    Written to the latest specifications of Spring, with the help of this book, you'll
    be able to build modern, Internet-scale Java applications in no time.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Demystifying Microservices"), *Demystifying
    Microservices*, gives you an introduction to microservices. This chapter covers
    the fundamental concepts of microservices, their evolution, and their relationship
    with service-oriented architecture, as well as the concepts of cloud native and
    Twelve-Factor applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building Microservices with Spring Boot"),
    *Building Microservices with Spring Boot*, introduces building REST- and message-based
    microservices using the Spring framework and how to wrap them with Spring Boot.
    In addition, we will also explore some core capabilities of Spring Boot.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Applying Microservices Concepts"), *Applying
    Microservices Concepts*, explains the practical aspects of microservices implementation
    by detailing out the challenges that developers face with enterprise-grade microservices.
    This will also summarize the capabilities required to successfully manage a microservices
    ecosystem.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Microservices Evolution – A Case Study"),
    *Microservices Evolution – A Case Study*, takes the readers into a real-world
    case study of microservices evolution by introducing BrownField Airline. Using
    the case study, this chapter explains how to apply the microservices concepts
    learned in previous chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Scaling Microservices with Spring Cloud"),
    *Scaling Microservices with Spring Cloud*, shows how to scale the previous example
    using Spring Cloud stack capabilities. It details out the architecture and different
    components of Spring Cloud and how they integrate together.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Autoscaling Microservices"), *Autoscaling
    Microservices*, demonstrates the use of a simple life cycle manager to attain
    elasticity and the self-management of microservices by orchestrating services
    with service gateways. It explains how, in the real world, one can add intelligence
    to service gateways.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Logging and Monitoring Microservices"), *Logging
    and Monitoring Microservices*, covers the importance of logging and monitoring
    aspects when developing microservices. Here, we will go into the details of some
    of the best practices when using microservices such as centralized logging and
    monitoring capabilities using open source tools and how to integrate them with
    Spring projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Containerizing Microservices with Docker"),
    *Containerizing Microservices with Docker*, explains containerization concepts
    in the context of microservices. Using Mesos and Marathon, this chapter demonstrates
    a next-level implementation to replace a custom life cycle manager for large deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Managing Dockerized Microservices with Mesos
    and Marathon"), *Managing Dockerized Microservices with Mesos and Marathon*, explains
    the autoprovisioning and deployment of microservices. Here, you will also learn
    how to use Docker containers in the previous example for large-scale deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. The Microservices Development Life Cycle"),
    *The Microservices Development Life Cycle*, covers the process and practices of
    microservices development. The importance of DevOps and continuous delivery pipelines
    is also explained in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building Microservices with Spring Boot"),
    *Building Microservices with Spring Boot*, introduces Spring Boot, which requires
    the following software components to test the code:'
  prefs: []
  type: TYPE_NORMAL
- en: JDK 1.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Tool Suite 3.7.2 (STS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven 3.3.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework 4.2.6.RELEASE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot 1.3.5.RELEASE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-boot-cli-1.3.5.RELEASE-bin.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RabbitMQ 3.5.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FakeSMTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In [Chapter 5](ch05.html "Chapter 5. Scaling Microservices with Spring Cloud"),
    *Scaling Microservices with Spring Cloud*, you will learn about the Spring Cloud
    project. This requires the following software components in addition to the previously
    mentioned ones:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Cloud Brixton.RELEASE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In [Chapter 7](ch07.html "Chapter 7. Logging and Monitoring Microservices"),
    *Logging and Monitoring Microservices*, we will take a look at how centralized
    logging can be implemented for microservices. This requires the following software
    stack:'
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch 1.5.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kibana-4.0.2-darwin-x64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logstash 2.1.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In [Chapter 8](ch08.html "Chapter 8. Containerizing Microservices with Docker"),
    *Containerizing Microservices with Docker*, we will demonstrate how we can use
    Docker for microservices deployments. This requires the following software components:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker version 1.10.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Managing Dockerized Microservices with Mesos
    and Marathon"), *Managing Dockerized Microservices with Mesos and Marathon*, uses
    Mesos and Marathon to deploy dockerized microservices into an autoscalable cloud.
    The following software components are required for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: Mesos version 0.27.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker version 1.6.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marathon version 0.15.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is primarily for Spring developers who are looking to build cloud-ready
    Internet-scale applications to meet modern business demands. The book will help
    developers to understand what exactly microservices are and why they are important
    in today's world by examining a number of real-world use cases and hands-on code
    samples. Developers will understand how to build simple RESTful services and organically
    grow them to truly enterprise-grade microservices ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: This book will be interesting to architects who are seeking help on designing
    robust Internet-scale microservices using the Spring framework, Spring Boot, and
    Spring Cloud and managing them using Docker, Mesos, and Marathon. The capability
    model will help architects devise solutions even beyond the tools and technologies
    discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    following properties can be set in `application.properties` to customize application-related
    information."     A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Click on the **Make Request** button."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
