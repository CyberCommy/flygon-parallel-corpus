- en: Chapter 4. Dont Take a Photograph, Make It – An App for Photographers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss a topic much discussed in the Node.js community
    around the world–image manipulation using the Node.js architecture and cloud.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in the previous chapter, we have two ways to store images and
    files, using a hard disk on our server or directly to the cloud. In [Chapter 03](ch03.html
    "Chapter 3.  Building a Multimedia Application"), *Building a Multimedia Application*,
    we used the approach of uploading directly to our server, storing the images on
    the hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use a server in the cloud to store and manipulate images
    in our Photobook application.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a service called Cloudinary to store and manipulate the images.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to set up an MVC application using generator-express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install the cloudinary npm module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Materialize.css framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to upload images to the cloud and save meta-data on MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Global variables with dot files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Cloudinary account and creating folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to upload images using the Cloudinary API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to render templates using URL parameters in the Cloudinary API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end of this chapter, we will have created the following sample application,
    a robust and scalable photobook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Home screen of the photobook application
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will use a slightly modified version of the `express-generator`
    that we used in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: This generator is called `generator-express`; it is heavily based on `express
    generator`, but with a few more features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps for our installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a folder called `chapter04`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your terminal/shell within the `chapter04` folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, fill the questions in this order:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose `N`, we already created the project folder in *step 2*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose `MVC` for application type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose `Swig` for template engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose `None` for CSS preprocessor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose `None` for database (later in the chapter, we will set up the database
    manually)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose `Gulp` for LiveReload and other stuff
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't worry about `Gulp`, if you never heard about it. Later in the book, we
    will see and explain some building tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the generator, we have the following structure of directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the baseline applications](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Application folder structure
  prefs: []
  type: TYPE_NORMAL
- en: Changing the application structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the example we used in Chapter 1, *Building a Twitter-Like Application
    Using the MVC Design Pattern*, we will not make major changes to the current structure;
    we will only change the `views` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the sample application, there will be a book of pictures; we will add a
    folder named book in the `views` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `book` inside the `app/views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will create a configuration file for the Cloudinary service. Later in
    the chapter, we will discuss all the details about Cloudinary; for now, just create
    a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `.env` at the root folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we have the necessary basis to move forward.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Node modules to deal with images and the Cloudinary cloud service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will add the necessary modules to our application in the `package.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following highlighted lines of code to the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With just a few modules, we can build a very robust and scalable application.
    Let''s describe each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Module name | Description | More information |'
  prefs: []
  type: TYPE_TB
- en: '| `cloudinary` | Cloud service to store and pipeline image and video files
    | [https://www.npmjs.com/package/cloudinary](https://www.npmjs.com/package/cloudinary)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `connect-multiparty` | Middleware to accept multipart form upload | [https://www.npmjs.com/package/connect-multiparty](https://www.npmjs.com/package/connect-multiparty)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dotenv` | Load environment variables | [https://www.npmjs.com/package/dotenv](https://www.npmjs.com/package/dotenv)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `jugglingdb` | Cross–database ORM | [https://www.npmjs.com/package/jugglingdb](https://www.npmjs.com/package/jugglingdb)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `jugglingdb-mongodb` | MongoDB connector | [https://www.npmjs.com/package/jugglingdb-mongodb](https://www.npmjs.com/package/jugglingdb-mongodb)
    |'
  prefs: []
  type: TYPE_TB
- en: Creating the book controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will follow the same generator code pattern that the generator suggests;
    one of the advantages of using this generator is that we already have the MVC
    pattern at our disposal.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, you can download the example files from the Packpub website, or directly
    from the GitHub book repository.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `books.js` inside the `controllers` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `book.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s explain some important points about the previous code example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use the Cloudinary API inside our views, we need to pass the `cloudinary`
    variable to our views:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For best practices when using `multipartMiddleware`, we need to clean up each
    file that we upload to the cloud:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Later we will discuss more about the Cloudinary API.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that when you use the multipart connect, it by default loads the image
    to a folder on your hard drive, so you should always delete all the files loaded
    in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the book model file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The procedure for creating models for this application is very similar to what
    we have seen in previous chapters; almost every module's **ORM/ODM** has a very
    similar operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to create the model for the book object:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `book.js` inside `app/models` and place the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we are using MongoDB to store the book model. Also remember that you
    must have your local MongoDB up and running before starting the application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a CSS framework to the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all the chapters of this book, we will always use the most up to date technologies,
    as we have seen in previous chapters with the use of the new Bootstrap (Alpha
    Release).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter in particular, we will use a design pattern known as `Material
    Design`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about the design material at [https://www.google.com/design/spec/material-design/introduction.html](https://www.google.com/design/spec/material-design/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: For this, we'll use a simple `CSS` framework called `Materialize.css`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about Materialize at this link: [http://materializecss.com/](http://materializecss.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace all of the content from the `app/views/layout.swig` file with the following
    lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid CSS conflict, clean up your `public/css/style.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the views folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will make a small change to the `app/views` folder and add some more
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, let''s edit `app/views/index.js`. Replace the original code with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `add-photo.swig` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a file called `books.swig` and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `posted-photo.swig` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Creating the .env.js file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we will create the `env.js` file; this file verifies the configurations
    of the Cloudinary service. Create a file called `env.js` inside the `config` folder
    and place the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a fully configured application; however, we still need to create
    an account on the Cloudinary service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring a Cloudinary account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cloudinary is a cloud service used to store and manipulate images and video
    files; you can find more information about Cloudinary services at [http://cloudinary.com](http://cloudinary.com):'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://cloudinary.com/users/register/free](https://cloudinary.com/users/register/free)
    and register for a free account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the end of the register form, you can set up a name for your cloud. We chose
    `n6b` (Node.js 6 Blueprints); choose your own name.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the data (`Environment variable`) from your account right onto your dashboard
    panel, as shown in the following screenshot:![Creating and configuring a Cloudinary
    account](img/image_04_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloudinary dashboard panel
  prefs: []
  type: TYPE_NORMAL
- en: 'Now update the following code with your own credentials in the `.env.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How Cloudinary works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides we storing files on Cloudinary, we can use a powerful API to manipulate
    and transform images, apply effects, resize, and do a lot more things without
    using any software on our machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the `books.js` controller to check what we used. We extracted
    the extra code inside the promises function to focus on the highlighted lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we set up a folder, `folder: req.body.category`, to store our images,
    and overwrite the default `public_id: req.files.image.originalFilename` to use
    the image name. This is a good practice since the API provides us a `public_id`
    with a random string–nothing wrong but very useful. For example, see a link such
    as this: `http://res.cloudinary.com/demo/image/upload/mydog.jpg`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of this: [http://res.cloudinary.com/demo/image/upload/8jsb1xofxdqamu2rzwt9q.jpg](http://res.cloudinary.com/demo/image/upload/8jsb1xofxdqamu2rzwt9q.jpg).'
  prefs: []
  type: TYPE_NORMAL
- en: The commented `eager` property gives the ability to transform the image and
    generate a new image with all the eager options. In this case, we can save a transformed
    image with *280px* of width, *200px* of height, crop with fill content, and if
    we have some faces in the picture, the thumbnail will be centered on the face.
    It's a very useful feature to save image profiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use any transform combination on the upload method; here''s an example
    of the `JSON` returned by the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the highlighted code with the URL transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`c_thumb,g_face,h_100,w_150`'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more about the Cloudinary upload API at the following link: [http://cloudinary.com/documentation/node_image_upload](http://cloudinary.com/documentation/node_image_upload).'
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time to execute the application and upload some photos:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Go to `http://localhost:3000/books` and you will see the following screen:![Running
    the application](img/image_04_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Books screen
  prefs: []
  type: TYPE_NORMAL
- en: Uploading and showing images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s insert some images and check the behavior of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost:3000/books/add`, and fill in the form:![Uploading and
    showing images](img/image_04_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload form
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Title: **Image Sample 02**'
  prefs: []
  type: TYPE_NORMAL
- en: 'File: choose the sample02.jpg file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Category: **cities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Description: **Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
    do eiusmod tempor incididunt ut labore et dolore magna aliqua.**'
  prefs: []
  type: TYPE_NORMAL
- en: Let's check our MongoDB to see what happens before we go further.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your `RoboMongo` and select the first object:![Uploading and showing images](img/image_04_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot from MongoDB (RoboMongo)
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you must select the right database from the left-hand panel menu.
  prefs: []
  type: TYPE_NORMAL
- en: When we upload an image, the API returns a JSON with all information related
    to that image. We store this JSON as an image property with our books model, inside
    MongoDB, as we can see in the previous image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *Step 1* with *Sample02* through *Sample06*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking the MongoDb picture collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see the picture collection on MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: Open RoboMongo and select the right database form the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `collections` folder and double-click on **Picture collections**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top–right of the panel, click on the `view results in table mode` icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can see the following screenshot on the **RoboMongo** interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the MongoDb picture collection](img/image_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from the picture collection
  prefs: []
  type: TYPE_NORMAL
- en: Creating folders in the Cloudinary dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As previously mentioned, we set up folders (`folder: req.body.category`). In
    this case, the folder name will be the category name. To better organize our images
    in the cloud, as we did this programmatically, we need to create them directly
    in Cloudinary dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Cloudinary account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://cloudinary.com/console/media_library](https://cloudinary.com/console/media_library):![Creating
    folders in the Cloudinary dashboard](img/image_04_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create folder screenshot
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't worry about the other images on the Cloudinary dashboard; they are the
    default in every account. You can delete them if you want.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the input field (folder name) on the right–hand side and create a folder,
    `animals`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the input field (folder name) on the right–hand side and create a folder,
    `cities`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the input field (folder name) on the right–hand side and create a folder,
    `nature`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see all the categories created at the top of the images, as the following
    screenshot shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating folders in the Cloudinary dashboard](img/image_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Categories screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when you choose a category, you see only the images belonging to that category,
    in this case `animals`, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating folders in the Cloudinary dashboard](img/image_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from the animals folder
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a more effective way to organize all your photos, and you can create
    several albums, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: URL transformation rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As part of Cloudinary API, we can manipulate the images just by using the URL
    parameter settings, as we did on the books page:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to `http://localhost:3000/books`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your web inspector and check the rendered code for the first image; you
    will see the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The API creates the `img` tag and applies the object properties defined in
    `app/views/books.swig` as URL parameters, as we can see in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '| **Object property** | **URL parameter** |'
  prefs: []
  type: TYPE_TB
- en: '| width: *280* | `w_280` |'
  prefs: []
  type: TYPE_TB
- en: '| height: *200* | `h_200` |'
  prefs: []
  type: TYPE_TB
- en: '| crop: *fill* | `c_fill` |'
  prefs: []
  type: TYPE_TB
- en: '| quality: *80* | `q_80` |'
  prefs: []
  type: TYPE_TB
- en: '| effect:brightness:*20* | `e_brightness:20` |'
  prefs: []
  type: TYPE_TB
- en: '| Radius: 5 | `r_5` |'
  prefs: []
  type: TYPE_TB
- en: The curly brackets and safe filter `{{... | safe}}` are tags from the `Swig`
    template engine for rendering the variable safely on the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we can directly use the `img` tag, as you can see in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Adding a direct link to the original image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also use the API to generate the original image link without applying
    any transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app/views/books.swig` and add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now when we click on the `link to original image`, we can see the full image
    in another browser window:![Adding a direct link to the original image](img/image_04_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot from the Books page with original image link
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that we also use a simple `colorbox` from the `Materialize.css`
    framework, so when we hover the mouse over an image, we can see an icon that shows
    the image at full size.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have arrived at the end of another chapter. With this chapter, we finished
    a series of four chapters addressing the MVC pattern of software development with
    Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we saw how to build an application for uploading and manipulating
    images using a cloud service, and also show how to apply effects, such as brightness
    and border radius. In addition, we saw how to build a simple image gallery using
    a simple interface framework, **Materialize.css**.
  prefs: []
  type: TYPE_NORMAL
- en: We explored a different way to use an ORM module and save all the information
    about the images directly in MongoDB in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to build a web application using Node and
    the Firebase cloud service.
  prefs: []
  type: TYPE_NORMAL
