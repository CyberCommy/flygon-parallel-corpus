- en: Chapter 4. Responsive Websites – Prepare Your Code for Specific Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will gain knowledge about **responsive web design** (**RWD**)
    and how to prepare projects. It will cover problems of modern websites and optimization
    techniques. This chapter will be the base of knowledge about media queries—how
    to prepare them and how to adjust specific devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: RWD methodologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The foundation of responsive websites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost all modern websites can be displayed on desktop and mobile devices (phones,
    tablets). Proper adjusting of CSS and HTML code is the main assumption for creating
    a responsive website. The basic responsive website building process was based
    on adjustments of code, which once done, the site properly displayed on all devices.
    Now the *responsiveness* of responsive websites is a little bit enhanced. It's
    not only the creation of CSS/HTML/JS code and thinking about the design aspects
    but also the thinking about performance on mobile devices. Mobile devices with
    a web browser are now the main equipment on which people browse websites. Let's
    look at the main approaches for creating responsive websites.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop first methodology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This methodology was used back in the day as the main approach in CSS frameworks.
    The main purpose of HTML and CSS code was to see a web page in a desktop browser.
    Then provide the mobile version which was based on the desktop code. The final
    process was about adjusting the code for mobiles. It seemed like cutting the functionality
    of the website and adjusting the desktop view for a smaller mobile gadget.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile first methodology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This methodology is used in all modern CSS frameworks (Twitter bootstrap, Foundation
    framework). Firstly, code is prepared for mobile devices and then it's *scaled*
    for larger devices, from tablets to desktop screens. This approach is more common
    right now and is better because code for mobile devices doesn't have to be a combination
    of CSS tricks, HTML duplications, and JS mechanisms like it was in the desktop
    first methodology.
  prefs: []
  type: TYPE_NORMAL
- en: Which methodology is proper for you? It all depends on the project type. Not
    in all cases you are making a project from beginning to end. Sometimes, you have
    some legacy code, which you need to adjust to mobile. In this case, you are always
    forced to use the desktop first methodology. In cases in which you can write code
    from scratch, it is recommended to use the mobile first methodology.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the viewport in HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An important element of responsive websites is the proper HTML viewport meta
    tag. A viewport description should be added in the head section of an HTML document.
    It describes how webpage should behave on mobile devices. There is a bunch of
    mostly used viewports, which we will analyze later. The mostly used is the viewport
    that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It means that whenever you open your project on a mobile device, it will have
    the width of the device and the project will have an initial scale equal to `1`.
    A little bit more enhanced viewport looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The main difference between the first and second viewports is the max scale.
    This means that after a zoom action, which is invoked after a double tap on a
    mobile device or a pinch gesture, it will be scaled, but the maximum range of
    this scale is set to `2`. A safer option for a viewport is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Why safer? For example, in cases in which we have some fixed windows over the
    content, they won''t be scaled too and won''t deliver a bad experience for the
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This `viewport` setting will scale the website such that it will behave like
    a webpage opened on a desktop, with a set width of browser equal to `600`. The
    initial scale is set like in preceding example and is equal to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So the question is: which `viewport` is recommended? This is a good question.
    The best experience can be preserved with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Why? Because we are scaling the website to the device `width` and we are not
    stopping the zooming of the page. But the safest choice is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will prevent zooming, which can be annoying to adjust, especially in old
    projects in which we have old school types of modal windows.
  prefs: []
  type: TYPE_NORMAL
- en: Above the fold
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This methodology is strictly connected with optimization of your code. It''s
    related to the mobile and desktop versions of webpages also. Modern webpages load
    a lot of stuff: CSS files, JS files, images, and media files such as videos and
    sounds. With such a long queue, you can see that when the processing time of page
    loading is, for example, 10 seconds long, you cannot see the content till all
    files are loaded. In the case of informational pages, you should see the header
    and main content first, but it is almost impossible in such a long queue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The aforementioned fold methodology separates specific style attachments, which
    describe the most important elements on the page, such as title, subtitle, and
    text content. It needs to separate these `style` attachments and include them
    inline in the `head` section, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It means that this inline section will be first parsed by the browser and, in
    the long loading process, it will first prepare the most important elements for
    the reader and then will load the rest of needed by page resources.
  prefs: []
  type: TYPE_NORMAL
- en: Media queries – where can you use it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Media queries are filters set in CSS code, which help to describe the website
    for a bunch of displays (screen, print). In media queries, the mostly used filters
    are min/max width, min/max height, min/max pixel ratio, and min/max aspect ratio.
  prefs: []
  type: TYPE_NORMAL
- en: How to build media queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s pretty simple to first create a media query and then create more complicated
    filters. The basic media query looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With this media query, you are filtering all CSS declarations for a screen whose
    minimal width is 640px. Let's try to make it more complex and let's try to create
    some more media queries for specific devices.
  prefs: []
  type: TYPE_NORMAL
- en: How media queries work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Media queries are filters, as mentioned previously. But let''s try to see it
    in code and browser. This simple chapter will show you how to adjust the code
    for specific screen resolutions and will be the foundation for creating more advanced
    media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The code will now look like the following (without any styling):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to make some approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile view is all resolutions to 400px in width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tablet view is all resolutions to 700px in width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desktop view is all resolutions since 701px in width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, based on the preceding approaches, let''s create style and media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s check it in a browser with 350px width:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding view, we can see all elements described in CSS files with
    the following comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/* Mobile only */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Mobile and tablet */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of a browser with 550px width will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding view, we can see all elements described in CSS files with
    the following comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/* Tablet only */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Mobile and tablet */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Tablet and desktop */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output in a browser with 850px width is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding view, we can see all elements described in CSS files with
    the following comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/* Tablet and desktop */`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Desktop only*/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous code reveals how the media query filters are working exactly. How
    can you create a code that will be visible in specific views and how can you create
    approaches for real projects? In the next projects, we will study what we can
    filter because media queries are not only related to the width of the device.
    Let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: Media queries for specific views/devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Media queries can be used in many different cases. As mentioned previously,
    we can use media queries for specific min and max width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding media queries, the first example is for all resolutions with
    min-width `640` pixels and the second one is for all resolutions with max-width
    `640` pixels. Frontend developers deals with pixel ratios on basic desktops and
    screens with a bigger density, such as retina. How to filter them with CSS? Let''s
    check this media query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As we know, retina devices have a pixel ratio equal to `2`. We can also build
    more complicated filters with ranges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we are filtering all resolutions whose width matches the filter
    min-width `640` pixels to `1024` pixels. But how can we write a media query filter
    that will match some specific devices? Let''s assume that we want to write code
    for new-generation iPad with retina display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As we know, mobile devices have two orientations: landscape and portrait. So
    how can we match this case in media queries? For portrait view, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And for landscape view, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'With media queries, you can filter print views also. To do so, you need to
    append the code like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How to choose proper media queries for mobile devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For creating a good filter in media queries and setting good ranges in them,
    you have to first choose the devices and resolutions. Then you have to create
    proper media queries based on the most trendy resolutions. Back in the day, there
    was a smaller spectrum of devices and standard resolutions. So the main settings
    were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Of course, in every project, you could add some *specific* media queries for
    exceptions so that after the quality analysis process, there could appear more
    of the filters in CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nowadays, the approach is to cover as many devices as possible in one step
    of media query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'For better coverage and better code writing, let''s add to this media queries
    list one `max-width` step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This media query will cover small and medium devices at once. Currently, the
    most known resolution of desktop websites is `1280px`. Let''s add this range to
    the media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: SASS mixins for media queries
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create media queries for mixins, which will help us to keep the code
    clear. As we know, we have to add the display type and the breakpoint as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s gather our standard breakpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a choice of three steps, but you can add another as an
    exercise to cover all steps from the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Usage sample – main navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s imagine that we want to resolve the classic problem related to navigation.
    It is in most cases inline in desktop view, but it is changed in mobile views
    into list element under element. Let''s start with HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In SASS code, we will use previously created mixins for media queries and clear
    fix. The following is the full SASS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![Usage sample – main navigation](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot is made in desktop view related to global CSS. The
    next screenshot is related to `@media` screen and (max-width: `1024px`). As you
    can see, we changed the method of display of the navigation and additionally gave
    more flexibility for touch devices. The bigger items in navigation are easier
    to click (in this example, the buttons are longer):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage sample – main navigation](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the main approaches for creating responsive websites
    and what mobile and desktop first mean. Then we expanded the knowledge with the
    basics of performance of responsive websites. Finally, you gained basic knowledge
    about media queries and how to create them to cover all specific display types.
    In the next chapter, you will gain knowledge about images in CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will also gain knowledge about CSS backgrounds and
    new features that you can use. We will be repeating images, cutting images, and
    positioning them into the container. Let's check what we can do with backgrounds.
  prefs: []
  type: TYPE_NORMAL
