- en: Chapter 4. Responsive Websites – Prepare Your Code for Specific Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。响应式网站-为特定设备准备您的代码
- en: In this chapter, you will gain knowledge about **responsive web design** (**RWD**)
    and how to prepare projects. It will cover problems of modern websites and optimization
    techniques. This chapter will be the base of knowledge about media queries—how
    to prepare them and how to adjust specific devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您将了解**响应式网页设计**（**RWD**）以及如何准备项目。它将涵盖现代网站的问题和优化技术。这一章将是关于媒体查询的知识基础-如何准备它们以及如何调整特定设备。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: RWD methodologies
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RWD方法
- en: Using media queries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询
- en: The foundation of responsive websites
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式网站的基础
- en: Almost all modern websites can be displayed on desktop and mobile devices (phones,
    tablets). Proper adjusting of CSS and HTML code is the main assumption for creating
    a responsive website. The basic responsive website building process was based
    on adjustments of code, which once done, the site properly displayed on all devices.
    Now the *responsiveness* of responsive websites is a little bit enhanced. It's
    not only the creation of CSS/HTML/JS code and thinking about the design aspects
    but also the thinking about performance on mobile devices. Mobile devices with
    a web browser are now the main equipment on which people browse websites. Let's
    look at the main approaches for creating responsive websites.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有现代网站都可以在桌面和移动设备（手机、平板电脑）上显示。正确调整CSS和HTML代码是创建响应式网站的主要假设。基本的响应式网站构建过程是基于代码的调整，一旦完成，网站就可以在所有设备上正确显示。现在，响应式网站的*响应性*稍微增强了。它不仅是创建CSS/HTML/JS代码和考虑设计方面，还要考虑移动设备上的性能。带有Web浏览器的移动设备现在是人们浏览网站的主要设备。让我们看看创建响应式网站的主要方法。
- en: Desktop first methodology
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桌面优先方法
- en: This methodology was used back in the day as the main approach in CSS frameworks.
    The main purpose of HTML and CSS code was to see a web page in a desktop browser.
    Then provide the mobile version which was based on the desktop code. The final
    process was about adjusting the code for mobiles. It seemed like cutting the functionality
    of the website and adjusting the desktop view for a smaller mobile gadget.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法曾经是CSS框架中的主要方法。HTML和CSS代码的主要目的是在桌面浏览器中查看网页。然后提供基于桌面代码的移动版本。最后的过程是调整移动设备的代码。它看起来像是削减网站的功能，并调整桌面视图以适应较小的移动设备。
- en: Mobile first methodology
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动优先方法
- en: This methodology is used in all modern CSS frameworks (Twitter bootstrap, Foundation
    framework). Firstly, code is prepared for mobile devices and then it's *scaled*
    for larger devices, from tablets to desktop screens. This approach is more common
    right now and is better because code for mobile devices doesn't have to be a combination
    of CSS tricks, HTML duplications, and JS mechanisms like it was in the desktop
    first methodology.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在所有现代CSS框架（Twitter bootstrap，Foundation framework）中都有使用。首先，代码是为移动设备准备的，然后再为较大的设备（从平板电脑到台式电脑屏幕）进行*缩放*。这种方法现在更为常见，也更好，因为移动设备的代码不必像在桌面优先方法中那样是CSS技巧、HTML重复和JS机制的组合。
- en: Which methodology is proper for you? It all depends on the project type. Not
    in all cases you are making a project from beginning to end. Sometimes, you have
    some legacy code, which you need to adjust to mobile. In this case, you are always
    forced to use the desktop first methodology. In cases in which you can write code
    from scratch, it is recommended to use the mobile first methodology.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种方法适合您？这完全取决于项目类型。并非在所有情况下您都是从头开始制作项目。有时，您有一些旧代码，需要调整到移动设备上。在这种情况下，您总是被迫使用桌面优先方法。在可以从头开始编写代码的情况下，建议使用移动优先方法。
- en: Adjusting the viewport in HTML
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在HTML中调整视口
- en: 'An important element of responsive websites is the proper HTML viewport meta
    tag. A viewport description should be added in the head section of an HTML document.
    It describes how webpage should behave on mobile devices. There is a bunch of
    mostly used viewports, which we will analyze later. The mostly used is the viewport
    that looks like the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网站的一个重要元素是正确的HTML视口meta标签。视口描述应该添加在HTML文档的头部。它描述了网页在移动设备上的行为方式。有一堆大多数使用的视口，我们稍后会进行分析。最常用的是以下视口：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It means that whenever you open your project on a mobile device, it will have
    the width of the device and the project will have an initial scale equal to `1`.
    A little bit more enhanced viewport looks like the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着无论何时在移动设备上打开项目，它都将具有设备的宽度，并且项目将具有等于`1`的初始比例。稍微增强的视口看起来像下面这样：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The main difference between the first and second viewports is the max scale.
    This means that after a zoom action, which is invoked after a double tap on a
    mobile device or a pinch gesture, it will be scaled, but the maximum range of
    this scale is set to `2`. A safer option for a viewport is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个和第二个视口之间的主要区别是最大缩放。这意味着在移动设备上双击或捏合手势后，将进行缩放，但此缩放的最大范围设置为`2`。视口的一个更安全的选项如下：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Why safer? For example, in cases in which we have some fixed windows over the
    content, they won''t be scaled too and won''t deliver a bad experience for the
    user:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么更安全？例如，在某些情况下，我们在内容上有一些固定的窗口，它们也不会被缩放，也不会给用户带来不好的体验：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This `viewport` setting will scale the website such that it will behave like
    a webpage opened on a desktop, with a set width of browser equal to `600`. The
    initial scale is set like in preceding example and is equal to `1`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`viewport`设置将缩放网站，使其表现得像在桌面上打开的网页，浏览器的宽度设置为`600`。初始比例设置如前面的例子一样，等于`1`。
- en: Choosing the right viewport
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择正确的视口
- en: 'So the question is: which `viewport` is recommended? This is a good question.
    The best experience can be preserved with the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以问题是：推荐使用哪个`viewport`？这是一个很好的问题。最好的体验可以通过以下方式保留：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Why? Because we are scaling the website to the device `width` and we are not
    stopping the zooming of the page. But the safest choice is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will prevent zooming, which can be annoying to adjust, especially in old
    projects in which we have old school types of modal windows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Above the fold
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This methodology is strictly connected with optimization of your code. It''s
    related to the mobile and desktop versions of webpages also. Modern webpages load
    a lot of stuff: CSS files, JS files, images, and media files such as videos and
    sounds. With such a long queue, you can see that when the processing time of page
    loading is, for example, 10 seconds long, you cannot see the content till all
    files are loaded. In the case of informational pages, you should see the header
    and main content first, but it is almost impossible in such a long queue.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'The aforementioned fold methodology separates specific style attachments, which
    describe the most important elements on the page, such as title, subtitle, and
    text content. It needs to separate these `style` attachments and include them
    inline in the `head` section, for example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It means that this inline section will be first parsed by the browser and, in
    the long loading process, it will first prepare the most important elements for
    the reader and then will load the rest of needed by page resources.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Media queries – where can you use it
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Media queries are filters set in CSS code, which help to describe the website
    for a bunch of displays (screen, print). In media queries, the mostly used filters
    are min/max width, min/max height, min/max pixel ratio, and min/max aspect ratio.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: How to build media queries
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s pretty simple to first create a media query and then create more complicated
    filters. The basic media query looks like the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Compiled CSS:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With this media query, you are filtering all CSS declarations for a screen whose
    minimal width is 640px. Let's try to make it more complex and let's try to create
    some more media queries for specific devices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: How media queries work?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Media queries are filters, as mentioned previously. But let''s try to see it
    in code and browser. This simple chapter will show you how to adjust the code
    for specific screen resolutions and will be the foundation for creating more advanced
    media queries:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The code will now look like the following (without any styling):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00050.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to make some approaches:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Mobile view is all resolutions to 400px in width
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tablet view is all resolutions to 700px in width
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desktop view is all resolutions since 701px in width
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, based on the preceding approaches, let''s create style and media queries:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Compiled CSS:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now let''s check it in a browser with 350px width:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00051.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding view, we can see all elements described in CSS files with
    the following comments:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '`/* Mobile only */`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Mobile and tablet */`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of a browser with 550px width will be as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00052.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding view, we can see all elements described in CSS files with
    the following comments:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '`/* Tablet only */`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Mobile and tablet */`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Tablet and desktop */`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output in a browser with 850px width is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![How media queries work?](img/00053.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding view, we can see all elements described in CSS files with
    the following comments:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`/* Tablet and desktop */`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/* Desktop only*/`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous code reveals how the media query filters are working exactly. How
    can you create a code that will be visible in specific views and how can you create
    approaches for real projects? In the next projects, we will study what we can
    filter because media queries are not only related to the width of the device.
    Let's begin!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Media queries for specific views/devices
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Media queries can be used in many different cases. As mentioned previously,
    we can use media queries for specific min and max width:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding media queries, the first example is for all resolutions with
    min-width `640` pixels and the second one is for all resolutions with max-width
    `640` pixels. Frontend developers deals with pixel ratios on basic desktops and
    screens with a bigger density, such as retina. How to filter them with CSS? Let''s
    check this media query:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As we know, retina devices have a pixel ratio equal to `2`. We can also build
    more complicated filters with ranges:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this case, we are filtering all resolutions whose width matches the filter
    min-width `640` pixels to `1024` pixels. But how can we write a media query filter
    that will match some specific devices? Let''s assume that we want to write code
    for new-generation iPad with retina display:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we know, mobile devices have two orientations: landscape and portrait. So
    how can we match this case in media queries? For portrait view, use the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And for landscape view, use the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With media queries, you can filter print views also. To do so, you need to
    append the code like the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to choose proper media queries for mobile devices
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For creating a good filter in media queries and setting good ranges in them,
    you have to first choose the devices and resolutions. Then you have to create
    proper media queries based on the most trendy resolutions. Back in the day, there
    was a smaller spectrum of devices and standard resolutions. So the main settings
    were as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Compiled CSS:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Of course, in every project, you could add some *specific* media queries for
    exceptions so that after the quality analysis process, there could appear more
    of the filters in CSS file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Nowadays, the approach is to cover as many devices as possible in one step
    of media query:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Compiled CSS:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For better coverage and better code writing, let''s add to this media queries
    list one `max-width` step:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Compiled CSS:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This media query will cover small and medium devices at once. Currently, the
    most known resolution of desktop websites is `1280px`. Let''s add this range to
    the media queries:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: SASS mixins for media queries
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create media queries for mixins, which will help us to keep the code
    clear. As we know, we have to add the display type and the breakpoint as parameters:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now let''s gather our standard breakpoints:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Compiled CSS:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code is a choice of three steps, but you can add another as an
    exercise to cover all steps from the previous section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Usage sample – main navigation
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s imagine that we want to resolve the classic problem related to navigation.
    It is in most cases inline in desktop view, but it is changed in mobile views
    into list element under element. Let''s start with HTML:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In SASS code, we will use previously created mixins for media queries and clear
    fix. The following is the full SASS file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Compiled CSS:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Usage sample – main navigation](img/00054.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot is made in desktop view related to global CSS. The
    next screenshot is related to `@media` screen and (max-width: `1024px`). As you
    can see, we changed the method of display of the navigation and additionally gave
    more flexibility for touch devices. The bigger items in navigation are easier
    to click (in this example, the buttons are longer):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage sample – main navigation](img/00055.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the main approaches for creating responsive websites
    and what mobile and desktop first mean. Then we expanded the knowledge with the
    basics of performance of responsive websites. Finally, you gained basic knowledge
    about media queries and how to create them to cover all specific display types.
    In the next chapter, you will gain knowledge about images in CSS code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will also gain knowledge about CSS backgrounds and
    new features that you can use. We will be repeating images, cutting images, and
    positioning them into the container. Let's check what we can do with backgrounds.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
