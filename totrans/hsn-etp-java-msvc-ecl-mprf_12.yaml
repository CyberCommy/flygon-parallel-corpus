- en: A Working Eclipse MicroProfile Code Sample
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss a sample application that makes use of the
    various MicroProfile features introduced earlier in this book. The MicroProfile
    runtime we will use in this chapter is the Quarkus runtime, a Kubernetes-native
    Java stack tailored for GraalVM and OpenJDK HotSpot, crafted from best of breed
    Java libraries and standards. Key topics that we will cover include the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Use of configuration for both application and MicroProfile container behaviors
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realistic health checks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing an application with an external JWT security provider
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating and viewing trace information with a Jaeger instance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting microservice endpoint information using Swagger
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing individual ...
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, we''ll require the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: An IDE
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK 1.8+ installed with `JAVA_HOME` configured appropriately
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Maven 3.5.3+
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A running Docker environment
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Hands-On-Enterprise-Java-Microservices-with-Eclipse-MicroProfile/tree/master/Chapter08-mpcodesample](https://github.com/PacktPublishing/Hands-On-Enterprise-Java-Microservices-with-Eclipse-MicroProfile/tree/master/Chapter08-mpcodesample).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The sample in this chapter can be compiled into a native binary using the GraalVM
    ([https://github.com/oracle/graal/releases/tag/vm-1.0.0-rc16](https://github.com/oracle/graal/releases/tag/vm-1.0.0-rc16))
    integration of Quarkus. This has additional requirements for the installation
    of the 1.0-RC16 version Graal VM and a working C development environment. The
    details of the native image generation requirements can be found at [https://quarkus.io/guides/building-native-image-guide](https://quarkus.io/guides/building-native-image-guide).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Sample architecture of a multiservice MicroProfile application
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The sample application we will go over in this chapter is composed of an HTML
    frontend, two MicroProfile-based microservices, two external services we spin
    up using Docker, and an external time service on the web we have no control over.
    The architecture of our sample application is shown in the following diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa068f6a-caf2-45db-b56f-b288d4bf73db.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'The key elements in this diagram include the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Svcs1 Image**: This is a collection of REST endpoints that make use of MP-HC,
    MP-Metrics, MP-OT, MP-JWT, MP-OAPI, MP-FT, and MP-RC in a Quarkus runtime.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Svcs2 Image**: This is a collection of REST endpoints that make ...'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the sample application
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The sample application is designed to be run from four different shells, so
    let''s organize them into four shell windows, as shown here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '| Docker Shell | Web Shell |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| Svcs1 Shell | Svcs2 Shell |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: In each shell, run the commands as outlined in the correspondingly named sections
    that follow.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The Docker shell commands
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common way to provide preconfigured servers/services is to use a Docker image
    that contains the service and all of its dependencies. In this example, we use
    Docker to run KeyCloak and Jaeger images. If you are not familiar with Docker
    or do not have the `docker` command installed, see the instructions for how to
    install Docker for your platform ([https://docs.docker.com/v17.12/install/](https://docs.docker.com/v17.12/install/)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'This project depends on KeyCloak for the MP-JWT token generation. To launch
    KeyCloak in a Docker container, run the following command in your shell:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Svcs1 shell command
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, in the Svcs1 Terminal window you were asked to open earlier, navigate
    to the `svcs1` subdirectory of the project and then run the following command
    to execute the `svcs1` image in development mode:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the output, we see that this instance is listening on the `8081` port for
    HTTP requests, and we see various Quarkus features that are installed to support
    our MicroProfile feature usage.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The Svcs2 shell command
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, in the Svcs2 Terminal window you were asked to open earlier, `cd` to
    the `svcs2` subdirectory of the project and then run the following command to
    build the `svcs2` image:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the build is finished, to run the `svcs2` JAR, enter the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will get the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we ...
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The web shell command
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, in the web shell Terminal window you were asked to open, clone this project
    to your computer, `cd` to the `web` subdirectory, and then run the following command
    to execute the web application in development mode:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the build is finished, to run the web subproject JAR, enter the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once the application is up and running, point your browser to the web application
    at [http://localhost:8080/index.html](http://localhost:8080/index.html). In the
    next section, we will go over the web application details.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Details of the sample application
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's discuss in detail the various tabs in our application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The Config tab
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The initial view of the application shows the Config tab, as shown in the following
    screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c919e34a-eaea-4f7e-9ae8-2dfba21c976e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: 'The three links are on the page reference endpoints in the `io.packt.sample.config.ConfigTestController`
    class of the `Chapter08-mpcodesample/svcs1` subproject. Clicking on the various
    links displays the MP-Config values. The value displayed in the previous screenshot
    corresponds to the second link and the `injected.piValue` config value. The relevant
    settings from `Chapter08-mpcodesample/svcs1/src/main/resources/application.properties`
    are shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Of note here is the override of the default five-digit value set via the `@ConfigProperty(name
    = "injected.piValue", defaultValue = "pi5=3.14159")` annotation in `ConfigTestController`
    to the full 10-digit value of PI as seen in the previous screenshot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The Health tab
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Clicking on the Health tab of the application displays a page like the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13372fe8-e683-4dde-8cad-a06d611177b2.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: The links on the page correspond to the `health` check endpoints for the `svcs1`
    and `svcs2` images. Selecting either shows the health check output from the image.
    The `svcs1` image health check is composed of the `io.packt.sample.health.ServiceHealthCheck`
    and `io.packt.sample.health.CheckDiskspace`. Furthermore, `ServiceHealthCheck`
    is just a mock implementation that always returns an up status. The `CheckDiskspace`
    health check procedure looks to a path set using the MP-Config `health.pathToMonitor` property and
    then sets the procedure status to up/down, based ...
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The Metrics tab
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Metrics tab shows the following view containing three links:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18e4884e-02d6-4796-ac68-4c560d3d8e7e.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: 'The first link accesses the following endpoint in the `io.packt.sample.metric.MetricController`
    class:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This annotates the `timed` path endpoint with an `@Timed(name = "timed-request")`
    annotation. This method uses a random delay between 0-1,000 ms to generate a distribution
    of response times. The next link is a direct link to the application-level metric
    for the `timedRequest()` method. The MP-Metrics specification defines the path
    as `metrics/application/io.packt.sample.metric.MetricController.timed-request`.
    After a few accesses to the first link to generate a range of response times,
    accessing the second link to retrieve the `timedRequest()` method metric will
    show something like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is the range of information that the `@Timed` style of metric generates.
    The final link accesses the `metrics` endpoint that returns all of the metrics
    available in the image.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: The OpenTracing tab
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OpenTracing tab shows the following view with two links:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdac27b8-b33b-4f90-aa6f-b0a3d6863ff4.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'The first link accesses the following `io.packt.sample.tracing.TracedEndpoint`
    method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The method ...
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The OpenAPI tab
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OpenAPI tab view contains two links and is as shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1313c2c2-2ebb-4ca9-81b5-0a8cbcdf3c96.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: 'The first link generates an OpenAPI document, a YAML file that contains descriptions
    for all endpoints in the application. This can be fed into other programs or applications
    capable of consuming the OpenAPI format. The second link is an example of such
    an application, the Swagger UI. Opening that link will bring up a new window similar
    to the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/176d8da0-5532-4a16-aac2-fd92224543d4.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'There are three sections in this view of the sample application. The first
    section is information that was specified on the JAX-RS application bean via the
    OpenAPI annotations, as shown in this code fragment:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Comparing this information to that shown in the Swagger UI shows that all of
    the information from the `@OpenAPIDefinition` annotation has been incorporated
    into the UI top section. The next section of the Swagger UI with the `time` and
    `default` subheadings corresponds to the operation information taken from the
    application REST endpoint. The `default` section corresponds to endpoints that
    did not include any OpenAPI specification annotations. There is a default behavior
    to create an OpenAPI endpoint definition for any JAX-RS endpoint found in the
    application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'The `time` section corresponds to the following `io.packt.sample.restclient.TimeService`
    endpoint code fragment that has included the `@Tag`, `@ExternalDocumentation`,
    and `@Operation` MP-OpenAPI annotations:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you expand the first operation under the time section, you will obtain a
    view like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b5ab70d-40c6-4a23-9cd7-6fbee406239b.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: You can see that the `@Tag` has defined the time section and its description,
    and the `@Operation` annotation has augmented the operation summary and description
    sections. This shows how you can provide more information to consumers of your
    endpoints using the MP-OAPI annotations and OpenAPI aware apps like the Swagger
    UI.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: The KeyCloak tab
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll skip to the KeyCloak tab next because the RestClient and JWT tabs include
    secured calls that require a JWT to access the endpoints. When you access the
    KeyCloak tab for the first time, it should look like the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75d20658-d086-43be-8eef-324fcae0bea6.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: 'It will not show any token information, and the status line just below the
    Refresh checkbox should indicate (Not Authenticated). Click on the green Login
    button to bring up the following Log In screen:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc49cde6-aa33-4c09-8c30-6beca3e6a967.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'Enter the following for the Username and Password fields, respectively:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '`packt-mp-book`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This ...
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The JWT tab
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After clicking on the JWT tab, you should see a view similar to the following
    with two endpoint links:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7875e8b-4474-48c4-b850-279881c58802.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: The first link makes a request to an unsecured endpoint that will print the
    name from the JWT along with the `upn` claim if it exists.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since the web frontend is not providing a JWT for this request, the
    following will be displayed in the output section:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Clicking on the second link accesses a secured version of the endpoint that
    has this code fragment:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s discuss the important lines:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: The `@RolesAllowed("user")` annotation indicates that the endpoint is secured
    and that the caller needs the `user` role. The JWT `groups` claim we saw earlier
    had this role.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is taken from the JWT via the `getName()` method. As explained in the
    MP-JWT chapter, this maps to the `upn` claim in the JWT.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The current security authentication scheme is obtained from the injected `SecurityContext`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A programmatic security check of whether the caller has the `PacktMPUser` role
    is made. The check will return true as the JWT groups claim we saw earlier had
    this role.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This information is combined into a string that is the return value of the
    `secureHello` method. Clicking on the demo1/jwt/secureHello link button produces
    the following output string in the response area:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By using the combination of `@RolesAllowed` annotations and integration with
    the MP-JWT feature, we can see how we can both secure access to our microservice
    endpoints as well as introduce application behaviors based on content in the authenticated
    JWT. Next, let's return to the RestClient tab.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`@RolesAllowed`注解和与MP-JWT功能的集成，我们可以看到如何保护对我们的微服务端点的访问，并根据经过身份验证的JWT中的内容引入应用程序行为。接下来，让我们返回到RestClient选项卡。
- en: The RestClient tab
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RestClient选项卡
- en: 'The RestClient tab contains three links, as shown in this view:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: RestClient选项卡包含三个链接，如此视图所示：
- en: '![](img/994277da-2795-4b3f-99c0-783f2ae4b6f6.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/994277da-2795-4b3f-99c0-783f2ae4b6f6.png)'
- en: 'The links correspond to endpoints that make use of an external world clock
    public endpoint that returns information about the current time when accessed.
    The following MP-RC interface has been created to encapsulate the external endpoint:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 链接对应于使用外部世界时钟公共端点的端点，当访问时返回有关当前时间的信息。已创建以下MP-RC接口以封装外部端点：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has walked us through a sample service mesh composed of a web application,
    two microservice images using MP features in a new Quarkus implementation, an
    external web service, and two Docker-based services. This showed the interplay
    between the various MP features and external services you will find in cloud environments,
    along with integration with web services external to the local mesh environment.
    This should give you a feeling of the steps involved when composing microservices
    using the MicroProfile APIs and implementations.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本章带领我们走过了一个由Web应用程序、两个使用新的Quarkus实现中的MP功能的微服务图像、一个外部Web服务和两个基于Docker的服务组成的示例服务网格。这展示了各种MP功能和外部服务在云环境中的相互作用，以及与本地网格环境外部的Web服务集成。这应该让您对使用MicroProfile
    API和实现构建微服务时所涉及的步骤有所了解。
- en: In the next chapter, we will take a look at MicroProfile specifications that
    are under development to have an idea of what directions are being explored. While
    these specifications are currently outside of the MicroProfile core feature set,
    they are candidates for future inclusion, and looking at them will give us an
    idea of where MicroProfile may be headed.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下正在开发中的MicroProfile规范，以了解正在探索的方向。虽然这些规范目前不属于MicroProfile核心功能集，但它们是未来可能包含的候选项，查看它们将让我们了解MicroProfile可能的发展方向。
- en: Questions
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Do the MP-Config settings affect application code, MP feature code, or both?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MP-Config设置会影响应用程序代码、MP功能代码还是两者都会受到影响？
- en: Were you able to update `health.pathToMonitor` to a valid path and see an updated
    health status reply?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能否将`health.pathToMonitor`更新为有效路径并查看更新后的健康状态回复？
- en: What does the `Svcs2` health status link (`http://localhost:8082/health`) on
    the Health tab show as its output? If you stop the KeyCloak Docker image and click
    on the link again, does the output change?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Health选项卡上，`Svcs2`健康状态链接（`http://localhost:8082/health`）的输出是什么？如果停止KeyCloak
    Docker镜像并再次单击链接，输出会发生变化吗？
- en: What happens if you select the `MetricController.timed-request` link (`http://localhost:8080/metrics/application/io.packt.sample.metric.MetricController.timed-request`) in
    the Metrics tab without first hitting the `Timed` endpoint link (`http://localhost:8080/demo1/metric/timed`)
    at least once?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在Metrics选项卡中选择`MetricController.timed-request`链接（`http://localhost:8080/metrics/application/io.packt.sample.metric.MetricController.timed-request`）而没有先至少点击一次`Timed`端点链接（`http://localhost:8080/demo1/metric/timed`），会发生什么？
- en: Go to the RestClient tab and hit the link, making sure you have a valid ...
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到RestClient选项卡，点击链接，确保您有一个有效的...
- en: Further reading
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Going over the code, trying changes, and then interacting with the updated code
    is a good way to understand more of the details behind the sample services. The
    Quarkus MicroProfile implementation supports live reload features that allow you
    to make changes without having to rebuild. For more information on this topic,
    see Maven Tooling ([https://quarkus.io/guides/maven-tooling.html](https://quarkus.io/guides/maven-tooling.html))
    on the Quarkus site.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 查看代码，尝试更改，然后与更新后的代码进行交互是了解示例服务背后的更多细节的好方法。Quarkus MicroProfile实现支持实时重新加载功能，允许您进行更改而无需重新构建。有关此主题的更多信息，请参阅Quarkus网站上的Maven工具（[https://quarkus.io/guides/maven-tooling.html](https://quarkus.io/guides/maven-tooling.html)）。
