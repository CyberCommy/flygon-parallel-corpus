- en: Chapter 1. JavaScript Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript, which was introduced as LiveScript by Netscape Communications Corp,
    has grown leaps and bounds in the last few years. JavaScript was originally developed
    to make web pages more interactive, and control the behavior of the page. JavaScript
    programs are commonly embedded inside an HTML file. HTML is a markup language,
    and does not manipulate the behavior of a page once its loaded. Using JavaScript,
    web developers can set rules and verify if the rules were followed, avoiding any
    remote server resources for input validation or complex number crunching. Today
    JavaScript is not just used for basic input validation; it is used to access the
    browser's `Document` object, to make asynchronous calls to the web server, and
    to develop end-to-end web applications using software platforms such as `Node.JS`,
    which is powered by Google's v8 JavaScript engine.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is considered to be one of the three building blocks that are required
    to create interactive web pages; it is the only programming language in the trinity
    that is HTML, CSS, and JavaScript. JavaScript is a case sensitive and a space
    insensitive language, unlike Python and Ruby. A JavaScript program is a collection
    of statements and those statements have to be included inside the <script>> tags.
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript Basics](img/6034OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has to be invoked from another application such as a browser. Browsers
    have a built-in JavaScript engine that interprets and executes the JavaScript
    on the webpage. The interpretation of JavaScript is from top to bottom and goes
    from left to right. SpiderMonkey and Rhino are few of the early JavaScript engines
    that were implemented by different browsers, such as Netscape Navigator and Mozilla
    Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Next is our simple Hello World program; the JavaScript program is in between
    the `<script>` tags in the head section. The script tags can either be added to
    the head tag or to the body tag. As JavaScript is not non-blocking, the scripts
    hold the page until they are loaded. It is common to see the scripts being loaded
    at the end; this would work if there were no dependencies to other files or elements.
    One such example of a dependency would be a library that is used from a different
    location. We will be looking at a lot of these examples in the later chapters.
    We will be discussing the role of Unobtrusive JavaScript at a later point. For
    our Hello World program, use a text editor of your choice, and save this program
    with an HTML extension. Load the file in a web browser, and a pop-up box with
    the text **Hello World!** should be loaded on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is the `first_script.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript Basics](img/6034OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript Basics](img/6034OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Variables in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have built a Hello World program, let us take the next step and
    perform a few arithmetic operations on two numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The semi colon (`;`) is a statement terminator, it tellsthe JavaScript engine
    that a statement has ended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us take a look at another program, `alert_script.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables in JavaScript](img/6034OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous program would run and produce four pop-up windows, one after the
    other, displaying their respective values. A glaring problem here is that we are
    repetitively using the same numbers in multiple places. If we had to perform these
    arithmetic operations on a different set of numbers, we would have had to replace
    them at multiple locations. To avoid this situation, we would assign those numbers
    to temporary storage locations; these storage locations are often referred to
    as variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keyword `var` is used to declare a variable in JavaScript, followed by
    the name of that variable. The name is then implicitly provided with a piece of
    computer memory, which we will use throughout the program execution. Let us take
    a quick look at how variables will make the earlier program more flexible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables in JavaScript](img/6034OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Code commenting can be done in two ways: one is single line, and the other
    is multiline.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Single line comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiline comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us continue with the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables in JavaScript](img/6034OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let us alter the value from `5` to `6`; the amount of change that we will
    make here is minimal. We assign the value of `6` to our variable `a`, and that
    takes care of the rest of the process; unlike our earlier script where changes
    were made in multiple locations. This is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Code commenting is a recurring and an extremely important step in the development
    life cycle of any application. It has to be used to explain any assumptions and/or
    any dependencies that our code contains.
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables in JavaScript](img/6034OS_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In JavaScript, we declare a variable by using the keyword `var` and until a
    value is assigned to it, the value of the variable will be implicitly set to `undefined`;
    that value is overwritten on variable initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables are good to hold single values, but for cases where a variable should
    contain multiple values, we would have to rely on arrays. A JavaScript array is
    a collection of items arranged in an order, according to their index. Each item,
    in the array, is an element and has an index, which is used to access that element.
    Arrays are like a bookshelf that holds more than one book; each book having its
    unique location. Arrays are declared using the array literal notation `[]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at a simple array declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Arrays](img/6034OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arrays in JavaScript are zero based.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us initialize the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Arrays](img/6034OS_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To access the value of a specific element, the reference index of that element
    is used. Once the reference index is identified, it can be outputted using the
    alert statement, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Arrays](img/6034OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Unlike variables, arrays are not typed, therefore, they can contain various
    types of data, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Arrays](img/6034OS_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A much more complex example of a JavaScript array is a multidimensional array,
    where there is a combination of arrays inside an array, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Arrays](img/6034OS_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve an element from a multidimensional array, we would have to use
    as many indexes as the levels in that array. If the multidimensional array contains
    an array that has the values that we want to access, we will have to choose the
    index where the array element exists, and then choose the index of the value inside
    the array that we are searching for. To retrieve the string `Three` from the `multidimensionalArray`
    example, we will have to first locate the index of the array containing the value
    `Three`, and then find the index of the value `Three` inside that array. This
    is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Arrays](img/6034OS_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second way of declaring an array is by using the `Array` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Objects are another way of handling data. In arrays the indexes are commonly
    numerical; objects give us a robust way of assigning and retrieving data. Objects
    are derived from the object-oriented programming concept; a programming paradigm
    that is very popular. Objects are a virtual representation of real-time data;
    they allow us to organize our data into logical groups via properties and methods.
    Properties describe the state of the object, while methods describe the behavior
    of the object. Properties are a key-value pair that holds the information. Take
    a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Objects](img/6034OS_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous example, we have instantiated a `person` object, and then added
    the `firstname` and `lastname` properties that described the object. We added
    behavior to the object by creating a method called `getFullName`, the method accessed
    the object properties, retrieved the data, and alerted the output onto the screen.
    In this example the properties are accessed by the dot notation; we could also
    access a property by putting the property name in square brackets similar to an
    array, but it is not popular. This is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Objects](img/6034OS_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second way of creating an object is by using the curly braces. Here we
    are introduced to the `this` keyword, which provides a reference to the object''s
    properties and methods, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Objects](img/6034OS_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Carousel application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be working on a Carousel application, which is powered by a JSON feed.
    We will be using HTML, JavaScript, and JSON to build this application. This application
    will have its very own navigation system coupled with a timer event in the background,
    which will rotate the items at a given interval. We will also be discussing how
    user experience plays an important role in developing such an application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is a basic introduction to the principles of JavaScript that we
    will be utilizing in our journey towards mastering JSON. Variables, arrays, and
    objects play a very important role in carrying the data across the network. If
    this is your first encounter with JavaScript, go through the examples another
    time and practice them. We will need a strong foundation in order to build a solid
    understanding of JSON, and how it can be used in real-time web applications.
  prefs: []
  type: TYPE_NORMAL
