- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Hands-On High Performance with Go* is a complete resource with proven methodologies
    and techniques to help you diagnose and fix performance problems in your Go applications.
    The book starts with an introduction to the concepts of performance, where you
    will learn about the ideology behind the performance of Go. Next, you will learn
    how to implement Go data structures and algorithms effectively and explore data
    manipulation and organization in order to write programs for scalable software.
    Channels and goroutines for parallelism and concurrency in order to write high-performance
    codes for distributed systems are also a core part of this book. Moving on, you''ll
    learn how to manage memory effectively. You''ll explore the **Compute Unified
    Device Architecture** (**CUDA**) driver **application programming interface**
    (**API**), use containers to build Go code, and work with the Go build cache for
    faster compilation. You''ll also get a clear picture of profiling and tracing
    Go code to detect bottlenecks in your system. At the end of the book, you''ll
    evaluate clusters and job queues for performance optimization and monitor the
    application for performance regression.'
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Go book is a must for developers and professionals who have an intermediate-to-advanced
    understanding of Go programming and are interested in improving their speed of
    code execution.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](27d9fd37-672c-499b-88b9-89b9990117ed.xhtml), *Introduction to Performance
    in Go*, will discuss why performance in computer science is important. You will
    also learn why performance is important in the Go language.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](7bacdf42-9455-4499-a70a-c50c9a6c4e26.xhtml), *Data Structures and
    Algorithms*, deals with data structures and algorithms, which are the basic units
    of building software, notably complex performance software. Understanding them
    will help you to think about how to most impact fully organize and manipulate
    data in order to write effective, performant software. Also, iterators and generators
    are essential to Go. This chapter will include explanations of different data
    structures and algorithms, as well as how their big O notation is impacted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](61b73482-0431-4b8f-a069-d647ac1c1b87.xhtml), *Understanding Concurrency*,
    will talk about utilizing channels and goroutines for parallelism and concurrency,
    which are idiomatic in Go and are the best ways to write high-performance code
    in your system. Being able to understand when and where to use each of these design
    patterns is essential to writing performant Go.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ce982065-5176-4ca4-9346-8bae29d1ccee.xhtml), *STL Algorithm Equivalents
    in Go*, discusses how many programmers coming from other high-performance languages,
    namely C++, understand the concept of the standard template library, which provides
    common programming data structures and functions in a generalized library in order
    to rapidly iterate and write performant code at scale.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](46e7d59b-5fd8-45c7-92ab-885e6b5fcbf3.xhtml), *Matrix and Vector
    Computation in Go*, deals with matrix and vector computations in general. Matrices
    are important in graphics manipulation and AI, namely image recognition. Vectors
    can hold a myriad of objects in dynamic arrays. They use contiguous storage and
    can be manipulated to accommodate growth.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](3ce4cee8-eaaa-4a6d-b817-4fdd3899f973.xhtml), *Composing Readable
    Go Code*, focuses on the importance of writing readable Go code. Understanding
    the patterns and idioms discussed in this chapter will help you to write Go code
    that is more easily readable and operable between teams. Also, being able to write
    idiomatic Go will help raise the level of your code quality and help your project
    maintain velocity.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](229edf23-22b1-4fe9-b0d6-4cb3801da7aa.xhtml), *Template Programming
    in Go*, focuses on template programming in Go. Metaprogramming allows the end
    user to write Go programs that produce, manipulate, and run Go programs. Go has
    clear, static dependencies, which helps with metaprogramming. It has shortcomings
    that other languages don''t have in metaprogramming, such as `__getattr__` in
    Python, but we can still generate Go code and compile the resulting code if it''s
    deemed prudent.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](8b95d93a-6bc1-4307-bd75-0e317898321a.xhtml), *Memory Management
    in Go*, discusses how memory management is paramount to system performance. Being
    able to utilize a computer''s memory footprint to the fullest allows you to keep
    highly functioning programs in memory so that you don''t often have to take the
    large performance hit of swapping to disk. Being able to manage memory effectively
    is a core tenet of writing performant Go code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](6e715e38-3db3-4f02-9c6d-f5da8e35c2e3.xhtml), *GPU Parallelization
    in Go*, focuses on GPU accelerated programming, which is becoming more and more
    important in today''s high-performance computing stacks.  We can use the CUDA
    driver API for GPU acceleration.  This is commonly used in topics such as deep
    learning algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](6a020af6-5b7c-48af-95a7-cf52014ae1ca.xhtml), *Compile Time Evaluations
    in Go*, discusses minimizing dependencies and each file declaring its own dependencies
    while writing a Go program. Regular syntax and module support also help to improve
    compile times, as well as interface satisfaction. These things help to make Go
    compilation quicker, alongside using containers for building Go code and utilizing
    the Go build cache.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](c20222c4-26c2-4ea3-837b-5c55227b22b8.xhtml), *Building and Deploying
    Go Code*, focuses on how to deploy new Go code. To elaborate further, this chapter
    explains how we can push this out to one or multiple places in order to test against
    different environments. Doing this will allow us to push the envelope of the amount
    of throughput that we have for our system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](3ad3f76b-80c3-4992-8201-c025ece696b7.xhtml), *Profiling Go Code*,
    focuses on profiling Go code, which is one of the best ways to determine where
    bottlenecks live within your Go functions. Performing this profiling will help
    you to deduce where you can make improvements within your function and how much
    time individual pieces take within your function call with respect to the overall
    system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ec12b9e7-c528-45c2-b0b8-dea297659b3e.xhtml), *Tracing Go Code*,
    deals with a fantastic way to check interoperability between functions and services
    within your Go program, also known as tracing. Tracing allows you to pass context
    through your system and evaluate where you are being held up. Whether it''s a
    third-party API call, a slow messaging queue, or an *O(n²)* function, tracing
    will help you to find where this bottleneck resides.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](74c0cef8-9628-4e31-abc3-9bd9aa52fafa.xhtml), *Clusters and Job
    Queues*, focuses on the importance of clustering and job queues in Go as good
    ways to get distributed systems to work synchronously and deliver a consistent
    message. Distributed computing is difficult, and it becomes very important to
    watch for potential performance optimizations within both clustering and job queues.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](88e04ed3-8f84-43a9-ac4a-bf9d26b88e68.xhtml), *Comparing Code Quality
    Across Versions*, deals with what you should do after you have written, debugged,
    profiled, and monitored Go code that is monitoring your application in the long
    term for performance regressions. Adding new features to your code is fruitless
    if you can''t continue to deliver a level of performance that other systems in
    your infrastructure depend on.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for Go professionals and developers seeking to execute their code
    faster, so an intermediate to advanced understanding of Go programming is necessary
    to make the most out of this book. The Go language has relatively minimal system
    requirements.  A modern computer with a modern operating system should support
    the Go runtime and its dependencies.  Go is used in many low power devices that
    have limited CPU, Memory, and I/O requirements.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the requirements for the language listed at the following URL: [https://github.com/golang/go/wiki/MinimumRequirements](https://github.com/golang/go/wiki/MinimumRequirements).
  prefs: []
  type: TYPE_NORMAL
- en: In this book I used Fedora Core Linux (version 29 during the time of writing
    this book) as the operating system.  Instructions on how to install the Fedora
    Workstation Linux distribution can be found on the Fedora page at the following
    URL: [https://getfedora.org/en/workstation/download/](https://getfedora.org/en/workstation/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Docker is used for many of the examples in this book.  You can see the requirements
    listed for Docker at the following URL: [https://docs.docker.com/install/](https://docs.docker.com/install/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 9](6e715e38-3db3-4f02-9c6d-f5da8e35c2e3.xhtml), *GPU Parallelization
    in Go*, we discuss GPU programming.  To perform the tasks of this chapter, you''ll
    need one of two things:'
  prefs: []
  type: TYPE_NORMAL
- en: A NVIDIA enabled GPU. I used a NVIDIA GeForce GTX 670 in my testing, with a
    Compute Capability of 3.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GPU enabled cloud instance.  Chapter 9 discusses a couple of different providers
    and methodologies for this.  GPUs on Compute Engine work for this. More up to
    date information on GPUs on Compute Engine can be found at the following URL: [https://cloud.google.com/compute/docs/gpus](https://cloud.google.com/compute/docs/gpus).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After you read this book; I hope you'll be able to write more efficient Go code. 
    You'll hopefully be able to quantify and validate your efforts as well.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/bobstrecansky/HighPerformanceWithGo/](https://github.com/bobstrecansky/HighPerformanceWithGo/). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code in Action videos for this book can be viewed at [http://bit.ly/2QcfEJI](http://bit.ly/2QcfEJI).
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781789805789_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789805789_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: " The following code blocks will show the `Next()` incantation"'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "The **reverse algorithm** takes a dataset and reverses the values
    of the set"'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
