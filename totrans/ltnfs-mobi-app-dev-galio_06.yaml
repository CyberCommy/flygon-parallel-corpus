- en: '*Chapter 6*: The Basics of Mobile UI Building'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand more about how Galio can help us with building our cross-platform
    mobile application, it's time to learn a few rules about designing so that we
    can use the framework to its maximum potential.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will look superficially at some design concepts and guidelines
    that'll help us at least feel more confident in our design skills. I hope this
    chapter will give you a boost of confidence and a drive to build/create a beautiful
    **user interface** (**UI**).
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by exploring the importance of clean design and some basic guidelines
    we should follow to make sure our design is as clean and minimalistic as possible
    while delivering the most useful information to our users. After that, we'll slowly
    drift into a basic explanation of **user experience** (**UX**) and how to find
    out what's best for our users.
  prefs: []
  type: TYPE_NORMAL
- en: Once we've discussed all this, we'll find out how we can minimize user input
    so that our users won't feel like dropping a form in the middle of completing
    it. We'll go over what exactly might block our users from finishing a form and
    how we can improve our forms so that the completion rate might increase.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we'll see how decluttering our design ideas is usually the best
    way to make sure our app will look clean and good. We'll discover guidelines on
    how to do that and what are the most appropriate ways of creating breathing room.
    We'll also go over my creative process, from the first design draft to a final
    screen that I feel deserves to be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: After decluttering, it's time to talk about consistency. We'll learn how and
    why consistency is important in a mobile application. We'll also go over the main
    ideas of three different UI design tools so that you'll be able to at least know
    what to research and form your own opinion on which to pick to prototype your
    own applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the importance of clean design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimizing user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decluttering for better app organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining consistency in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the importance of clean design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have got to this step, it's time for us to learn a few rules and
    guidelines regarding how to create a good-looking design for our app. Now, *beauty
    is subjective*, as we all know, but there are certain rules that may create a
    better flow inside your mobile app or even your website.
  prefs: []
  type: TYPE_NORMAL
- en: We are not trying to look through objective lenses toward what beauty is, but
    there are certain aspects of beauty that are in direct correlation with our brain
    and how it's built. For example, *colors can mean different things in different
    cultures*, and that's OK as we're not going to get into choosing yellow over black.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, we can take the *rule of thirds*, which is a rule of thumb
    for creating visual art such as films, paintings, or photographs. The thing about
    the rule of thirds is that we've discovered that for some reason, our eyes pay
    more attention to the subject of a photograph when it is sitting at the intersection
    of two lines after we've divided the screen into two-thirds, both horizontally
    and vertically. You can try this out yourself right now. The chances are your
    phone has this feature already built inside your camera app, so try to take a
    picture with the subject at the center and then with the subject where the lines
    intersect.
  prefs: []
  type: TYPE_NORMAL
- en: This, of course, does not mean that all of our pictures must be taken following
    the rule of thirds but it will help in most cases. The thing is that there are
    other factors that would have to be taken into consideration, such as shading,
    contrast, brightness, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The whole purpose of explaining this is for you to understand that there are
    certain aspects of a design that can manifest the idea of "beauty" to our users.
  prefs: []
  type: TYPE_NORMAL
- en: One of these is actually the importance of a clean design and how it generally
    helps us convey our mobile app's purpose in a straightforward manner. I'm not
    trying to create a minimalism-loving group, but I do feel that in this day and
    age, minimalism has become more important. In a world where there are so many
    choices to be made, the user loves it when the information is straightforward
    and they don't have to scroll through a big screen of information and distractions
    to get to the point of your website.
  prefs: []
  type: TYPE_NORMAL
- en: '"Design is not just what it looks like and feels like. Design is how it works"'
  prefs: []
  type: TYPE_NORMAL
- en: – Steve Jobs
  prefs: []
  type: TYPE_NORMAL
- en: So, what exactly does it mean to have a clean design? Remember those websites
    back in the 2000s, or even 2010s, that were full of unnecessary information, such
    as a clock randomly placed in the right corner of the screen? People don't want
    to see your app or website crowded with… stuff. They actually prefer a more simplistic
    approach that makes it look more stylish and cooler and avoids sending the user
    through multiple pages of nonsense just to get to their objective, which might
    be just finding out where your company is located.
  prefs: []
  type: TYPE_NORMAL
- en: Let's implement some rules so that we won't have to deal with that sort of nightmare
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Essentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Focusing on the essentials allows us to keep things short and to the point.
    We can do that by limiting the number of visual elements and menus. If you think
    about a drop-down menu inside your mobile app, you'd better stop thinking about
    it right now and maybe start thinking about how you can divide your app into categories
    that work with something such as a bottom tab navigator.
  prefs: []
  type: TYPE_NORMAL
- en: Color scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's be honest. We all love colors! We do! They're pretty, and whenever we
    go out with our friends clubbing or just having fun in general, we're always stressing
    about what should we wear. Well, that's because not all colors work together,
    and sometimes if you pick more than 10 colors, people won't have an idea what
    to focus their eyes on.
  prefs: []
  type: TYPE_NORMAL
- en: The same thing goes for websites and mobile apps. We should limit our color
    usage to only three colors—of course, while applying different shades where necessary—but
    by having only three main colors inside our app, we could create some sort of
    continuity inside our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say one screen has a **Submit** button that is green. The other one
    has a **Submit** button that is purple. Once the user sees that, they''ll instantly
    think: "Is that the correct button?" Once you create a rule for how certain things
    should look, stick with it!'
  prefs: []
  type: TYPE_NORMAL
- en: Availability and accessibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This one is actually really critical. Your mobile app's design has to be able
    to function on all distributing platforms that are of interest to your target
    audience. I'd actually say that right now, in today's market, it is mandatory
    to have your product on at least iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: The thing is, because these platforms were built differently and have a different
    UX, you'd have to adapt your product for each platform. The better you do this,
    the more people are going to enjoy using your app.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we're in 2021, so you should implement support for screen readers such
    as **VoiceOver** for iOS or **TalkBack** for Android. This will make you feel
    better about yourself because you're not only creating a better digital world
    for everybody but also, by allowing a bigger audience for your app, you'll have
    a better chance of developing your idea into a successful one.
  prefs: []
  type: TYPE_NORMAL
- en: Simplicity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I can't stress this enough, but you need to focus on what's important. You don't
    need to list every single thing your app can do in a single screen. Try to keep
    it short. No one has the time to actually read all the information on a page,
    so having as little information as possible but at the same time making this as
    meaningful as possible is the key to simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: Information architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every user that's going to interact with your app has a pre-built behavior pattern
    that's going to be exhibited when they first use your app. Study your competition
    and make sure that behavior is not going to get in the way of your creative process
    while making the app. For example, they might expect a specific button, such as
    the **Get Started** button inside a splash screen, to be always at the bottom
    of the screen. Your job is to make sure you'll use these behaviors in your favor,
    and if you want to create some sort of new UX for your users, take your time to
    teach them how to use your app.
  prefs: []
  type: TYPE_NORMAL
- en: Consistency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure your design and information are consistent throughout the whole app.
    By staying consistent, you can make sure your users will never have a moment where
    they do not understand what's going on or how to use your app. By staying consistent,
    we actually teach our users the best way to use our platform without the need
    for extra boring text.
  prefs: []
  type: TYPE_NORMAL
- en: User experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've probably noticed the phrase **user experience** (**UX**) , but we haven't
    really defined it. UX refers to how well a product (website or mobile application)
    meets the needs of a user.
  prefs: []
  type: TYPE_NORMAL
- en: We should *distinguish UX and usability* as the latter is a quality attribute
    of the UI, covering how easy the system is to learn or how efficient it is to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good rule of thumb we can keep in mind when designing a mobile UX design
    is to ask ourselves the following question: *Is the mobile app useful?*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If not, we can say there''s no value for the end user.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If the answer is yes but it''s not intuitive enough, the end user won''t spend
    time learning it.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mobile UX design encapsulates three important aspects: accessibility, discoverability,
    and efficiency. This is leading to fast, positive, and experience-driven end results.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Net Solutions'' State of B2B Commerce 2020* report states *65.8% businesses
    will be investing in improving mobile UX design in the next 12 months.*'
  prefs: []
  type: TYPE_NORMAL
- en: Based on this data, we should realize that UX is a never-ending science. We'll
    never have the perfect UX—this will change as the user changes. In time, we'll
    likely change our behavior while using our phones, so your designer needs to design
    a great experience for your end users that will meet the expectations of those
    specific users at that specific time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The natural question right now should be: *How we should approach this so that
    we''ll always be able to deliver a high-quality user experience to our users?*
    I''d say for constructing a great UX, the approach mentioned in the following
    sections will get you the best results.'
  prefs: []
  type: TYPE_NORMAL
- en: Research
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Spend multiple days with your end users. Understand their needs and how exactly
    they feel about the way things are working right now. Hear them out because their
    feedback is one of the most important parts of this whole process.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you take a look at one of the older members of your family when
    they're using an app, you'll notice they get frustrated really easily with certain
    parts of the application. Watch them and check for what they're expecting. They
    might say something such as "Why is it so hard to order something through this
    app?" and proceed to randomly tap on the screen nervously because things are not
    exactly how they're expecting them to be. People around you and especially those
    that are targeted by the app can offer you the most valuable pieces of information.
  prefs: []
  type: TYPE_NORMAL
- en: Empathize
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After discussions with the users and understanding their needs, it's time to
    find solutions to their problems. Use whatever helps you the most to organize
    those thoughts and try finding solutions as to how to eliminate problems your
    users have encountered. You need to pay attention so that you don't create more
    problems, so test your app after you find a solution.
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Well, this is self-explanatory. Once everything has been tested and you have
    found solutions to all the problems, it's time to build the app. The thing is…
    from your research, you should be able to realize what types of technologies are
    truly needed for your app. Sometimes, even React Native just won't cut it, so
    you might have to make some changes. This is a part of being a great programmer,
    so don't worry! Once you get to know a programming language and a framework, you
    can learn anything.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've been through this and we've understood a little about why a clean
    design is actually really important for our app and how UX works, we should have
    a pretty good idea as to why certain apps take the minimalistic route and have
    a straight learning path for all their users.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's discuss why is it important to minimize user input, which is another
    part of making sure we have a clean design, and how we can do it.
  prefs: []
  type: TYPE_NORMAL
- en: Minimizing user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lots of people are hesitant to fill out forms, especially when they're long,
    filled with personal information involving them having to search through physical
    documents, and filled with required steps that seem irrelevant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing this, we have an obligation to create a good form for our users so
    that they won''t feel like it''s a chore when completing it. The primary goal
    of any form is **completion**. For that, we''ll first have to know what the primary
    concepts of an effective form are. These are covered here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Perception of complexity**: Every time we''re presented with a form, the
    first thing we''re doing is visually scanning it so that we can estimate how much
    time is required to get to the finish line. Knowing this, we can pretty much instantly
    realize that perception of complexity plays a crucial role in finishing a form.
    The more complex it looks, the less likely it is that users are actually going
    to complete it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interaction cost**: This is the collective sum of all the effort put into
    completing a form. The more effort the user puts into it, the less likely it is
    they''ll complete it. Imagine a form with a bug where you can''t add your birthdate
    or it''s not intuitive to do so. You''ll probably lose focus and get mad at the
    form and how difficult it is to use. In the end, you''ll never actually complete
    it. This type of faulty interaction makes the user think less of the app and the
    form itself. This is the type of flaw that will make the user forget about how
    beautiful the design is or how useful the rest of the app is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we know how users are actually going to think about our forms, let''s
    see which guidelines we should follow so that we''ll create an efficient form
    design, something that all of our users will be able to follow and complete. Consider
    the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Remove user effort by asking the right questions**: Questions inside the
    form should be kept in an intuitive sequence and they should seem logically sorted
    from the user''s point of view. When thinking about the sequence of asking questions,
    we always start with name, birthplace, and personal information. That''s because
    this functions just like a conversation. Don''t compromise only because your database
    or application logic has a different order of asking questions—the user comes
    first. Our job as programmers shines best when the user has no understanding of
    how the app actually works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good rule of thumb for this might be to continuously ask yourself why and
    how the information you've requested is being used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Single-column layout**: The biggest problem with a two-column layout for
    our forms is that you don''t really know how the user is going to read the information.
    To make this easier, having one single column should be intuitive enough for the
    user to understand that they first have to complete whatever questions are at
    the top of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use as few input fields as possible**: Imagine this—you want to book a flight
    and it''s asking you for information regarding everything that''s going to happen
    in your journey. You just want to check the prices and see if you can afford next
    month''s flight to the Bahamas, but you''re seeing a form just as big as your
    entire screen. You''ll look at the screen and think that maybe you don''t really
    want to go to the Bahamas, at least not with this booking company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using as few input fields as possible not only means removing unnecessary questions
    from your form—you should also think of different ways of asking those questions.
    Instead of having three input fields for the departure date (day, month, year),
    it might be easier to have a date picker with a single input field. Another good
    example of using other types of form elements might be instead of having a dropdown
    for the numbers of passengers, we might use just a **+** and **–** button. This
    will make the content more interactive and less threatening to a user trying to
    quickly get through the form.
  prefs: []
  type: TYPE_NORMAL
- en: '**The correct width of an input**: This happens way too often. I''m placing
    an online order for something and then they''re asking me for a street address
    and street number. That obviously means that I should write the street name in
    an input field and then the street number in another field. The problem is that
    the street field is extremely big. This makes me confused, asking myself: "Should
    I write anything else besides the street name?" This shouldn''t happen; if you
    know the user is supposed to write a ZIP code, try to make the ZIP code input
    field just as big as it needs to be. Making it larger than it has to be might
    make the user confused, and we don''t want to confuse our users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Labels on the top**: Having the input labels on top of the text inputs makes
    it easier to follow the form. Let''s say we have them on the left side of the
    screen; this is going to make your eyes go zig-zag, which doesn''t seem like too
    much work, but we''re trying to have the cleanest and most straightforward design
    possible, so everything that can help our users feel like our form won''t be too
    difficult is going to be in our favor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optional and required fields**: As we know, we should always try to avoid
    optional fields in forms as they make the form longer than it has to be, but there
    are some cases where some optional fields are needed if we''re trying to obtain
    more information for our marketing team, or maybe we just need a second address
    for a checkout form. If they''re necessary for us to implement, then we might
    as well make it really obvious that they''re optional and not required. You can
    do that just by writing **Optional** next to the label, but make sure it''s visible
    and in no way a hidden message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highly visible error messages**: I actually hate it (and I''m not the only
    one) when I get something wrong in a form but I have no idea what it is. Everything
    becomes a puzzle: "Is it the password?" "Is it the email?" "What did I get wrong?"
    Avoid this by having clear visible error messages for each input form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The messages must be visible just by scanning the screen with your eyes. For
    this, you can use anything at your disposal, be it icons, colors, or text.
  prefs: []
  type: TYPE_NORMAL
- en: The right time to inform a user about something being wrong is *after* they're
    done with the form. Don't interrupt their form completion process telling them
    they got something wrong as that might be quite annoying for some users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using these guidelines should ensure that we have a really good form. But this
    doesn''t stop here. Each situation is different, so don''t be afraid to break
    rules or ideas. The cool thing about designing an app is that your ideas matter
    just as much as anyone''s. The best thing to do when you''re trying to be different
    is to always ask yourself: "How does that improve my user''s experience?" If you
    can''t find an answer, it''s better to just stick with these main ideas or find
    new ones from design books or psychology books.'
  prefs: []
  type: TYPE_NORMAL
- en: So, up to now, we've discussed having a clean design and a good-looking form
    for our users. We should start thinking about another aspect of creating our design—
    decluttering.
  prefs: []
  type: TYPE_NORMAL
- en: Decluttering for better app organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's always an issue between displaying relevant information to the user
    and keeping the UI as clean and as minimal as possible. When we say decluttering,
    we're referring to the visual and readability aspects of design.
  prefs: []
  type: TYPE_NORMAL
- en: Clutter is terrible on desktop websites, but it's even worse on mobile apps
    as the screen size is a lot smaller. It's essential to get rid of any information
    that's not absolutely necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s see how we can do that with our apps. We can refer to our first
    screen created back in [*Chapter 4*](B17074_04_epub_Final_SB.xhtml#_idTextAnchor070),
    *Your First Cross-Platform App*, reproduced here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – First screen we created'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_6.1_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – First screen we created
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, our app is already filled with only one important piece of
    information for our user: the last played games, the most played game, their name,
    and their level. But when I first started developing the idea I had for this screen,
    I actually started with a screen full of information. My screen looked really
    cluttered with information that wasn''t necessary, but for some reason, I thought
    that might be relevant to our user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how it looked before and try to notice how exactly I got it decluttered
    into the final form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Our screen before decluttering'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_6.2_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Our screen before decluttering
  prefs: []
  type: TYPE_NORMAL
- en: I know—your first reaction is "yuck", and that's completely understandable.
    This screen looks filled with too much stuff. On top of that, it feels like there's
    no breathing room, and the information takes all the space available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take it step by step and see what I''ve done from my initial idea (*Figure
    6.2*) to my final product for us to code (*Figure 6.1*). We''ll try to understand
    what exactly happened inside my creative process and how we decluttered our screen.
    Here''s how it evolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Whitespace**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The space between the edge of the screen and the main content area is called
    *a margin* in typography. Even if you write a Word document, there's always an
    empty space; we're not writing things from one edge of the paper to the other
    edge. Knowing this, even though I had a margin of 8 **pixels** (px), it still
    didn't feel right. I felt that more space was needed, so I increased the margin
    to 32px.
  prefs: []
  type: TYPE_NORMAL
- en: This constrained our content and left us with less space to work with, but everything
    then looked like it got more breathing room. This is a fair exchange; less information
    is not always bad, especially after assessing the content of your screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Removing unnecessary information**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we identified which pieces of information were not absolutely needed for
    our user on this specific screen, it was time to remove them. At the beginning,
    I thought a nice little chart would be cool, but seeing how much space it took
    made me realize that for my hypothetical app it would be better to think of that
    chart as something that the user could see by tapping on the game they were interested
    in.
  prefs: []
  type: TYPE_NORMAL
- en: The same thing applies to days they last played those games on. Those aren't
    needed at first glance as they could see them on another screen once they're actually
    interested in statistics for that game. All this information could be easily implemented
    on another screen, so why would we place it on the first screen?
  prefs: []
  type: TYPE_NORMAL
- en: '**Alignment**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've removed some elements and we've chosen the 32px margin from the
    edge of the screen to our content area, it was time to create some rules for alignment.
    First of all, I thought to myself that we should have everything aligned to the
    left side of the screen. If we were to break that rule and suddenly have a heading
    text on the center of the screen, our users might think there's something off.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we had chosen where the text is aligned, it was time to maintain this
    throughout the whole app.
  prefs: []
  type: TYPE_NORMAL
- en: '**Consistency**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, in *Figure 6.1*, there's an equal amount of space between our three
    main categories (header, most played game, and last played games), and there's
    an equal amount of space between the displayed games under the **Last played games**
    header. So, we picked two different sizes, we gave them meaning, and then we used
    them whenever they were needed. Imagine having one game title just 2px off the
    bottom; maybe you wouldn't immediately notice it, but you'd feel like something
    was off.
  prefs: []
  type: TYPE_NORMAL
- en: The same thing can be said about colors. We chose three main colors, gave them
    meaning, and then maintained consistency with them. This will apply to other screens
    as well—the same margins, colors, and alignment. This is how we make sure our
    screen will never look odd to someone.
  prefs: []
  type: TYPE_NORMAL
- en: After I finish a creative process, I take a look at the before and after and
    try to judge for myself if one version is better than the other. Another good
    judge might be a relative or a friend, so don't be afraid to share your work with
    other people to see what they think.
  prefs: []
  type: TYPE_NORMAL
- en: My initial design will always be different than what I'll actually implement,
    and that's because in my opinion your first thoughts on something are always influenced
    by whatever is happening around you at that specific moment. It's better to take
    a step back and let all the information surround you. After that, you can judge
    your work more accurately.
  prefs: []
  type: TYPE_NORMAL
- en: Once we've settled on a design, we should be able to maintain the rules over
    the entire application. This is called being consistent, and it's one of the best
    pieces of advice I've ever received.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining consistency in your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consistency is something that can be extremely helpful, whether we're talking
    about design or our personal life. I've learned that being consistent is the key
    to a healthy, successful life. Being consistent is what gets me from point A to
    point B, and I do believe that this gets applied to every aspect of life. Being
    consistent is about the experience.
  prefs: []
  type: TYPE_NORMAL
- en: Slowly progressing from the main screen to the last screen of our mobile app
    is an experience that needs to be enjoyed by our users. This experience can only
    be enjoyed by avoiding confusion and reducing the amount of learning for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can achieve consistency in our design and the appropriate way
    of handling issues of consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Device UI guidelines and behaviors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iOS and Android have different UIs and different usability guidelines. It'd
    be good for you to get familiar with them. By identifying the differences between
    the platforms, we can ensure that our app works and functions correctly on each
    specific platform. Even though the designs have to be similar, there are differences
    in how users actually use those platforms and, because of that, you want to make
    sure your app will not make your users learn a different usage pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Meaning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are certain aspects of an app that we just don't want to be changed. Imagine
    having a blue **Submit** button for the checkout process and then a red **Submit**
    button for a registration form. This will create confusion.
  prefs: []
  type: TYPE_NORMAL
- en: Once we give meaning to our colors and buttons, it's important to keep the same
    meaning whatever screen or platform our user is using. If you're coming from the
    web developing industry, you'll probably know about Bootstrap. **Bootstrap** is
    a UI library created by Twitter that comes packed with colors, **Cascading Style
    Sheets** (**CSS**) classes, and design guidelines for the web. For example, they've
    identified a shade of blue as the color for information. This is how they maintain
    consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Another good example can be the fact that in the screen we developed in [*Chapter
    4*](B17074_04_epub_Final_SB.xhtml#_idTextAnchor070), *Your First Cross-Platform
    App*, I chose a margin of 32px between the edge of the screen and the main content.
    If we were to develop another screen, we'd have to maintain the same constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I'm pretty sure we all know the meaning of the words inbox, submit, spam, and
    delete. These words are universally accepted and known by all app users. Changing
    words just for the sake of it requires users to develop another layer of understanding
    and learn these new words. For the sake of being consistent, we'll make sure all
    these words will have the same meaning in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, the list of words goes much further than this, but a good rule of
    thumb is to ask yourself the following question: "Did I ever see this word or
    icon used in a different context in another app?" If the answer is "yes," you
    might want to rethink the way you''re designing your application, or at least
    the language aspect of it.'
  prefs: []
  type: TYPE_NORMAL
- en: Having discussed all these guidelines for consistency and clean design, I think
    we should explore different software products that might help you in designing
    your perfect mobile app. As we all know, there's Adobe Photoshop, which is a heavily
    used product in almost every aspect of design, whether it's web, mobile, or pixel
    art for your indie game. But we won't go into why Photoshop is as big as it is
    because there are other products we can use that are a lot simpler to learn and
    less expensive.
  prefs: []
  type: TYPE_NORMAL
- en: Figma
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Figma is a tool that is compatible with almost every browser. This makes it
    a unique design tool as it's browser-based. You don't need to worry about installing
    its latest version or having to deal with compatibility issues or version issues.
    It is also a collaborative tool, so you can join the team designing your project.
  prefs: []
  type: TYPE_NORMAL
- en: The price is free but for better features, there's a monthly subscription payment.
    This is a pretty great tool and a lot of people enjoy using it.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe XD
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Adobe Experience Design** (**XD**) is a direct competitor of Sketch. Because
    Sketch only works on macOS, XD is an alternative for Windows users. Of course,
    it also works on macOS just as well as it does on Windows. It''s really fast and
    easy to use for a beginner. It has all the features Sketch has, such as wireframing,
    prototyping, and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: It's a free tool, but it also works on a subscription-based model for company
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sketch is a really lightweight UI/UX design tool for designers. It is viewed
    as an industry-standard tool for prototyping, and once you're looking for more
    in-depth tutorials regarding design, you'll see Sketch popping out more than you'd
    want. It is really similar to Photoshop, but its focus is on graphic design.
  prefs: []
  type: TYPE_NORMAL
- en: Sketch has a price of **US Dollars** (**USD**) 99 right now and a free trial
    of 30 days. I highly recommend trying this tool as it's the standard tool used
    throughout the industry.
  prefs: []
  type: TYPE_NORMAL
- en: I'd have to say that my personal favorite was Sketch, but after having to design
    on Windows as well, I started playing around with Adobe XD. Now, I'm using XD
    for everything. I've even used it for the screens and example images found in
    this book. I love the way you can prototype on it, and I'd totally recommend trying
    all of them before picking your favorite tool.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was full of information regarding how to maintain a good clean
    design for our mobile apps. I hope that by the end of it, you've understood at
    least some of it because after all, we're not designers—we're programmers. I do
    think, though, that having at least a little bit of understanding regarding the
    tools other people use and some basic rules and guidelines is going to go a long
    way toward you becoming a better, more prepared programmer.
  prefs: []
  type: TYPE_NORMAL
- en: We've understood how to minimize user input and create great forms with a bigger
    completion rate for a great UX. We've also learned some rules on how to create
    those forms in a more logical way so that we never confuse our users.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we're learned about how to declutter our designs so that they look
    like they have more breathing room and we've seen my creative process from the
    first draft for a screen design until the final result.
  prefs: []
  type: TYPE_NORMAL
- en: After learning about consistency and what exactly that is, we've explored the
    main ideas of each design tool so that you are able to choose the one that suits
    you the best.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you're thrilled about the next chapter because we're getting closer to
    understanding and creating actual cool little applications. We'll start learning
    about the state of our application and how we can use it to dynamically change
    information throughout our app.
  prefs: []
  type: TYPE_NORMAL
