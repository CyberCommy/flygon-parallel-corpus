- en: Accessing the Blockchain through an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a BlockchainIn the previous chapter, we built the beginnings of our
    blockchain data structure. In this chapter, we're going to be building an API
    that will allow us to interact with our blockchain. To build the API, we will
    be creating a server using the Express.js library, and then we will be building
    three different endpoints that will allow us to interact with our blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started and build our API from scratch. In this chapter, we are
    going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Express.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the API foundation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Postman and body-parser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the `/blockchain` endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the `/transaction` endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the `/mine` endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Express.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start building our API or our server to interact with our blockchain
    data structure. We will be building our API in a new file that we will put into
    our `dev` folder. Let''s create a new file and call it `api.js`; this is where
    we will build our entire API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/418a386b-6fe0-4556-bf50-a72ef42cfb8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Express.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to use a library called `Express.js` to build a server or
    an API. Let''s follow the below mentioned steps to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, head over to Google, search for `Express.js npm`, and click on the first
    link ( [https://www.npmjs.com/package/express](https://www.npmjs.com/package/express)
    ). This should take you to the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97d810b1-7148-424e-9170-78940bc18516.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have to install it as a dependency, so we must run the following command
    in our terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39ae1b21-f1b8-4402-8234-f7034c436bda.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have the Express library as a dependency in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Using Express.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Express is pretty straightforward: lets see how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply copy the example code that is present in the documentation and paste
    it into our `api.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, at the top of our file, we are requiring `express`, the library
    that we just downloaded, and then we are creating an `app`. This `app` will help
    us handle different endpoints or different routes.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have a `get` endpoint, which is just `/`. With this endpoint,
    we are sending back the response of `Hello World`. This whole server is listening
    on port `3000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start this server, we go over to our terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now our server should be running. We can test this by hitting the `get` endpoint
    route in our browser, and this route will simply be a localhost on port `3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a new tab in your browser and enter `localhost:3000`. Here you will see
    the text Hello World:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89f476ff-ec18-4e5e-9c86-008e8d49e4bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the response that was sent to us from the endpoint. We can change the
    text to whatever we want, so let''s change `Hello World` to `Hello Coding JavaScript!`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now save that and restart the server by running the following command again
    in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh the browser tab and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ceb988cd-1f4c-4a15-946b-f3369d81f104.png)'
  prefs: []
  type: TYPE_IMG
- en: There you go! Using Express is pretty straightforward and pretty easy. We're
    going to build all of our endpoints using the Express.js library.
  prefs: []
  type: TYPE_NORMAL
- en: Building the API foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to continue building our blockchain API in this section, and then
    we''re going to build the following three endpoints in our API to start with:'
  prefs: []
  type: TYPE_NORMAL
- en: The first endpoint is `/blockchain`, which allows us to fetch our entire blockchain
    so that we can look at the data that's inside of it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second endpoint is `/transaction`, which allows us to create a new transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third endpoint is `/mine`, which will allow us to mine a new block by using
    the `proofOfWork` method that we made in the last chapter. This is going to be
    a pretty powerful endpoint, and it will be fun to build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is basically going to be the foundation of our blockchain API. In the
    `dev/networkNode.js` file, let''s define these endpoints as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, one more thing that we want to do is make some modifications to the `listen`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added another parameter to this method, which is a function. Inside
    of this function, we are simply going to print out the `Listening on port 3000` string. The
    reason that we do this is just so that when our port is actually running, we will
    see this text. Let''s go to our terminal and run our `api.js` file again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/792cf9c8-0202-4775-b407-ffdd1cfbc256.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the preceding screenshot shows us that we are listening to port
    `3000`. Whenever we see this text, we know that our servers are running.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Postman and body-parser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to work on our environment to make our development
    process a little bit easier. The first thing that we''re going to do is install
    a new package called `nodemon`. In our `blockchain` directory in our terminal,
    we will write the `npm i nodemon --save` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5968fff1-e3a4-4233-8d87-eede8d1cce1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Whenever we make a change in one of our files and save it, this nodemon library
    will automatically restart our server for us so that we don't have to go back
    and forth from the terminal to our code to restart the server every time we make
    a change.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use nodemon, we are going to open up our `package.json` file. Where it says
    `"scripts"`, we''re going to add a new script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added `"start": "nodemon --watch dev -e js dev/api.js"`. This means
    that when we run the `start` command, we want `nodemon` to watch our `dev` folder
    and keep an eye on all of our JavaScript files. Whenever one of these JS files
    is changed and saved, we want nodemon to restart our `dev/api.js` file for us. Save
    the `package.json` file. Now, whenever we make a change inside of our `dev` folder
    and save it, our server will restart itself. Let''s test this out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to our terminal. Our server should now be using nodemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47f2c8f5-a9d7-4772-baac-29a9606a9def.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have started the server by using the `npm start` command. You can see that
    this is listening on port `3000`.  Whenever we make a change in one of our JS
    files and save it, we will see that our server restarts itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/455346c7-ff50-4824-8520-574eb858ce55.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the server is listening to port `3000` again. This is just a
    tool that we use to make development slightly easier for us. Now, one other tool
    that we want to use is called Postman.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Postman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Postman tool allows us to make calls to any of our post endpoints, as well
    as send data into these endpoints with our requests. Let''s understand how to
    install it:'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to [https://www.getpostman.com](https://www.getpostman.com) and download
    the app. Once you have downloaded the app, we can run through a little test trial
    of how we can use this Postman app to hit our `/transaction` endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Postman app after downloading it. You will see something similar to
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/72ba3dea-426e-4216-a1c6-ecc5a4cd4e87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Postman app we''re going to make a post request to `http://localhost:3000/transaction`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b86b437-349e-427a-999c-d5aff285f942.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To test that the `/transaction` endpoint is working, let''s send something
    back in the output. In our `/transaction` endpoint, we have added the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save the file, and now when we hit this endpoint, we should get the
    text `It works!!!` returned to us. Click on the Send button, and you will get
    the output, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/109ae641-2a75-41fe-ad41-09b65930b7ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, most of the time we hit a `post` endpoint in our API, we are going to
    want to send data to it. For example, when we hit the `/transaction` endpoint,
    we want to create a new transaction. Consequently, we have to send the transaction
    data, such as the amount for the transaction, the sender, and the recipient to
    the `/transaction` endpoint. We can do this by using Postman, and it''s actually
    pretty straightforward. What we''re going to do here is send some information
    in the body of our post request. You can do that by clicking on the Body tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44f794e7-5400-448d-be08-beacc53be751.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, make sure that the raw option is checked and JSON (application/json) is
    selected from the dropdown list. You can also see that we have made a JSON object
    and put some data in it. We have added the `amount` as `20` bitcoins, the address
    of `sender`, and the address of `recipient`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember that everything has to be in JSON format, so we need all of our quotations to
    be in double quotes or the terms won't work.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test whether or not we are receiving all of this information inside of our
    endpoint, we are going to print out the entire `req.body`. The `req.body` is simply
    the information that we created in the JSON object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have also sent some different information back in the response. We
    have added a sentence in back ticks, and we also did some string interpolation
    with `${req.body.amount}`, which will return just the `amount`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for `${req.body.amount}` to work, we need to install another library in
    order to access this information. Let''s go back in our terminal; we''re going
    to quit the current process where we were listening to port `3000` and we''re
    going to install a package called `body-parser`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3b60653-9e7c-4a06-8bf1-77a733fb2257.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's start our server up again with `npm start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When it comes to using `body-parser`, we simply want to import this at the
    top of our file after the line where we imported `app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To use this `body-parser` library, we have added the next two lines. All these
    two lines is doing are stating that if a request comes in with JSON data or with
    form data, we simply want to parse that data so that we can access it in any of
    the endpoints. So, with any endpoint we hit, our data is first going to go through
    the `body-parser` so that we can access the data and is then used in whichever
    endpoint will be receiving it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''re using `body-parser`, we should be able to access the amount.
    Let''s save the `api.js` file and try to send the request, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b3cd1e5-b80a-4193-927a-012d555ffdf1.png)'
  prefs: []
  type: TYPE_IMG
- en: It worked! We got the string returned, which states that The amount of the transaction
    is 20 bitcoin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our terminal, since we logged out of the entire `req.body`, we can see that
    the entire information regarding the amount, sender, and recipient is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b895ca0d-903f-4b37-8730-b6fd14848d98.png)'
  prefs: []
  type: TYPE_IMG
- en: Great! Now, one more important thing to note is that throughout the rest of
    this chapter, you should always have your server running, which means you should
    always run the `npm start` command so that we can use our API, hit the different
    endpoints, and test it to see if it works.
  prefs: []
  type: TYPE_NORMAL
- en: Building the /blockchain endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s continue building our blockchain API. In this section, we are going
    to interact with our `/blockchain` endpoint. This means that we will have to import
    our blockchain from our `blockchain.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now imported our blockchain data structure or our blockchain constructor
    function. Next, we want to make an instance of our blockchain. We can do that
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now we have an instance of our blockchain constructor function and we have called
    it `bitcoin`. You can call this whatever you want, but I'm just going to call
    it `bitcoin` to keep it simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build on our `/blockchain` endpoint. All this endpoint is going to do is
    send our entire blockchain back to whoever called this endpoint. To do that, we
    are going to add a line that will send the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Believe it or not, that's all we're going to do for this endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the /blockchain endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we can test whether or not this endpoint works by using it in our browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to our browser and hit `localhost:3000/blockchain`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/503448a4-018c-4402-acd9-ffb44f94f206.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we get our entire blockchain back. Now, you might have noticed
    that this is a little bit difficult to read, so to make it readable, let''s download
    a Chrome extension called **JSON formatter**. You can Google this and add the
    extension to your Chrome browser. Once installed, refresh the page again and you
    will get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d76eacc-200d-4d26-a56e-6ff6b5e62555.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we get our data back in a much more readable format, which is
    in JSON format. You can see that we have `chain`, which has one item in it – our
    genesis block – and we also have the `pendingTransaction` block. This is pretty
    cool, and we can tell that our `/blockchain` endpoint is working because we get
    our entire blockchain back.
  prefs: []
  type: TYPE_NORMAL
- en: Building the /transaction endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to build our transaction endpoint. Let''s follow
    the below mentioned steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Before we start, please make sure that whenever you are working on our blockchain
    you have your server running. We can do that by running the `npm start` command
    in our terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's head over to our `api.js` file and build our transaction endpoint. First
    of all, take out the example code that we added earlier in the `/transaction`
    endpoint and create a new transaction in our blockchain. To do that, we are going
    to use our `createNewTransaction` method in the `blockchain.js` file that we built
    in [Chapter 2](430b96b1-9a43-402e-9e3a-07bc2b4f514d.xhtml), *Building a Blockchain*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you know, our `createNewTransaction` method takes in three parameters: `amount`,
    `sender`, and `recipient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This method returns the block number or the index that our new transaction
    will be added to. This is all that we need in order to create a transaction, so
    in our `/transaction` endpoint, we are going to add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In our endpoint, we''re going to assume that all of this data is being sent
    in with the `req.body` from whoever is calling this endpoint. The result will
    be saved in `blockIndex`, and that is what we are going to send back to whoever
    calls this endpoint. We will be sending it back as a `note`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the note will tell us which block the transaction will be added
    to. We have used string interpolation to pass the `blockIndex` value. Let's save
    this file and test this endpoint using Postman.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the /transaction endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s head over to Postman and apply settings similar to the ones that
    we set earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e18b623-0efa-4793-8b9d-4588c791ea3c.png)'
  prefs: []
  type: TYPE_IMG
- en: We have selected the POST request, and we are targeting the `/transaction` endpoint.
    In the Body tab, we have checked raw, and the text has been selected to JSON format.
    We have passed in the values for `amount`, `sender`, and `recipient` in the JSON
    object, which will be our `req.body`, and on this object we will send all of our
    transaction data. With the help of `req.body`, which was mentioned in our `/transaction`
    endpoint, we can access the amount, the address of the sender, and the recipient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s test this endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a32bfbbb-8d3d-4490-967c-392cf1ea74d4.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, when we clicked on the Send button on Postman, we got the output
    as Transaction will be added in block 2\. The reason we got block 2 here is that
    one block had already been created when we initiated our blockchain, which created
    the genesis block. Consequently, this transaction got added to block 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'One other way that we can test to make sure that this endpoint worked correctly
    is by hitting our `/blockchain` endpoint. When we hit this endpoint, we should
    expect to get our entire blockchain returned to us. In that blockchain, there
    should be a single block – our genesis block – and there should be one pending transaction,
    which is the transaction that we just created. Let''s head over to the browser
    and go to `localhost:3000/blockchain`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c049edde-9d4e-414e-a974-17a774777378.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the entire object is our whole blockchain – the first part is
    our chain that has the genesis block, and the second part is our pending transaction,
    which we just created. Our `/transaction` endpoint works perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: Building the /mine endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s build the final endpoint for our blockchain API: the mine endpoint,
    this will mine and create a new block:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new block, we are going to use our `createNewBlock` method, which
    we already defined in our `blockchain.js` file. Let''s go to our `api.js` file
    and create a new block inside the `/mine` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This `createNewBlock` method takes in three parameters: `nonce`, `previousBlockHash`,
    and `hash`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have to do calculations to get all these three pieces of data, so let''s
    do that. Let''s start by getting the previous block so that we can get its hash:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have created `lastBlock`, which is the last block in our
    chain – or the previous block to our new block. To get the last block's `hash`,
    we have created `previousBlockHash`. With that, we can now have our `previousBlockHash`,
    which is one of the parameters that we need for our `createNewBlock` method next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s get our `nonce`. To produce a `nonce` for our block, we need to
    generate a `proofOfWork`, which we created in the `blockchain.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `/mine` endpoint, we will add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'So, from our `proofOfWork` method we will get a `nonce` returned to us. let''s save
    that as our `nonce` variable. Our `proofOfWork` method takes in two parameters:
    `previousBlockHash`, which we already have, and `currentBlockData`. Let''s define
    our `currentBlockData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We have our `currentBlockData` as an object, and this consists of the data.
    This data will simply consist of the `transactions` in this block, and also an
    `index`, which is the index of the new block that we are going to create; the
    index of our `lastBlock` plus 1. The `currentBlockData` object is simply going
    to be the `transactions` that are present in this new block and its `index`. With
    this, we can now calculate our `nonce`, as we have with our `previousBlockHash`
    and `currentBlockData`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the final parameter that our `createNewBlock` method has to take in is
    a `hash` of this new block, so let''s calculate that now. To create a hash of
    this new block, we are going to use our `hashBlock` method. We are going to add
    the following line in our `/mine` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As you know, we have already created the `hashBlock` method in the `blockchain.js`
    file. This method accepts three parameters: `previousBlockHash`, `currentBlockData`,
    and `nonce`. We already have all of these parameters, so we are calling it and
    saving the results in a variable called `blockHash`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have all of the parameters that we need to run our `createNewBlock`
    method, so let''s assign those:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What's happening here is pretty awesome. As you can see, there are a lot of
    different calculations that go into creating this new block, and we are able to
    make all of these calculations by using our blockchain data structure. This is
    a pretty powerful data structure, and our blockchain can now mine new blocks by
    using `proofOfWork`, which is similar to how many other blockchains function as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we have created our new block, and all we really have left to
    do is send the response back to whoever mined this block. Next, we will be adding
    the following line in our `/mine` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We are simply sending back a note that says New block mined successfully, as
    well as stating the `newBlock` that we just created. Now, sending back this `newBlock`
    is not going to affect our blockchain in any way. We are sending back the `newBlock` so
    that the person who created or mined this new block knows what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now there is one thing left that we have to do: Every time someone mines a
    new block, they get a reward for creating that new block. All we have to do is
    make a transaction and send the person who mined this new block a little bit of
    bitcoin as their reward. To do that, inside the `/mine` endpoint, we are going
    to create a new transaction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Currently, in 2018, there is a 12.5 bitcoin reward for mining a new block in
    the real bitcoin blockchain. Just to stay consistent with the real bitcoin, we're
    going to make our reward `12.5` bitcoin too. As a sender address, we have put
    the value `00`,. This way, whenever we are looking at transactions on our network,
    we know that if a transaction is made from the address `00`, it is a mining reward.
  prefs: []
  type: TYPE_NORMAL
- en: Now all we need is a recipient's address, `nodeAddress`. We need to send `12.5`
    bitcoins to whoever mined a new block – but how can we find that? Well, we're
    going to be sending this reward to the current node that we are on, which is this
    whole API file that we are working on. We can treat this entire API as a network
    node in the bitcoin blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: In future chapters, we're going to have multiple instances of our API, and they
    are going to act as different network nodes in the big clean blockchain. Right
    now, whenever we hit any of the endpoints we created, we are always only communicating
    with this one network node. However, since we know that all blockchain technology
    is decentralized and hosted across many different network nodes, we are going
    to be creating more network nodes as we proceed further. But for now, our entire
    blockchain is hosted solely on this one network node.
  prefs: []
  type: TYPE_NORMAL
- en: Now, any time we hit the `/mine` endpoint, we want to reward this node for mining
    the new block. To give this node the `12.5` bitcoin reward that it deserves, we
    need an address to send the bitcoin to, so let's create an address for this node
    now.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an address for this node, we are going to import a new library called
    `uuid` using our terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6288cd40-7b48-478d-9e51-c41be1352ef2.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have typed in the `npm i uuid --save` command and hit *Enter*, the
    package will be added. You can start the server again with the `npm start `command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s import our new `uuid` library at the top section of our `api.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have imported version 1 of the `uuid` library. This library creates
    a unique random string for us, and we''re going to use that string as this network
    node''s address. For that, we are going to add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: One thing that we want to alter about the string that we get from this library
    is that there are a couple of dashes present – we don't want any dashes in our
    address. Here, we're simply going to split that string on all of the dashes and
    then rejoin it with an empty string that's been passed in. The `nodeAddress` that
    we are going to get is a random string that is guaranteed to be unique to a very high
    percentage. We really want this string to be unique because we don't want to have
    two nodes with the same address, otherwise we would end up sending bitcoin to
    the wrong people and that wouldn't be good. Now we can simply pass this `nodeAddress`
    variable into our `createNewTransaction` method.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will test our `/mine` endpoint, along with our `/transaction` and
    `/blockchain` endpoints, to make sure that they all work and interact correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to be testing our `/mine` endpoint, along with
    our `/transaction` and `/blockchain` endpoints, to make sure that everything works
    well together.
  prefs: []
  type: TYPE_NORMAL
- en: Before we test, it would be a good idea to take out the `console.log` statement in
    the `proofOfWork` method. This is because having it will just make your program work
    harder, and it will therefore take more time to calculate things.
  prefs: []
  type: TYPE_NORMAL
- en: /mine endpoint testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s test the `/mine` endpoint that we just built in our last section.
    Let''s head over to our browser and hit `localhost:3000/blockchain`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27159860-0515-4ad1-b755-cfc39e6f70dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Right now, we have our entire blockchain, in which the chain has one block in
    it – our genesis block – and we also have no pending transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s open another tab and hit our `/mine` endpoint. This should mine
    and create a new block for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a3c1bae-7c6a-4f15-a9e9-912ee486e2b1.png)'
  prefs: []
  type: TYPE_IMG
- en: We got our note that says New block mined successfully. We also got our new
    block back, and we can see all of the data that's on our block. It has a hash
    in it, and it also has the hash of the previous block, which is the genesis block,
    and one transaction in it. You might be thinking, we didn't create a transaction,
    so where did this transaction come from? This transaction is actually the mining
    reward that we put into our endpoint, which has the `12.5` bitcoin mining reward
    transaction. It looks like our mining endpoint worked well.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the / blockchain endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test and ensure that we did create this new block, we can head back over
    to our `/blockchain` endpoint and refresh the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b973345b-7a12-47b2-9cd6-10a03ce396ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It worked. We now have two blocks in our chain: one is the genesis block and
    the other is the one we just created. The second block also has the transaction
    in it, which has the reward.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s mine another block to test that again. Head over to our `/mine` endpoint
    and refresh it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62c65840-d91e-4324-864e-3b800ce08803.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We just mined another block, which is our third block. We can see that we get
    the `timestamp`, and another transaction, which is the mining reward, and also we
    have the rest of our data. Now let''s head back to our `/blockchain` endpoint
    and refresh it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f551127f-285d-44b3-8f00-52d320304f15.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have all three blocks. Block 3 is the one that we just created,
    and it has our mining reward transaction in it. One more thing to notice is that
    our `previousBlockHash` actually aligns with our block 2's `hash`. This is helping
    to secure our blockchain, which is good.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the /transaction endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create some transactions with our `/transaction` endpoint. For this,
    head over to Postman, make sure that the settings are the same as before, and
    make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9b13fa5-473f-4b01-a561-a5f54f307980.png)'
  prefs: []
  type: TYPE_IMG
- en: We have set the `amount` to `1000` bitcoins. We'll leave the sender and the
    recipient address as they are, but you can change it to whatever you want. Once
    we post to the `/transaction` endpoint, in return we should get the text transaction
    that will be added in block 4, which we did. This transaction got added to block
    4 because we already have three blocks in our chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make another example transaction. Here we will change the `amount` to
    `50` bitcoins, and we will make some changes to the address of the sender and
    the recipient. So when we send this request, we should get the same response: Transaction
    will be added in block 4. This occurs because we haven''t mined a new block yet. Let''s
    try this out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad5f9a4a-5d5f-487f-b92f-8773b8e4ef06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That worked. Now let''s head over and get our entire blockchain again. This
    time, we should expect to get the same blockchain and the two pending transactions
    that we just created. Let''s refresh the page and see the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a56bf39c-d051-43ed-94fd-7b8ecc38ecb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will notice that this has three blocks and two pending transactions. Now,
    if we head over to our `/mine` endpoint and refresh the page, these two pending
    transactions will be added to block 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5584741-a1fa-4161-a36c-2348cca735ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have successfully mined a new block. It''s got our data, and it also has
    three transactions. The first two transactions are the ones we created in Postman,
    and the third one is our mining reward transaction. Now, if we go back to our
    `/blockchain` endpoint and refresh it, we will see that the two pending transactions
    are gone and that they have been added to block 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74d7086d-490a-4234-9463-78585bbd3250.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, block 4 has all three transactions, and our `pendingTransactions`
    is empty now. It worked out well. Now, I would encourage you to create a couple
    more transactions and mine another block just to make sure that everything is
    working properly.
  prefs: []
  type: TYPE_NORMAL
- en: By building this whole API and blockchain and really understanding how the code
    works, it becomes a lot easier to understand how the blockchain technology actually
    works, and you also realize that a lot of it isn't actually so complicated.
  prefs: []
  type: TYPE_NORMAL
- en: At any point while you are testing these endpoints, if you make changes to a
    file and save it, then the server will restart. This will result in a new instance
    of blockchain, which means that everything you have created so far will be cleared
    out.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up Express.js in our project, as well
    as how to use it to build our API/Server. Then we installed Postman and understood
    how to use it to test our endpoints. After this, we moved on to build various
    endpoints of our server and tested those to verify whether or not they were working
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be creating a network of nodes or a decentralized
    network to host our blockchain, just like the ones that are hosted in the real
    world.
  prefs: []
  type: TYPE_NORMAL
