- en: Chapter 7. Graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can have the perfectly working script, but there is no game when there
    is nothing to see. Graphics are important and here we will look into how to get
    them and implement them in ImpactJS. In this chapter you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: The types of graphics present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you should consider while deciding whether to make or buy them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make vector graphics using the free tool, Inkscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to turn reality into a game with the use of Adobe Photoshop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Game graphics have been evolving since the start of digital gaming. Take a
    quick peek at Spacewar! and its arcade version, Computer Space, Pong, Gun fight,
    and many other games from ancient times. The first thing you will notice is not
    the difference in gameplay but the lack of graphical splendor. The development
    of faster computers and dedicated graphical processors has made games increasingly
    pretty to look at. There was certainly a general trend towards more realism: how
    much can we make a game look like a real-life one without burning our processors
    to a crisp? It''s a bit like what happened with paintings in general. Painters
    tended to strive towards more detail, a better approximation of what you would
    see in real life. It was a challenge to do, until they started using optical lenses
    to reflect an image directly to the canvas. All they then had to do was trace
    and color it. Artists started looking at new ways to express themselves on a canvas
    since perfection was not a guarantee for success any longer. Centuries after graphical
    perfection was reached, the world saw paintings like Pablo Picasso''s Guernica
    and the Scream of Edvard Munch. Neither of these is even close to reaching perfect
    realism; they both have something to intrigue people though.'
  prefs: []
  type: TYPE_NORMAL
- en: Something similar seems to be happening in the gaming world. Recent games have
    proven we can come terrifyingly close to realism, and some game developers have
    begun looking for more original looks. For example, Nintendo has never strived
    to come close to delivering realistic graphics, yet their skill in producing great
    games is revered all over the world. This is because they understand that stirring
    up a certain feeling in the player is more important than showing the same thing
    a player would see by looking away from their screen.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at Yoshi's Island, a game released for Super Nintendo in 1995\.
    The depicted scenery here is far from realistic. Yet, just playing it for 10 minutes
    fills you with a feeling of joy. Everything looks so happy and sparkling, with
    bright and happy colors. When they don't intend to kill you, animals and even
    clouds smile at you with a sincere cheerfulness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Zelda: The Wind Waker, released in 2003, was one of the first big games using
    cell-shaded graphics. Cell-shaded or toon-shaded graphics appear as if they are
    hand drawn. Cell shading has been used by quite a number of other very successful
    games like Borderlands and Okami.'
  prefs: []
  type: TYPE_NORMAL
- en: The previous examples were 3D games, but the very fact you are now reading this
    is proof that making a game is not about graphics alone. Many years ago, games
    made the transition from 2D to 3D with great success. Even our beloved flat-lander
    Mario was able to make its transition splendidly. 3D games are generally regarded
    as being more pleasant to look at than 2D games. Yet, here you are, preparing
    yourself to make a 2D game. It is proof that nice graphics are important to convey
    a certain feeling, but conveying this is possible in any form you wish, like art
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Making/buying the graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Do we need to buy or make our own graphics while making a game? We are lucky
    to at least have a choice in this. For 3D games the option for making graphics
    yourself is often restricted by the size of your development team. With 2D games,
    the option of doing it all on your own remains a realistic one. If you have no
    budget for buying sprites and tilesets, you have three major options for creating
    your graphics:'
  prefs: []
  type: TYPE_NORMAL
- en: Pixel art
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector art
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating reality using Photoshop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Of these three options, drawing your characters and scenery yourself pixel
    by pixel is the most ambitious one. Great artists can get really nice results
    with this, but even the most experienced pixel artist will spend several hours
    on just a few characters and tilesets. There are several tools out there to help
    you transfer your own drawing skill to the PC, such as the digital drawing pen
    and software: Adobe Photoshop or it''s free counterpart GIMP. If you have no experience
    in drawing in general and don''t feel a strong urge to commit yourself to this
    in any way, then simply don''t.'
  prefs: []
  type: TYPE_NORMAL
- en: The second option is vector graphic design. Vector graphics differ from pixel
    art in that drawings are built up with lines and basic forms, not individual dots.
    These lines and forms are freely scalable to both higher and lower resolutions,
    whereas for pixel art, this can be very difficult. Building up drawings from basic
    forms such as the rectangle, circle, and lines require a different kind of insight
    than regular drawing does. The prerequisite to making graphics is basically transferred
    from needing a steady hand to having an analytical view on objects and life forms.
    Take the birds from Angry Birds as an example. Their basic form is a circle with
    circular eyes placed in the center. Their beaks are somewhat rounded triangles
    and their eyebrows and tails are nothing more than a collection of rectangles.
    If you look at these angry birds from this more analytical point of view, it becomes
    easier to draw one yourself. If you feel you have that somewhat analytical insight,
    even if your drawing skills are only average, you can make your own tilesets if
    you put in enough effort. In this chapter there will be a short introduction on
    how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: The last option is more of a quick fix. By taking pictures of objects and turning
    those into tilesets, you can quickly have some graphics at your disposal. While
    getting close to a realistic scene is very difficult for 3D games, it's actually
    the easiest way to go in 2D games. The main problem here of course is the fact
    that you cannot distinguish yourself easily from competitors if you use adjusted
    pictures, which is a real drawback while marketing your game. Nevertheless, the
    graphics look nice and it's a quick and cheap way to get them.
  prefs: []
  type: TYPE_NORMAL
- en: Where to buy graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though 2D games are quite common, there are not many companies out there
    that are specialized in supplying tilesets to hobby game developers. Most game
    artists either work for the game company itself or work on a custom basis, which
    often becomes too expensive for someone developing games in his or her free time.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are a few affordable 2D game graphic producers out there, for
    example, [www.sprites4games.com](http://www.sprites4games.com). They have some
    free sprites available but they are especially praised for their beautiful yet
    affordable custom work
  prefs: []
  type: TYPE_NORMAL
- en: 'While downloading free tilesets from random web pages, there are two main issues:'
  prefs: []
  type: TYPE_NORMAL
- en: The tilesets are very incomplete, so they don't actually allow you to create
    an entire game out of them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other problem with free tilesets is that they are not actually free. They
    are often ripped from an existing game and reusing them is illegal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, on [www.spritedatabase.net](http://www.spritedatabase.net), you
    can download the tilesets of entire games. But using them for actually publishing
    your own game will probably result in getting sued for copyright violation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes you can also find tilesets on the bigger art and photo websites,
    such as [www.shutterstock.com](http://www.shutterstock.com). The problem here
    is clutter; it''s difficult to find actual game graphics between all those other
    pictures. If you finally found some, you face the same problem as with the free
    ones: incompleteness. You can, at that point, contact the artist and request some
    more graphics but then it becomes custom work again, which can often become rather
    expensive.'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to vector graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have taken a look at our different options, let''s dive a little
    deeper into one of them: creating our own vector graphics. There are several interesting
    tools out there to help you with this. Adobe Illustrator is one of the best on
    the market. However, here we will use a somewhat less advanced but free tool:
    Inkscape. You can download Inkscape on their website: [www.inkscape.org/download/](http://
    www.inkscape.org/download/).'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have installed Inkscape on our computer, we can go ahead and make ourselves
    a robot character.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to draw yourself a character or an object. The true
    artists do so using the pen tool as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a very versatile drawing tool, which enables you to draw both straight
    lines and the most perfect symmetrical curves. However, in this short beginner
    tutorial, we will limit ourselves to using basic forms such as rectangles and
    circles to construct our small robot, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is effectively going to be a small robot since we will want it to be of
    the same size as the characters we have been using: 48 x 32 pixels. Even though
    vector graphics are scalable, it is still best to work on the scale you are going
    to use them in. While working with these small resolutions, it also makes sense
    to actually see which pixels you are going to fill. You can do this by turning
    on the **Grid** option under the **View** tab. Also, you will need to switch between
    a zoomed-in picture and its actual size; this way you will keep a sight on how
    much detail you are actually going to put in the game. Zooming in and out can
    be done using the *Ctrl* key and the scroll wheel of the mouse; also, the shortcut
    to see everything on a 1:1 scale is simply achieved by pressing the *1* key on
    your keyboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we take a look at the robot we want to build, something important can
    be noticed: the head is blown out of proportion. Normally, a human head would
    be between one-eighth or one-seventh the size of the human body. When drawing
    for a low resolution, it is a good idea for the head to be about one-third to
    one half the size of the body. It''s very unrealistic but at least you will be
    able to see some facial features, such as the eyes and mouth. This big-headed
    style is called Chibi, which means a *short person* in Japanese; it''s ideal for
    small animations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first have a look at the basic forms that we will need. This seems to
    be not much more than a few rectangles (both rounded and regular ones) and two
    ellipses for the eyes, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A rectangle''s corners can be easily rounded by selecting the normal rectangle
    and changing the radius of its corners with the help of the panel shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'An ellipse is nothing more than a stretched out circle. You can stretch any
    form in any direction and rotate or skew it if necessary, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While working with vector graphics, it is best to have different layers in order
    to cope with different animations. For example, if we want our robot to walk,
    we will need its one arm and leg to stick out, and then its other arm and leg.
    Putting the body and the arms and legs in separate layers makes sense from an
    animation point of view. The body's formation does not change when moving, while
    the limb's formation does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our basic forms, let''s focus on colors. While working on
    low resolution, it''s best to get a big contrast going. You can do this by either
    having a color close to white and one close to black, thereby playing with brightness.
    Alternatively, you can choose to work with two complimentary colors. Two colors
    are compliments when they are each other''s opposite, resulting in the biggest
    contrast when put next to each other. So when picking colors, it''s useful to
    bring in the color wheel. Colors on opposite sides of each other in this wheel
    are considered complimentary colors. For example, the compliment of yellow is
    purple, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our robot is going to be gray and black. In order to color it we just need to
    right-click our mouse button on each of the elements, select **Fill and stroke**,
    and fill it with the color we like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition, we can give our robot a small extra detail in his eyes by switching
    our circles to an incomplete arc, using the panel shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our robot now has a recognizable form and even has this small eye detail. The
    problem with these details is that they will not always be visible when actually
    playing your game, as shown in the minimized form of our robot character in the
    following diagram; finding the right amount of detail can be tricky.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can add the antenna on his head as shown in the following diagram, and although
    it's small, it will still be recognizable; ultimately this is what you need to
    take into account for every detail you add. Let's introduce a little bit of shadow
    to the drawing shown in the following diagram of the character. We can do this
    by changing the fill to a gradient pattern instead of an even fill.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition, by adding some extra forms with these gradient shadow patterns,
    we can make the design look even more realistic. As an exercise, you could add
    your own animation for when the character is idling. For instance, a person would
    inhale and exhale, making his or her chest go up and down. To portray this, you
    can add one extra image, making the game feel even more alive. Eventually, we
    end up with our final robot. Teaching it how to walk is then a matter of putting
    the best foot forward, followed by the other one of course. If you work in a single
    layer, it can be done by bringing a leg and arm to the front by selecting them
    and pressing the *Home* key. Pressing the *End* key will position the selected
    arm behind the other forms. Alternatively, you can use the **Object** menu to
    achieve the same thing. Ideally though, you would want to work with different
    layers, since this makes life a lot easier. However, we won't go into that level
    of detail here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to vector graphics](img/4568_7_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The robot looks as if he is going to leave his little picture and come right
    towards you, as shown in the previous diagram. To get a full character you will
    need to do the same for at least one profile view and its back. This can be done
    quickly once you are experienced in doing so. However, there is a quicker way
    to get graphics. Though, you will probably only want to use them as placeholders
    until a drawing is ready, it's still a nice option. This option is using Adobe
    Photoshop for real life pictures.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own avatar using Adobe Photoshop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ever dreamt of having yourself walk about in your own game? Well, now you can!
    All you need is a camera and a tool similar to Adobe Photoshop. While we will
    use Adobe Photoshop, there are plenty of free replacements out there that will
    do the trick just fine. Even the browser solutions are quite decent. Pixlr is
    a good example of this. It can be found at [www.pixlr.com](http://www.pixlr.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have to start off with a bunch of pictures taken from all relevant
    directions. It will be best to take them in front of an evenly colored screen;
    a simple white blanket or wall will be fine too. If your background is easy to
    distinguish from the person you would like to capture, subtracting him or her
    from the picture will be easier. We can do this with the quick selection tool
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your own avatar using Adobe Photoshop](img/4568_7_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After separating the person from the background, we can simply put the picture
    in a new file with a transparent background and even add some effects to it in
    order to give it a more surreal touch, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your own avatar using Adobe Photoshop](img/4568_7_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Don't restrict yourself to what Adobe Photoshop has to offer. There are good
    websites out there that can transform your picture in ways you can barely fathom.
    One such websites is [www.befunky.com](http:// www.befunky.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have the option to unleash the cartoonizer effect on our picture, rendering
    the person virtually unrecognizable while it produces this nice cell-shaded style,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your own avatar using Adobe Photoshop](img/4568_7_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will have to repeat this process for all your pictures, which can be quite
    time consuming. However, it will be done much more quickly than actually drawing
    them yourself. Also remember, passive objects only need one picture. The game
    characters, needing actual animation sheets, represent most of the workload.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our individual sprites, let's take a look at the animation
    sheet itself. If you don't have the necessary suitable pictures of yourself, now
    is the time to go and let someone take a few pictures of you posing in front of
    a white wall. There is something peculiarly odd about seeing yourself inside a
    video game, so try it out.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your creation to the RPG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get from your individual sprites to a fully fledged animation sheet,
    all that needs to be done is to order them nicely in a single file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding your creation to the RPG](img/4568_7_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before getting into this, you will need to think about how big you need your
    images to be. In this example they are 32 x 96 pixels in size. In the earlier
    chapters, we had characters that were 32 x 48 pixels in size. Having drawings
    that are less stretched than our current example is preferable, since they will
    allow easier gameplay. It is much easier to maneuver a character with the dimensions
    of a circle or square than one that is long and thin. However, in this case our
    test person is long and skinny and we would like to keep him that way.
  prefs: []
  type: TYPE_NORMAL
- en: Actually arranging the pictures on a single animation sheet is a work of precision,
    so it is recommended to work with the picture's coordinates. Adobe Fireworks allows
    very intuitive handling when it comes to arranging drawings by setting their coordinates.
    Any picture program should do the trick though; you could even do this in MS Paint.
    There are other options out there of course. A spritesheet generator would make
    arranging sprites and saving them as a tileset considerably easier. You also have
    the option of using some JavaScript arranging code in Fireworks to automate the
    positioning process. However, there will be no elaboration on these topics here.
  prefs: []
  type: TYPE_NORMAL
- en: When you are finally done setting up your own sheet, it is time to introduce
    it into your game. Save the file as `player.png` and replace the code and sheet
    in one of the previous chapters of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Our animation sequence is pretty short. For each of the perspectives, we switch
    between standing still and moving either the right or left leg forward. The sheet
    could have been even smaller if we had a perfectly symmetrical character. We would
    then only need the animation for either walking to the left or the right and get
    the other animation by flipping the image as seen in an earlier chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Hints for graphics in HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To end this chapter, let''s go over a few pointers for using graphics in HTML5:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to keep your animation sheets as small as possible. There is no need to
    duplicate certain sprites; the animation sequence allows the same sprite to be
    addressed multiple times if necessary. It's also good to know there are image
    size limits that differ for every browser, though you would have to be rather
    sloppy to reach this limit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a file format that supports transparent backgrounds. A PNG file will do
    the trick. JPG is not capable of saving a background as transparent and will instead
    interpret it as being solid white.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to work with symmetrical figures where possible. This way you can flip the
    image to make a character walk from left to right and vice versa with the same
    images. It also reduces the number of sprites you need and thus the effort to
    make them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using background maps in ImpactJS, it can be useful to prerender them.
    A background map differs from a regular level layer in the way it is drawn by
    a code array you supply in your scripts instead of the standard JSON-coded level
    files. This way it is possible to set up recurring backgrounds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Prerendering the background will make the system create chunks, which are a
    collection of tiles. Choosing to prerender will require more RAM since larger
    pieces need to be kept in memory but will speed up the drawing process; this way
    there is less taxation on the device''s processor. Knowing that you have this
    option and depending on whether you think RAM or processing power will be the
    bottleneck, you can choose to either prerender your background or not by use of
    the ImpactJS `.prerender` property. In addition you can set the chunk size to
    fine-tune the balance between the two resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Graphics are an important element of any game as they are the visualization
    of everything your game represents. Though there has certainly been a trend towards
    more realistic graphics in games, it is not absolutely required for a good game
    experience. We talked about whether you should make or buy your graphics and where
    you can buy custom graphics at an affordable price. We distinguished three important
    options if you decide to create your own graphics: pixel graphics, vector graphics,
    and using Adobe Photoshop reality. Skipping the first option, we took a quick
    look at how to develop vector graphics with Inkscape and add yourself to your
    game using Adobe Photoshop. The chapter ended with some hints on working with
    graphics in the game. In the next chapter, it''s finally time to show our game
    to the world as we get to deploy it to several distribution channels ranging from
    a regular website to Google Play.'
  prefs: []
  type: TYPE_NORMAL
