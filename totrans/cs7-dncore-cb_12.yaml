- en: Choosing and Using a Source Control Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Source control is an essential part of every developer''s toolkit. It doesn''t
    matter whether you are a hobbyist or professional programmer, when you get up
    from your desk to go home, you better be sure your code is safe. In this chapter,
    we will be looking at choosing and using a source control strategy. Some of the
    topics we will be taking a look at are:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Visual Studio account management and determining which source control
    solution is best for you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Visual Studio GitHub integration, checking in code for the first
    time, and checking in changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working as a team using GitHub, handling and resolving conflicts in code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During my career, I used Visual SourceSafe, SVN, VSTS, Bitbucket, and GitHub.
    It really does not matter how you approach it, the important thing is that you
    keep your source code safe and versioned. When I first started working with source
    control, the company I worked at used Visual SourceSafe. If you are unfamiliar
    with the software, just Google it. You will see results come back containing words
    such as hate, unpleasant, bad, and Microsoft's source destruction system. You
    get the point.
  prefs: []
  type: TYPE_NORMAL
- en: We had an employee leave files exclusively checked out to him, after he resigned
    and emigrated to another country. I'm beginning to wonder if the company policy
    to enforce the use of SourceSafe wasn't the reason he emigrated. But jokes apart,
    it gave us endless problems. Slap SourceSafe on a large project, and you could
    end up with a disaster. These days, however, developers have excellent choices
    available to them.
  prefs: []
  type: TYPE_NORMAL
- en: The two that stand out are obviously Microsoft Team Services and GitHub. Both
    have a free tier, but the decision of using one over the other depends entirely
    on your unique situation.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Visual Studio account management and determining which source control
    solution is best for you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio allows developers to create an account and sign in. This is particularly
    beneficial if you hot desk often or work in multiple locations on different machines
    (think work and home PCs), because Visual Studio will then automatically sync
    your settings between the machines you're signed in to.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will assume that you have just completed installing Visual Studio
    2017 on your machine. It doesn't matter whether you have installed the trial or
    licensed version of Visual Studio 2017.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installation completes, open up Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top right of Visual Studio, you will see that there is a Sign in link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Sign in link, you will be allowed to enter your e-mail address
    here. I find it useful to just use my Outlook e-mail address. In my opinion, it
    is one of the best web e-mails available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that I'm not endorsing Outlook for any other reason other than I really
    think it is a great product. I also have a Gmail account as well as an iCloud
    e-mail account.
  prefs: []
  type: TYPE_NORMAL
- en: After adding your e-mail account, Visual Studio will redirect you to a sign
    in page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because I already have an Outlook account, Visual Studio simply allows me to
    sign in with it. If, however, you need to create an account, you can do so from
    the sign up link on the Sign in to Visual Studio form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_02-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visual Studio will now redirect you to a sign up page where you can go and
    create an account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After your account is created, you will be prompted to return to Visual Studio
    to sign in. After you have signed in, Visual Studio will display your details
    in the right-hand corner of the IDE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the down arrow next to your account name, you can view your Account
    settings....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will show you a summary of your account, from where you can further personalize
    your account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_06.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The choice of source control is a topic every developer has a strong opinion
    about. Unfortunately, if you work for a boss, that decision might not even be
    up to you. Many companies have already set up their source control system just
    the way they like it, and you will need to fall in with company procedure. That
    is just the way it is. It is, however, good to know about the options available
    to you as an indie developer.
  prefs: []
  type: TYPE_NORMAL
- en: All good developers should be writing code in their own time too. You are not
    only a developer while you sit at work. We eat, breathe, sleep, and live code.
    It is part of who and what we are. I will say that in order for you to become
    better at your job as a developer, you must play with code in your own time. Start
    a pet project, get some friends together, and decide to write some software together.
    Not only will this make you all better at what you do, but you will learn a lot
    from each other.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a remote developer who does not commute to and work in an office
    every day, you can still connect with the developer community. There are so many
    resources available to developers, and the developer community is more than happy
    to rally around newbies and help them grow. Starting a solo or pet project is
    useless if you don't commit (pun intended) to keeping your code safe. To do this,
    you don't have to pay a single dollar either. **Visual Studio Online** (now called
    **Team Services**) and GitHub provide developers with a fantastic platform to
    keep your code safe.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by looking at Team Services. The site can be found by pointing your
    browser to [https://www.visualstudio.com/team-services/](https://www.visualstudio.com/team-services/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you will see that Microsoft has given developers a fantastic opportunity
    to use Team Services. It is absolutely free for up to five users. This means that
    you and your mates can collaboratively work on the next big thing while ensuring
    that your code remains secure. Signing up is as simple as clicking on the Get
    started for free link:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For information on pricing, visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.visualstudio.com/team-services/pricing/](https://www.visualstudio.com/team-services/pricing/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second excellent option is GitHub. It differs slightly in its free offering
    by requiring developers to use a public repository on the free account. If you
    don''t mind your code being essentially open source, then GitHub is a great choice.
    With GitHub though, you can have unlimited collaborators and public repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For information on pricing, visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/pricing](https://github.com/pricing)'
  prefs: []
  type: TYPE_NORMAL
- en: The choice of source control essentially comes down to the openness of your
    code. If you can afford to let other developers see and download your code, then
    GitHub is a great choice. If you need your code to remain private and only shared
    between specific people, then a paid GitHub account will suit you better. If you
    don't want to fork out money yet, then Team Services will be your best bet.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Visual Studio GitHub integration, checking in code for the first
    time, and checking in changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub has been a tour de force for so many years. There are developers that
    swear by it. In fact, it is the default option when using Apple's Xcode IDE. For
    whatever reason you decide to use GitHub, rest assured that you and your code
    are in good hands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipe will assume that you have already signed up for GitHub
    and that you have enabled Two-factor authentication. If you have not signed up
    for a GitHub account, you can do so by going to [https://github.com/](https://github.com/)Â and
    creating a new account. To enable Two-factor authentication on your GitHub account
    (something I personally strongly advise), do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the down arrow next to your profile image, and select Settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Personal settings menu that appears on the left of the next web page,
    select Security:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_08.png)'
  prefs: []
  type: TYPE_IMG
- en: The first section on the security page will be your Two-factor authentication
    status. To get started with setting it up, click on the Set up two-factor authentication
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be presented with a brief overview of what Two-factor authentication
    is and you will be given the choice of Set up using an app (which I recommend)
    or Set up using SMS. Using an app is by far the easiest, and if you have a smartphone
    or tablet, you can download an authenticator application from the applicable app
    store. From there on, follow the prompts that GitHub give you to complete the
    Two-factor authentication setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have completed the setup, your Two-factor authentication will be switched
    on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_09.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the GitHub extension to Visual Studio is easily done by downloading
    the visx from the following link and installing it: [https://visualstudio.github.com/downloads/GitHub.VisualStudio.vsix](https://visualstudio.github.com/downloads/GitHub.VisualStudio.vsix).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming that you have an existing application you want to add to GitHub, the
    process of adding it to a new repository is quite simple. I have simply created
    a console application with nothing but the template code, but you can add any
    project type and size to GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the View menu in Visual Studio 2017, select the Team Explorer option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with two options under the Hosted Service Providers section.
    For now, we will select GitHub and, seeing as we already have an account, we will
    click on Connect...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will now be presented with the GitHub login page. You are also offered
    the chance to sign up from here if you do not have an existing GitHub account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Because I have Two-factor authentication set up on my GitHub account, I am
    prompted to use my authenticator application to enter the generated authentication
    code and authenticate myself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have been authenticated, you will return to the Manage Connections
    screen. If your project isn''t displayed under the Local Git Repositories, you
    can add it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will want to click on the Home icon, which is a picture of a little
    house at the top of the Team Explorer window. From the Home screen, click on the
    Sync button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_14.png)'
  prefs: []
  type: TYPE_IMG
- en: This will display the Publish window to you. Under GitHub, click on the Publish
    to GitHubÂ button. This is going to publish your project to a new repository on
    GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember, if you are using the free GitHub, all your repositories are public.
    If you are writing code that can't be made public (is not open source), then sign
    up for one of the paid GitHub accounts that include private repositories.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_13_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'GitHub will then prompt you to add in the details for this publish. Because
    you connected to GitHub earlier, your username will already be selected in the
    drop-down menu. When you are ready, click on Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the project has been published to GitHub, you will automatically be returned
    to the Home screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at your GitHub account online, you will see that the project has been
    added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_18.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's go and make some changes to the `GitHubDemo`Â application. Just go
    ahead and add a new class to your project. I called mine `NewClass.cs`, but you
    can call yours whatever you like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that as soon as a change is made to your project, that the
    solution will mark the changed items with a red tick. Your class is marked with
    a green plus sign:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_19.png)'
  prefs: []
  type: TYPE_IMG
- en: To add the changes to your GitHub repository, you can follow two routes. The
    first option is to go to the Team Explorer - Home window and click on the Changes
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second (and in my opinion more convenient) option, is to right-click the
    solution in Solution Explorer and click on the Commit... menu item from the context
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GitHub might ask you for your user information the first time you perform a
    commit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before you are allowed to commit your changes, you must fill in the required
    commit message. In a real team project, be as descriptive as possible in your
    commit message. Consider using task item code (or backlog codes) to uniquely identify
    the code being added. This will save your (or another developer''s) bacon sometime
    in the future, I guarantee it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One important thing to note is that you have three commit options available
    to you if you click on the down arrow next to the Commit All button. The Commit
    All button will just record the changes you make on your local machine. In other
    words, the change will not be reflected in the remote repository. The Commit All
    and Push button will record the changes on your local machine and push those changes
    to your remote GitHub repository. The Commit All and Sync button will record the
    changes on your local machine, then it will pull any changes from the remote repository,
    and finally it will do the push. You will want to do this if you are working in
    a team. For this recipe, however, I will just do a Commit All and Push, seeing
    as I am the only developer working on this repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the commit has completed, the Team Explorer - Synchronization window will
    notify you of the successful commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Heading over to GitHub online, you will see the newly pushed changes reflected
    in your GitHub repository, along with the commit message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_23.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub is a fantastic source control solution for any developer. Consider creating
    an open source project. It is more beneficial than you might imagine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More and more these days, prospective employers are reviewing developers' GitHub
    repos when considering applicants for developer positions. Keep that in mind,
    because a GitHub repo is a resume in itself.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The free GitHub account allows you to create public repositories. This means
    that anyone is able to search for, view, and clone your project from GitHub to
    their own desktop. This is the central idea behind GitHub. This is obviously a
    key factor for indie developers and corporates that don't want to spend money.
    Corporates can afford it more than an indie developer, but I think that some companies
    prefer to roll their own, rather than use a service provider hosted in the cloud
    somewhere. This means that they prefer to keep the source control under their
    control by setting up a source control system on their own corporate servers.
    Having GitHub as an option for indie developers is an awesome solution. For those
    that require private repos, the fee isn't a stumbling block either.
  prefs: []
  type: TYPE_NORMAL
- en: Working as a team using GitHub, handling and resolving conflicts in code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub and Team Services really come into their own when working in teams. The
    effect of collaborative effort is quite powerful. Sometimes though, it can be
    a bit challenging. Let us have a look at using GitHub to work in a team setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using the existing `GitHubDemo`Â app checked in to GitHub. Let's assume
    that a new developer (let's call him John) has joined the team. Before you can
    let himÂ push code to your branch, you need to add him as a collaborator. To do
    this, log in to GitHub and click on the Settings tab in your `GitHubDemo` repository.
    Click on Collaborators in the menu to the left.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then search for collaborators to add by entering their GitHub username,
    full name, or e-mail address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_13_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you are done, click on the Add collaborator button to add JohnÂ as a collaborator
    to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_13_25.png)'
  prefs: []
  type: TYPE_IMG
- en: John will receive an e-mail and will first need to respond to your invitation
    to collaborate.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_13_26.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: John goes about setting up his Visual Studio environment, including getting
    connected to GitHub, by clicking on Team in the menu and clicking on Manage Connections....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: He logs in to GitHub with his e-mail address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take note that if you have just signed up to GitHub, you will need to click
    on the verification e-mail sent to the e-mail address you specified when signing
    up. Without verifying your e-mail address, you will not be able to log in from
    Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'After connecting, John sees his GitHub details loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'He now wants to work on the `GitHubDemo`Â applicationÂ and finds it on GitHub
    by searching for it by name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'He now copies the URL from the Clone withÂ HTTPS textbox from the Clone or download
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in Visual Studio, John expands the Local Git Repositories and clicks on
    Clone. He pastes the copied URL to the Git Repository path and specifies where
    the code should be cloned to on his hard drive. He thenÂ clicks on Clone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_29.png)'
  prefs: []
  type: TYPE_IMG
- en: When the code is cloned, it will be in the folder path John specified earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Time to make some changes to the code. He opensÂ the project in Visual Studio
    as normal. John decides to work on the `NewClass`Â class and adds a new function
    that returns a countdown integer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_30-1.png)'
  prefs: []
  type: TYPE_IMG
- en: After the code change is complete, John prepares to commit the code he just
    added to the `GitHubDemo` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding a commit message, he then clicks on Commit All and Sync.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One important thing to note is that you have three commit options available
    to you if you click on the down arrow next to the Commit All button. This button
    will just record the changes you make on your local machine. In other words, the
    change will not be reflected in the remote repository. The Commit All and Push
    button will record the changes on your local machine and push those changes to
    your remote GitHub repository. The Commit All and Sync button will record the
    changes on your local machine, then it will pull any changes from the remote repository,
    and finally it will do the push.
  prefs: []
  type: TYPE_NORMAL
- en: 'John''s changes are committed to the GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other side of the office, I am working on the same bit of code. The
    only problem is that I have added the same method with my own implementation of
    the `CountDown` logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I get ready and commit my changes to GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_33.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub immediately prevents me from doing this. This is because if my code is
    pushed, the earlier commit by John will be lost. GitHub has a great help file
    on the subject in GitHub Help atÂ [https://help.github.com/articles/dealing-with-non-fast-forward-errors/](https://help.github.com/articles/dealing-with-non-fast-forward-errors/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Output window contains a more descriptive error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '<q>Error encountered while pushing to the remote repository: rejected Updates
    were rejected because the remote contains work that you do not have locally. This
    is usually caused by another repository pushing to the same ref. You may want
    to first integrate the remote changes before pushing again.</q>'
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve this, click on Pull to get the latest commit that John did. Your
    code will then be in a conflicted state. This sounds bad, but it isn''t. It is
    putting you in control of the decision on which code will be used. You can see
    that the pull shows that there are conflicted files and also the incoming commit
    message that John added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the conflicts, click on the Resolve the conflicts link in the message
    pop-up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then see the Resolve Conflicts screen listing the conflicted files.
    Clicking on a file will expand it into a short summary and action options screen.
    It is always prudent to click on the Compare Files link to see the difference
    between the files in conflict:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The differences in code are immediately evident. The process you follow from
    here on is subject to how you work together as a team. Usually, the conflict can
    be quite complex and it is always a good idea to speak to the developer concerned
    about the way forward:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, John and I decided that his code was better and more concise.
    So the decision was made to simply click on Take Remote and use John''s code.
    When you have clicked on the link, you need to click on Commit Merge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding a commit message, you can then push your code to the repo. In
    this case, I simply replaced all my code with John''s, but there might be situations
    when you will be using some of your code and some of another developer''s code.
    GitHub allows us to easily handle these conflicts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After pushing the code to the remote, GitHub notifies you that the code has
    successfully been synchronized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_13_41.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub takes the pain out of committing, resolving conflicts, and merging code.
    It is, without a doubt, an essential tool in any developer's toolkit and essential
    for development teams. Even if you are not using it professionally, it's a great
    idea to create a repo for yourself. Start using it to check on the pet projects
    you work on after hours. Expanding your knowledge beyond what you work with on
    a day-to-day basis will make you a betterÂ developer.
  prefs: []
  type: TYPE_NORMAL
