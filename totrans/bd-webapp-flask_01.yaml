- en: Chapter 1. Flask in a Flask, I Mean, Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Flask? It's a question that humanity has been pondering for millennia...
    well, actually, since 2010, when Armin Ronacher first committed to the project.
    Flask is a Web framework and is quite different from what most people are used
    to working with. It is less presumptuous about how your application should look
    or what you should use to make it available. The BSD licensed package has all
    this!
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Flask and its features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Flask framework is actually a glue, a very nice one, that sticks together
    the amazing Werkzeug and Jinja2 frameworks, responsible for answering requests
    and presenting the output (HTML, maybe). In the MVC architecture, also known as
    Model-View-Controller, Flask covers C and V. But where is M? Flask does not provide
    you with an integrated model layer out-of-the-box as that is not actually needed
    for a web application. If you do need to work with a database, just pick your
    database solution from the many available and create your own model layer, which
    is not hard, and be happy! The concept of a micro-framework, with good intentions
    and made just for Flask, is all about giving you the the smallest (but also the
    most useful) feature set you need, and one that won't get in the way.
  prefs: []
  type: TYPE_NORMAL
- en: Just what are the features that must be in the framework?
  prefs: []
  type: TYPE_NORMAL
- en: A development server and debugger (sanity-friendly)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unicode support (Latin language-friendly)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WSGI compliance (uWsgi-friendly)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A unit-test client client (code with quality)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL routing (it brings tears to my eyes, it's so beautiful!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request dispatching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure cookies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jinja2 templates (tags, filters, macros, and more)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that much, you can handle Ajax requests, browser requests, and user sessions
    between requests; route HTTP requests to your controllers; evaluate form data;
    respond to HTML and JSON; and so on.
  prefs: []
  type: TYPE_NORMAL
- en: That is nice, but is Flask not an MVC framework? Well, that's arguable. If a
    web framework does not implement an MVC antipattern, such as handling requests
    in the view or mixing models and controllers, it could potentially facilitate
    an MVC, which, in my opinion, is as good as it gets because it does not enforce
    your application structure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flask is not an MVC framework as it does not implement the model layer, although
    it does not restrict you in any way if you wish to create your own.
  prefs: []
  type: TYPE_NORMAL
- en: If you need a simple, single-file web application that receives a form and gives
    back an answer, HTML or not, Flask will help you with that, easily. If you need
    a multilayer, high-depth modularized Facebook clone, Flask can also be there for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: So, what did we learn so far?
  prefs: []
  type: TYPE_NORMAL
- en: Flask was born in 2010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flask is a minimalistic web framework based on Jinja2 and Werkzeug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flask does not enforce a specific project architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to Flask license details at [http://flask.pocoo.org/docs/0.10/license/](http://flask.pocoo.org/docs/0.10/license/).
  prefs: []
  type: TYPE_NORMAL
- en: Right now, you might be wondering which of your neat project ideas could be
    done with Flask. That's the spirit! What about thinking together on this one?
  prefs: []
  type: TYPE_NORMAL
- en: Flask does not come with bundled functionality in terms of database integration,
    a forms library, administration interface, or migration tools. You can have these
    through extensions, which will be discussed soon enough, but they are all external
    to Flask. If you need these extensions right at the beginning of your project
    and you don't want to set it up (or can't spare the time to), you might do better
    with a full-fledged MVC all-in one, low-cohesive, and high-coupling framework
    such as Django.
  prefs: []
  type: TYPE_NORMAL
- en: Now, imagine you need to build a website with a single form, such as a [http://cashcash.cc/](http://cashcash.cc/)
    clone, which receives a form and returns the current currency trade values; Flask
    could help conclude your project really fast.
  prefs: []
  type: TYPE_NORMAL
- en: Let's think further. What if you need a specific set of libraries to work together
    in your project and you don't want the web framework getting in the way; that's
    another very good scenario for Flask as it gives you the bare minimum and lets
    you put together everything else you may need. Some frameworks have such a high
    level of coupling (read **dependency**) on their own components that you may have
    a serious problem if you want to use a specific alternative.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you may want to use a NoSQL database in your project; however,
    if you do so, some components of your project may stop working (for example: an
    administrative component).'
  prefs: []
  type: TYPE_NORMAL
- en: Basically, if you have the time to spare, if you're doing something simple,
    if you want to implement your own architecture solution, or if you need granular
    control of the components used in your project, Flask is the web framework for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's talk about awesomeness, your awesomeness after reading this book—you
    will be capable of handling HTTP and Ajax requests; creating fully featured web
    applications with database integration (SQL and NoSQL) and REST services; using
    Flask extensions (forms, caching, logging, debugging, auth, permissions, and so
    on); and modularizing and unit- and feature-testing your applications.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoy this book and build great things with what you learn here
  prefs: []
  type: TYPE_NORMAL
