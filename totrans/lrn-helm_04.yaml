- en: '*Chapter 3*: Installing your First Helm Chart'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this book, we referred to Helm as the "Kubernetes package manager"
    and compared it to an operating system's package manager. A package manager allows
    users to quickly and easily install applications of varying complexities and manages
    any dependencies that an application might have. Helm works in a similar fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Users simply determine the application they want to deploy on Kubernetes and
    Helm does the rest of the work for them. A Helm chart—a packaging of Kubernetes
    resources—contains the logic and components required to install an application,
    allowing users to perform installations without needing to know the specific resources
    required. Users can also pass in parameters, called values, to a Helm chart to
    configure different aspects of the application without needing to know the specific
    details about the Kubernetes resources that are being configured. You will explore
    these features in this chapter by leveraging Helm as a package manager to deploy
    a WordPress instance onto Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following main topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding a WordPress chart on Helm Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Kubernetes environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional installation notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a WordPress chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a WordPress application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading a WordPress release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling back a WordPress release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uninstalling a WordPress release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will use the following software technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`minikube`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will assume that these components have already been installed on your system.
    For additional information on each of these tools, including installation and
    configuration, please refer to [*Chapter 2*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098),
    *Preparing a Kubernetes and Helm Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the WordPress application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will use Helm to deploy **WordPress** on Kubernetes. WordPress
    is an open source **Content Management System** (**CMS**) used to create websites
    and blogs. Two different variants are available—[WordPress.com](http://WordPress.com)
    and [WordPress.org](http://WordPress.org). [WordPress.com](http://WordPress.com)
    is a **Software-As-A-Service** (**SaaS**) version of the CMS, meaning the WordPress
    application and its components are already hosted and managed by WordPress. In
    this case, users do not need to worry about installing their own WordPress instance
    as they can simply access instances that are already available. [WordPress.org](http://WordPress.org),
    on the other hand, is the self-hosted option. It requires users to deploy their
    own WordPress instances and requires expertise to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since [WordPress.com](http://WordPress.com) is easier to start with, it may
    sound like the more desirable option. This SaaS version of WordPress, however,
    has many disadvantages over the self-hosted [WordPress.org](http://WordPress.org):'
  prefs: []
  type: TYPE_NORMAL
- en: It does not provide as many features as [WordPress.org](http://WordPress.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not give users full control over their website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires users to pay for premium features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not provide the ability to modify the backend code of a website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The self-hosted [WordPress.org](http://WordPress.org) variation, on the other
    hand, gives users complete control over their website and WordPress instances.
    It provides the full WordPress feature set, from installing plugins to modifying
    backend code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A self-hosted WordPress instance requires users to deploy a few different components.
    First, WordPress needs a database to save the website and administrative data.
    [WordPress.org](http://WordPress.org) states that the database must be either
    **MySQL** or **MariaDB**, which serves as both the website''s location and the
    administrative portal. In Kubernetes, deploying these components means creating
    a variety of different resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '`secrets` for database and admin console authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `ConfigMap` for externalized database configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`services` for networking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `PersistentVolumeClaim` for database storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `StatefulSet` for deploying the database in a stateful fashion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Deployment` for deploying the frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating these Kubernetes resources requires both WordPress and Kubernetes expertise.
    It requires WordPress expertise because the user needs to know the physical components
    that are required as well as how to configure them. Kubernetes expertise is required
    because users need to know how to express the WordPress requirements as Kubernetes
    resources. Given the complexity and number of resources that are required, deploying
    WordPress on Kubernetes can be a daunting task.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge presented by this task is a perfect use case for Helm. Rather
    than focus on creating and configuring each of the Kubernetes resources we have
    described, users can leverage Helm as a package manager to deploy and configure
    WordPress on Kubernetes without expertise. To begin, we'll explore a platform
    called **Helm Hub** to first find a WordPress Helm chart. After that, we'll deploy
    WordPress to your Kubernetes cluster using Helm and explore basic Helm features
    along the way.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a WordPress chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm Charts can be made available for consumption by being published to a chart
    repository. A chart repository is a location where packaged charts can be stored
    and shared. A repository is simply hosted as an HTTP server and can take the form
    of various implementations, including GitHub pages, an Amazon S3 bucket, or a
    simple web server such as Apache HTTPD.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to use existing charts that are stored in a repository, Helm needs
    to first be configured to a repository that it can use. This is accomplished by
    adding repositories using `helm repo add`. One challenge involved with adding
    repositories is that there are numerous different chart repositories available
    for consumption; it may be difficult to locate the particular repository that
    fits your use case. To make it easier to find chart repositories, the Helm community
    created a platform called Helm Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Helm Hub is a centralized location for upstream chart repositories. Powered
    by a community project called **Monocular**, Helm Hub is designed to aggregate
    all known public chart repositories and provide a search functionality. In this
    chapter, we will use the Helm Hub platform to search for WordPress Helm charts.
    Once an appropriate chart is found, we will add the repository that this chart
    belongs so that it can be installed, afterward.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, interaction with Helm Hub can be accomplished either from the command
    line or from a web browser. When using the command line to search for Helm charts,
    the results that are returned provide a URL to Helm Hub, which can be used to
    find additional information on the chart and instructions on how to add its chart
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Let's follow this workflow to add a chart repository containing a WordPress
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for WordPress charts from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, Helm contains two different search commands to assist us in finding
    Helm charts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To search for charts in Helm Hub or an instance of Monocular, use the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To search repositories for a keyword in Charts, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If repositories have not been added previously, users should run the `helm search
    hub` command to locate Helm charts available across all public chart repositories.
    After repositories are added, users can run `helm search repo` to search across
    these repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s search Helm Hub for any existing WordPress charts. Each chart in Helm
    Hub has a set of keywords that can be searched against. Execute the following
    command to locate charts containing the `wordpress` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon running this command, an output similar to the following should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The output from running helm search hub wordpress'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – The output from running `helm search hub wordpress`
  prefs: []
  type: TYPE_NORMAL
- en: Each line of the output returned by this command is a chart from Helm Hub. The
    output will display the URL to each chart's Helm Hub page. It will also display
    the chart version, which is the latest version of the Helm chart, and the app
    version, which is the version of the application that the chart is defaulted to
    deploy. This command will also print a description of each chart, which will often
    state the application that the chart deploys.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, some of the values returned are truncated. This is
    due to the fact that the default output of `helm search hub` is a table, causing
    the results to be returned in a table format. By default, columns wider than 50
    characters are truncated. This truncation can be avoided by specifying the `--max-col-width=0`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try running the following command by including the `--max-col-width` flag to
    view the untruncated results in table format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The result, in table format, will display each field in full, including the
    URLs and descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URLs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://hub.helm.sh/charts/bitnami/wordpress](https://hub.helm.sh/charts/bitnami/wordpress)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://hub.helm.sh/charts/presslabs/wordpress-site](https://hub.helm.sh/charts/presslabs/wordpress-site)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://hub.helm.sh/charts/presslabs/wordpress-operator](https://hub.helm.sh/charts/presslabs/wordpress-operator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The descriptions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Web publishing platform for building blogs and websites.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`A Helm chart for deploying a WordPress site on Presslabs Stack`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Presslabs WordPress Operator Helm Chart`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, users can pass the `--output` flag and specify either a `yaml`
    or `json` output, which will print the search results in full.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try running the previous command again with the `--output yaml` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be in YAML format, similar to the output shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Figure_3.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The output for `helm search hub wordpress--output yaml`
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will choose to install the first chart that was returned
    in the preceding sample output. To learn more about this chart and how it is insta[lled,
    we can go to https://hub.helm.sh/chart](https://hub.helm.sh/charts/bitnami/wordpress)s/bitnami/wordpress,
    which will help us view the chart from Helm Hub.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting content will be explored in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the WordPress chart in a browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using `helm search hub` is the fastest way of searching for charts on Helm Hub.
    However, it does not provide all of the details needed for the installation. Namely,
    users need to know a chart's repository URL in order to add its repository and
    install the chart. A chart's Helm Hub page can provide this URL, along with other
    installation details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have pasted the WordPress chart''s URL into a browser window, a page
    similar to the following should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – A WordPress Helm chart from Helm Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – A WordPress Helm chart from Helm Hub
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress chart's page from Helm Hub provides many details, including the
    maintainer of the chart (**Bitnami**, which is a company that provides software
    packages that are deployable to different environments) and a brief introduction
    on the chart (stating that this chart will deploy a WordPress instance to Kubernetes
    along with a Bitnami MariaDB chart as a dependency). The web page also provides
    installation details, including the chart's supported values, used to configure
    the installation, along with Bitnami's chart repository URL. These installation
    details give users the ability to add this repository and install the WordPress
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right-hand side of the page, you should see a section labeled **Add
    bitnami repository.** This section contains the command that can be used to add
    the Bitnami chart repository. Let''s look at how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in your command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the chart has been added by running `helm repo list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can do a little more now that we have added the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to view charts from locally configured repositories
    that contain the `bitnami` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A shortened list of the results returned is shown in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The output for helm search repo –output yaml'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Image86715.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – The output for `helm search repo bitnami --output yaml`
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the `helm search hub` command, the `helm search repo` command takes
    a keyword as an argument. Using `bitnami` as a keyword will return all the charts
    under the `bitnami` repository, as well as charts outside of that repository that
    may also contain the `bitnami` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that you now have access to the WordPress chart, run the following
    `helm search repo` command with the `wordpress` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will display the WordPress chart that you found on Helm Hub and
    observed in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The output for helm search repo wordpress'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – The output for `helm search repo wordpress`
  prefs: []
  type: TYPE_NORMAL
- en: 'The value in the `NAME` field before the slash (`/`) indicates the name of
    the repository containing the Helm chart that was returned. The latest version
    of the WordPress chart from the `bitnami` repository, as of the time of writing,
    is version `8.1.0`. This is the version that will be used for the installation.
    Previous versions can be observed by passing the `--versions` flag to the `search`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see a new line for each version of the available WordPress
    charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – The version lists for WordPress charts on the bitnami repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – The version lists for WordPress charts on the bitnami repository
  prefs: []
  type: TYPE_NORMAL
- en: Now that a WordPress chart has been identified and the chart's repository has
    been added, we will explore how you can use the command line to find out more
    about the chart to prepare for installation in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the WordPress chart information from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find a lot of important details about a Helm chart on its Helm Hub
    page. Once a chart''s repository is added locally, this information (and more)
    can also be viewed from the command line with the four `helm show` subcommands
    described in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This command shows the chart''s metadata (or chart definition):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This command shows the chart''s `README` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This command shows the chart''s values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This command shows the chart''s definition, README files, and values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's use these commands with the Bitnami WordPress chart. In each of these
    commands, the chart should be referenced as `bitnami/wordpress`. Note that we
    will be passing the `--version` flag to retrieve information about version `8.1.0`
    of this chart. If this flag is omitted, information from the latest version of
    the chart will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `helm show chart` command to retrieve the metadata for the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command will be the **chart definition** of the WordPress
    chart. A chart definition describes information such as the chart''s version,
    its dependencies, keywords, and maintainers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The wordpress chart definition'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – The WordPress chart definition
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `helm show readme` command to view the chart''s README file from the
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of this command may look familiar, as a chart''s README file is
    also displayed on its Helm Hub page. Leveraging this option from the command line
    provides a quick way to view the README file without having to open a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The wordpress chart’s README file shown in the command line'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – The WordPress chart's README file shown in the command line
  prefs: []
  type: TYPE_NORMAL
- en: We use `helm show values` to inspect a chart's values. Values serve as parameters
    that users can provide in order to customize a chart installation. We will run
    this command later on in this chapter in the *Creating a values file for configuration*
    section when we install the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `helm show all` aggregates all of the information from the previous
    three commands together. Use this command if you want to inspect all of a chart's
    details at once.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have found and inspected a WordPress chart, let's set up a Kubernetes
    environment that we can later install this chart to.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kubernetes environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a Kubernetes environment in this chapter, we will use Minikube. We
    learned how to install Minikube in [*Chapter 2*](B15458_02_Final_JM_ePub.xhtml#_idTextAnchor098),
    *Preparing a Kubernetes and Helm Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to set up Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start your Kubernetes cluster by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After a short amount of time, you should see a line in the output that resembles
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: "Once the Minikube cluster is up and running, create a dedicated namespace for\
    \ this chapter's exercise. Run the following command to create a namespace \L\
    called `chapter3`:"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now that the cluster setup is complete, let's begin the process of installing
    the WordPress chart to your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the WordPress chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing a Helm chart is a simple process that can begin with the inspection
    of a chart's values. In the next section, we will inspect the values that are
    available on the WordPress chart and describe how to create a file that allows
    customizing the installation. Finally, we will install the chart and access the
    WordPress application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a values file for configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can override the values defined in charts by providing a YAML-formatted
    `values` file. In order to properly create a `values` file, you need to inspect
    the supported values that the chart provides. This can be done by running the
    `helm show values` command, as explained earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to inspect the WordPress chart''s values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command should be a long list of possible values that you
    can set, many of which already have default values set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Figure_3.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – A list of values generated by running `helm show values`
  prefs: []
  type: TYPE_NORMAL
- en: The preceding output shows the beginning of the WordPress chart's values. Many
    of these properties already have defaults set, meaning these values will represent
    how the chart is configured if they are not overridden. For example, if the `image`
    value is not overridden in a `values` file, the image used by the WordPress chart
    will use the `bitnami/wordpress` container image from the docker.io registry against
    the `5.3.2-debian-9-r0` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Lines in the chart's values that begin with a hash sign (`#`) are comments.
    Comments can be used to explain a value or a block of values, or they can be used
    to comment values in order to unset them. An example of unsetting values by commenting
    them is shown in the `global` YAML stanza at the top of the preceding output.
    Each of these values will be unset by default unless set explicitly by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we explore the `helm show values` output further, we can find values that
    pertain to configuring the WordPress blog''s metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Figure_3.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – The values returned by running the `helm show values` command
  prefs: []
  type: TYPE_NORMAL
- en: 'These values appear to be important for configuring a WordPress blog. Let''s
    override them by creating a `values` file. Create a new file on your machine called
    `wordpress-values.yaml`. In that file, enter the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Feel free to get more creative with these values if you''d like. Continuing
    down the list of values from `helm show values`, there is one more important value
    that should be added to the `values` file before starting the installation, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – The LoadBalancer value returned after running helm show values'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – The LoadBalancer value returned after running `helm show values`
  prefs: []
  type: TYPE_NORMAL
- en: As described in the comments, this value states that if we are working with
    Minikube, we'll need to change the default `LoadBalancer` type to `NodePort`.
    A `LoadBalancer` service type in Kubernetes is used to provision a load balancer
    from a public cloud provider. While this value can be supported by leveraging
    the `minikube tunnel` command, setting this value to `NodePort` will instead allow
    you to directly access the WordPress application against a local port, instead
    of having to make use of the `minikube tunnel` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this value to your `wordpress-values.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this value is added to your `values` file, your complete `values` file
    should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now that the `values` file is complete, let's run the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Running the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use `helm install` to install a Helm chart. The standard syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `NAME` parameter is the name you would like to give your Helm release. A
    **release** captures the Kubernetes resources that were installed with a chart
    and tracks an application's life cycle. We will explore how releases work throughout
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `CHART` parameter is the name of the Helm chart that is installed. Charts
    from a repository can be installed by following the `<repo name>/<chart name>`
    form.
  prefs: []
  type: TYPE_NORMAL
- en: The `flags` option in `helm install` allows you to further customize the installation.
    `flags` allow users to define and override values, specify the namespace to work
    against, and more. The list of flags can be viewed by running `helm install --help`.
    We can pass `--help` to other commands as well to view their usage and supported
    options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with a proper understanding of the `helm install` usage, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This command will install a new release called `wordpress` using the `bitnami/wordpress`
    Helm chart. It will use the values defined in the `wordpress-values.yaml` file
    to customize the installation, and the chart will be installed in the `chapter3`
    namespace. It will also deploy the `8.1.0` version, as defined by the `--version`
    flag. Helm will install the latest version of the Helm chart without this flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the chart installation is successful, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – The output of a successful WordPress chart installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – The output of a successful WordPress chart installation
  prefs: []
  type: TYPE_NORMAL
- en: This output displays information about the installation, including the name
    of the release, the time it was deployed, the namespace it was installed to, the
    status of the deployment (which is `deployed`), and the revision number (which
    is set to `1` since this was the initial installation of the release).
  prefs: []
  type: TYPE_NORMAL
- en: The output also displays a list of notes related to the installation. Notes
    are used to provide users with additional information about their installation.
    In the case of the WordPress chart, these notes provide information about how
    to access and authenticate the WordPress application. While these notes appear
    directly after installation, they can be retrieved at any time with the `helm
    get notes` command, as explained in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: With your first Helm installation complete, let's inspect the release to observe
    the resources and configurations that were applied.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting your release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the easiest ways to inspect a release and verify its installation is
    to list all the Helm releases in a given namespace. For this, Helm provides the
    `list` subcommand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to view the list of releases in the `chapter3` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see only one release in this namespace, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – The output from the helm list command that lists the Helm releases'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – The output from the `helm list` command that lists the Helm releases
  prefs: []
  type: TYPE_NORMAL
- en: 'The `list` subcommand provides the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The release name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest revision number of the release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A timestamp of the latest revision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chart name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the status, chart name, and application version are truncated from
    the preceding output.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `list` subcommand is useful for providing high-level release information,
    there are additional items that users might want to know about a particular release.
    Helm provides the `get` subcommand to provide more information about a release.
    The following list describes the commands that can be used to provide a set of
    detailed release information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get all the hooks for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the manifest for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the notes for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the values for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To get all the information about a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The first command from the preceding list, `helm get hooks`, is used to display
    the hooks for a given release. Hooks will be explored in more detail in [*Chapter
    5*](B15458_05_Final_JM_ePub.xhtml#_idTextAnchor265), *Building Your First Helm
    Chart* and [*Chapter 6*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292), *Testing
    Helm Charts*, when you learn about building and testing Helm charts. For now,
    hooks can be thought of as the actions that Helm performs during certain phases
    of an application's life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to view the hooks that are included in this release:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, you will find two Kubernetes Pod manifests with the following
    annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This annotation denotes a hook that is run during the execution of the `test`
    subcommand, which we will explore in greater detail in [*Chapter 6*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292),
    *Testing Helm Charts*. These test hooks provide a mechanism for chart developers
    to confirm that a chart is functioning as designed and can be safely ignored by
    end users.
  prefs: []
  type: TYPE_NORMAL
- en: Since both of the hooks included in this chart are for testing purposes, let's
    move on to the next command from the preceding list to continue with the release
    inspection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `helm get manifest` command can be used to get a list of the Kubernetes
    resources that were created as part of the installation. Run this command as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After you run this command, you''ll see the following Kubernetes manifests:'
  prefs: []
  type: TYPE_NORMAL
- en: Two s`ecrets` manifests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two `ConfigMaps` manifests (the first is used to configure the WordPress application,
    while the second is used for testing, which is performed by chart developers and
    so can be ignored).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `PersistentVolumeClaim` manifest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two `services` manifests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `Deployment` manifest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `StatefulSet` manifest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From this output, you can observe where your values had an effect when configuring
    the Kubernetes resources. One example to note is within the WordPress service
    whose `type` has been set to `NodePort`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Setting type to NodePort'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Setting `type` to `NodePort`
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also observe the other values that we set for the WordPress user. These
    values are defined as environment variables in the WordPress deployment, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Values set as environment variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Values set as environment variables
  prefs: []
  type: TYPE_NORMAL
- en: Most of the default values provided by the chart were left untouched. Those
    defaults have been applied to the Kubernetes resources and can be observed through
    the `helm get manifest` command. If these values had been changed, the Kubernetes
    resources would be configured differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on to the next `get` command. The `helm get notes` command is used
    to display the notes from a Helm release. As you may recall, the release notes
    were displayed when the WordPress chart was installed. These notes provide important
    information about accessing the application and they can be displayed again by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `helm get values` command is useful for recalling the values that were
    used for a given release. Run the following command to view the values that were
    provided in the `wordpress` release:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of this command should look familiar as they should match the values
    specified in the `wordpress-values.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – ser-supplied values in the wordpress release'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 –User-supplied values in the wordpress release
  prefs: []
  type: TYPE_NORMAL
- en: 'While recalling the user-supplied values is useful, it may be necessary in
    some cases to return all of the values used by a release, including the defaults.
    This can be accomplished by passing in an additional `--all` flag, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'For this chart, the output will be lengthy. The first few values are shown
    in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – A subset of all the values for the wordpress release'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.17 – A subset of all the values for the wordpress release
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, Helm provides a `helm get all` command, which can be used to aggregate
    all of the information from the various `helm get` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Aside from the commands provided by Helm, the `kubectl` CLI can also be used
    to inspect an installation more closely. For example, instead of getting all of
    the Kubernetes resources created by the installation, `kubectl` can be used to
    narrow the scope down to just one type of resource, such as a deployment. To ensure
    that the resources returned belong to the Helm release, a label defined on the
    deployment can be provided to the `kubectl` command that denotes the name of the
    release. Helm charts often add an `app` label to their Kubernetes resources. Use
    the `kubectl` CLI to retrieve the deployments that contain this label by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll find that the following deployment exists in the `chapter3` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – The wordpress deployment in the chapter3 namespace'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – The wordpress deployment in the `chapter3` namespace
  prefs: []
  type: TYPE_NORMAL
- en: Additional installation notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Soon, we will explore the WordPress application that we just installed. First,
    there are several areas of consideration that should be mentioned before leaving
    behind the topic of installation.
  prefs: []
  type: TYPE_NORMAL
- en: The -n flag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `-n` flag can be used instead of the `--namespace` flag to reduce the typing
    effort when entering commands. This holds true for the `upgrade` and `rollback`
    commands, which we will describe later in this chapter. From here on, we will
    use the `-n` flag when we denote the namespace that Helm should interact with.
  prefs: []
  type: TYPE_NORMAL
- en: The HELM_NAMESPACE environment variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also set an environment variable to denote the namespace that Helm should
    interact with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how we can set this environment variable on various operating
    systems:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set the variable on macOS and Linux as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows users can set this environment variable by running this command in
    PowerShell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This variable''s value can be verified by running the `helm env` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You should see the `HELM_NAMESPACE` variable in the resulting output. By default,
    the variable is set to `default`.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will not rely on the `HELM_NAMESPACE` variable but will instead
    pass in the `-n` flag alongside each command so that it is clearer which namespace
    we intend to work with. Providing the `-n` flag is also the best way that the
    namespace for Helm can be specified, as it ensures that we are targetting the
    namespace that we expect.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between --set and --values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the `install`, `upgrade`, and `rollback` commands, you can choose one of
    two ways to pass values to your chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To pass a value in from the command line, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify values in a YAML file or URL, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In this book, we will treat the `--values` flag as the preferred method of configuring
    chart values. The reason for this is that it is easier to configure multiple values
    in this fashion. Maintaining a `values` file will also allow us to save these
    assets in a **Source Code Management** (**SCM**) system, such as `git`, which
    allows installations to be more easily reproducible. Take note that sensitive
    values, such as passwords, should never be stored in a source-control repository.
    We will cover the topic of security in [*Chapter 9*](B15458_09_Final_JM_ePub.xhtml#_idTextAnchor416),
    *Helm Security Considerations*. For the time being, it is important to remember
    not to push `secrets` into a source control repository. When secrets need to be
    provided in a chart, the recommended approach is to use the `--set` flag explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: The `--set` flag is used to pass values directly from the command line. This
    is an acceptable method for values that are simple, as well as for when there
    are few values that need to be configured. Once again, using the `--set` flag
    is not the preferred approach as it limits the ability to make the installation
    more reproducible. It is also much more difficult to configure complex values
    in this fashion, such as values in the form of lists or complex maps. There are
    other related flags, such as `--set-file` and `--set-string`; the `--set-file`
    flag is used to pass along a file that has configured values in a `key1=val1`
    and `key2=val2` format, while the `--set-string` flag is used to set all the values
    provided in a `key1=val1` and `key2=val2` format as strings.
  prefs: []
  type: TYPE_NORMAL
- en: With this explanation out of the way, let's explore the WordPress application
    that we just installed.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the WordPress application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The WordPress chart''s release notes provide four commands that you can run
    to access your WordPress application. Run the four commands listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS or Linux, run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows PowerShell, run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: After defining the two environment variables based on a series of `kubectl`
    queries, the resulting `echo` commands will reveal the URLs to access WordPress.
    The first URL is to view the home page and is where visitors would access your
    site. The second URL is to reach the admin console, which is used by website administrators
    to configure and manage the site content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the first URL into a browser and you should be presented with a page
    that appears similar to the content displayed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – The WordPress blog page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.19 – The WordPress blog page
  prefs: []
  type: TYPE_NORMAL
- en: Several portions of this page may look familiar to you. First, notice that at
    the top-left corner of the screen the title of the blog is called **Learn Helm**!
    Not only does this bear a resemblance to the title of this book, but it is also
    the string you gave the `wordpressBlogName` value previously during installation.
    You can also see this value included in the copyright statement at the bottom
    of the page, **© 2020 Learn Helm!**.
  prefs: []
  type: TYPE_NORMAL
- en: Another value that affected the customization of the home page is `wordpressUsername`.
    Notice that the author of the **Hello world!** post that is included is **helm-user**.
    This is the name of the user that was provided to the `wordpressUsername` value
    and would appear differently if an alternative username was provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other link provided in the previous set of commands is for the admin console.
    Paste the link from the second `echo` command into a browser and you should be
    presented with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20: The WordPress admin console login page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.20: The WordPress admin console login page'
  prefs: []
  type: TYPE_NORMAL
- en: 'To log in to the admin console, enter the `wordpressUsername` and `wordpressPassword`
    values that you provided during the installation. These values can be seen by
    reviewing your local `wordpress-values.yaml` file. They can also be retrieved
    by running the following commands instructed by the WordPress chart''s notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Once authenticated, the admin console dashboard is displayed, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – The WordPress admin console page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.21 – The WordPress admin console page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re in charge of managing this WordPress site, this is where you can
    configure your site, write posts, and manage plugins. If you click on the top-right
    link that says **Howdy, helm-user**, you will be directed to the `helm-user` profile
    page. From there, you can see several of the other values that you provided during
    the installation, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – The WordPress profile page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.22 – The WordPress profile page
  prefs: []
  type: TYPE_NORMAL
- en: The **First Name**, **Last Name**, and **Email** fields refer to their corresponding
    `wordpressFirstname`, `wordpressLastname`, and `wordpressEmail` Helm values.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to continue exploring your WordPress instance. Once complete, continue
    to the next section to learn how to perform an upgrade on a Helm release.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading the WordPress release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upgrading a release refers to the process of modifying the values that a release
    was installed with or upgrading to a newer version of the chart. In this section,
    we will upgrade the WordPress release by configuring additional values around
    the WordPress replica and resource requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Helm values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is common for Helm charts to expose values to configure the number of instances
    of an application and their related set of resources. The following screenshots
    illustrate several portions of the `helm show values` command that relate to the
    values used for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first value, `replicaCount`, is straightforward to set. Since `replica`
    is a Kubernetes term that describes the number of Pods needed to deploy an application,
    it''s implied that `replicaCount` is used to specify the number of application
    instances that are deployed as part of a release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – replicaCount in the helm show values command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.23.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.23 – `replicaCount` in the `helm show values` command
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to your `wordpress-values.yaml` file to increase the
    number of replicas from `1` to `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The second value that we need to define refers to a set of values under the
    `resources` YAML stanza:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – The values under the resources stanza'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.24 – The values under the resources stanza
  prefs: []
  type: TYPE_NORMAL
- en: 'Values can be indented, as in the `resources` stanza, to provide a logical
    grouping. Under the `resources` stanza is a `requests` stanza, which is used to
    configure the `memory` and `cpu` values that Kubernetes will allocate to the WordPress
    application. Let''s modify these values during the upgrade by decreasing the memory
    request to `256Mi` (256 mebibytes) and the `cpu` request to `100m` (100 millicores).
    Add these modifications to the `wordpress-values.yaml` file, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining these two new values, your entire `wordpress-values.yaml` file
    will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Once the `values` file has been updated with these new values, you can run the
    `helm upgrade` command to upgrade the release, as we will discuss in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Running the upgrade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `helm upgrade` command is almost identical to `helm install` in basic syntax,
    as you can see in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: While `helm install` expects you to provide a name for a new release, `helm
    upgrade` expects you to provide the name of an already-existing release that should
    be upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Values defined in a `values` file can be provided using the `--values` flag,
    identical to that of the `helm install` command. Run the following command to
    upgrade the WordPress release with a new set of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command is executed, you should see an output similar to that of `helm
    install` depicted in an earlier section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25 – The output for helm upgrade'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.25 – The output for `helm upgrade`
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also see the `wordpress` Pods restarting with by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In Kubernetes, new Pods are created when a deployment is modified. The same
    behavior can be observed in Helm. The values that were added during the upgrade
    introduced a configuration change of the WordPress deployment and new WordPress
    Pods were created, as a result, with the updated configuration. These changes
    can be observed using the same `helm get` `manifest` and `kubectl get` `deployment`
    commands that were used earlier after the installation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll perform a couple more upgrades to demonstrate how
    values can sometimes behave differently during an upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing and resetting values during an upgrade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `helm upgrade` command includes two additional flags that are used to manipulate
    values that are not present in the `helm install` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at these flags now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--reuse-values`: When upgrading, reuse the last release''s values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--reset-values`: When upgrading, reset the values to the chart defaults.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If an upgrade is performed without providing values with the `--set` or `--values`
    flags, the `--reuse-values` flag is added by default. In other words, the same
    values that were used by the previous release will be used again during the upgrade
    if no values are provided:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run another `upgrade` command without specifying any values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `helm get values` command to inspect the values used in the upgrade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the values displayed are identical to the previous upgrade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – The output of the helm get values'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.26 – The output of the `helm get values`
  prefs: []
  type: TYPE_NORMAL
- en: Different behavior can be observed when values are provided from the command
    line during an upgrade. If values are passed via the `--set` or `--values` flags,
    all of the chart's values that are not provided are reset to default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run another upgrade by providing a single value with `--set`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'After the upgrade, run the `helm get values` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will declare that the only user-supplied value was the value for
    `replicaCount`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – The output for replicaCount'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.27 – The output for `replicaCount`
  prefs: []
  type: TYPE_NORMAL
- en: When at least one value is provided during an upgrade, Helm automatically applies
    the `--reset-values` flag. This causes all of the values to be set back to their
    default values, except for the individual properties provided with the `--set`
    or `--values` flags.
  prefs: []
  type: TYPE_NORMAL
- en: Users can manually provide the `--reset-values` or `--reuse-values` flags to
    explicitly determine the behavior of values during an upgrade. Use the `--reset-values`
    flag if you would like the next upgrade to reset each value to its default before
    overriding it from the command line. Provide the `--reuse-values` flag if you
    would like to reuse each of the values from a previous revision while setting
    different values from the command line. To help simplify the management of values
    during an upgrade, try to keep your values in a file that can be used to declaratively
    set values for each upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: If you have been following along with each of the commands provided in this
    chapter, you should now have four revisions of the WordPress release. This fourth
    revision is not quite in the way we want the application to be configured, as
    it only specifies the `replicaCount` value because most of the values were set
    back to their defaults. In the next section, we will explore how the WordPress
    release can be rolled back to the stable version that contains the set of desired
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling back the WordPress release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While moving forward is preferred, there are some occasions where it makes more
    sense to return to a previous version of the application. The `helm rollback`
    command exists to satisfy this use case. Let's roll back the WordPress release
    to a previous state.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the WordPress history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every Helm release has a history of **revisions**. A revision is used to track
    the values, Kubernetes resources, and chart version that were used in a particular
    release version. A new revision is created when a chart is installed, upgraded,
    or rolled back. Revision data is saved in Kubernetes secrets by default (other
    options are ConfigMap or local memory, determined by the `HELM_DRIVER` environment
    variable). This allows your Helm release to be managed and interacted with by
    different users on the Kubernetes cluster, provided they have the **Role-Based
    Access Control** (**RBAC**) that allows them to view or modify resources in your
    namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The revision secrets can be observed by using `kubectl` to get the secrets
    from the `chapter3` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return all of the secrets, but you should see these four in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these secrets corresponds with an entry of the release''s revision
    history, which can be viewed by running the `helm history` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will display a table of each revision, similar to the following
    (some columns have been omitted for readability):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In this output, each revision has a number, along with the time it was updated,
    the status, the chart, the app version of the upgrade, and the description of
    the upgrade. Revisions that have a status of `superseded` were upgraded. The revision
    that says `deployed` is the currently-deployed revision. Other statuses include
    `pending` and `pending_upgrade`, which means the installation or upgrade is currently
    in progress. `failed` refers to a particular revision that has failed to install
    or be upgraded and `unknown` corresponds to a revision that had an unknown state.
    It's unlikely you will ever encounter a release with a state of `unknown`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `helm get` commands described previously can be used against a revision
    number by specifying the `--revision` flag. For this rollback, let''s determine
    the release that had the full set of desired values. As you may recall, the current
    revision, `revision 4`, only contains the `replicaCount` value, but `revision
    3` should contain the desired values. This can be verified by running the `helm
    get values` command with the `--revision` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The full list of values is presented by inspecting this revision:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – The output of checking a specific revision'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.28 – The output of checking a specific revision
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to run the other `helm get` commands against a revision number
    to perform a further inspection. If necessary, the `helm get manifest` command
    can also be executed against `revision 3` to check the state of the Kubernetes
    resources that would be restored.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will execute the rollback.
  prefs: []
  type: TYPE_NORMAL
- en: Running the rollback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `helm rollback` command has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Users provide the name of the release and the desired revision number to roll
    a Helm release back to a previous point in time. Run the following command to
    execute the rollback of WordPress to `revision 3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rollback` subcommand provides a simple output, printing the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This rollback can be observed in the release history by running the `helm`
    `history` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In the release history, you will notice that a fifth revision was added with
    a status of `deployed` and a description of `Rollback to 3`. When an application
    is rolled back, it adds a new revision to the release history. This is not to
    be confused with an upgrade. The highest revision number simply denotes the currently
    deployed release. Be sure to check a revision's description to determine whether
    it was created by an upgrade or a rollback.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get this release''s values to ensure that the rollback now uses the
    desired values by running `helm get values` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will show the values from the latest stable release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – The values from the latest stable release'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.29 – The values from the latest stable release
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that we did not explicitly set the chart version or the release's
    values in the `rollback` subcommand. This is because the `rollback` subcommand
    is not designed to accept these inputs; it is designed to roll back a chart to
    a previous revision and leverage that revision's chart version and values. Note
    that the `rollback` subcommand should not be part of everyday Helm practices and
    that it should be reserved only for emergencies where the current state of an
    application is unstable and must be reverted to a previously stable point.
  prefs: []
  type: TYPE_NORMAL
- en: If you have successfully rolled back the WordPress release, you are nearing
    the end of this chapter's exercise. The final step is to remove the WordPress
    application from the Kubernetes cluster by leveraging the `uninstall` subcommand,
    which we will describe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling the WordPress release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uninstalling a Helm release means deleting the Kubernetes resources that it
    manages. In addition, the `uninstall` command deletes the release's history. While
    this is often what we want, specifying the `--keep-history` flag will instruct
    Helm to retain the release history.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `uninstall` command is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Uninstall the WordPress release by running the `helm uninstall` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Once uninstalled, you will see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also notice that the `wordpress` release no longer exists in the `chapter3`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be an empty table. You can also confirm that the release is
    no longer present by attempting to use `kubectl` to get the WordPress deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: As expected, there are no more WordPress deployments available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'You will, however, notice that there is still a `PersistentVolumeClaim` command
    available in the namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – Output showing PersistentVolumeClaim'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_3.30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.30 – Output showing `PersistentVolumeClaim`
  prefs: []
  type: TYPE_NORMAL
- en: 'This `PersistentVolumeClaim` resources was not deleted because it was created
    in the background by a `StatefulSet`. In Kubernetes, the `PersistentVolumeClaim`
    resources that are created by a `StatefulSet` are not automatically removed if
    the `StatefulSet` is deleted. During the `helm uninstall` process, the `StatefulSet`
    was deleted but the associated `PersistentVolumeClaim` was not. This is what we
    would expect. The `PersistentVolumeClaim` resource can be deleted manually with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've installed and uninstalled Wordpress, let's clean up your Kubernetes
    environment so that we have a clean setup for the exercises we will carry out
    in later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up your environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To clean up your Kubernetes environment, you can remove this chapter''s namespace
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `chapter3` namespace is deleted, you can also stop the Minikube VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This will shut down the VM but will retain its state so that you can quickly
    begin working again in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install a Helm chart and manage its life
    cycle. We began by searching Helm Hub for a WordPress chart to install. After
    locating a chart, the repository containing the chart was added by following the
    instructions from its Helm Hub page. We then proceeded to inspect the WordPress
    chart to create a set of values that overrides their defaults. These values were
    saved to a `values` file, which was then provided during the installation.
  prefs: []
  type: TYPE_NORMAL
- en: After the chart was installed, we used `helm upgrade` to upgrade the release
    by providing additional values. We performed a rollback after this with `helm
    rollback` to restore the chart to a previous state. Finally, we removed the WordPress
    release at the end of the exercise with `helm uninstall`.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter taught you how to leverage Helm as an end user and chart consumer.
    You used Helm as a package manager to install a Kubernetes application to your
    cluster. You also managed the life cycle of the application by performing upgrades
    and a rollback. Understanding this workflow is essential to managing installations
    with Helm.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the concept and structure of a Helm chart
    in greater detail to begin learning how charts can be created.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn more about adding repositories locally, inspecting charts, and using
    the four life cycle commands used throughout this chapter (`install`, `upgrade`,
    `rollback`, and `uninstall`), go to [https://helm.sh/docs/intro/using_helm/](https://helm.sh/docs/intro/using_helm/).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Helm Hub? How can a user interact with it to find charts and chart repositories?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `helm get` and `helm show` sets of commands?
    When would you use one set of commands over the other?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `--set` and `--values` flags in the `helm
    install` and `helm upgrade` commands? What are the benefits of using one over
    the other?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command can be used to provide the list of revisions for a release?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens by default when you upgrade a release without providing any values?
    How does this behavior differ to when you do provide values for an upgrade?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine you have five revisions of a release. What would the `helm history`
    command show after you roll back the release to `revision 3`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine you want to view all of the releases deployed to a Kubernetes namespace.
    What command should you run?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine you run `helm repo add` to add a chart repository. What command can
    you run to list all of the charts under that repository?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
