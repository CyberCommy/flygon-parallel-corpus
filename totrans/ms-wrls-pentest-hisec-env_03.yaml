- en: Chapter 3. Footprinting and Reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We hope you enjoyed reading the last chapter and found it very informative as
    it covered a lot of useful information. As the author, my goal is to cover as
    much information as possible in great detail so you, as the reader, can comprehend
    it and later use it in the real world! In this chapter, I will be covering how
    to scan wireless networks for information, different wireless scanning methods,
    and how they can be used for both good and bad.
  prefs: []
  type: TYPE_NORMAL
- en: You may ask or may think how hard can it be to scan for wireless networks? Anyone
    can do that! Yes, however, what if the SSID is hidden? Could you find hidden wireless
    networks? The average user most likely will not know that hidden wireless networks
    even exist.
  prefs: []
  type: TYPE_NORMAL
- en: You may also ask, what's so important about a hidden wireless network? You might
    think it's a good security measure to be hidden from others. Yes, it is! Unfortunately,
    hidden wireless networks can be used for malicious and other illegal purposes.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose that you are the security consultant for an enterprise.
    A coworker tells you that some files are missing or have been changed after business
    hours by a user who neither has physical access after office hours nor remote
    access. You verify the timestamp of the modified files as well as the files that
    have been deleted after 2 A.M. and you also find out the name of the user who
    logged in and made the changes. Now, this user tells you that they didn't do anything.
    Later that afternoon, your coworker tells you that they saw the user set up a
    wireless access point or router in their cubical. You ask your boss whether you
    can search the user's work area regarding a security issue. After searching that
    area, you end up finding a wireless access point hooked up under the desk. This
    is definitely not good! Right now, anyone could have access to the company's network
    from anywhere within a wireless range, and access network shares and servers.
  prefs: []
  type: TYPE_NORMAL
- en: What is footprinting and reconnaissance?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Footprinting and reconnaissance is where you gather information about your client's
    network to create a profile based on the information gathered. It is essential
    that the attacker gains information from the organization in a secure and professional
    manner without exposing information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Footprinting usually involves two steps of reconnaissance. The first step is
    to gather information from the target to determine the scope of the network range.
    The most common tools used for this are:'
  prefs: []
  type: TYPE_NORMAL
- en: nslookup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: whois
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During your footprinting and reconnaissance, you should be gathering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Contact names, phone numbers, and e-mail addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each location and branch office
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Company security policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get even better results, try sending an e-mail or calling one of the employees
    and conducting a social engineering technique to see how much information they
    are willing to provide. Then, review the areas where security awareness training
    may need improved.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless network discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next section, we will be covering the best network applications recommended
    by network and security administrators. These kind of applications can easily
    detect rogue hardware, software license violations, and even detect outages or
    performance issues. The applications I chose keep diversity and reliability in
    mind.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless network discovery](img/3183OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo credit: pobre.ch via photopin cc'
  prefs: []
  type: TYPE_NORMAL
- en: Even though we will only be covering two network discovery tools, we will share
    some more applications that we believe can help you and your company.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Network Mapper** (**Nmap**) is one of the most popular port scanners and
    network discovery tools. It''s available on all major operating system platforms.
    An example is given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nmap](img/3183OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For additional information on Nmap, please refer to [http://nmap.org/](http://nmap.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Nmap commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a lot of command options for Nmap and I''m quite sure we don''t always
    remember these commands right off the top of our heads. In the end, it really
    just comes down to knowing your commands and what commands to use in particular
    situations. As a pentester, one needs to master most of these tools efficiently.
    Some of them are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operating system and version detection**: These commands will display results
    for operating system and software versions, as shown in the following screenshot:![Nmap
    commands](img/3183OS_03_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmap –A 192.168.10.1`: This command will display the operating system, service
    versions, and traceroute output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –v –A 192.168.10.1`: This command will display more information in detail
    during the scan, along with the operating system, service versions, and traceroute
    output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –O 192.168.10.1`: This command will display only the operating system.
    Adding a `–osscan-guess` can make the scan guess more aggressively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –A –iL /tmp/nmapscan.txt`: This command will scan for operating system,
    service versions, and run a traceroute. Then, it will input a list of hosts or
    networks from the text file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service scans**: These commands will display results for services and ports
    running on the host and can also help find out whether a host or network is protected
    by a firewall. This is illustrated in the following screenshot:![Nmap commands](img/3183OS_03_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some commands to perform service scans:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmap –sV 192.168.10.1`: This command will seek open ports to determine what
    services and versions are running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –sA 192.168.10.1`: This command is used to scan firewall policies. It
    will display information on whether the firewall is just a packet filter blocking
    SYN packets. An ACK packet is sent to the destination; if it gets a response,
    then it is open; if it gets no response, then it is running a packet filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bypassing firewall filters**: This command allows you to scan a host or network
    that is protected by a firewall. This command also depends on what firewall filters
    are running. The technique is illustrated in the following screenshot:![Nmap commands](img/3183OS_03_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmap –PN 192.168.10.1`: This command will scan the host as if it were online.
    This can be useful if you are unable to reach a host by ping or scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –PS 192.168.10.1`: This command will run a TCP SYN discovery scan to
    given ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –PA 192.168.10.1`: This command will run a ACK discovery scan to given
    ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scanning for firewall vulnerabilities**: These commands will scan for common
    firewall exploits that are subject to finding a loophole in the TCP network protocol:![Nmap
    commands](img/3183OS_03_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmap –sN 192.168.10.1`: This command is a null scan. The null scan does not
    set any bits, therefore, can be used to bypass a non-stateful firewall and packet
    filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –sF 192.168.10.1`: This command is a FIN scan. The FIN scan will set
    just the TCP FIN bit. When a FIN packet is sent to an open port, the open port
    will simply ignore the packet and the closed port is sent back to a RST packet,
    which then displays which ports are open and closed in Nmap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –sX 192.168.10.1`: This command is a Xmus scan. The Xmus scan can be
    used to determine whether ports are open or closed on a target machine. This scan
    sends TCP segments with all the flags sent in the packet header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packet fragments**: This command splits up the TCP header over several packets
    to make it harder for packet filters, intrusion detection systems, and firewalls
    to detect your scan. These commands are essential if you are looking to run a
    stealth scan on a network without raising a flag. The following is an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –sS –p 80 –f 192.168.10.1`: This command is a TCP SYN scan that scans
    port `80` on `192.168.10.1` without setting off intrusion detection systems or
    alerts. Please understand that this also depends on the firewall or IDS configuration
    and policies. This command is illustrated in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Nmap commands](img/3183OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Firewall decoys**: This command allows you to spoof a host to the remote
    host. If spoofed correctly, an IDS and network administration will be unaware
    of a networks scan taking place. The following is a sample command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nmap –n 192.168.10.1 –D 192.168.20.3`: This command scans a host without sending
    out a DNS request and it also has a decoy set for `192.168.20.3` that spoofs the
    scan to look like `192.168.20.3` is running the scan instead of the Kali Linux
    host. This command is illustrated in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Nmap commands](img/3183OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Zenmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Zenmap** is a multiplatform graphical frontend of Nmap. It makes Nmap easier
    to use and comes packed with preconfigured commands to quickly run scans on the
    fly.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zenmap](img/3183OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For additional information on Zenmap, please refer to [http://nmap.org/zenmap/](http://nmap.org/zenmap/).
  prefs: []
  type: TYPE_NORMAL
- en: Wireless scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireless access points are constantly searching for other wireless access points.
    802.11 radios scan in frequencies of 2.4 GHz to 5.85 GHz. There are exactly two
    different scanning methods, **passive** and **active**. By default, 802.11 radios
    perform both scans on all channels allowed by the country's laws of operation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless scanning](img/3183OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo credit: @jbtaylor via photopin cc'
  prefs: []
  type: TYPE_NORMAL
- en: The penalties for operations without a permit or license from the FCC could
    potentially charge you a large fine for a single day of operation. Who is the
    FCC you may ask? The **Federal Communications Commission** (**FCC**) governs and
    regulates the telecommunications industry in the United States, including the
    Internet. Why should we be concerned about this? The goal of the Internet is to
    be accessible by anyone without discrimination, blocking, censorship, or throttling
    networks. To summarize this statement, the FCC is proposing new Internet policies
    and contracts that will allow Internet service providers to charge an extra fee
    or market a "paid-to-use" service that will slow down your Internet if you don't
    have the extra money to pay for it. Please refer to your country's LCT before
    conducting any local broadcasts or scans.
  prefs: []
  type: TYPE_NORMAL
- en: Passive scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **passive scan** listens for beacons and probe responses. The radio transmitted
    from the client scans once per second and then audits the packets on the wireless
    network. Passive scans are always enabled because it is used to connect clients
    to access points.
  prefs: []
  type: TYPE_NORMAL
- en: Active scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Active scanning** is performed only on channels that are allowed by government
    regulations. An active scan is enabled by default; however, it can be disabled
    in the wireless adapter''s profile or configuration. During an active scan, the
    radio sends probe requests with a null SSID name to solicit probe responses from
    other devices in the area. In other words, access points actively seek other devices
    as well as listen to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Active scanning](img/3183OS_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How scanning works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to scan outside the range of operation, the access point must change
    channels. These wireless RF channel scans from the access point are performed
    once per second and at different channel ranges until they cycle through all of
    the channels.
  prefs: []
  type: TYPE_NORMAL
- en: '![How scanning works](img/3183OS_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireless access point will then leave the RF channel for about 25-30 ms.
    Scans are scheduled to avoid interference with other beacon transmissions. Then
    the probes are sent once the channel change has completed. Keep in mind that the
    scan frequency will be reduced if voice, video, or other heavy data usage is detected.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing wireless networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I know what you are thinking... can I really smell wireless networks? No, however,
    with the right tools and hardware, you can! Wireless sniffing is an eavesdropping
    technique used by special applications or tools on a wireless network. Sniffing
    is more intrusive than wireless, which stumbles around networks. The goal of wireless
    sniffing is to troubleshoot network issues and protocols on a wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Both wireless and wired connections can be monitored and sniffed. Wireless networks
    are much easier to sniff because they use radio signals for communication. An
    attacker could sit in a car outside a building and sniff a wireless network for
    sensitive information to gather for personal gain, attention, or even money.
  prefs: []
  type: TYPE_NORMAL
- en: Networks divide information into small bits and pieces called **frames**. These
    frames have data packets inside of them. An attacker might target frames, packets,
    or both.
  prefs: []
  type: TYPE_NORMAL
- en: By targeting frames, an attacker could possibly detect hidden wireless networks
    within the area in which they could gain unauthorized access if the networks aren't
    using the latest wireless encryption standards. Network administrators use these
    techniques to troubleshoot network issues.
  prefs: []
  type: TYPE_NORMAL
- en: The Wireshark application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wireshark is a free and open source packet analyzer. It is used for network
    troubleshooting and analysis. It captures network packets and displays those packets
    in detail. Network and security administrators depend on Wireshark to troubleshoot
    network and security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Years ago, there were many different tools available, which were rather expensive
    to use. Wireshark has changed that by offering itself free to the public. Wireshark
    is one of the best open source packet analyzers available today.
  prefs: []
  type: TYPE_NORMAL
- en: There are many great uses for Wireshark. Network administrators will use it
    to identify and troubleshoot network problems. Network security engineers can
    examine security problems. Developers can debug protocol implementations. Users
    can get a good understanding of how network protocols work and how potentially
    they can be compromised by an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: In the real world, Wireshark is extremely helpful to view real-time packets
    to determine web application issues, authentication issues such as a three-way
    TCP handshake, and auditing. Wireshark will show you where the packets have originated
    from, where the packet destinations are, and what they are for.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you could see if one user is using more bandwidth on the network
    than others. This user could be heavily downloading or watching YouTube videos
    during business hours. You can drop that user's bandwidth so that it does not
    slow down the network for everyone else.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark is available for Windows, Mac, and Linux operating systems. Please
    visit [http://www.wireshark.org/](http://www.wireshark.org/) for additional information
    on features and support. Kali Linux has Wireshark preinstalled, so you will not
    have to install it, but you may need to install it on any operating system you
    want.
  prefs: []
  type: TYPE_NORMAL
- en: Ettercap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ettercap performs man-in-the-middle attacks to position itself like a router
    or server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Ettercap](img/3183OS_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'An attacker could use Ettercap for the following purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: To manipulate data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To gather passwords for protocols such as FTP, HTTP, POP, and SSHv1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To fake SSL certificates in HTTPS sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this demonstration of Ettercap, we will position our Kali Linux system as
    the "man-in-the-middle" after ARP spoofing. Let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: Open Ettercap in graphical mode by opening a bash terminal and typing in `ettercap
    –G`:![Ettercap](img/3183OS_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Sniff** and then select **Unified sniffing…**:![Ettercap](img/3183OS_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Hosts** and then select **Scan for hosts**:![Ettercap](img/3183OS_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The network range will be determined by your IP settings on the interface you
    chose in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Hosts** and then click on **Hosts list**:![Ettercap](img/3183OS_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the router's IP address and click on **Add to Target 1**. If you would
    like to target another router or host, select another IP address from the list
    and click on **Add to Target 2**.![Ettercap](img/3183OS_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't select anything, you will ARP-poison the entire subnet. Do not
    run this on any production network! The IP address `192.168.146.1` is the router
    that we will be using for this demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Mitm** and then click on **ARP poisoning…**:![Ettercap](img/3183OS_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box **Sniff remote connections.**:![Ettercap](img/3183OS_03_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Start** and then click on **Start Sniffing**:![Ettercap](img/3183OS_03_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the subnet has been trapped in a man-in-the-middle attack, an attacker
    just needs to run a modified or filtered attack on the subnet. These filters can
    be used via a plugin available to Ettercap or be created by yourself. This is
    where common attacks such as DNS spoofing, FTP prompt changes, or SSH downgrade
    attacks take place. The end user will not even know it happened. A network administrator
    can use Wireshark to determine where the packets are coming from and track down
    the attacker's IP address. As a general rule in security, do not use default or
    automatic settings. Enforce the highest level of security available and discuss
    security best practices with staff members.
  prefs: []
  type: TYPE_NORMAL
- en: dsniff
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: dsniff is an advanced password sniffer that can recognize many different network
    protocols such as Telnet, FTP, SMTP, POP, IMAP, HTTP, CVS, Citrix, SMB, Oracle,
    and many more. While Wireshark can give a lot of information about packets, dsniff
    can give you usernames and passwords. You can specify the interface to listen
    on and even save the output to a file format to read later on. Let's take a look
    at how to use dnsiff!
  prefs: []
  type: TYPE_NORMAL
- en: '![dsniff](img/3183OS_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The option `–n` does not resolve IP addresses to hostnames. The option `–I`
    is the network interface in which we selected `eth0`.
  prefs: []
  type: TYPE_NORMAL
- en: '![dsniff](img/3183OS_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Log in with a username and password for any of the network protocols mentioned
    earlier:![dsniff](img/3183OS_03_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you look back at your other Terminal, you should see that dsniff has revealed
    your login credentials:![dsniff](img/3183OS_03_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If anyone should log in using no encryption, dsniff will pick up login credentials.
    This is why it is strongly recommended to always use encryption when it is available
    to the user. Please ensure you are using the latest TLS standard and an excellent
    security certificate with 2048+ bit keys. If you happen to be configuring a server,
    change the default port to something unique. This will help reduce the amount
    of potential attacks and any other security risks that maybe available in the
    wild.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you wanted to sniff a remote computer for passwords on the local LAN
    using dsniff? Sure no problem! There is a tool called **arpspoof** that will allow
    you to spoof your attacking computer IP address to be a default gateway or man-in-the-middle
    attack. For this attack to work, you must enable IP routing for your computer
    to successfully establish the proper communication between both computers.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying your targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a penetration tester, it is essential to understand and know who your targets
    are. There is a lot more than just computers to consider. Servers, smartphones,
    tablets, and network hardware are also part of the penetration test. Knowing whether
    software or system patches have been applied or not is extremely important, as
    we don't want unauthorized access to these devices and systems, especially in
    a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying your targets](img/3183OS_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo credit: Bogdan Suditu via photopin cc'
  prefs: []
  type: TYPE_NORMAL
- en: Tools such Nmap and Zenmap can be used to scan an entire network. Even though
    this is a quick way to get information such as the operating system and software
    version, it is not always accurate. Depending on the scenario, it is sometimes
    best to go to each device and system to know what is being used on network. Asking
    the client for network documentation and hardware inventory can be very helpful
    if they can provide that information.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting/preventing yourself from attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'No matter what the situation is, we always need to know how to protect ourselves
    from any threats that may occur. Whether it is from the inside or outside the
    network, you will need to provide yourself with an understanding on how you may
    be affected as an individual or business. There are several methods to protect
    yourself from such attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Protection/prevention against Nmap and Zenmap:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create custom firewall rules and access lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any hardware IDS that is monitoring network traffic 24/7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block or filter ICMP pings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Protection/prevention against wireless scanning:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the latest wireless encryption algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure MAC filtering rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off or hide wireless broadcast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off UPnP support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Protection/prevention against sniffing wireless networks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use HTTPS and SSH instead of HTTP and telnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect using a VPN service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect to only trusted wireless networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to scan wireless networks for information,
    saw two different types of wireless scanning, and learned how they work. You saw
    how to sniff wireless networks by ARP poisoning with Ettercap and how to use dsniff
    to pick up login credentials. We also discussed how to identify your targets during
    a wireless penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned several different methods to protect yourself from these
    attacks. It is important to keep your mindset as an attacker because it will open
    your eye to more security threats that may potentially threaten you as an individual
    or business. Always connect to trusted wireless networks, use encryption when
    it is available, and use VPN when traveling.
  prefs: []
  type: TYPE_NORMAL
