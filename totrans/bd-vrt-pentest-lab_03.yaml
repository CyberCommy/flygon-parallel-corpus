- en: Chapter 3. Planning a Range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will start the process of what is required to plan a test
    environment. We will discuss the process of searching and finding vulnerabilities
    to test, and create a lab environment for testing a type of vulnerability. We
    will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will provide us with a defined architecture to build and support
    the testing types that we have to perform.
  prefs: []
  type: TYPE_NORMAL
- en: Planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An essential step to complete is the plan; also, the concept of what we are
    trying to achieve and how we are going to get there will be discussed. This is
    one of the areas that many do not spend enough time in. As we discussed in [Chapter
    1](ch01.html "Chapter 1. Introducing Penetration Testing"), *Introducing Penetration
    Testing*, we cannot take six to nine months in planning, like a potential attacker
    would more than likely do, for our abstract methodology. Having said that, we
    can spend a great deal of time planning the architectures we want to build for
    our advanced pen testing labs. So, we will start with what goes into the plan.
    The plan we are going to discuss consists of the areas mentioned in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: What are we trying to accomplish?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Are we trying to test a web application, an application, a device, or something
    else? This is where we start to identify what our virtualized environment is going
    to require; also, we identify how we are going to configure and build the required
    components.
  prefs: []
  type: TYPE_NORMAL
- en: By when do we have to accomplish it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the step where we will define what the time frame is for what we are
    attempting to create. In this area, it is important to have a defined timeline;
    otherwise, we could continue building with no set outcome. While some inconsistency
    or unknowns are part of the process, the better we define the time, the more productive
    we will be. It is like goal setting; if you set goals, but you never specify a
    time frame, then it is not a well-defined goal.
  prefs: []
  type: TYPE_NORMAL
- en: As you read this, you may wonder how goal setting made its way into these pages.
    For those of you who are wondering, I will provide an example. While developing
    labs for a training course for a client, I was trying to create and build a Cisco
    router emulation capability that works very well. As I had not decided on the
    number of tries, and more importantly, a time frame for this activity, this resulted
    in three days of fruitless activity. I will cover this and provide steps on how
    you can build your own later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The virtual platform required for the course was going to be Hyper-V. I had
    used this solution for more than five years in a VMware environment, but no matter
    how much I tried, it was not working when I started to build the platform in Hyper-V.
    I first tried to convert one of my virtual machine VMDK files using the Starwind
    software, and that did not work. The network could not talk to the router emulator,
    and it could also not talk to the host. Therefore, in short, there was no connectivity.
    I then built the virtual machine from scratch thinking that it might work, and
    that did not work either. I worked on it for three days, reading every blog posting,
    whitepaper, or anything I could get my hands on. A better plan would have been
    to give it one day, or limit it to a number of tries, but when I started the plan,
    I did not have any timeline to it, and as such it cost me three days of time.
    I am sharing this with you now, so that you hopefully do not make the same mistakes
    that I had made.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to quantify and track your planning is to use a form of a time chart
    or project tool. There are several available, but it is beyond the scope of this
    book to cover them. It really does not matter which one you use. If you are like
    me, you would want to use a simple one and not have to learn another program.
    So, the one I use is the calendar within Microsoft Outlook. Some of you probably
    use Microsoft Project; that is fine, use whatever works for you. I believe that
    most, if not all, of us have used a mail program at some point of time, and if
    the capability is in the mail program, then it is something worth exploring.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at an example. I use the tasks and event components together,
    so if you start your Microsoft Outlook program, you can click on **New Items**
    at the top of the menu. This will bring up the menu to create a new item. An example
    of this is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![By when do we have to accomplish it?](img/477-1_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Menu to create a new item in Outlook (the cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to create a new task; to do that, we click on the **Task** option,
    and this will open a new menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![By when do we have to accomplish it?](img/477-1_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Menu screen after clicking on the Task option (the cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: From this point, it is a relatively easy process to create tasks and then be
    able to track them; furthermore, you can, at any time, refer to your task list
    and see what tasks still remain. You are encouraged to use tasks and events as
    you plan your building of network architectures. We will provide you with step-by-step
    processes to build your environment within this book, but when you stray outside
    of the book, there are chances you could run into challenges like the one with
    creating router emulations. When you do, it is essential that you plan for possible
    time delays and other unforeseen instances. The more time you spend in the planning
    phase, the fewer obstacles you will encounter as you progress to the later stages
    of development.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already defined pen testing as the validation and verification of
    vulnerabilities, this is one of our main focuses when we are preparing to build
    a pen testing lab. We have to find vulnerabilities that we can leverage to gain
    access when the scope of work permits it. You will spend the most time in preparation
    on trying to find vulnerabilities that will provide the access we need and also
    be reliable.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing to remember is that all systems will have vulnerabilities,
    but not all vulnerabilities will have exploits. There will be many occasions when
    you see there is a vulnerability, but your search does not discover an exploit
    for that vulnerability; moreover, you might find an exploit, but it will not work
    against the target you have. This is because, as we like to say, exploitation
    is not 100 percent. Often, you will do everything right, but the exploit will
    just fail! Welcome to the real world of penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at information on some locations to look for vulnerabilities,
    we will discuss the things that we want to know about a potential vulnerability
    that we are going to use to exploit. We want to know some, if not all, of the
    following with respect to exploitability:'
  prefs: []
  type: TYPE_NORMAL
- en: Access vector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we need to be locally on the machine, on the local subnet, or remote from
    any location?
  prefs: []
  type: TYPE_NORMAL
- en: Complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the exploit take code writing, chaining of different components together,
    or any additional work that we have to do to be able to successfully exploit the
    vulnerability?
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is authentication required, or can we leverage the vulnerability without credentials?
    If authentication is required, what do we have to do to break authentication?
    Can we brute force it, dictionary attack, or is there a default password?
  prefs: []
  type: TYPE_NORMAL
- en: 'This is just a small sampling of what we might want to consider as we start
    looking into the vulnerability characteristics. An example of this using the **Common
    Vulnerability Scoring System** (**CVSS**) is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Identifying vulnerabilities](img/477-1_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A reference sheet on Common Vulnerability Scoring System (the cropped text is
    not important)
  prefs: []
  type: TYPE_NORMAL
- en: Identifying vulnerabilities is a critical part of our initial stages; we have
    to find vulnerabilities to be able to conduct the pen test. Some of you might
    be thinking that we can just fire up our vulnerability scanner of choice, and
    then we will let the scanner tell us what vulnerability is there; furthermore,
    you are probably thinking that you can let an exploit framework assist with this.
    While all of this is true, it is not the scope and focus of what we are trying
    to achieve. Remember, we want to build pen testing lab environments, and to do
    that we need to find vulnerabilities to exploit; moreover, we need to discover
    these long before going to perform the actual testing. In this section, the key
    is to locate the vulnerabilities that we want to test in our lab architecture,
    and correspondingly, ones we will record the steps and requirements of to leverage
    that vulnerability and gain access. We do this, so when and if we encounter it,
    we know what to expect.
  prefs: []
  type: TYPE_NORMAL
- en: A subtle but extremely important concept to grasp is that we can build any environment
    possible, but we have to build the environment based on what we want to achieve.
    As an example, there are many vulnerabilities in Microsoft Internet Explorer;
    most of these are related to memory problems, and these are referred to as **Use
    after Free** vulnerabilities. Furthermore, this is a software that we will more
    than likely encounter in our pen testing travels. Therefore, it is imperative
    we track and watch for the vulnerabilities as they come out on Internet Explorer,
    and that is the approach we take for all potential software and hardware we may
    encounter.
  prefs: []
  type: TYPE_NORMAL
- en: A common method, and one that we recommend, is to track vulnerabilities of products
    that are very popular in the commercial sector. We already mentioned Internet
    Explorer; others to track are Cisco, Red Hat, Oracle, Adobe, and many more. This
    is the power of professional security testing; we know all of these vendors as
    well as many others can and will have vulnerabilities, so once we discover any
    one, we can go about the task of using it to our advantage. The process consists
    of getting the details of the vulnerability, and then building the lab to be able
    to test and experiment with the vulnerability. Hence, if we have an Internet Explorer
    vulnerability, we will create a machine with the vulnerable software on it, and
    then we will start the methodical process of leveraging that vulnerability to
    gain some form of access. One more point to emphasize here is that we do not always
    have to run exploit code or perform some form of exploitation to gain access.
    Often, we will find another weakness, such as a default password on a service,
    which will allow us to gain the access we need. All of this will be discussed
    in time, but we now have to look at techniques to get information on vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with most things on the Internet, there are more vulnerability reporting
    sites than we can ever maintain track of. Therefore, the recommended approach
    is to select a couple of the sites and then maintain consistency by checking them
    on a regular basis. Alternatively, you can subscribe to a service, and it will
    send you tailored vulnerability listings. However, as a professional security
    tester, we do not have the luxury of setting a profile of systems, services, and/or
    networks that we can track. We can, however, maintain a profile of the popular
    software and systems we are likely to encounter, but this is again a matter of
    trial and error. The approach I and my trainees practice is to frequent three
    to four sites and consistently visit them; that is how we keep track of the latest
    information that is out in the public domain. You should also look out for the
    vendor patch release dates and track them as well. To prove just how daunting
    a task this is, we will do an experiment; open your favorite search engine and
    conduct a search for vulnerability sites.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of this search in Microsoft''s Bing is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Searching for Vulnerability sites on Microsoft's Bing (the cropped text is not
    important)
  prefs: []
  type: TYPE_NORMAL
- en: As the preceding screenshot shows, there are more than 10 million hits on these
    terms. Now, as many of you reading this are more than likely aware, the search
    we have conducted is not a narrow and precise search; we could enter `vulnerability
    + sites` to return a match of those two words anywhere in the results. Moreover,
    we could use the vulnerability sites to make the results an exact match. We will
    not do that here, but it is something you can do to get results that are more
    granular and can save you some time.
  prefs: []
  type: TYPE_NORMAL
- en: As we review the results, we see that at the top of the list is the National
    Vulnerability Database, and this is one of the databases we like to use. So, enter
    [http://nvd.nist.gov](http://nvd.nist.gov) in your browser. Once the website comes
    up, look at the vulnerabilities information; at the top left of the home page,
    click on **Vulnerabilities**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will bring up the search interface for the vulnerabilities; from here,
    it is just a matter of entering your search parameters and looking at the results.
    This search page is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The search interface for the vulnerabilities (the cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are a number of things we can search for. Another capability
    is to search for a specific time frame that will be beneficial if you are just
    looking for the most recent listings.
  prefs: []
  type: TYPE_NORMAL
- en: For example, enter `Adobe` in the keyword search field, and click on **Search**.
    This will result in the vulnerabilities for Adobe being returned, and since it
    is a popular program, there are always attackers trying to exploit it. Furthermore,
    it provides us with the capability of cross-platform exploitation, which is another
    feature we like to see when we do our testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of this search is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing the vulnerabilities for Adobe being returned (the cropped text
    is not important)
  prefs: []
  type: TYPE_NORMAL
- en: This is what we like to see! In the preceding screenshot, when we see the CVSS
    Severity, 7 means it is a high vulnerability, and 10 denotes it cannot get more
    severe because it is the maximum severity. As you can see, there were 997 results
    returned at the time of this search. This is because Adobe is a frequent target,
    and as such, continues to be targeted by attackers.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to research the vulnerability further and see what exactly
    the vulnerability characteristics are; also, we will find an exploit for it. Since
    it is a client-side software type of vulnerability, this means we will have to
    do some form of deception and get a user to go to a site or click on something.
    For now, we have the main intent of this site, and we will move on to another
    site. You are encouraged to explore the site at your convenience and learn more.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that you may have noticed is we had to enter information to display
    the vulnerabilities; this might be less than ideal, so we will now go and look
    at our first site that provides with us listings of the latest vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the home page of the National Vulnerability Database site, and located
    about midway down the page on the left-hand side, you will see additional links;
    locate and click on **US-CERT Vuln notes**. This will bring up the vulnerability
    notes from the team at the US-CERT. An example of this is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing vulnerability notes from the team at the US-CERT (the cropped
    text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: We now have a listing of vulnerabilities that provides us with a timeline that
    we can use as a reference. The fact that there is a listing makes this list a
    one stop; we can view the latest and move on, and this is something we want from
    our top three to four sites we select. Additionally, we can still reference more
    sites, but we use the three to four chosen ones to get our update, and then when
    we discover something of interest, we can look at other sites and see what they
    have written about the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: We want to be able to explore our vulnerabilities further, so we will do that
    now with an example. As we look at this listing of vulnerabilities in the previous
    screenshot, we see that there is one for Cisco. Since we like to keep up to date
    with the latest information on these popular products of which Cisco is one, we
    will explore it further. Feel free to use your own vulnerability from your results,
    or look up the Cisco figures we have in the results from November 12, 2013.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we click on the vulnerability, another page will open with additional
    details on the vulnerability. We see that it is an input validation problem, and
    this is something we continue to see on a regular basis. Programmers do not do
    a good job of sanitizing their input when developing applications. An example
    of the details of the vulnerability is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing the details of the vulnerability (the cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: As we review the information in the details on the vulnerability, we can start
    to develop our plan on how we will build an environment to test it. In some cases,
    we may need additional hardware. The main point here is to understand the process,
    and once you do, you can take it from there. The process does not change, only
    the vulnerabilities do.
  prefs: []
  type: TYPE_NORMAL
- en: As you review the details of the vulnerability, you may notice that there is
    an item that is called **Common Weakness Enumeration** (**CWE**), and in this
    case it is **CWE-20**. This CWE is the identifier, such as a number of other standards
    we like to use from the team at Mitre, and it can help in gaining additional information
    about a weakness. More importantly, it provides us a standard term to search for,
    much like the **Common Vulnerability and Exposure** (**CVE**) number does.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we select the CWE number on the vulnerability, it will provide us with additional
    details on the vulnerability. An example of this is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing some additional details on the vulnerability (the cropped text
    is not important)
  prefs: []
  type: TYPE_NORMAL
- en: As you review the information, there are lots of additional details on our vulnerability,
    and as such, it provides us with more data for our planning and testing purposes.
    The one thing we want to look at is the fact that there is an area that identifies
    the likelihood of an exploit, and as we see from the previous screenshot in the
    case of the vulnerability that is **High**, it is what we are looking for. Again,
    there are many sites to reference, so you can use the ones we show throughout
    the book, or you can research them on your own. The one thing we have not found
    as we looked at these two sites is more information on the exploit side of the
    equation; this is something we want to have, so we will look at a site for this
    information now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next site we will look at is the site that was number two on the return
    of our search results, and that is the **Security Focus** site. Open the browser
    of your choice and enter [http://www.securityfocus.com](http://www.securityfocus.com).
    This will bring you to the home page for Security Focus; an example of this is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing the home page for Security Focus (the cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: 'As the preceding screenshot shows, it was a bad day for Mozilla on the day
    we did this search. What we like about the **Security Focus** site is they provide
    us with a number of additional details that we find useful, one of them being
    information on exploits. Select one of the vulnerabilities that are listed on
    the home page. An example of the vulnerability for **Mozilla Firefox/Thunderbird/SeaMonkey
    JavaScript Engine Multiple Buffer Overflow Vulnerabilities** is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing the vulnerability for the Mozilla Firefox/Thunderbird/SeaMonkey
    JavaScript Engine Multiple Buffer Overflow Vulnerabilities (the cropped text is
    not important)
  prefs: []
  type: TYPE_NORMAL
- en: 'As you look at the vulnerability details, you will see there are a number of
    tabs that we are interested in, the main being the **exploit** tab. This will
    potentially provide us with information on the exploitability of the vulnerability
    if there is information on an exploit in the wild. Since these vulnerabilities
    are essentially new, there is no information on any exploit. It is still a good
    reference to use because it provides us with additional details on the vulnerability.
    An example of a Nagios vulnerability that we can use in our testing is shown in
    the following screenshot to provide a reference on reading the exploit information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now in business because we have the string to use to leverage the vulnerability,
    and it is just a matter of building the lab and testing it. This will all come
    in time, and for now we will continue to review different sites to use as potential
    references. As we pursue vulnerabilities, the newer the vulnerability the better.
    This is because there are, more than likely, no signatures yet written for the
    vulnerability to detect it; furthermore, if it is a zero day vulnerability, then
    it is not known publically, and that makes it ideal. We have several sites to
    review that provide us with information about zero days, and the first we will
    look at is the site''s zero day tracker. In your browser, enter [http://www.eeye.com/Resources/Security-Center/Research/Zero-Day-Tracker](http://www.eeye.com/Resources/Security-Center/Research/Zero-Day-Tracker).
    A portion of the site is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A portion of the site [http://www.eeye.com/Resources/Security-Center/Research/Zero-Day-Tracker](http://www.eeye.com/Resources/Security-Center/Research/Zero-Day-Tracker)
    (the cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see after visiting the site, it is dedicated to zero day findings.
    This is something we have discussed we want to do in our research, and this site
    provides us an excellent reference for that. So, let us explore the listing further.
    Select one of the vulnerabilities and take a look at the additional details. An
    example of the further details is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you review the screenshot, there are a number of characteristics of the vulnerability
    that we want to look at more closely. We see that no mitigation is currently available.
    This means it cannot be defended against at the time of this disclosure. This
    makes it ideal for adding to our toolbox. You will note that it impacts the Windows
    XP machine, and this is a good indication of why Microsoft continues to try to
    eliminate this from the industry. The OS is quite dated and really needs to be
    replaced; the problem is it has been a trusted OS for so long that people, myself
    included, have enjoyed using it. However, Microsoft has announced that it will
    no longer support it. So, from our testing standpoint, if a vulnerability is released,
    it means there will never be a patch for it, and as such the vulnerability will
    always be there.
  prefs: []
  type: TYPE_NORMAL
- en: Many people in the security community believe that there are a number of Windows
    XP vulnerabilities that attackers have been sitting on, while waiting for the
    end of life for Windows XP. This is because once it is no longer supported, then
    any vulnerability that is released will be ideal for exploitation for the attacker,
    and correspondingly for us, to use in our testing.
  prefs: []
  type: TYPE_NORMAL
- en: You will also note from the screenshot that the vulnerability has been exploited,
    and there is an exploit in the wild for it. Again, these are ideal for our testing
    repertoire; furthermore, they should be a part of our exploit collection for when
    we come across this type of target. This is a part of the process; we identify
    what works in our lab environment, document it, and make it a part of our security
    testing collection.
  prefs: []
  type: TYPE_NORMAL
- en: The other thing to note is the fact that while it is executed at kernel level
    privileges, which is good, the location required is local, which is bad for our
    testing. Well, it is not that bad, it just means we will not be able to remotely
    perform the execution, so we will have to get local access to perform the leverage
    of the vulnerability and, correspondingly, exploit it. As you review vulnerabilities
    such as this, we put the highest priority and preference on the ability to exploit
    remotely, and while this sample exploit is less than ideal, we can still test
    it and see what we would have to do to get the exploit to be successful. Since
    the requirement is local, it means we will more than likely have to use some form
    of baiting to get the client to interact with our bait to be able to exploit it.
    Some of the methods we could use are e-mail, for example, sending an e-mail to
    the site and seeing whether we can trick anyone into clicking on the e-mail. We
    will discuss different methods of baiting and luring victims as we look at the
    different types of testing to emulate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next site we will look at is the zero day initiative site that is sponsored
    by **TippingPoint**, which is now part of HP. In your browser, open the link [http://www.zerodayinitiative.com](http://www.zerodayinitiative.com).
    An example of the site home page is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you review the preceding screenshot, you see that there are sections on **Upcoming
    Advisories** as well as **Published Advisories**. We will focus on **Published
    Advisories**, but **Upcoming Advisories** is also interesting, and you may want
    to explore them on your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are advisories where the vendor has been notified, but the patch has
    not been released. It may surprise you when you see the amount of days passed
    since the vendor has been notified, and the fact that there still is not a patch
    released. However, again, this is something we will not cover here, but it is
    information that''s good to know. We will look at **Published Advisories**. Click
    on **Published Advisories**, and it will bring up a listing of the current published
    advisories, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you review the preceding screenshot, you see some have **CVE**. We can use
    this CVE to track the vulnerability across different tools and sites to gather
    additional information. Moreover, virtually all tools have a cross reference with
    the CVE number, and as such, it makes our job easier. The process is to create
    the lab environment we want to test, then use the tool and see what it does at
    the packet level. To review the information at the packet level, we just use a
    protocol analyzer such as Wireshark or another.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will not cover the site in detail here, but we do want to take a closer
    look at the information that is available within the details of the vulnerability.
    We will select an example that is not shown in the previous screenshot. The vulnerability
    we have selected is in the **Cisco Data Center Manager** that has the CVE number
    **2013-5486** and was patched on **November 24, 2013**. Once we select the vulnerability,
    it brings up additional information on the actual vulnerability itself. As testers,
    we want to research as much as we can about the vulnerability so that we are better
    prepared to emulate it when required in a test environment or out in the field
    when we are testing. An example of the vulnerability is shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of particular interest here is the fact that the vulnerability was reported
    to the vendor on February 22, 2013, and it continued till November 24, 2013\.
    This is the reality of patching; it is not going to save us with respect to security.
    This is good for now since we are testing, but it is bad in the end because we
    are testing and playing offense so we protect ourselves on the defensive side.
    As I like to say, patching is a broken system, but unfortunately it is the only
    system we have when it comes to trying to alleviate these vulnerabilities in our
    software.
  prefs: []
  type: TYPE_NORMAL
- en: All of these sites have gone by the rule of responsible disclosure which involves
    them notifying the vendor and providing them with ample time to build a patch
    and fix the vulnerability. Not all sites will abide by this type of thinking;
    some are what we call full disclosure, that is, as soon as any vulnerability is
    found, they release it with no notice to the vendor. Due to the nature of these
    sites, proceed to them with caution. Additionally, these sites come and go, so
    they often disappear from the Internet for brief periods of time. The important
    thing to note is there will always be sites that do not practice responsible disclosure,
    and these are the sites we want to add to our resources to find ways to validate
    and verify our vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing that has been missing is the fact that there is, for the most
    part, limited exploit code within the sites. **Security Focus** had some information
    on the exploit and some code, but this is as far that we know about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first start with some of the websites that lean toward or are actually
    full disclosure; consequently, most of these have the exploit information or a
    link to it. The first one we will look at is the website from **SecuriTeam**;
    open the link [http://www.securiteam.com](http://www.securiteam.com). This is
    another site with a wealth of information for us, and beyond the scope of exploring
    in full in this book; however, we do want to take a look at some of the excellent
    information and resources that are here. At the right-hand side of the home page,
    you will see information on both exploits and tools, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, this is a site you want to frequent and read some of the resources and
    information on it. The approach will be to get asked to perform testing of an
    environment. Your next step is to plan and prepare your lab; this and the other
    sites we have been discussing provide you that opportunity to look for what is
    out there, and then you attempt to create it in the lab environment so that you
    know what to expect when you enter the testing realm.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now take a look at one of the exploits to see what the site provides
    for us. We will select the exploit tab along the top of the home page and look
    for an exploit of our choice. To follow along, click on **Exploits**. This will
    open the list of exploits that are listed at the time of writing this book, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We selected this section of the listing for a specific reason. We were performing
    a security test for a high-end client around the time of writing this book, and
    during the initial findings during briefing, the client asked us this question:
    "did you find anything on another OS other than Windows?". This question is encountered
    quite often because there is a misconception that Linux or Unix are automatically
    more secure than Windows. We are not going to debate this within the pages of
    this book; moreover, it misses the point of security and that is it is the process
    and not the OS that is the most important thing. That being said, if you do not
    have a patch management process in place, then there will be vulnerabilities found
    no matter the OS that is being used. This was the case here; there were vulnerabilities
    in their Linux and Unix platforms because they did not have an effective vulnerability
    management system in place.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of vulnerabilities in the previous screenshot that are worth
    investigating. However we are going to concentrate on the penultimate one on the
    list; it is in FreeBSD, and it happens to be one of my favorite operating systems
    to deploy in a firewall architecture with the only one getting preference above
    it being **OpenBSD**. Let''s explore this further. An example of the exploit information
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One thing to note on this exploit is the fact that we are connecting to the
    local host, so this is a local exploit, and we would need to be on the local machine
    to exploit it. As has been previously mentioned, this is less than ideal, but
    we could build the lab for this and see if we could exploit it remotely. Again,
    it is the process that counts; we take it from there, and then experiment with
    it to see how we can use it when we encounter, in this case, a FreeBSD machine
    in the field. Of course, we also require that the box be running the telnet service
    for this exploit. Not shown in the previous screenshot, but available on the site,
    is the actual source code for the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: The next site we will look at is **packet storm**. Enter [http://www.packetstormsecurity.com](http://www.packetstormsecurity.com)
    in your browser. Not only does packet storm have advisories and exploit information,
    it is also a repository of files that you can download. For the most part, it
    is a hacking tool or something along the same lines, which you will find here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have reviewed the home page of packet storm, we want to take a look
    at the exploits area. Click on **Exploits** and review the information that comes
    up. There is a huge listing of exploits. An example of the exploit listing is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing an example of the exploit listing (the cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen from other sites, if you click on the exploit title, it will
    provide you with the information, details, and code for the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: We have looked at a number of different sites, and as we discussed, this is
    only a small sample. You are encouraged to explore and discover the ones that
    you want to add to your resource kit outside of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last website we will cover in this section will be the site that, for the
    most part, is our best reference when it comes to finding information on zero
    days to include exploits. The site used is known as millw0rm, but the founder
    had such a difficult task of trying to keep the site up that he closed it down.
    Fortunately, the team at Offensive Security has continued the tradition of the
    original site. In your browser, open the link [http://www.exploit-db.com](http://www.exploit-db.com)
    to bring up the site. As you can see, the site is broken down into sections with
    respect to the location required for the exploit. An example of the site is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As before, we could review the exploits code, but since we have already accomplished
    this, we will look at another feature of the site that is extremely powerful and
    often overlooked. This is the ability to search for exploits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Located at the top of the home page is a menu listing; take a minute and review
    the options. This menu is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing the menu listing located at the top of the home page (the cropped
    text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: The option we want to select is the **Search** option, so click on **Search**.
    This will bring up the search window of the tool and provide us with a number
    of ways to look for exploits. Moreover, we can search by port, CVE, and a multitude
    of methods. This brings our references and resources full circle; we have covered
    numerous ways to obtain this and other details on vulnerabilities, and now this
    provides us with the ability to take it to the next level and search for exploits.
    As such, we now have a complete arsenal for identifying things to use when we
    try to leverage vulnerabilities and exploit a target.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could search for a variety of parameters; the choice is largely dependent
    on what you have discovered during your research. We will provide a simple example.
    We have seen a vulnerability in FreeBSD, so we will search the database and see
    what is contained within with respect to FreeBSD. In the search window, enter
    `FreeBSD` in the **Description** field. Then, click on the **Search** button to
    submit the search to the database, and a number of findings will be returned.
    An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability sites](img/477-1_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Something of interest here is that we do not see the telnet exploit that we
    discovered when we explored the SecuriTeam site. This is why we use a multitude
    of different references and resources when we conduct our research. There is always
    a chance one will have it while another does not. There is a chance the listing
    is under another parameter. So, we could attempt a search using another parameter
    and see what we can come up with. We will not attempt this here because we have
    the exploit code from the earlier site, and as such we could build the lab environment
    and attempt the exploit. We have covered enough when it comes to vulnerability
    sites; furthermore, this provides you with a good foundation that will help you
    find vulnerabilities and attempt to validate them within your lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: Vendor sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We looked at a number of sites that are available for us to use as resources.
    The one thing we have yet to cover is the sites for the vendors. There are some
    good details we can gather from the vendor site. Having said that, as the zero
    day initiative site shows, the vendor does not always provide information on the
    vulnerabilities, unless it is convenient to them. There is one case of a vulnerability
    being reported by Cisco as a denial of service vulnerability, and a security researcher
    not stopping at what the vendor had reported. During his research, it was discovered
    that it was not only a denial of service vulnerability, but it was also a remote
    code execution denial. This event came to be known as "Cisco gate." You can read
    about it at [http://www.wired.com/science/discoveries/news/2005/08/68435](http://www.wired.com/science/discoveries/news/2005/08/68435).
    In short, it explains how a researcher who had followed the rules and told Cisco
    and his company what he was going to present in his findings, was later sued for
    giving a presentation at the Blackhat Conference.
  prefs: []
  type: TYPE_NORMAL
- en: This is not implying that vendors will specifically not release the complete
    details of a vulnerability, it is just that when you use the vendor sites you
    have to take their information and cross reference it with the other sites and
    make a judgment call. If all else fails, then you can lab it up and test it for
    yourself.
  prefs: []
  type: TYPE_NORMAL
- en: As we plan our pen testing lab environment, we want to focus on the vendors
    that you are most likely to encounter, and this cannot be overstated. We know
    that one of the reasons we continue to see so many vulnerabilities in certain
    vendors is because they are the popular ones, and it makes for a better target-rich
    environment for the attackers and us.
  prefs: []
  type: TYPE_NORMAL
- en: Since the majority of the targets you will encounter will be based on Microsoft
    Windows, it makes sense that we start there. An important date to keep track of
    is the second Tuesday of each month, which has been dedicated as *patch Tuesday*
    for Microsoft. Once the listings come out, the hacking community gets together
    and holds all-night "code-a-thons" to see whether they can create exploits for
    the new vulnerability that the entire world knows about on that day! The best
    place to look for exploits of these vulnerabilities is the Exploit Database site
    that will release these exploits as soon as the hackers get them working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft has a vulnerability bulletin number that we can use when trying to
    correlate information from different sites; it is similar to a reference such
    as the CVE, but it is from within Microsoft itself. An example of the Microsoft
    bulletin listing for November 2013 is shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vendor sites](img/477-1_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you review the listing, you see that these three are critical, and these
    are the things we are looking for when it comes to finding our vulnerabilities.
    We have discovered numerous ways to get information, and to use the bulletin number
    as a reference is just another method.
  prefs: []
  type: TYPE_NORMAL
- en: As you may recall from our visit to the Exploit Database site, some of the exploits
    against the Microsoft platforms had a reference to the Microsoft Bulletin number,
    and we will look at the bulletin number of **MS13-009** for reference; here, MS13
    means it is for the year 2013\. Since we have it in the Exploit Database, we know
    there is an exploit for it. Now, the next step for us is to review the exploit
    and see what we can discover about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, when these exploits are here in the Exploit Database, they are already
    part of the metasploit framework. I will consider that almost everyone reading
    this has heard of the outstanding exploit framework now owned by Rapid7, and additionally,
    as a result of that acquisition, now has a commercial version. We will use the
    open source version throughout the book. If by chance you are not familiar with
    the tool, you can discover more information at [http://www.metasploit.org/](http://www.metasploit.org/).
    An example of the home page is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vendor sites](img/477-1_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing [http://www.metasploit.org/](http://www.metasploit.org/) (the
    cropped text is not important)
  prefs: []
  type: TYPE_NORMAL
- en: The site contains excellent references and resources, so you are encouraged
    to review the documentation at the site and add it to your toolbox of reference
    material. The key point is that once we find the exploit has been entered into
    the metasploit framework, it makes our job of testing in our virtual environments
    that much easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our sample exploit of MS13-009 from the Exploit Database site is written for
    the Microsoft Internet Explorer software. This is something that we will more
    than likely encounter as we perform our testing duties, and it has a consistent
    habit of providing us with vulnerabilities virtually on every *patch Tuesday*.
    We will now explore this vulnerability further. When we are in the Exploit Database
    site, we click on **exploit** to open up the exploit code. An example of the header
    of the exploit code is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vendor sites](img/477-1_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screen showing an example of the header of the exploit code (the cropped text
    is not important)
  prefs: []
  type: TYPE_NORMAL
- en: 'As the previous screenshot shows, this exploit is part of the metasploit framework,
    and as such, we can investigate the parameters required for the exploit from within
    the framework. We will select and build an attacker machine in the next section;
    so for now we will show what the exploit looks like in metasploit and not provide
    the details for building the machine. An example of the exploit options from within
    metasploit is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vendor sites](img/477-1_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As the previous screenshot shows, we only have two options we have to set, **SRVHOST**
    and **SRVPORT**, to attempt the exploit. The important point here is that once
    it is in the framework, our task of validation of a vulnerability becomes much
    easier. A word of caution though; just because we have the exploit in metasploit
    does not mean we will be successful. This is why the statement "exploitation is
    not 100 percent" exists.
  prefs: []
  type: TYPE_NORMAL
- en: As we have shown, the vendor sites can be used as an additional source of information,
    but by no means are they the only source. A systematic process is required to
    identify the vulnerabilities of interest and coordinate with multiple sources
    to achieve success.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined the preliminary steps required before attempting
    to build a range. We started with the first step of planning and how important
    it is to plan our architecture. In this section, we identified what we were trying
    to achieve and discussed a plan to make that happen.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at a number of methods we can use to identify our vulnerabilities
    that we want to test within our architecture. Now that we know methods to discover
    vulnerabilities, we are ready to build the foundation of the range. This is so
    that when we discover a new or zero day vulnerability, we can deploy it on our
    range and see what we can do to leverage it and gain access to different targets.
    This foundation will be built in the next chapter.
  prefs: []
  type: TYPE_NORMAL
