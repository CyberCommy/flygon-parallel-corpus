- en: CircleCI CLI Commands and Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered how to get set up using CircleCI in Bitbucket
    and in GitHub and showed you how to navigate the Bitbucket UI and covered the
    basics of the CircleCI Web UI. In this chapter, we will cover how to install CircleCI
    CLI on macOS/Linux and show you how to get a nightly build from the CLI. We will
    go over each CircleCI CLI command in detail and explain how the workflows in CircleCI
    work. We'll show you how to get a more complicated workflow with a sequential
    jobs setup. We will finish by covering the CircleCI API and show you how to use
    the `jq` JSON command utility to transform JSON when using HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI CLI installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CircleCI CLI commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using workflows in CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the CircleCI API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require some basic Unix programming skills and we will build
    upon some of the **continuous integration** (**CI**) and **continuous delivery**
    (**CD**) concepts we have talked about in the previous chapters. It would be useful
    to be somewhat familiar with working with RESTful APIs as we will be using curl
    as a REST client at the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI CLI installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first prerequisite to install CircleCI CLI is to have Docker ([https://docs.docker.com/install/](https://docs.docker.com/install/))
    installed. To install Docker on your OS, visit the Docker store at [https://store.docker.com/search?type=edition&offering=community](https://store.docker.com/search?type=edition&offering=community) and
    click on the **Docker CE** link which is suitable for your OS or cloud service.
    Follow the installation instructions on their website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that Docker is installed by checking the Docker version either on
    a Windows Command Prompt or an macOS/Linux Terminal application by running a command
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e5d2e3e-f37b-4356-927d-2c001b684e2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Here I have Docker version 18 installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CircleCI CLI on macOS/Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to run the following command to install CircleCI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will need to run this in a Terminal application shell session.
  prefs: []
  type: TYPE_NORMAL
- en: Installing nightly build versions of CircleCI through GitHub releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install nightly versions of the CircleCI CLI at the GitHub releases
    page: [https://github.com/CircleCI-Public/circleci-cli/releases](https://github.com/CircleCI-Public/circleci-cli/releases)[.](https://github.com/CircleCI-Public/circleci-cli/releases) You
    will need to look at the Assets section, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/67e6728d-ee02-414c-a6b7-a3c8eb22e1f3.png)'
  prefs: []
  type: TYPE_IMG
- en: We will pick the `circleci-cli_0.1.771_darwin_amd64.tar.gz` asset as we will
    be running the local CLI on the macOS OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands in a Terminal shell session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a newer version of the CircleCI CLI and can verify this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9cf3e70-6862-46b8-bfc7-26d2374f5d68.png)'
  prefs: []
  type: TYPE_IMG
- en: We have named this binary executable `circleci-beta`. This is so we can run
    the stable and nightly versions of CircleCI CLI. This is not something that you
    will have to do; we are doing this for illustration purposes only.
  prefs: []
  type: TYPE_NORMAL
- en: CircleCI CLI commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CircleCI CLI is not as fully featured as the Travis CI CLI in terms of feature
    parity with all the features that you can actually use in CircleCI. More commands
    will become available in the future, but at the moment you have six commands that
    you can use in CircleCI CLI, which are `build`, `config`, `help`, `step`, `tests`,
    and `version`, if you use the CircleCI CLI binary in AWS releases ([https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci](https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci))
    from the official CircleCI documentation. We will be using both the stable build
    version and the nightly build version, which has several more commands than the
    stable version. Remember that we installed in the *Installing nightly build versions
    of CircleCI through GitHub releases* section of this chapter. The stable version
    of the command will be `circleci` and the nightly build will be `circleci-beta`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we run the `help` command which shows the available
    commands and gives us a brief overview of what each command does:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9b84382-b46d-4674-ab85-9d64b56173fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Version command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `version` command outputs the current version of the CLI that you have
    installed on your local system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de730070-ae1c-42ac-8b74-1d24e0ef3032.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also pass a flag/option to each command in the CLI and you can find
    the options that a command takes by running the `--help` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/42c7f35c-48e2-48bd-998a-fcd9188d6ea0.png)'
  prefs: []
  type: TYPE_IMG
- en: There is only one option we can pass to the `version` command, which is `-h`,
    `--help` as this is a very simple command.
  prefs: []
  type: TYPE_NORMAL
- en: Help command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `help` command will show all the CLI commands, as we demonstrated at the
    beginning of this section, but it can also be used to explain how each command
    works and will display any flags/options that each command takes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc870348-c0c8-412d-9fd4-a62c926e929e.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we ran help on the `help` command itself.
  prefs: []
  type: TYPE_NORMAL
- en: Config command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `config` command validates and updates the CircleCI configuration YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/14bdd3d0-5df0-4e41-aacf-aaa0b0d555c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Here the `config` command also takes the `validate` command, which validates
    your config YML script file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us validate the configuration script in the `functional-summer` repo ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c4d99005-c7f1-4ce5-94b5-115781f8e0fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us look at the configuration script again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is actually a very subtle bug in the config YML script where we simply
    need to indent the `build` field because CircleCI thinks that we do not have any
    jobs in our script. To fix the issue, we simply need to indent the `build` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/57677a87-6dc3-49e9-8113-0de69a9c0863.png)'
  prefs: []
  type: TYPE_IMG
- en: When we ran the `validate` command, it reported that the config YML script is
    valid.
  prefs: []
  type: TYPE_NORMAL
- en: Build command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `build` command helps you run a CircleCI build on your local machine and
    takes a variety of options as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/352fae0a-159c-40e6-b69d-be17fc023ba7.png)'
  prefs: []
  type: TYPE_IMG
- en: Let us run the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci))[ ](https://github.com/packtci/go-template-example-with-circle-ci)GitHub
    repository that we created in [Chapter 12](b65e7e26-1e86-44fc-a912-34de30c085ac.xhtml),
    *Installation and Basics of CircleCI*, and then run the `circleci build` command
    on our local system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you go into the directory where your repository lives before
    you run the build command as it needs to read the `config.yml` file inside of
    the `.circleci` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d0cbff8c-3ea5-4b78-9047-030e15dec87b.png)'
  prefs: []
  type: TYPE_IMG
- en: The `build` command will execute the steps in the config YML script, starting
    by spinning up an environment. If you have not pulled the language image specified
    in the config YML script then the `circleci build` command will pull down the
    Docker image for you.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `circleci build` command will run the steps that are defined
    in the `build` field in the `jobs` section, so if you want to run any other jobs
    than you will need to pass the `--job string` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the current `config.yml` script that we have in the `go-template-example-with-circle-ci`
    GitHub project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to use another job, we can use the `--job string` option, assuming
    that there is another job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us validate our config YML script to make sure that it is still valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3cb68165-ad8a-4945-9822-1dce13ec5dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know our config YML script is still valid, we can run the new job
    using the `--job string` flag with the `build` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/51212ff6-1664-4cd8-a934-c4ce2bef6c02.png)'
  prefs: []
  type: TYPE_IMG
- en: Here the CLI is downloading the Docker image because we have not pulled this
    particular Docker image into our local computer.
  prefs: []
  type: TYPE_NORMAL
- en: step command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `step` command will execute a specific step in your config YML script that
    you have defined. At the moment, there is only one sub command of `halt`, which
    will halt the current execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample run of the `step` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: configure command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `configure` command is only available with the nightly build version of
    CircleCI and it helps you configure your credentials and the API endpoint you
    will hit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8029ac68-e023-49fb-9ae3-e6cb97c53c96.png)'
  prefs: []
  type: TYPE_IMG
- en: We will run the `configure` command with no flags, which will set it to an interactive
    mode, and then we will set our API token and the API endpoint we wish to hit.
  prefs: []
  type: TYPE_NORMAL
- en: Setting an API token with CircleCI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to click on your user avatar in the upper-right side of the CircleCI
    web application, which looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b52aeda5-fd1e-4896-b976-68edc24f0cf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the User settings link you will be redirected to the accounts
    API page which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e9b20cb-f2ed-4f3b-9aa7-477a40725725.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next you will need to click on the Create New Token button, which pops up a
    modal like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c710dd6e-0d34-4470-8940-8044863841c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we put in a token name of `PacktCI`. Then we simply click on the Add API
    Token button, which will generate a new API token for us. You need to copy the
    API token into a safe location as you can only use it once.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the API token and API endpoint in interactive mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will run the `circleci-beta configure` command in a Terminal session and
    set our credentials and API endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c3d3c273-d75e-424f-a810-3586cbf79dc5.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we set the API token but the value is hidden for security purposes, and we
    set the API Endpoint to `https://circleci.com/api/v1.1/`.
  prefs: []
  type: TYPE_NORMAL
- en: The `configure` command is only available in the nightly release and not the
    stable release.
  prefs: []
  type: TYPE_NORMAL
- en: Tests command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `tests` command collects and splits files with tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/976efbd2-7629-4cbd-8165-808896377642.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us use the `glob` subcommand to find all the Go test files in the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)) GitHub
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a1396e90-838a-4cf3-ac36-01701e16b79b.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Workflows in CircleCI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Workflows in CircleCI are a way to run parallel `build` jobs and can be used
    to define a collection of jobs and to specify a job order. Let us add a workflows
    field to the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)) configuration
    YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this workflow, we create two parallel jobs called `build` and `integration`
    respectively. They are independent of each other and this will help speed up the
    build process.
  prefs: []
  type: TYPE_NORMAL
- en: Workflows in action in CircleCI Web UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can see the workflows in the CircleCI web UI if we click on the Workflows
    link in the left navigation pane. You then need to click on a specific project
    which in this case is `go-template-example-with-circle-ci` as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a9b667b7-79ee-4b5b-bf55-01c74a56b22c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the RUNNING workflow, you will see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/97bbc387-2a2f-4664-bbc4-83b686d00cb5.png)'
  prefs: []
  type: TYPE_IMG
- en: The build job ran in 2 seconds but that the integration tests run for longer
    than the build job. It is better to separate these two jobs, as the workflows
    demonstrate, as they are not dependent on each other.
  prefs: []
  type: TYPE_NORMAL
- en: Sequential workflows example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The workflows example that we showed you previously contained two jobs that
    ran independent of each other, but we can also have jobs that require other jobs
    to finish in order to be run. Let us say that we have an acceptance test suite
    that only runs if the build is run, and then our application is only deployed
    if the acceptance test suite passes.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we run an end-to-end test using `cypress.io` ([https://www.cypress.io/](https://www.cypress.io/)), which
    is an end-to-end JavaScript testing library. Assuming that our acceptance tests
    pass in the CI build we can then deploy  our application to Heroku. We covered
    getting set up with Heroku in [Chapter 11](f2319c39-b2e4-40cb-b1bb-53daa589776b.xhtml),
    *Travis CI UI Logging and Debugging*, in the *Heroku setup in Travis CI* section,
    so read that if you need more information on getting Heroku installed and set
    up and for creating an application in Heroku that you can deploy to. We will need
    to add our Heroku API key and app name as environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Adding environment variables to a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our CircleCI project, we first need to go to our project settings by clicking
    on the gear icon next to the `go-template-example-with-circle-ci` ([https://circleci.com/gh/packtci/go-template-example-with-circle-ci](https://circleci.com/gh/packtci/go-template-example-with-circle-ci))
    project. Make sure that you are in the Jobs or Workflows view and then you should
    see a gear icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/66fc9596-b687-45d3-ad52-a4c1640dacc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the gear icon, you will be redirected to the PROJECT SETTINGS
    page and you will need to click the Environment Variables link. Then your page
    will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/adc3a7b8-517b-4dd3-ad0d-e7826c795c22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to add two environment variables to our project by clicking on
    the Add Variable button, which pops up a modal like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9befa423-c161-4e90-92a7-4c87e656a223.png)'
  prefs: []
  type: TYPE_IMG
- en: For security purposes, I have removed the contents of both the application name
    and the API token for the project, but once you click the Add Variable button,
    an environment variable is available in the project. We now have two environment
    variables we can use, namely `HEROKU_API_KEY` and `HEROKU_APP_NAME`. These environment
    variables will be available in our `.circleci/config.yml` script.
  prefs: []
  type: TYPE_NORMAL
- en: Updated workflows section and config YML script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our config YML script now has a deploy `jobs` section and we have updated our
    workflows field like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The workflow for this change will look different now, as we have set up a sequential
    pipeline for the jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02303299-1a33-42ee-acbf-d6477921db32.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot the build job ran first and then the integration
    job and finally the deploy job. Read the workflows documentation at [https://circleci.com/docs/2.0/workflows/](https://circleci.com/docs/2.0/workflows/)
    for information on more types of workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the CircleCI API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CircleCI API documentation is available at [https://circleci.com/docs/api/v1-reference/](https://circleci.com/docs/api/v1-reference/).
    To get started working with the API you will need to add an API token. We already
    set an API token in the *Setting an API token with CircleCI* section of this chapter,
    so read that section if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Test CircleCI API connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `curl` command and our API token to test that we have a good
    CircleCI API connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ec44ad31-573a-413f-bcf9-74d25ceb84c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we did not get any response headers or a status code. In order for you
    to receive those, you need to use the `-i`, `--include` options with the `curl`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CircleCI API to get build summary for a single Git repo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the `GET /project/:vcs-type/:username/:project` API endpoint to
    get the build summary information. You can read the documentation for recent builds
    for a single project at [https://circleci.com/docs/api/v1-reference/#recent-builds-project](https://circleci.com/docs/api/v1-reference/#recent-builds-project).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we use the `curl` command to make the REST call
    and use the `jq` ([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/))
    JSON command-line processor to prettify the JSON output as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c394b673-bb14-4445-9d0b-cca3ef7d8d9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the jq utility to compute some metrics of our CircleCI builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us use the `jq` command-line utility in order to compute some metrics with
    information provided by the CircleCI API. One thing we may want to find is all
    the builds that have passed in the project. We can do this with the `jq` command
    by using the `map` and `select` built-in functions in jq ([https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions](https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we get the build summary for the last 30 builds
    and then only show the build that actually passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b06e7b2-40d1-4e8c-8d41-cc1e3f0f6729.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we run the `jq` utility with two different queries:'
  prefs: []
  type: TYPE_NORMAL
- en: The first query is `jq 'map(select(.failed == false)) | length'` and it maps
    over the array of objects and filters out the top-level attribute called `failed`
    when it is `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second query is `jq '. | length'` and it simply computes the length of the
    array, which is `5`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We ran the second command to ensure that the first command did in fact filter
    out some entries in the response payload. From this, we can tell that one build
    did fail in the recent 30 builds for the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci))
    GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how to install CircleCI CLI in the macOS/Linux environments
    and showed you how to install a nightly build of the CLI. We showed you how to
    use each command in the CircleCI CLI and also showed you some command features
    that are available in the nightly build of CircleCI CLI. We explained why workflows
    are useful and how to use them in CircleCI. Finally, we showed you how to use
    the CircleCI API and how to gather useful metrics by using the `jq` command utility.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the primary prerequisite to installing the CircleCI CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where did we get the nightly build of CircleCI CLI from?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many CLI commands exist for the CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command in the CLI is useful to know what a specific command does and
    what options a given command takes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we run parallel jobs in CircleCI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command did we use to validate our CircleCI YML script?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the endpoint for the CircleCI RESTful API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can further explore concepts in CircleCI by looking at the official CircleCI
    documentation at [https://circleci.com/docs/2.0/](https://circleci.com/docs/2.0/).
  prefs: []
  type: TYPE_NORMAL
