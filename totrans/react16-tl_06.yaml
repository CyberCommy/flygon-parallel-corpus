- en: Enforcing Code Quality to Improve Maintainability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wouldn't it be nice if a project's code were consistent and easy to read? The
    reason that this isn't often the case is because enforcing such a level of code
    quality is burdensome. When something is a burden when done manually, you introduce
    a tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'The focus of this chapter is on using tools that assist with making sure that
    your React code quality is up to standards. Here''s what you''ll learn in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring ESLint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running ESLint on React source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting configuration help from Airbnb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linting JSX and React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating ESLint with your code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing ESLint errors and warnings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting code automatically with Prettier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring ESLint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to automating the quality of your React source code is installing
    and configuring the tool used to automate it—ESLint. When ESLint is installed,
    it installs an `eslint` command on your system. Like other packages that install
    commands, it's better to have them installed locally as part of the project, so
    that you don't have to rely on the command being available globally on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install ESLint in your project, run the following `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have ESLint installed, you can create a new npm script that will
    run ESLint for you. Add the following to the `scripts` section of your `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You now have an `eslint` command that you can run within your project. Try
    it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of linting any of your source files, you should see a usage message
    in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, you have to tell the `eslint` command which files or directories
    you want to lint. To keep things simple, let''s assume that all of our code is
    in the same directory as `package.json`. You can modify your `package.json` file as
    follows so that ESLint knows where to look for files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Did you notice the dot (`.`) added after `eslint`? This means the current directory
    on most systems. Go ahead and run `npm run lint` again. This time, you''ll see
    a different output as ESLint is actually attempting to find source files to lint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, so let''s do what it''s telling us to do. We''ll run `npm run lint --
    --init` to create a configuration file. When you do this, you''re presented with
    a number of options to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go with the first option for now and answer some basic questions about
    the code you plan on writing. With the option selected, pressing *Enter* brings
    you to the first question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Yes, you are.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Yes, you are.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Select `Browser`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Nope.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Nope. We'll get into JSX later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Use whatever you like here, because I'll inevitably be wrong.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Single. What are you, an animal?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Unix is a safe bet here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a tricky one. Semicolons aren''t a requirement in JavaScript source.
    There are times where they can help, while other times they''re just added syntax
    for something that the JavaScript interpreter already understands. If you''re
    unsure, require semicolons; you can always change your ESLint configuration later
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Use whatever you''re most comfortable with reading and editing. I''m going
    to stick with the default option of JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Hooray! Let''s try running this again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'No output this time. This just means that ESLint didn''t find any errors. Part
    of that has to do with the fact that there''s no code in the project yet, but
    you now have a known working starting point. Let''s take a quick look at the `.eslintrc.js`
    file that was created for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Since you've answered the questions required to create this file, you don't
    need to change anything yet. When you do, this is the file to edit. When you're
    just learning ESLint, typing out a configuration file like this can be off putting.
    In time, when you decide that your code quality standards need tweaking, the ESLint
    rules reference ([https://eslint.org/docs/rules/](https://eslint.org/docs/rules/))
    is a great resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the  final step to setting up and configuring ESLint for your project, let''s
    introduce some source code to lint. Create an `index.js` file if it doesn''t already
    exist, and add the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about running this function, linting does not serve the same purpose
    as testing or types. Instead, linting provides the developer with easy-to-miss
    hints about something they've done wrong from a code-quality perspective. Correctness
    is different from code quality. This means that you have a wide variable of tweakable
    options with ESLint that tell it how to evaluate your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, back to the function you''ve just added. You can verify that this function
    is okay by running `npm run lint` again. Sure enough, the function is good according
    to the rules that you''ve configured in `.eslintrc.js`. Now, try removing the
    semicolon from the function so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, you get an error from ESLint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This is the exact kind of output you need. It gives you the name of the source
    file, the location of the error/warning in the file, and describes the actual
    problem that was found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try one more. Go ahead and restore the semicolon that you deleted. Now,
    delete the `export` statement so that your function definition looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you get a different error when this code is linted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Because you've removed the `export` keyword, the module is just a function assigned
    to `myFunc`. It's never used, and ESLint was able to tell you about it.
  prefs: []
  type: TYPE_NORMAL
- en: Building on Airbnb standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations that have large JavaScript code bases have invested heavily in
    code quality tools. This includes investments in configuring tools like ESLint.
    The great part about using a standard set of configuration values for enforcing
    code quality is that you don't have any discrepancies between developers due to
    a slight configuration difference.
  prefs: []
  type: TYPE_NORMAL
- en: 'ESLint allows you to install and use npm packages as configuration settings
    to use and extend. A popular choice is the Airbnb standard. Let''s use the ESLint
    `init` tool again to get started with Airbnb JavaScript code quality standards.
    First, run the `init` tool again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The first question asks you how you want to configure ESLint. Instead of answering
    questions, you can choose a guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The next question lets you choose which guide to follow. You want Airbnb''s
    guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, ESLint will install the necessary npm packages for using Airbnb''s ESLint
    configuration settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what the `.eslintrc.js` file that ESLint created looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there''s very little to this file now because everything is
    handled by the `airbnb-base` npm package. Your `.eslintrc.js` is simply extending
    it. So let''s see some of these Airbnb rules in action. Add the following code
    to `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `maybe()` function returns the argument if it's truthy; otherwise, it returns
    the string `default`. Then, `maybe()` is called with a string value, and no value
    at all. The comments indicate the output of these two function calls. Feel free
    to run this code to make sure that it works as advertised.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you do that, let''s see what Airbnb thinks about your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Four problems! Ouch. Let's walk through each of them and see what can be done.
    The first error is `no-confusing-arrow`, which says that an arrow function was
    used ambiguously with a comparison operator. You can go look at the specifics
    of each error ([https://eslint.org/docs/rules/](https://eslint.org/docs/rules/))
    where you'll find detailed explanations and examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next error, `no-unneeded-ternary`, is closely related to the first error.
    It states that we can use a simpler expression than a ternary, which should help
    with the readability of your code. So let''s try it out. The `maybe()` function
    is supposed to return either the argument or some default value if the argument
    is falsy. Instead of a ternary operator, let''s try using a logical OR (||):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s a slight improvement in readability here, definitely less syntax.
    What''s more important about the minor improvement itself is the fact that every
    developer working on this code base will make the same minor improvement. Let''s
    see what `npm run lint` says now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! You''re down to two warnings. But these are just complaining about
    your `console.log()` calls. Clearly, the Airbnb ESLint rules don''t like that,
    but you do. Since you''re just using the Airbnb rule settings as a starting point
    by extending them, you can also turn them off. In your case, the `no-console`
    rule is serving no purpose since you clearly rely on it. To do so, edit your `.eslintrc.js`
    file to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: After the `extends` section of the ESLint configuration, you can add a `rules`
    section where you can turn off specific rules that are defined by `airbnb-base`.
    In this example, setting `no-console` to `0` tells ESLint that it shouldn't report
    these warnings. Let's run `npm run lint` one more time to see if this has fixed
    everything.
  prefs: []
  type: TYPE_NORMAL
- en: Sure enough, there are no more errors to report!
  prefs: []
  type: TYPE_NORMAL
- en: Adding React plugins to ESLint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that you want to use the Airbnb set of ESLint rules after having
    tried it out and liking it. Let''s also assume that you want to lint your React
    component code as well. During the ESLint `init` process, you''ve answered `No`
    to the question that asks whether or not your project uses React. This time, let''s
    say `Yes`. So, once again, run the ESLint `init` process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'And once again, you want to use the Airbnb lint rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'When it asks if you use React, say `Yes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll notice that a couple of extra packages are installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s write some React code so that we can lint it. Add the following
    component to `MyComponent.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is how this component is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You don''t need to worry about running this React app in your browser; this
    is just so that you can make sure that ESLint is able to parse JSX and lint it.
    Let''s try running ESLint now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the errors this source code generates when linted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You have errors in both source files to deal with. Let's walk through each of
    these errors now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first error from `index.js` is `no-undef` and it''s referring to a `document`
    identifier that doesn''t exist. The thing is, you know that `document` is an identifier
    that exists globally in a browser environment. ESLint doesn''t know that this
    global identifier is defined, so we have to tell it about the value in `.eslintrc.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In the `globals` section of the ESLint configuration, you can list the names
    of global identifiers that ESLint should recognize. The value should be `true`
    if the identifier is in fact globally available to source code that references
    it. This way, ESLint knows not to complain about something that is recognized
    as a global identifier in a browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem with adding globals for identifiers that exist in a specific environment,
    like a web browser, is that there are a lot of them. You wouldn''t want to have
    to maintain a list like this just so that ESLint passes your source code. Thankfully,
    ESLint has a solution for this. Rather than specifying `globals`, you can specify
    the environment that your code will be running in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `browser` environment specified as `true`, ESLint knows about all
    of the browser globals and will not complain when it finds them in your code.
    Further, you can specify multiple environments, as it''s common to have code that
    runs both in the browser and in Node.js. Or even if you don''t share code between
    environments, you might want to lint a project that has both client and server
    code. In either case, here''s what multiple ESLint environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The next error to fix is `react/jsx-filename-extension`. This rule comes from
    the `eslint-plugin-react` package that was installed when you initialized your
    ESLint configuration. The rule expects you to name files that contain JSX syntax
    using a different extension. Let's assume that you don't want to bother with this
    (not that I would blame you, that's a lot of effort to maintain two file extensions
    for almost the same type of file contents). Let's disable this rule for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the updated ESLint configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `react/jsx-filename-extension` rule is ignored by setting its value to `0`
    in the `rules` section of the configuration. Go ahead and run `npm run lint` again.
    We're down to two errors now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `comma-dangle` rule is opinionated to be sure, but it''s an interesting
    idea. Let''s zoom in on the offending code that triggered this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'ESLint is complaining that there''s no trailing comma after the `root` argument.
    The idea is that when trailing commas are added:'
  prefs: []
  type: TYPE_NORMAL
- en: It's easier to add items later on because the comma is already there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It leads to cleaner diffs when you commit code because adding or removing items
    only requires changing one line instead of two
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s assume that this makes sense and you decide to keep this rule (I like
    it), here''s what the fixed code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s run `npm run lint` again. One error left! It''s another React-specific
    error: `react/prefer-stateless-function`. Let''s take another look at your React
    component that triggered this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'ESLint, with the help of `eslint-plugin-react`, is telling you that this component
    should be implemented as a function instead of a class. It says this because it
    was able to detect that `MyComponent` doesn''t have any state and it doesn''t
    have any life cycle methods. So if it were implemented as a function, it:'
  prefs: []
  type: TYPE_NORMAL
- en: Would no longer depend on the `Component` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Would be a simple function with far less syntax than a class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Would be obvious that there are no side-effects with this component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these benefits in mind, let''s go ahead and refactor `MyComponent` into
    a pure function as the ESLint error suggests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'And when you run `npm run lint`, you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Woops, you''ve introduced a new error in the process of fixing another. No
    big deal, this is why you lint your code, to find things that are easy to miss.
    In this case, it''s the `no-unused-vars` error because we forgot to take out the
    `Component` import. Here''s the fixed version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: And you're done, no more errors! With the help of `eslint-config-airbnb` and
    `eslint-plugin-react`, you were able to produce code that any other React developer
    will have an easy time reading because chances are they're using the exact same
    code quality standards.
  prefs: []
  type: TYPE_NORMAL
- en: Using ESLint with create-react-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everything you've seen so far in this chapter, you've had to set up and configure
    yourself. Not that getting ESLint up and running is particularly difficult or
    anything, but `create-react-app` abstracts this away completely. Remember, the
    idea with `create-react-app` is start writing component code as soon as possible,
    without having to think about configuring things like linters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in action, let''s create a new app using `create-react-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, start the app as soon as it''s created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s get ESLint to complain about something. Open up `App.js` in your
    editor—it should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'ESLint thinks this is fine, so let''s delete the `Component` import so that
    `App.js` looks like this now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `App` class is now trying to extend `Component`, which doesn''t exist.
    Once you save the file, ESLint will be invoked as it''s integrated with the development
    server as a Webpack plugin. In the dev server console, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: As expected, ESLint detects the issue for you. What's nice about having ESLint
    integrated with the development server is that you don't have to remember to invoke
    the `npm run lint` command. If ESLint doesn't pass, the entire build fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only are you notified about the failed build in the dev server console,
    but you''re also notified directly in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3f406b4c-3879-49c6-a61c-e8ad026edb07.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that even if you forget to look at the server console, it's hard
    to miss the one that replaces your entire UI. If you undo that change that intentionally
    broke ESLint (add the `Component` import back), your UI shows up once again as
    soon as you save `App.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Using ESLint in a code editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to take linting your `create-react-app` code a step further, you
    can. If you're in the middle of writing component code, the last thing you want
    to have to do is switch to either the console or the browser window, just to see
    if what you're writing is good enough. For some people, a better development experience
    is to see the lint errors as they happen, in their editors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to do this with Atom. First, you need to install
    the `linter-eslint` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d459320f-f325-4d75-9d75-08006e6a1ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now when you open JavaScript source files in Atom, this plugin will lint them
    for you and display errors and warnings inline. The only challenge is that `create-react-app`
    doesn't actually create an `.eslintrc.js` file for you. This is because the nature
    of `create-react-app` is to hide all configuration from you by default.
  prefs: []
  type: TYPE_NORMAL
- en: However, ESLint is still configured by `create-react-app`. This is how your
    source is linted when you start the development server. The problem is that you
    might want to use this configuration in your editor linter. There is a package
    installed by `create-react-app` called `eslint-config-react-app` that contains
    the ESLint configuration used by the development server. You can use this in your
    own project so that your editor linter is configured the same as anything that
    is output in the browser or the console. This is really important, the last thing
    you want is to have your editor telling you one thing about your code while you
    don't see any issues in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open up `App.js` in Atom, you shouldn''t see any lint errors because:'
  prefs: []
  type: TYPE_NORMAL
- en: There aren't any
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `linter-eslint` Atom plugin isn't running because it didn't find any configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s what the file looks like when there are no errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5bc16047-7d07-42f8-8a6b-638eb78bfc22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All you have to do is add ESLint configuration that extends the `eslint-config-react-app`
    configuration. In the root of your project, create the following `.eslintrc.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the Atom `linter-eslint` plugin will attempt to lint your open source files
    on-the-fly. Further, it will use the exact same configuration as your `create-react-app`
    dev server. Let''s try deleting the `Component` import again. Things look a little
    different in your editor now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/86c8361e-2d5b-4dec-aebe-2da5b875a01b.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the `Component` identifier is underlined in red so that this
    portion of your code stands out. Underneath your source, there is a pane that
    shows a list of every linter error found, along with more details about each error.
    If you were to run `npm start`, you would see the exact same error in the dev
    server console and in the browser because Atom is using the same ESLint configuration
    as `create-react-app`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s get rid of this error. Go to the following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it back to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: There should be no more linter errors visible in your editor.
  prefs: []
  type: TYPE_NORMAL
- en: Automating code formatting with Prettier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ESLint can be used to improve any aspect of your code, including how it's formatted.
    The problem with using something like ESLint for this job is that it only tells
    you about the formatting issues that it finds. You still have to go fix them.
  prefs: []
  type: TYPE_NORMAL
- en: This is why the ESLint configuration from `create-react-app` doesn't specify
    any code formatting rules. This is where a tool like Prettier comes in. It's an
    opinionated code formatter for your JavaScript code. It understands JSX out of
    the box, so it's ideally suited to format your React components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `create-react-app` user guide has a whole section on setting up Git commit
    hooks that trigger Prettier to format any code before it''s committed: [https://github.com/facebookincubator/create-react-app#user-guide](https://github.com/facebookincubator/create-react-app#user-guide).'
  prefs: []
  type: TYPE_NORMAL
- en: I won't repeat this guide here, but the basic idea is that having Git hooks
    in place that invoke Prettier on any JavaScript source that's committed will ensure
    that everything is formatted, well, pretty. The downside to only relying on Git
    commit hooks is that you as a developer don't necessarily see the formatted code
    as you're writing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to setting up Prettier to format JavaScript source with every commit,
    adding a code editor plugin can vastly improve the development experience. Once
    again, you can install the appropriate Atom package (or something similar; Atom
    is popular so I''m using it as the example editor here):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/de3701a4-2d78-41d9-bf86-3955c992be2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have the `prettier-atom` package installed, you can use Atom to format
    your React code. By default, this package uses the key binding *Ctrl* + *Alt* + *F*
    to invoke Prettier to format the current source file. Another option is to enable
    formatting on save:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/74792524-4085-43ba-9221-f16b4ab2cea1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, every time you save your JavaScript source, Prettier will format it. Let''s
    test it out. First, open up `App.js` and completely trash the formatting so that
    it looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7ad2ee5c-1e86-4853-9397-92c2c206e72f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Gross! Let''s save the file and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/29c76647-3a04-45ef-ba5a-05c2277c363b.png)'
  prefs: []
  type: TYPE_IMG
- en: That's way better. Imagine if you had to manually fix that mess. Prettier keeps
    your code clear with hardly any thought on your part.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was all about enforcing the code quality level of your React projects
    using tools. The first tool you learned about was ESLint. You learned how to install
    and configure it. Rarely should you have to manually configure ESLint. You learned
    how to use the ESLint initialization tool that walks you through the various options
    available for configuring your ESLint rules.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned about the different standard ESLint configurations that you
    can utilize in your React applications. Airbnb is a popular standard you can use
    with ESLint, and you can customize it rule by rule to fit your team's particular
    style. You can also tell the ESLint initialization tool that you're planning on
    using React and have it install the appropriate packages for you.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned how ESLint is used by `create-react-app`. It uses a Webpack
    plugin to lint your code when the development server is run. You learned how `create-react-app`
    configures ESLint for this, and how you can use this configuration for your code
    editor. Prettier is a tool that will automatically format your code so that you
    don't have to spend time manually addressing lots of ESLint style warnings.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about isolating React component development
    in their own environments using Storybook.
  prefs: []
  type: TYPE_NORMAL
