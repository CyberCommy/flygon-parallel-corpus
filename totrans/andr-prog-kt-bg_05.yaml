- en: Chapter 5. Beautiful Layouts with CardView and ScrollView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the last chapter on layouts before we spend some time focusing on Kotlin
    and object-oriented programming. We will formalize our learning on some of the
    different attributes we have already seen, and we will also introduce two more
    cool layouts: `ScrollView` and `CardView`. To finish the chapter off, we will
    run the `CardView` project on a tablet emulator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling a quick summary of UI attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building our prettiest layout so far using `ScrollView` and `CardView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching and customizing themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and using a tablet emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by recapping some attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes – a quick summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few chapters, we have used and discussed quite a few different attributes.
    I thought it would be worth a quick summary and further investigation of a few
    of the more common ones.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing using dp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we know, there are thousands of different Android devices. Android uses **density-independent
    pixels**, or **dp**, as a unit of measurement to try and have a system of measurement
    that works across different devices. The way this works is by first calculating
    the density of the pixels on the device an app is running on.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can calculate density by dividing the horizontal resolution by the horizontal
    size, in inches, of the screen. This is all done on the fly on the device on which
    our app is running.
  prefs: []
  type: TYPE_NORMAL
- en: All we have to do is use `dp` in conjunction with a number when setting the
    size of the various attributes of our widgets. Using density-independent measurements,
    we can design layouts that scale to create a uniform appearance on as many different
    screens as possible.
  prefs: []
  type: TYPE_NORMAL
- en: So, problem solved then? We just use `dp` everywhere and our layouts will work
    everywhere? Unfortunately, density independence is only part of the solution.
    We will see more of how we can make our apps look great on a range of different
    screens throughout the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we can affect the height and width of a widget by adding the
    following code to its attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, we can use the attributes window and add them through the comfort
    of the appropriate edit boxes. Which option you use will depend on your personal
    preference, but sometimes one way will feel more appropriate than another in a
    given situation. Either way is correct and, as we go through the book making apps,
    I will usually point out if one way is *better* than another.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the same `dp` units to set other attributes, such as margin
    and padding. We will look more closely at margins and padding in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing fonts using sp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another device-dependent unit of measurement used for sizing Android fonts is
    **scalable pixels**, or **sp**. The `sp` unit of measurement is used for fonts,
    and is pixel density-dependent in the exact same way that `dp` is.
  prefs: []
  type: TYPE_NORMAL
- en: The extra calculation that an Android device will use when deciding how big
    your font will be based on the value of `sp` you use is the user's own font size
    settings. So, if you test your app on devices and emulators with normal-size fonts,
    then a user who has a sight impairment (or just likes big fonts) and has their
    font setting set to large will see something different to what you saw during
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try playing with your Android device''s font size settings,
    you can do so by selecting **Settings | Display | Font s** **e**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sizing fonts using sp](img/B12806_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, there are quite a few settings, and
    if you try it on **Huge,** the difference is, well, huge!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set the size of fonts using `sp` in any widget that has text. This includes
    `Button`, `TextView,` and all the UI elements under the **Text** category in the
    palette, as well as some others. We do so by setting the `textSize` property as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As usual, we can also use the attributes window to achieve the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Determining size with wrap or match
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also decide how the size of UI elements, and many other UI elements,
    behave in relation to the containing/parent element. We can do so by setting the
    `layoutWidth` and `layoutHeight` attributes to either `wrap_content` or `match_parent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say we set the attributes of a lone button on a layout to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the button will expand in both height and width to **match** the **parent**.
    We can see that the button in the next image fills the entire screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Determining size with wrap or match](img/B12806_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'More common for a button is `wrap_content`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This causes the button to be as big as it needs to be to **wrap** its **content**
    (width and height in `dp` and text in `sp`).
  prefs: []
  type: TYPE_NORMAL
- en: Using padding and margin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have ever done any web design, you will be very familiar with the next
    two attributes. **Padding** is the space from the edge of the widget to the start
    of the content in the widget. The **margin** is the space outside of the widget
    that is left between other widgets – including the margin of other widgets, should
    they have any. Here is a visual representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using padding and margin](img/B12806_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can set padding and margin in a straightforward way, equally for all sides,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Look at the slight difference in naming convention for margin and padding. The
    padding value is just called `padding,` but the margin value is referred to as
    `layout_margin`. This reflects the fact that padding only affects the UI element
    itself, but margin can affect other widgets in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, we can specify different top, bottom, left, and right margins and padding,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Specifying the margin and padding values for a widget is optional, and a value
    of zero will be assumed if nothing is specified. We can also choose to specify
    some of the different side's margins and padding but not others, as in the earlier
    example.
  prefs: []
  type: TYPE_NORMAL
- en: It is probably becoming obvious that the way we design our layouts is extremely
    flexible, but also that it is going to take some practice to achieve precise results
    with these many options. We can even specify negative margin values to create
    overlapping widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a few more attributes, and then we will go ahead and play around
    with a stylish layout, `CardView`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the layout_weight property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Weight refers to a relative amount compared to other UI elements. So, for `layout_weight`
    to be useful, we need to assign a value to the `layout_weight` property on two
    or more elements.
  prefs: []
  type: TYPE_NORMAL
- en: We can then assign portions that add up to 100% in total. This is especially
    useful for dividing up screen space between parts of the UI where we want the
    relative space they occupy to remain the same regardless of screen size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `layout_weight` in conjunction with the `sp` and `dp` units can make
    for a simple and flexible layout. For example, look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what this code will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the layout_weight property](img/B12806_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that all the `layout_height` attributes are set to `0dp`. Effectively,
    the `layout_weight` attribute is replacing the `layout_height` property. The context
    in which we use `layout_weight` is important (or it won't work), and we will see
    this in a real project soon. Also note that we don't have to use fractions of
    one; we can use whole numbers, percentages, and any other number. As long as they
    are relative to each other, they will probably achieve the effect you are after.
    Note that `layout_weight` only works in certain contexts, and we will get to see
    where as we build more layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Using gravity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gravity** can be our friend, and can be used in so many ways in our layouts.
    Just like gravity in the solar system, it affects the position of items by moving
    them in a given direction as if they were being acted upon by gravity. The best
    way to see what gravity can do is to look at some example code and diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `gravity` property on a button (or another widget) is set to `left|center_vertical`
    as shown in the preceding code, it will have an effect that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using gravity](img/B12806_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the content of the widget (in this case the button's text) is indeed
    aligned left and centrally vertical.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, a widget can influence its own position within a layout element
    with the `layout_gravity` element, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This would set the widget within its layout, as expected, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using gravity](img/B12806_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous code allows different widgets within the same layout to be affected
    as if the layout has multiple different gravities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of all the widgets in a layout can be affected by the `gravity`
    property of their parent layout by using the same code as a widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There are, in fact, many more attributes than those we have discussed. Many
    we won't need in this book, and some are quite obscure, so you might never need
    them in your entire Android career. But others are quite commonly used and include
    `background`, `textColor`, `alignment`, `typeface`, `visibility`, and `shadowColor`.
    Let's explore some more attributes and layouts now.
  prefs: []
  type: TYPE_NORMAL
- en: Building a UI with CardView and ScrollView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in the usual way. Name the project `CardView Layout` and
    choose the **Empty Activity** project template. Leave all the rest of the settings
    the same as all the previous projects.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to edit our theme and properly test the result, we need to generate
    our layout file and edit the Kotlin code to display it by calling the `setContentView`
    function from the `onCreate` function. We will design our `CardView` masterpiece
    inside a `ScrollView` layout, which, as the name suggests, allows the user to
    scroll through the content of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `layout` folder and select **New**. Notice that there is an
    option for **Layout resource** **file**. Select **Layout resource file** and you
    will see the **New Resource File** dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: In the **File name** field, enter `main_layout`. The name is arbitrary, but
    this layout is going to be our main layout, so the name makes that plain.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that it is set to **LinearLayout** as the **Root** element option. Change
    it to `ScrollView`. This layout type appears to work just like `LinearLayout,`
    except that, when there is too much content to display on screen, it will allow
    the user to scroll the content by swiping with their finger.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **OK** button and Android Studio will generate a new `ScrollView`
    layout in an XML file called `main_layout` and place it in the `layout` folder
    ready for us to build our `CardView`-based UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see our new file in this next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a UI with CardView and ScrollView](img/B12806_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Android Studio will also open the UI designer ready for action.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the view with Kotlin code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have done previously, we will now load the `main_layout.xml` file as the
    layout for our app by calling the `setContentView` function in the `MainActivity.kt`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Select the `MainActivity.kt` tab. In the unlikely event the tab isn't there
    by default, you can find it in the project explorer under `app/java/your_package_name`,
    where `your_package_name` is equal to the package name that you chose when you
    created the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the code in the `onCreate` function to look exactly like this next code.
    I have highlighted the line that you need to add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You could now run the app, but there is nothing to see except an empty `ScrollView`
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: Adding image resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need some images for this project. This is so we can demonstrate
    how to add them into the project (this section) and neatly display and format
    them in a `CardView` layout (next section).
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't really matter where you get your images from. It is the practical
    hands-on experience that is the purpose of this exercise. To avoid copyright and
    royalty issues, I am going to use some book images from the Packt Publishing website.
    This also makes it easy for me to provide you with all the resources you need
    to complete the project should you not want to go to the bother of acquiring your
    own images. Feel free to swap the images in the `Chapter05/CardViewLayout/res/drawable`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three images: `image_1.png`, `image_2.png`, and `image_3.png`. To
    add them to the project, follow these steps.'
  prefs: []
  type: TYPE_NORMAL
- en: Find the image files using your operating system's file explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Highlight them all and press *Ctrl* + *C* to copy them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Android Studio project explorer, select the `res/drawable` folder by
    left-clicking it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `drawable` folder and select **Paste.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window that asks you to **Choose Destination Directory**, click
    **OK** to accept the default destination, which is the `drawable` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** again to **Copy Specified Files.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be able to see your images in the `drawable` folder along with
    a couple of other files that Android Studio placed there when the project was
    created, as shown in this next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding image resources](img/B12806_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before we move on to `CardView,` let's design what we will put inside them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the content for the cards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing we need to do is create the content for our cards. It makes sense
    to separate the content from the layout. What we will do is create three separate
    layouts, called `card_contents_1`, `card_contents_2,` and `card_contents_3`. They
    will each contain a `LinearLayout`, which will contain the actual image and text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create three more layouts with `LinearLayout` at their root:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `layout` folder and select **New layout resource file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `card_contents_1` and make sure that **LinearLayout** is selected
    as the **Root element**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to add the file to the `layout` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps one through three two more times, changing the filename each time
    to `card_contents_2` and then `card_contents_3`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, select the `card_contents_1.xml` tab and make sure you are in design view.
    We will drag and drop some elements to the layout to get the basic structure and
    then we will add some `sp`, `dp`, and gravity attributes to make them look nice:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a `TextView` widget on to the top of the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an `ImageView` widget on to the layout below `TextView` widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Resources** pop-up window, select **Project** | **image_1** and then
    click **OK.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag another two **TextView** widgets below the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is how your layout should now appear:![Creating the content for the cards](img/B12806_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's use some material design guidelines to make the layout look more
    appealing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible that, as you proceed through these modifications, the UI elements
    on the bottom of the layout might disappear from the bottom of the design view.
    If this happens to you, remember you can always select any UI element from the
    **Component Tree** window underneath the palette. Or, refer to the next tip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way of minimizing the problem is to use a bigger screen, as explained
    in the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I changed the default device for the design view to **Pixel 2 XL** to create
    the previous screenshot. I will leave this setting for the rest of the book unless
    I specifically mention that I am changing it. It allows a few more pixels on the
    layout and means this layout is easier to complete. If you want to do the same,
    look at the menu bar above the design view, click the device dropdown, and choose
    your design view device, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the content for the cards](img/B12806_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Set the `textSize` attribute for the `TextView` widget at the top to `24sp.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Layout_Margin** | **all** attribute to `16dp.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `text` attribute to **Learning Java by Building Android Games** (or
    whatever title suits your image).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `ImageView`, set `layout_width` and `layout_height` to `wrap_content.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `ImageView`, set `layout_gravity` to `center_horizontal.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `TextView` beneath the `ImageView,` set `textSize` to `16sp.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView,` set **Layout_Margin** | **all** to `16dp.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView,` set the `text` attribute to `Learn Java and Android
    from scratch by building 6 playable games` (or something that describes your image).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the bottom `TextView,` change the `text` attribute to `BUY NOW.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView,` set **Layout_Margin** | **all** to `16dp.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView,` set the `textSize` attribute to `24sp.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView,` set the `textColor` attribute to `@color/colorAccent.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `LinearLayout` holding all the other elements, set `padding` to `15dp`.
    Note that it is easiest to select `LinearLayout` from the **Component Tree** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, your layout will look very similar to the following screenshot:![Creating
    the content for the cards](img/B12806_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, lay out the other two files (`card_contents_2` and `card_contents_3)` with
    the exact same dimensions and colors. When you get the **Resources** popup to
    choose an image, use `image_2` and `image_3` respectively. Also, change all the
    `text` attributes on the first two `TextView` elements so that the titles and
    descriptions are unique. The titles and descriptions don't really matter; it is
    layout and appearance that we are learning about.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the sizes and colors were derived from the material design website
    at [https://material.io/design/introduction](https://material.io/design/introduction),
    and the Android specific UI guideline at [https://developer.android.com/guide/topics/ui/look-and-feel](https://developer.android.com/guide/topics/ui/look-and-feel).
    It is well worth studying alongside this book, or soon after you complete it.
  prefs: []
  type: TYPE_NORMAL
- en: We can now move on to `CardView`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining dimensions for CardView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right-click the `values` folder and select **New** | **Values resource file**.
    In the **New Resource File** pop-up window, name the file `dimens.xml` (short
    for dimensions) and click **OK**. We will use this file to create some common
    values that our `CardView` object will use by referring to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we will edit the XML directly. Edit the `dimens.xml` file
    to be the same as the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to make it exactly the same because a small omission or mistake could
    cause an error and prevent the project from working.
  prefs: []
  type: TYPE_NORMAL
- en: We have defined two resources, the first called `card_corner_radius,` with a
    value of `16dp,` and the second called `card_margin,` with a value of `10dp`.
  prefs: []
  type: TYPE_NORMAL
- en: We will refer to these resources in the `main_layout` file and use them to consistently
    configure our three `CardView` elements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding CardView to our layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Switch to the `main_layout.xml` tab and make sure you are in the design view.
    You probably recall that we are now working with a `ScrollView` that will scroll
    the content of our app, rather like a web browser scrolls the content of a web
    page that doesn't fit on one screen.
  prefs: []
  type: TYPE_NORMAL
- en: '`ScrollView` has a limitation – it can only have one direct child layout. We
    want it to contain three `CardView` elements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To overcome this problem, drag a `LinearLayout` from the `Layouts` category
    of the palette. Be sure to pick **LinearLayout (vertical),** as represented by
    this icon in the palette:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding CardView to our layout](img/B12806_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will add our three `CardView` objects inside `LinearLayout` and then the
    whole thing will scroll nice and smoothly without any errors.
  prefs: []
  type: TYPE_NORMAL
- en: '`CardView` can be found in the **Containers** category of the palette, so switch
    to that and locate `CardView`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag a `CardView` object onto the `LinearLayout` on the design and you will
    get a pop-up message in Android Studio. This is the message pictured here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding CardView to our layout](img/B12806_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click the **OK** button, and Android Studio will do some work behind the scenes
    and add the necessary parts to the project. Android Studio has added some more
    classes to the project, specifically, classes that provide `CardView` features
    to older versions of Android that wouldn't otherwise have them.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a `CardView` object on the design. Until there is some content
    in it, the `CardView` object is only easily visible in the **Component Tree**
    window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `CardView` object via the **Component Tree** window and configure
    the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Set `layout_width` to `wrap_content`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `layout_gravity` to `center`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Layout_Margin** | **all** to `@dimens/card_margin`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `cardCornerRadius` to `@dimens/card_corner_radius`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `cardEleveation` to `2dp`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, switch to the **Text** tab and you will find you have something very similar
    to this next code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous code listing only shows the code for the `CardView` object.
  prefs: []
  type: TYPE_NORMAL
- en: The current problem is that our `CardView` object is empty. Let's fix that by
    adding the content of `card_contents_1.xml`. Here is how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Including layout files inside another layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to edit the code very slightly, and here is why. We need to add an
    `include` element to the code. The `include` element is the code that will insert
    the content from the `card_contents_1.xml` layout. The problem is that, to add
    this code, we need to slightly alter the format of the `CardView` XML. The current
    format starts and concludes the `CardView` object with one single tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to change the format to a separate opening and closing tag like this
    (don''t change anything just yet):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This change in format will enable us to add the `include…` code, and our first
    `CardView` object will be complete. With this in mind, edit the code of `CardView`
    to be exactly the same as the following code. I have highlighted the two new lines
    of code, but also note that the forward slash that was after the `cardElevation`
    attribute has also been removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now view the `main_layout` file in the visual designer and see the
    layout inside the `CardView` object. The visual designer does not reveal the real
    aesthetics of `CardView`. We will see all the `CardView` widgets scrolling nicely
    in the completed app shortly. Here is a screenshot of where we are up to so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Including layout files inside another layout](img/B12806_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add two more `CardView` widgets to the layout and configure them the same as
    the first, with one exception. On the second `CardView` object, set `cardElevation`
    to `22dp` and, on the third `CardView` object, set `cardElevation` to `42dp`.
    Also, change the `include` code to reference `card_contents_2` and `card_contents_3`
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You could do this very quickly by copying and pasting the `CardView` XML and
    simply amending the elevation and the `include` code, as mentioned in the previous
    paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can run the app and see our three beautiful, elevated `CardView` widgets
    in action. In this next screenshot, I have photoshopped two screenshots to be
    side by side, so you can see one full `CardView` layout in action (on the left)
    and, in the image on the right, the effect the elevation setting has, which creates
    a very pleasing depth with a shadow effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Including layout files inside another layout](img/B12806_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The image will likely be slightly unclear in the black and white printed version
    of this book. Be sure to build and run the app for yourself to see this cool effect.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can play around with editing the theme of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Themes and material design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new theme, technically speaking, is very easy, and we will see how
    to do it in a minute. From an artistic point of view, however, it is more difficult.
    Choosing which colors work well together, let alone suit your app and the imagery,
    is much more difficult. Fortunately, we can turn to material design for help.
  prefs: []
  type: TYPE_NORMAL
- en: Material design has guidelines for every aspect of UI design and all the guidelines
    are very well documented. Even the sizes for text and padding that we used for
    the `CardView` project were all taken from material design guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: Not only does material design make it possible for you to design your very own
    color schemes, but it also provides palettes of ready-made color schemes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is not about design, although it is about implementing design. To
    get you started, the goal of our designs might be to make our UI unique and to
    stand out at the exact same time as making it comfortable for, even familiar to,
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: Themes are constructed from XML `style` items. We saw the `styles.xml` file
    in [Chapter 3](ch03.html "Chapter 3. Exploring Android Studio and the Project
    Structure"), *Exploring Android Studio and the Project Structure*. Each item in
    the `styles` file defined the appearance and gave it a name such as `colorPrimary`
    or `colorAccent`.
  prefs: []
  type: TYPE_NORMAL
- en: The questions that remain are, how do we choose our colors and how do we implement
    them in our theme? The answer to the first question has two possible options.
    The first answer is to enroll on a design course and spend the next few years
    studying UI design. The more useful answer is to use one of the built-in themes
    and make customizations based on the material design guidelines, discussed in
    depth for every UI element at [https://developer.android.com/guide/topics/ui/look-and-feel/](https://developer.android.com/guide/topics/ui/look-and-feel/).
  prefs: []
  type: TYPE_NORMAL
- en: We will do the latter now.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Android Studio theme designer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the Android Studio main menu, select **Tools** | **Theme Editor**. On
    the left-hand side, notice the UI examples that show what the theme will look
    like, and on the right are the controls to edit aspects of the theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Android Studio theme designer](img/B12806_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As mentioned, the easiest way to create your own theme is to start with, and
    then edit, an existing theme. In the **Theme** dropdown, select a theme you like
    the look of. I chose **AppCompat** **Dark**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Android Studio theme designer](img/B12806_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select any items on the right-hand side that you want to change the color of,
    and choose a color in the screen that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Android Studio theme designer](img/B12806_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be prompted to choose a name for your new theme. I called mine `Theme.AppCompat.MyDarkTheme`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Android Studio theme designer](img/B12806_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click the **fix** text to apply your theme to the current app, as indicated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Android Studio theme designer](img/B12806_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then run your app on the emulator to see the theme in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Android Studio theme designer](img/B12806_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So far, all our apps have been run on a phone. Obviously, a huge part of the
    Android device ecosystem is tablets. Let's see how we can test our apps on a tablet
    emulator, as well as get an advanced look at some of the problems this diverse
    ecosystem is going to cause us, and then we can begin to learn to overcome these
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a tablet emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Select **Tools** | **AVD Manager** and then click the **Create Virtual Device…**
    button on the **Your Virtual Devices** window. You will see the **Select Hardware**
    window in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a tablet emulator](img/B12806_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select the **Tablet** option from the **Category** list and then highlight the
    **Pixel C** tablet from the choice of available tablets. These choices are highlighted
    in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are reading this sometime in the future, the Pixel C option might have
    been updated. The choice of tablet is less important than practicing this process
    of creating a tablet emulator and then testing your apps.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Next** button. On the **System Image** window that follows, just
    click **Next**, because this will select the default system image. It is possible
    that choosing your own image will cause the emulator not to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, on the **Android Virtual Device** screen, you can leave all the default
    options as they are. Feel free to change the **AVD Name** for your emulator or
    the **Startup Orientation** (portrait or landscape) if you want to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a tablet emulator](img/B12806_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click the **Finish** button when you are ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, whenever you run one of your apps from Android Studio, you will be given
    the option to choose **Pixel C** (or whatever tablet you created). Here is a screenshot
    of my Pixel C emulator running the `CardView` app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a tablet emulator](img/B12806_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Not too bad, but there is quite a large amount of wasted space and it looks
    a bit sparse. Let's try it in landscape mode. If you try running the app with
    the tablet in landscape mode, the results are worse. What we can learn from this
    is that we are going to have to design our layouts for different size screens
    and for different orientations. Sometimes, these will be clever designs that scale
    to suit different sizes or orientations, but often they will be completely different
    designs.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently asked question
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q) Do I need to master all this stuff about material design?
  prefs: []
  type: TYPE_NORMAL
- en: A) No. Unless you want to be a professional designer. If you just want to make
    your own apps and sell them or give them away on the Play store, then knowing
    just the basics is good enough.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built aesthetically pleasing `CardView` layouts and put
    them in a `ScrollView` layout so that the user can swipe through the content of
    the layout a bit like browsing a web page. To conclude the chapter, we launched
    a tablet emulator and saw that we are going to need to get smart with how we design
    our layouts if we want to cater for different device sizes and orientations. In
    [Chapter 24](ch24.html "Chapter 24. Design Patterns, Multiple Layouts, and Fragments"),
    *Design Patterns, Multiple Layouts, and Fragments*, we will begin to take our
    layouts to the next level and learn how to cope with such a diverse array of devices
    by using Android Fragments.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do so, however, it will serve us well to learn more about Kotlin and
    how we can use it to control our UI and interact with the user. This will be the
    focus of the next seven chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the elephant in the room at this point is that, despite learning
    lots about layouts, project structure, the connection between Kotlin and XML,
    and much more besides, our UIs, no matter how pretty, don't actually do anything!
    We need to seriously upgrade our Kotlin skills while also learning more about
    how to apply them in an Android context.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will do exactly that. We will look at how we can add
    Kotlin code that executes at exactly the moment we need it to by working with
    the **Android Activity lifecycle**.
  prefs: []
  type: TYPE_NORMAL
