- en: Chapter 11. Deploying and Integrating Third-party Services into Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a queue and using Artisan to run it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Laravel app to Pagoda Box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Stripe payment gateway with Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing a GeoIP lookup and setting custom routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gathering e-mail addresses and using them with a third-party e-mail service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing and retrieving cloud content from Amazon S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications will often rely on third-party services to help our applications
    run. Using Composer and Laravel, we can integrate existing code that will allow
    us to interact with these services. In this chapter, we'll see how to deploy our
    app to Pagoda Box, use Stripe payments, do GeoIP lookups, use a third-party e-mail
    service, and store the content to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a queue and using Artisan to run it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when our app is required to do a lot of work behind the scenes
    to accomplish a task. Instead of making a user wait until the tasks are complete,
    we can add them to a queue and do the processing later. There are many queue systems
    available but Laravel has a few that are very easy to implement. In this recipe,
    we'll be using IronMQ.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a working installation of Laravel 4, as well as
    API credentials for IronMQ. A free account can be created at [http://www.iron.io/](http://www.iron.io/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `app/config` directory, open the `queue.php` file, set the default value
    to `iron` and fill in the credentials from IronMQ.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Laravel''s `composer.json` file and update the required section so it
    looks resembles the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line window, update the composer file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After everything is installed, open the `routes.php` file and create a route
    that hits the queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file in the `app/models` directory with the name `Spaceship.php` as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In your browser, go to `http://{your-url}}/public/queueships`, and refresh a
    couple of times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check in the IronMQ window that new messages were added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up the command line window and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After a few moments, look inside the folder `app/storage/logs` and find the
    file with today's date in the name. It will have a print out of the array we added
    to the queue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by making sure to use IronMQ as our default queue driver, in the `config`
    file. If we wanted to use another queue system, we could set that here. Then we
    install the IronMQ package into our application, using composer. This will add
    all the files we need, as well as any dependencies that Iron needs to work.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, Laravel is already set up to use whatever queue system we choose,
    so we can begin using it. We first create an array of data in our route. This
    could just as easily be form input, so some other data we'd like to wait to process.
    We then use the `Queue::push()` method, set the class that should be used (`Spaceship`),
    and then pass in the data to send to that class.
  prefs: []
  type: TYPE_NORMAL
- en: If we now go to this route and then check the IronMQ queue, we'll see that there's
    one job waiting to be processed. Our next task is to create a class to process
    the queue. For that, we create a model named `Spaceship`. We need to create a
    `fire()` method to parse our data from the queue. Here, we could save the information
    to a database or do some other heavy processing. For now, we'll just send the
    data to a log file. At the end of the `fire()` method, we make sure to delete
    the job.
  prefs: []
  type: TYPE_NORMAL
- en: If we go to our `queueships` route and refresh a few times, we'll see multiple
    jobs in our queue, but we haven't processed them yet. Therefore, in the command
    line, we run artisan's `queue:listen` command, and this will start processing
    our queues. Pretty soon, we can go into our logs directory, and see the information
    that was sent from the queue.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many reasons we might want a queue. Most often it's for things such
    as processing images or doing heavy data parsing. It's also useful to queue any
    e-mails we want to send from the site, and Laravel has a special way to do that
    using the `Mail::queue()` command.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Laravel app to Pagoda Box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pagoda Box is a popular cloud hosting service that makes creating a web app
    very easy. With pre-made boxes for Laravel, we can create our own site in the
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have a free account with Pagoda Box, which is available
    at [https://dashboard.pagodabox.com/account/register](https://dashboard.pagodabox.com/account/register).
    After signing up, we'll also need to have an SSH key added to our account. More
    information about the SSH keys can be found at [http://help.pagodabox.com/customer/portal/articles/202068](http://help.pagodabox.com/customer/portal/articles/202068).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the steps given:'
  prefs: []
  type: TYPE_NORMAL
- en: After logging in to Pagodabox, click on the **New Application** tab as shown
    in the following screenshot:![How to do it...](graphics/2827OS_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure **Quickstart** is selected, then scroll down to find the laravel-4
    quickstart. The click on the **Free** button as shown in the following screenshot:![How
    to do it...](graphics/2827OS_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, click on the **Launch** button as shown in the following screenshot:![How
    to do it...](graphics/2827OS_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for a few minutes while everything gets installed.![How to do it...](graphics/2827OS_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it's finished, click on the blue **Manage Your App** button as shown in
    the following screenshot:![How to do it...](graphics/2827OS_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the git clone URL as shown in the following screenshot:![How to do it...](graphics/2827OS_11_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the command line window, go to the root of your server and run the git clone
    command. In our case, it would be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After everything downloads, open the `app/routes.php` file and add a route
    so we can test it out as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the command line window, commit the following changes and send it back to
    the Pagoda Box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After Pagoda Box has finished the changes, go to the new route to see if it
    works. In our case, it will be [http://erratic-eladia.gopagoda.com/cool](http://erratic-eladia.gopagoda.com/cool).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to host our app and make sure it's scalable, we might want to look
    at a cloud hosting service. This will let us increase its performance if we happen
    to get an influx of traffic, and lower it when the traffic dies down. An excellent
    host that works well with PHP and Laravel is Pagoda Box. Pagoda Box also has a
    very nice free option that will allow us to test it out and create a full app
    without needing to pay.
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, in the Pagoda Box dashboard, we create a new application and
    choose a Quickstart package we want to use. In the list is a handy Laravel 4 installation;
    if we choose it, everything will be installed for us, including all the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: After everything is set up, we can copy the git clone code and download the
    files to our local server. Once it's downloaded, we can do any updates and commit
    them. After pushing it back to Pagoda Box, our updated code will automatically
    be deployed and we will see the changes on the live site.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are other cloud hosting providers that work well with Laravel. They tend
    to all have free options so we can try them out. Some other hosts are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Engine Yard [https://www.engineyard.com/](https://www.engineyard.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital Ocean [https://www.digitalocean.com/](https://www.digitalocean.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku (there's hidden PHP support) [https://www.heroku.com/](https://www.heroku.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Stripe payment gateway with Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E-commerce sites are a consistent staple in web development. In the past, things
    such as credit card processing have been difficult and the learning curve very
    steep. With Laravel and the Stripe service, offering credit card transactions
    is much easier.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a working installation of Laravel 4 and the proper
    credentials for Stripe. A free account with Stripe can be created at [https://stripe.com/](https://stripe.com/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the app''s `composer.json` file and update the `require` section to resemble
    the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line window, run the composer update with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/config` directory, create a new file named `stripe.php` with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, add a `Route` to the payment form as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/views` folder, create a file named `pay.blade.php` for our form
    using the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the `routes.php`, create a `Route` to accept the form post, and charge
    the card as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start with adding the Stripe package to our composer files and updating it.
    This will install the Stripe code, as well as any dependencies if it requires.
    Then we need to create a configuration file to hold our API key. Here we could
    create another directory that's the same as our environment variable, and add
    that file there. So, if we have a development and a production server, we could
    have a Stripe `config` file in the `app/config/development` directory that holds
    our test API key, and then in the `app/config/production` directory a file to
    hold our live API key.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need a form for the user to enter their credit card information. We
    create a `pay` route that displays our `pay` view. In that view, we'll use the
    Blade template for creating the form. The minimum that Stripe requires is the
    card number and the expiration date, though there might be times we need to capture
    the card's CVV code or the user's address.
  prefs: []
  type: TYPE_NORMAL
- en: After that form is posted, we create an instance of Stripe with the API key.
    Then we add the credit card information to an array. Finally, we send the amount
    (in cents), the card array, and the currency to Stripe for processing.
  prefs: []
  type: TYPE_NORMAL
- en: The data returned from Stripe could then be added to a database, or otherwise
    tracked.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Stripe offers many, easy-to-use methods for managing credit card transactions,
    or even things such as subscriptions. For more information, be sure to check out
    the documentation available on: [https://stripe.com/docs](https://stripe.com/docs)'
  prefs: []
  type: TYPE_NORMAL
- en: Doing a GeoIP lookup and setting custom routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might be times when our app needs to give people different pages depending
    on which country they're in. Using Laravel and MaxMind's GeoIP data, we can lookup
    a person's country, based on their IP address, and then redirect them to the page
    we need.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll just need a working Laravel 4 installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `composer.json` file and update the `require` section, so it looks
    like the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line window, run the composer update with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Go to [http://dev.maxmind.com/geoip/legacy/geolite/](http://dev.maxmind.com/geoip/legacy/geolite/)
    and download the latest **GeoLite Country** database. Unzip it and put the `GeoIP.dat`
    file in the root of our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `app/config` directory, create a file named `geoip.php` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `app/filters.php` file and add a filter for our `geoip` file with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create a route to apply the filter to and a route
    to accept the country code, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin this recipe by installing the `geoip` library, by adding it to our
    `composer.json` file and updating. Once it's downloaded, we can then download
    MaxMind's free `geoip` data file and add it to our app. In our case, we'll put
    the file in the root of our app. Then, we need to create a `config` file that
    will hold the location of the `geoip` data file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we want to check the user's IP address and redirect them to a country
    specific page. For this, we'll use Laravel's before filter. It starts by setting
    the `$ip` variable. If we manually pass in an IP address, that's what it will
    use; otherwise, we run the `Request::getClientIp()` method to try and determine
    it. Once we have the IP address, we run it through the `geoip` function to get
    the country code for the IP address. We then redirect the user to the route with
    the country code as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Then we create a route to add the filter to. In our case, we'll pass an IP address
    manually to the filter, but if it wasn't there it would attempt to use the user's
    address. Our next route takes the country code as a parameter. At this point,
    we could offer custom content based on the country or even automatically set which
    language file to use.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering e-mail addresses and using them with a third-party e-mail service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E-mail lists and newsletters are still a popular and efficient way to communicate
    with large groups of people. In this recipe, we'll use Laravel and the free MailChimp
    service to set up an easy way to gather e-mail subscriptions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a working Laravel 4 installation, as well as a free
    account with [http://mailchimp.com/](http://mailchimp.com/) and generated API
    keys in Mailchimp's account section. We'll also need to create at least one list
    in Mailchimp.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `app` directory, create a new directory named `libraries`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Mailchimp's API library from [http://apidocs.mailchimp.com/api/downloads/#php](http://apidocs.mailchimp.com/api/downloads/#php),
    then unzip it and place the file `MCAPI.class.php` in the new `libraries` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Laravel''s `composer.json` file and add the libraries directory to the
    `autoload` section. That section should resemble the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the command line window, and run the composer''s `dump-autoload` command,
    as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/config` directory, create a file named `mailchimp.php` with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To get all of our Mailchimp lists, and see their IDs, open the `routes.php`
    file and add a new route as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php` file, create a route to show the `subscribe` form using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In `app/views` directory, create a file named `subscribe.blade.php` as given
    in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, create a route to accept and process the form submission
    as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin this recipe, we'll need to add Mailchimp's PHP library. Since we won't
    be using a composer, we need to set up a directory to hold any of our non-composer
    libraries. So we create a `libraries` directory in the `app` folder, and add Mailchimp
    there.
  prefs: []
  type: TYPE_NORMAL
- en: To let Laravel know that we want to `autoload` anything in the new directory,
    we need to update the `composer.json` file. We then add the directory location
    to the `Classmap` section. Then we need to run composer's `dump-autoload` command
    to recreate our `autload` files, and have it added in our new directory.
  prefs: []
  type: TYPE_NORMAL
- en: We then need to create a new `config` file to hold our Mailchimp credentials
    and the ID of the list we want to use. We can get the `list` ID from the Mailchimp
    dashboard, or we can use the `lists` route to display them all.
  prefs: []
  type: TYPE_NORMAL
- en: To capture the user's e-mail, we create a route and view to hold our form. This
    form could also be in a pop-up, modal, or part of a larger page. We ask for their
    name and e-mail, and then have it posted to Mailchimp.
  prefs: []
  type: TYPE_NORMAL
- en: In our `post` route, we just need to instantiate the Mailchimp class, create
    an array to hold the name, and send everything to the `listSubscribe()` method.
    Finally, we check for any errors from Mailchimp and show a success message.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mailchimp offers a very extensive API that allows us to easily manage our e-mail
    lists. To see everything they offer, check out the online documentation at: [http://apidocs.mailchimp.com/](http://apidocs.mailchimp.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Storing and retrieving cloud content from Amazon S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a service such as Amazon's S3 to store our files will allow us to leverage
    their servers' speed and reliability. To utilize the service, we can easily implement
    a Laravel package to handle our uploads to Amazon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we''ll need a working Laravel 4 installation. We''ll also
    need a free Amazon AWS account, which can be registered at: [http://aws.amazon.com/s3/](http://aws.amazon.com/s3/)'
  prefs: []
  type: TYPE_NORMAL
- en: After registering, we need to get our **Access Key ID** and **Secret ID** from
    the **Security Credentials** page. Also, in the S3 management console, we'll need
    to have at least one bucket created. For this recipe, we'll call the bucket named
    as `laravelcookbook`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Laravel''s `composer.json` file and add the Amazon SDK package. The require
    section should resemble the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the command line window, and install the package using the Composer package,
    as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After everything is installed, in the `app/config` directory, create a file
    named as `aws.php` shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/config` directory, open the `app.php` file. At the end of the `providers`
    array, add the AWS provider as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Also in the `app.php` file, in the aliases array, add the following alias:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` files, test that everything is working by creating a route
    to list our `buckets` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: To test the buckets, go to `http://{your-server}/buckets`, and it should display
    a list of all of the buckets we've set up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s create a form for a user to upload an image. We begin with a route
    to hold the form as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/views` folder, create a file named as `cloud.blade.php` with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the `routes.php` file, create a route to process the file and upload
    it to S3 as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin the recipe by installing Amazon's AWS SDK. Thankfully, Amazon released
    a composer package specifically designed for Laravel 4, so we just add that to
    our `composer.json` file and update.
  prefs: []
  type: TYPE_NORMAL
- en: After everything is installed, we need to create a configuration file and add
    in our Amazon credentials. We can also add in the `region` (such as `Aws\Common\Enum\Region::US_WEST_2`)
    but, if we leave it blank, it will use the `US Standard` region. Then we update
    our `app.php` configuration, including the AWS `ServiceProvider` and the `Facade`
    that Amazon provided.
  prefs: []
  type: TYPE_NORMAL
- en: If we already have buckets in our S3, we can create a route to list those buckets.
    It begins by creating a new S3 instance and simply calling the `listBuckets()`
    method. We then loop through the array of `Buckets` and show their name.
  prefs: []
  type: TYPE_NORMAL
- en: Our next goal is to create a form where a user can add an image. We create the
    `cloud` route that displays the `cloud` view. Our view is a simple Blade template
    form with a single `file` field. That form will then be posted to `cloud`.
  prefs: []
  type: TYPE_NORMAL
- en: In our `cloud` post route, we begin by retrieving the image using the `Input::file()`
    method. Next, we create a new name for our image by adding the date to the beginning
    of the file's name. Then we get the path of the uploaded image, so we know which
    file to send to S3.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create an S3 instance. We also need an array to hold the values to
    send to S3\. `Bucket` is simply the name of the S3 bucket we want to use, `Key`
    is the name we want to give to the file, `SourceFile` is the location of the file
    we want to send over, and then `ACL` are the permissions we want to give to the
    file. In our case, we set `ACL` to `public-read,` which allows the image to be
    displayed to anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Our final step is to call the `putObject()` method which should send everything
    to our S3 bucket. If it's successful, we then redirect the user to view the uploaded
    file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example, the user is forced to wait until the image is uploaded to Amazon
    before continuing. This would be an excellent case to use a queue to process everything.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a queue and using Artisan to run it* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
