- en: Real-World Scenarios – Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will recap this book by practicing fuzzing, controlling the instruction
    pointer, and injecting a shellcode using real targets. What I'll do is navigate
    through [exploit-db.com](https://exploit-db.com/) and choose real targets from
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Freefloat FTP Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with the Freefloat FTP Server v1.0, which you can download it
    from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip](https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip).
    Also, you can see the exploit on Windows XP at [https://www.exploit-db.com/exploits/40711/](https://www.exploit-db.com/exploits/40711/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Freefloat FTP Server has many vulnerable parameters, which can be useful
    to practice on, and we will choose one of them here to do a full exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00329.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s download it from [https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip](https://www.exploit-db.com/apps/687ef6f72dcbbf5b2506e80a375377fa-freefloatftpserver.zip)
    on our Windows machine and unzip it. Now, open its directory, then open Win32,
    and start the FTP server. It will show in the taskbar on the right-hand corner.
    Open it to see the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00330.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The vulnerable server is up and running on port `21`. Let's confirm that from
    our attacking machine, using `nc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the IP address of our victim machine is `192.168.129.128`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00331.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then from the attacking machine, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00332.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try an anonymous access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00333.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We are in! How about if we focus on the `USER` parameter?
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the manual way of using the `nc` command is not efficient, let''s build
    a script to do so using the Python language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try the fuzzing phase with the `USER` parameter. Let''s start with
    a `junk` value of `50`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And from our victim machine, let''s attach the Freefloat FTP Server inside
    the Immunity Debugger and hit the run program once:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00334.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s register the contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00335.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, make sure that the program is in the running state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00336.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s run our exploit and then take a look at the Immunity Debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00337.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Nothing happened! Let''s increase the junk value to `200`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s re-run this exploit and watch the Immunity Debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00338.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Again nothing happened; let''s increase to `500`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00339.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program crashed! Let''s take a look at the registers too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00340.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The instruction pointer is filled with our junk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00341.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The stack is also filled with the junk value as expected, which takes us to
    the next phase.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the instruction pointer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this phase, we will control the instruction pointer by calculating the exact
    offset of the EIP register.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the pattern as we did before, using Metasploit Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00342.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'This is our pattern, so the exploit should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the Immunity Debugger, re-run the Freefloat FTP Server, and attach it
    to the Immunity Debugger. Then, hit the run program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00343.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The current pattern inside the EIP is `37684136`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00344.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the pattern located inside the EIP; now, let''s get the exact offset
    of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00345.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s at offset `230`; let''s confirm that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the Immunity Debugger and start it again along with the Freefloat FTP
    Server, attach it inside the Immunity Debugger, and hit the run program. Then
    execute our exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, let''s look at the registers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00347.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`EIP` now contains `42424242`; so we now control `EIP`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next phase, which is finding a place for our shellcode
    and injecting it.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting shellcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at another approach to analyzing our pattern inside the
    Freefloat FTP Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s re-run the Freefloat FTP Server, attach it to the Immunity Debugger,
    and hit the run program icon. Then, run the exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The program will crash again; then, from the command bar, enter `!mona findmsp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00348.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'According to the Rapid7 blog at [https://blog.rapid7.com/2011/10/11/monasploit/](https://blog.rapid7.com/2011/10/11/monasploit/),
    the `findmsp` command does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Looks for the first 8 bytes of the cyclic pattern anywhere in the process memory
    (normal or unicode-expanded).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looks at all the registers and lists the registers that either point at, or
    are overwritten with, a part of the pattern. It will show the offset and the length
    of the pattern in the memory after that offset if the registers point into the
    pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looks for pointers into a part of the pattern on the stack (shows offset and
    length).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looks for artifacts of the pattern on the stack (shows offset and length).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queries the SEH chain and determines whether it was overwritten with a cyclic
    pattern or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After that, hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00349.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This analysis tells us the exact offset, which is `230`. It also tells us that
    the best place to hold a shellcode would be inside the stack and will use the
    ESP register since none of the patterns got out from the stack. So, let's continue
    as we did before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our exploit should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00350.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s find the address to `JMP ESP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00351.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, search for `JMP ESP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00352.gif)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to choose any address here to perform a jump to ESP. I'll select
    `75BE0690`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the shellcode, let''s choose something else that is small; for example, let''s
    try this shellcode at [https://www.exploit-db.com/exploits/40245/](https://www.exploit-db.com/exploits/40245/),
    which generates a message box on the victim''s machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'So, our final shellcode should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00353.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create our final exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are all set; let''s re-run just the Freefloat FTP Server, and then run
    our exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00354.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our exploit worked!
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What I want you to do is to try this example but with a different parameter,
    for example, the `MKD` parameter, and I''ll give you a chunk code to start with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: It's exactly like this scenario, so try to be more creative.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we did a real and full scenario starting from fuzzing. We then
    looked at how to control the EIP, and then inject and execute a shellcode.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use a real-world scenario but from a different
    approach, which is intercepting and fuzzing a parameter inside the HTTP header.
  prefs: []
  type: TYPE_NORMAL
