- en: Working with the Servo Control Code to Control an Analog Device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuing our journey to combine the elegance of an analog meter with the accuracy
    of digital data, we will take a look at what we've learned in the previous two
    chapters and build an IoT weather dashboard with an analog meter display.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you have the circuit from [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*, wired up before you start this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: This dashboard will display wardrobe suggestions based on the outside temperature
    and wind speed. We will also use an LED on our dashboard to indicate whether or
    not we should take an umbrella with us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing weather data from the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the servo using weather data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge required to complete this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a working knowledge of the Python programming language to complete
    this chapter. Knowledge of using a simple breadboard that you can connect components
    to is also a must.
  prefs: []
  type: TYPE_NORMAL
- en: A vinyl or craft cutter may be used in this project. Knowledge of how to use
    a cutter would be an asset so that you can complete this project.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, we should have a working IoT analog weather dashboard.
    We will modify the code written in [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Services*, and [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*, to provide data to our dashboard. A backdrop
    will be printed and cut out. This backdrop will give our dashboard a cartoon-like
    look.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the circuit from [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*. The following is the wiring diagram from this
    circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/80b31448-fb1a-4e05-8f81-ccecbeb974e0.png)'
  prefs: []
  type: TYPE_IMG
- en: This project should take an afternoon to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A small servo motor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An LED (any color)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires for the breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A color printer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A vinyl or craft cutter (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing weather data from the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml), *Subscribing to
    Web Services*, we wrote a Python program to access weather data from Yahoo! Weather.
    The class, `CurrentWeather`, from that program returned the temperature, weather
    conditions, and wind speed for the `city` value that the class was instantiated
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will revisit that code and change the class name to `WeatherData`. We will
    also add a method to return a value from `0`-`100` to indicate the weather. We
    will take the temperature and wind speed into account when determining this number,
    with 0 being extreme winter-like conditions and `100` being very hot extreme summer
    conditions. We will use this number to control our servo. We will also check to
    see whether it is raining and update our LED to indicate whether or not we need
    an umbrella:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `WeatherData.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The heart of our code is in the `getServoValue()` and `getLEDValue()` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the `getServoValue` method, we set the `temp_factor` and `wind_factor` variables
    to a percentage value based on a minimum of `0` for both of them and a maximum
    of `30` and `20` for the temperature and wind speeds, respectively. These are
    arbitrary numbers as we will consider `30` degrees Celsius to be our extreme hot
    temperature and 20 kph winds as our extreme wind speed. The servo value is set
    by subtracting the wind speed by 5 percent from the temperature (by dividing it
    by `20`). This, of course, is arbitrary as well. Feel free to adjust the percentage
    as desired.
  prefs: []
  type: TYPE_NORMAL
- en: To explain this further, consider a temperature of 10 degrees Celsius and a
    wind speed of 5 km/h. The temperature factor (`temp_factor`) would be 10 multiplied
    by 100 and then divided by 30 or 33.33\. The wind speed factor (`wind_factor`)
    would be 5 multiplied by 100 and then divided by 20 or 25\. The value we pass
    to our servo (`servo_value`) would be the temperature factor (33.33) minus the
    wind speed factor (25) after it has been divided by `20`. The value of `servo_value`
    is 32.08 or roughly 32 percent of the maximum servo value.
  prefs: []
  type: TYPE_NORMAL
- en: We then return the value of `servo_value` and use it to control our servo. Any
    value below `0` and above `100` will off our scale and will not work with our
    servo (as we are moving the servo between `0` and `100` percent). We use an `if`
    statement in the `getServoValue` method to correct such conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getLEDValue` method simply checks the weather conditions and returns code
    based on whether or not it is raining. `Thunderstorm` will return a value of `2`,
    `Rain` and `Light Rain` will return a value of `1`, and anything else will return
    a value of `0`. We will use this value to blink the LED in our dashboard if there
    is a thunderstorm, keep it solid if it is only raining, and turn it off under
    all other conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing this book, `Thunderstorm`, `Rain`, and `Light Rain` were
    values that were returned during a search of the weather in world cities. Please
    feel free to update the `if` statement to include other descriptions of extreme
    precipitation. As an added enhancement, you may consider using regular expressions
    in the `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the code in Thonny. You should get a value for the servo and LED based
    on the weather conditions in Paris. I received the following at the time I ran
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Controlling the servo using weather data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are close to building our IoT weather dashboard. The final steps involve
    controlling our servo position based on the weather data returned from the Yahoo!
    Weather web service and physically building a backdrop for our servo needle.
  prefs: []
  type: TYPE_NORMAL
- en: Correcting for servo range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As some of you may have noticed, your servo motor does not move a full 180 degrees
    from minimum to maximum. This is due to the minimum and maximum pulse widths of
    1 ms and 2 ms set in GPIO Zero. To account for this difference, we must adjust
    the `min_pulse_width` and `max_pulse_width` properties accordingly when we instantiate
    a `Servo` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code does just that. The variable, `servoCorrection`, adds to
    and subtracts from the `min_pulse_width` and `max_pulse_width` values. The following
    code moves the servo to the minimum position and then the maximum position after
    `5` seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `servo_correction.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code to see if the value of `servoCorrection` fixes the issue with your
    servo not turning a full 180 degrees from `servo.min` to `servo.max`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust `servoCorrection` until your servo does move 180 degrees between `servo.min`
    and `servo.max`. We will use the value of `servoCorrection` in the code for our
    weather dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing the position of the servo based on weather data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now ready to control the position of our servo based on weather conditions.
    We will modify the `WeatherDashboard` class we created in [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml), *Controlling
    a servo with Python;* to do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `WeatherDashboard.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code and observe that the servo position changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's take a look at the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start out by importing the resources we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We add `time` to our project as we will be using it as a delay before we close
    our `Servo` object. `WeatherData` is added to provide the values for our servo
    and LED based on weather conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `servoCorrection`, `maxPW`, and `minPW` variables adjust our servo (if
    needed), as explained in our previous servo correction code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `turnOffServo` method allows us to close the connection to the servo, stopping
    any jerking motion that may occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We use the `sleep` function to delay closing the servo so that it will not be
    closed prior to being set to its position.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have also noticed a change to the `convert_percentage_to_integer` method
    from the code in [Chapter 5](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml), *Controlling
    a Servo with Python*. The motors tested for this project had a minimum position
    on the right. This is the opposite of what we need, so the code was changed to
    subtract the `percentage_amount` from 100 to reverse this behavior and give us
    the correct servo position (refer to [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*,for more information on this method and use
    the `convert_percentage_to_integer` from this chapter if need be):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run the code in Thonny. You should witness the servo motor moving to a position
    based on the weather conditions in Toronto, Canada. The LED will either blink,
    stay solid, or turn off based on whether or not it is raining in Toronto at the
    time you run the code.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's enhance our project by building a physical backdrop for our servo
    and LED.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our code out of the way, it's now time to add a physical backdrop to our
    servo. With this backdrop, we bring the IoT to life for our weather data. Our
    dashboard will recommend which wardrobe item we should wear based on the weather.
  prefs: []
  type: TYPE_NORMAL
- en: Printing out the main graphic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the graphic we will be using for our backdrop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6c3d81ed-cbcb-4f52-9d72-627d49d3fbfa.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a color printer, print out the graphic on printable vinyl (this image
    file is available from our GitHub repository). Cut out the holes under the umbrella
    and main graphic.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add support, cut out the back plate on hard card stock with a cutter or
    by hand with scissors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b712b994-07a0-423c-94ae-6e8940f87e8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Peel the backdrop off of the printable vinyl sheet and stick it to the backplate.
    Use the holes to align the backdrop with the back plates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/caaa3b46-e584-45d2-a087-ee980b7fb01e.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding the needle and LED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Insert the LED into the hole under the umbrella:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1e7514b8-e796-4bd3-929b-a49cdc0e52dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Insert the hub of the servo motor through the other hole. Use double-sided
    foam tape to secure the servo to the backplate if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1b142b34-2431-4bdb-89b0-8cbf65488fee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Wire up the LED and servo to the breadboard using jumper wires (see the wiring
    diagram at the start of this chapter). The assembly should sit with a slight slant.
    Before we run the `WeatherDashboard` code with our new display, we have to install
    the needle to the minimum position:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `servo_minimum.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code to have the servo position itself to the minimum value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the needle so that it points to the left if the servo motor turns counter-clockwise
    to its minimum, and to the right if the servo motor turns clockwise to its minimum
    (this will make more sense once you start physically working with the servo).
  prefs: []
  type: TYPE_NORMAL
- en: Run the `WeatherDashboard` code again. The servo should move according to the
    weather data, indicating a wardrobe option. If it is raining, the LED should light
    up. A thunderstorm will flash the LED. Otherwise, the LED will stay off.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following picture, the dashboard is recommending a short sleeve shirt
    for Toronto, Canada. An umbrella is not required for the outside weather conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f64e1685-26b7-4020-9ea4-91021073ff0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You've just built an IoT weather dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we used the power of the Raspberry Pi to create an IoT analog
    weather dashboard. In this case, this involved an internet-controlled servo used
    as an analog meter. It's not too hard to imagine how we may alter our code to
    display data other than weather data. Picture an analog meter displaying the tank
    level from a distant factory, where the level data is communicated over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: The intuitive nature of analog meters makes them perfect for applications where
    a glance of the data is all that is required. Combining analog meters with data
    from the internet creates a whole new world of data display.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry
    Pi Web Server*, we will take a step away from the analog world and explore how
    we may use the Raspberry Pi as a web server and build a web based dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True or false? A servo may be used as an IoT device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Changing the minimum and maximum pulse width values on the `Servo`
    object modifies the range of the servo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we add a delay before calling the `close()` method of the `Servo` object?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? We do not need a `getTemperature()` method in our `WeatherData`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? A flashing LED on our dashboard indicates a clear and cloudless
    day.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we use a pair of shorts on our dashboard to indicate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where would you use a regular expression in our code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we import time in our code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? An IoT-enabled servo can only be used to indicate weather data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to enhance our code, regular expressions may be used. Any documentation
    on Python and regular expressions is invaluable in developing strong coding skills.
  prefs: []
  type: TYPE_NORMAL
