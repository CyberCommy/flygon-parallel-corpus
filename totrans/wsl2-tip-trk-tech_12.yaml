- en: '*Chapter 9*: Visual Studio Code and WSL'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the book so far, the focus has been on WSL and working with WSL directly.
    In this chapter, we will step up a level and start to look at how we can work
    on top of WSL when developing applications. In particular, in this chapter, we
    will explore Visual Studio Code, a free editor from Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen how WSL interoperability allows us to access files in our
    WSL distros from Windows. Visual Studio Code allows us to go a step deeper by
    having the graphical editing experience in Windows connecting to the supporting
    editor services running inside our WSL distro. In this way, Visual Studio Code
    provides us with abilities such as a graphical debugging experience for Linux
    applications running inside WSL. This gives us the ability to work with tools
    and dependencies in WSL while keeping the rich Windows-based editing experience
    in Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Visual Studio Code Remote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips for working with Remote-WSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start the chapter by introducing Visual Studio Code and getting it installed.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Visual Studio Code** is a free, cross-platform, open source code editor from
    Microsoft. Out of the box, it comes with support for JavaScript (and TypeScript)
    applications, but support for a wide range of languages (including C++, Java,
    PHP, Python, Go, C#, and SQL) is available as extensions. Let''s begin by installing
    Visual Studio Code.'
  prefs: []
  type: TYPE_NORMAL
- en: To install Visual Studio Code, go to [https://code.visualstudio.com/](https://code.visualstudio.com/),
    click on the download link, and run the installer when it has downloaded. The
    install process is fairly straightforward, but if you want any more details (including
    how to install the Insiders version, which provides nightly builds), see [https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, launching Visual Studio Code will present a window like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – A screenshot of Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.1_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – A screenshot of Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, you can see the **Welcome** page in Visual Studio Code.
    This page gives links to some common actions (such as opening a folder), recent
    folders that have been opened (you won't have these when first installing), and
    various handy help pages.
  prefs: []
  type: TYPE_NORMAL
- en: In general, the basic usage of Visual Studio Code will likely feel familiar
    to other graphical editors. There are some great introductory videos in the documentation
    ([https://code.visualstudio.com/docs/getstarted/introvideos](https://code.visualstudio.com/docs/getstarted/introvideos))
    as well as written tips and tricks ([https://code.visualstudio.com/docs/getstarted/tips-and-tricks](https://code.visualstudio.com/docs/getstarted/tips-and-tricks)).
    These links provide a lot of handy techniques to help you get the most out of
    Visual Studio Code and are recommended to boost your productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various options for opening a folder to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Open folder…** link on the **Welcome** page shown in *Figure 9.1.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the **Open folder…** item in the **File** menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the **File: Open folder…** item in the command palette.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last option here, to use the command palette, is a powerful one as it provides
    a quick way to search for any command in Visual Studio Code. You can access the
    command palette by pressing *Ctrl* + *Shift* + *P*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – A screenshot showing the command palette'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.2_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – A screenshot showing the command palette
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot shows the command palette open. The command palette provides
    access to all the commands for actions in Visual Studio Code (including actions
    from installed extensions). As you type in the command palette, the action list
    is filtered down. In this screenshot, you can see that I have filtered on `file
    open` and that this gives quick access to the **File: Open Folder…** action. It''s
    also worth noting that the command palette also shows the keyboard shortcuts for
    commands, giving an easy way to learn shortcuts for commonly used commands.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously mentioned, there is a wide range of extensions for Visual Studio
    Code, and these can be browsed at https://marketplace.visualstudio.com/vscode
    or you can select **Extensions: Install Extensions** from the command palette
    to browse and install directly in Visual Studio Code. Extensions can add features
    to Visual Studio Code, including support for new languages, providing new editor
    themes, or adding new functionality. In the examples in this chapter, we will
    use a Python app, but the principles apply to other languages. To find out more
    about adding language support, see [https://code.visualstudio.com/docs/languages/overview](https://code.visualstudio.com/docs/languages/overview).'
  prefs: []
  type: TYPE_NORMAL
- en: Before we start looking at our sample app, let's look at an extension that adds
    rich WSL support to Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Visual Studio Code Remote
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way of working with files from a WSL distro's file system is to open them
    using the `\\wsl$` share that WSL provides (as discussed in [*Chapter 4*](B16412_04_Final_JC_ePub.xhtml#_idTextAnchor047),
    *Windows to Linux Interoperability*, in the *Accessing Linux files from Windows*
    section). For example, I can access the `wsl-book` folder from my home directory
    in the `\\wsl$\Ubuntu-20.04\home\stuart\wsl-book`. However, while this works,
    it incurs the cost of Windows-to-Linux file interop and doesn't provide me with
    an integrated environment.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, if we have Python installed along with the Python extension for
    Visual Studio Code, then we get an integrated experience for running and debugging
    our code. If we open code via the `\\wsl$` share, then Visual Studio Code will
    still give us the Windows experience, rather than using the installation of Python
    and its dependencies and tools from WSL. However, with the **Remote-WSL extension**
    from Microsoft, we can fix that!
  prefs: []
  type: TYPE_NORMAL
- en: With the Remote Development extensions, Visual Studio Code now separates the
    experience into the Visual Studio Code user interface and the Visual Studio Code
    server. The server portion is responsible for loading the source code, launching
    the application, running the debugger, launching terminal processes, and similar
    other activities. The user interface portion provides the Windows user interface
    functionality by communicating with the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various flavors of the remote extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote-WSL, which runs the server in WSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote-SSH, which allows you to connect to a remote machine over SSH to run
    the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote-Containers, which allows you to use containers to run the server in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will spend the rest of this chapter looking at Remote-WSL and the next chapter
    will cover Remote-Containers. For more information on the Remote-Development extensions
    (including Remote-SSH), see https://code.visualstudio.com/docs/remote/remote-overview.
    Let's get started with Remote-WSL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Remote-WSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Remote-WSL extension is included in the Remote-Development extension pack
    ([https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)),
    which provides an easy way to install Remote-WSL, Remote-SSH, and Remote-Containers
    in a single step. If you prefer to just install Remote-WSL, then do that here:
    [https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl).'
  prefs: []
  type: TYPE_NORMAL
- en: To follow along with this, make sure that you have the code for the book cloned
    in a Linux distro. You can find the code at [https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques](https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques).
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample code uses Python 3, which should already be installed if you are
    using a recent version of Ubuntu. You can test whether Python 3 is installed by
    running `python3 -c ''print("hello")''` in your Linux distro. If the command completes
    successfully, then you''re all set. If not, refer to the Python documentation
    for instructions on installing: [https://wiki.python.org/moin/BeginnersGuide/Download](https://wiki.python.org/moin/BeginnersGuide/Download).'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's open the sample code in Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a folder with Remote-WSL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have installed Remote-WSL, open Visual Studio Code and select **Remote-WSL:
    New Window** from the command palette (*Ctrl* + *Shift* + *P*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – A screenshot showing the Remote-WSL commands in the command
    palette'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.3_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – A screenshot showing the Remote-WSL commands in the command palette
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot shows the new commands that the Remote-WSL extension has added,
    with **Remote-WSL: New Window** selected. This will open a new Visual Studio Code
    window, start up the Visual Studio Code server in your default WSL distro and
    connect to it. If you want to choose which distro to connect to, pick the **Remote-WSL:
    New Window using Distro…** option instead.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the new Visual Studio Code window opens, the very bottom left of the window
    will show **WSL: Ubuntu-18.04** (or whatever distro you have open) to indicate
    that this instance of Visual Studio Code is connected via Remote-WSL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can choose **File: Open Folder…** from the command palette to open the
    sample code. When performing this action in Visual Studio Code without connecting
    through Remote-WSL, this will open the standard Windows file dialog. However,
    since we''re connected with Remote-WSL, this command will now prompt us to pick
    a folder in the distro that we connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – A screenshot showing the Remote-WSL folder picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.4_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – A screenshot showing the Remote-WSL folder picker
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot shows selecting the folder to open from the WSL distribution
    file system. Note that I cloned the code for the book into `wsl-book` in my `home`
    folder. Depending on where you saved the code, you may have a path such as `/home/<your-user>/WSL-2-Tips-Tricks-and-Techniques/chapter-09/web-app`.
    Once you have opened the folder, Visual Studio starts processing the contents
    and will prompt you to install recommended extensions if you haven''t already
    got the Python extension installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – A screenshot showing the recommended extensions prompt'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.5_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – A screenshot showing the recommended extensions prompt
  prefs: []
  type: TYPE_NORMAL
- en: 'The prompt in this screenshot appears because the folder you just opened contains
    a `.vscode/extensions.json` file that lists the Python extension. When the prompt
    appears, either click **Install All** to install the extension or click **Show
    Recommendations** to check the extension before installing. Note that you might
    be prompted, even if you had previously installed the Python extension in Visual
    Studio Code before using Remote-WSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – A screenshot showing Python installed in Windows but not WSL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.6_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – A screenshot showing Python installed in Windows but not WSL
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the **EXTENSIONS** view in Visual Studio Code indicating
    that the Python extension is already installed in Windows and prompting us to
    install Remote-WSL for the distro that the current project is loaded in. If you
    see this, click the **Install** button to install in WSL.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have the Visual Studio Code user interface running in Windows
    and connected to a server component running in our WSL distro. The server has
    loaded the code for the web app and we've installed the Python extension, which
    is now running in the server.
  prefs: []
  type: TYPE_NORMAL
- en: With this set up, let's look at how to run the code under the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Running the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the app, we first need to ensure that the Python extension is using
    the correct version of Python (we want Python 3). To do this, look along the status
    bar at the bottom of the Visual Studio Code window until you see something that
    says **Python 2.7.18 64-bit** or similar. Clicking on this section brings up the
    Python version picker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – A screenshot showing the Python version picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.7_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – A screenshot showing the Python version picker
  prefs: []
  type: TYPE_NORMAL
- en: As shown in this screenshot, the version picker shows any versions of Python
    it has detected and allows you to pick the one that you want (here, we picked
    a Python 3 version). Notice that the paths shown in this list are all Linux paths,
    confirming that the Python extension is running in the Visual Studio Code server
    in WSL. If you prefer to work with Python virtual environments ([https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html))
    and have created one for the project, these will also show in this list for you
    to select.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can run the app, we need to install the dependencies. From the command
    palette, choose `pip3 install -r requirements.txt` to install our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have pip3 installed, run `sudo apt-update && sudo apt install python3-pip`
    to install.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, follow the instructions here: [https://packaging.python.org/guides/installing-using-linux-tools/](https://packaging.python.org/guides/installing-using-linux-tools/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open up `app.py` from the `app.py` open, we can launch the debugger by
    pressing *F5*, which will prompt you to select which configuration to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – A screenshot showing the Python configuration picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.8_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – A screenshot showing the Python configuration picker
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot shows the set of common debug options that the Python extension
    allows you to pick from. We''ll see how to configure it for full flexibility in
    a moment, but for now, pick **Flask**. This will launch the app using the Flask
    framework and attach the debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – A screenshot showing the application running under the debugger'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.9_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – A screenshot showing the application running under the debugger
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous screenshot, you can see that the integrated terminal window
    has been opened, and Visual Studio Code has launched our Flask application. When
    the application starts, it outputs the URL that it is listening on (`http://127.0.0.1:5000`
    in this example). Hovering over this link with the cursor invites you to *Ctrl*
    + *click* to open the link. Doing this will open the URL in your default browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – A screenshot showing the web app in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – A screenshot showing the web app in the browser
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the output from the web app in the browser, which includes
    the OS name and kernel version that the web app server is running on. Again, this
    demonstrates that while the Visual Studio Code user interface is running in Windows,
    all of the code is being handled and is running in our WSL distro. The combination
    of Visual Studio Code's Remote-WSL and the WSL traffic forwarding for localhost
    addresses gives us a rich and natural experience spanning Windows and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we've just used the debugger as a convenient way to launch our app.
    Next, let's look at using the debugger to step through our code.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging our app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll take a look at how to step through the code in our project
    in the debugger. Again, this allows us to use the Visual Studio Code user interface
    in Windows to connect to and debug the application running in our WSL distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last section, we saw how we can use *F5* to run our Python app and it
    prompted us for a configuration to use (we chose *Flask*). Since we haven''t configured
    the debugger for our project, we will be prompted to select the environment each
    time. Before we dig into the debugger, let''s set up the configuration so that
    *F5* automatically launches our app correctly. To do this, open the **RUN** view
    either by pressing *Ctrl* + *Shift* + *D* or selecting the **Run: Focus on Run
    View** command from the command palette:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – A screenshot showing the Run view in Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – A screenshot showing the Run view in Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot shows the `launch.json` file. You will be prompted with the
    same set of options as in *Figure 9.7* and should again choose `.vscode/launch.json`
    file in the folder we have open:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As this content shows, `launch.json` contains a `env` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the debug options configured, let''s switch back to the `app.py` file
    and set a breakpoint. In `app.py` we have a `home` method, which returns some
    HTML and includes the output of the `get_os_info` function. Navigate to the `return`
    statement in that function and press *F9* to add a breakpoint (there are other
    ways to do this – see https://code.visualstudio.com/docs/editor/debugging). Now
    we can press *F5* to run our app and it will pause in the debugger when it is
    processing a request. To trigger the breakpoint, open the browser as before and
    switch back to Visual Studio Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – A screenshot of Visual Studio Code debugging a Python app in
    WSL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – A screenshot of Visual Studio Code debugging a Python app in WSL
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows Visual Studio Code debugging our app. On the left, we
    can see the local variables (for example, the content of the `sysname` variable)
    and the call stack. We can use the controls at the top of the window (or their
    keyboard shortcuts) to resume execution or step through the code. The bottom of
    the window shows the terminal that was used to run the application, and we can
    switch that to the `sysname="Hello"` and then pressing *F5* to resume the app.
    Switching back to the browser, you will see `Hello` in the output in the browser,
    showing that we updated the variable's value in the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''ve seen the rich support Visual Studio Code has for working with
    multiple languages (by installing language support through extensions). By installing
    and using the *Remote-WSL* extension, we can get the rich features of Visual Studio
    Code with the user experience in Windows and all the code services executed in
    WSL. In the example, we walked through all the code services that were running
    in WSL: the Python interpreter, the language service to enable refactoring, the
    debugger, and the application being debugged. All of that execution happens in
    WSL, so we are able to set up the environment in Linux and then have the rich
    UI over the top of that as we develop our application.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've had a look at the core experience, we'll dip into a few tips
    for making the most of Remote-WSL.
  prefs: []
  type: TYPE_NORMAL
- en: Tips for working with Remote-WSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will call out a number of tips that can help to further refine
    your experience when working with Visual Studio Code and Remote-WSL.
  prefs: []
  type: TYPE_NORMAL
- en: Loading Visual Studio Code from your terminal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Windows, you can launch Visual Studio Code from a terminal using the `code
    <path>` command to open the specified path. For example, you can use `code .`
    to open the current folder (`.`) in Visual Studio Code. This actually uses a `code.cmd`
    script file, but Windows allows you to drop the extension.
  prefs: []
  type: TYPE_NORMAL
- en: When working with WSL, it is common to have a terminal open, and with Remote-WSL,
    you also get a `code` command. So, you can navigate to your project folder in
    the terminal in WSL and run `code .` and it will launch Visual Studio Code and
    open the specified folder (the current folder in this case) using the Remote-WSL
    extension. This integration is a nice option to have and maintains a sense of
    parity and integration between Windows and WSL environments.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we saw how to get to Visual Studio Code from your terminal. Next, we'll
    look at the opposite.
  prefs: []
  type: TYPE_NORMAL
- en: Opening an external terminal in Windows Terminal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you''re in Visual Studio Code working on your app and you want a
    new terminal to run some commands. Visual Studio Code has the `Windows Terminal
    Integration` in the Visual Studio Code extensions view or open https://marketplace.visualstudio.com/items?itemName=Tyriar.windows-terminal.
    Once installed, there are a number of new commands available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – A screenshot showing the new Windows Terminal commands'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – A screenshot showing the new Windows Terminal commands
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the new commands available in the command palette. The
    **Open** command opens Windows Terminal to the Visual Studio Code workspace folder
    using the default profile in Windows Terminal. The **Open Active File's Folder**
    command opens the folder containing the currently open file in the default profile.
    The two additional commands that add **With Profile** correspond to the previous
    commands but allow you to pick which Windows Terminal profile to open the path
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to commands accessible from the command palette, this extension
    also adds new items to the right-click menu for files and folders in the Explorer
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – A screenshot showing the right-click menu commands'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – A screenshot showing the right-click menu commands
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, I clicked on a folder in the Explorer view and there are
    two menu items that the extension has added for opening the path in Windows Terminal.
    The first of these opens the path in the default profile and the second prompts
    for a path to open.
  prefs: []
  type: TYPE_NORMAL
- en: This extension makes it quick and easy to get a Windows Terminal instance open
    in the context of your Visual Studio Code project to keep you in the flow and
    productive.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll look at some tips for working with Git.
  prefs: []
  type: TYPE_NORMAL
- en: Using Visual Studio Code as your Git editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio Code provides integrated visual tools for working with Git repositories.
    Depending on your personal preferences, you may use the `git` command-line tool
    for some or all of your Git interactions. For some operations, Git opens a temporary
    file to gather further input, for example, to get the commit message on a merge
    commit or to determine what actions to take on an interactive rebase.
  prefs: []
  type: TYPE_NORMAL
- en: Unless you have configured an alternative, Git will use `vi` as its default
    editor. If you are comfortable with `vi` then that's great, but if you would prefer
    to use Visual Studio Code then we can leverage the `code` command we saw earlier
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure Git to use Visual Studio Code, we can run `git config --global
    core.editor "code --wait"`. The `--global` switch sets the config value for all
    repositories (unless they override it), and we are setting the `core.editor` value,
    which controls the editor that `git` uses. The value we are assigning to this
    setting is `code --wait`, which uses the `code` command we saw in the last section.
    Running the `code` command without the `--wait` switch launches Visual Studio
    Code and then exits (leaving Visual Studio Code running), which is generally what
    you want when using it to open a file or folder. However, when `git` launches
    an editor, it expects the process to block until the file is closed and the `--wait`
    switch gives us that behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – A screenshot showing Visual Studio Code as the Git editor for
    WSL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – A screenshot showing Visual Studio Code as the Git editor for
    WSL
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, you can see an interactive `git rebase` command in the terminal
    at the bottom, and the `git-rebase-todo` file that Git uses to capture the actions
    loaded in Visual Studio Code after configuring the Git editor.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll continue looking at Git, exploring ways to view Git history.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Git history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working on a project using Git for version control, it is likely that
    you will want to view the commit history at some point. There are various approaches
    to this, and you may well have your own preferred tool. Despite the bare-bones
    user interface style, I often use `gitk` because it is ubiquitous as it is included
    as part of the Git install. When working on Windows, you can simply run `gitk`
    from a folder with a Git repository. In WSL, we need to run `gitk.exe` so that
    it launches the Windows application (note that this requires Git to be installed
    on Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – A screenshot showing gitk.exe run from WSL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – A screenshot showing gitk.exe run from WSL
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, you can see the `gitk` Windows application run from a WSL
    Git repository and accessing the content through the file system mapping. If you
    have an alternative Windows app you prefer for viewing Git history, then this
    approach should also work, providing the application is in your path. If you find
    yourself forgetting to add the `.exe` when running these commands, you may wish
    to look at in [*Chapter 5*](B16412_05_Final_JC_ePub.xhtml#_idTextAnchor054), *Linux
    to Windows Interoperability*, in the *Creating aliases for Windows applications*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the Windows application is going via the Windows-to-Linux file mapping
    using the `\\wsl$` share, you may notice that the application loads more slowly
    for large Git repositories due to the overhead of this mapping. An alternative
    approach is to use an extension in Visual Studio Code such as **Git Graph** (https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – A screenshot showing the Git Graph extension in Visual Studio
    Code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B16412.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – A screenshot showing the Git Graph extension in Visual Studio
    Code
  prefs: []
  type: TYPE_NORMAL
- en: This screenshot shows the Git history using the **Git Graph** extension. By
    using a Visual Studio Code extension to render the Git history, the extension
    can be run by the server component running in WSL. This allows direct file access
    for querying the Git history and avoids the performance overhead of a Windows
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've had an overview of Visual Studio Code and seen that
    it is a flexible editor with a rich ecosystem of extensions that provide support
    for a wide range of languages and add extra capabilities to the editor.
  prefs: []
  type: TYPE_NORMAL
- en: One extension in particular is Remote-WSL, which allows the editor to be split
    in two with the user interface portion running in Windows and other functionality
    running in WSL (including file access, language services, and the debugger).
  prefs: []
  type: TYPE_NORMAL
- en: This capability enables you to work seamlessly with the rich functionality of
    Visual Studio Code (including extensions) but with your source code and applications
    all running in WSL. In this way, you can take full advantage of the tools and
    libraries available for your WSL distro.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore another of the Visual Studio Code Remote
    extensions, this time looking at running services in containers to automate development
    environments and provide isolation of dependencies.
  prefs: []
  type: TYPE_NORMAL
