- en: Fetching Data from the Web via HTTP Requests
  prefs: []
  type: TYPE_NORMAL
- en: Data is a part of everyday life nowadays. If it weren't for data, you wouldn't
    be reading this book or trying to learn more about Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to fetch and send your data inside an application is a requirement
    for a developer, not just an extra skill that's nice to have. The best way to
    learn it is by practicing it and finding out how it is done behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to build our own API data manipulation with
    the Fetch API and the most popular API library in the web right now, `axios`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a wrapper for the Fetch API as an HTTP client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a random cat image or GIF component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your local fake JSON API server with `MirageJS`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `axios` as the new HTTP client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating different `axios` instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a request and response interceptor for `axios`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CRUD interface with `axios` and `Vuesax`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using Node.js and Vue CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention, Windows users! You need to install an NPM package called `windows-build-tools`
    to be able to install the following required packages. To do this, open PowerShell
    as administrator and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Vue CLI, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a wrapper for the Fetch API as an HTTP client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Fetch API is the child of the old `XMLHttpRequest`. It has an improved API
    and a new and powerful set of features completely based on `Promises`.
  prefs: []
  type: TYPE_NORMAL
- en: The Fetch API is both simple and based on a generic definition of two objects,
    `Request`, and `Response`, which allow it to be used everywhere in the browser.
    The browser Fetch API can be executed inside the `window` or the `service worker`
    as well. There is no limitation on the usage of this API.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a wrapper around the Fetch API to
    make the API calls more simple.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue CLI we created in
    the '*Creating Your first project with Vue CLI*' recipe in [Chapter 2,](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)
    *Introducing TypeScript and the Vue Ecosystem*, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating the wrapper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, we need to create a new API wrapper to be used in this recipe. This will
    be the main file we will use on all the HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the base wrapper by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `baseFetch.js` in the `src/http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will create an asynchronous function that will receive as an argument the
    three variables of `url`, `method`, and `options`. This will be a currying function,
    which the second function will receive as an argument, `type`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating the API methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we need to make our HTTP method function. These functions will use the wrapper
    to execute the browser Fetch API and return the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create each one of the API method calls:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file called `fetchApi.js` in the `src/http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to import the `baseHttp` from the file we created in the first step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now in the following parts, we will create each one of the HTTP methods that
    will be available in our wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: GET method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In these steps, we are going to create the *HTTP GET* method. Follow each of
    the following instructions to create the `getHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a constant called `getHttp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define that constant as an asynchronous function that receives three arguments,
    `url`, `type`, and `options`. The `type` argument will have the default value
    of `'json'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, `''get''` as the second argument, the `options` as the
    third argument, and immediately execute the function with the `type` argument
    we received:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: POST method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are creating the *HTTP POST* method. Follow these steps to
    create the `postHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a constant called `postHttp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` argument that we received, and `''post''` as the second argument. In the
    third argument, we will pass an object with the `body` variable, and the deconstructed
    `options` argument that we received. Because of the currying property of `baseHttp`,
    we will execute the returned function with the `type` argument we received. The
    `body` is usually a JSON or a JavaScript object. If this request is going to be
    a file upload, `body` needs to be a `FormData` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: PUT method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now we are creating an *HTTP PUT* method. Use the following steps to create
    the `putHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a constant called `putHttp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''put''` as the second argument. In the third argument,
    we will pass an object with the `body` variable, and the deconstructed `options`
    argument that we received. Because of the currying property of `baseHttp`, we
    will execute the returned function with the `type` argument we received. `body`
    is usually a JSON or a JavaScript object, but if this request is going to be a
    file upload, `body` needs to be a `FormData` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: PATCH method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to create an *HTTP PATCH* method. Follow these steps to create the
    `patchHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a constant called `patchHttp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''patch''` as the second argument. In the third argument,
    we will pass an object with the `body` variable, and the deconstructed `options`
    argument that we received. Because of the currying property of `baseHttp`, we
    will execute the returned function with the `type` we received. `body` is usually
    a JSON or a JavaScript object, but if this request is going to be a file upload,
    `body` needs to be a `FormData` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: UPDATE method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we are creating an *HTTP UPDATE* method. Follow these steps
    to create the `updateHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a constant called `updateHttp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The `type` argument will have the default
    value of `'json'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''update''` as the second argument. In the third
    argument, we will pass an object with the `body` variable, and the deconstructed
    `options` argument that we received. Because of the currying property of `baseHttp`,
    we will execute the returned function with the `type` we received. `body` is usually
    a JSON or a JavaScript object, but if this request is going to be a file upload,
    `body` needs to be a `FormData` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: DELETE method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this final step, we will create a *DELETE HTTP* method. Follow these steps
    to create the `deleteHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a constant called `deleteHttp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign to that constant an asynchronous function that receives four arguments,
    `url`, `body`, `type`, and `options`. The type argument will have the default
    value of `'json'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this function return, we will execute the `baseHttp` function, passing the
    `url` that we received, and `''delete''` as the second argument. In the third
    argument, we will pass an object with the `body` variable, and the deconstructed
    `options` argument that we received. Because of the currying property of `baseHttp`,
    we will execute the returned function with the `type` we received. `body` is usually
    a JSON or a JavaScript object, but if this request is going to be a file upload,
    `body` needs to be a `FormData` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a wrapper for the `Fetch` API that is presented on
    the `window` element. This wrapper consists of a currying and closure function,
    where the first function receives the URL data, method, and options for the Fetch
    API, and the resulting function is the Fetch API response translator.
  prefs: []
  type: TYPE_NORMAL
- en: In the wrapper, the first part of the function will create our `fetch` request.
    There, we need to check whether it's a *GET* method, so we just need to execute
    it with the `url` parameter and omit the others. The second part of the function
    is responsible for the conversion of the `fetch` response. It will switch between
    the `type` parameter and execute the retrieving function according to the correct
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To receive the final data for your request, you always need to call the response
    translator after the request, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will get the data from the URL and transform the response into a JSON/JavaScript
    object.
  prefs: []
  type: TYPE_NORMAL
- en: The second part we made was the methods translator. We made functions for each
    one of the REST verbs to be used more easily. The GET verb doesn't have the ability
    to pass any `body` but all the others are capable of passing a `body` in the request.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the Fetch API at [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about FormData at [https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the Fetch response body at [https://developer.mozilla.org/en-US/docs/Web/API/Body/body](https://developer.mozilla.org/en-US/docs/Web/API/Body/body).
    [](https://developer.mozilla.org/en-US/docs/Web/API/Body/body)
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about headers at [https://developer.mozilla.org/en-US/docs/Web/API/Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about requests at [https://developer.mozilla.org/](https://developer.mozilla.org/en-US/docs/Web/API/Request)[en-US/docs/Web/API/Request](https://developer.mozilla.org/en-US/docs/Web/API/Request).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a random cat image or GIF component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's common knowledge that the internet is made of many GIFs and videos of cats.
    I'm sure that if we took down all cat-related content, we would have a web blackout.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to understand more about the Fetch API and how it can be used inside
    a component is to make a random cat image or GIF component.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue CLI that we used
    in the '*Creating a wrapper for the Fetch API as an HTTP client*' recipe, or we
    can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating the component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we will be using the components created in [Chapter 4](497a6a24-00bb-44d6-b184-887f3c30a401.xhtml)*,
    Components, Mixins, and Functional Components*, for visual elements. You can achieve
    the same results with simple HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will divide the creation of this component in three steps: `<script>`, `<template>`,
    and `<style>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps to create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `RandomCat.vue` in the `src/components` folder and
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `getHttp` function from the `fetchApi` wrapper we made in the ''*Creating
    a wrapper for the Fetch API as an HTTP client*'' recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Asynchronously import the `MaterialButton` and `MaterialCardBox` components
    in the `component` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we need to create a new data value named `kittyImage`,
    which will be by default an empty string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, we need to create the `getImage` method, which will
    fetch the image as a `Blob` and return it as a `URL.createObjectURL`. We also
    need to create the `newCatImage` method that will fetch a new still image of a
    cat and the `newCatGif` method that will fetch a new cat GIF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `beforeMount` life cycle hook, we need to make it asynchronous and execute
    the `newCatImage` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Follow these steps to create the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add the `MaterialCardBox` component with a header and sub-header,
    activate the `media` and `action` sections, and create the `<template>` named
    slots for `media` and `action`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` named slot for `media`, we need to add an `<img>` element
    that will receive a URI `Blob`, which will be displayed when there is any data
    in the `kittyImage` variable, or it will display a loading icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'At the `<template>` named slot for `action`, we will create two buttons, one
    for fetching cat images and another for fetching cat GIFs, and both will have
    an event listener on the `@click` directive that calls a function that fetches
    the corresponding image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <style> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the `<style>` part of the component, we need to set the `body font-size`
    for the CSS style calculation based on `rem` and `em`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Getting up and running with your new component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to add your component to your Vue application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `components` property, asynchronously import the `RandomCat.vue` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<template>` section of the file, declare the imported component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9adf427e-c7ae-401c-91ac-37c077f575ed.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the `getHttp` wrapper, the component was able to get the URL and retrieve
    it as a `Blob` type. With this response, we can use the `URL.createObjectUrl`
    navigator method and pass the `Blob` as an argument to get a valid image URL that
    can be used as the `src` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `URL.createObjectUrl` at [https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the `Blob` response type at [https://developer.mozilla.org/en-US/docs/Web/API/Body/blob](https://developer.mozilla.org/en-US/docs/Web/API/Body/blob).
  prefs: []
  type: TYPE_NORMAL
- en: Creating your fake JSON API server with MirageJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Faking data for testing, developing, or designing is always a problem. You need
    to have a big JSON or make a custom server to handle any data changes when presenting
    the application at the development stage.
  prefs: []
  type: TYPE_NORMAL
- en: There is now a way to help developers and UI designers achieve this without
    needing to code an external server – a new tool called MirageJS, a server emulator
    that runs on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the MirageJS as a mock server and execute
    HTTP requests on it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue CLI that we did
    in the '*Creating a wrapper for the Fetch API as an HTTP client*' recipe, or we
    can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating the mock server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we will be using the `getHttp` function from the `fetchApi`
    wrapper we made in the 'Creating a wrapper for the Fetch API as an HTTP client' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Work through the next steps and sections to create your `MirageJS` mock server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `MirageJS` server to your packages. You need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The version used in this recipe was 0.1.32\. Watch for any changes to `MirageJS`,
    as there are no current LTS versions of the library yet.
  prefs: []
  type: TYPE_NORMAL
- en: Now in the following sections, we will create each one of the HTTP methods that
    will be mocked by the MirageJS server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the mock database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we will create a `MirageJS` database that will be used to
    store the temporary data. Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `db.js` file in the `src/server` folder for the initial
    loaded data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to make a JavaScript object the default export for this file, containing
    the initial data that we want the server to have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Creating the GET route function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we are going to create the *HTTP GET* method that will be
    mocked by the `MirageJS` server. Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: For the *GET* methods, we need to create a new file called `get.js` in the `src/server`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this recipe, we will make a generic `getFrom` function that receives a
    key as an argument and returns a function. This returned function returns a direct
    point to the local database with the indicated key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Creating the POST route function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we are going to create the *HTTP POST* method, that will be
    mocked by the `MirageJS` server. Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: For the *POST* methods, we need to create a new file called `post.js` in the
    `src/server` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this recipe, we will make a generic `postFrom` function that receives a
    key as an argument and returns a function. This returned function will parse the
    `data` property of the HTTP request body and returns an internal function of the
    server schema that inserts the data inside the database. Using the `key` argument,
    the schema knows which table we are handling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Creating the PATCH route function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we are going to create the *HTTP PATCH* method that will be
    mocked by the `MirageJS` server. Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: For the *PATCH* methods, we need to create a new file called `patch.js` in the
    `src/server` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this recipe, we will make a generic `patchFrom` function that receives
    a key as an argument and returns a function. This returned function will parse
    the `data` property of the HTTP request body and returns an internal function
    of the server schema that updates a specific object with the `id` property that
    was passed along with the data. Using the `key` argument, the schema knows which
    table we are handling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Creating the DELETE route function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we are going to create the *HTTP DELETE* method that will
    be mocked by the `MirageJS` server. Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: For the *DELETE* methods, we need to create a new file called `delete.js` in
    the `src/server` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this recipe, we will make a generic `patchFrom` function that receives
    a key as an argument and returns a function. This returned function will parse
    the `data` property of the HTTP request body and return an internal function of
    the server schema that deletes a specific object with the `id` property, which
    was passed to the server via the route *REST* parameter. Using the `key` argument,
    the schema knows which table we are handling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Creating the server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we are going to create the `MirageJS` server and the routes
    that will be available. Follow these steps to create the server:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `server.js` inside the `src/server` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to import the `Server` class, the `baseData`, and the router
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a global variable to the `window` scope, called `server`, and set this
    variable as a new execution of the `Server` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Server` class construction options, add a new property called `seeds`.
    This property is a function that receives the server (`srv`) as an argument and
    executes the `srv.db.loadData` function passing the `baseDate` as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add in the same construction options to a new property called
    `routes`, which will create the mock server routes. This property is a function
    and on the function body, we will need to set the `namespace` of the mock server
    and the delay in milliseconds within which the server will respond. There will
    be four routes. For the **Create** route, we will make a new route called `/users`
    that listen to the *POST* method. For the **Read** route, we will make a new route
    called `/users` that listen to the *GET* method. For the **Update** route, we
    will make a new route called `/users/:id` that listens to the *PATCH* method,
    and finally, for the **Delete** route, we will make a new route called `/users`
    that listen to the *DELETE* method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Adding to the application
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this section, we will add the `MirageJS` server to the Vue application.
    Follow these steps to make the server available to your Vue application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.js` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to declare the server as the first imported declaration, so it''s available
    on the initial loading of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Creating the component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have our server, we need to test it. To do so, we will create a
    simple application that will run each of the HTTP methods and show the results
    of each call.
  prefs: []
  type: TYPE_NORMAL
- en: In the following parts, we will create a simple Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `getHttp`, `postHttp`, `patchHttp`, and `deleteHTTP` methods from
    the `fetchHttp` wrapper that we made in the ''Creating a wrapper for the Fetch
    API as an HTTP client'' recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we need to create three new properties to be used,
    `response`, `userData`, and `userId`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, we need to create four new methods, `getAllUsers`,
    `createUser`, `updateUser`, and `deleteUser`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `getAllUsers` method, we will set the response data property as the
    result of the `getHttp` function of the `api/users` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `createUser` method, we will receive a `data` argument, which will be
    an object that we will pass to the `postHttp` on the `api/users` route, and after
    that, we will execute the `getAllUsers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `updateUser` method, we will receive a `data` argument, which will
    be an object that we will pass to the `patchHttp` on the `api/users/:id` route,
    using the `id` property on the object as the `:id` on the route. After that, we
    will execute the `getAllUsers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, on the `deleteUser` method, we receive the user `id` as the argument,
    which is a number, then we pass it to the `deleteHttp` on the `api/users/:id`
    route, using the ID as `:id`. After that, we execute the `getAllUsers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the template, we need to add the `response` property, wrapped
    in an `<pre>` HTML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'For the creation and updating of a user, we need to create a `textarea` HTML
    input with a `v-model` directive bound to the `userData` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To send this data, we need to create two buttons, both having an event listener
    bound on the click event with the `@click` directive targeting the `createUser`
    and `updateUser` respectively, and passing the `userData` in the execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute the *DELETE* method, we need to create an input HTML element of
    type `number` with a `v-model` directive bound to the `userId` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to execute this action we need to create a button that will have an
    event listener bound on the click event with the `@click` directive, targeting
    the `deleteUser` method and passing the `userId` property on the execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f170dcb7-058b-45da-ade2-13a97c97fb8a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MirageJS` works like an interceptor of every HTTP request that happens on
    the application. The server intercepts all **XHR (XMLHttpRequest)** executions
    on the browsers and checks for the route to see whether it matches any one of
    the routes created on server creation. If it matches, the server will execute
    the function accordingly on the respective route.'
  prefs: []
  type: TYPE_NORMAL
- en: Working as a simple REST server with basic CRUD functions, the server has a
    schema-like database structure that helps in the process of making a virtual database
    for storing the data.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about MirageJS at [https://github.com/miragejs/miragejs](https://github.com/miragejs/miragejs).
  prefs: []
  type: TYPE_NORMAL
- en: Using axios as the new HTTP client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you need a library for HTTP requests, there is no doubt that `axios` is
    the one you should go to. Used by more than 1.5 million open-source projects and
    countless closed ones, this library is the king of HTTP libraries.
  prefs: []
  type: TYPE_NORMAL
- en: It's built to work with most browsers and provides one of the most complete
    sets of options out there – you can customize everything in your request.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to change our Fetch API wrapper to `axios`
    and start working around it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue CLI that we made
    in the '*Creating your fake JSON API Server with MirageJS*' recipe, or we can
    start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Changing from the Fetch API to Axios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the next steps, we will change the Fetch API used in the HTTP wrapper for
    the `axios` library. Follow these steps to change it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `axios` in your packages. You need to open Terminal (macOS or Linux)
    or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The version used in this recipe was 0.19.0\. Watch for changes to `axios`, as
    there is no LTS version of the library yet.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `baseFetch.js` file inside the `src/http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Simplify the method so that it will receive three arguments, `url`, `method`,
    and `options`, and return an `axios` method, calling the HTTP request with the
    methods passed as the constructor of the instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Changing the GET method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are changing the *HTTP GET* method. Follow these instructions
    to change the `getHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fetchApi.js` file inside the `src/http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `getHttp` function, we will add a new argument param, and remove the
    currying functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Changing the POST method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are changing the *HTTP POST* method. Follow these instructions
    to change the `postHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fetchApi.js` file inside the `http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `postHttp` function, we will change the `body` argument to `data`, and
    remove the currying functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Changing the PUT method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are changing the *HTTP PUT* method. Follow these instructions
    to change the `putHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fetchApi.js` file inside the `http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `putHttp` function, we will change the `body` argument to `data`, and
    remove the currying functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Changing the PATCH method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are changing the *HTTP PATCH* method. Follow these instructions
    to change the `patchHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fetchApi.js` file inside the `http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `patchHttp` function, we will change the `body` argument to `data`,
    and remove the currying functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Changing the UPDATE method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are changing the *HTTP UPDATE* method. Follow these instructions
    to change the `updateHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fetchApi.js` file inside the `http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `updateHttp` function, we will add a new argument param, and remove
    the currying functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Changing the DELETE method function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are changing the *HTTP DELETE* method. Follow these instructions
    to change the `deleteHttp` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fetchApi.js` file inside the `http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the `deleteHttp` function, we will change the `body` argument to `data`,
    and remove the currying functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Changing the component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this part, we will change how the component works with the new functions.
    Follow these instructions to change it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file inside the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `getAllUsers` method, we will need to change the way the response is
    defined because `axios` gives us a completely different response object than the
    Fetch API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `deleteUser` method, we can just pass the URL as the parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we made the wrapper for the Fetch API, we used a technique of abstracting
    the API into another interface, which made it possible to change from the Fetch
    API to the `axios` library. By doing this we were able to improve the methods
    and simplify how the functions are called and handled. For example, the GET method
    can now receive a new argument called **params**, which are objects of URL query
    parameters that will be automatically injected into the URL.
  prefs: []
  type: TYPE_NORMAL
- en: We also had to change the way that the responses were interpreted because `axios`
    have a more robust and complete response object than the Fetch API, which returns
    just the fetched response itself.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `axios` at [https://github.com/axios/axios](https://github.com/axios/axios).
  prefs: []
  type: TYPE_NORMAL
- en: Creating different axios instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using `axios`, you can have multiple instances of it running with none
    of them interfering with each other. For example, you have an instance pointing
    to a user API that is on version 1 and another pointing to the payment API that
    is on version 2, both sharing the same namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are going to learn how to create various `axios` instances, so you
    are able to work with as many API namespaces as you want without problems or interference.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue CLI that we did
    in the '*Using axios as the new HTTP client*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Changing the HTTP function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating multiple `axios` instances, the process of calling the `axios`
    library changes. Because of that, we need to change how our HTTP wrapper instantiates
    the `axios` library.
  prefs: []
  type: TYPE_NORMAL
- en: In the following parts, we will change how the HTTP wrapper works with the creation
    of a new `axios` instance, and make it available to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the HTTP Fetch wrapper
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the following steps, we will create a new custom `axios` instance that will
    be used in the HTTP wrapper. Follow these instructions to add the new instance
    to the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `baseFetch.js` file in the `src/http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to create a new factory function called `createAxios` to generate a
    new `axios` instance each time it''s executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to create the `localApi` constant, the value of which will be the
    result of the execution of the `createAxios` factory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `JSONPlaceHolder` we will create a constant that will be exported,
    named `jsonPlaceholderApi`, the value of which will be the execution of the `createAxios`
    factory. We will also pass an object as an argument with the `baseURL` property
    defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `export default` function, we need to change from `axios` to `localApi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Changing the HTTP methods function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will change how the HTTP methods will work with the new `axios`
    instances. Follow the instructions to do it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fetchApi.js` file in the `src/http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will import the `jsonPlaceholderApi` function from `baseFetch` as an extra
    imported value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create a new constant called `getTodos` that will be exported. This
    constant will be a function that will receive a `userId` as a parameter and return
    the GET function from `axios`, with the `userId` parameter we just received, inside
    a configuration object in a property called `params`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Changing the MirageJS server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will change how the `MirageJS` server works with the new `axios`
    instance that was created. Follow the instructions to do it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `server.js` file in the `src/server` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the `routes` property in the constructor object, we need to add a `passthrough`
    declaration, which will indicate to the MirageJS that all the calls to that URL
    won''t be intercepted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Changing the component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the changes in the wrapper functions, the `MirageJS` server methods, and
    the HTTP methods, we need to change the component to the new library that was
    implemented.
  prefs: []
  type: TYPE_NORMAL
- en: In the following parts, we will change the component to match the new library
    that was implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will change the `<script>` section of the single file component.
    Follow these steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to import the new `getTodos` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property of the `Vue` object, we need to create a new property
    called `userTodo`, with the default value of an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, we need to create a new method called `getUserTodo`
    that receives the `userId` argument. This method will fetch the list of to-do
    items of the user and will attribute the response to the `userTodo` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will change the `<template>` section of the single file component.
    Follow these steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the template, we need to create a new `input` HTML element,
    with the `v-model` directive bound to the `userId` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'To fetch the list of items, we need to create a button with an event listener
    bound on the click event with the `@click` directive, targeting the `getUserTodo`,
    and passing the `userId` in the execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9364d3c2-9016-4ecc-a920-ab4bdb6d3634.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we create a new instance of `axios`, a new object is created, and new configurations,
    headers, interceptors, and manipulators are defined. This happens because `axios`
    declares the `create` functions as the same as `new Class`. It's the same interface
    but different objects.
  prefs: []
  type: TYPE_NORMAL
- en: Using this possibility, we were able to create two connection drivers, one for
    the local API and another for the `JSONPlaceHolder` API, which has a different
    `baseURL`.
  prefs: []
  type: TYPE_NORMAL
- en: Because of MirageJS server integration, all the HTTP requests are intercepted
    by MirageJS, so we needed to add a directive in the router constructor that indicates
    the routes that MirageJS won't intercept.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the JSONPlaceHolder API at [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `axios` instances at [https://github.com/axios/axios#creating-an-instance](https://github.com/axios/axios#creating-an-instance).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about MirageJS at [https://github.com/miragejs/miragejs](https://github.com/miragejs/miragejs).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a request and response interceptor for axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using `axios` as the main HTTP manipulator in our application allows us to use
    request and response interceptors. Those are used to manipulate the data before
    sending it to the server or when receiving the data, manipulating it before sending
    it back to the JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: The most common way an interceptor is used is in JWT token validation and refreshing
    the requests that receive a specific error or API error manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a request interceptor to check the
    *POST*, *PATCH*, and *DELETE* methods and a response error manipulator.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can use the Vue project with Vue CLI that we made
    in the '*Creating different axios instances*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Creating the interceptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the following steps, we will create an `axios` interceptor that will work
    as a middleware. Follow the instructions do it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `Sweet Alert` package. To do this you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file called `interceptors.js` in the `src/http` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we import the Sweet Alert package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create a constant with an array of the *POST* methods that will
    be intercepted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create a function named `requestInterceptor` and export it. This
    function will receive one argument, `config`, which is an `axios` configuration
    object. We need to check whether the request method is included in the array we
    created earlier and whether the `data` property of the data body has an `id` property.
    If any of the checks didn''t pass, we will throw an `Error`, otherwise, we will
    return `config`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'For the response interceptor, we need to create a new function called `responseInterceptor`
    that returns the response, as we won''t change anything in this interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'For catching the error, we need to create an `errorInterceptor` function, which
    will be exported. This function receives an `error` as an argument and will display
    a `sweetalert2` alert error message and return a `Promise.reject` with the `error`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Adding the interceptors to the HTTP methods functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the following steps, we will add the `axios` interceptor to the HTTP method
    functions. Follow these steps to do it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `baseFetch.js` file in the `src/http` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to import the three interceptors we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'After the creation of the `localApi` instance, we declare the use of the request
    and response interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'After the creation of the `jsonPlaceholderApi` instance, we declare the use
    of the request and response interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each request that `axios` do passes through each of any one of the interceptors
    in the set. The same thing happens for the response. If any error is thrown on
    the interceptor, it will automatically be passed to the error manipulator, so
    the request won't be executed at all, or the response will be sent to the JavaScript
    code as an error.
  prefs: []
  type: TYPE_NORMAL
- en: We checked each request that was done for the *POST*, *PATCH*, and *DELETE*
    method to see if there was an `id` property in the body data. If there wasn't,
    we threw an error to the user, saying that they need to pass an ID for the request.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Sweet Alert 2 at [https://sweetalert2.github.io](https://sweetalert2.github.io).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the `axios` request interceptor at **[https://github.com/axios/axios#interceptors](https://github.com/axios/axios#interceptors).**
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CRUD interface with Axios and Vuesax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When dealing with data, there is something that we will always need to do:
    a CRUD process. Regardless of what kind of application you are developing, a CRUD
    interface is needed in order to input and manipulate any data on the server, the
    administrator panel, the backend of your application, or even the client side.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will learn how to create a simple CRUD interface using the `Vuesax`
    framework for the UI and `axios` for the HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, use the Vue project with Vue CLI that we used in the '*Creating
    a request and response interceptor for axios*' recipe, or start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell
    (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option. Choose the `default` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Adding Vuesax to the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the following steps, we will cover how to add the `Vuesax` UI library to
    your Vue application. Follow these instructions to do it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows) and execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Create a file called `style.css` in the `src` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `vuesax`, `material-icon`, and `Open Sans` font stylesheets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Open the `main.js` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `style.css` file and `Vuesax`. After that, you need to inform Vue
    to use `Vuesax`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Creating the component routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will continue the recipe in five parts: `List`, `Create`, `Read`, `Update`,
    and `Delete`. Our application will be a dynamic component application, so we will
    create five components, one for each part. Those components will be like our pages.'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to change `App.vue` to be our main route manager and create a
    mixin for changing the component.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `App.vue` in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import each one of the components that will be created here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, create two new values: `componentIs` with a default
    value of `''list''`, and `userId` with a default value of `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add a new property to the Vue object, called `provide`. This property
    will be a function, so the provided values to the components can be reactive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `computed` properties, we need to create a new property called `component`.
    This will be a switch case that will return our component, based on the `componentIs`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the methods, we need to create a `changeComponent` method that
    will update the current component to a new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `div#app` HTML element, we need to add a `vs-row` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `vs-row` component, we need to add a `vs-col` component with the following
    attributes: `vs-type` defined as `flex`, `vs-justify` defined as `left`, `vs-align`
    defined as `left`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, inside the `vs-col` component, we will add a dynamic component that
    has an `is` attribute to the computed property `component` and point the event
    listener at the `"change-component"` event that will execute the `changeComponent`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Creating the route mixin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the component mixin to be re-used in other components.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `changeComponent.js` in the `src/mixin` folder and
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This mixin will have a method called `changeComponent`, which will emit a `''change-component''`
    event with the name of the new component that needs to be rendered, and the `userId`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Creating the list component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The list component will be the index component. It will list the users in the
    application and have all the links for the other CRUD actions.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `list.vue` in the `src/components` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `getHttp` and `deleteHttp` from `fetchApi` and the `changeComponent`
    mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'In the component `mixins` property, we need to add the imported `changeComponent`
    mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property of the component, we add a new property named `userList`,
    with a default empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'For the methods, we create `getAllUsers` and `deleteUsers` methods. In the
    `getAllUsers` method, we fetch the user lists and set the `userList` value as
    the response from the `getHttp` function execution. The `deleteUser` method will
    execute the `deleteHttp` function, and then execute the `getAllUsers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we make the `beforeMount` life cycle hook asynchronous, calling the
    `getAllUsers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the following attributes: `vs-type` defined as `flex`, `vs-justify` defined
    as `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-col` component, we need to create a `vs-table` component. This
    component will have the `data` attribute pointed to the `userList` variable, and
    will have the `search`, `stripe`, and `pagination` attributes defined as true.
    The `max-items` attribute will be defined as `10` and the `style` attribute will
    have the value of `width: 100%; padding: 20px;`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'For the table header, we need to create a dynamic `<template>` named slot `thead`,
    and create for each column a `vs-th` component with the `sort-key` attribute defined
    as the respective object key property and the display as the name you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'For the table body, we need to create a dynamic `<template>` with a `slot-scope`
    attribute defined as the `data` property. Inside this `<template>` we need to
    create a `vs-tr` component that will iterate the data property and have a `vs-td`
    component for each column that you set on the head of the table. Each `vs-td`
    component has a data property set to the respective column data object property,
    and the content will be the same data rendered. The final column that is the actions
    column will have three buttons, one for Read, another for Update, and the last
    for Delete. The Read button will have an event listener on the `"click"` event
    pointing to the `changeComponent`, and the same goes for the Update button. The
    Delete button `"click"` event listener will be pointing to the `deleteUser` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside this `<template>` we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert a `vs-button` with
    the `color` attribute defined as `primary`, `type` defined as `filled`, `icon`
    defined as `fiber_new`, and `size` defined as `small`. The `@click` event listener
    will target the `changeComponent` method with the parameters `''create''` and
    `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <style> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a declaration of margin to the `vs-button` component class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/32cc6d50-9ad1-4037-ad9a-cdf3639463ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a generic user form component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the following parts, we will create a generic user form component that will
    be used by other components. This component is considered generic because it is
    a component that can be used by anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `userForm.vue` in the `src/components` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `props` Vue property, create two new properties called `value` and `disabled`,
    both being objects and having the three properties of `type`, `required`, and
    `default`. For the `value` property, the `type` will be `Object`, `required` will
    be `false`, and `default` will be a factory returning an object. For the `disabled`
    property, the `type` will be `Boolean`, `required` will be `false`, and the `default`
    will also be `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we need to add a new value of `tmpForm`, with the default
    value of an empty object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `watch` property, we need to create the handler for the `tmpForm`
    and the `value`. For the `tmpForm` watcher, we will add a `handler` function that
    will emit an `''input''` event on each change with the new `value`, and add the
    `deep` property to `true`. Finally, on the `value` watcher, we will add a `handler`
    function that will set the value of the `tmpForm` as the new `value`. We also
    need to define the `deep` and `immediate` properties as `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: When using watchers, declaring the `deep` property makes the watcher checks
    for deep changes on arrays or objects, and the `immediate` property executes the
    watcher as soon as the component is created.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the inputs wrapper, we need to create a `vs-row` component. Inside the
    `vs-row` component, we will create each input for our user form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'For the name input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.name`, the attributes of `disabled` bound to the `disabled` props, `label`
    defined as `''Name''`, `placeholder` defined as `''User Name''`, and `class` defined
    as `''inputMargin full-width''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'For the email input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.email`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Email''`, `placeholder` defined as `''User Email''`, and `class`
    defined as `''inputMargin full-width''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'For the country input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.country`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Country''`, `placeholder` defined as `''User Country''`, and `class`
    defined as `''inputMargin full-width''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'For the phone input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.phone`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Phone''`, `placeholder` defined as `''User Phone''`, and `class`
    defined as `''inputMargin full-width''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'For the birthday input, we need to create a `vs-col` component, with the attributes
    of `vs-type` defined as `''flex''`, `vs-justify` defined as `''left''`, `vs-align`
    defined as `''left''`, and `vs-w` defined as `''6''`. Inside of the `vs-col` component,
    we need to create a `vs-input` component, with the `v-model` directive bound to
    `tmpForm.birthday`, the `disabled` attributes bound to the `disabled` props, `label`
    defined as `''Birthday''`, `placeholder` defined as `''User Birthday''`, and `class`
    defined as `''inputMargin full-width''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <style> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<style>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new scoped class called `inputMargin` with the `margin` property defined
    as `15px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Creating the create user component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To start our process with user manipulation, we need to create an initial base
    user form to be shared between the `View`, `Create`, and `Update` components.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `create.vue` in the `src/components` folder and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `UserForm` component, the `changeComponent` mixin, and `postHttp`
    from `fetchApi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'It the `data` property, we will add a `userData` object with the `name`, `email`,
    `birthday`, `country`, and `phone` properties all defined as empty strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `mixins` property, we need to add the `changeComponent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `components` property, add the `UserForm` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, we need to create the `createUser` method that will
    use the data on the `userData` property and will create a new user on the server
    and then redirect the user to the users lists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the attributes of `vs-type` defined as `flex`, `vs-justify` defined as
    `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-col` component, we will add the `user-form` component with the
    `v-model` directive bound to `userData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside this `<template>` we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert two `vs-button`
    components. The first will be for creating the user and will have the attributes
    of `color` defined as `success`, `type` defined as `filled`, `icon` defined as
    `save`, and `size` defined as `small`. The `@click` event listener will target
    the `createUser` method and the second `vs-button` component will be for canceling
    this action and returning to the users lists. It will have the attributes of `color`
    defined as `danger`, `type` defined as `filled`, `icon` defined as `cancel`, `size`
    defined as `small`, `style` defined as `margin-left: 5px`, and the `@click` event
    listener target to the `changeComponent`  method with the `''list''` and `0` parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/87bf2b8e-ab56-4b75-965a-d7f4f71677ad.png)'
  prefs: []
  type: TYPE_IMG
- en: View component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the following parts, we will create the visualization component. This component
    will be used for viewing the information of the user only.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `view.vue` in the `src/components` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `UserForm` component, the `changeComponent` mixin, and the `getHttp`
    from `fetchApi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we will add a `userData` object with the `name`, `email`,
    `birthday`, `country`, and `phone` properties all defined as empty strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `mixins` property, we need to add the `changeComponent` mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `inject` property, we need to declare the `''userId''` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `components` property, add the `UserForm` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'For the methods, we will create the `getUserById` method. This method will
    fetch the user data by the current ID and set the `userData` value as the response
    from the `getHttp` function execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `beforeMount` life cycle hook, we will make it asynchronous, calling
    the `getUserById` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the attributes of `vs-type` defined as `flex`, `vs-justify` defined as
    `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-col` component, we will add the `UserForm` component with the
    `v-model` directive bound to `userData` and the `disabled` attribute set to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside this `<template>` we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert two `vs-button`
    components. The first will be for canceling this action and returning to the users
    lists. It will have the attributes of `color` defined as `danger`, `type` defined
    as `filled`, `icon` defined as `cancel`, `size` defined as `small`, and the`@click`
    event listener target to the `changeComponent` method with the `''list''` and
    `0` parameters. The second `vs-button` component will be for the editing the user
    and will have the attributes of `color` defined as `success`, `type` defined as
    `filled`, `icon` defined as `save`, `size` defined as `small` `style` defined
    as `margin-left: 5px`, and the `@click` event listener target to the `changeComponent`
    method with the `''list''` parameter and the injected `userId`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c55f576-a545-4245-a55c-163383606213.png)'
  prefs: []
  type: TYPE_IMG
- en: Updating the user component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We just viewed the user data, and now we want to update it. We need to make
    a new component that is almost the same as the view component but has the method
    of updating the user and has the form enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `update.vue` in the `src/components` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `UserForm` component, the `changeComponent` mixin, and the `getHttp`
    and `patchHttp` functions from `fetchApi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we will add a `userData` object, with the `name`, `email`,
    `birthday`, `country`, and `phone` properties, all defined as empty strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `mixins` property, we need to add the `changeComponent` mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `inject` property, we need to declare the `''userId''` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `components` property, add the `UserForm` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'For the methods, we will create two: `getUserById` and `updateUser`. The `getUserById`
    method will fetch the user data by the current ID and set the `userData` value
    as the response from the `getHttp` function execution, and the `updateUser` will
    send the current `userDate` to the server via the `patchHttp` function and redirect
    back to the users list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `beforeMount` life cycle hook, we will make it asynchronous, calling
    the `getUserById` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the single file component.
    Follow these instructions to create the component correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `vs-card` component with the `style` attribute defined as `margin:
    20px`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-card` component, create a dynamic `<template>` named slot for
    `header`, with an `<h3>` tag and your title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `vs-row` component with a `vs-col` component inside of
    it, with the attributes of `vs-type` defined as `flex`, `vs-justify` defined as
    `left`, `vs-align` defined as `left`, and `vs-w` defined as `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `vs-col` component, we will add the `UserForm` component with the
    `v-model` directive bound to `userData` and the `disabled` attribute set to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the card footer, we need to create a dynamic `<template>` named
    slot for `footer`. Inside `<template>`, we will add a `vs-row` component with
    the `vs-justify` attribute defined as `flex-start` and insert two `vs-button`
    components. The first will be for creating the user and will have the attributes
    of `color` defined as `success`, `type` defined as `filled`, `icon` defined as
    `save`, `size` defined as `small`, and the `@click` event listener target to the
    `updateUser` method. The second `vs-button` component will be for canceling this
    action and returning to the users lists. It will have the attributes of `color`
    defined as `danger`, `type` defined as `filled`, `icon` defined as `cancel`, `size`
    defined as `small`, `style` defined as `margin-left: 5px`, and the `@click` event
    listener target to the `changeComponent` method with the `''list''` and `0` parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/55f3448e-e4c1-46c5-8a37-35eec0f0695e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CRUD interface that we created works like a router application, with three
    routes, the index or list, the view, and the edit route. Each route has its own
    screen and components, with separated logic functions.
  prefs: []
  type: TYPE_NORMAL
- en: We created an abstract `UserForm` component that was used on the `View` and
    `Update` components. This abstract component can be used in many other components,
    as it does not require any base logic to work; it's like an input but made of
    several inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Using the provide/inject API of Vue, we were able to pass the `userId` to each
    of the components in an observable way, which means that when the variable is
    updated, the component receives the updated variable. This is not achievable using
    the normal Vue API, so we had to use the `Object.defineProperty` and use the `provide`
    property as a factory function to return the final object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `Vuesax` at [https://lusaxweb.github.io/vuesax/](https://lusaxweb.github.io/vuesax/).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `Object.defineProperty` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the Vue provide/inject API at [https://vuejs.org/v2/guide/components-edge-cases.html](https://vuejs.org/v2/guide/components-edge-cases.html).
  prefs: []
  type: TYPE_NORMAL
