- en: Interactive Financial Analytics with the VIX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Investors use volatility derivatives to diversify and hedge their risk in equity
    and credit portfolios. Since long-term investors in equity funds are exposed to
    downside risk, volatility can be used as a hedge for the tail risk and replacement
    for the put options. In the United States, the **Chicago Board Options Exchange**
    (**CBOE**)** Volatility Index** (**VIX**), or simply called the **VIX**, measures
    the short-term volatility implied by S&P 500 stock index options with an average
    expiration of 30 days. Many people around the world use the VIX to measure stock
    market volatility over the next 30-day period. In Europe, the equivalent volatility
    counterpart indicator is the **EURO STOXX 50 Volatility** (**VSTOXX**) **Market
    Index**. For benchmark strategies utilizing the S&P 500 Index, the nature of its
    negative correlation with the VIX presents a viable way of avoiding benchmark-rebalancing
    costs. The statistical nature of volatility allows traders to perform mean-reverting
    strategies, dispersion trading, and volatility spread trading, among others.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at how to perform data analytics on the
    VIX and the S&P 500 Index. Using the S&P 500 Index options, we can reconstruct
    the VIX and compare them with the observed values. The code presented here runs
    on the Jupyter Notebook, the interactive component of Python, to help us visualize
    data and study relationships between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the EURO STOXX 50 index, VSTOXX, and the VIX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing financial analytics on the S&P 500 Index and the VIX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step-by-step reconstruction of the VIX index in accordance with the CBOE VIX
    white paper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding near-term and next-term options of the VIX index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining strike price boundaries of options datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tabulating contributions to the VIX by strike prices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating forward levels of near-term and next-term options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating volatility values of near-term and next-term options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating multiple VIX indexes at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing the results of the calculated index with the actual S&P 500 Index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volatility derivatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The two most popular volatility indexes worldwide are the VIX and VSTOXX, which
    are available in the United States and Europe respectively. The VIX is based on
    the S&P 500 Index that is disseminated on the CBOE. While the VIX is not traded
    directly, derivative products of the VIX such as options, futures, exchange-traded
    funds, and a host of volatility-based securities are available to investors. The
    CBOE website provides comprehensive information on many options and market indices
    such as the S&P 500 standard and weekly options, and the VIX, which we can analyze.
    We begin by understanding the background of these products before performing financial
    analytics on them in the later sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: STOXX and the Eurex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the United States, the S&P 500 Index is one of the most widely watched stock
    market indexes, created by Standard & Poor's Dow Jones Indices. In Europe, one
    such company is STOXX Limited.
  prefs: []
  type: TYPE_NORMAL
- en: Formed in 1997, STOXX Limited is headquartered in Zurich, Switzerland and calculates
    approximately 7,000 indices globally. As an index provider, it develops, maintains,
    distributes, and markets a comprehensive range of indices that are known to be
    strictly rule-based and transparent.
  prefs: []
  type: TYPE_NORMAL
- en: 'STOXX provides a number of equity indices in these categories: benchmark indices,
    blue-chip indices, dividend indices, size indices, sector indices, style indices,
    optimized indices, strategy indices, theme indices, sustainability indices, faith-based
    indices, smart beta indices, and calculation products.'
  prefs: []
  type: TYPE_NORMAL
- en: The Eurex Exchange is a derivatives exchange in Frankfurt, Germany offering
    more than 1,900 products, including equity indices, futures, options, ETFs, dividends,
    bonds, and repos. Many of STOXX's products and derivatives trade on the Eurex.
  prefs: []
  type: TYPE_NORMAL
- en: The EURO STOXX 50 Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Designed by STOXX Limited, the EURO STOXX 50 Index is one of the most liquid
    stock indexes worldwide, serving many indices products listed on the Eurex. It
    was introduced on February 26, 1998 and is made up of 50 blue-chip stocks from
    the 12 Eurozone countries: Austria, Belgium, Finland, France, Germany, Greece,
    Ireland, Italy, Luxembourg, the Netherlands, Portugal, and Spain. The EURO STOXX
    50 Index futures and options contracts are available and traded on the Eurex Exchange.
    Recalculation of the index takes place typically every 15 seconds based on real-time
    prices.'
  prefs: []
  type: TYPE_NORMAL
- en: The ticker symbol for the EURO STOXX 50 Index is SX5E. EURO STOXX 50 Index Options
    take on the ticker symbol OESX.
  prefs: []
  type: TYPE_NORMAL
- en: The VSTOXX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The VSTOXX or EURO STOXX 50 Volatility is a class of volatility derivatives
    serviced by the Eurex Exchange. The VSTOXX Market Index is based on the market
    prices of a basket of OESX quoted **at the money** or **out of the money**. It
    measures the implied market volatility over the next 30 days on the EURO STOXX
    50 Index.
  prefs: []
  type: TYPE_NORMAL
- en: Investors use volatility derivatives for benchmark strategies utilizing the
    EURO STOXX 50 Index; the nature of its negative correlation with the VSTOXX presents
    a viable way of avoiding benchmark-rebalancing costs. The statistical nature of
    volatility allows traders to perform mean-reverting strategies, dispersion trading,
    and volatility spread trading, among others. Recalculation of the index takes
    place every 5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The ticker symbol for the VSTOXX is V2TX. VSTOXX Options and VSTOXX Mini Futures
    based on the VSTOXX Index trade on the Eurex Exchange.
  prefs: []
  type: TYPE_NORMAL
- en: The S&P 500 Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The history of the **S&P 500 Index** (**SPX**) dates all the way back to 1923,
    where it was then known as the **Composite Index**. Initially, it tracked a small
    number of stocks. In 1957, the number of tracked stocks expanded to 500, and became
    the SPX.
  prefs: []
  type: TYPE_NORMAL
- en: Stocks that make up the SPX are publicly listed on the **New York Stock Exchange**
    (**NYSE**) or the **National Association of Securities Dealers Automated Quotations**
    (**NASDAQ**). The index is considered as a leading representation of the United
    States economy through large cap common stocks. Recalculation of the index takes
    place every 15 seconds and is distributed by Reuters America Holdings, Inc.
  prefs: []
  type: TYPE_NORMAL
- en: The common ticker symbols used by exchanges are *SPX* and *INX*, and on some
    websites is *^GSPC*.
  prefs: []
  type: TYPE_NORMAL
- en: SPX options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CBOE offers a variety of options contracts to be traded, including options
    on stock indices such as the SPX. SPX Index options products come with different
    expiration dates. Standard or traditional SPX options expire on the third Friday
    of every month, and are settled at the start of the business. **SPX Weekly** (**SPXW**)
    options products may expire weekly, on Mondays, Wednesdays and Fridays, or monthly
    on the last trading day of the month. If the expiration date falls on an exchange
    holiday, the expiration date will be brought forward to the preceding business
    day. Other SPX options are the minis, trading at one-tenth of the notional size,
    and the **SPDR ETF** (**S&P's Depositary Receipt Exchange-traded Fund**). Most
    SPX Index options are European style, with the exception of SPDR ETF which is
    American style.
  prefs: []
  type: TYPE_NORMAL
- en: The VIX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like the STOXX, the CBOE VIX measures the short-term volatility implied by S&P
    500 stock index option prices. The CBOE VIX began in 1993 based on the S&P 100
    Index, was updated in 2003 to be based on the SPX, and updated again in 2014 to
    include SPXW options. Many people around the world think of the VIX to be a popular
    measurement tool for stock market volatility over the next 30-day period. The
    VIX recalculates every 15 seconds and is distributed by CBOE.
  prefs: []
  type: TYPE_NORMAL
- en: VIX Options and VIX Futures are based on the VIX and trade on the CBOE.
  prefs: []
  type: TYPE_NORMAL
- en: Financial analytics of the S&P 500 and the VIX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will study the relationship between the VIX and the S&P
    500 Market Index.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using Alpha Vantage as our data provider. Let''s download the SPX
    and VIX datasets in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Query for the all-time S&P 500 historical data with the ticker symbol `^GSPC`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Do the same for the VIX Index with the ticker symbol `^VIX`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Inspect the contents of the DataFrame object, `df_spx_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Inspect the contents of the DataFrame object, `df_vix_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe that the start date of both datasets begins from January 3, 2000, and
    that the fifth column labeled `5\. adjusted close` contains our values of interest.
    Extract these two columns and combine them into a single `pandas` DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The last line `to_datetime()` method of `pandas` converts the trading dates
    given as string objects into a pandas `DatetimeIndex` object. Inspecting the head
    of our final DataFrame object `df` gives us the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Date** | **SPX** | **VIX** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 2000-01-03 | 1455.22 | 24.21 |'
  prefs: []
  type: TYPE_TB
- en: '| 2000-01-04 | 1399.42 | 27.01 |'
  prefs: []
  type: TYPE_TB
- en: '| 2000-01-05 | 1402.11 | 26.41 |'
  prefs: []
  type: TYPE_TB
- en: 'Viewing our formatted indexes shows us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With the `pandas` DataFrame formatted properly, let's proceed to work with this
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Performing analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `describe()` method of `pandas` gives us a summary statistic and distribution
    of values inside each column of the `pandas` DataFrame object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **SPX** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **count** | 4734.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **mean** | 1493.538998 |'
  prefs: []
  type: TYPE_TB
- en: '| **std** | 500.541938 |'
  prefs: []
  type: TYPE_TB
- en: '| **min** | 676.530000 |'
  prefs: []
  type: TYPE_TB
- en: '| **25%** | 1140.650000 |'
  prefs: []
  type: TYPE_TB
- en: '| **50%** | 1332.730000 |'
  prefs: []
  type: TYPE_TB
- en: '| **75%** | 1840.515000 |'
  prefs: []
  type: TYPE_TB
- en: '| **max** | 2930.750000 |'
  prefs: []
  type: TYPE_TB
- en: 'Another related method, `info()`, used earlier, gives us a technical summary
    of the DataFrame, such as the range of the index and memory usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s plot the S&P 500 and VIX to see how they look from the year 2010 onwards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/61bef461-df5a-4d26-a286-d3b556d523b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Observe that when the S&P 500 moves up, the VIX appears to move downwards, exhibiting
    a negative correlation relationship. We need to perform more statistical analysis
    to be sure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps we might be interested in the daily returns of both the indexes. The
    `diff()` method returns the set of differences between the prior period values.
    A histogram can be used to give us a rough sense of the data density estimation
    over a bin interval of 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `hist()` method gives us the following histograms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/636afa58-51b6-4d79-ad6c-54cc617c52ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same effect can also be achieved with the `pct_change()` command that gives
    us the percentage change over the prior period values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the same histogram in terms of percentage changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/63bf9d35-c4a4-4ab5-8ce6-3fb8a016e29c.png)'
  prefs: []
  type: TYPE_IMG
- en: For quantitative analysis of returns, we are interested in the logarithm of
    daily returns. Why use log returns over simple returns? There are several reasons,
    but the most important of them is normalization, and this avoids the problem of
    negative prices.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `shift()` function of `pandas` to shift the values by a certain
    number of periods. The `dropna()` method removes the unused values at the end
    of the logarithmic calculation transformation. The `log()` method of NumPy helps
    to calculate the logarithm of all values in the DataFrame object as a vector,
    and will be stored in the `log_returns` variable as a DataFrame object. The logarithm
    values can then be plotted to give us a graph of daily log returns. Here is the
    code to plot the logarithm values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5803aa92-e62b-4e57-8ada-e9e81d40e1c6.png)'
  prefs: []
  type: TYPE_IMG
- en: The top and bottom graph show the log returns of SPX and VIX, respectively,
    from the year 2000 and up to the present period.
  prefs: []
  type: TYPE_NORMAL
- en: The correlation between the SPX and the VIX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the `corr()` method to derive the correlation values between each
    column of values in the `pandas` DataFrame object, as in the following Python
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following correlation table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **SPX** | **VIX** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **SPX** | 1.000000 | -0.733161 |'
  prefs: []
  type: TYPE_TB
- en: '| **VIX** | -0.733161 | 1.000000 |'
  prefs: []
  type: TYPE_TB
- en: 'At -0.731433, the SPX is negatively correlated with the VIX. To help us better
    visualize this relationship, we can plot both sets of the daily log return values
    as a scatter plot. The `statsmodels.api` module is used to obtain the ordinary
    least squares regression line between the scattered data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2a73b56d-9cac-4fae-bd9f-d20fc2111257.png)'
  prefs: []
  type: TYPE_IMG
- en: The downward-sloping regression line, as shown in the preceding graph, confirms
    the negative correlation relationship between the S&P 500 and the VIX indices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `rolling().corr()` method of `pandas` computes the moving-window correlation
    between two time series. We use a value of `252` to represent the number of trading
    days in the moving window to compute the annual rolling correlation, using the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/425f49cc-56ea-4f2c-bb4d-3048673e2c32.png)'
  prefs: []
  type: TYPE_IMG
- en: It can be seen from the preceding graph that the SPX and the VIX are negatively
    correlated, fluctuating between 0.0 and -0.9 during most of the lifetime of the
    indices using 252 trading days per year.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the VIX Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will perform a step-by-step replication of the VIX Index.
    Calculation of the VIX Index is documented on the CBOE website. You may obtain
    a copy of the CBOE VIX white paper at [http://www.cboe.com/micro/vix/vixwhite.pdf](http://www.cboe.com/micro/vix/vixwhite.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Importing SPX options data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you had gathered SPX options data from your broker or purchased historical
    data from an external source such as the CBOE website. For the purpose of this
    chapter, the end-of-day SPX option chain prices are observed from Monday, October
    15, 2018 to Friday, October 19, 2018 and saved into **Comma-separated Values**
    (**CSV**) files. Sample copies of these files are provided under the files folder
    of the source codes repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, write a function, `read_file()`, that accepts the
    file path in its first argument indicating the location of a CSV file, and returns
    a tuple of a list of metadata and a list of option chain data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note that the structure of your own options data may differ from this example.
    Be prudent to check and modify this function accordingly. Having imported our
    dataset, we can proceed to parse and extract useful information.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing SPX options data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we assume the top three rows of the CSV file contain meta
    information, with the rest of the options chain prices starting from row four
    onwards. For each row of options pricing data, the first seven columns contain
    the bid and ask quotes of a call contract, with the next seven columns for a put
    contract. The first of each seven column contains a string describing the expiry
    date, strike price, and contract code. Follow these steps to parse information
    from our CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each row of meta information is appended in a list variable named `meta_data`,
    while each row of options data is appended to a list variable named `calls_and_puts`.
    Reading a single file with this function gives us the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing each row of metadata provides the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The current time of the option quotes can be found on the second row of our
    metadata. Since Eastern Time is 5 hours behind **Greenwich Mean Time** (**GMT**),
    we replace the `ET` string and parse the entire string as a `datetime` object.
    The following function, `get_dt_current()`, demonstrates this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'From the meta information of our options data, extract the date and time information
    as Chicago local time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look at the first two lines of our option quotes data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Each item in the list contains a tuple of two objects, with each object containing
    a list of a call option and a put option pricing data having the same strike price.
    Referring to our printed headers, the seven items of each option price list data
    contains the contract code with expiry date, the last sale price, the net change
    in price, the bid price, ask price, volume traded, and open interest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write a function to parse the description of each SPX option dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The utility function, `parse_expiry_and_strike()`, returns a tuple of expiration
    date object, and the strike price as a `Decimal` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each contract data is a string containing the expiration year, month, day,
    and strike price, followed by the contract code, all separated by spaces. We take
    the date components and reconstruct a date and time string, easily parsed by the
    parser function of `dateutil` imported earlier. Weekly options expire at 4 PM
    New York time, or 3 PM Chicago time. Standard third Friday options are AM-settled
    and expire at the start of the trading day at 8.30 AM. We replace the expiration
    time in accordance with performing a `is_third_friday()` check, implemented as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Testing our function with a simple contract code data and printing the results
    gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Since September 26, 2018 falls on a Wednesday, the SPXW option will expire at
    3 PM CDT, Chicago local time.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time round, let''s test our function with a contract code data that falls
    on a third Friday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The test contract code data we have used is October 19, 2018, which falls on
    the third Friday of October. This is a standard SPX option that is settled at
    the start of the trading day, at 8.30 AM Chicago time.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our utility function in place, we can now go ahead and parse a single
    call or put option price entry, and return useful information that we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The utility function, `format_option_data()`, takes `option_data` as its argument,
    containing a list of data we have seen earlier. The descriptive data at index
    zero contains the contract code data that we can parse using the `parse_expiry_and_strike()`
    function. Indexes three and four contain the bid and ask price, which are used
    to compute the mid price. The mid price is the average of the bid and ask price.
    This function returns a tuple of the option expiry date, as well as the strike,
    bid, ask, and mid prices as `Decimal` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Finding near-term and next-term options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The VIX Index measures the 30-day expected volatility of the SPX using the market
    quotes of call and put options expiring between 24 days and 36 days. In between
    these dates, there will be two SPX option contract maturity dates. Options expiring
    the nearest are referred to as near-term options, while the options expiring later
    are referred to as next-term options. Happening once per week, when the option
    maturities are out of the 24 to 36 days range, new contract maturities will be
    chosen as the new near-term and next-term options.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help us in finding the near-term and next-term options, let''s organize
    our puts and calls options data indexed by maturity dates, each having a `pandas`
    DataFrame indexed by strike price. We would need the following DataFrame column
    definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function, `generate_options_chain()`, organizes our list dataset,
    `calls_and_puts`, into a single dictionary variable chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `chain` variable has its keys as the option maturity dates, each referencing
    to a `pandas` DataFrame object. Two invocations to the `format_option_data()`
    function are made to derive the calls and puts data of interest. The `assert`
    keyword ensures the integrity of our call and put expiry dates, based on the assumption
    that each line in our dataset refers to the same expiry date. Otherwise, an exception
    will be thrown and calls to our attention to inspect the dataset for any signs
    of corruption.
  prefs: []
  type: TYPE_NORMAL
- en: The `loc` keyword assigns column values for a specific strike price, for both
    calls and puts data. In addition, the `diff` column contains the absolute difference
    between the mid prices of call and put quotes, which we will use later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s view the first and last two keys in our `chain` dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Our dataset contains options prices for maturities over the next two years.
    From these, we select our near-term and next-term maturities with the following
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are simply selecting the first two options whose maturities are over
    23 days from the time of this dataset. These two option maturities are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The near-term maturity is on November 9, 2018 and the next-term maturity is
    on November 16, 2018.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the required minutes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The formula for calculating the VIX is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cf22be32-84f5-4672-9d86-bc7874df9a89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: T[1] is the number of years to settlement of the near-term options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T[2] is the number of years to settlement of the next-term options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: N[T1] is the number of minutes to settlement of the near-term options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: N[T2] is the number of minutes to settlement of the next-term options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: N[30] is the number of minutes in 30 days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: N[365] is the number of minutes in a year with 365 days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s find out these values in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The difference of two `datetime` objects returns a `timedelta` object, whose
    `total_seconds()` method gives the difference in terms of the number of seconds.
    The number of minutes can be obtained by dividing the number of seconds by sixty.
    The number of minutes in a year is found by taking the difference between the
    start of next year and the start of current year, while the number of minutes
    in a month is simply the sum of seconds in thirty days.
  prefs: []
  type: TYPE_NORMAL
- en: 'The values obtained are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The general formula for calculating T is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/edbb82f3-00b5-4338-a396-0b821d9eba6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: M[current day] is the number of minutes remaining until midnight of the current
    day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M[other days] is the sum of minutes between the current day and the expiration
    day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M[settlement day] is the number of minutes from midnight of the expiration day
    until the expiration time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these, we can find T[1] and T[2 ], that is, the amount of time remaining
    per year for the near-term and next-term options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The near-term option is 0.6792 years to maturity and the next-term option is
    0.08636 years to maturity.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the forward SPX Index level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each contract month, the forward SPX level *F* is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e387f54e-6191-425f-a982-942bbf0c055a.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, the strike price is chosen where the absolute difference between the call
    and put prices is the minimum. Note that options with zero bid prices are not
    taken into account for the VIX Index calculation. This suggests that as volatility
    of the SPX and options changes, the bid quotes may become zero, and the number
    of options used in calculation of the VIX Index may vary at any minute!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can represent the forward index level calculation with the `determine_forward_level()`
    function, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `df` argument is the DataFrame containing the near-term or next-term options
    prices. The `min_diff` variable contains the minimum of all absolute price differences
    computed in the diff column earlier. The `pd_k` variable contains the DataFrame
    at which we will choose our strike price having the minimum absolute price difference.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are assuming an interest rate of 2.17% for both option chains for
    the sake of simplicity. In practice, the interest rates of near-term and next-term
    options are based on a cubic spline calculation of U.S. Treasury yield curve rates,
    or **Constant Maturity Treasury rates** (**CMTs**). Yield curve rates are available
    from the U.S. Department of the Treasury website at [https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yieldYear&year=2018](https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yieldYear&year=2018).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s calculate the forward SPX level for the near-term options as `f1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We will be using the forward SPX level, *F*, as 2747.596.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the required forward strike prices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The forward strike price is the strike price immediately below the forward
    SPX level, denoted by `k0`, and is determined by the `find_k0()` function, written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The value of `k0` of the near-term option can simply be found with the function
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The near-term forward strike price is found to be 2745.
  prefs: []
  type: TYPE_NORMAL
- en: Determining strike price boundaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When selecting options used in the VIX Index calculation, calls and puts with
    bid prices of zero are ignored. For far **out-of-the-money** (**OTM**) put options
    where strike prices are lower than `k0`, the lower price boundary terminates when
    two consecutive zero bid prices are encountered. Similarly, for far OTM call options
    with strike prices more than `k0`, the upper price boundary terminates when two
    consecutive zero bid prices are encountered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following function, `find_lower_and_upper_bounds()`, illustrates the process
    of finding the lower and upper boundaries in Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `df` argument is the `pandas` DataFrame of the option prices. The `otm_puts`
    variable contains OTM puts data, and is iterated backwards in descending order
    by the `for` loop. At each iteration, the `k_lower` variable stores the current
    strike price while we are looking at two bid prices ahead in the loop. When the
    `for` loop terminates due to two zero bids encountered or reaches the end of the
    list, `k_lower` will contain the strike price of the lower boundary.
  prefs: []
  type: TYPE_NORMAL
- en: The same methodology is applied in finding the strike price of the upper boundary.
    Since the strike prices of OTM calls are already in descending order, we simply
    read the prices using forward index referencing on the `iloc` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we provide the near-term option chain data to this function, the lower
    and upper strike price boundaries can be obtained from the `k_lower` and `k_upper`
    variables, respectively, as shown in the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Near-term options with strike prices from 1,500 to 3,200 will be used in the
    calculation of the VIX Index.
  prefs: []
  type: TYPE_NORMAL
- en: Tabulating contributions by strike prices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the VIX Index is composed of prices of calls and puts options expiring
    on an average of 30 days, each option of the chosen maturity date contributes
    to the VIX Index calculation by a certain amount. This amount is given as the
    general formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/548953d5-c05a-408a-b2c7-08bd3fb208aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *T* is the time to expiration of the option, *R* is the risk-free interest
    rate to expiration of the option, *K[i]* is the strike price of the *i*th OTM
    option, and △K[i] is the half-difference on either side of *K[i]* such that △K[i]=
    0.5(K[i+1]-K[i-1]).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can represent this formula by the following  `calculate_contrib_by_strike()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In calculating △K[i]=0.5(K[i+1]-K[i-1]), we search for *K[i-1]* using the utility
    function, `find_prev_k()`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we use the same procedure in searching for K[i+1] using the utility
    function, `find_next_k()`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'With the preceding utility functions, we can now create a function, `tabulate_contrib_by_strike()`,
    that uses an iterative procedure to calculate the contributions of each option
    for every strike price available in the `pandas` DataFrame `df` with option prices,
    returning a new DataFrame containing the final dataset used towards the calculation
    of the VIX Index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The resulting DataFrame is indexed by strike price and contains three columns—the
    option type as either a *Call* or *Put*, the average of the bid-ask spread, and
    the contribution to the VIX Index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tabulating the contributions of our near-term options gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Peeking at the head of the results provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Option Type** | **mid** | **contrib** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **1250.00** | Put | 0.10 | 0.000003204720007271874493426366826 |'
  prefs: []
  type: TYPE_TB
- en: '| **1300.00** | Put | 0.125 | 0.000003703679742131881579865901010 |'
  prefs: []
  type: TYPE_TB
- en: '| **1350.00** | Put | 0.15 | 0.000004121296305647986745661479970 |'
  prefs: []
  type: TYPE_TB
- en: '| **1400.00** | Put | 0.20 | 0.000005109566338124799893855814454 |'
  prefs: []
  type: TYPE_TB
- en: '| **1450.00** | Put | 0.20 | 0.000004763258036967708819004706934 |'
  prefs: []
  type: TYPE_TB
- en: 'Peeking at the tail of the results provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This also gives us the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Option Type** | **mid** | **contrib** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **3020.00** | Call | 0.175 | 9.608028452572290489411343569E-8 |'
  prefs: []
  type: TYPE_TB
- en: '| **3025.00** | Call | 0.225 | 1.231237623174939828257858985E-7 |'
  prefs: []
  type: TYPE_TB
- en: '| **3030.00** | Call | 0.175 | 9.544713775211615220689389699E-8 |'
  prefs: []
  type: TYPE_TB
- en: '| **3035.00** | Call | 0.20 | 1.087233242345573774601901086E-7 |'
  prefs: []
  type: TYPE_TB
- en: '| **3040.00** | Call | 0.15 | 8.127448187590304540304760266E-8 |'
  prefs: []
  type: TYPE_TB
- en: The `pd_contrib_near` variable contains the near-term call and put OTM options
    contained in a single DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the volatilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The volatility calculation for the chosen options is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/79c5426c-8d4e-42c5-b999-8abdb4026cdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we have already computed the contributions for the summation term, this
    formula can be simply written in Python as the `calculate_volatility()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Computing the volatility of the near-term option gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The volatility of the near-term option is 0.04891.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the next-term options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as we did for near-term options, calculating the next-term options is
    pretty straightforward with the following Python calls to the functions already
    defined in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Since `dt_next` is our next-term maturity date, calling `chain.get()` retrieves
    the next-term option prices from the options chain store. With this data, we determine
    the forward SPX level, `f2`, for the next-term option, find its forward strike
    price, `k0_next`, and find its lower and upper strike price boundaries. Next,
    we tabulate the contributions of each option in calculating the VIX Index within
    the boundary of strike prices, from which we calculate the next-term volatility
    with the  `calculate_volatility()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The volatility of the next-term option is 0.0452.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the VIX Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, the 30-day weighted average of the VIX Index is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/07384973-e811-4e95-a2ff-f0c1a2c855ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Representing this formula in Python code gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Substituting with the values from near-term and next-term options provides
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We obtained the VIX Index as 21.43 at the close of October 15, 2018.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating multiple VIX indexes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a single VIX value calculated for a particular trading day, we can reuse
    the defined functions to calculate VIX values over a time period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write a function, `process_file()`, to process a single file path, and
    return the calculated VIX Index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we have observed options chain data and collected it into CSV files
    for the week of 15th to 19th of October, 2018\. We can define the filenames and
    file path pattern into constant variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterating through the dates and setting the calculated VIX value into a `pandas`
    DataFrame with a column named `''VIX''` gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Observing our data with the `head()` command provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following table, containing VIX values over a 5-day period:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **VIX** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **2018-10-15** | 21.4311 |'
  prefs: []
  type: TYPE_TB
- en: '| **2018-10-16** | 17.7384 |'
  prefs: []
  type: TYPE_TB
- en: '| **2018-10-17** | 17.4741 |'
  prefs: []
  type: TYPE_TB
- en: '| **2018-10-18** | 20.0477 |'
  prefs: []
  type: TYPE_TB
- en: '| **2018-10-19** | 19.9196 |'
  prefs: []
  type: TYPE_TB
- en: Comparing the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s compare the calculated VIX values against actual VIX values by reusing
    the DataFrame `df_vix_data` VIX Index that was downloaded in an earlier section,
    and extract only the relevant values for the corresponding week of 15th to 19th
    of October, 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual end-of-day VIX values for the period are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s merge the actual VIX values and the calculated values into a single
    DataFrame, and plot them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a2aa5abf-df9a-41c6-8ca0-b6c9a871416d.png)'
  prefs: []
  type: TYPE_IMG
- en: The calculated values in red dots appear to be very close to the actual VIX
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at volatility derivatives and their uses by investors
    to diversify and hedge their risk in equity and credit portfolios. Since long-term
    investors in equity funds are exposed to downside risk, volatility can be used
    as a hedge for the tail risk and in replacement for the put options. In the United
    States, the CBOE VIX measures the short-term volatility implied by SPX option
    prices. In Europe, the VSTOXX Market Index is based on the market prices of a
    basket of OESX, and measures the implied market volatility over the next 30 days
    on the EURO STOXX 50 Index. Many people around the world use the VIX as a popular
    measurement tool for the stock market volatility over the next 30-day period.
    To help us better understand how the VIX Index is calculated, we looked at its
    components and at formulas used in determining its value.
  prefs: []
  type: TYPE_NORMAL
- en: To help us determine the relationship between the SPX and the VIX, we downloaded
    these data and performed a variety of financial analytics, with the conclusion
    that they are negatively correlated. This relationship presents a viable way of
    avoiding frequent rebalancing costs by trading strategies based on benchmarking.
    The statistical nature of volatility allows volatility derivative traders to generate
    returns by utilizing mean-reverting strategies, dispersion trading, and volatility
    spread trading, among others.
  prefs: []
  type: TYPE_NORMAL
- en: In studying VIX-based trading strategies, we replicated the VIX Index for a
    single time period. Since the VIX Index is a sentiment of the volatility outlook
    for the next 30 days, it is made up of two SPX option chains expiring between
    24 and 36 days. As the SPX rises and falls, the volatility of SPX options changes,
    and option bids may become zero. The number of options included in the calculation
    of the VIX Index may change as a result. For the simplicity of breaking down the
    VIX calculations in this chapter, we assumed the number of options included is
    static. We also assumed the CMTs over the 5-day period is constant. In reality,
    options prices and the risk-free interest rate are constantly changing, and the
    VIX Index recalculates approximately every 15 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be building an algorithmic trading platform.
  prefs: []
  type: TYPE_NORMAL
