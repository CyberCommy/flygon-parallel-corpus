- en: Chapter 6. Developing Rich Media Applications Using Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the `canvas` environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the 2d rendering context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing shapes dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing borders for images using `canvas`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rounding corners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating interactive visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bouncing a ball
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating fallback content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"I prefer drawing to talking. Drawing is faster, and leaves less room for lies."
    - Le Corbusier'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This might be the most experimental chapter of this entire book. In the recipes
    that follow, we will really push the limits of what is possible throughout this
    group of recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that over the course of time, the experimental new `canvas` element
    specifications are likely to change. Consider this group of recipes to be a snapshot
    of what is possible at the time of publication.
  prefs: []
  type: TYPE_NORMAL
- en: Putting an image on a website is so easy we take it for granted now. Through
    code, you simply tell the browser to display an image and, it's done. All that
    seems like child's play. Currently, some browsers can actually create dynamic
    images on the fly using the new `canvas` element. All the heavy lifting is up
    to JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The cool thing with the new open-source `canvas` element is that not only can
    you create dynamic images on the fly, but the users' actions can create new images
    in real time as well — all without requiring a plugin. Sounds great, right? In
    many ways it is, but it also leaves our friends using assistive technologies out
    in the cold.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What will happen if you're using a browser that doesn't support the new `canvas`
    element? Pretty much nothing. The browser just won't display it. That's why you'll
    need to be especially careful with this technology and not place anything inside
    the new `canvas` element on which your site or application absolutely depends.
    You must also consider fallback content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsers that support `canvas` include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/1048_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before proceeding with developing with the new `canvas` element, make sure you
    have a good foundation of skills with HTML and JavaScript. Being comfortable with
    object-oriented programming sure wouldn't hurt either.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll look at real-life examples of setting up the `canvas`
    environment, understanding the 2d rendering context, processing shapes dynamically,
    drawing borders for images using `canvas`, rounding corners, creating interactive
    visualizations, bouncing a ball, and creating fallback content.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get cooking!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the canvas environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating the new `canvas` element is easy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check out how simple this is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, we can use whatever height and width dimensions we need, but that
    simple set of tags is what we need to start.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You're probably thinking we could use CSS to control the height and width, but
    resist that temptation. Because the new `canvas` element contains a 2d rendering
    context, that approach can cause unpredictable behavior.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we''ll call the new `canvas` element JavaScript API while calling jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: He's smart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"Let me make one thing completely clear: When you use `canvas`, you''re not
    drawing on the `canvas` element itself. Instead, you''re actually drawing on the
    2d rendering context, which you''re accessing through the `canvas` element via
    the JavaScript API." - Rob Hawkes'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What am I sayin'?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple first introduced the new `canvas` element for the OSX Dashboard years
    ago. It was later implemented in web browsers Safari and then Chrome, with other
    browsers following suit. Since then it's become an official part of the HTML5
    specification.
  prefs: []
  type: TYPE_NORMAL
- en: What's next for <canvas>?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right now, we're barely scratching the surface of what the new `canvas` element
    can do. Now and in the future we'll use it to create animations, charts, diagrams,
    drawing apps, graphs, and user interfaces. What will you dream up?
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Developer Martin Angelov penned a great how-to guide titled, "An *HTML5 Slideshow
    w/Canvas & jQuery"* for Tutorial Zine at: [http://tutorialzine.com/2010/09/html5-canvas-slideshow-jquery](http://tutorialzine.com/2010/09/html5-canvas-slideshow-jquery).
    In it, Martin demonstrates how to combine the new canvas element with jQuery,
    the most popular JavaScript framework, to create an intensely interactive image
    slideshow.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the 2d rendering context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important to understand that the new `canvas` element is really a "surface"
    on which to draw bitmapped images in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Defining a `canvas` tag like this only tells half the story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By itself that HTML5 code does nothing. We have to use JavaScript to make the
    Document Object Model retrieve the 2d rendering context in order to get something
    to happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To be fair, that bit of JavaScript won't do anything without the `canvas` tag
    in the HTML either.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be wondering about the name. If there's a 2d rendering context, isn't
    there probably a 3d rendering context too? The short answer is yes. But the more
    detailed answer isn't so simple.
  prefs: []
  type: TYPE_NORMAL
- en: While a 3d rendering context does exists in theory, at the time of this publication
    no browser supports it. So if the new `canvas` element renders in 3d but nobody
    sees it, did it really do anything?
  prefs: []
  type: TYPE_NORMAL
- en: You can master <canvas>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The 2d context uses a number of different drawing contexts for the new `canvas`
    element that use syntaxes that should look quite familiar if you're experienced
    with CSS and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: X, meet Y
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When drawing, remember the X and Y axis in the top left corner of your browser
    window. Values increase going down the page.
  prefs: []
  type: TYPE_NORMAL
- en: Respect my authority!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The World Wide Web Consortium''s HTML5 `Canvas` 2d Context specification is
    online at: [http://dev.w3.org/html5/2dcontext](http://dev.w3.org/html5/2dcontext).
    There we can dig even deeper into information like conformance requirements, the
    `canvas` state, transformations, compositing, colors and styles, line styles,
    shadows, simple shapes, complex shapes, focus management, text, images, pixel
    manipulation, drawing model, examples, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Steve Fulton and Jeff Fulton penned the book *HTML5 Canvas* for O''Reilly Books.
    While this chapter will give you 30 or so pages of valuable new `canvas` element
    recipes, the Fulton''s book weighs in at roughly 400 pages. Consider it the resource
    that picks up where this chapter leaves off. Check it out at: [http://oreilly.com/catalog/0636920013327](http://oreilly.com/catalog/0636920013327).'
  prefs: []
  type: TYPE_NORMAL
- en: Processing shapes dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at the JavaScript functions that allow the new `canvas` element to
    draw rectangles.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: draws a filled rectangle. Next,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: draws an outline around the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's draw some shapes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start with our basic `canvas` code and incorporate our new functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What we've created resembles the flag of Denmark!
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example may not seem overwhelming at first, but when you remember that
    we've created an image with hardly any HTML and no CSS whatsoever, the new `canvas`
    element starts to look pretty impressive.
  prefs: []
  type: TYPE_NORMAL
- en: Any way you want it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that while we used color names ("white" and "red") we could also use hexadecimal
    values or RGB or even HSL! Use whatever makes the most sense for you and your
    interactive project.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to tables?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Think of the color and size specifications for this example almost as the old-school
    `tables` we used to build back in the day for layout. While certainly not the
    same, there are definitely similarities to that technique in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Be a square first
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mastering rectangles is the first `canvas` technique that's important to have
    under your belt after the ability to set up the element itself. Understanding
    the basics of this approach will help you grasp the fundamentals of the next few
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another book weighing in at nearly 400 pages is Rob Hawkes'' *"Foundation HTML5
    Canvas: For Games and Entertainment"* from Friends of Ed. In it, Hawkes has created
    a publication for those brand new to the new `canvas` element all the way to the
    most seasoned expert looking to enhance skills. Sound like anyone you know? Check
    it out at: [http://friendsofed.com/book.html?isbn=1430232919](http://friendsofed.com/book.html?isbn=1430232919).'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing borders for images using canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a closer look at the super simple method of drawing borders around
    images using the new `canvas` element.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll start with our basic `canvas` code and add one new line to draw
    a border:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/1048_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That one line of JavaScript tells the browser to create a rectangle starting
    at 10 pixels from the left and 20 pixels from the top of the new `canvas` element.
    It draws the box 100 pixels square.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'That''s nice, but if we want the border to be any other color than the default,
    we''ll need to specify that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this case we've used `strokeStyle` to specify an RGB color of pure green.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1048_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Style first
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you plan to style a border, you'll need to specify that before the border
    is drawn by the browser. If you specify that style afterward, the browser will
    simply ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: Many color values work
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The style attribute we just used was RGB, but the method also works with colors
    ("green", for example), hexadecimal values, HSL, and RGBA.
  prefs: []
  type: TYPE_NORMAL
- en: I like big borders and I cannot lie
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If no border width is specified, the browser will automatically draw a one-pixel
    border. Here''s how to change that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s just this easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![I like big borders and I cannot lie](img/1048_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://rgraph.net](http://rgraph.net) is a graphic library specifically for
    the new `canvas` element. It allows you to easily create a wide variety of graph
    types: bar chart, bi-polar chart, donut chart, funnel chart, Gantt chart, horizontal
    bar chart, LED display, line chart, meter, odometer, pie chart, progress bar,
    rose chart, scatter graph, and traditional radar chart using HTML5, `canvas`,
    and JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: Rounding corners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we've created images and borders using square or rectangular shapes.
    Next we'll look at how to use the new `canvas` element to round the corners of
    those images and borders via JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ability to round corners is not native to `canvas` but Rob Hawkes is a
    super-smart guy and figured out how to make it happen. Here''s what Rob did, explained
    at: [http://rawkes.com/blog/2010/12/11/rounded-corners-in-html5-canvas](http://rawkes.com/blog/2010/12/11/rounded-corners-in-html5-canvas).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, Rob chose a slightly different method of calling the 2d `canvas` rendering
    context than we did, but his method works just fine too. Check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The next part of Rob''s code should seem quite familiar: He sets the X and
    Y coordinates of the image, its size, and then the border radius:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then Rob calls the ability to join lines and the specific border radius he wants
    to use. Fake it till you make it!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally there''s the color of the border (still green!) and the final bit of
    script that ties it all together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now Rob — and you, if you are following along — get to be a rockstar with a
    beautifully rounded corner image.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1048_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just like the Scholastic Aptitude Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember: `lineWidth` is to the new `canvas` element what border-radius is
    to CSS. The both accomplish the same thing — but by very different means.'
  prefs: []
  type: TYPE_NORMAL
- en: What about IE?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s possible to support some of the new `canvas` element''s abilities in
    Internet Explorer 6-8 using the ExplorerCanvas library at: [http://code.google.com/p/explorercanvas.](http://code.google.com/p/explorercanvas.)'
  prefs: []
  type: TYPE_NORMAL
- en: We're laying a foundation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For most of this chapter's group of recipes, we've only used the new `canvas`
    element to draw static shapes in the browser without the use of images. That may
    seem uneventful and perhaps even counterintuitive. The point is to give you a
    strong foundation with this new ability so that you can extend it to use the new
    `canvas` element to create games, visualize data, and allow users to draw objects
    dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mozilla''s "People of HTML5" video series featured many of the leading voices
    of the HTML5 movement. John Foliot is the co-chair of the subcommittee on the
    accessibility of media elements in HTML5\. It should come as no surprise when
    he laments the state of current browser support for these technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '"I think much of what HTML5 is starting to deliver will be of benefit to all
    users, including those using Assistive Technology. However much of what is promised
    is not yet supported in all browsers, and related technologies — Assistive Technologies
    — have a long way to come to leverage this benefit."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Read and watch the full interview at: [http://hacks.mozilla.org/2011/02/people-of-html5-john-foliot](http://hacks.mozilla.org/2011/02/people-of-html5-john-foliot).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating interactive visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The team at Carbon Five had a daunting task: To create a physical diagram of
    their skills and interests. They may have started with a wall in their office,
    but quickly realized the new abilities the new `canvas` element brings to the
    table would allow interactivity and the ability to draw conclusions based on it.
    Here''s how they did it at: [http://carbonfive.github.com/html5-playground/interest-map/interest-map.html.](http://carbonfive.github.com/html5-playground/interest-map/interest-map.html.)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating interactive visualizations](img/1048_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It will be very helpful to view the source code at: [view-source:http://carbonfive.github.com/html5-playground/interest-map/interest-map.html](http://view-source:http://carbonfive.github.com/html5-playground/interest-map/interest-map.html)
    while following along with this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: The Carbon Five team reminds us that canvas is not officially part of the HTML5
    spec by creating this interactive visualization using an HTML4.01 Transitional
    DOCTYPE.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a detailed look at some of what they''re doing with JavaScript and
    the new `canvas` element. They start with some variables like the card style.
    Here, they do several things: set the background color, create a black border,
    the width of the card, and the values for a shadow around it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The next variable should look familiar to those who know CSS. Here, the card
    font weight, size, face, color, and more are set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Next, they set several more variables related to margin, width, height, scale,
    radius, shadow, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, they set up variables for skills, people, and a people-to-skill matrix.
    Unfortunately, these code chunks too long for republication here.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Variables by themselves don't do a whole lot of good unless they have functions
    to act upon them.
  prefs: []
  type: TYPE_NORMAL
- en: 'After initializing the display, the Carbon Five team uses more functions like
    drawing on the 2d `canvas` rendering element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'as well as creating the name tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'and drawing the arrows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With variables and functions already set, the last thing to do is call the
    `canvas` element itself in the HTML to give it all a space in which to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Evil of two lessors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the old days of the web, the Carbon Five team would have had the choice of
    leaving their map on a physical wall or creating a static graphic image of it
    for computer display. While either might render just as well as using the new
    `canvas` element, neither of them allow the team to extract valuable information
    the way the new `canvas` element does.
  prefs: []
  type: TYPE_NORMAL
- en: What about fallback content?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interestingly, Carbon Five used no fallback content within the new `canvas`
    element in this instance. This is an approach you'll have to weigh carefully,
    as those with older browsers or who use assistive technologies will see nothing,
    literally nothing. Carbon Five gets away with that for this internal project.
    Can you?
  prefs: []
  type: TYPE_NORMAL
- en: Take him up on his offer.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When writing about the project at [http://blog.carbonfive.com/2011/02/17/visualizing-skillsets-in-html5-canvas-part-1](http://blog.carbonfive.com/2011/02/17/visualizing-skillsets-in-html5-canvas-part-1)
    Carbon Five developer Alex Cruikshank went so far as to offer to create visualization
    maps to the first five people who wrote in with data in a reasonable format. As
    of publication date, it's unclear if anyone's taken him up on it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jacob Seidelin hit another home run with his new canvas element visualization
    of the band Radiohead''s song "Idioteque" from the album "Kid A" at: [http://nihilogic.dk/labs/canvas_music_visualization](http://nihilogic.dk/labs/canvas_music_visualization).
    Jacob''s pushing the limits of what can be done with the `canvas` element and
    JavaScript and that''s why we think he''s terrific!'
  prefs: []
  type: TYPE_NORMAL
- en: Bouncing a ball
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've looked at how do draw shapes using the new `canvas` element, and next
    we'll turn our attention to making those shapes move. Author Vinci Rufus shows
    us how.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start with our usual `canvas` HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up is the unique part: the JavaScript. Here, Vinci chose a slightly different
    method of calling the 2d `canvas` rendering context than we did, but his method
    works just fine too. Check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Put together, that code should look like. Note the addition of an `onLoad` function
    added to the `body` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And render this blue ball:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far Vinci''s code is pretty straightforward. We saw how he called the 2d
    `canvas` rendering context. He sets the color of the fill next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And then draws an arc 100 pixels from the top and left and fills it with the
    blue he already set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: But now all we've got is a blue ball just sitting there. Next, Vinci shows us
    how to make it move using variables and a new function named `draw.`
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more...](img/1048_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the ball is in motion but has simply drawn a straight line
    off the edge of the `canvas`. Vinci explains why:'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is because each time the `draw()` function is called, it draws a circle
    at the new coordinates without removing the old ones. That''s how the `getContext`
    object works so it''s not a bug; it doesn''t really move the circle and, instead,
    it draws a circle at the new coordinates each time the function is called."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Start again
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Vinci shows us a method to erase the old circles as the new `canvas` element
    draws each new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now, the ball appears to fall down to the right outside of the `canvas` border.
  prefs: []
  type: TYPE_NORMAL
- en: Don't box me in
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To ensure that the ball stays within the border of the `canvas`, Vinci wrote
    some logic to check if the x and y coordinates are beyond the `canvas` dimensions.
    If they are, he makes the ball reverse directions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now the ball should be bouncing around all four sides of the `canvas` continually.
  prefs: []
  type: TYPE_NORMAL
- en: '![Don''t box me in](img/1048_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And that's one to grow on
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As Vinci reminds us in his compelling tutorial at [http://sixrevisions.com/html/bouncing-a-ball-around-with-html5-and-javascript](http://sixrevisions.com/html/bouncing-a-ball-around-with-html5-and-javascript),
    the bouncing ball may seem simple at first, but it's actually a key technique
    to understand in order to develop just about any game for the new HTML5 `canvas`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A beautiful example of user-generated graphics can be seen at Yuri Vishnevsky's
    [http://weavesilk.com](http://weavesilk.com). The site uses the new `canvas` element
    as part of an experiment in generative art. Some of the generated images are so
    beautiful, Yuri has made them available as stunning desktop background images.
    A version for iPhone and iPad is planned also.
  prefs: []
  type: TYPE_NORMAL
- en: Creating fallback content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"When authors use the `canvas` element, they must also provide content that,
    when presented to the user, conveys essentially the same function or purpose as
    the bitmap `canvas`. This content may be placed as content of the `canvas` element.
    The contents of the `canvas` element, if any, are the element''s fallback content."
    - WHATWG HTML5 Specification'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What happens if someone viewing your brilliant new `canvas` application is using
    an older browser and is unable to recognize your coding genius? Or what happens
    when someone uses assistive technologies? Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If, for some reason, a user's browser won't support the new `canvas` element,
    it's up to us as developers to give them something valuable instead.
  prefs: []
  type: TYPE_NORMAL
- en: Here we can use an image as fallback.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Or text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Or almost any other element.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By now you''re well versed at how `alt` tags work for image files: If an image
    file doesn''t show up or the user relies upon assistive technologies, the `alt`
    tag gives them at least a valuable text label representing what they''re missing.
    Fallback content for the new `canvas` element is a similar concept but is capable
    of doing and being so much more than just an `alt` tag.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browsers which do support the new `canvas` element will ignore the content inside
    the container, and just render the new `canvas` element normally.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks, Mozilla
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"If fallback content is desired, some CSS tricks must be employed to mask the
    fallback content from Safari (which should render just the `canvas)`, and also
    to mask the CSS tricks themselves from IE (which should render the fallback content)."
    - [Mozilla.org](http://Mozilla.org)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How will we deal with accessibility?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is generally a consensus among specification writers and the HTML5 community
    at large that the new `canvas` element is only partially baked. Leaving those
    who use assistive technologies out in the cold just doesn't seem like the right
    thing to do. Watch this space.
  prefs: []
  type: TYPE_NORMAL
- en: Are we ready for <canvas>?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many developers consider the new `canvas` element accessibility is one of the
    last sticking points in the new HTML5 specification. With little meaningful fallback
    capabilities, this new element simply feels not ready for prime time.
  prefs: []
  type: TYPE_NORMAL
