- en: Chapter 2. Basic Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Validating a form using Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an autosuggest control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making form wizards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading a file using Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading multiple files using Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a five-star rating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a PHP Ajax contact form with validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a table in Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Pagination using PHP and Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to build the basic Ajax forms. We will try
    to understand where we can use Ajax methodology and where we can't. There are
    a lot of ways in which we can use Ajax. Here are some "best" practices based on
    user experience and the performance of the specific system. Ajax makes our lives
    easier, faster, and better; how and where to use it is up to us.
  prefs: []
  type: TYPE_NORMAL
- en: Validating a form using Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main idea of Ajax is to get data from the server in real time without reloading
    the whole page. In this task we will build a simple form with validation using
    Ajax.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a JavaScript library is used in this task, we will choose jQuery. We will
    download (if we haven''t done it already) and include it in our page. We need
    to prepare some dummy PHP code to retrieve the validation results. In this example,
    let''s name it `inputValidation.php`. We are just checking for the existence of
    a `param` variable. If this variable is introduced in the `GET` request, we confirm
    the validation and send an `OK` status back to the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with basic HTML structure. We will define a form with three input
    boxes and one text area. Of course, it is placed in`<body>:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For visual confirmation of the valid input, we will define CSS styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is time to include jQuery and its functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also initialize the document `ready` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When everything is ready, our result is as follows:![How to do it...](graphics/3081_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We created a simple form with three input boxes and one text area. Objects
    with class `required` are automatically validated after the `keyup` event and
    calling the `ajaxValidation` function. Our `keyup` functionality also includes
    the `Timeoutfunction` to prevent unnecessary calls if the user is still writing.
    The validation is based on two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Validation of the actual input box: We are passing the inserted text to `ajax/inputValidation.php`
    via Ajax. If the response from the server is not `OK` we will mark this input
    box as `failed`. If the response is `OK`, we proceed to the second step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the other required fields in our form. When there is no `failed` input
    box left in the form, we will enable the submit button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Validation in this example is really basic. We were just checking if the response
    status from the server is `OK`. We will probably never meet a validation of the
    required field like we have here. In this case, it's better to use the `length`
    property directly on the client side instead of bothering the server with a lot
    of requests, simply to check if the required field is empty or filled. This task
    was just a demonstration of the basic `Validation` method. It would be nice to
    extend it with regular expressions on the server side to directly check whether
    the URL form or the title already exist in our database, and let the user know
    what the problem is and how he/she can fix it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Building a PHP Ajax contact form with validation* recipe in this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an autosuggest control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show us how to create an autosuggest control. This functionality
    is very useful when we need to search within huge amounts of data. The basic functionality
    is to display the list of suggested data based on text in the input box.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can start with the dummy PHP page that will serve as a data source. When
    we call this script with the `GET` method and the variable `string`, it will return
    the list of records (names) that include the selected string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As always, we will start with HTML. We will define the form with one input box
    and an unsorted list `datalistPlaceHolder:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When the HTML is ready, we will play with CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the real fun begins. We will include jQuery library and define our keyup
    events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When everything is set, we will call the `ajaxDropdownInit` function within
    the document `ready` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Our autosuggest control is ready. The following screenshot shows the output:![How
    to do it...](graphics/3081_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `autosuggest` control in this recipe is based on the input box and the list
    of items in `datalistPlaceHolder`. After each `keyup` event of the input box,
    `datalistPlaceHolder` will load the list of items from `ajax/dropDownList.php`
    via the Ajax function defined in `ajaxDropdownInit`. A good feature of this recipe
    is the `timerID` variable that, when used with the `setTimeout` method, will allow
    us to send the request to the server only when we stop typing (in our case it
    is 500 milliseconds). It may not look so important, but it will save a lot of
    resources. We do not want to wait for the response for "M" typed in the input
    box, when we have already typed in "Milan". Instead of 5 requests (150 milliseconds
    each), we have just one. Multiply it, for example, with 10,000 users per day and
    the effect is huge.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We always need to remember that the response from the server is in the JSON
    format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using JSON objects in JavaScript is not always useful from the performance point
    of view. Let's imagine we have 5000 contacts in one JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: 'It may take a while to build HTML from 5000 objects but, if we build a JSON
    object, the code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we will have the complete data in HTML and there is no need to
    create any logic to create a simple list of items.
  prefs: []
  type: TYPE_NORMAL
- en: Making Form Wizards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "**Form Wizards** are basically forms divided into several steps. They are useful\
    \ for polls or special cases of forms, when we want to divide the registration\
    \ process on our website. They are also used in e-commerce websites, in the purchase\
    \ process (shopping cart\x9Apayment methods\x9Ashipping address\x9Aconfirmation\x9A\
    purchase itself). In this recipe, we will build a Form Wizard (as simple as possible)."
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will prepare the dummy PHP files `step1.php, step2.php`, and `step3.php`.
    The content of these files is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here again we will include jQuery library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by defining the HTML content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will include CSS styles in our HTML as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will place JavaScript before the closing`</body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The result is as follows:![How to do it...](graphics/3081_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The wizard is divided into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The first part is `wizardNavigation`, which includes all the steps (tabs) in
    the wizard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second is `wizardBody`, with the content of the current step (tab).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last part is `wizardActionButtons`, which contains the **Back, Next**, and
    **Finish** buttons. The **Back** and **Next** buttons trigger the `submitThePage`
    function with the `buttonDirection` parameter (**Back** or **Next**). This function
    sends the Ajax request on to the next step, which is represented by the `target`
    parameter in the `$.get()` function. The target is taken automatically from the
    tab navigation.It is equal to `id` attribute of each navigation element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have understood the basic idea of Form Wizards. But sometimes we do not have
    the time or resources to create our own jQuery functionality. In that case, we
    can just use some of the free jQuery plugins, such as the `formwizard` plugin
    from [http://plugins.jquery.com/project/formwizard](http://plugins.jquery.com/project/formwizard).
    Not all plugins are 100% functional; everything has its own 'bugs'. However,help
    is always easily available. We can modify the plugin to meet our requirements
    and then wait for the bugs to be fixed in the next release of the plugin, or we
    can just contribute.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a file using Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will talk about uploading a file via Ajax. Actually, there
    is no Ajax method to do this. We can use the `iframe` method to imitate the Ajax
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the beginning, we will prepare the `uploads` folder and make sure it is
    accessible. In Mac OS X/Linux, we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Windows 7, we can right-click on **Folder properties|Edit| Select user| Group**
    from permission windows (choose anyone) and select **Full control** under the
    **Allow** column to assign full access rights control permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's create an HTML `(ajaxUpload.html)` and a PHP file `(ajax/uploadFile.php)`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ajaxUpload.html` will look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Our HTML body is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The ajax/uploadFile.php content is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Initiate the result message on `$(document).ready:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The result is as follows:![How to do it...](graphics/3081_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see in this task, we created a simple form with the ability to upload
    a file. The main point of this example is in the **iframe**, to which we are submitting
    the form. This iframe represents a container with PHP, which provides the physical
    upload of the selected file. When the upload is successful, we will display the
    result message in `placeHolder` in the parent document.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To increase the maximum allowable size of uploaded file we can use the `upload_max_filesize`
    directive in `php.ini`. There are more directives for uploading files:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Directive | Default value |   |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `file_uploads` | `1` | Allow/Disallow HTTP file uploads |'
  prefs: []
  type: TYPE_TB
- en: '| `upload_tmp_dir` | `NULL` | Temporary directory for storing files during
    the file upload |'
  prefs: []
  type: TYPE_TB
- en: '| `upload_max_filesize` | `2M` | The maximum size of uploaded file |'
  prefs: []
  type: TYPE_TB
- en: '| `max_file_uploads` | `20` | The maximum number of file uploads made simultaneously
    |'
  prefs: []
  type: TYPE_TB
- en: Uploading multiple files using Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous task, we have learned how to upload a single file via a fake
    Ajax method using iframe. This example has one big disadvantage; we cannot select
    more than one file. This is possible only by using HTML5 (which is not fully supported
    by all browsers), Flash, or Java. In this recipe, we will build a form that will
    allow us to select multiple files and upload them on the server with one single
    click.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this task, we will need to download jQuery library, SWFUpload library ([http://swfupload.org/](http://swfupload.org/)
    ), and Adam Royle's SWFUpload jQuery plugin ( [http://blogs.bigfish.tv/adam/](http://blogs.bigfish.tv/adam/)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will include jQuery, `SWFUpload`, and SWFUpload jQuery library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will define the `SWFUpload` object and binding events, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The PHP for uploading the file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Our result looks like the following:![How to do it...](graphics/3081_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the beginning, we define a simple HTML form for `swfupload-control`, including
    input button. This button is overwritten by an `swf` object, which will allow
    us to select multiple files. In JavaScript, we define the main `SWFUpload` object
    with the basic settings `(upload_url, file_post_name, flash_url, button_image_url`,
    and so on). We can use the predefined events to build a container with a progress
    bar for each file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The defined events in `SWFUpload`, which provide us full control during the
    file upload, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **flashReady** | This is called by the Flash Control to notify `SWFUpload`
    that the Flash movie has loaded. |'
  prefs: []
  type: TYPE_TB
- en: '| **swfUploadLoaded** | This is called to ensure that it is safe to call `SWFUpload`
    methods. |'
  prefs: []
  type: TYPE_TB
- en: '| **fileDialogStart** | This is fired after `selectFile` is called to select
    the files. |'
  prefs: []
  type: TYPE_TB
- en: '| **fileQueued** | This is fired for each file that is queued after the **FileSelectionDialog**
    window is closed. |'
  prefs: []
  type: TYPE_TB
- en: '| **fileQueueError** | This is fired for each file that is not queued after
    the **FileSelectionDialog** window is closed. |'
  prefs: []
  type: TYPE_TB
- en: '| **fileDialogComplete** | This fires after the **FileSelectionDialog** window
    has been closed and all the selected files have been processed. |'
  prefs: []
  type: TYPE_TB
- en: '| **uploadStart** | This is called immediately before the file is uploaded.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **uploadProgress** | This is fired periodically by the Flash Control. |'
  prefs: []
  type: TYPE_TB
- en: '| **uploadError** | This is fired any time an upload is interrupted or does
    not complete successfully. |'
  prefs: []
  type: TYPE_TB
- en: '| **uploadSuccess** | This is fired when the entire upload has been transmitted
    and the server returns a HTTP 200 status code. |'
  prefs: []
  type: TYPE_TB
- en: '| **uploadComplete** | This is always fired at the end of an upload cycle (after
    `uploadError` or `uploadSuccess).` |'
  prefs: []
  type: TYPE_TB
- en: Creating a five-star rating system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this task, we will learn how to build a five-star rating system. This feature
    is often used by e-commerce websites to allow the rating of products, articles,
    or anything that is worth evaluating by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s prepare a dummy PHP file `ajax/saveRating.php` to confirm the rating
    was saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to prepare a `.gif` image with stars. This `.gif` includes three variations
    of the star: the first,for the inactive star, the second, for an "on hover" event,
    and the third for the active star.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](graphics/3081_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are ready to start with the HTML part:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s include jQuery library and define the JavaScript functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS is one of the key parts in this task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Our result is as follows:![How to do it...](graphics/3081_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basically, the whole rating system is an unordered list of items. Each item
    represents a star, which can be provided in three states; default, active or highlighted.
    The change of the state is done by changing of the background position of each
    star. In our case, we are using `icons/star.gif`, which includes all three possible
    states (gray, red, and yellow). There is a `mouseover` event defined, which will
    highlight the hovered star and all previously selected stars. After clicking on
    the star, we call an Ajax post request to `ajax/saveRating.php` and set all the
    required stars to be activated.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most cases, we don''t want to allow multiple voting for one user. In that
    case, we can set the cookie as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'When the cookie is set to expire in one year we can use it in our rating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Building a PHP Ajax contact form with validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validation of the input box before submitting the form has become one of the
    very important Ajax functionalities. The user does not have to wait until the
    whole form gets back with some invalid input box messages and then try to refill
    it again. In this task, we will build a contact form with Ajax validation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can define styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The main PHP validation is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The JavaScript functionality with Ajax calls is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The result is as follows:![How to do it...](graphics/3081_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are starting with an HTML source. It contains four input boxes and one text
    area. As you can see in the source code, we are preparing two types of validation.
    The first is for checking the required fields (marked with `class="required")`
    and the second is based on the specific type of data (e-mail, URL, and phone).
    The first validation is done on the client side only and the second one involves
    sending a post request to `validators/main.php`, which evaluates the given parameter.
    If the input does not pass the validation, it is marked as `failed`. If there
    is no `failed` input box in the form, the `submit` event is enabled. The event
    returns the `true` value when all requests are finished. This was done by allowing
    synchronous requests—`$.ajaxSetup({async:false})` . Note that synchronous requests
    may temporarily lock the browser, disabling any actions while the request is active.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we were using validation of the fields on the server side.
    This logic is not exactly what we would use in real life. Of course, we should
    always have validation on the server side (in case the user has JavaScript turned
    off), but we don't need to bother the server with something that we can easily
    find out on the client side, such as validation of e-mails, URLs, or required
    fields. jQuery has a nice plugin for validation named `validate.js` ([http://docs.jquery.com/Plugins/validation](http://docs.jquery.com/Plugins/validation)).
  prefs: []
  type: TYPE_NORMAL
- en: 'All we need to do is download jQuery library with the `validate` plugin and
    include it in our source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the class `required` for required fields and some additional classes
    for a specific validator, such as e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, call the `validate()` function in the specific form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Displaying a table in Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this task, we will display data in a tabular format using Ajax. As a data
    source, we will use a predefined JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, we will need to prepare a dummy JSON data source with all the
    items that will be displayed in our table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As base HTML, we can use this source with a container for the table and toolbar.
    This toolbar will include selecting functionality for our items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can set styles for our HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When the HTML and CSS is ready, we can start with JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The result looks like the following:![How to do it...](graphics/3081_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the beginning, we started with a basic HTML structure for the table. We defined
    only the position of the header and the body of the table. In`(document).event`,
    we send a `getJSON` request to get a `json` object (`json/requests.json`) from
    the server. We put data into the `data` variable and continue to build a table.
    In the first step, we build the header (buildHeader(data)). This function takes
    the data, parses the keys from the JSON object, and uses them for the header cells.
    In the second step, we build the body (buildBody(data)). This function is based
    on a loop, which will specify each line of the table. We are using a switch that
    is able to provide specific functionality for each value based on its key.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this task, we have built a table with a toolbox, which does not have any
    functionality; at least, not yet. In each line, we define a checkbox. With the
    definition of this checkbox, we can specify additional functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'For the toolbar mentioned in the preceding code snippet, we can specify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Building Pagination using PHP and Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this task, we will learn how to build **pagination** with Ajax functionality.
    That means we will be able to turn the page in the contact list without reloading
    the whole website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start with HTML, which contains the page container, contact grid with
    the first displayed page of contacts, and the contact pagination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The required CSS is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The JavaScript functionality of the pagination is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the required page, we will define `contact.php:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The result is as follows:![How to do it...](graphics/3081_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are defining the main functionality of the pagination in the `paginationInit()`
    function. The main step is to take each hyperlink in the pagination and assign
    it a specific functionality based on its `id` attribute. When the `id` is `next`
    or `previous` it means we have clicked on the **Next** or **Previous** buttons.
    In this case, we look for the page that is currently active and select the `next/previous`
    hyperlink. If we have reached the `first/last` hyperlink, we hide the `previous/next`
    button by calling the function `hidePreviousNextButtons()`. The default target
    in this example is one of the numeric items (pages). When we click, we save the
    current active page, call the `GET` request from `contacts.php` to get the required
    page, and display it in the `contactGrid`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned how to build basic pagination. Now we can play with the user experience.
    Our users like to see what is going on, on the page. In this case, we are clicking
    on the link representing the page and waiting for the contacts to be displayed
    in a contact grid. Now, we can provide our user with a classic spinner as a notification
    that the content is loading.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we will need to find a `.gif` image for the spinner. We can easily
    find one on the Internet. When the image is ready and saved in our image folder
    we can define CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We can add the displaying of the spinner directly into the existing functions;
    this can be done right before the Ajax request, when the request `id` is done.
    We will overwrite the HTML content with a `.html()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The modified version is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](graphics/3081_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
