- en: Chapter 7. Creating Graphs and Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphing equations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting data points with a line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now you may have noticed that [Chapters 1](ch01.html "Chapter 1. Getting
    Started withPaths and Text") to [4](ch04.html "Chapter 4. Mastering Transformations")
    cover HTML5 canvas basics, [Chapters 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation") and [6](ch06.html "Chapter 6. Interacting with the Canvas:
    Attaching Event Listeners to Shapes and Regions") cover advanced topics, while
    [Chapters 7](ch07.html "Chapter 7. Creating Graphs and Charts") and [8](ch08.html
    "Chapter 8. Saving the World with Game Development") cover real life implementations.
    After all, what good is it to learn about the canvas if we aren''t able to produce
    something useful? This chapter focuses on doing just that by creating some real
    life canvas applications by creating a pie chart, a bar chart, graphs, and a line
    chart. In contrast to the previous chapters, this chapter contains only four recipes
    because each recipe provides a complete, easily configurable, and production-ready
    product. Let''s get started!'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pie charts are probably one of the most common data visualizations because they
    quickly give users a sense of the relative weights of data elements. In this recipe,
    we'll create a configurable Pie Chart class that takes in an array of data elements
    and produces a pie chart. Furthermore, we'll construct the Pie Chart drawing methods
    in such a way that the pie chart and label automatically fills up as much of the
    canvas as possible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a pie chart](img/1369_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a Pie Chart class that can automatically position
    and size a pie chart and a legend from an array of data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the constructor for the `PieChart` class which draws the pie chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getLegendWidth()` method which returns the width of the legend
    by taking into account the text length of the longest label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawPieBorder()` method which draws a border around the pie chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawSlices()` method which loops over the data and draws a slice
    of the pie for each data element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getTotalValue()` method which is used to get the sum of the data
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawLegend()` method which draws a legend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When the page loads, build the data and instantiate a `PieChart` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing an arc* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing a rectangle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and
    Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before diving into how the code works, let's first take a step back and think
    about what a `PieChart` object should do. As a developer, we would need to pass
    in the canvas ID so the object knows where to draw, and also an array of data
    elements so it knows what to draw.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PieChart` element is rendered with the `drawSlices()` and `drawPieBorder()`
    methods. The `drawSlices()` method performs these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Loops through the data elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculates the angle of each data value by multiplying 2π by the value fraction
    of the total value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draws an arc using the `arc()` method for each slice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fills each slice with the data element color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the pie chart is rendered, we can draw the legend with the `drawLegend()`
    method. This method performs these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Loops through the data elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draws a box using `rect()` for each element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Strokes and fills each box with the data element color using `stroke()` and
    `fill()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writes the corresponding label using `fillText()` for each element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the page loads, we can create an array of data elements that identify our
    daily activities with the corresponding number of hours for each activity and
    then instantiate a new PieChart object by passing in the data array.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we've created artificial data by hard coding an array of data
    elements. In real life, however, it's more likely that our data will be provided
    via JSON or XML, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right behind pie charts, bar charts are another popular tool for visualizing
    data. In this recipe, we'll create a configurable Bar Chart class that takes in
    an array of data elements and creates a simple bar chart. We'll reuse the data
    structure from the previous recipe to compare the results. Like the Pie Chart
    class, the bar chart drawing methods also automatically scale the chart to fill
    up the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a bar chart](img/1369_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a Bar Chart class that can automatically position
    and size a bar chart from an array of data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `BarChart` constructor which draws the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getLabelAreaHeight()` method which determines the label area height
    (the labels below the x axis):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getLongestValueWidth()` method which returns the longest value
    text width:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawXLabels()` method which draws the x axis labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawYValues()` method which draws the y axis values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawBars()` method which loops through all of the data elements
    and draws a bar for each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawGridlines()` method which draws horizontal gridlines on the
    bar chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawXAxis()` method which draws the x axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawYAxis()` method which draws the y axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When the page loads, build the data and instantiate a new `BarChart` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to a pie chart, a bar chart will need a bit more configuration to
    make it truly generic. For our implementation of the `BarChart` class, we'll need
    to pass in the canvas id, an array of data elements, the bar colors, the bar widths,
    the grid line increment which is the number of units between grid lines, the max
    value and the min value. The `BarChart` constructor uses six methods to render
    the bar chart—`drawGridlines()`, `drawYAxis()`, `drawXAxis()`, `drawBars()`, `drawYValues()`,
    and `drawXLabels()`.
  prefs: []
  type: TYPE_NORMAL
- en: The key to the `BarChart` class is the `drawBars()` method that iterates over
    all of the data elements, and then draws a rectangle for each one. The easiest
    way to draw each bar is to first invert the context vertically (so that positive
    values of y go up and not down), position the cursor on the x axis, and then draw
    a rectangle downwards whose height is equal to the value of the data element.
    As the context is inverted vertically, the bar will actually rise upwards.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing a rectangle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and
    Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Translating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rotating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a mirror transform* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphing equations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll create a configurable Graph class that draws the x and
    y axis with tick marks and values, and then we'll construct a method called `drawEquation()`
    that allows us to graph f(x) functions. We'll instantiate a Graph object and then
    draw a sine wave, a parabolic equation, and a linear equation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphing equations](img/1369_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a Graph class that can draw an x and y axis with
    values, and also graph multiple f(x) equations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the constructor for the `Graph` class that draws the x and y axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawXAxis()` method which draws the x axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawYAxis()` method which draws the y axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawEquation()` method which takes in a function f(x) and then
    draws the equation by looping through incremental values of x from `minX` to `maxX`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `transformContext()` method which translates the context to the
    center of the graph, stretches the graph to fit the canvas, and then inverts the
    y axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When the page loads, instantiate a new `Graph` object, and then draw three
    equations using the `drawEquation()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our `Graph` class only requires six parameters, the `canvasId`, `minX`, `minY`,
    `maxX`, `maxY`, and `unitsPerTick`. When instantiated, it draws the x axis with
    the `drawXAxis()` method and the y axis with the `drawYAxis()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The real gem of the `Graph` object is the `drawEquation()` method that takes
    in an equation f(x), a line color, and a line thickness. Although the method is
    relatively short (about 20 lines of code), it''s actually quite powerful. Here''s
    how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, call the `transformContext()` method which positions the canvas context,
    scales the context to fit the canvas, and inverts the y axis with the `scale()`
    method by multiplying the y component by -1\. This makes the drawing process much
    simpler because increasing y values will go upwards and not downwards (remember
    that by default, y increases as you move downwards).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the canvas context has been prepared, use the `equation` function to determine
    the y value when x equals `minX`, that is, f(minX).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the drawing cursor with `moveTo()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a `for` loop, slightly increment the x value and determine the corresponding
    y value using the equation f(x) for each iteration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a line from the last point to the current point with `lineTo()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue looping until x equals `maxX`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the lines drawn are extremely small with each iteration, they are invisible
    to the human eye, resulting in the illusion of smooth curves.
  prefs: []
  type: TYPE_NORMAL
- en: When the page loads, we can instantiate a new `Graph` object, and then graph
    a green sine wave, a blue parabolic equation, and a red linear equation by calling
    the `drawEquation()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a line* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Translating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Scaling the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a mirror transform* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting data points with a line chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've ever taken a science class, you're probably familiar with generating
    line charts based on a set of data for your experiments. Line charts are probably
    one of the most useful data visualizations when communicating data trends. In
    this recipe, we'll create a configurable Line Chart class which takes in an array
    of data elements and plots each point while connecting the points with line segments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting data points with a line chart](img/1369_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a Line Chart class that can automatically position
    and size a line chart from an array of data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the constructor for the `LineChart` class that draws the x and y axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `getLongestValueWidth()` method which returns the length in pixels
    of the longest value text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawXAxis()` method which draws the x axis and the labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawYAxis()` method which draws the y axis and the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `drawLine()` method which loops through the data points and draws
    line segments connecting each data point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `transformContext()` method which translates the context and then
    inverts the context vertically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'When the page loads, instantiate a `LineChart` object, create a data set for
    the blue line, plot the line using `drawLine()`, define another data set for the
    red line, and then plot the red line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start off, we'll need to configure the `LineChart` object with seven properties,
    including the `canvasId`, `minX`, `minY`, `maxX`, `maxY`, `unitsPerTickX`, and
    `unitsPerTickY`. When the `LineChart` object is instantiated, we'll render the
    x axis and the y axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the interesting stuff happens in the `drawLine()` method, which requires
    an array of data elements, a line color, and a line thickness. Here''s how it
    works:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `transformContext()` to translate, scale, and invert the context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the drawing cursor at the first data point from the data array with
    the `moveTo()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loop through all of the data elements, draw a line from the previous point to
    the current point, and then draw a small circle at the current position using
    the `arc()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the page loads, we can instantiate the `LineChart` object, create an array
    of data points for the blue line, draw the line using the `drawLine()` method,
    create another array of data points for the red line, and then draw the red line.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a line* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing a circle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Translating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
