- en: Chapter 2. Working with Bootstrap Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of web designing and development, we have heard a lot about **Twitter
    Bootstrap 3** . The hero of our days is **Bootstrap 4** , a CSS framework that
    ultimately helps to design web applications easier and faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I will explain how you can start using Bootstrap 4 by showcasing
    a demo layout page, and how you can explore the framework and customize it to
    your requirements. At the end of the chapter, you will have a solid understanding
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use **Syntactically Awesome Style Sheets** ( **Sass** )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add Bootstrap 4 into your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to design layouts with grids and containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add navigation elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to customize selected components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first chapter, we spoke briefly about Twitter Bootstrap 4, but it''s
    time to look at this CSS framework more closely. However, before delving deeper
    into Bootstrap 4 let''s talk about all of the newly introduced features:'
  prefs: []
  type: TYPE_NORMAL
- en: The source CSS files of Bootstrap 4 are based on Sass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `rem` is the primary CSS unit instead of `px`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global font size increased from `14px` to `16px`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New grid tiers have been added for small devices (from `~480px` and below)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap 4 optionally supports **Flex Box Grid**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds improved **Media Queries**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new **Card** component replaces the **Panel** , **Well** , and **Thumbnail**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is the new reset component called `Reboot.css`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything is customizable with Sass variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropped support for IE 8 and iOS 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It no longer supports non-responsive usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are not familiar with Sass, I think now is the right moment to introduce
    to you that fantastic CSS preprocessing framework. It is not a secret that the
    preprocessing of a CSS file allows you to write more concise and less verbose
    stylesheets. The syntax of the first version of Sass used indentations, didn't
    require semi-colons, had shorthand operators, and used `.sass` file extension.
    It was so different from CSS that Sass version 3 started to support new formats
    with brackets, semicolons, and .`scss` file extensions. Let's compare the various
    forms to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a vanilla CSS style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In files with the `.sass` extension, we should use only indentation, and it
    is heavily dependent on white spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In files with `.scss` extension, we use brackets and semicolons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It is ultimately up to you which style you prefer, but I will use the newest
    one based on `.scss` files in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up of Ruby
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start using Sass, you will need to install Ruby, but first check
    if you already has it. Open the Terminal and type `ruby -v` .
  prefs: []
  type: TYPE_NORMAL
- en: If you don't get an error, skip install Ruby step. Otherwise, you'll install
    a fresh Ruby from the official Ruby website [https://www.ruby-lang.org/en/documentation/installation](https://www.ruby-lang.org/en/documentation/installation)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Setting up of Sass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After finishing the installation of Ruby, open Terminal and type the following
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For Linux and Mac:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will install Sass and necessary dependencies for you. Run the
    following command to check installation of Saas on your PC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The Sass must respond with a version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Bear in mind that the version of Sass installed on my computer could be different
    from yours. If these commands gave you a version number, you are ready to go with
    Sass development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, that we have installed Sass, we can explore its files and output them
    into CSS. You can use CLI or GUI to get you started with Sass. If you prefer a
    GUI style of development, please use one from the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CodeKit (Mac, Paid): [http://incident57.com/codekit](http://incident57.com/codekit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compass.app (Windows, Mac, Linux, Paid, Open Source): [http://compass.kkbox.com/](http://compass.kkbox.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ghostlab (Web-based, Paid): [http://www.vanamco.com/ghostlab](http://www.vanamco.com/ghostlab)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hammer (Mac, Paid): [http://hammerformac.com](http://hammerformac.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Koala (Windows, Mac, Linux, Open Source): [http://koala-app.com](http://koala-app.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LiveReload (Mac, Paid, Open Source): [http://livereload.com](http://livereload.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prepros (Windows, Mac, Linux, Paid): [https://prepros.io](https://prepros.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scout (Windows, Mac, Open Source): [https://github.com/scout-app/scout-app](https://github.com/scout-app/scout-app)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Personally, I prefer the Scout GUI, which runs Sass and Compass in a self-contained
    Ruby environment; it does all of the heavy lifting, so we will never have to worry
    about technical issues such as setting up Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting option I would recommend is a web-based Sass playground
    **SassMeister** which you can find at [http://www.sassmeister.com](http://www.sassmeister.com)
    . We will use it a bit in our Sass crash course.
  prefs: []
  type: TYPE_NORMAL
- en: Sass crash course
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main idea behind Sass is that we create reusable, less verbose code which
    is easy to read, and understand. Let's see what features make that happens. Please
    open the SassMeister website and prepare for our exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can create variables in Sass, especially to reuse them throughout our document.
    Acceptable values for variables include:'
  prefs: []
  type: TYPE_NORMAL
- en: number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We use the `$` symbol to define a variable. Switch to SassMeister and create
    our first variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The SassMeister compiles them but without output any CSS. We just define variables
    in the scope, and that is it. We need to use them in the CSS declaration to see
    the result of compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result of compilation from Sass to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Mathematical expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sass allows us to use the following mathematical operators in arithmetical
    expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: Addition (+)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtraction (-)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Division (/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiplication (*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modulo (%)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Equality (==)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inequality (!=)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jump to SassMeister and play with some introduced mathematical operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is some CSS compiler code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'I would like to warn you against the use of incompatible units in mathematical
    operators. Try the following Sass code in your playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'However, multiplying two numbers of the same unit produces an invalid CSS value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The forward slash symbol (/) is a part of CSS shorthand properties. For example,
    here are the font declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It can be shortened to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid any possible issues, you should always wrap an expression that containing
    the division operator of non-variable values in parentheses such that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should avoid using different units in mathematical operators.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sass has a reach set of built-in functions and here is the address where you
    can find all of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://sass-lang.com/documentation/Sass/Script/Functions.html](http://sass-lang.com/documentation/Sass/Script/Functions.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the simplest example of the use of the `rgb($red, $green, $blue)` function.
    It creates a `color` from red, green, and blue values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Nesting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sass allows us to have a declaration inside another declaration. In the following
    vanilla CSS code we define two statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a container class and header within container style declarations. In
    Sass we can create the compact code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Nesting makes code more readable and less verbose.
  prefs: []
  type: TYPE_NORMAL
- en: Imports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sass allows you to break styles into separate files and import them into another.
    We can use `@import` directive with or without the file extensions. There are
    two lines of code giving the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Extends
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need to inherit style from an existing one, Sass has `@extend` directive
    to help you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result of how the Sass compiler properly handled the compiled code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Placeholders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the case when you want to extend a declaration with a set of styles that
    don''t exist, Sass helps with the placeholder selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We use `%` sign to prefix a class name and with the help of `@extend` , magic
    happens. Sass doesn''t render the placeholder. It renders only the result of its
    extending elements. Here is the compiled code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Mixins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can create reusable chunks of CSS styles with mixins. Mixins always return
    markup code. We use the `@mixin` directive to define mixins and `@include` to
    use them in the document. You may have seen the following code quite often before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Indeed, changing the color of an element depends on states. Usually we write
    this code over and over again, but with Sass we can do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `&` symbol here points to the parent element, that is, to the anchor element.
    Let''s use this mixin in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the mixin compiled to CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Function directives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The function directive is another feature of Sass that helps to create reusable
    chunks of CSS style return values via the `@return` directive. We use the `@function`
    directive to define it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function we calculate that the width of the table depends on individual
    column widths, the number of columns, and margin values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting CSS code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'I think it''s time to leave our Sass crash course, but please don''t think
    that you know everything about it. Sass is big and incredibly powerful, so if
    you decide to continue the journey we started here, please get more information
    here: [http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Example project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's talk about what web application we will develop while reading this book.
    I have decided that an e-commerce application is the best candidate to demonstrate
    the full flavor of different Bootstrap 4 components tightly in one place.
  prefs: []
  type: TYPE_NORMAL
- en: The term e-commerce, as we think of it today, refers to the buying and selling
    of goods or services over the Internet, so we design the web application based
    on a real-world scenario. After the introduction, we will consolidate a high-level
    list of customer requirements. We will then prepare a series of mockups which
    will help you get a clearer picture of how the final application will look to
    an end-user. Finally, we will break down the customer requirements into a set
    of implementation tasks and structure the application so that the responsibilities
    and interactions among functional components are clearly defined.
  prefs: []
  type: TYPE_NORMAL
- en: The scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dream Bean is a small grocery store which collaborates with several local
    farms to supply organic food and produce. The store has a long-standing customer
    base and is bringing increasing profits to the area. The store has decided to
    investigate the possibility of providing an online delivery service to customers
    because a recent survey has indicated that 9% of its regular clientele has continuous
    Internet access, and 83% would be interested in using this service.
  prefs: []
  type: TYPE_NORMAL
- en: The manager of the grocery store has asked you to create a website that will
    enable their customers to shop online from a broad range of devices includes cell
    phones, tablets, and desktop computers.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering customer requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before making any design or implementation decisions, you need to collect information
    from the client; thus, after direct communication with client, we have the following
    conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The customer can buy products available in the physical store. There are the
    following product categories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seafood
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bakery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dairy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fruit and vegetables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take away
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer can browse all the goods or filter them by category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer has a virtual shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer can add, remove, or update item quantities in the shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer can view a summary of everything
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer can place an order and make payment through a secure checkout process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing use-cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, when the requirements are in place, it is time to work with managers from
    the Dream Bean to gain an understanding of how the website should look and behave.
    We create a set of use-cases that describe how the customer will use the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: The customer visits the welcome page and selects a product by category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer browses products within the selected category page, then adds a
    product to shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer clicks on the **Info** button to open a separate sheet which contains
    full information about the product and then adds a product to the shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer continues shopping and selects a different category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer adds several products from this class to the shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer selects **View Cart** option and updates quantities for products
    in the cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client verifies the shopping cart contents and proceeds to checkout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the checkout page, the customer views the cost of the order and other information,
    fills in personal data, then submits the details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We continue to work with staff of Dream Bean and need to create mockups in
    one of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using storyboard software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a set of wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using paper prototyping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I use **Balsamiq Mockups** to help me quickly create wireframes. The fully
    functional trial version of Balsamiq Mockups works for 30 days and is available
    from the official website: [https://balsamiq.com](https://balsamiq.com) .'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The welcome page is an entry point for the application. It introduces the business
    and service to the customer and enables him or her to navigate to any of the product
    categories. We add a slideshow in the middle of the welcome page, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Welcome page](Image00009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireframe of the welcome page
  prefs: []
  type: TYPE_NORMAL
- en: Products page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The products page provides a listing of all goods within the chosen category.
    From this page, a customer can view all product information, and add any of the
    listed products to his or her shopping cart. A user can also navigate to any of
    the provided categories or use the **Quick Shop** feature to search products by
    name, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Products page](Image00010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireframe of the products page
  prefs: []
  type: TYPE_NORMAL
- en: Products page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The products page displays information about the product. On this page the
    customer can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the availability of the product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the quantity of the product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the product to the cart by clicking **Buy it**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return to the products list by clicking on **Continue Shopping**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Products page](Image00011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireframe of the product page
  prefs: []
  type: TYPE_NORMAL
- en: Cart page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cart page lists all items held in the user''s shopping cart. It displays
    product details for each item and from this page, a user can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove all goodies from his or her cart by clicking **Clear Cart**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the quantity for any listed item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return to the products list by clicking on **Continue Shopping**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proceed to checkout by clicking **Checkout**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is how the cart page might look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cart page](Image00012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireframe of the cart page
  prefs: []
  type: TYPE_NORMAL
- en: Checkout page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The checkout page displays the customer details form, purchase conditions,
    and order information. The customer should fill in the form, confirm payment,
    and click on the **Submit** button to start the payment process, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checkout page](Image00013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireframe of the checkout page
  prefs: []
  type: TYPE_NORMAL
- en: 'We have everything to initiate the journey with Angular 2 and Bootstrap 4\.
    We projected the business requirements onto mockups, and now we need to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal, create folder `ecommerce` and move in this folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the project from the `ecommerce-seed` folder into the new
    project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following script to install npm modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the **TypeScript** watcher and lite server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This script opens the web browser and navigates to the welcome page of the project.
    We are ready to start development.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_2/1.ecommerce-seed` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Designing layouts with grids and containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap includes a powerful mobile-first grid system for building designs
    of all shapes and sizes, and that sounds very promising because we need to create
    several pages for our project. We will use the grid systems for creating the page
    layouts through a series of rows and columns. Since Bootstrap is developed to
    be mobile first, we use a handful of [media queries](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries)
    to create sensible breakpoints for our layouts and interfaces. These breakpoints
    are mostly based on minimum viewport widths and allow us to scale up elements
    as the viewport changes. There are three main components of the grid system, they
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Row
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The container is the core and requires layout element in Bootstrap. There are
    two classes to create the containers for all other items:'
  prefs: []
  type: TYPE_NORMAL
- en: You can create a responsive, fixed-width container with a `container` class.
    This one doesn't have extra space on both sides of the hosting element and it's
    `max-width` property changes at each breakpoint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the full-width container with a `container-fluid` class. This one
    always has 100% width of a viewport.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a simple layout for our project open `app.component.html` file, and
    insert a `div` element with a `container` class inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We can nest containers, but most layouts do not require that. The container
    is just a placeholder for rows, so let''s add the row inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The row has a `row` class, and the container can contain as many rows as you
    need.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommend using one or several containers with all of the rows inside to wrap
    the page content and center elements on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'A row is a horizontal group of columns. It exists only for one purpose: to
    keep columns lined up correctly. We must put the substance of the page only inside
    columns and indicate the number of columns to use. Each row can contain up to
    12 of them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the column to the row as a combination of a `col` class, and it
    prefixes size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Bootstrap 4 supports five different sizes of displays, and the columns classes
    names depend on them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`col-xs` : For an extra small display (screen width less than 34em or 544px)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col-sm` : For a smaller display (screen width 34em or 544ps and up)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col-md` : For a medium display (screen width 48em or 768px and up)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col-lg` : For a larger display (screen width 62em or 992px and up)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col-xl` : For an extra large display (screen width 75em or 1200px and up)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The column class names always apply to devices with screen widths greater than
    or equal to the breakpoint sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The width of a column sets in percentage, so it is always fluid and sized about
    the parent element. Each column has a horizontal padding to create a space between
    individual columns. The first and last columns have negative margins, and this
    is why the content within the grid lines up with the substance outside. Here is
    an example of a grid for extra small devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing layouts with grids and containers](Image00014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the welcome page mockup of our project and imagine splitting it into
    rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing layouts with grids and containers](Image00015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wireframe of the welcome page
  prefs: []
  type: TYPE_NORMAL
- en: 'Our markup has a minimum of three rows. The first has a header with company
    logo and menu. It spans 12 mid-sized columns marked with `col-md-12` . I have
    used grid for now, but later I will change it to a more suitable component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The second one has a single column, contains an image 1110x480px, and spans
    all 12 mid-sized columns marked with `col-md-12` like the previous one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The last one includes the places with six product categories, and each of them
    occupies a different number of columns depending on the size of the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: Four middle-sized columns marked with `col-md-4`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Six small columns marked as `col-sm-6`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twelve extra small columns marked with `col-xs-12`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The size of each image is 270x171px. The markup of the bottom part of the screen
    is quite long, so I cut it off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'I intentionally added the Bootstrap class `table-bordered` to display the boundaries
    of columns. I will remove it later. Here is the result of how the website looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: If I change the viewport to a smaller size, Bootstrap immediately transforms
    columns into rows, as you see on the preceding diagram. I didn't use real images
    on the page but pointed to [http://placehold.it](http://placehold.it) . This is
    a service on the web that generates placeholder images of specified sizes on the
    fly. The link like this [http://placehold.it/270x171](http://placehold.it/270x171)
    returns the placeholder image with 270x171px size.
  prefs: []
  type: TYPE_NORMAL
- en: Using images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our markup I used images, so pay attention to the `img-fluid` class which
    opts the image into responsive behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The logic behind the class will never allow the image to become larger than
    the parent element. At the same time, it adds lightweight styles management via
    classes. You can easily design the shape of the picture as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Rounded it with `img-rounded` class. The border radius is 0.3rem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circle it with the help of `img-circle` , so the border radius became to 50%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transform it with `img-thumbnail`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, the `center-block` centered the image, but you can align it
    with helper float or text alignment classes:'
  prefs: []
  type: TYPE_NORMAL
- en: The class `pull-sm-left` floats left on small or wider devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class `pull-lg-right` floats right on large and bigger devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class `pull-xs-none` prevents floating on all viewport sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_2/2.ecommerce-grid` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now, I would like to create the plates and change them with images at the bottom
    of the page. The best one that we can use for this purposes is a **Card** component.
  prefs: []
  type: TYPE_NORMAL
- en: Using Cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Card component is a very flexible and extensible content container requiring
    a small amount of markup and classes to make fantastic things. The Cards replaces
    the following elements that exist in Bootstrap 3:'
  prefs: []
  type: TYPE_NORMAL
- en: Panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wells
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thumbnails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The simplest way to create it is to add the `card` and `card-block` classes
    to the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `card-block` class adds a padding space between the content and the card
    border. In my example, I moved it inside to allow the card header to line up flush
    with the card edge. If you need to, you can create a header with `card-header`
    and footer with `card-footer` classes. As your see, it includes a broad range
    of components in the Card like images, texts, list groups, and more. Here is how
    our Card component looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Cards](Image00016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But this is not only a single place where we use Card components. We will use
    them a lot in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_2/3.ecommerce-cards` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Using buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I have added a button to the Card component, and I want to talk about it. You
    can apply the button style to the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The standard `button` works correctly across all browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `input` element with `type="button"` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The anchor element, only behaves like a button with `role="button"` . Use it
    only to trigger in-page functionality rather than linking to new a page or section
    within the current one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The label when working with checkboxes and radio buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General button styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Bootstrap 4, we can find seven styles for buttons and each of them for a
    different semantic purpose. The class `btn` adds style for contextual variations,
    sizes, states of buttons placed standalone, in forms, or dialogs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General button styles](Image00017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The primary actions style provides an extra visual weight:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The secondary, less important than primary actions style provides for reduced
    background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The success indicates any success operations or position actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The info is to guide users for informational actions or alerts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The warning one offers warning with cautions actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The danger indicates dangerous or potentially negative actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The link one presents a button as a link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Outline button styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can remove hefty background images and colors on any button of any predefined
    styles by replacing the default modified classes with the `.btn-outline-*`  styles.
  prefs: []
  type: TYPE_NORMAL
- en: '![Outline button styles](Image00018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no outline for link buttons (that is, there is no `btn-outline-link`
    class).
  prefs: []
  type: TYPE_NORMAL
- en: Button sizes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Buttons may have small and big sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Button sizes](Image00019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Use `btn-sm` and `btn-lg` classes to make that happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Block level button styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you planning to create block level buttons that span the full width of parent
    element, just add `btn-block` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '![Block level button styles](Image00020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The button with active style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pseudo-classes in button styles update the visual state of elements according
    to user actions, but if you need to change the states manually use `active` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![The button with active style](Image00021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The button with inactive state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can make button looks inactive with the `disabled` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '![The button with inactive state](Image00022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Radio buttons and checkboxes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap 4 provides button styles with toggle features to `input` elements
    similar to radio buttons and checkboxes. To achieve that you need to create the
    massive construction that includes a group element, a label, and the input element
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![Radio buttons and checkboxes](Image00023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '![Radio buttons and checkboxes](Image00024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 4 provides a base style for navigation elements. It exposes the base
    `nav` class that shares general mark-up and styles by extending it. All navigation
    components are built on top of this by specifying additional styles. It doesn't
    have styles for the active state. By the way, you can use these methods for disabled
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: The base Nav
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Any **Nav** component must have the outer navigation element based on `ul`
    or `nav` elements. Here is a list-based approach displaying navigation elements
    vertically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '![The base Nav](Image00025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our mark-up can be very flexible because all components are based on classes.
    We can use `nav` with regular anchor elements to layout navigation horizontally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '![The base Nav](Image00026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I like this approach because it is less verbose than the list-based one.
  prefs: []
  type: TYPE_NORMAL
- en: Inline navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily add inline navigation elements with spacing horizontally as
    shown in the preceding example with the help of the `nav-inline` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Tabs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can quickly transform Nav components from the preceding, to generate a tabbed
    interface with the `nav-tabs` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![Tabs](Image00027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pills
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just change `nav-tabs` to `nav-pills` to display the **pills** instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '![Pills](Image00028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stacked pills
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need layout pills vertically, use the `nav-stacked` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '![Stacked pills](Image00029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navigation with dropdowns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add a drop-down menu to inline navigation, tabs, or pills by applying
    a `dropdown` class to the list item and with a little extra HTML and drop-down
    JavaScript plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '![Navigation with dropdowns](Image00030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navbars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I mentioned earlier the header with company logo and menu, temporarily implemented
    as a grid. Now we change this construction to the suitable component. Please welcome
    the **Navbars** .
  prefs: []
  type: TYPE_NORMAL
- en: The Navbar is just a simple wrapper helping to position containing elements.
    Usually, it displays as a horizontal bar, but you can configure it to collapse
    on smaller layouts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like many other components of Bootstrap the Navbar container requires a small
    amount of markup and classes to make it work:'
  prefs: []
  type: TYPE_NORMAL
- en: To create one, you must use a `navbar` class in conjunction with a color scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The topmost must be a `nav` or `div` element with `role="navigation"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can include built-in sub-components to add the placeholders when necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `navbar-brand` class for your company, product, or project name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `navbar-nav` class for full-height and lightweight navigation. It includes
    support for drop-downs as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `navbar-toggler` class to organize collapsible behavior.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s use what we know about Navbar to build our header. First of all, I use
    `nav` to create the topmost element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, I need `navbar-brand` class for the company name. We can apply this class
    to most elements, but an anchor works best:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, I add a set of navigation links with `active` first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is our header with branding and a set of links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content](Image00031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With the help of `nav` classes we can make navigation simple by avoiding the
    list-based approach entirely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can manage the colors of Navbar very elegantly:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the scheme with `navbar-light` or `navbar-dark` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add color values via one of the Bootstrap color classes or create your own color
    with CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In my example I used a light scheme and a Bootstrap faded background color.
    Let''s change it to a dark scheme and a custom color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '![Colors](Image00032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It looks nice, but Navbar is spanning the full width of the viewport. This is
    not what managers from Dream Bean want. The header must be centered and have a
    specific size.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will wrap our Navbar in a `container` class to center it on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![Containers](Image00033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another correction they would like to have is that the header must be statically
    placed at top of the page. I used the `navbar-fixed-top` class to place it at
    the top of the viewport:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `navbar-fixed-bottom` class to reach the same effect but at
    the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these last changes, the header spans the full width of the viewport again.
    To fix that issue, we need to move `container` inside `navbar` to wrap up its
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Our Navbar hides the part of the viewport underneath, so we need to add a padding
    to compensate this issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If your Navbar was fixed at the bottom add padding for it as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Responsive Navbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another issue the staff of Dream Bean would like to fix is that the content
    must collapse at the given viewport width. Let''s do it with `navbar-toggler`
    class along with `navbar-toggleable` classes, and their prefix sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive Navbar](Image00034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As I mentioned earlier, the `navbar-toggler` class helps to organize collapsible
    behavior. The collapsible plugin uses information from the `data-toggle` property
    to trigger the action and one element defined in `data-target` . The `data-target`
    keeps the ID of an element contained with `navbar-toggleable` classes, and it
    prefixes the size.
  prefs: []
  type: TYPE_NORMAL
- en: 'The collapsible header will only work responsively with a combination of all
    of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive Navbar](Image00035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Responsive utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make the life of developers easy, Bootstrap provides utility classes for
    faster mobile-friendly development. They could help in:'
  prefs: []
  type: TYPE_NORMAL
- en: Showing and hiding content by a device via a media query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling content when printed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I don''t want to create entirely different versions of the same web application
    for different mobile devices. Instead, I will use the following utility classes
    to complement each device''s presentation:'
  prefs: []
  type: TYPE_NORMAL
- en: The utility class `hidden-*-up` hides the element when the viewport is at the
    given breakpoint or wider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The utility class `hidden-*-down` hides the element when the viewport is at
    the given breakpoint or smaller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can show an element only on a given interval of screen sizes by combining
    `hidden-*-up` and `hidden-*-down` utility classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bear in mind that there are no exit responsive utility classes to show an element
    explicitly. Indeed, we do not hide it at the particular breakpoint size.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our project we show the UI element we like to call the hamburger button
    only for devices with a screen size less than 544px:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive utilities](Image00036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a quick tip table that can help you to choose the right utility class
    to show elements on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: The `hidden-xs-down` shows elements from small devices (landscape phones) and
    up (>= 544px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-sm-down` shows elements from medium devices (tablets) and up (>=
    768px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-md-down` shows elements from large devices (desktops) and up (>=
    992px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-lg-down` shows elements from small devices (desktops) and up (>=
    1200px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-sm-up` shows elements for extra small devices (portrait phones)
    (< 544px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-md-up` shows elements for small devices (portrait phones) and down
    (< 768px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-lg-up` shows elements for medium devices (tablets) and down (< 992px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hidden-xl-up` shows elements for large devices (desktops) and down (< 1200px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Navbar content alignment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing we need to fix is the placement of a menu in the Navbar. We
    can use any of `pull-*left` or `pull-*right` classes to align the menu and all
    other components in Navbar. The managers of Dream Bean want to add the cart item
    with a drop-down as the last item of the menu and align it to the right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'I have created a separate menu group and aligned it to the right with `pull-xs-right`
    on all sizes of layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Navbar content alignment](Image00037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the source code in the `chapter_2/4.ecommerce-responsive` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discovered the world of Sass; the CSS preprocessing framework
    allows you to write more concise stylesheets. The Sass files are formatted nicely
    and require less repetitive techniques commonly found when writing CSS code. As
    a result, we had more dynamic styling and saved time developing quality websites
    and applications. We will use Sass in customizing our project in the following
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: We introduced the project we're going to be building over the course of this
    book. This information includes important aspects about how to start a project
    development from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: We explored the most fundamental grid component helping us to layout all other
    elements across the page.
  prefs: []
  type: TYPE_NORMAL
- en: We introduced the flexible Card component and built the plates that contain
    categories of products from the building project.
  prefs: []
  type: TYPE_NORMAL
- en: We now know how to use Nav and Navbar components to organize responsively collapsible
    headers with a menu, and how to customize it.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](text00033.html#ch03 "Chapter 3. Advanced Bootstrap Components
    and Customization") , *Advanced Bootstrap Components and Customization* , we're
    going to explore more Bootstrap fundamentals and continue to build the project
    we started to develop in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 读累了记得休息一会哦~
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**公众号：古德猫宁李**'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书单分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书友学习交流
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 电子书打包资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 学习资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
