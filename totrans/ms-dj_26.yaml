- en: Appendix E. Built-in Template Tags and Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.xhtml "Chapter 3. Templates"), *Templates*, lists a number
    of the most useful built-in template tags and filters. However, Django ships with
    many more built-in tags and filters. This appendix provides a summary of all template
    tags and filters in Django. For more detailed information and use cases, see the
    Django Project website at [https://docs.djangoproject.com/en/1.8/ref/templates/builtins/](https://docs.djangoproject.com/en/1.8/ref/templates/builtins/).'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: autoescape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controls the current auto-escaping behavior. This tag takes either `on` or `off`
    as an argument and that determines whether auto-escaping is in effect inside the
    block. The block is closed with an `endautoescape` ending tag.
  prefs: []
  type: TYPE_NORMAL
- en: When auto-escaping is in effect, all variable content has HTML escaping applied
    to it before placing the result into the output (but after any filters have been
    applied). This is equivalent to manually applying the `escape` filter to each
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only exceptions are variables that are already marked as safe from escaping,
    either by the code that populated the variable, or because it has had the `safe`
    or `escape` filters applied. Sample usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Defines a block that can be overridden by child templates. See "template inheritance"
    in [Chapter 3](ch03.xhtml "Chapter 3. Templates"), *Templates*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: comment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ignores everything between `{% comment %}` and `{% endcomment %}`. An optional
    note may be inserted in the first tag. For example, this is useful when commenting
    out code for documenting why the code was disabled.
  prefs: []
  type: TYPE_NORMAL
- en: '`Comment` tags cannot be nested.'
  prefs: []
  type: TYPE_NORMAL
- en: csrf_token
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tag is used for CSRF protection. For more information on **Cross Site Request
    Forgeries** (**CSRF**) see [Chapter 3](ch03.xhtml "Chapter 3. Templates"), *Templates*,
    and [Chapter 19](ch19.xhtml "Chapter 19. Security in Django"), *Security in Django*.
  prefs: []
  type: TYPE_NORMAL
- en: cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Produces one of its arguments each time this tag is encountered. The first
    argument is produced on the first encounter, the second argument on the second
    encounter, and so forth. Once all arguments are exhausted, the tag cycles to the
    first argument and produces it again. This tag is particularly useful in a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The first iteration produces HTML that refers to class `row1`, the second to
    `row2`, the third to `row1` again, and so on for each iteration of the loop. You
    can use variables, too. For example, if you have two template variables, `rowvalue1`
    and `rowvalue2`, you can alternate between their values like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also mix variables and strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can use any number of values in a `cycle` tag, separated by spaces. Values
    enclosed in single quotes (`'`) or double quotes (`"`) are treated as string literals,
    while values without quotes are treated as template variables.
  prefs: []
  type: TYPE_NORMAL
- en: debug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Outputs a whole load of debugging information, including the current context
    and imported modules.
  prefs: []
  type: TYPE_NORMAL
- en: extends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Signals that this template extends a parent template. This tag can be used
    in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{% extends "base.html" %}` (with quotes) uses the literal value `"base.html"`
    as the name of the parent template to extend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{% extends variable %}` uses the value of `variable`. If the variable evaluates
    to a string, Django will use that string as the name of the parent template. If
    the variable evaluates to a `Template` object, Django will use that object as
    the parent template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filters the contents of the block through one or more filters. See the Built-in
    Filters section later in this appendix for a list of filters in Django.
  prefs: []
  type: TYPE_NORMAL
- en: firstof
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Outputs the first argument variable that is not `False`. Outputs nothing if
    all the passed variables are `False`. Sample usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Loops over each item in an array, making the item available in a context variable.
    For example, to display a list of athletes provided in `athlete_list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can loop over a list in reverse by using `{% for obj in list reversed %}`.
    If you need to loop over a list of lists, you can unpack the values in each sub
    list into individual variables. This can also be useful if you need to access
    the items in a dictionary. For example, if your context contained a dictionary
    `data`, the following would display the keys and values of the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: for... empty
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `for` tag can take an optional `{% empty %}` clause whose text is displayed
    if the given array is empty or could not be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: if
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `{% if %}` tag evaluates a variable, and if that variable is true (that
    is, exists, is not empty, and is not a false boolean value) the contents of the
    block are output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the above, if `athlete_list` is not empty, the number of athletes will be
    displayed by the `{{ athlete_list|length }}` variable. As you can see, the `if`
    tag may take one or several `{% elif %}` clauses, as well as an `{% else %}` clause
    that will be displayed if all previous conditions fail. These clauses are optional.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`if` tags may use `and`, `or`, or `not` to test a number of variables or to
    negate a given variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Use of both `and` and `or` clauses within the same tag is allowed, with `and`
    having higher precedence than `or` for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'will be interpreted like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Use of actual parentheses in the `if` tag is invalid syntax. If you need them
    to indicate precedence, you should use nested `if` tags.
  prefs: []
  type: TYPE_NORMAL
- en: '`if` tags may also use the operators `==`, `!=`, `<`, `>`, `<=`, `>=`, and
    `in` which work as listed in *Table E.1*.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| == | {% if somevar == "x" %} ... |'
  prefs: []
  type: TYPE_TB
- en: '| != | {% if somevar != "x" %} ... |'
  prefs: []
  type: TYPE_TB
- en: '| < | {% if somevar < 100 %} ... |'
  prefs: []
  type: TYPE_TB
- en: '| > | {% if somevar > 10 %} ... |'
  prefs: []
  type: TYPE_TB
- en: '| <= | {% if somevar <= 100 %} ... |'
  prefs: []
  type: TYPE_TB
- en: '| >= | {% if somevar >= 10 %} ... |'
  prefs: []
  type: TYPE_TB
- en: '| In | {% if "bc" in "abcdef" %} |'
  prefs: []
  type: TYPE_TB
- en: 'Table E.1: Boolean operators in template tags'
  prefs: []
  type: TYPE_NORMAL
- en: Complex expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All of the above can be combined to form complex expressions. For such expressions,
    it can be important to know how the operators are grouped when the expression
    is evaluated-that is, the precedence rules. The precedence of the operators, from
    lowest to highest, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`or`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`and`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`==`, `!=`, `<`, `>`, `<=`, and `>=`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This order of precedence follows Python exactly.
  prefs: []
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also use filters in the `if` expression. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ifchanged
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check if a value has changed from the last iteration of a loop. The
  prefs: []
  type: TYPE_NORMAL
- en: '`{% ifchanged %}` block tag is used within a loop. It has two possible uses:'
  prefs: []
  type: TYPE_NORMAL
- en: Checks its own rendered contents against its previous state and only displays
    the content if it has changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If given one or more variables, check whether any variable has changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ifequal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Output the contents of the block if the two arguments equal each other. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: An alternative to the `ifequal` tag is to use the `if` tag and the `==` operator.
  prefs: []
  type: TYPE_NORMAL
- en: ifnotequal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like `ifequal`, except it tests that the two arguments are not equal. An
    alternative to the `ifnotequal` tag is to use the `if` tag and the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: include
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Loads a template and renders it with the current context. This is a way of
    including other templates within a template. The template name can either be a
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'or a hard-coded (quoted) string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: load
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Loads a custom template tag set. For example, the following template would
    load all the tags and filters registered in `somelibrary` and `otherlibrary` located
    in package `package`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You can also selectively load individual filters or tags from a library, using
    the `from` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the template tags/filters named `foo` and `bar` will be loaded
    from `somelibrary`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See *Custom tag* and *Filter libraries* for more information.
  prefs: []
  type: TYPE_NORMAL
- en: lorem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Displays random lorem ipsum Latin text. This is useful for providing sample
    data in templates. Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `{% lorem %}` tag can be used with zero, one, two or three arguments. The
    arguments are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Count:** A number (or variable) containing the number of paragraphs or words
    to generate (default is 1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method:** Either w for words, p for HTML paragraphs or b for plain-text paragraph
    blocks (default is b).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Random:** The word random, which if given, does not use the common paragraph
    (Lorem ipsum dolor sit amet...) when generating text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `{% lorem 2 w random %}` will output two random Latin words.
  prefs: []
  type: TYPE_NORMAL
- en: now
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Displays the current date and/or time, using a format according to the given
    string. Such string can contain format specifiers characters as described in the
    `date` filter section. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The format passed can also be one of the predefined ones `DATE_FORMAT`, `DATETIME_FORMAT`,
    `SHORT_DATE_FORMAT`, or `SHORT_DATETIME_FORMAT`. The predefined formats may vary
    depending on the current locale and if format-localization is enabled, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: regroup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regroups a list of alike objects by a common attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '`{% regroup %}` produces a list of *group objects*. Each group object has two
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`grouper`: The item that was grouped by (for example, the string India or Japan)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`: A list of all items in this group (for example, a list of all cities
    with `country = "India"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that `{% regroup %}` does not order its input!
  prefs: []
  type: TYPE_NORMAL
- en: Any valid template lookup is a legal grouping attribute for the regroup tag,
    including methods, attributes, dictionary keys, and list items.
  prefs: []
  type: TYPE_NORMAL
- en: spaceless
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Removes whitespace between HTML tags. This includes tab characters and newlines.
    Example usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This example would return this HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: templatetag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Outputs one of the syntax characters used to compose template tags. Since the
    template system has no concept of escaping, to display one of the bits used in
    template tags, you must use the `{% templatetag %}` tag. The argument tells which
    template bit to output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`openblock` outputs: `{%`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closeblock` outputs: `%}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openvariable` outputs: `{{`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closevariable` outputs: `}}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openbrace` outputs: `{`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closebrace` outputs: `}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opencomment` outputs: `{#`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closecomment` outputs: `#}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sample usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: url
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Returns an absolute path reference (a URL without the domain name) matching
    a given view function and optional parameters. Any special characters in the resulting
    path will be encoded using `iri_to_uri()`. This is a way to output links without
    violating the DRY principle by having to hard-code URLs in your templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The first argument is a path to a view function in the format `package.package.module.function`.
    It can be a quoted literal or any other context variable. Additional arguments
    are optional and should be space-separated values that will be used as arguments
    in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: verbatim
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stops the template engine from rendering the contents of this block tag. A common
    use is to allow a Javascript template layer that collides with Django's syntax.
  prefs: []
  type: TYPE_NORMAL
- en: widthratio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For creating bar charts and such, this tag calculates the ratio of a given
    value to a maximum value, and then applies that ratio to a constant. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: with
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Caches a complex variable under a simpler name. This is useful when accessing
    an expensive method (for example, one that hits the database) multiple times.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Built-in filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adds the argument to the value. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `4`, then the output will be `6`.
  prefs: []
  type: TYPE_NORMAL
- en: addslashes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adds slashes before quotes. Useful for escaping strings in CSV, for example.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `I'm using Django`, the output will be `I'm using Django`.
  prefs: []
  type: TYPE_NORMAL
- en: capfirst
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Capitalizes the first character of the value. If the first character is not
    a letter, this filter has no effect.
  prefs: []
  type: TYPE_NORMAL
- en: center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Centers the value in a field of a given width. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `Django`, the output will be  `Django`.
  prefs: []
  type: TYPE_NORMAL
- en: cut
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Removes all values of `arg` from the given string.
  prefs: []
  type: TYPE_NORMAL
- en: date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Formats a date according to the given format. Uses a similar format as PHP's
    `date()` function with some differences.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These format characters are not used in Django outside of templates. They were
    designed to be compatible with PHP to ease transitioning for designers. For a
    full list of format strings see the Django Project website at [https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date](https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is a `datetime` object (for example, the result of `datetime.datetime.now()`),
    the output will be the string `Fri 01 Jul 2016`. The format passed can be one
    of the predefined ones `DATE_FORMAT`, `DATETIME_FORMAT`, `SHORT_DATE_FORMAT`,
    or `SHORT_DATETIME_FORMAT`, or a custom format that uses date format specifiers.
  prefs: []
  type: TYPE_NORMAL
- en: default
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If value evaluates to `False`, uses the given default. Otherwise, uses the
    value. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: default_if_none
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If (and only if) value is `None`, uses the given default. Otherwise, uses the
    value.
  prefs: []
  type: TYPE_NORMAL
- en: dictsort
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Takes a list of dictionaries and returns that list sorted by the key given
    in the argument. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: dictsortreversed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Takes a list of dictionaries and returns that list sorted in reverse order by
    the key given in the argument.
  prefs: []
  type: TYPE_NORMAL
- en: divisibleby
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Returns `True` if the value is divisible by the argument. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `21`, the output would be `True`.
  prefs: []
  type: TYPE_NORMAL
- en: escape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Escapes a string''s HTML. Specifically, it makes these replacements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<` is converted to `&lt;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`>` is converted to `&gt;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''` (single quote) is converted to `''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"` (double quote) is converted to `&quot;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`&` is converted to `&amp;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The escaping is only applied when the string is output, so it does not matter
    where in a chained sequence of filters you put `escape`: it will always be applied
    as though it were the last filter.'
  prefs: []
  type: TYPE_NORMAL
- en: escapejs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Escapes characters for use in JavaScript strings. This does *not* make the string
    safe for use in HTML, but does protect you from syntax errors when using templates
    to generate JavaScript/JSON.
  prefs: []
  type: TYPE_NORMAL
- en: filesizeformat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Formats the value like a ''human-readable'' file size (that is, `''13 KB''`,
    `''4.1 MB''`, `''102 bytes''`, and more). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `123456789`, the output would be `117.7 MB`.
  prefs: []
  type: TYPE_NORMAL
- en: first
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns the first item in a list.
  prefs: []
  type: TYPE_NORMAL
- en: floatformat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When used without an argument, rounds a floating-point number to one decimal
    place-but only if there's a decimal part to be displayed. If used with a numeric
    integer argument, `floatformat` rounds a number to that many decimal places.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if `value` is `34.23234`, `{{ value|floatformat:3 }}` will output
    `34.232`.
  prefs: []
  type: TYPE_NORMAL
- en: get_digit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given a whole number, returns the requested digit, where 1 is the right-most
    digit.
  prefs: []
  type: TYPE_NORMAL
- en: iriencode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts an **Internationalized Resource Identifier** (**IRI**) to a string
    that is suitable for including in a URL.
  prefs: []
  type: TYPE_NORMAL
- en: join
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Joins a list with a string, like Python's `str.join(list)`.
  prefs: []
  type: TYPE_NORMAL
- en: last
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns the last item in a list.
  prefs: []
  type: TYPE_NORMAL
- en: length
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns the length of the value. This works for both strings and lists.
  prefs: []
  type: TYPE_NORMAL
- en: length_is
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Returns `True` if the value''s length is the argument, or `False` otherwise.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: linebreaks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Replaces line breaks in plain text with appropriate HTML; a single newline becomes
    an HTML line break (`<br />`) and a new line followed by a blank line becomes
    a paragraph break (`</p>`).
  prefs: []
  type: TYPE_NORMAL
- en: linebreaksbr
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts all newlines in a piece of plain text to HTML line breaks (`<br />`).
  prefs: []
  type: TYPE_NORMAL
- en: linenumbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Displays text with line numbers.
  prefs: []
  type: TYPE_NORMAL
- en: ljust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Left-aligns the value in a field of a given width. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `Django`, the output will be `Django`.
  prefs: []
  type: TYPE_NORMAL
- en: lower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts a string into all lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: make_list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns the value turned into a list. For a string, it's a list of characters.
    For an integer, the argument is cast into an Unicode string before creating a
    list.
  prefs: []
  type: TYPE_NORMAL
- en: phone2numeric
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Converts a phone number (possibly containing letters) to its numerical equivalent.
    The input doesn''t have to be a valid phone number. This will happily convert
    any string. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `800-COLLECT`, the output will be `800-2655328`.
  prefs: []
  type: TYPE_NORMAL
- en: pluralize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns a plural suffix if the value is not `1`. By default, this suffix is
    `s`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For words that don''t pluralize by simple suffix, you can specify both a singular
    and plural suffix, separated by a comma. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: pprint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A wrapper around `pprint.pprint()`--for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: random
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns a random item from the given list.
  prefs: []
  type: TYPE_NORMAL
- en: rjust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Right-aligns the value in a field of a given width. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `Django`, the output will be  `Django`.
  prefs: []
  type: TYPE_NORMAL
- en: safe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Marks a string as not requiring further HTML escaping prior to output. When
    autoescaping is off, this filter has no effect.
  prefs: []
  type: TYPE_NORMAL
- en: safeseq
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Applies the `safe` filter to each element of a sequence. Useful in conjunction
    with other filters that operate on sequences, such as `join`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You couldn't use the `safe` filter directly in this case, as it would first
    convert the variable into a string, rather than working with the individual elements
    of the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: slice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns a slice of the list. Uses the same syntax as Python's list slicing.
  prefs: []
  type: TYPE_NORMAL
- en: slugify
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts to ASCII. Converts spaces to hyphens. Removes characters that aren't
    alphanumeric, underscores, or hyphens. Converts to lowercase. Also strips leading
    and trailing whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: stringformat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Formats the variable according to the argument, a string formatting specifier.
    This specifier uses Python string formatting syntax, with the exception that the
    leading % is dropped.
  prefs: []
  type: TYPE_NORMAL
- en: striptags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Makes all possible efforts to strip all [X]HTML tags. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Formats a time according to the given format. Given format can be the predefined
    one `TIME_FORMAT`, or a custom format, same as the `date` filter.
  prefs: []
  type: TYPE_NORMAL
- en: timesince
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Formats a date as the time since that date (for example, 4 days, 6 hours). Takes
    an optional argument that is a variable containing the date to use as the comparison
    point (without the argument, the comparison point is `now`).
  prefs: []
  type: TYPE_NORMAL
- en: timeuntil
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Measures the time from now until the given date or `datetime`.
  prefs: []
  type: TYPE_NORMAL
- en: title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts a string into title case by making words start with an uppercase character
    and the remaining characters lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: truncatechars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Truncates a string if it is longer than the specified number of characters.
    Truncated strings will end with a translatable ellipsis sequence (...). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: truncatechars_html
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to `truncatechars`, except that it is aware of HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: truncatewords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Truncates a string after a certain number of words.
  prefs: []
  type: TYPE_NORMAL
- en: truncatewords_html
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to `truncatewords`, except that it is aware of HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: unordered_list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recursively takes a self-nested list and returns an HTML unordered list-without
    opening and closing tags.
  prefs: []
  type: TYPE_NORMAL
- en: upper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts a string into all uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: urlencode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Escapes a value for use in a URL.
  prefs: []
  type: TYPE_NORMAL
- en: urlize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts URLs and email addresses in text into clickable links. This template
    tag works on links prefixed with `http://`, `https://`, or `www.`.
  prefs: []
  type: TYPE_NORMAL
- en: urlizetrunc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Converts URLs and email addresses into clickable links just like `urlize`,
    but truncates URLs longer than the given character limit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is `Check out www.djangoproject.com`, the output would be `Check
    out <a href="http://www.djangoproject.com" rel="nofollow">www.djangopr...</a>`.
    As with `urlize`, this filter should only be applied to plain text.
  prefs: []
  type: TYPE_NORMAL
- en: wordcount
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Returns the number of words.
  prefs: []
  type: TYPE_NORMAL
- en: wordwrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wraps words at specified line length.
  prefs: []
  type: TYPE_NORMAL
- en: yesno
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maps values for true, false and (optionally) None, to the strings yes, no,
    maybe, or a custom mapping passed as a comma-separated list, and returns one of
    those strings according to the value: For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Internationalization tags and filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django provides template tags and filters to control each aspect of internationalization
    in templates. They allow for granular control of translations, formatting, and
    time zone conversions.
  prefs: []
  type: TYPE_NORMAL
- en: i18n
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This library allows specifying translatable text in templates. To enable it,
    set `USE_I18N` to `True`, then load it with `{% load i18n %}`.
  prefs: []
  type: TYPE_NORMAL
- en: l10n
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This library provides control over the localization of values in templates.
    You only need to load the library using `{% load l10n %}`, but you'll often set
    `USE_L10N` to `True` so that localization is active by default.
  prefs: []
  type: TYPE_NORMAL
- en: tz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This library provides control over time zone conversions in templates. Like
    `l10n`, you only need to load the library using `{% load tz %}`, but you'll usually
    also set `USE_TZ` to `True` so that conversion to local time happens by default.
    See time-zones-in-templates.
  prefs: []
  type: TYPE_NORMAL
- en: Other tags and filters libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: static
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To link to static files that are saved in `STATIC_ROOT` Django ships with a
    `static` template tag. You can use this regardless if you're using `RequestContext`
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also able to consume standard context variables, for example, assuming
    a `user_stylesheet` variable is passed to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''d like to retrieve a static URL without displaying it, you can use
    a slightly different call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The `staticfiles` contrib app also ships with a `static template tag` which
    uses `staticfiles` `STATICFILES_STORAGE` to build the URL of the given path (rather
    than simply using `urllib.parse.urljoin()` with the `STATIC_URL` setting and the
    given path). Use that instead if you have an advanced use case such as using a
    cloud service to serve static files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: get_static_prefix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should prefer the `static` template tag, but if you need more control over
    exactly where and how `STATIC_URL` is injected into the template, you can use
    the `get_static_prefix` template tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s also a second form you can use to avoid extra processing if you need
    the value multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: get_media_prefix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the `get_static_prefix`, `get_media_prefix` populates a template
    variable with the media prefix `MEDIA_URL`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Django comes with a couple of other template-tag libraries that you have to
    enable explicitly in your `INSTALLED_APPS` setting and enable in your template
    with the `{% load %}` tag.
  prefs: []
  type: TYPE_NORMAL
