- en: Chapter 4. Avoid Reinventing the Wheel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding chapters, you learned how to use *Less* to compile your CSS.
    *Less* helps you create reusable and maintainable CSS code. You have learned how
    to organize your files and the previous chapter also showed you the role of namespaces
    to make your code portable. *Less* helps you write efficient code to handle browser
    incompatibility. *Less* doesn't solve problems with browser incompatibility on
    its own but makes your solutions reusable, although the reusable mixins can still
    be complex for this reason. In this chapter, you will learn that you won't have
    to write all this complex code yourself. There are some libraries of prebuilt
    mixins out there which can help you work faster and create more stable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Background gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing unused code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The iconic fonts of prebuilt mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retina.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting background gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember the CSS3 background gradient that was discussed in [Chapter 2](ch02.html
    "Chapter 2. Using Variables and Mixins"), *Using Variables and Mixins*? To show
    a better or the same gradient on different browsers, you have to use vendor-specific
    rules. Different sets of rules make your mixins more complex. In this case, more
    complex also means more difficult to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, your mixins grow with outdated code or with code that is no longer
    supported on the one hand, while you have to update your mixins for newer browsers
    on the other. Of course, we can only hope that new browser versions support CSS3
    specifications without any further changes to the code.
  prefs: []
  type: TYPE_NORMAL
- en: The **Can I use...** website ([http://caniuse.com/](http://caniuse.com/)) provides
    compatibility tables for HTML5, CSS3, and SVG support, and also for desktop and
    mobile browsers. It will show you that most of the current browsers have support
    for CSS gradients in their current version. At the time of writing this book,
    the Android browser for mobile still relies on the `-webkit` vendor rule, and
    Opera Mini doesn't support it at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you drop the support for older browsers, your mixin can be reduced to the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code also drops support for IE8 and IE9\. If you choose to support
    these browsers too, you have to add an additional IE-specific rule. The **Can
    I use…** website also shows you market shares of the most common browsers. In
    some cases, it can also be useful to only provide functional support for older
    browsers and not expect everything to look exactly the same on all browsers. For
    instance, a navigation structure without advanced animations can still help the
    user navigate through your site. People who use an older browser do not always
    expect the newest techniques. These techniques also do not always have added value.
    Older browsers mostly don't run on the newest hardware; on these browsers, support
    for features such as gradients will only slow down your website instead of adding
    any value.
  prefs: []
  type: TYPE_NORMAL
- en: Unused code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even when using *Less* for long running and growing projects, it's almost impossible
    to not find some unused pieces of code in your code. Browser tools can help detect
    this unused code in your final CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Chrome's developer tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Chrome's developer tools have an option to find unused CSS. In Google
    Chrome, navigate to **Tools** | **Developers Tools**, select the **Audits** tab,
    and click on **Run**.
  prefs: []
  type: TYPE_NORMAL
- en: Now use this tool to test the demo code from the preceding chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, open `http://localhost/index.html` in your browser and run the test.
    You will see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chrome''s developer tools](img/1465OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unused code shown by Chrome's developer tools
  prefs: []
  type: TYPE_NORMAL
- en: The list of unused code starts with a long list of styles defined in `less/normalize.less`,
    as seen in [Chapter 1](ch01.html "Chapter 1. Improving Web Development with Less"),
    *Improve Web Development with Less*; these are the styles of the **CSS reset**.
  prefs: []
  type: TYPE_NORMAL
- en: In most projects, the same base of CSS code (the same file) is used for every
    page. For this reason, you cannot always guarantee that a page includes only the
    code that it really uses. Some of this code won't be used on every page but will
    have to be used on other or future pages. Web browsers are able to cache CSS files,
    for this reason it is better to use the same CSS file to style different pages
    from your website. Some pages will not use all the cached style rules which will
    be shown as unused code on that page. Cached code is loaded once and used on every
    page. The CSS reset seems useful for all pages, so you should not change or remove
    it.
  prefs: []
  type: TYPE_NORMAL
- en: As you can also see, `.centercontent` and `.screen-readeronly` are unused. Remember
    that classes are compiled into your CSS while mixins are not. Now, `.centercontent`
    and `.screen-readeronly` are defined as classes. Having a `.screen-readeronly`
    class seems useful, but `.centercontent` can be changed to a mixin.
  prefs: []
  type: TYPE_NORMAL
- en: Firebug CSS usage add-on
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Firefox, an add-on for Firebug is available. This helps you find the unused
    code. You can download this plugin at [https://addons.mozilla.org/en-US/firefox/addon/css-usage/](https://addons.mozilla.org/en-US/firefox/addon/css-usage/).
  prefs: []
  type: TYPE_NORMAL
- en: Testing your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't have to write all the *Less* code yourself as it is reusable and portable.
    Mixins and snippets of *Less* code can be found on the Web and (re)used in your
    projects. Search for *Less* mixin background gradients and you will get many useful
    hits. Try to find code that offers support for browsers and meets your requirements.
    If you have any doubts about the browser support of a mixin, consider asking questions
    on Stackoverflow.com ([http://www.stackoverflow.com/](http://www.stackoverflow.com/)).
    Always show your code and what you have done; don't just ask for a solution. Also,
    other questions regarding *Less* can be asked on Stackoverflow.com.
  prefs: []
  type: TYPE_NORMAL
- en: Integration of code snippets or even complete namespaces will make the testing
    of your code more important.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding TDD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Test-driven development** (**TDD**) is a proven method for software development.
    In TDD, you write tests for every piece of code in your project. All tests should
    pass after changing your code when adding or improving functionalities or refactoring
    the code. All tests should run automatically. While automatically testing *Less*
    and CSS code, you need to manually look at the exact appearance of the pages in
    different browsers and devices, although other aspects such as correctness and
    performance can be tested automatically. You can, for instance, automatically
    test your code with tools such as **CSS Lint** ([http://ccslint.net/](http://ccslint.net/)).
    CSS Lint validates and tests your code, among other things, for performance, maintainability,
    and accessibility. These tools test the compiled CSS and not your *Less* code.
    The **Less Lint Grunt** plugin compiles your *Less* files, runs the generated
    CSS through CSS Lint, and outputs the offending *Less* line for any CSS Lint errors
    that are found. More information can be found by visiting [https://www.npmjs.org/package/grunt-lesslint](https://www.npmjs.org/package/grunt-lesslint).'
  prefs: []
  type: TYPE_NORMAL
- en: All about style guides
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **style guide** gives an oversight of your website's elements, such as buttons,
    navigation structures, headings, and fonts. It shows the elements in the right
    presentation and colors. Creating style guides for your project and website can
    help you test your *Less* code. Style guides will also help other developers and
    content publishers of your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may be thinking now that style guides are indeed useful but also time consuming;
    for this reason, two tools will be discussed in the following sections. These
    tools generate your style guides automatically based on your *Less* (or compiled
    CSS) code. Both tools still require some additional code and effort, but it won''t
    take too much of your time. Testing your code nearly always pays you back. Also,
    realize the big win here: you only have to test the effect of your styles. *Less*
    guarantees that your CSS is already valid, and the *Less* compiler handles it''s
    optimization. As promised, it provides more time for your real design tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: Building a style guide with StyleDocco
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: StyleDocco generates documentation and style guide documents from your style
    sheets. StyleDocco works very well with *Less* files too. To create a style guide
    with StyleDocco, you will have to add comments to your *Less* files. The comments
    should explain what the style does and also contain HTML example code. The comments
    need to be written in **Markdown**. Markdown is a plain text format that can be
    easily converted into HTML. StackOverflow.com uses Markdown for posts and comments.
    You can use its help guide to learn more; you will find it by visiting [http://www.stackoverflow.com/editing-help/](http://www.stackoverflow.com/editing-help/).
  prefs: []
  type: TYPE_NORMAL
- en: 'StyleDocco can be installed with **npm** using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You have read about npm in [Chapter 1](ch01.html "Chapter 1. Improving Web Development
    with Less"), *Improving Web Development with Less*. After installing StyleDocco,
    you will have to add the Markdown comments to your *Less* files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see an example of a style guide generated with StyleDocco, open `less/nav.less`
    in your text editor and add the description in Markdown followed by the HTML test
    code, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To build your style guide, navigate to your *Less* folder (`lessc`) in the
    terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the name of the style guide is set with `-n`. Mostly,
    you don''t have to set the `–preprocessor` option if your file path contains *Less*
    files only. To build a style guide for your *Less* files, the command should look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `styledocco` command generates a new folder named `docs/`. This folder
    contains an `index.html` file, which can be opened in your browser. The final
    result should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a style guide with StyleDocco](img/1465OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of a style guide built with StyleDocco
  prefs: []
  type: TYPE_NORMAL
- en: Testing your code with tdcss.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `tdcss.js` framework is another style guide tool that works well with *Less*
    and promotes the usage of test-driven development. The `tdcss.js` framework can
    be downloaded free of charge from GitHub at [https://github.com/jakobloekke/tdcss.js](https://github.com/jakobloekke/tdcss.js).
    Also, see [http://jakobloekke.github.io/tdcss.js/](http://jakobloekke.github.io/tdcss.js/)
    for further information. Unlike StyleDocco, using `tdcss.js` doesn''t change your
    *Less* files. You generate your style guide with snippets of relevant source code
    from your project. You can use HTML-comment-style coding, for instance, `<!--
    : Navigation -->`, to separate them. Snippets are copied and pasted to an HTML
    document which forms your style guide and includes styles from your *Less* code
    and `tdcss.js`. The `head` section of the HTML document of the example navigation
    will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The markup in the body is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'See the result of the preceding code by opening `http://localhost/tdcss.html`
    in your browser. The result should finally look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your code with tdcss.js](img/1465OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of a style guide built with tdcss.js
  prefs: []
  type: TYPE_NORMAL
- en: Prebuilt mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You already know about searching and finding mixins on the Web. However, using
    and reusing well-tested mixins will be a lot easier than that. Other developers
    have already built complete libraries and prebuilt mixins which you can use for
    your projects. These prebuilt mixins help you write *Less* code without having
    to think about vendor-specific rules that make CSS3 complex. You will be introduced
    to the five most used libraries in the following sections. These libraries are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Less Elements ([http://lesselements.com](http://lesselements.com))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less Hat ([http://lesshat.madebysource.com/](http://lesshat.madebysource.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3L ([http://mateuszkocz.github.io/3l/](http://mateuszkocz.github.io/3l/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClearLess ([http://clearleft.github.com/clearless/](http://clearleft.github.com/clearless/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preboot ([http://markdotto.com/bootstrap/](http://markdotto.com/bootstrap/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more comprehensive list of mixin libraries can also be found at [http://lesscss.org/usage/#frameworks-using-less](http://lesscss.org/usage/#frameworks-using-less).
  prefs: []
  type: TYPE_NORMAL
- en: Please understand that you don't have to choose; there is no restriction that
    you have to use only one of these libraries. All these libraries have pros and
    cons; you have to choose the libraries that best fit your project requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Globally, all libraries offer you a *Less* file, which contains the mixins that
    you can import in your project. Although some libraries also have some settings,
    in all cases, `@import "{library-name}";` will be enough to make its mixins available
    for your project. *Less* has no restrictions on including more than one library,
    but doing this will give you problems with clashing mixin names. All mixins with
    the same name will be compiled into the CSS (if their parameters also match).
    For this reason, some libraries also have a prefixed version of these mixins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of the prefixed versions, using namespaces, as explained in [Chapter
    3](ch03.html "Chapter 3. Nested Rules, Operations, and Built-in Functions"), *Nested
    Rules, Operations, and Built-in Functions*, offers a more stable solution in most
    cases, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Make the mixins available using `#{library-name} > mixin()`.
  prefs: []
  type: TYPE_NORMAL
- en: Using single-line declarations for vendor-specific rules with Less Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Less Elements is perhaps the most compact library of the ones discussed in this
    chapter. Compact doesn't mean it is not useful. The focus of this library is on
    the consolidation of cross-browser prefixes into single, concise declarations.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the vertical background gradient from the beginning of the chapter?
    You have seen that you will need at least three declarations, including vendor-specific
    rules, when you are supporting modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Less Elements, you can do the same with a single declaration of *Less*
    code with three parameters, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter defines the fallback color used for browsers that don't
    support gradients. The gradient goes from bottom to top, where the second parameter
    sets the bottom color and the third parameter sets the top color.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding *Less* code will finally compile into CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In its simplicity, Less Elements offers many useful mixins to build your project
    with **CSS3 techniques**. It provides single-line declarations for all CSS3 properties
    with vendor-specific rules and extends this with declarations for layout.
  prefs: []
  type: TYPE_NORMAL
- en: The `.columns()` mixin divides an element into columns, including a border and
    a gap between the columns. Variables for the `.columns()` mixin are in the order
    of column width, column count, column gap, column border color, column border
    style, and column border width.
  prefs: []
  type: TYPE_NORMAL
- en: This mixin can be applied on nonreplaced block-level elements (except table
    elements), table cells, and inline-block elements such as the `body` or `div`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To divide a `div` element in to three columns with a width of 150 px, you can
    now write the following code in *Less*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code compiles into CSS and looks as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also test this by loading `http://localhost/columns.html` in your browser.
    Please also resize your browser window from small screens to full screen to see
    that these columns are responsive by default. The compiled `.div.threecolumns`
    class can be used with the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will result in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using single-line declarations for vendor-specific rules with Less Elements](img/1465OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of a multi-column layout built with the columns mixin of Less Elements
  prefs: []
  type: TYPE_NORMAL
- en: The `.columns()` mixin makes use of the **CSS Multi-column Layout Module**.
    More information about this module can be found at [http://www.w3.org/TR/css3-multicol/](http://www.w3.org/TR/css3-multicol/).
    Unfortunately, the support for this module by most modern browsers is not good
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: Less Elements does not provide any information about the browser support of
    the compiled CSS. You must have realized this when using Less Elements in your
    project. As mentioned earlier, you can check browser support on the [caniuse.com](http://caniuse.com)
    website. To find out which browsers support this Multi-column Layout Module, you
    will have to visit [http://caniuse.com/multicolumn](http://caniuse.com/multicolumn).
    Always check the preceding module with the requirements of your project. Also,
    this example shows you why style guides can be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Less Hat – a comprehensive library of mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike Less Elements, **Less Hat** is very comprehensive. At the time of writing
    this book, Less Hat contains 86 prebuilt mixins. Less Hat also has a strong relationship
    with CSS Hat. CSS Hat is a commercial licensed tool that converts Adobe Photoshop
    layers into CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Less Hat mixins offer the possibility of disabling some browser-specific
    prefixes. You should not use this unless you have extremely solid reasons for
    doing so. By default, Less Hat uses all the browser prefixes by setting the *Less*
    variables to `true` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `@w3c` refers to the nonprefixed rules that define the
    standard property names described by the **W3C specification**. Less Hat advertises
    itself as having mixins that create an unlimited number of shadows, gradients,
    and animations. **Box-shadow** is an example of this. With Less Hat, the box-shadow
    mixin can be written as `.box-shadow(<offset-x> <offset-y> spread blur-radius
    color inset, …)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try the preceding `.box-shadow` mixin, you could write it in *Less* with
    Less Hat as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code compiles into the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To inspect this, open `http://localhost/boxshadow.html` in your browser and
    you will see the result of the `.box-shadow` mixin, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Less Hat – a comprehensive library of mixins](img/1465OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of the effect of the box-shadow mixin of Less Hat
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, the `.box-shadow()` mixin of Less Elements doesn't accept multiple shadows,
    but the mixin of 3L, discussed in the following section, works with multiple shadows
    separated with commas.
  prefs: []
  type: TYPE_NORMAL
- en: Using the 3L library of prebuilt mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**3L** (**Lots of Love for Less**) is another collection of prebuilt mixins.
    Besides the standard single-line declarations, 3L offers something extra. 3L provides
    mixins for CSS reset or normalization, as discussed earlier in [Chapter 1](ch01.html
    "Chapter 1. Improving Web Development with Less"), *Improving Web Development
    with Less*. You can call these mixins without placing them inside selector blocks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding `.h5bp()` reset, your CSS is based on **HTML5 Boilerplate**.
    HTML5 Boilerplate is a professional frontend template for building fast, robust,
    and adaptable web applications or sites. You will find more information on Boilerplate
    by visiting [http://html5boilerplate.com/](http://html5boilerplate.com/). 3L not
    only offers a mixin for HTML5 Boilerplate's reset, but also contains mixins for
    HTML5 Boilerplate's helper classes. These mixins contain a clearfix and mixins
    for hidden content for browsers or screen readers.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, `.visuallyhidden()` can be used to hide the content for browsers
    but have this content available for screen readers.
  prefs: []
  type: TYPE_NORMAL
- en: SEO and HTML debugging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SEO** (**search engine optimization**) plays an important role in modern
    web design. Correct and valid HTML5 is the requirement for SEO. Also, setting
    proper titles, using meta tags for keywords, and descriptions and alt attributes
    for images will help your website rank higher.'
  prefs: []
  type: TYPE_NORMAL
- en: 3L's `.seo-helper()` mixin will give you a quick insight into the missing elements
    and attributes of a web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this mixin—after importing 3L—you can write it in *Less* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After using the `.seo-helper()` mixin, your HTML page will contain warnings
    about missing titles or meta tags and show a red border around images with a missing
    alt attribute, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SEO and HTML debugging](img/1465OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 3L's helper class makes missing alt attributes visible
  prefs: []
  type: TYPE_NORMAL
- en: Also, visit `http://localhost/indexseo.html` to get more insight on how this
    class works. After this, you can judge for yourself whether this class is useful
    or not. Independent of your judgment, the `.seo-helper()` mixin shows you how
    *Less* can also be applied for functions other than a website's styles.
  prefs: []
  type: TYPE_NORMAL
- en: ClearLess – another library of prebuilt mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ClearLess also has a relationship with HTML5 Boilerplate. Just like 3L, ClearLess
    offers mixins for HTML5 Boilerplate and helper classes. Besides this, ClearLess
    also makes use of **Modernizr**. Modernizr is a JavaScript library that detects
    HTML5 and CSS3 features in the user''s browser. Modernizr adds additional classes
    to the `html` element of your HTML for detected features. With Modernizr, your
    `html` element will look as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This list of class names tells you whether a feature is available or not. So,
    the browser used to produce the preceding code offers support for box-shadow,
    opacity, and so on. With Modernizr, you will have conditional classes that can
    be used in your *Less* code. Also, ClearLess makes use of these classes.
  prefs: []
  type: TYPE_NORMAL
- en: Alongside the Modernizr mixins, ClearLess has mixins for icons and **CSS sprite
    images**.
  prefs: []
  type: TYPE_NORMAL
- en: CSS sprite images is a technique that dates back to at least seven years ago.
    A website's images are added to a single image, the sprite. If the browser requests
    an image, the sprite will be loaded as the background image. **SpriteMe** ([http://spriteme.org/](http://spriteme.org/))
    can help you create sprites for your projects. CSS is used to show the requested
    image containing a part of the sprite. Loading one big sprite, which can be cached,
    instead of several small images will reduce the number of HTTP requests needed
    by the browser to show the page. The fewer the HTTP requests, the faster the page
    will load.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, use the simple sprite of the *Less* image from the code
    bundle of this chapter (`less-sprite.png`) as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ClearLess – another library of prebuilt mixins](img/1465OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of a simple sprite image
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the sprite image, you could write it in *Less* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This code is also available in `less/sprite.less`. Please notice that the `#clearless`
    namespace got its own scope, so `@sprite-grid` and `@sprite-grid` should be defined
    inside the namespace. Variables are set by redeclaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The compiled CSS of the preceding code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Load `http://localhost/index.html` to see the effect of the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it should be mentioned that ClearLess defines some mixins to construct
    a grid. These mixins will be explained to you in the next section because they
    are adopted from **Preboot**.
  prefs: []
  type: TYPE_NORMAL
- en: Using Preboot's prebuilt mixins for your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Preboot was originally written by Mark Otto (`@mdo`) and is a comprehensive
    and flexible collection of *Less* utilities. Preboot is the predecessor of Twitter's
    **Bootstrap**. Bootstrap is a frontend framework for developing responsive, mobile-first
    projects on the Web. You will learn more about Bootstrap in [Chapter 6](ch06.html
    "Chapter 6. Bootstrap 3, WordPress, and Other Applications"), *Bootstrap 3, WordPress,
    and Other Applications*. Bootstrap improved the original Preboot code. Finally,
    many of the *Less* variable and mixin improvements from Bootstrap were brought
    back in Preboot 2.
  prefs: []
  type: TYPE_NORMAL
- en: Preboot comes with mixins to build a grid system because of its relationship
    with Bootstrap. This grid system creates a row that contains 12 columns. Open
    `http://localhost/prebootgrid.html` from the downloaded code bundle in your browser
    to see an example with two rows. The first grid row contains three columns and
    the second row contains two columns. This grid is responsive by default; you can
    see this by making your browser window smaller using the example grid. If the
    screen width is less than 768 pixels, the columns in the grid will stack under
    each other instead of being horizontal. The following code example only shows
    the compiled CSS without the responsive classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Preboot, you can write the following code in *Less*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code compiles into CSS as follows (it is nonresponsive):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In [Chapter 5](ch05.html "Chapter 5. Integrate Less in Your Own Projects"),
    *Integrate Less in Your Own Projects*, you will find another example that makes
    use of Preboot's grid and discusses the responsive nature of it in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Preboot sets some variables to define the grid as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, other values such as basic colors are predefined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In fact, Preboot is not a complete CSS framework; on the other hand, it's more
    than just a library of prebuilt mixins.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating other techniques into your projects using Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As well as prebuilt mixins, there are some other techniques that can be easily
    integrated in to your projects using *Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Using iconic fonts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name suggests, iconic fonts are sets of icons defined as a font. Iconic
    fonts can replace image icons in your projects. The main reason for using iconic
    fonts instead of images and the reason they are discussed here is that iconic
    fonts, just like any normal font, can be fully manipulated with CSS. In your project,
    you can set the size, color, and shadows of the used iconic fonts with *Less*.
    The primary reason for using iconic fonts is to benefit the load time of your
    website; only one HTTP request is needed to load them all. Iconic fonts will look
    good on different resolutions and displays too.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, iconic fonts were already used in [Chapter 3](ch03.html "Chapter 3. Nested
    Rules, Operations, and Built-in Functions"), *Nested Rules, Operations, and Built-in
    Functions*. Font Awesome was loaded from CDN in these examples. Font Awesome also
    provides a bundle of *Less* files from GitHub at [https://github.com/FortAwesome/Font-Awesome/tree/master/less](https://github.com/FortAwesome/Font-Awesome/tree/master/less).
    You can use these files to integrate Font Awesome in your project by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `font-awesome/` directory into your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your project''s `font-awesome/less/variables.less` file and edit the `@fa-font-path`
    variable to point to your font directory, `@fa-font-path: "../font";`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the Font Awesome *Less* file in your main *Less* file, `@import "font-awesome-4.0.3/less/font-awesome.less";`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After performing the preceding steps, you can use the following snippet of
    code in your HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code when opened in your web browser will result in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using iconic fonts](img/1465OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: HTML list with Font Awesome items
  prefs: []
  type: TYPE_NORMAL
- en: You will find the *Less* code of the preceding HTML list in `less/font-awsome.less`
    of the downloadable files. Please inspect this file. You will see that you don't
    have to change Font Awesome's original files to set `@fa-font-path`. The `@fa-font-path`
    variable will be set by redeclaration and uses the last declaration wins rule
    as explained before in [Chapter 2](ch02.html "Chapter 2. Using Variables and Mixins"),
    *Using Variables and Mixins*.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more examples of Font Awesome usage by visiting [http://fontawesome.io/examples/](http://fontawesome.io/examples/).
  prefs: []
  type: TYPE_NORMAL
- en: Also, other iconic fonts such as Glyphicons for Bootstrap can be used with *Less*
    (see [https://github.com/twbs/bootstrap/blob/master/less/glyphicons.less](https://github.com/twbs/bootstrap/blob/master/less/glyphicons.less)).
    However, in cases where you find iconic fonts without *Less* files, you now have
    enough knowledge to create the required *Less* code yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to write the required *Less* code to integrate Meteocons ([http://www.alessioatzeni.com/meteocons/](http://www.alessioatzeni.com/meteocons/))
    into your project as an exercise or perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by downloading the fonts from [http://www.alessioatzeni.com/meteocons/res/download/meteocons-font.zip](http://www.alessioatzeni.com/meteocons/res/download/meteocons-font.zip).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this zip file, you will find four files: `meteocons-webfont.eot`, `meteocons-webfont.svg`,
    `meteocons-webfont.ttf`, and `meteocons-webfont.woff`. These are the different
    formats required to show the Meteocons in different browsers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy these files to the `fonts/` folder of your project. You will also find
    `stylesheet.css` included with these font files. This file contains the `@fontface`
    styles for Meteocons. If you inspect the Font Awesome *Less* files, you will find
    the same kind of styles. The `@fontface` declaration is required to use the font
    in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should remember the Less Hat prebuilt mixins. Less Hat has the fontface
    mixin, `.font-face(@fontname, @fontfile, @fontweight:normal, @fontstyle:normal)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this fontface mixin, you can add the following code to your *Less* code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will compile into CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding CSS code enables you to use the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code in HTML will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using iconic fonts](img/1465OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hyperlink with Meteocon
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier, you saw how Font Awesome icons can be added by class name. To add
    this functionality to the Meteocons, you will have to write some *Less* code.
    The following diagram shows the letter for each icon of this font:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using iconic fonts](img/1465OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Meteocons font
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a class declaration into your *Less* code for each icon as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `.meteocons-sun` is your class name, and `\2a` represents
    the hexadecimal value of a similar character. 2A hexadecimal is 42 decimal, and
    the `*` (asterisk) has an ASCII value of 42\. Instead of a hexadecimal value,
    you can also use octal or decimal (for the first 128 printable characters). Sometimes,
    the `\u` of unicode is prepended, such as `\u002a` in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do add these class declarations, your list will look like the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you have the basics for an iconic font, and you can extend your code.
    For instance, add the following code to set the size of the font:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the download section of this chapter, you will find the complete *Less* code
    to use Meteocons the same way as Font Awesome in `less/meteocons`. As you see,
    most of Font Awesome's code can be reused. Please visit `http://localhost/indexmeteo.html`
    to find out how to use this code.
  prefs: []
  type: TYPE_NORMAL
- en: Retina.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: High-density devices have more pixels per inch or centimeter than normal displays.
    Apple introduced the term **Retina** for its double-density displays. If you zoom
    in on an image (or scale it up), it will become blurred. This is the problem web
    designers have to solve when designing for high-density devices. You may be wondering
    what this has to do with *Less*. CSS, in combination with media queries (you will
    learn more about media queries in [Chapter 5](ch05.html "Chapter 5. Integrate
    Less in Your Own Projects"), *Integrate Less in Your Own Projects*), can prevent
    your images from becoming blurred on high-density displays.
  prefs: []
  type: TYPE_NORMAL
- en: To understand what happens, you have to realize that CSS pixels are, in fact,
    device independent. CSS pixels are used to give physical dimensions to the elements
    in the browser. On normal screens, a CSS pixel matches a device pixel. High-density
    displays have more device pixels than a CSS pixel; in the case of Retina, they
    have four times the number of pixels. More and smaller pixels make it impossible
    to see the individual pixels with the human eye and should give a better user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Retina displays an image of 300 CSS pixels width that requires 600 device pixels
    in order to keep the same physical size. Now you can prevent your images from
    blurring by using a bitmap with a higher resolution (CSS pixels) and scale it
    down with HTML or CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a normal display, your HTML will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'While on a Retina display, you will show the same image with the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Currently, there is a convention of adding `@2x` to the names of high-density
    images, such as `example@2x.png`.
  prefs: []
  type: TYPE_NORMAL
- en: You should now understand that you can use *Less* to write efficient code to
    give these different images the right CSS dimensions. The `retina.js` library
    ([https://github.com/imulus/retinajs](https://github.com/imulus/retinajs)) helps
    you handle high-density images and displays; it combines JavaScript and *Less*
    to write your Retina code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For normal images, you have to use the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will be handled by JavaScript, but you will have to use *Less*
    to set your background images. Here, background refers not only to the page background,
    but to every background set by CSS. Most modern designs use background images
    for layout; also, accessibility rules require decorative images set by CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `retina.js`, you can write the following code in *Less*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will compile into CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Also, the other libraries of prebuilt mixins mentioned earlier will have mixins
    to set Retina backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to keep your code clean and test it using
    style guides. You have learned how to use libraries with prebuilt mixins, which
    help you develop your *Less* code faster and more securely. Last but not least,
    you have learned how to use *Less* and iconic fonts and make your projects Retina-ready.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to integrate *Less* in your projects
    or start a project from scratch with *Less*. You will also learn how to organize
    your project files and reuse your old CSS code. And finally, you will build a
    responsive grid with media queries.
  prefs: []
  type: TYPE_NORMAL
