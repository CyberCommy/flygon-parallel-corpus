- en: Chapter 7. Filtering Requests with Middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, middleware will be discussed in detail and examples from the
    accommodation software will be provided. Middleware is a great mechanism to help
    separate a software application into separate layers. To illustrate this principle,
    middleware provides layers of protection around the innermost part of the application,
    which could be thought of as the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: In Laravel 4, middleware was known as filters. These filters were used in routing
    to perform actions that came before the controller like authentication, where
    the user would be filtered based on certain criteria. Also, the filters could
    come after the controller.
  prefs: []
  type: TYPE_NORMAL
- en: In Laravel 5, the concept of middleware, which was already present but not prominent
    in Laravel 4, is now brought into the foreground into the actual request workflow
    and can be used in various ways. Think of it as a Russian doll, where each doll
    represents a layer in the application—having the correct credentials will allow
    us to enter deeper into the application.
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP kernel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The file located at `app/Http/Kernel.php` is a file that manages the configuration
    of the kernel of the program. The basic structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `$middleware` array is a list of middleware classes and their namespace,
    and it is executed at every request. The `$routeMiddleware` array is a key and
    value array that is created as list of *aliases* that can be used together with
    routes to filter requests.
  prefs: []
  type: TYPE_NORMAL
- en: The basic middleware structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The routing middleware classes implement the `Middleware` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In any class that implements this base class, there must be a `handle` method
    that accepts the `$request` as well as a `Closure`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic structure of a middleware is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `CheckForMaintenanceMode` middleware does exactly as its name suggests:
    the `handle` method checks if the application is in application mode. The `isDownForMaintenance`
    method of the app is called and if it returns `true`, then a 503 HTTP exception
    will be returned and execution of the method will stop. Otherwise, the `$next`
    closure with the `$request` parameter is returned to the calling class.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Middleware such as `CheckForMaintenanceMode` could be removed from the `$middleware`
    array and moved into the `$routeMiddleware` array to not require it to be executed
    upon every request, but only when desired from a certain route.
  prefs: []
  type: TYPE_NORMAL
- en: Route middleware unravelled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two route-based middleware classes are present in Laravel 5 in `app/Http/Middleware/`.
    One of these classes is named `Authenticate`. It provides basic authentication
    and uses a contract.
  prefs: []
  type: TYPE_NORMAL
- en: 'In reference to routes, the middleware sits between the route and the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Route middleware unravelled](graphics/B04559_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Default middleware – the Authenticate class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A class called `Authenticate.php` has the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first thing to note is `Illuminate\Contracts\Auth\Guard`, which handles
    the logic to check whether or not a user is logged in. It is injected into the
    constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Contracts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that the concept of a contract is a new way of using an interface to
    provide a nonconcrete class to separate the actual class from the calling class.
    This provides a nice layer of separation and allows the underlying class to be
    easily switched out if needed, while maintaining the parameters and return types
    of the methods.
  prefs: []
  type: TYPE_NORMAL
- en: Handle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `handle` class is where the real work is done. The `$request` object is
    passed in along with the `$next` closure. What happens next is really simple yet
    important. The code asks if the current user is a guest, that is, not authenticated
    or logged in. If the user is not logged in, then the method will not allow the
    user to access the next step. If the request has arrived via Ajax, then a 401
    message is returned to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: If the request does not arrive via an Ajax request, the code assumes that the
    request has arrived via a standard page request and the user is directed to the
    auth/login page which allows the user to log in to the application. Otherwise,
    if the user is authenticated (`guest()` is not equal to `true`), then the `$next`
    closure is returned to the software application with the `$request` object as
    its parameter. To summarize, the execution of the application is stopped only
    if the user is not authenticated; otherwise, the execution continues.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing to remember is that, in this case, the `$request` object
    is returned to the software.
  prefs: []
  type: TYPE_NORMAL
- en: Custom middleware – Log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple to create custom middleware using Artisan. The `artisan` command
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `LogMiddleware` class needs to be added to the `$middleware` array in the
    `Http/Kernel.php` file as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `LogMiddleware` class is the name given to a middleware class that will
    be used to log users that use a website. The class produced has only one method,
    namely `handle`. As the authentication middleware, it accepts the `$request` object
    as well as the `$next` closure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we want to simply log both the user ID and the date and time
    at which some action was performed. The `$request` object is assigned to the `$response`
    object and the `$response` object is returned instead of `$next`. The code is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Log model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create the `Log` model using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `Log` model to use a table named `log` instead of `logs` by using the
    protected `$table` attribute. Next, set the model to not use a timestamp by setting
    the public `$timestamps` attribute to `false`. Finally, allow both the `user_id`
    and `created_at` fields to be populated at the same time by setting the protected
    `$fillable` attribute to an array of the fields that are desired to be filled,
    allowing use of the `create` function. The class will look like this after the
    preceding modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also create the `Log` model as a polymorphic model, allowing it to
    be used in more than one context by added the following code to the `Log` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information regarding this is available in the Laravel documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Log model migration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is necessary to adjust the `database/migrations/[date_time]_create_logs_table.php`
    migration to use the `log` table and not `logs`. It is also necessary to create
    two fields: `user_id`, an unsigned small integer, and `created_at`, a `datetime`
    field that will mimic the Laravel timestamp format. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Terminable middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to performing operations after the request arrives or after the
    response arrives, it is possible to perform actions even after the response is
    sent to the browser. The class adds the `terminate` method and implements `TerminableMiddleware`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Logging as terminable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We could easily perform the logging of the user inside the `terminate` function
    as follows, since the logging could be the last action to occur in the lifecycle.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The code has been placed into the `terminate` method, so it is outside the request-response
    pathway, allowing the code to remain clean.
  prefs: []
  type: TYPE_NORMAL
- en: Using middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want it that a user must be authenticated before being able to perform
    a certain operation, we can pass an array as the second parameter with `middleware`
    as the key to force the route to call the `auth` middleware on the `search` method
    of `AccommodationsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the user will be redirected to the login page if not authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: Route groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Routes may be grouped together to share the same middleware. For example, if
    we want to protect all of the routes in our application, we can create a route
    group and just pass in the key-value pair `middleware` and `auth`. The code is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This protects every method of every route that lies inside the route group.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple middleware in route groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If even more protection is desired against nonauthenticated users, we could
    create a whitelist to only allow users within a certain range of IP addresses
    to access the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will create the middleware that is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `WhitelistMiddleware` class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, a private `$whitelist` array was created with a list of the IP addresses
    that are set up within a company. Then, the remote port of the request is compared
    to the values in the array, and it is allowed to continue by returning the `$next`
    closure. Otherwise, an unauthorized response is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the `whitelist` middleware needs to be combined with the `auth` middleware.
    To use the `whitelist` middleware within the route group, an alias for the middleware
    needs to be created and inserted into the `app/Http/Kernel.php` file in the `$routeMiddleware`
    array. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, to add this to the list of middlewares for this route group, it is necessary
    to substitute the string `auth` with an array, having both `auth` and `whitelist`
    as its contents. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, even if the user is logged in, it will not be possible to access the protected
    content unless the IP address is in the whitelist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if only some of the routes are desired to be whitelisted, routes group
    may be nested as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will require both authentication (`auth`) and whitelisting for the `RoomsController`,
    while all of the other controllers inside the route group will require only authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware exclusion and inclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If it is desired to perform authentication or whitelisting only for certain
    routes, then the constructor method should be added to the controller and the
    `middleware` method of the class could be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter is the key of the `$routeMiddleware` array in the `Kernel.php`
    file. The second parameter is a key and value array. The options are either `except`
    or `only`. The `except` option is obviously the exclusion, while the `only` option
    is the inclusion. In the preceding example, the `auth` middleware will be applied
    to all methods except for the `index` or `show` methods, which are the two read
    methods (they do not modify the data). Instead, if the `log` middleware should
    be applied on `index` and `show`, then the following constructor would be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, both approaches are applied as follows and the `whitelist` middleware
    is added in as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This code would require authentication and a whitelisted IP address for all
    non-read operations, while it logs any requests to `index` and `show`.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middleware can skillfully filter requests and secure the application or RESTful
    API from unwanted requests. It can also perform logging and redirect any requests
    that fall within a certain criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware can also provide added functionality to the existing application.
    For example, Laravel provides the `EncryptCookies` and `AddQueuedCookiesToResponse`
    middleware to deal with cookies, while `StartSession` and `ShareErrorsFromSession`
    deal with sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code inside `AddQueuedCookiesToResponse` does not filter the request, but
    rather adds to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at middleware, which is a useful mechanism for any
    functionality that should either be executed for each and every request or attached
    to certain routes. It is a flexible mechanism and allows the programmer to *code
    to an interface*, since any middleware class that implements the `Middleware`
    interface must include the `handle` method. Following good development principles
    is not only encouraged, but rather required through this type of structure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the Eloquent ORM.
  prefs: []
  type: TYPE_NORMAL
