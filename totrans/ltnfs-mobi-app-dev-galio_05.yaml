- en: '*Chapter 5*: Why Galio?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created our first screen. After creating it with
    plain React Native code, we went ahead and imported some Galio components, which
    helped us style and create the layout in a much easier and simpler manner.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is going to be a better introduction to Galio. We'll learn how
    to use it and why most programmers look for a **user interface** (**UI**) solution
    such as Galio to solve most of their developing processes. As we saw in the last
    chapter, just using the core `react-native` components means the code gets really
    large and hard to maintain. Galio components come packed with many different props
    that make life a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also learn about the benefits of using an open source library, how that
    creates a community of people willing to help each other, and how you can step
    in and add value to the library as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: This conversation is going to open a lot of new doors that you never thought
    even existed before. It will create some sort of new mentality, expanding your
    vision on what a developer really is and how they communicate.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Beautiful mobile app development with Galio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Galio in your apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering the benefits of Galio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to understand the reasons why
    people choose Galio to quickly start working on their projects. You'll understand
    how to install it and use it in your apps and what role certain components have
    in your app. Learning about certain components sure is helpful, but don't shy
    away—all programmers use Google to discover solutions to their problems, and I
    highly encourage you to do the same if you feel some things require further explanation
    or have changed during the course of time.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can check out this chapter's code by going to GitHub at [https://github.com/PacktPublishing/Lightning-Fast-Mobile-App-Development-with-Galio](https://github.com/PacktPublishing/Lightning-Fast-Mobile-App-Development-with-Galio).
    You'll find a folder called `Chapter 05` that contains all the code we've written
    inside this chapter. In order to use that project, please follow the instructions
    found in the `README.md` file.
  prefs: []
  type: TYPE_NORMAL
- en: Beautiful mobile app development with Galio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have so many examples of mobile applications that don't look really good.
    Multiple different social media apps are being created by random people thinking
    that they'll hit the next jackpot, just like Facebook did. The most usual problem
    I've identified with most of these apps, on top of the bugs you're always going
    to find inside a beginner developer's app, is the design.
  prefs: []
  type: TYPE_NORMAL
- en: The layout is quickly created and they do not pay any attention to how the **user
    experience** (**UX**) might end up because of their design. They think that just
    because they have a nice idea, they don't really need to pay attention to anything
    else.
  prefs: []
  type: TYPE_NORMAL
- en: I disagree. I honestly believe that you could sell anything as long as the design
    is sleek and the UX is top-notch. The reason why I believe this is mostly that
    I usually use the *1-minute rule*. This is something personal that I've created
    for myself. Basically, once I install an app, I only take somewhere around a minute
    to try to see what's going on with that specific app.
  prefs: []
  type: TYPE_NORMAL
- en: Why a minute? Well, we're using mobile apps because we want things to be fast
    and easy to use. We're always looking for a mobile app alternative to our web-related
    activities just because we want to have easier and faster access. We want to be
    able to check some information and maybe do some activities. If I can't figure
    out how to use your application in 1 minute, then I'll uninstall it.
  prefs: []
  type: TYPE_NORMAL
- en: What does that say about the way we should build our apps? We should have the
    user in mind at all times and only use enough information for them to not have
    to think about how to use our app.
  prefs: []
  type: TYPE_NORMAL
- en: Galio comes in handy because it uses the same process—easy, fast, and straightforward.
    You don't have to think too much about how wide a button should be or what the
    pixel size should be in your app. It comes pre-packed with all the tools you need
    to design and produce your best idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by seeing how buttons look and the many different ways of styling
    we have for them. We''ll be using buttons in almost any situation inside our app,
    so I figured that this would be a great start. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Buttons displayed inside an app'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.1_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Buttons displayed inside an app
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have lots of different ways of displaying a button, from
    bright colors and shadows to shadowless and plain. You could have squares, or
    even—straight up—just a circle and an icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how easily this can be implemented in our app. Here''s
    the code for the buttons shown in *Figure 5.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Code for the buttons in Figure 5.1'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.2_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Code for the buttons in Figure 5.1
  prefs: []
  type: TYPE_NORMAL
- en: So, as far as we can see, we have props for everything. Some require more or
    less work from us, but at the same time, the ease of just editing everything from
    inside the component is worth it every time. Just because we wanted to capitalize
    a button and have it capitalized all the time, we can use the `capitalize` prop.
    Or maybe we want the text to always be uppercase; that's fine—we've got a prop
    for that as well. It really makes the developing process incredibly easy and accessible
    to anybody.
  prefs: []
  type: TYPE_NORMAL
- en: We've discussed how an app should look and feel good for our users. But that
    should be transposed into our development process as well. That's why I honestly
    believe that clear and beautiful code will almost always equal a beautiful product.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at another cool component from the Galio package—the
    `Accordion`. You never know when you need a beautiful-looking accordion to create
    more space for your content. You can see a representation of this here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Accordion component as displayed on your screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.3_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Accordion component as displayed on your screen
  prefs: []
  type: TYPE_NORMAL
- en: 'This component is incredibly easy to use. It needs a `View` (or `Block`) component
    with a specified height and an array of objects defining the content inside the
    component. Here''s the code relating to this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This should basically be pretty easy for anyone to configure and use when needed.
    The objects inside the array must have certain keys so that our component can
    identify and understand where to place that content. An object might look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It doesn't look that hard, right? If we want to use an icon, as we saw when
    we created our first item (in [*Chapter 1*](B17074_01_epub_Final_SB.xhtml#_idTextAnchor015)*,
    Introduction to React Native and Galio,*), all we have to do is add the `icon`
    key inside our object, which is going to contain the `name`, `family`, and `size`
    values of the specified icon we want to use.
  prefs: []
  type: TYPE_NORMAL
- en: This is basically how all of Galio's components are built. They are straightforward
    and good-looking, ready to be used to create a new app in seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should check out another component before moving forward, so let''s see
    how easy it is to customize and use a checkbox with Galio. Have a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Checkbox component as displayed on your screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.4_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Checkbox component as displayed on your screen
  prefs: []
  type: TYPE_NORMAL
- en: 'This looks complicated if it is to be created with the core React Native components,
    but we''re in luck because Galio makes it as easy as just writing a single line,
    as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we can set the color, the direction, and even the icon, all inside
    our component. They look beautiful to both write and display as they are without
    any modification. This makes us proud of our library as we really take pride in
    the way it looks.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at how easy it is to create a basic layout with the `Block`
    component. We'll be using this component for layout design only, and we'll color
    every square so that we have a better understanding of what each element is exactly
    displaying.
  prefs: []
  type: TYPE_NORMAL
- en: Using Galio in your apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's see Galio in action. One of the greatest features of Galio—besides
    the way it looks or the ease of writing code—is our `Block` component, which is
    basically a `View` component but with superpowers. Why do we say superpowers?
    We could easily use this component to both create our layout and easily style
    everything just by using props.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's put this into action and see how easy it is to create a basic layout
    with the `Block` component. I'll take you step by step and show you the most usual
    ways of using `Block` while also demonstrating the most common ways of arranging
    the layout. You can find the project in our GitHub repository or you can follow
    along by coding with me.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll start by creating a new Expo project. After that, I''ll install Galio
    via the command line by writing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have everything installed, I'll skip the whole process of organizing
    our files as we're using this for demonstration purposes. So, we're going to be
    writing our code directly into our `App.js` file, in our entry point—the `App`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to import our `Block` component via the `import` function under
    our other imports, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I'll delete everything inside the `App` function and I'll start by creating
    my first `Block` component. This will be used to keep all the elements inside
    because, as we know, we can't return more than one component in a function, so
    in conclusion, that one component will have to encapsulate the other components
    inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use the `flex` prop on it, which will make our `Block` have the property
    of `flex: 1` so that it will stretch both horizontally and vertically, covering
    the entire screen.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we're done with this, let's use the `style` prop. As we said, each `Block`
    element will have a `backgroundColor` property so that we can more easily identify
    which one is which. Inside our `style` prop, we'll write `styles.container`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that we have a `styles` object below it that has all the styles we
    can use via the `StyleSheet.create` function. We''ll delete everything inside
    the container there, and we''re only going to write `backgroundColor: ''#F94144''`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's save, and now, our screen should be some sort of red. Fun fact, this color
    is called **Red Salsa**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that everything is working, let's go ahead and start creating our layout
    of boxes and see how easy it is to arrange elements inside our app with the `Block`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, you should also remove unnecessary imports such as `StatusBar`,
    `Text`, and `View`.
  prefs: []
  type: TYPE_NORMAL
- en: We'll now start by creating three `Blocks` inside our main `Block` component.
    As we know, all the components inside React Native are arranged in a column from
    top to bottom, so we're basically going to create three rows of `Blocks`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of these rows will have the `style` prop on them, and in order from top
    to bottom, the styles will be called `styles.row1`, `styles.row2`, and `styles.row3`.
    Now, we''ll go inside our `styles` object and create `row1`, `row2`, and `row3`
    styles. Each of them will have only one property and that is `backgroundColor`,
    with values in order from `row1` to `row3`, like this: `#F3722C`, `#90BE6D`, `#277DA1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we save, we''ll see nothing. Well, that''s because our `Block` element
    does not have a size set, so it doesn''t know how much space it needs to occupy.
    Remember what we did with the last one? We used `flex`, so let''s use the `flex`
    prop and all three of our components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The code we''ve used to create our three rows'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.5_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – The code we've used to create our three rows
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit **Save**, and we suddenly see three colors from top to bottom: orange,
    green, and blue; more exactly: Orange Red, Pistachio, and CG Blue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because of the `flex: 1` property that gets applied when we use the `flex`
    prop, each of them gets equal space inside the main `Block` component. Now, the
    cool thing regarding this `flex` property is that we can use it to set the amount
    of space we need.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead, and for the first row, we'll set it to `flex={2}`; for the second
    one, we'll leave it as it is; and for the third one, we'll set it to `flex={3}`.
    Now, we can see that each box has a different amount of space allocated. This
    is all thanks to the fact that React Native uses a **flex system** to create the
    layout; we're just profiting from how easily accessible it is to use it with Galio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how it does the math when we set all these numbers to the `flex`
    property. Because we''ve left the second one as it was, that will be transformed
    when rendered to `flex={1}`. We''ll do the math between the three flexes and end
    up with the following: `2+1+3 = 5`. So, in a nutshell, we can say *the first row
    is two parts of five*, *the second one is one part*, and *the third one is three
    parts*. The numbers used here are specific to our app, but you might have different
    numbers. The main idea is to understand the fact that those numbers are dividing
    the space they have at their disposal—a bigger number gives us more space while
    a smaller number gives us less.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's use the first row to put another set of `Block` components and use
    more props. Yes—we do have a lot of props to go along with this.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by typing out one component for now and create a style called `row1el`.
    Apply that style to our new `Block` and use the `#577590` color. Well, yeah—nothing
    shows up, but let's use two more props to make it show up. We'll write `width={50}`
    and `height={50}`. This will set the width and height of our `Block` component
    in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s center this element by using the `middle` prop on the parent component.
    The parent component is our first row. As you can see now, our dark blue `block`
    element is in the middle of our first row:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Our code with the newest elements inside of it'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.6_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Our code with the newest elements inside of it
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the second row, let''s go inside our `styles.row2` object and add
    padding. We''ll add `padding: 30`, and we can observe how our second row got suddenly
    taller. That''s because our whole layout (the three rows) is built with flex,
    which is not setting an absolute size in pixels; the component now wants more
    space.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our second row, we''ll create another `Block` with props of `flex`,
    `middle`, and `style={styles.row2gal}`. Now, for our `row2gal`, we''ll have `backgroundColor:
    ''#F9844A''`. Let''s add three `Block` components inside of this one. Each of
    them will have the following props: `width={30}`, `height={30}`, and `style`.
    The styles will be named in order, from top to bottom, `row2p1`, `row2p2`, and
    `row2p3`. Following the exact order of our styles, we''ll have for each of them
    the `backgroundColor` property set to `''#4D908E''`, `''#43AA8B''`, and `''#F94144''`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we hit **Save**, we'll see that our `Blocks` are positioned in a column.
    Let's solve this by using in the parent component the `row` prop. Now, we've got
    them in a row—that's pretty cool, right? Let's use the `middle` prop as well,
    and `space="evenly"`. Save and see how it looks. Our elements are now centered
    and they have even space between them and the left and right margins of the parent
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go to the second `Block` and use the `bottom` prop. This will make
    the second element go below the first and third ones. Kind of funny—it looks like
    a face, right? See if you agree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Our code after we''ve filled the second row'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.7_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Our code after we've filled the second row
  prefs: []
  type: TYPE_NORMAL
- en: You can see how easy it is to create a basic layout by only using `Block`. Now,
    before moving forward, you should take your time, and instead of `bottom` maybe
    use the `top` prop on another component and see how it works. Or, instead of `space="evenly"`,
    you could use `space="between"` or `space="around"`.
  prefs: []
  type: TYPE_NORMAL
- en: This becomes fun really fast as we actually have full creative control by using
    those components. The best part of this is you can create a full screen made out
    of `Blocks` and then just populate every `Block` element with the component that
    you want to have. Honestly, these features alone would be enough for me to start
    loving Galio. Good thing we have even more features.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've used some Galio features in our app, let's move forward and look
    at what type of benefits Galio offers.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the benefits of Galio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've been through several of the benefits of using Galio—such as the
    ease of writing code, how beautiful it looks, and how cool it is to create a layout
    with it—we're ready to see other benefits of using it, and I feel the best place
    we should start our journey is GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the Galio icon here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Screenshot taken from Galio''s landing page'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_5.8_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Screenshot taken from Galio's landing page
  prefs: []
  type: TYPE_NORMAL
- en: As I've said, we're lucky to have this great community as there's always someone
    reaching out to help you. You can also help out other people, which we always
    encourage. I feel that Galio's community might be best defined by the word *collective*.
    In the music industry, this word is mostly used to define a group of people with
    similar interests that just work together and help each other because they know
    that more people means faster and easier development for everybody.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at some ways you could help and be part of this community.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we have the Discord server, which is where most of our developers
    hang out and discuss random things but also bugs and how to solve specific questions.
    This place is basically a big chat room where everybody is having fun.
  prefs: []
  type: TYPE_NORMAL
- en: Anybody can join it and ask questions, or even report a bug or something that
    is not working. Maybe you feel the design could be improved and you want to pitch
    a whole new look to Galio and its community. You can do that there with no worries
    of someone laughing at you or not taking you seriously.
  prefs: []
  type: TYPE_NORMAL
- en: On top of the Discord server, we have the GitHub repository and the website.
    The GitHub repository is where we keep everything that's code-related. This is
    where we maintain the code, answer issues, create new development plans for the
    future, create hotfixes for certain products, and work with **pull requests**
    (**PRs**).
  prefs: []
  type: TYPE_NORMAL
- en: A PR refers to when someone wants to help out with a library. So, they start
    by creating a **fork**, which is the act of cloning someone's repository. Then,
    they make their own modifications, and then the new copy of the repository is
    submitted as a **PR**. that will be then verified by an admin and accepted or
    rejected depending on if the code respects the rules and if it's part of the development
    plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our website is mostly where we want to showcase people''s apps and news about
    Galio. It''s where we present Galio to the world but it''s also where we keep
    a really important part of the whole library: the documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: The documentation is your go-to place anytime you want to learn more information
    about a specific component or how to use a feature of Galio, such as, for example…
    the **GalioTheme** feature.
  prefs: []
  type: TYPE_NORMAL
- en: Everything related to Galio—such as the colors, sizes, and layout rules—is stored
    in our default theme. This can be found in the `theme` folder inside our library.
    Every component inherits its styling rules from that file. The coolest thing is
    that you can actually rewrite our theme file with only the things you want to
    modify by using our theme components.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say you want a different color code for `primary`. You can
    override our primary color with your own color and use it with Galio as though
    it's always been there.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the GalioTheme feature, you''d have to import `theme`, `withGalio`,
    and `GalioProvider` from our library. Let''s take a small example here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a `customTheme` object that will contain two keys: `SIZES`
    and `COLORS`. If you only want to modify the colors, you can use just that specific
    key. Then, you need to encapsulate your component with our **higher-order component**
    (**HoC**), called `GalioProvider`. We''ll also need to pass our new `customTheme`
    object to Galio via the `theme` prop.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: An HoC is an advanced React feature that can be more easily defined as a function
    that returns a component and improves that component in some way. Let's say you're
    Tony Stark, and the HoC is the Iron Man suit. The suit is made of iron gloves,
    boots, armor, and helmet, and Tony with iron boots can fly.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the `customTheme` constants will overwrite the default Galio theme constants.
  prefs: []
  type: TYPE_NORMAL
- en: But wait—maybe you don't want to change our theme but you want to use our constants
    inside your styling. Using our design system might help you design your layout
    faster, and we're always using Galio's constants inside different products we're
    creating for our clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exporting a React component using the `withGalio` function enables your component
    to consume Galio''s React Context and pass down a theme in your component as a
    prop or as an argument for the `styles` object. Let''s take a look at how this
    is done—I''m sure you''ll understand it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Because we're using the `withGalio` function to export our component, Galio
    will pass down to the object we've selected (in this case, it's `styles`) all
    the constant theme variables we have inside our library. So, that's why we're
    able to use `theme` as an argument inside our `styles` object and change the `backgroundColor`
    property to that Facebook color we have inside our library.
  prefs: []
  type: TYPE_NORMAL
- en: You'll find a table with all the information regarding our constants on our
    documentation website, which is at [https://galio.io/docs](https://galio.io/docs).
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Galio is fully packed with lots of cool features that will help
    us develop any mobile app extremely fast and, in the end, make it really good-looking.
    So, why not give it a try? We'll code all of our projects with Galio from now
    on. This will be a mandatory import at the beginning of each app we'll do from
    now on in this book. We'll use more of Galio's components than React Native's
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: Given this, we'll learn more and more about how to use Galio and how to design
    great apps until we can start coding our own ideas. Maybe one of us will actually
    create a great app with a lot of value for society—something that will change
    the world.
  prefs: []
  type: TYPE_NORMAL
- en: It's nice to dream about how many things we'll be able to do once we acquire
    more and more knowledge. This daydreaming and constant focus on your objective
    is going to prove one of the greatest weapons in learning how to code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've been through multiple examples of why Galio is such a
    great library. By the end of it, you must've figured out that Galio really deserves
    to be one of the libraries under your belt—one library to rule them all. This
    will act like your main package with which you'll create incredibly stunning apps,
    both visually for our users and our programming buddies who want to help us out
    with the code.
  prefs: []
  type: TYPE_NORMAL
- en: Don't be afraid of looking into Galio's core code. You might learn a lot of
    things from just experiencing and understanding Galio's code. You might even be
    able to create your own library.
  prefs: []
  type: TYPE_NORMAL
- en: So, we've discovered that Galio is really cool because the code is easy to use.
    We just have a few props that can change the whole world in terms of speed of
    coding and easy access to specific parameters. We've also seen how great Galio
    looks out of the box. I mean… this library is gorgeous. Sometimes, I wouldn't
    even edit the styling; I'd just use Galio styles because of how great they look.
  prefs: []
  type: TYPE_NORMAL
- en: We've also seen how easy it is to create a layout with the `Block` component
    and how placing objects on the screen is a lot easier than we thought as long
    as we know just a few props that go along with the `Block` component.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we discussed what a great community Galio has and how we can take
    part in it. We haven't gone too deep into GitHub as this is out of the scope of
    this book, but we've definitely learned a lot about how that community works and
    how we can take part in it.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this, we discussed some more advanced features of Galio—or, to
    be more correct, features that use more advanced features of React because they're
    really easy to use if we want to use them from Galio.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we can say that Galio creates an easy access route for everybody
    into the mobile developing world, and I think it's safe to say we're all grateful
    for its existence.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is going to cover the basics of the mobile UI. We'll figure
    out how to build a clean-looking UI for our apps while learning some guidelines
    and rules on how to provide our users with the best UX we can create.
  prefs: []
  type: TYPE_NORMAL
