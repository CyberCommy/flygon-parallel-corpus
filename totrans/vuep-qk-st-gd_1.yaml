- en: Introducing Static Site Generators and VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the early days of web development, all web pages were based on HTML and CSS.
    Everything was static and concepts such as content management systems were unheard
    of. Dynamic database-driven applications too came in rather late.
  prefs: []
  type: TYPE_NORMAL
- en: However, with the advent of content management systems, such as WordPress and
    Drupal, web development began to move at a faster pace. Static sites and pages
    were replaced by dynamic query-driven pages that fetched data from, and wrote
    data to, a database in the backend. This, of course, allowed for greater control
    and better structuring of content.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages associated with such dynamic database-driven content management
    systems are plenty. For a start, you can present and store your content the way
    you like! You can have multiple user accounts, each with settings of its own,
    customize both the backend and frontend, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, for the end user, a database-driven dynamic website management
    program can provide easier access and a user-friendly interface.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, what about static site generators? Of late, many new static
    site generators are rising in popularity and gaining momentum. Do they serve any
    specific purpose? More importantly, what exactly do we mean when we say *static
    site generator*?
  prefs: []
  type: TYPE_NORMAL
- en: In the course of this book, we will be learning about VuePress, an exciting
    and useful tool that can help you to generate amazingly fast and easy-to-operate
    web pages within minutes. We will explore its various features, abilities, limitations,
    and dependencies, as well as ways in which we can get the most out of it, such
    as by means of custom themes, extensions, configuration, and more!
  prefs: []
  type: TYPE_NORMAL
- en: VuePress can still be argued to be relatively new to the world of static site
    generators, though it has been around for a short while now. For anyone familiar
    with **JavaScript** (**JS**), Vue.js will definitely not be an unheard-of name.
    It is a JS framework that is gaining a loyal following with each passing day.
    Here is a brief overview of Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the topics that we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Vue.js?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are static site generators?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advantages and disadvantages of static site generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some major static site generators and how they compare to VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is VuePress?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why should you use VuePress?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What exactly is Vue.js?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js is a JS framework that lets you build user interfaces. Unlike many other
    gigantic JS frameworks, Vue can be used to create content-specific single page
    web apps. It can be integrated with other libraries and projects to suit your
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Discussing Vue.js in detail is obviously beyond the scope of this book. For
    what it is worth, Vue.js is a JS framework that focuses more on the *view* side
    of things—it is progressive, open source, and is backed by a loyal community.
    It can be adapted for rendering your web pages and data exactly the way you wish
    to!
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Vue.js is not a minnow in the world of JS frameworks. VuePress
    thus has a very solid foundation. But even if you are not familiar with VuePress,
    you will be able to master it as you progress through this book.
  prefs: []
  type: TYPE_NORMAL
- en: However, for folks who are still wondering why something like VuePress might
    be worth the trouble, and what the deal associated with static site generators
    such as VuePress is all about, we should first cover some basic information related
    to such site generators.
  prefs: []
  type: TYPE_NORMAL
- en: What are static site generators?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, before going any further, let's first understand in brief the concept of
    static site generators. When we say *VuePress is a static site generator*, what
    do we mean?
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, a static site generator does what its name suggests – it generates
    a set of web pages that are static in nature. Thus, once deployed, a static site
    generator can generate web pages on the fly and with great speed.
  prefs: []
  type: TYPE_NORMAL
- en: Most static site generators work by means of a very simplified file structure.
    You get a set of HTML files, coupled with some CSS stylesheets for better presentation
    of content, and that is all. Beyond that, we just have a set of JS files to go
    along with it. There are no complicated plugins, databases, or additional content
    management options.
  prefs: []
  type: TYPE_NORMAL
- en: To better understand the mode of operation of static site generators such as
    VuePress, we can compare them to a database-driven dynamic content management
    system, say, WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing static site generators to dynamic ones – differences in methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How exactly does WordPress, or any other dynamic database-based CMS, tend to
    work?
  prefs: []
  type: TYPE_NORMAL
- en: When the user visits a given WordPress website, a request is sent by the browser
    to the server that the site is hosted on. Thereafter, WordPress analyzes the request,
    and on the basis of that, it prepares the data. This can mean that the given post
    is loaded along with its media elements, comments are displayed, metadata for
    the post is queried, and so on. To fetch such info, WordPress needs to query and
    pull data from its database server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, effectively, we are following a three-step approach here:'
  prefs: []
  type: TYPE_NORMAL
- en: The user or client makes a request to the WordPress server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WordPress queries and pulls the required data from its database to complete
    the request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The requested information is presented to the user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, what if we were to remove the dependency on the database? What if we were
    to bypass all unwanted code and methods and simply churn out pages in their static
    form? Of course, we probably will not be able to showcase complicated operations,
    such as custom plugin functions, eCommerce integration, and so on. But we will
    entirely overcome the second step in the previous example, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user makes a request to the server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CMS presents the static page to the user as per the request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By doing so, we are, in a way, speeding up the entire website's performance.
    Furthermore, we are also reducing our server load as there are no repeated queries
    to or from the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is the primary difference between a dynamic content management system and
    a static site generator. While proponents of either side can argue for or against
    the other, the basic difference lies in the manner of working.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of static site generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how a tool such as VuePress can be different from one
    such as WordPress, are there any benefits to using the static site generator workflow?
    Simply put, what benefits do static site generators such as VuePress have to offer?
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, such static site generators consume far fewer resources in operation.
    You can run a blog or website built with a generator, such as VuePress, on a server
    with less memory than what you would require for a dynamic content management
    system-driven website. Furthermore, since there are no databases or custom data
    queries to deal with, the disk space and bandwidth consumption too is comparatively
    lesser.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it is common knowledge that you can even deploy and run a personal
    blog using a static site generator in just a few megabytes of space! All other
    things being constant (videos, images, and blog posts), the lack of databases
    does create a very light  atmosphere here, that is much faster to operate.
  prefs: []
  type: TYPE_NORMAL
- en: Static site generators are almost always faster than dynamic content management
    systems. In fact, a static site generator, such as VuePress, once called, can
    run as a single page application. This means there will be no repeated queries
    or calls to load pages. Everything can load instantly! As you might already be
    aware, speed and page loading times matter a lot on the internet, as people tend
    to have shorter attention spans and less patience.
  prefs: []
  type: TYPE_NORMAL
- en: Plus, since Google and other search engines often consider page load times as
    a ranking factor, static site generators are search engine friendly by default.
    You would, of course, still need to work with metadata, sitemaps, and so on, but
    the basic worry of *my site is loading slow* will be dismissed. Generally, a single
    page application such as VuePress does not even need a separate caching mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: It is a common notion that static websites tend to be more secure than dynamic
    ones. The reason is very obvious here—a static website does not have hundreds
    of lines of PHP (or any other language) code, databases, and other content that
    can possibly be hacked. You do not have to worry about outdated WordPress or Drupal
    versions here.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, there is hardly any threat of a poorly coded or evil plugin or theme
    ruining your hard work. A static site generator stores most of its data in the
    form of HTML, CSS, and occasionally JS files. Barring a brute force attack to
    crack your password, there is very little scope for poor code causing any malware
    or security threat to your data. Code injections, malicious code hidden in server-side
    files, corrupted database entries, and so on, are all things of the past here.
  prefs: []
  type: TYPE_NORMAL
- en: For advanced users, static site generators offer greater room for customization
    and personalization. Don't like a given feature? Wish to tweak something to your
    liking? The code is all yours to customize, and since there are no absolute requirements
    of having a database or plugin at your disposal, you can build your website or
    blog exactly the way you want to! This is the primary reason why many power users
    tend to prefer static site generators, especially for their personal projects
    and websites.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, it is natural that such a high level of customization may
    not be everyone's cup of tea. For folks that do not like to customize things much,
    a static site generator can appear to be daunting task. But for developers, it's
    paradise!
  prefs: []
  type: TYPE_NORMAL
- en: Well, now that we have seen the advantages, it is safe to assume that static
    site generators such as VuePress are fairly capable tools. With the added advantages
    of speed and security, you can create your websites and pages to your heart's
    liking and not have to worry about dynamic database requirements, security plugins,
    code injections, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages of static site generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everything has its good and bad aspects, and static site generators are no different.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest drawback that such site generators tend to have is the steep learning
    curve. Often, you have to tweak your work environment a bit to install site generators.
    As we will see in the coming chapters, installation generally does go smoothly,
    but you need to ensure that all dependencies and variables are fully satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: For the beginner-level users, such methodology is often too complicated to use.
    If you cannot install all the required frameworks and libraries, chances are very
    high that you may not be able to get the static site generator up and running.
  prefs: []
  type: TYPE_NORMAL
- en: While static site generators are ideal for creating blogs and basic websites,
    you cannot simply create every other website using them. For e-commerce, complicated
    database-driven content sites, and other content-aware projects, a static site
    generator is often not the best choice.
  prefs: []
  type: TYPE_NORMAL
- en: For what it is worth, most static site generators are rather lesser known when
    compared to WordPress or Drupal. This is especially true for entities such as
    VuePress. This means that migrating an existing blog or site from another CMS
    can take some time.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, migrating a VuePress blog or site to another CMS can be even
    more time-consuming. You will almost definitely need to work with some code and
    tweak a few settings before you can initiate a successful migration. But migrating
    from WordPress to, say, Drupal or vice versa is generally a breeze due to the
    easy availability of various free and premium plugins for this task.
  prefs: []
  type: TYPE_NORMAL
- en: This shows that static site generators have their own pros and cons. But for
    what these generators are meant for—blogging and creation of simple static web
    projects—they can prove to be near perfect. Furthermore, since the target audience
    here includes developers and enthusiasts who know what they are doing, and not
    end users that need a drag-and-drop solution, static site generators do not need
    to cater to everyone out there. This allows for a leaner and more concentrated
    development roadmap down the line.
  prefs: []
  type: TYPE_NORMAL
- en: But now that we have talked a good deal about static site generators, what are
    our options? Much like anything else, there is a good selection of generators
    that you can choose from. In this book, we will be focusing entirely on VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: However, we must bear in mind that VuePress is a relatively new platform and
    it is still under active development. As such, in order to do proper justice to
    VuePress, we need to at least be aware of some other static site generators too.
    This will help us better comprehend the importance and usage of VuePress, as well
    as showcase just why VuePress is special. Instead of going into extreme details
    about various static site generators, we will simply be mentioning a few of the
    most popular ones.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, while it is practically beyond the scope of this book to do a detailed
    comparison of multiple static site generators, we will still be stating how VuePress
    stands in comparison to certain other static site generators, so that developers
    or readers who are already familiar with a given static site generator (say, Jekyll)
    can better assess what to expect from VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: Some major static site generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it is time to take a look at some of the major static site generators.
  prefs: []
  type: TYPE_NORMAL
- en: We will be focusing mostly on ones that operate without an external database
    and are similar to VuePress, either in nature or in functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Jekyll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first name on our list has been around for quite a while. In fact, Jekyll
    is becoming something of a common name in the world of static site generators.
    It is a simple, easy-to-use tool that works right out of the box and serves one
    simple idea—the ability to convert your plain text files into blogs or websites
    that function as static sites.
  prefs: []
  type: TYPE_NORMAL
- en: Jekyll does not rely on databases and eliminates most of the unwanted features
    of dynamic content management systems. You can write your content in Markdown,
    Liquid, or others. Since everything is churned out in the form of a static page,
    there are considerable speed boosts too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to VuePress, Jekyll has one very distinct advantage: it is blog-aware
    and allows you to migrate your blog easily from other platforms. By blog-aware,
    we mean that categories, tags, and other blog-specific entities or metadata are
    well recognized by Jekyll. As we will learn in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating
    a Site in VuePress*, of this book, VuePress is not fully blog-aware by default,
    so you need to do some extra work to get the same results in VuePress as you would
    get out of the box in Jekyll.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, Jekyll does not rely on Vue.js and is, in fact, based predominantly
    on Ruby. For JS coders, tweaking Jekyll is sometimes a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: The Jekyll home page can be found at [https://jekyllrb.com](https://jekyllrb.com).
  prefs: []
  type: TYPE_NORMAL
- en: Hugo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hugo is yet another highly popular and fully open source static site generator.
    It comes with an Apache license and is based on Go. Thus, for coders working with
    or familiar with the Go programming language, Hugo is often the de facto choice
    in the field of static site generators.
  prefs: []
  type: TYPE_NORMAL
- en: But that is not the ultimate USP of Hugo. Unlike many other static site generators,
    Hugo can also play well with most dynamic APIs—custom content, taxonomies, menus,
    and more. In this regard, Hugo is more of a hybrid between a static site generator
    and a dynamic CMS. Furthermore, Hugo comes loaded with its own templates for SEO
    and website analytics. Also, Hugo has a wide range of custom shortcodes and a
    large collection of themes that you can choose from to get the most out of your
    website or blog.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, for someone looking for extreme simplicity and not wanting to work with
    innumerable shortcodes or APIs, Hugo might seem to be overkill. It is more of
    a compromise between a beginner-friendly CMS and a developer-friendly site generator.
    The learning curve is not very difficult either.
  prefs: []
  type: TYPE_NORMAL
- en: The Hugo home page can be found at [https://gohugo.io](https://gohugo.io).
  prefs: []
  type: TYPE_NORMAL
- en: Gatsby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And now, finally, on to some JS-based site generators!
  prefs: []
  type: TYPE_NORMAL
- en: 'Gatsby is a static site generator based on JS that uses React for its template
    engine. The obvious part? Owing to the popularity of React, Gatsby naturally has
    a good number of loyal users in its community. The mode of working here is simple:
    Gatsby can pull data from a large number of sources and then process it to produce
    static web pages that can be hosted on a platform of your choice.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, if you have data in the form of headless CMSs, databases, custom dynamic
    APIs, JSON, or even dynamic content management systems, such as WordPress or Drupal,
    you can use Gatsby to work with that data and then export it as static pages.
    In other words, Gatsby is the ideal tool if you wish to create device-aware progressive
    web applications and are working with React. Gatsby is like a JS framework that
    can be used to scale as per the needs of your project. However, in comparison
    to VuePress, Gatsby is limited in the sense that it relies on GraphQL and React.
  prefs: []
  type: TYPE_NORMAL
- en: The Gatsby home page can be found at [https://www.gatsbyjs.org](https://www.gatsbyjs.org).
  prefs: []
  type: TYPE_NORMAL
- en: Hexo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hexo is a static site generator that primarily prides itself on its ability
    to create blogs, documentation sites, and other projects wherein frequent updating
    of content is required. It has its own plugin system with which you can even use
    plugins from other projects with a similar lineage.
  prefs: []
  type: TYPE_NORMAL
- en: Hexo, too, is based on JS and is fairly close to VuePress in terms of genetics.
    However, it does not rely entirely on Vue.js for everything. In fact, the biggest
    and most obvious difference between Hexo and VuePress is that the former's theming
    architecture is string-based and not derived from Vue.
  prefs: []
  type: TYPE_NORMAL
- en: The Hexo home page can be found at [https://hexo.io](https://hexo.io).
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last entry on our list, Nuxt.js, shares a lot in common with VuePress. Much
    like VuePress, Nuxt.js is also based on JS and uses Vue.js for its templating
    engine. In fact, Nuxt.js is a very strong toolkit in its own right and can pretty
    much accomplish a good deal of what VuePress claims to do.
  prefs: []
  type: TYPE_NORMAL
- en: So, if Nuxt is the answer to our questions, what is the need for VuePress? The
    rationale is simple—Nuxt.js is primarily meant for creating applications based
    on Vue.js, but for generation of static websites and blogs, VuePress is the way
    to go! As a result, VuePress is ideal for creating content-centric websites and
    entities, such as blogs, documentation sites, and so on. Nuxt.js generally deals
    with Vue.js-based applications and not content-centric sites.
  prefs: []
  type: TYPE_NORMAL
- en: The Nuxt.js home page can be found at [https://nuxtjs.org](https://nuxtjs.org).
  prefs: []
  type: TYPE_NORMAL
- en: Well, we have now discussed some major static site generators. So, what sets
    VuePress apart?
  prefs: []
  type: TYPE_NORMAL
- en: Why should you use VuePress?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on our brief discussion on other static site generators, it is obvious
    that VuePress can prove useful in cases where other static site generators may
    not suffice. For example, consider the following cases.
  prefs: []
  type: TYPE_NORMAL
- en: VuePress is a good pick if you are working with JS. More and more developers
    are nowadays turning toward JS as it is highly versatile, extendable, and can
    accomplish big projects with ease. Furthermore, if you are not keen on relying
    on React or AngularJS as the default framework, Vue.js is a natural choice in
    terms of prowess and features.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not need to create application-only projects, but are in need of something
    that can be used to build content-centric websites, VuePress is a worthy option.
  prefs: []
  type: TYPE_NORMAL
- en: Since the theme engine of VuePress is based on Vue itself, it can prove to be
    a good learning tool if you are just getting started with the Vue.js JS framework.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, so at this stage, we have learned what VuePress is, what a static site
    generator can and should do, and why should we use it. Now is the perfect time
    to prepare ourselves for what lies ahead—VuePress development, customization,
    deployment, and a lot more!
  prefs: []
  type: TYPE_NORMAL
- en: A primer to getting started with VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the coming chapters, we will be discussing concepts related to VuePress in
    depth. First, we will start with installation, and then move on to basic customization,
    tweaking, starting a blog or site, custom themes, and more.
  prefs: []
  type: TYPE_NORMAL
- en: But as you can see, installation is obviously the first step. VuePress does
    not have a gigantic pool of requirements in terms of disk space, bandwidth, or
    memory. In fact, you can even run it in a shared hosting environment, assuming
    your web hosting provider supports the required JS scripts (though on a practical
    note, currently there aren't many shared hosts out there that can claim to do
    so).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are familiar with JS development, you might already be aware of all
    you need and how to get it. There are very good chances that you might already
    have such an environment set up. To help you prepare for what is ahead, here is
    a basic rundown of everything that you need to run VuePress:'
  prefs: []
  type: TYPE_NORMAL
- en: The biggest pre-requisite here is that you need Node.js version 8 or higher.
    It will come bundled with npm, so just make sure that your environment has the
    right version of Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond that, the requirements are simple. For production sites, it is always
    a good idea to employ some server-side caching. Static site generators such as
    VuePress, as already pointed out, are quite speedy in their own right and you
    do not, therefore, need to have a custom-coded caching system.
  prefs: []
  type: TYPE_NORMAL
- en: A server-side caching mechanism can help further boost the performance of your
    sites.
  prefs: []
  type: TYPE_NORMAL
- en: That is all for now, basically. We will be saving the coding details and other
    inputs for the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed quite a few things. We learned about static
    site generators, what they are, why we should use them, and the advantages and
    disadvantages that they have to offer. While we cannot use a static site generator
    for every single scenario, there are various types of websites, blogs, and other
    projects wherein such generators can prove useful.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the world of static site generators, our options are plenty. However,
    VuePress is a good option for anyone looking to create content-reliant websites
    and render them as single page applications for faster page loading. VuePress
    relies on Vue.js—therefore, some knowledge with JS and its frameworks' methodology
    is essential to help you get the most out of VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: As we progress through this book, we will be learning more about VuePress in
    detail. In the coming chapter, we will spend some time familiarizing ourselves
    with Vue.js and what it can do. This will help those readers who are not experts
    in working with Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Thereafter, we will head on to learning about VuePress, starting with its installation,
    operating environment, setup, configuration, and so on. More importantly, we will
    also cover security steps so that our production sites are secure and free from
    risks. See you in the next chapter as we embark on our journey of learning VuePress
    development!
  prefs: []
  type: TYPE_NORMAL
