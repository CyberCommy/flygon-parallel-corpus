- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A software architect needs to be aware of any technology that can help them
    solve problems faster and ensure they can create better quality software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure provides, and keeps improving, lots of components that a software architect
    can implement in solutions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The best software development process model depends on the kind of project,
    team, and budget you have. As a software architect you need to consider all these
    variables and understand different process models so you can fit the environment's
    needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A software architect pays attention to any user or system requirement that can
    have an effect on performance, security, usability, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of them, but the non-functional requirements need to be given more attention.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design Thinking and Design Sprint are tools that help software architects define
    exactly what users need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User Stories are good when we want to define functional requirements. They can
    be written quickly and commonly deliver not only the feature required, but also
    the acceptance criteria for the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Caching, asynchronous programming, and correct object allocation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To check that the implementation is correct, a software architect compares it
    with models and prototypes that have already been designed and validated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vertically and horizontally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, you can deploy automatically to an already-defined web app or create a new
    one directly using Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To take advantage of available hardware resources by minimizing the time they
    remain idle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code behavior is deterministic, so it is easy to debug. The execution flow mimics
    the flow of sequential code, which means it is easier to design and understand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because the right order minimizes the number of gestures that are needed to fill
    in a form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because it allows for the manipulation of path files in a way that is independent
    of the operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can be used with several .NET Core versions, as well as with several versions
    of the classic .NET framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Console, .NET Core, and .NET standard class library; ASP.NET Core, test, and
    microservices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, it is available for several platforms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatic, manual, and load test plans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, they can – through Azure DevOps feeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To manage requirements and to organize the whole development process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Epic work items represent high-level system subparts that are made up of several
    features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A child-father relationship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaaS is a good option when you are migrating from an on-premise solution or
    if you have an infrastructure team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PaaS is the best option for fast and safe software delivery in systems where
    the team is focused on software development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the solution you intend to deliver is provided by a well-known player, such
    as a SaaS, you should consider using it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serverless is definitely an option when you are building a new system if you
    don't have people who specialize in infrastructure and you don't want to worry
    about scalability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure SQL Server Database can be up in minutes and you will have all the power
    of Microsoft SQL Server afterward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure provides a set of services called Azure Cognitive Services. These services
    provide solutions for vision, speech, language, search, and knowledge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a hybrid scenario, you have the flexibility to decide on the best solution
    for each part of your system, while respecting the solution's development path
    in the future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modularity of code and deployment modularity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. Other important advantages include handling the development team and the
    whole CI/CD cycle well, and the possibility of mixing heterogeneous technologies
    easily and effectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A library that helps us implement resilient communication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've installed Docker on your development machine, you can develop, debug,
    and deploy Dockerized .NET Core applications. You can also add Docker images to
    Service Fabric applications that are being handled with Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Orchestrators are software that manage microservices and nodes in microservice
    clusters. Azure supports two relevant orchestrators: Azure Kubernetes Service
    and Azure Service Fabric.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because it decouples the actors that take place in a communication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A message broker. It takes care of service-to-service communication and events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same message can be received several times because the sender doesn't receive
    a confirmation of reception before its time-out period, and so the sender resends
    the message again. Therefore, the effect of receiving a single message once, or
    several times, must be the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reliable services are the native Azure Service Fabric services. However, Azure
    Service Fabric can host also other kinds of services, such as Dockerized services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stateless and Stateful. Stateless services are used to implement microservices
    that don't need to store any state, while Stateful services implement microservices
    that need to store state information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is the `HostBuilder` method inside which you can place your dependency injection
    container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The one that is exposed to traffic from outside the cluster and is accessible
    through the cluster's URI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to implement write/modify parallelism in Stateful services with *sharding*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using read-only endpoints. Custom communication protocols can be added by providing
    an `IEnumerable` of `ServiceReplicaListener`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Services are needed to dispatch communication to pods, since a pod has no stable
    IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Services understand low-level protocols like TCP/IP, but most web applications
    rely on the more sophisticated HTTP protocol. That's why Kubernetes offers higher-level
    entities called `Ingresses` that are built on top of services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Helm charts are a way to organize the templating and installation of complex
    Kubernetes applications that contain several `.yaml` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, with the `---` separator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `livenessProbe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because Pods, having no stable location, can't rely on the storage of the node
    where they are currently running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`StatefulSet` communication can be sharded to implement write/update parallelism.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the help of database-dependent providers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either by calling them `Id` or by decorating them with the `Key` attribute.
    This can also be done with fluent configuration approach.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `MaxLength` and `MinLength` attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With something similar to: `builder.Entity<Package>().HasIndex(m => m.Name);`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With something similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Add-Migration and Update-Database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, but you can forcefully include them with the `Include` LINQ clause or by
    using the `UseLazyLoadingProxies` option when configuring your `DbContext`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, it is, thanks to the `Select` LINQ clause.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By calling `context.Database.Migrate()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, it is an in-memory dictionary that can be used as a cache or for other in-memory
    storage needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, they are. Most of this chapter's sections are dedicated to explaining why.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The main weaknesses of NoSQL databases are their consistency and transactions,
    while their main advantage is performance, especially when it comes to handling
    distributed writes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eventual, Consistency Prefix, Session, Bounded Staleness, Strong.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, they are not efficient in a distributed environment. GUID-based strings
    perform better, since their uniqueness is automatic and doesn't require synchronization
    operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OwnsMany` and `OwnsOne`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, they can. Once you use `SelectMany`, indices can be used to search for
    nested objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Functions is an Azure PaaS component that allows you to implement FaaS
    solutions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can program Azure Functions in different languages, such as C#, F#, PHP,
    Python and Node. You can also create functions using the Azure portal and Visual
    Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are two plan options in Azure Functions. The first plan is the Consumption
    Plan, where you are charged according to the amount you use. The second plan is
    the App Service Plan, where you share your App Service resources with the function's
    needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The process of deploying functions in Visual Studio is the same as in web app
    deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are lots of ways we can trigger Azure Functions, such as using Blob Storage,
    Cosmos DB, Event Grid, Event Hubs, HTTP, Microsoft Graph Events, Queue storage,
    Service Bus, Timer, and Webhooks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure Functions v1 needs the .NET Framework Engine, whereas v2 needs .NET Core
    2.2, and v3 needs .NET Core 3.1 and .NET 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The execution of every Azure function can be monitored by Application Insights.
    Here, you can check the time it took to process, resource usage, errors, and exceptions
    that happened in each function call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Design patterns are good solutions to common problems in software development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While design patterns give you code implementation for typical problems we face
    in development, design principles help you select the best options when it comes
    to implementing the software architecture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Builder Pattern will help you generate sophisticated objects without the
    need to define them in the class you are going to use them in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Factory Pattern is really useful in situations where you have multiple kinds
    of object from the same abstraction, and you don't know which of them needs to
    be created by the time you start coding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Singleton Pattern is useful when you need a class that has only one instance
    during the software's execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Proxy Pattern is used when you need to provide an object that controls access
    to another object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Command Pattern is used when you need to execute a *command* that will affect
    the behavior of an object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Publisher/Subscriber Pattern is useful when you need to provide information
    about an object to a group of other objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The DI Pattern is useful if you want to implement the Inversion of Control principle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changes in the language used by experts and changes in the meaning of words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Domain mapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No; the whole communication passes through the entity, that is, the aggregate
    root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because aggregates represent part-subpart hierarchies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just one, since repositories are aggregate-centric.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application layer manipulates repository interfaces. Repository implementations
    are registered in the dependency injection engine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To coordinate in single transactions operations on several aggregates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The specifications for updates and queries are usually quite different, especially
    in simple CRUD systems. The reason for its strongest form is mainly the optimization
    of query response times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dependency injection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No; a serious impact analysis must be performed so that we can adopt it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, since you will have lots of duplicate code in this approach, which will
    cause difficulties when it comes to maintenance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The best approach for code reuse is creating libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes. You can find components that have already been created in the libraries
    you've created before and then increase these libraries by creating new components
    that can be reused in the future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The .NET Standard is a specification that allows compatibility between different
    frameworks of .NET, from .NET Framework to Unity. .NET Core is one .NET implementation
    and is open source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By creating a .NET Standard library, you will be able to use it in different
    .NET implementations, such as .NET Core, the .NET Framework, and Xamarin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can enable code reuse using object-oriented principles (inheritance, encapsulation,
    abstraction, and polymorphism).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generics is a sophisticated implementation that simplifies how objects with
    the same characteristics are treated, by defining a placeholder that will be replaced
    with the specific type at compile time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The answer for this question is well explained by Immo Landwerth on the dotnet
    blog: [https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/](https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/).
    The basic answer is that .NET 5.0 (and future versions) need to be thought as
    the foundation for sharing code moving forward.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are refactoring a code, you are writing it in a better way, respecting
    the contract of input and output of data that this code will process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, since this would violate the principle that a service reaction to a request
    must depend on the request itself, and not on other messages/requests that had
    previously been exchanged with the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, since this would violate the interoperability constraint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, it can. The primary action of a `POST` must be creation, but a delete can
    be performed as a side-effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Three, that is, Base64 encoding of the header and body plus the signature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the request body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `ApiController` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `ProducesResponseType` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `Route` and `Http<verb>` attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Something like `services.AddHttpClient<MyProxy>()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developer error pages and developer database error pages, production error pages,
    hosts, HTTPS redirection, routing, authentication and authorization, and endpoint
    invokers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False. Several tag helpers can be invoked on the same tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ModelState.IsValid`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@RenderBody()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can use `@RenderSection("Scripts", required: false)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use `return View("viewname", ViewModel)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Three.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No; there is also the `ViewState` dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is a W3C standard: the assembly of a virtual machine running in W3C compliant
    browsers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Web UI where dynamic HTML is created in the browser itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting a page based on the current browser URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Blazor component with routes attached to it. For this reason, the Blazor `router`
    can select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining the .NET namespace of a Blazor component class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A local service that takes care of storing and handling all forms-related information,
    such as validation errors, and changes in HTML inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either `OnInitialized` or `OnInitializedAsync`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Callbacks and services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blazor way to interact with JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting a reference to a component or HTML element instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintainability gives you the opportunity to deliver the software you designed
    quickly. It also allows you to fix bugs easily.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cyclomatic complexity is a metric that detects the number of nodes a method
    has. The higher the number, the worse the effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A version control system will guarantee the integrity of your source code, giving
    you the opportunity to analyze the history of each modification that you've made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A garbage collector is a .NET Core/.NET Framework system, which monitors your
    application and detects objects that you aren't using anymore. It disposes of
    these objects to release memory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `IDisposable` interface is important firstly because it is a good pattern
    for deterministic cleanup. Secondly, it is required in classes that instantiate
    objects that need to be disposed of by the programmer since the garbage collector
    cannot dispose of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET Core encapsulates some design patterns in some of its libraries in a way
    that can guarantee safer code, such as with dependency injection and Builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because most of the tests must be repeated after any software-change occurs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because the probability of exactly the same error occurring in a unit test and
    in its associated application code is very low.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Theory]` is used when the test method defines several tests, while `[Fact]`
    is used when the test method defines just one test.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Assert`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Setup`, `Returns`, and `ReturnsAsync`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes; with `ReturnAsync`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well-written code is code that any person skilled in that programming language
    can handle, modify, and evolve.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Roslyn is the .NET Compiler that's used for code analysis inside Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code analysis is a practice that considers the way the code is written to detect
    bad practices before compilation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code analysis can find problems that happen even with apparently good software,
    such as memory leaks and bad programming practices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Roslyn can inspect your code for style, quality, maintainability, design, and
    other issues. This is done during design time, so you can check the mistakes before
    compiling your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visual Studio extensions are tools that have been programmed to run inside Visual
    Studio. These tools can help you out in some cases where Visual Studio IDE doesn't
    have the appropriate feature for you to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft Code Analysis, SonarLint, and Code Cracker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is the approach of delivering value to the end user continuously. To
    do this with success, continuous integration, continuous delivery, and continuous
    feedback must be undertaken.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous integration allows you to check the quality of the software you are
    delivering every single time you commit a change. You can implement this by turning
    on this feature in Azure DevOps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous delivery allows you to deploy a solution once you are sure that all
    the quality checks have passed the tests you designed. Azure DevOps helps you
    with that by providing you with relevant tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous feedback is the adoption of tools in the DevOps life cycle that enable
    fast feedback when it comes to performance, usability, and other aspects of the
    application you are developing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The build pipeline will let you run tasks for building and testing your application,
    while the release pipeline will give you the opportunity to define how the application
    will be deployed in each scenario.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application Insights is a helpful tool for monitoring the health of the system
    you've deployed, which makes it a fantastic continuous feedback tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test and Feedback is a tool that allows stakeholders to analyze the software
    you are developing and enables a connection with Azure DevOps to open tasks and
    even bugs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To maximize the value that the software provides for the target organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No; it requires the acquisition of all competencies that are required to maximize
    the value added by the software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because when a new user subscribes, its tenant must be created automatically,
    and because new software updates must be distributed to all the customer's infrastructures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes; Terraform is an example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure pipelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your business depends on the SaaS supplier, so its reliability is fundamental.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No; scalability is just as important as fault tolerance and automatic fault
    recovery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is an approach that makes sure that every single commit to the code repository
    is built and tested. This is done by frequently merging the code into a main body
    of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, you can have DevOps separately and then enable Continuous Integration later.
    You can also have Continuous Integration enable without Continuous Delivery on.
    Your team and process need to be ready and attentive for this to happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may misunderstand CI as a continuous delivery process. In this case, you
    may cause damage to your production environment. In the worst scenario, you can
    have, for example, a feature that isn't ready but has been deployed, you can cause
    a stop at a bad time for your customers, or you can even suffer a bad collateral
    effect due to an incorrect fix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A multi-stage environment protects production from bad releases when CI-CD is
    enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automated tests anticipate bugs and bad behaviors in preview scenarios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pull requests allow code reviews before commits are made in the master branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No; pull requests can help you in any development approach where you have Git
    as your source control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No; it depends on the complexity of the user interface and how often it changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ASP.NET Core pipeline isn't executed, but inputs are passed directly to controllers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use of the `Microsoft.AspNetCore.Mvc.Testing` NuGet package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use of the `AngleSharp` NuGet package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
