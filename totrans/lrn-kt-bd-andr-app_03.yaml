- en: Data Types, Variables, and Constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start building our TicTacToe game while learning about
    data types, variables, and constants in Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of the chapter, we will have:'
  prefs: []
  type: TYPE_NORMAL
- en: Examined the current UI of the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designed the UI for the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learned about basic types in Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android, the code for the app UI is written in XML and stored in layout files.
    Let's take a look at the default UI that was created when we created our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `res/layout/activity_main.xml`. Make sure Text is selected at the bottom
    of the screen. Android Studio should show you the XML code for the UI with a preview
    on the right-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0b66a1e-2348-4f1c-b91f-44361838752a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you don't see the preview on the right-hand side, enable it by going to View | Tool
    Windows | Preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the separate elements of the main activity layout:'
  prefs: []
  type: TYPE_NORMAL
- en: The parent element is a `CoordinatorLayout`. The `CoordinatorLayout` was introduced
    in Android 5.0 as part of the design library. It provides better control over
    touch events between its child views. We've already seen this functionality at
    work with the way the `SnackBar` appears under the `FloatingActionButton` (instead
    of covering it) when the button is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The element labeled `2` is the `Toolbar`, which acts as the top navigation for
    your app. It's usually used to display the title of the app, the app logo, action
    menu, and navigation button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `include` tag is used to embed a layout into another layout. In this case,
    the `res/layout/content_main.xml` file contains the `TextView` (the one displaying
    the Hello World! message) we see when we run the app. Most of our UI changes will
    be done in the `res/layout/content_main.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `FloatingActionButton`, as you may have noticed, is an actionable `ImageView`
    that floats on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building our game UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our TicTacToe game screen will consist of the game board (which is a 3x3 grid),
    a `TextView` displaying whose turn it is, and a `FloatingActionButton` used to
    restart the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a `TableLayout` to design the game board. Open the `res/layout/content_main.xml` file
    and replace the `TextView` declaration with the `TableLayout` declaration, as
    shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A number of things should be noted here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `TableRow` element represents a single row of the table. From the preceding
    code, each element of the row is represented by a `TextView`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each `TextView` has similar attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous code declares a 1x3 table, in other words, a table with a single
    row and three columns. Since we want to create a 3x3 grid, we will need to add
    two more `TableRow` elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous code already contains a lot of duplicated code. We need to find
    a way to reduce the amount of duplicates. That's where `res/values` comes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before adding the two extra `TableRow` elements, let''s organize our code better.
    Open `res/values/styles.xml` and add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can create child styles who inherit from the parent by naming them in the
    format **Parent.child**, for instance, `Cell.Left`, `Cell.Middle`, and `Cell.Right`
    all inherit the attributes of the `Cell` style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `res/values/dimens.xml`. This is where you declare dimensions used
    in your layouts. Add the following lines of code to the resource element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `res/values/strings.xml`. This is where you declare string resources
    needed within the app. Add the following lines of code in the resource element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open the `res/layout/content_main.xml` file and replace the `TableRow`
    declaration with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We now have all three rows declared. As you can see, our code is looking more
    organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run to view your progress so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d316414-e6f5-479e-961e-2cc66ae1f21b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go ahead and add a `TextView` that will be used to display whose turn
    it is. Open `res/layout/activity_main.xml` and add the following `TextView` declaration
    just before the `include` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change the icon and background color for the `FloatingActionButton`
    by replacing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, build and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1eeca583-e07a-4afc-9d8a-8b44dec6da87.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it. We're done with the UI design.
  prefs: []
  type: TYPE_NORMAL
- en: Basic types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Kotlin, there's no concept of primitive datatypes. All types are objects
    with member functions and properties.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You declare a variable using the `var` keyword, and declare constants with
    the `val` keyword. When declaring a variable or constant, its type doesn''t have
    to be explicitly defined. The type will be inferred from context. A `val` can
    only be initialized once. A variable or constant can only be assigned a null value
    if it''s explicitly declared as a nullable type. You declare a nullable type by
    appending a `?` to the end of the type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For instance, in the preceeding code, `a` and `b` will both be treated as `String`.
    When trying to reassign a variable with an inferred type, a value of a different
    type will throw an error. A `val` can only be initialized once.
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Kotlin, properties are accessed by simply referring to them by name. As
    much as `getters` and `setters` are not a requirement, you are not prohibited
    from creating them. A property''s `getter` and/or `setter` can be created as part
    of its declaration. A `setter` is not allowed if the property is a `val`. A property
    needs to be initialized at the point of creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go ahead and declare a few properties that we will require in our `MainActivity`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`gameBoard` is a 3x3 matrix that represents a single TicTacToe game board.
    It will be used to store the value of each cell on the board.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`turn` is a char that stores whose turn it is at the moment, X or O.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tableLayout` is an `android.widget.TableLayout` that will be initialized in
    the `onCreate()` method with the view from the xml layout.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`turnTextView` is an `android.widget.TextView` that is used to display whose
    turn it is at the moment. This will also be initialized in the `onCreate()` method
    with the view from the xml layout.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we designed the user interface for our simple TicTacToe game.
    We also learned how to work with variables and constants in Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go ahead and start implementing the logic for our
    game while learning about classes and objects.
  prefs: []
  type: TYPE_NORMAL
