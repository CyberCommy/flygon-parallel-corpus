- en: File Recovery and Data Carving with Foremost, Scalpel, and Bulk Extractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve learned how to create forensic images of evidence, let’s take
    a look at the file recovery and data carving process using Foremost, Scalpel,
    and Bulk Extractor.
  prefs: []
  type: TYPE_NORMAL
- en: When we last covered filesystems, we saw that various operating systems use
    their own filesystems to be able to store, access, and modify data. So too, storage
    media use filesystems to do the very same.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata, or data about data, helps the operating system identify the data.
    Metadata includes technical information, such as the creation and modification
    dates, and the file type of the data. This data makes it much easier to locate
    and index files.
  prefs: []
  type: TYPE_NORMAL
- en: File carving retrieves data and files from unallocated space using specific
    characteristics such as file structure and file headers, instead of traditional
    metadata created by, or associated with, filesystems.
  prefs: []
  type: TYPE_NORMAL
- en: As the name implies, **unallocated space** is an area of storage media that
    has been marked by the operating system or file table as empty or unallocated
    to any file or data. Although the location of, and information about, the files
    are not present and sometimes corrupted, there are still characteristics about
    the file that reside in its header and footer that can identify the file or even
    fragments of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Even if a file extension has been changed or is missing altogether, file headers
    contain information that can identify the file type and attempt to carve the file
    by analyzing header and footer information. Data carving is quite a lengthy process
    and should be done using automated tools to save time. It also helps if the investigator
    has an idea of what file types they are looking for, to have a better focus and
    to save time. Nevertheless, this is forensics and we know that time and patience
    are key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common file types, as displayed in hexadecimal format within the file
    headers, include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Joint Photographic Experts Group** (**JPEG**):  `FF D8 FF E0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portable Document Format** (**PDF**):  `25 50 44 46`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While more on analysis of files and headers will be looked at in later chapters,
    let’s have a look at three tools for data carving in Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Forensic test images used in Foremost and Scalpel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this tool, a digital forensic tool testing image, created by Nick Micus,
    specifically for testing data carving tools, was used. One of the main reasons
    for choosing this particular image for this exercise is that Nick Mikus is listed
    as one of the contributing developers of Foremost. As seen in the first line of
    Foremost, which displays the version number alongside authors Jesse Kornblum and
    Kris Kendall. The image can be downloaded freely at [http://dftt.sourceforge.net/test11/index.html](http://dftt.sourceforge.net/test11/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Once you've become familiar with this exercise, you can try extracting data
    from other images also available on that site at [http://dftt.sourceforge.net/](http://dftt.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: Using Foremost for file recovery and data carving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Foremost is a simple and effective CLI tool that recovers files by reading
    the headers and footers of the files. We can start Foremost by clicking on Applications |
    11-Forensics | foremost:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a35cc71-8e26-4d0a-8357-eec87f6fe818.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once Foremost is successfully started, a Terminal opens, displaying the program
    version, creators, and some of the many switches for usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f55a3e8a-aa63-4909-b8f9-fba5a5cbd1d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To have a better understanding of Foremost and the switches used, try browsing
    the Foremost `System Manager''s Manual`. This can be done by entering the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/45743965-1b38-4240-918d-6c8e69571163.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The syntax for using Foremost is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have specified the `11-carve-fat.dd` file located on the
    desktop as the input file (`-i`)  and specified an empty folder named `Foremost_recovery`
    as the output file (`-o`). Additionally, other switches can also be specified
    as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin carving the `11-carve-fat.dd` image with Foremost, we type the following
    command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/86339bd9-e25d-4f99-a86d-a11189df3981.png)'
  prefs: []
  type: TYPE_IMG
- en: Although the characters found look quite unclear while processing, the results
    will be clearly categorized and summarized in the specified output folder.
  prefs: []
  type: TYPE_NORMAL
- en: For quick access to some of the commands in Foremost, you may also use `foremost
    -h`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important that the specified output folder be empty or you will encounter
    problems, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a65fefeb-050c-4e67-97b7-2d2de957d2e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing Foremost results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once Foremost has completed the carving process, we can proceed to the `Foremost_recovery`
    output folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67ff1db0-c18d-4cd7-ae65-ccfd56d630cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we open the output directory, we can see the carved items, categorized by
    file type along with an `audit.txt` folder, which contains details of the findings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd539ac9-45d7-4586-9cc4-0ae6c5f87f87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Within the `audit.text` file, we see a list view of the items found by Foremost,
    along with their `Sizes` and `File Offset` location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf2fd23a-664f-4842-aa93-a4c6cff77a41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When scrolling down on the `audit.txt` file, you should see a summary of the
    files found, which is particularly useful when carving larger images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bddcc7f0-9ced-492a-b455-90f4ee737bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first three files listed in the `audit.txt` files are `.jpg` image files
    and we can see these files in the `jpg` sub-folder within the `Foremost_recovery`
    output folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5cb82bd-d9ae-4bad-99d2-0c72948f26cc.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, Foremost is quite the powerful data recovery and file carving
    tool. File carving can take a very long time depending on the size of the drive
    or image used. If the type of file that needs to be recovered is already known,
    it may be wise to specify this type of file using the `-t` option, to reduce the
    amount of time taken when compared with searching the entire image.
  prefs: []
  type: TYPE_NORMAL
- en: Before running Foremost again, remember to choose a new or empty output folder.
  prefs: []
  type: TYPE_NORMAL
- en: Using Scalpel for data carving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scalpel was created as an improvement of a much earlier version of Foremost.
    Scalpel aims to address the high CPU and RAM usage issues of Foremost when carving
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying file types in Scalpel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike Foremost, file types of interest must be specified by the investigator
    in the Scalpel configuration file. This file is called `scalpel.conf` and is located
    at `etc/scapel/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0eefa08-2fbe-411e-b161-1d188a6106a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To specify the file types, the investigator must remove the comments at the
    start of the line containing the file type as all supported file types are commented
    out with a hashtag at the beginning of the file type. The following screenshot
    shows the default Scalpel configuration file (`scalpel.conf`) with all file types
    commented out. Notice that each line begins with a hashtag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8fddfa4-2092-4c05-994d-a1e8fca13ff6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ve removed the hash tags at the beginning of some of the lines to let Scalpel
    know to search for these specific file types, this also reduces the time taken
    to otherwise search for all supported file types. The following screenshot shows
    that Scalpel will be searching for GIF and JPG files as the comments have been
    removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/482395f9-c697-4bb3-b9ff-61b89b8fafa5.png)'
  prefs: []
  type: TYPE_IMG
- en: Be sure to perform this step before specifying the image to be carved. Failure
    to do so presents the investigator with a helpful error message reminding them
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf26887e-cf53-4e2e-b891-2a32f7c2a326.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Scalpel for file carving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have made our changes to include file types and saved the `scalpel.conf`
    file, we can then start Scalpel by clicking on the Show Applications button on
    the sidebar and enter `scalpel` into the search box which then appears at the
    top of the screen, as seen here. Click on the `scalpel` box to begin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf959d79-d831-48ed-9d42-728a4f3c35a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once started, a Terminal opens showing the version number (1.60), the author
    (Golden G. Richard III), and as mentioned, states that it is based on Foremost
    0.69\. As seen with Foremost, Scalpel-usage syntax and additional options are
    also displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b873456-62ca-46c1-976b-95525e337716.png)'
  prefs: []
  type: TYPE_IMG
- en: For this example, the same image used for carving with Foremost (`11-carve-fat.dd`)
    was used. As with Foremost also, the input file and output folder must be specified.
    To list the available options and switches in Scalpel, use `scalpel -h`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following syntax was used in Scalpel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/3fcc076f-00b8-456f-ac3d-4619a7e76b9b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, we can see that Scalpel builds a carve-list showing
    the file type with header and footer information as well as the number of files
    carved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a closer look at the last few lines produced by the Scalpel output,
    we can see that the carving process was `100%` complete with `18` files being
    carved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ab4830e-a7a3-4688-9347-9a721ddcec93.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing results of Scalpel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we can head over to the output folder named `ScalpelOutput` to have a look
    at the carved files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e4424e7-fc6a-4870-9296-ace81f661146.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The results of the Scalpel output are similar to that of Foremost, with both
    output folders containing various subfolders with carved files along with an `audit.txt`
    file with details of the findings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34039eef-f724-492b-a347-2dcc3396fcdb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Within the `jpg-1-o` folder, we can see five `.jpg` files, three with actual
    images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd898e16-6c23-46d1-a351-7952d152e56f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Even though Scalpel''s results showed that five files with `.jpg` headers and
    footers were identified in the carve list when the tool was run, some of these
    may not open. These files are most likely false positives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3342e410-c602-40a1-a970-96433a177f61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows a snippet of the `audit.txt` file, displaying
    information about the carved files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d3edb83-529e-4aa0-bc9f-5b5d28d58835.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparing Foremost and Scalpel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Scalpel returned more files than Foremost, carry out your own exercise
    in comparing the carved files found by both Foremost and Scalpel. Unfortunately,
    the filenames returned by both tools are not the original filenames and in some
    instances, there may be duplicates of carved files as many files may be fragmented
    and appear to be separate files. Try manually going through the files found in
    the output folders of both Foremost and Scalpel and do your own comparative research
    to see which tool was more successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test image file (`11-carve-fat.dd`) used in both Foremost and Scalpel contains
    15 files of various types, as listed on the download page ([http://dftt.sourceforge.net/test11/index.html](http://dftt.sourceforge.net/test11/index.html)).
    This should be useful when doing a comparison of the carved files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65d187ef-7e75-479a-9b72-1478f3be3569.png)'
  prefs: []
  type: TYPE_IMG
- en: Bulk_extractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bulk_extractor is the third and final tool that we'll cover in this chapter.
    Foremost and Scalpel, as we've seen so far, are quite impressive at file recovery
    and carving, but are limited to specific file types. For further extraction of
    data, we can use Bulk Extractor.
  prefs: []
  type: TYPE_NORMAL
- en: While Foremost and Scalpel can recover images, audio, video, and compressed
    files, Bulk Extractor extracts several additional types of information that can
    be very useful in investigations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although Bulk Extractor is quite capable of recovering and carving image, video,
    and document type files, other data that can be carved and extracted by Bulk Extractor
    includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Credit card numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online searches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Website information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social media profiles and information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forensic test image for Bulk_extractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this example, we will work with a freely-available evidence file named `terry-work-usb-2009-12-11.E01`*.*
  prefs: []
  type: TYPE_NORMAL
- en: This file can be downloaded directly from the digital corpora website which
    allows the use of forensic evidence images for forensic research purposes. The
    file used in this exercise can be downloaded directly from [http://downloads.digitalcorpora.org/corpora/scenarios/2009-m57-patents/drives-redacted/](http://downloads.digitalcorpora.org/corpora/scenarios/2009-m57-patents/drives-redacted/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The required file is the last file on the download page and is only 32 MB in
    size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20496426-2cf8-4668-9b00-95872bb229fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Bulk_extractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start Bulk Extractor by first typing `bulk_extractor -h` to display some commonly-used
    parameters and options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44a57f8a-d554-48f1-8bec-d1260a93a4c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Like Foremost and Scalpel, the syntax for using `bulk_extractor` is quite simple
    and requires that an output folder (`-o`) and the forensic image be specified. 
    For this exercise, as previously mentioned, we will be extracting data from the
    `terry-work-usb-2009-12-11.E01` image and saving the output to a folder named
    `bulk-output`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4a98f349-aad3-4563-b9cb-0e669c88a58a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once completed, `bulk_extractor` indicates that all threads have finished and
    provides a summary of the process and even some findings. As seen in the following
    screen, `bulk_extractor` displays the MD5 hash, the total MB processed and even
    reports that three email features have been found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62c2a63f-05bf-45ff-9161-73ceb3557044.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing results of Bulk_extractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view the output of and findings by `bulk_extractor`, we can also display
    a list of directories within the Terminal by typing `ls -l`. We can see that the
    `bulk_output` folder has been created by `bulk_extractor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e01aab30-f523-4c5d-8445-42bff1b3f6de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now list the contents of our output folder (`bulk_output`) by typing
    `ls -l bulk_output`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/299af976-74aa-41b0-8d9f-9848bfaa95b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The list has been split in two to show some of the artifacts found by `bulk_extractor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd8ec484-ab2b-4c1b-a84b-3da02bd7a84f.png)'
  prefs: []
  type: TYPE_IMG
- en: It should be noted that not all listed text files will contain data. Only the
    ones with numbers larger than `0` to the left of the text filenames will actually
    contain data.
  prefs: []
  type: TYPE_NORMAL
- en: The text file `ccn.txt` is an abbreviation for **credit card numbers** and will
    contain credit card information that may have been stolen, illegally used, or
    stored with possible intention to commit credit card fraud.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we browse to the output folder location, we can view all extracted data
    within the individual text files. Viewing the `telephone_histogram.txt` file reveals
    telephone numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/173b0289-1008-40e6-bda9-3bf10d6a8439.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `url.txt` file reveals many websites and links visited:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3675fd3b-5af2-489c-b3c7-8c0824b9d392.png)'
  prefs: []
  type: TYPE_IMG
- en: While this was a simple exercise done with a small evidence file, be sure to
    have a look at the many others available at [http://digitalcorpora.org/](http://digitalcorpora.org/)
    and see what `bulk_extractor` reveals. Try downloading as many of the images as
    possible if your bandwidth and storage permit, and also use the other tools we'll
    use in other chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about file recovery and data extraction using three
    readily-available tools within Kali Linux. We first performed file carving using
    the very impressive Foremost, which searched the entire image for supported file
    types within the file header and footers. We then did the same using the newer
    Scalpel, but had to make a slight modification by selecting the file types we
    wished to carve. Both Foremost and Scalpel presented us with an `audit.txt` file
    summarizing the carve list and its details along with subfolders containing the
    actual evidence.
  prefs: []
  type: TYPE_NORMAL
- en: Bulk_extractor is a wonderful tool that carves data and also finds useful information
    such as email addresses, visited URLs, Facebook URLs, credit card numbers, and
    a variety of other information. Bulk_extractor is great for investigations requiring
    file recovery and carving, together with either Foremost or Scalpel, or even both.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've covered file carving and recovery, let's move on to something
    more analytical. In the next chapter, we'll take a look at exploring RAM and the
    paging file as part of memory forensics, using the very powerful volatility. See
    you there!
  prefs: []
  type: TYPE_NORMAL
