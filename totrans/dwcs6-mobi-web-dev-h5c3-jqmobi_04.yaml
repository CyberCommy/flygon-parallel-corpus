- en: Chapter 4. Applying CSS3 Effects and Transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3—the current version of stylesheets—provides easy access to effects, such
    as drop shadows, rounded box corners, and opacity (transparency). Additionally,
    CSS3 introduces transforms that change the shape, location, rotation, and size
    of objects. Together, CSS3 effects and transforms open the door to making web
    pages more dynamic, more inviting, less "boxy", and more interactive.
  prefs: []
  type: TYPE_NORMAL
- en: Effects and transforms can be made interactive by changing the appearance of
    objects as a user hovers over or clicks on them with a mouse. Together, effects
    and transforms, with or without animation, make it much easier than the previous
    tools to add accessible, inviting design elements and dynamism to web pages.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 effects and transforms are defined through stylesheets; so, we can take
    advantage of Dreamweaver's **CSS Styles** panel to avoid much, if any, recourse
    to handcoding, to create them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will explore the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining and applying CSS3 transforms: translate, scale, rotate, and skew'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Defining and applying CSS3 effects: border radius, shadows, and opacity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining multiple transforms and effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making CSS3 transforms and effects interactive with `:hover` pseudo-classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in CSS3–effects and transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 effects, such as shadows, rounded corners, and opacity, can make web pages
    more stylish, less harsh, and more welcoming. When used with discretion (that
    is, not overused), they make web pages attractive and inviting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Effects and transforms can be, and often should be, combined to produce eye-catching
    elements. The following text, for example, has both a skew transform and a shadow
    (box-shadow) effect applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![New in CSS3–effects and transforms](img/4742_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Transitions, such as skewing, rotating, scaling, and translation (moving) objects,
    are particularly engaging when combined with interactivity. For example, a visitor
    to a website who hovers over an object experiences a subtle but inviting change
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: In the pre-CSS3 era, these kinds of effects or transitions required some combination
    coding and embedding Flash objects by relying on (and programming with) JavaScript
    and substituting images with Photoshop effects for types (for features such as
    shadows or outlining). These other tools were (are!) expensive and/or have a high
    learning curve.
  prefs: []
  type: TYPE_NORMAL
- en: During the course of this chapter, we'll explore several new effects and the
    new 2D (two-dimensional) transforms in CSS3\. 3D transforms are beyond the scope
    of our survey; they are not as widely supported in browsing environments and,
    generally, additional scripting (usually JavaScript) is required to make them
    effective.
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of this chapter will consist of walking through how to create particular
    CSS3 effects and transforms.
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility challenges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS3 effects and transitions are widely supported without the need for plugins
    (such as JavaScript or Flash).
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, it is important to emphasize that HTML5 and CSS3 features
    are all a work in progress. In searching for a formulation to describe the state
    of support for CSS3 in browsers, I bumped into the formulation, **irregular standardization**.
    I realize that it's an oxymoron, but what I mean is that the CSS3 effects and
    transforms we are creating in this chapter are supported in the current versions
    of all the major browsers (and yes, that includes Internet Explorer 9 along with
    Safari for mobile and desktop; Firefox and Opera).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, Safari, Firefox, and Opera all require unique code prefixes. For example,
    the CSS3 code for a class style to apply the `rotate` transform to rotate a box
    five degrees counterclockwise might look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `-webkit-` prefix applies to Safari and other browsers that adhere to the
    WebKit standard (which, by the way, includes Dreamweaver CS6's **Live** view).
    The `-moz-` prefix applies to Mozilla Firefox. The `-o-` prefix applies to the
    Opera browser. And the generic transform code applies to "everyone else" including
    Internet Explorer 9 that does not require a browser prefix to interpret this (or
    other) effects.
  prefs: []
  type: TYPE_NORMAL
- en: The lack of standardized coding is not as big a problem as it might seem. It
    just requires a bit of redundancy as we define and apply effects and transforms.
  prefs: []
  type: TYPE_NORMAL
- en: What about browsing environments, such as the older versions of Internet Explorer,
    that do not support CSS3 effects and transforms at all? There is an easy and a
    hard answer to that challenge. The hard solution is to patch together JavaScript
    and other coding solutions that can be found online or that have been concocted
    to simulate the effects and transforms not supported in CSS3\. Which is to say,
    you can revert to tools and techniques such as JavaScript and Flash that were
    required to produce these effects before the advent of CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easier, and probably more sensible, solution in most cases is to employ
    transforms and effects in ways that do not require that a browser supports the
    effect in order for a visitor to absorb page content. For example, have a look
    at a rounded rectangle created using the `border-radius` effect in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compatibility challenges](img/4742_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If someone visits the page in the preceding example using an older version
    of Internet Explorer, such as IE6, they will forgo the experience of seeing the
    type in a circle (defined by the `border-radius` effect). Not quite as inviting
    an experience, but they will still be able to read the text as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compatibility challenges](img/4742_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before diving into *how* to apply transforms and effects, let's reflect for
    a moment on the advantages involved with using these CSS3 features to format the
    examples we've previewed so far. No Flash or JavaScript was created, injured,
    mistreated, or worse while creating these effects. All that was required was a
    few lines of CSS that we generate in Dreamweaver's **CSS Styles** panel.
  prefs: []
  type: TYPE_NORMAL
- en: Nor was it necessary to use "image text", the type saved as an image, to create
    these effects. The page can load almost instantly, without waiting for an image
    to download. In the absence of plugins or images, the shaping and formatting gets
    downloaded more or less instantly, without browsers having to mess with plugins
    or downloaded images.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, finally, the text is still *selectable*. This means that the text to which
    transforms or effects have been applied can still be copied and pasted into a
    map program, a calendar event, or selected as a text link as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compatibility challenges](img/4742_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CSS3 styles in Dreamweaver CS6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dreamweaver CS6 provides some features for defining and applying these new CSS3
    features. While not the most powerful tools in Dreamweaver, they do make it possible
    to create and apply new CSS3 techniques without resorting to coding. Where coding
    is essential, Dreamweaver helps out with code hints.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are essentially two options for getting our money''s worth out of Dreamweaver
    as we generate CSS3 transforms and effects:'
  prefs: []
  type: TYPE_NORMAL
- en: If we enter the CSS code in the **Code** view, Dreamweaver will help with the
    coding by supplying code hints. For example, the following screenshot shows a
    code hint being offered after `–moz-tran` has been entered in the **Code** view.
    Code hints for the stylesheet provide easy access to the `transform-` attribute.![CSS3
    styles in Dreamweaver CS6](img/4742_04_05.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Redundant CSS code**'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows what is a big part of an ongoing dimension of
    defining and applying CSS3 transforms and effects. You have to create four versions
    of the code, one for Webkit (Safari), one for Mozilla (Firefox), one for Opera
    (a browser with a large user base in Europe), and a generic version (with no browser
    prefix) that is recognized by Internet Explorer 9\. We'll return to this challenge
    in this chapter shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The other option is to generate CSS3 effects and transforms in the **CSS Styles**
    panel. The downside to this is that these new CSS3 style rules do not show up
    in the **CSS Rule Definition** dialog, which is normally the most user friendly
    and intuitive environment for defining CSS styles in Dreamweaver.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You *can*, however, enter CSS3 effects and transforms through the **Add Property**
    link at the bottom of the **CSS Styles** panel. And Dreamweaver CS6 (or older
    versions with the HTML5 Pack installed) *will* generate CSS code based on the
    style rules and parameters you enter in the **CSS Styles** panel. With this option,
    Dreamweaver will at least "bust" you if you attempt to enter an invalid CSS3 rule,
    as shown in the following screenshot (in the following example, I should be entering
    `–moz-transform` and then defining the **skew** transform in the right-hand side
    column of the **CSS Styles** panel).
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 styles in Dreamweaver CS6](img/4742_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us speak bluntly for a moment. Neither of these options—relying on code
    hints in the **Code** view or using Dreamweaver's **CSS Styles** panel—is really
    up to the level of assistance we get from Dreamweaver CS6 when we generate pre-CSS3
    styles. The folks at Adobe, we presume, are scrambling like everyone else to catch
    up with current and emerging web design tools.
  prefs: []
  type: TYPE_NORMAL
- en: I'll leave it to you to decide which of these useful but flawed techniques to
    use for defining CSS3 effects and styles, and I'll illustrate both techniques
    in the remainder of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As noted already, support for CSS3 effects and transforms is irregular and a
    work in progress. Within that framework, the four available transforms (`scale`,
    `translate`, `rotate`, and `skew`) are relatively stable and widely supported.
    Effects, on the other hand, are less consistently supported and less finite in
    the sense of there being a "list" of available effects that are supported (albeit
    with unique coding prefixes) across browsing environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part of the reason for this is that a number of effects are very flexible.
    For example, the `text-shadow` effect can be tweaked to produce an outlined type.
    And sometimes, you will hear people refer to an "outline" effect, by which they
    mean adjusting the parameters of the `text-shadow` effect to create an outlined
    type as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 effects](img/4742_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With what has been discussed so far about the flexible and open-ended nature
    of CSS3 effects, let''s examine three of the most useful effects: `opacity`, `border
    radius`, and `shadow` (for both boxes and text).'
  prefs: []
  type: TYPE_NORMAL
- en: Defining opacity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `opacity` effect in CSS3 allows you to apply varying degrees of opacity/transparency
    to objects. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding syntax, `x` is a value between zero and one. Full opacity (a
    value of `1`) is normal—the object to which opacity is applied acts like a cover
    over everything else. Full transparency (a value of `0`) makes an object invisible.
    An opacity value of `.6` makes an object 60 percent opaque, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In spite of all the preceding warnings that CSS3 effects have to be defined
    specifically for different browsers, the `opacity` effect is one that does *not*
    require a prefix for identifying target browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Simple or complicated**'
  prefs: []
  type: TYPE_NORMAL
- en: With CSS3, implementing opacity (transparency) is quite simple, or rather hopelessly
    complex, depending on what one is aiming for. Using opacity to create a complex
    set of layered objects with various elements having their own assigned opacity
    requires complex coding and is not supported by all browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Opacity can be applied to a tag (conceivably, for example, the `<img>` tag
    that defines how images appear). Of more efficacy is the technique of defining
    a class style that applies opacity. You can do that with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **CSS Styles** panel, click on the **New CSS Rule** icon at the bottom
    of the panel to launch the **New CSS Rule** dialog. Choose **Class** from the
    **Selector Type** pop-up menu, enter a name (no spaces or special characters—**semi_opaque**
    would work), and select your external stylesheet from the **Rule Definition**
    pop up. Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **CSS Rule Definition** dialog opens. Sadly, as discussed earlier, CSS3
    effects cannot be defined in the **CSS Rule Definition** dialog. So, simply click
    on **OK** to create a new CSS rule without properties at this stage. The new rule,
    however, will appear in the **CSS Styles** panel, which is where we will define
    the opacity settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your newly created class style selected in the **CSS Styles** panel, click
    on the **Add Property** link in the bottom-half of the **CSS Styles** panel. In
    the first column type `opacity`, and press the *Tab* key to move to the second
    column. In the second column, type a value between `0` (for complete transparency)
    and `1` (for full opacity). The value `.5`, for example, defines 50 percent transparency
    as shown in the following screenshot:![Defining opacity](img/4742_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the class style defined, you can apply it to selected objects (such as
    an image) by choosing the class style from the **Properties** inspector.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you define a CSS class style, you can apply it to any selected element
    from the **Class** drop-down menu in the **Properties** inspector as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining opacity](img/4742_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can test opacity effects in different browsers. While opacity is not supported
    in all browsers—particularly older versions of browsers—its application is usually
    such that if it works, it can enhance a page, but if it doesn't work, no essential
    content is lost. The following screenshot shows text on top of an image. The text
    on the left-hand side is displayed with full opacity. The text on the right-hand
    side is displayed with partial transparency, allowing visitors to see some page
    background behind the text.
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining opacity](img/4742_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Border radius
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CSS3 `border-radius` effect is used to define rounded corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s dive right into an example of a class style that applies rounded corners
    with a 12-pixel radius to a 150-pixel square box, and a yellow background with
    a thick, solid red line around it. In the previous discussion of creating a class
    style to apply opacity effects, we used the technique of building the class style
    in the **CSS Styles** panel. That worked well because opacity effects are pretty
    simple. Here, let''s build the style in a CSS stylesheet. Assuming you have an
    external stylesheet linked to an open web page in Dreamweaver, you can add this
    code to the CSS file to define a `border-radius` class style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The code we''re working with here uses the `-moz-` prefix to support Firefox.
    The following screenshot shows this class style applied to a selected text in
    Dreamweaver:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Border radius](img/4742_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In a browser, the preceding image looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Border radius](img/4742_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One fun technique to try is to create a circle affected by making the rounded-radius
    value equal to half the height (and width) of a square box. The following example
    shows the effect, with the values adjusted from the earlier example so that the
    rounded radius is 75 pixels, half the pixels that define the dimensions of the
    original square.
  prefs: []
  type: TYPE_NORMAL
- en: '![Border radius](img/4742_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shadows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drop shadows may well be the most widely applied effect in graphic design. Don't
    quote me on that, but shadows certainly are a ubiquitous element in many designs;
    and now, they're easy to apply to selected objects using CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two different shadow effects: `box-shadow` and `text-shadow`. Their
    application is pretty self-explanatory; `box-shadow` applies to boxes and `text-shadow`
    to text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both `box-shadow` and `text-shadow` effects can be defined with a minimum of
    two parameters: x-offset (vertical distance) and y-offset (horizontal distance).
    In addition to this, they usually include a color (if no color is specified, a
    browser-default color appears) and a blur parameter (the thickness of the blur
    gradient).'
  prefs: []
  type: TYPE_NORMAL
- en: x and y offset values can be positive or negative. Positive values generate
    a shadow on the right-hand side of the text while negative values generate a shadow
    on the left-hand side of the text. For the y-offset values, positive values generate
    a shadow below the text while negative values create a shadow above the text.
    Values are normally defined in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Before examining how this works for boxes, text, and outlines, it is useful
    to note that *multiple* shadow definitions can be combined. So, for example, if
    you wish to generate a shadow under *and* over the text (and you will want to
    do this when you define an outline style), you can combine two or even three shadow
    definitions, and they are stacked on top of each other.
  prefs: []
  type: TYPE_NORMAL
- en: Box shadow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As noted, `box-shadow` effects are usually defined with four parameters: offset-x
    (horizontal distance), offset-y (vertical distance), blur (width in pixels), and
    the color of the shadow.'
  prefs: []
  type: TYPE_NORMAL
- en: The following code, for example, defines a box shadow with 5 pixels of horizontal
    and vertical offset, a blur length of 5 pixels, and a gray shadow—and it does
    so for five different browsers, namely Chrome, Safari, Firefox, (using the unprefixed
    code) Internet Explorer 9, and Opera.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here's how that looks in the **CSS Styles** panel (and you could define the
    class style in the **CSS Styles** panel).
  prefs: []
  type: TYPE_NORMAL
- en: '![Box shadow](img/4742_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Text shadow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `text-shadow` effect is very similar to the `box-shadow` effect, except
    that it is applied to text and not boxes. And, for whatever reason, unlike the
    `box-shadow` effect that requires a special prefix, the `text-shadow` effect does
    not require vendor prefixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameters for the `text-shadow` effect are the same as those for the `box-shadow`
    effect, where you define four values: x-offset, y-offset, blur distance, and color.
    Without the hassle of creating three versions of the effect, the following CSS
    code can be used to define a text shadow with 5 pixels of horizontal and vertical
    offset, a blur value of 5, and a gray color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `text-shadow` effect settings in the preceding example produce an effect
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text shadow](img/4742_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a text outline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As alluded to earlier in this chapter, there is no such thing as a "text outline"
    effect. But there *is* a way to apply text outlines using the `text-shadow` effect.
    Generally, this involves matching the text color of the "outlined" type with the
    page background and then defining a particularly thin, black "shadow" with no
    blur at all that looks like an outline.
  prefs: []
  type: TYPE_NORMAL
- en: Creating effective outline effects requires stacking additional defining parameters
    in order to stack up very thin "shadows" both above and below and to the right
    and left of the text to which the style is applied. For example, when applied
    to text that sits on a white page background, the following class style combines
    (stacks) three different sets of parameters to create an outline effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here's how that looks in a browser and in the **CSS Styles** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a text outline](img/4742_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Essentially, the preceding code generates a thin (1 pixel) "shadow" below the
    text, a second "shadow" below the text, and a third (1 pixel) thick "shadow" above
    the text. For a thicker outline, you could increase the pixel values uniformly
    to 2 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The four CSS3 transitions `scale` (resize), `translate` (move), `rotate`, and
    `skew` are applied to selected content as *effects*. That is to say, they change
    the display or appearance of objects but not their underlying properties.
  prefs: []
  type: TYPE_NORMAL
- en: These transformations make it possible to present distortions of text or images
    that, before the advent of CSS3, was normally done through images—by using an
    image of text to present that text skewed, rotated, or scaled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than pushing my written communication skills beyond their limits, let''s
    take advantage of the following figure to illustrate these four transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 transforms](img/4742_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When to use transforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `skew` and `rotate` transforms can be used to present text or images in
    an intriguing and unique way, while maintaining the user's ability to select (and
    copy, paste, click on, and so on) the *text*. The `translate` transform can be
    used to place one block of content over another (as in the preceding illustration).
    The `scale` transform can be used to stretch or resize type or images.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**When images overlap**'
  prefs: []
  type: TYPE_NORMAL
- en: When two `<div>` tags overlap, the one that appears in front will be the one
    with the highest z-index value. You can set the z-index in the **CSS Styles**
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: In many instances, these effects work well as interactive animation, where a
    visitor triggers the transform by hovering over an object with his or her mouse.
    We'll explore that technique as the final element of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As with the CSS3 effects explored earlier in this chapter, transitions can be
    applied to a wide range of tags such as heading tags (`<h1>`, `<h2>`, and so on)
    and images (using the `<img>` tag). Or more typically, class styles are defined
    to apply these transitions.
  prefs: []
  type: TYPE_NORMAL
- en: How to generate transition coding in Dreamweaver CS6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before examining the relatively basic syntax necessary for defining a transform,
    let's revisit the controversy I tried to stir up earlier in this chapter over
    two possible approaches for squeezing the most out of Dreamweaver CS6's limited
    but helpful tools for generating CSS3 code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To review and expand on the choices: you *cannot* define transforms in the
    **CSS Rule Definition** dialog, but you can apply CSS2 (earlier) styles in this
    way—rules such as background color, font definition, and so on. But, we would
    search in vain through the categories in Dreamweaver''s **CSS Rule Definition**
    dialog for `skew`, `scale`, `transform`, or `rotate`. So the following two choices
    remain:'
  prefs: []
  type: TYPE_NORMAL
- en: Type the CSS code in the **Split** or **Code** view directly into the CSS file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the limited resources of the **CSS Styles** panel to define the transforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I''ll let you jump back and review the more detailed discussion earlier in
    the chapter for a step-by-step walkthrough of how to either enter code in the
    CSS file you are working with or define styles using the **CSS Styles** panel.
    But there is one new factor to examine here: you get a bit more help in the **CSS
    Styles** panel defining transform parameters than you do for the effects (such
    as shadows) explored earlier in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how that additional help works: in the course of adding a rule to a
    style in the **CSS Styles** panel, if you enter one of the transform options (`-webkit-transform`,
    `-moz-transform`, or `-o transform`) at the bottom of the **CSS Styles** panel,
    Dreamweaver supplies a popup in the second column in the panel with various transform
    options, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to generate transition coding in Dreamweaver CS6](img/4742_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bottom line is that you have to decide which environment is more comfortable
    for you to generate the CSS3 code for transforms. While exploring the specific
    transforms in the remainder of this chapter, I'll give away my own choice (just
    typing code in the **Code** view). But particularly when you are becoming familiar
    with the CSS3 code for transforms, you might find the popup help in the **CSS
    Styles** panel helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing with scale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scaling is defined by two parameters, namely x and y. The x value defines how
    much width to increase (or with a negative value decrease), and the y value applies
    to the height. Values are normally multipliers, so that a value of 2 = 200%, means
    doubling the size, and a value of .5 = 50%, means reducing the size to half of
    the original value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines of code apply a `scale` transform that leaves the width
    of the object unchanged but increases the height by 50 percent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a sample of a class style (called `.scale`) that incorporates the preceding
    code and defines a class style that generates a 125-pixel square box (before rescaling)
    that can be scaled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Floating the box**'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the `float` attribute allows us to arrange a bunch of these,
    or similar, boxes in a single row.
  prefs: []
  type: TYPE_NORMAL
- en: Moving with translate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `translate` transform moves objects from where they are placed on the page.
    As noted earlier, this can be an effective technique for having boxes, including
    boxes of selectable text, overlap on a page.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for the `translate` transform is similar to that for the `scale`
    transform except that the first parameter, that is, the x value defines how far
    to the right (left, if you use a negative value) and the y value defines how far
    down (up if you use a negative value) the object will move. Values are normally
    defined in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the same class style we used as an example for the `scale` transform
    in the previous section, but with the `translate` transform set to move the object
    35 pixels to the left and 15 pixels down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Applying rotation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `rotate` transform is perhaps the simplest to define—there is only one parameter
    called the rotation angle. This angle can be positive (rotates clockwise) or negative
    (rotates counterclockwise).
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of code that rotates an object 15 degrees clockwise is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of a class style that rotates an object 15 degrees with the same
    size and other attributes of the examples we''ve used previously is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Caution – leave space for rotate (and skew)**'
  prefs: []
  type: TYPE_NORMAL
- en: When you rotate an object (or, as we will see, if you skew it), the object will
    overlap with nearby objects. Typically (unless such an overlap is part of the
    design), this is addressed by adding margin values to the object style large enough
    to prevent an overlap.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a skew transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `skew` transform is perhaps defined by two parameters separated by a comma.
    The first defines the x-axis (horizontal) transform in degrees, and the second
    value defines vertical distortion. If you use zero as a value for one of the two
    axes, the result is a parallelogram as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a skew transition](img/4742_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s an example of code for a class tag that applies the yellow background,
    red border, and other attributes of our previous examples that skews an object
    15 degrees on the box''s axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following is an example of a class style that rotates an object 15
    degrees, with the same size and other attributes of the examples we''ve used previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Other CSS3 transform effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the two-dimensional (2D) transform effects of CSS3 that we have
    explored in this chapter, there are other three-dimensional transforms in emerging
    states of support. They are, in general, not supported by any browsers except
    the WebKit set (SafariLimit), and from what I've been able to understand, at this
    point they are not that applicable without additional JavaScript that animates
    them.
  prefs: []
  type: TYPE_NORMAL
- en: That said, stay tuned. The world of CSS3 transforms is one of constant motion
    and development, and 3D transforms may gain broader support and become more accessible
    to developers.
  prefs: []
  type: TYPE_NORMAL
- en: Compound transforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can combine as many as all four transforms into a single transform rule.
    For example, to create a transform that applies `skew` (5 degrees on both the
    x and y axes), `scale` (multiples of 1.5 on both the x and y axes), and `rotate`
    (45 degrees), with a prefix that works with WebKit browsers, you would use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As transforms tend to apply rather radical changes to objects, and given that
    `skew` and `rotate` create similar effects, the aesthetics and accessibility that
    warrant combining multiple transforms in a single object are limited, but available.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive effects and transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having surveyed and walked through the process of creating and applying CSS3
    effects and transforms, we turn now to one of the most exciting, dynamic aspects
    of these new style features: **interactivity**.'
  prefs: []
  type: TYPE_NORMAL
- en: By interactivity, we mean that an object or elements of a page react to a visitor's
    action with their own action. A visitor hovers over an object, and that object
    moves, resizes, rotates, skews, develops a shadow, becomes semitransparent, or
    undergoes some other change.
  prefs: []
  type: TYPE_NORMAL
- en: There are two basic techniques for combining interactivity with effects and
    transforms. One is to use JavaScript and write or generate code that combines
    with transforms and effects. Combining JavaScript with effects and transforms
    can be a very powerful technique for creating interactivity on the level that
    can be generated, for example, using Flash.
  prefs: []
  type: TYPE_NORMAL
- en: The other, more accessible technique is to avail ourselves of the widely supported
    and easy-to-use `:hover` pseudo-class. If you're familiar with defining a "hover"
    state for a link, where a link takes on a unique appearance when hovered over,
    you have a basic idea of how this is going to work. And, we'll walk through that
    in more detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations of using effects with JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several definite limitations to creating interactive effects and transforms
    with JavaScript that places it beyond the scope of what we can address in this
    book. The first is that, in order to implement this approach, one needs to know
    JavaScript, and while that knowledge is available in thick books, through massive
    online resources, and with pay-to-use tools that generate JavaScript, it is well
    beyond what I could cover in this chapter, let alone this book. Further, JavaScript
    is not universally supported in browsing environments, and much of the appeal
    of HTML5 and CSS3 is that with proper accounting for non-HTML5 environments, nearly
    everything we are exploring in this book will work or at least not cause harm
    in any browsing environment.
  prefs: []
  type: TYPE_NORMAL
- en: Dreamweaver's underrated but also under-supported tool for generating JavaScript,
    the Behaviors panel, does not support CSS3 effects and transforms and so is, as
    yet, impotent when it comes to combining JavaScript effects and transforms.
  prefs: []
  type: TYPE_NORMAL
- en: We've partly enumerated the drawbacks (and plusses) for combining JavaScript
    with CSS3 effects and transforms because you're likely to encounter examples,
    models, and much discussion on the web among developers exploring the cutting
    edge of CSS3 and combining their work with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Interactivity with the :hover pseudo-class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is, however, a much more accessible tool for applying interactive effects
    and transforms: the `:hover` pseudo-class.'
  prefs: []
  type: TYPE_NORMAL
- en: Pseudo-classes are CSS modifiers that define the appearance of a web page object
    depending on the state of an object. They are best known for, and most widely
    applied as, modifiers on links.
  prefs: []
  type: TYPE_NORMAL
- en: For example, unvisited links on a web page are displayed as underlined in blue
    by default, visited links as underlined in purple, and active links as underlined
    in red. These parameters are easily changed in Dreamweaver's **CSS Styles** panel.
    And, they are supported in every modern browser and even in older ones.
  prefs: []
  type: TYPE_NORMAL
- en: But in addition to the `:visited` and `:link :active` pseudo-class styles (pseudo-classes),
    there is another, more dynamic state called `:hover`. This definable state applies
    to anything on a page that a visitor hovers his or her mouse over.
  prefs: []
  type: TYPE_NORMAL
- en: By applying effects and transforms to the hover state of an object, you can
    make it interact in a defined way with a visitor's mouse actions.
  prefs: []
  type: TYPE_NORMAL
- en: Animating CSS3 transforms in Dreamweaver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's now walk through exactly how CSS transforms and effects work with the
    `:hover` pseudo-class.
  prefs: []
  type: TYPE_NORMAL
- en: The basic concept is that you define a `:hover` pseudo-class for the object
    you wish to transform when being hovered over. This object can be an HTML tag
    (like `<img>`) or a `<div>` tag (either class or ID).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the `<img>` tag, for instance, this line of code in the CSS
    file would define a `scale` transform, increasing the height and width by 10 percent
    when the image is hovered over:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Or taking another example—a div tag—the following code would cause a class
    style container named `.box` to rotate 45 degrees when hovered over:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Producing an effect like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating CSS3 transforms in Dreamweaver](img/4742_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example – create an animated effect and transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe creates a class style box that can be reused repeatedly on a page
    that displays a CSS3 effect and a CSS3 transform when hovered over. As such, it
    is an easily adaptable recipe—you can use the information in this chapter to substitute
    different effects and transforms that we'll use in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: In our particular scenario, we'll apply rounded corners and enlarge the box
    slightly when it is hovered over.
  prefs: []
  type: TYPE_NORMAL
- en: Putting the pieces in place
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s what you need to have in place before diving into this recipe: you
    need to have a Dreamweaver site defined. Jump back to [Chapter 1](ch01.html "Chapter 1. Creating
    Sites and Pages with Dreamweaver CS6"), *Creating Sites and Pages with Dreamweaver
    CS6*, and review the discussion and steps there for creating a Dreamweaver site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With your site defined, you''re ready! Everything we need is right here in
    Dreamweaver CS6\. Let''s first set up the files we need:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** to open the **New Document** dialog. Choose **Blank
    Page** in the **Category** column, **HTML** in the **Page Type** column, and **<none>**
    in the **Layout** column. From the **DocType** popup, choose **HTML5**. The **Attach
    CSS File** box should be blank at this point. With the new file defined, click
    on **Create** to create a new, blank Dreamweaver page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Hover` in the title area of the **Document** toolbar. Navigate to **File**
    | **Save** and assign a filename. Let's use the `hover.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll create the CSS file that will hold our styles—particularly the CSS3
    effect and transform styles that we'll be using. Navigate to **File** | **New**.
    The **New Document** dialog opens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CSS** in the **Page Type** category and click on the **Create** button.
    Save the CSS file; use the filename `hover.css`. A blank CSS page opens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the HTML file. You can do this from the files tabs at the top of the
    Dreamweaver **Document** window. Or to avoid any possible confusion (given we
    have two similarly named files open), click on the **Window** menu and click on
    the `hover.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the HTML page (you can be in any of the three views, but the **Design** view
    works fine), navigate to **Window** | **CSS Styles** to display the **CSS Styles**
    panel (if that panel is not visible).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Attach Style Sheet** link icon at the bottom of the **CSS Styles**
    panel, and navigate to and link the `hover.css` stylesheet file. The (empty) stylesheet
    file appears in the **CSS Styles** panel. You can see all the elements we've defined
    so far, and your screen should, at this point, look like the one shown in the
    following screenshot:![Putting the pieces in place](img/4742_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **New CSS Rule** icon at the bottom of the **CSS Styles** panel
    to open the **New CSS Rule** dialog. From the **Selector Type** popup choose **Class**,
    and in the **Selector Name** box type `box`. In the **Rule Definition** area if
    `hover.css` is not already selected, choose it from the **Rule Definition** popup.
    Click on **OK** to open the **CSS Rule Definition for .box in hover.css** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Background** category of the **CSS Rule Definition** dialog, choose
    a light colored background color (such as yellow). In the **Box** category, apply
    the following rules as illustrated in the following screenshot. Don't click on
    **OK** yet! We'll define a border next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Width**: **200** **px**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Height**: **200** **px**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Float**: **left**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Padding**: **25** (for all)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Margin**: **50** (for all)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Putting the pieces in place](img/4742_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A note on the settings**'
  prefs: []
  type: TYPE_NORMAL
- en: We're creating a 200-pixel square box, which is a nice size for holding a sidebar
    message or picture and caption. We floated it to the left-hand side so other content
    can be wrapped around the box on the right-hand side. The large margin and padding
    provides plenty of flexibility for effects that might expand the box or impinge
    on the space of nearby elements.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's create a kind of fun border. In the **Border** category of the **CSS
    Rule Definition** dialog, define the border as dashed, thick, and red, as shown
    in the following screenshot. Then click on **OK** to create the style rule.![Putting
    the pieces in place](img/4742_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's place one (or `-- your option --` more than one) instance of this class
    style on the page now. Navigate to **Insert** | **Layout Objects** to open the
    **Insert Div Tag** dialog. Choose **box** from the **Class** popup and click on
    **OK**. Note that you can do this repeatedly if you wish to use this box as a
    page design element, as shown in the following screenshot. You can also use this
    figure to double-check the rules for the `.box` class style in the **CSS Styles**
    panel.![Putting the pieces in place](img/4742_04_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a hover class style to animate effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now define the `:hover` pseudo-class style to animate this box with scaling
    and rounded corners. We were able to create a sized, floated box with a defined
    border using Dreamweaver CS6's **CSS Styles** panel and dialogs. For the CSS3
    styles required in the following steps, we won't be quite so lucky. We will define
    a style using the **CSS Styles** panel, but we will have to enter the CSS3 style
    code ourselves using just Dreamweaver CS6's code hints.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New CSS Rule** icon at the bottom of the **CSS Styles** panel
    to open the **New CSS Rule** dialog. From the **Selector Type** popup choose **class**,
    and in the **Selector Name** box type `.box:hover`. In the **Rule Definition**
    area, if `hover.css` is not already selected, choose it from the **Rule Definition**
    popup. Click on **OK** to open the **CSS Rule Definition dialog for .box:hover
    in hover.css** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the rules we need are not available in the **CSS Rule Definition** dialog,
    click on **OK** to save the style `.box:hover` without any rules at the current
    stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Window** | **hover.css** to open the CSS styles file in Dreamweaver's
    **Code** view. Refer to the following code to define a scale transition that bumps
    the size of the box up to a noticeable, but not obnoxious, 2 percent and applies
    subtle rounded corners to the box. The code makes this effect accessible for Safari
    (`-webkit`), IE9 (`generic`), Opera (`-o`), and Firefox (`-moz`) users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code specifically for the `.box:hover` style is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save the CSS file (navigate to **File** | **Save**). Use the **Window** menu
    to return to the **hover.html** page. Test the effect and transform in the **Live**
    view, along with other browsers using the **Preview** option of the **File** menu
    in the browser. The following screenshot shows the effect in Firefox—the middle
    box displays as slightly larger with rounded corners.![Using a hover class style
    to animate effects](img/4742_04_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once again, this is a highly adaptable recipe and can be the basis for creating
    page layout elements that interact with visitors hovering over them. You could,
    for example, replace `scale` with `rotate`, `skew`, or even `translate` to alter
    the transform. And you could replace the `border-radius` effect with shadows or
    opacity changes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a wide range of effects and transforms available
    with the emergence of the CSS3 standards for stylesheets. Those "standards" are
    inconsistent, so there is a need to provide alternate (prefixed) rules for different
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: These transforms and effects are useful as design tools in their own right,
    and they are even more dynamic design factors when made interactive by defining
    `:hover` pseudo-class elements that cause them to appear when (and only when)
    an object is hovered over.
  prefs: []
  type: TYPE_NORMAL
- en: Dreamweaver CS6 provides a basic framework for defining and applying CSS3 transforms
    and effects. We examined Dreamweaver's limited CSS3 tools, like the ability to
    use code hints in the **Code** view and useful prompts for transforms in the **CSS
    Styles** panel.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter of this book, we explore adding "native" audio and video
    to web pages using HTML5\. Native audio and video runs directly in a browser without
    plugin players (such as Windows Media Player, QuickTime Player, or Flash Player).
  prefs: []
  type: TYPE_NORMAL
