- en: '*Chapter 5*: Building Your First Helm Chart'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about the various aspects that comprise
    a Helm chart. Now, it is time to put this knowledge to the test by building a
    Helm chart. Learning to build a Helm chart will allow you to package a complex
    Kubernetes application in a way that makes it simple to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to build a Helm chart that deploys the `guestbook`
    application, a common quickstart application used throughout the Kubernetes community.
    This chart will be built by following best practices around Kubernetes and Helm
    chart development, to provide a well-written and easily maintainable piece of
    automation. Throughout the process of developing this chart, you will learn many
    different skills that you can apply toward building your own Helm charts. At the
    end of the chapter, you will learn how to package your Helm chart and deploy it
    to a chart repository, where it can be easily accessible to end users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the main topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Guestbook application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Guestbook Helm chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the Guestbook Helm chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing the Guestbook chart to a chart repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires the following technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`minikube`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the preceding tooling, you will find the GitHub repository for
    this book located at [https://github.com/PacktPublishing/-Learn-Helm](https://github.com/PacktPublishing/-Learn-Helm).
    We will reference the `helm-charts/charts/guestbook` folder contained in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you have your own GitHub account in order to complete
    the final section of this chapter, *Creating a chart repository.* Instructions
    on how to create your own account will be provided in that section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Guestbook application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will create a Helm chart to deploy the Guestbook tutorial
    application provided by the Kubernetes community. This application is introduced
    in the Kubernetes documentation at the following page[: https://kubernetes.io/docs/tutorials/stateless-application/guestboo](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)k/'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Guestbook application is a simple **PHP: Hypertext Preprocessor** (**PHP**)
    frontend designed to persist messages to a Redis backend. The frontend consists
    of a dialog box and a **Submit** button, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: The Guestbook PHP frontend'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.1: The Guestbook PHP frontend'
  prefs: []
  type: TYPE_NORMAL
- en: 'To interact with this application, users can follow these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type a message in the **Messages** dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Submit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the **Submit** button is clicked, the message will be saved to a Redis
    database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Redis is an in-memory, key-value data store that, in this chapter, will be clustered
    for data replication. The cluster will consist of one master node that the Guestbook
    frontend will write to. Once written to, the master node will replicate the data
    across multiple slave nodes, from which the Guestbook frontend will read.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram describes how the Guestbook frontend interacts with the
    Redis backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2: Guestbook frontend and Redis interaction'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.2: Guestbook frontend and Redis interaction'
  prefs: []
  type: TYPE_NORMAL
- en: With a basic understanding of how the Guestbook frontend and Redis backend interact,
    let's set up a Kubernetes environment to begin developing a Helm chart. Before
    we begin, let's first start minikube and create a dedicated namespace for this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to see your chart in action, you''ll need to create your minikube
    environment by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start minikube by running the `minikube start` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new namespace called `chapter5,` like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We'll use this namespace when the Guestbook chart is deployed. Now that the
    environment is prepared, let's begin writing the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Guestbook Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a Helm chart to deploy the Guestbook application.
    The final chart has been published under the `helm-charts/charts/guestbook` folder
    of the Packt repository. Feel free to reference this location as you follow along
    with the examples.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin development by first scaffolding the Guestbook Helm chart to create
    the chart's initial file structure.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the initial file structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you may recall from [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203),
    *Understanding Helm Charts*, Helm charts must follow a particular file structure
    in order to be considered valid. Namely, a chart must contain the following required
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Chart.yaml`: Used to define chart metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values.yaml`: Used to define default chart values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates/`: Used to define chart templates and Kubernetes resources to be
    created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We provided a list of each of the possible files a chart can contain in [*Chapter
    4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203), *Understanding Helm Charts*,
    but the three preceding files are the files that are necessary in order to begin
    developing a new chart. While these three files can be created from scratch, Helm
    provides a `helm create` command that can be used to more quickly scaffold a new
    chart. In addition to creating the files listed previously, the `helm create`
    command will also generate many different boilerplate templates that can be leveraged
    to more quickly write your Helm chart. Let's use this command to scaffold out
    a new Helm chart called `guestbook`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `helm create` command takes the name of the Helm chart (`guestbook`) as
    an argument. Run the following command on your local command line to scaffold
    this chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon running this command, you will see a new directory on your machine called
    `guestbook/`. This is the directory that contains your Helm chart. Inside the
    directory, you will see the following four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`charts/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chart.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, the `helm create` command created a `charts/` directory, in
    addition to the required `Chart.yaml`, `values.yaml`, and `templates/` files.
    The `charts/` directory is currently blank, but will later become automatically
    populated when we declare a chart dependency. You may also notice that the other
    mentioned files have been automatically populated with default settings. We will
    leverage many of these defaults throughout this chapter while developing the `guestbook`
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you explore the contents underneath the `templates/` directory, you will
    find that many different template resources have been included by default. These
    resources will save time that would have otherwise been spent creating these from
    scratch. While many useful templates were generated, we will remove the `templates/tests/`
    folder. This folder is used to contain the tests for your Helm chart, but we will
    focus on writing your own tests in [*Chapter 6*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292),
    *Testing Helm Charts*. Run the following command to remove the `templates/tests/`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that the `guestbook` chart has been scaffolded, let's proceed by evaluating
    the `Chart.yaml` file that has been generated.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the chart definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The chart definition, or `Chart.yaml` file, is used to contain the metadata
    of a Helm chart. We discussed each of the possible options of a `Chart.yaml` file
    in [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203), *Understanding
    Helm Charts*, but let''s recap on some of the primary settings contained within
    a typical chart definition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apiVersion`: Set to either the `v1` or `v2` (`v2` is the preferred option
    for Helm 3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: The version of the Helm chart. This should be a version that adheres
    to **Semantic Versioning specifications** (**SemVer**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appVersion`: The version of the application being deployed by the Helm chart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of the Helm chart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: A brief description of the Helm chart and what it is designed
    to deploy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: Set to either `application` or `library`. `Application` charts are
    used to deploy a specific application. `Library` charts contain a set of helper
    functions (also called ''named templates'') that can be used across other charts
    to reduce boilerplate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies`: A list of charts that the Helm chart depends on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you observe your scaffolded `Chart.yaml` file, you will notice that each
    of these fields (except for dependencies) has already been set. This file can
    be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3: The scaffolded Chart.yaml file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.3: The scaffolded Chart.yaml file'
  prefs: []
  type: TYPE_NORMAL
- en: We will leave each of the settings contained within this file at their defaults
    for now (though feel free to write a more creative description if you would like).
    We'll update a couple of these default values when they become relevant, later
    on in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: An additional setting that is not included in the default chart definition,
    but should be considered, is `dependencies`. We will discuss this in greater detail
    in the next section, where a Redis dependency will be added to simplify the development
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Redis chart dependency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned in the *Understanding the Guestbook application* section, this
    Helm chart must be able to deploy a Redis database that will be used to save the
    state of the application. If you were creating this chart completely from scratch,
    you would need to have a proper understanding of how Redis works and how it can
    be properly deployed to Kubernetes. You would also need to create the corresponding
    chart templates required to deploy Redis.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, by including a Redis dependency that already contains the logic
    and required chart templates, you can greatly reduce the amount of effort involved
    in creating the `guestbook` Helm chart. Let's modify the scaffolded `Chart.yaml`
    file by adding a Redis dependency to simplify chart development.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process to add a Redis chart dependency can be performed by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search the Helm Hub repository for Redis charts by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the charts that will be displayed is Bitnami''s Redis chart. This is
    the chart we will use as the dependency. If you have not already added the `bitnami`
    chart repository in [*Chapter 3*](B15458_03_Final_JM_ePub.xhtml#_idTextAnchor147),
    *Installing Your First Helm Chart,* add this chart repository now by using the
    `helm add repo` command. Note that the repository **Uniform Resource Locator**
    (**URL**) was retrieved from the Redis chart''s page in the Helm Hub repository.
    The code can be seen in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Determine the version of the Redis chart you would like to use. A list of version
    numbers can be found by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The version that you must select is a chart version, not an app version. The
    app version only describes the Redis version, while the chart version describes
    the version of the actual Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies allow you to choose a particular chart version, or a wildcard such
    as `10.5.x`. Using a wildcard allows you to easily keep your chart updated with
    the latest Redis version matching that wildcard (which, in this case, is version
    `10.5.14`). In this example, we will use version `10.5.x`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `dependencies` field to the `Chart.yaml` file. For the `guestbook`
    chart, we will configure this field with the following minimum required fields
    (additional fields are discussed in [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203),
    *Understanding Helm Charts*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`name`: The name of the dependency chart'
  prefs: []
  type: TYPE_NORMAL
- en: '`version` : The version of the dependency chart'
  prefs: []
  type: TYPE_NORMAL
- en: '`repository`: The repository URL of the dependency chart'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following **YAML Ain''t Markup Language** (**YAML**) code to the end
    of your `Chart.yaml` file, providing the information you have gathered about the
    Redis chart to configure the dependency''s settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have added your dependency, your full `Chart.yaml` file should appear
    as follows (comments and empty lines have been removed for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This file can also be reviewed in the P[ackt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/g](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/Chart.yaml)uestbook/Chart.yaml
    (be aware that the version and `appVersion` fields may differ, as we will modify
    these later in the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Now that your dependency has been added to the chart definition, let's download
    this dependency to ensure that it has been configured properly.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Redis chart dependency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When downloading a dependency for the first time, you should use the `helm dependency
    update` command. This command will download your dependency to the `charts/` directory
    and will generate the `Chart.lock` file, which specifies metadata about the chart
    that was downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `helm dependency update` command to download your Redis dependency.
    The command takes as an argument the location of your Helm chart, and can be seen
    in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can validate the fact that the download was successful by ensuring that
    the Redis chart appears under the `charts/` folder, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that the Redis dependency has been included, let's proceed by modifying
    the `values.yaml` file. Here, we will override values specific to configuring
    Redis, as well as the Guestbook frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the values.yaml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Helm chart's `values.yaml` file is used to provide a set of default parameters
    that are referenced throughout the chart's templates. When users interact with
    the Helm chart, they can override these defaults if necessary, using the `--set`
    or `--values` flags. In addition to providing a set of default parameters, a well-written
    Helm chart should be self-documenting, containing intuitive names for each value
    and comments that explain difficult values to implement. Writing a self-documenting
    `value.yaml` file allows users and maintainers alike to simply refer to this file
    if they need to understand the chart's values.
  prefs: []
  type: TYPE_NORMAL
- en: The `helm create` command generates a values file that contains many boilerplate
    values commonly used throughout Helm chart development. Let's finish configuring
    the Redis dependency by adding a few additional values at the end of this file.
    Afterward, we'll focus on modifying some of the boilerplate values to configure
    the Guestbook frontend resources.
  prefs: []
  type: TYPE_NORMAL
- en: Adding values to configure the Redis chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although adding a dependency prevents you from needing to create its chart templates,
    you may still need to override some of its values in order to configure it. In
    this case, it will be necessary to override a few of the Redis chart's values
    to allow it to work seamlessly with the rest of the `guestbook` chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by first learning about the Redis chart''s values. This can be
    done by running the `helm show values` command against the downloaded Redis chart,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Be sure to modify the command to match the Redis chart version that you downloaded.
    With a list of values displayed, let''s identify those that will need to be overridden,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first value that will need to be overridden in the Redis chart is `fullnameOverride`.
    This value appears in the `helm show values` output, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Charts often use this value in a named template called `$CHART_NAME.fullname`
    to easily generate their Kubernetes resource names. When `fullnameOverride` is
    set, the named template will evaluate to this value. Otherwise, the result of
    this template will be based on the `.Release.Name` object, or the name of the
    Helm release provided at installation.
  prefs: []
  type: TYPE_NORMAL
- en: The Redis dependency uses the `redis.fullname` template to help set the Redis
    master and Redis slave service names.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet shows an example of how the Redis master service name
    is generated in the Redis chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The Guestbook application requires the Redis services to be named `redis-master`
    and `redis-slave`. As a result, the `fullnameOverride` value should be set to
    `redis`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in learning more about how the `redis.fullname` template
    works and how it is applied throughout the Redis chart, you can unarchive the
    Redis dependency under the `charts/` folder. In that folder, you will find the
    `redis.fullname` template in the `templates/_helpers.tpl` file and note its invocations
    throughout each YAML template. (It turns out that your generated `guestbook` chart
    also contains a similar template in the `_helpers.tpl` file, but in general, it's
    safer to refer to the dependency's resources in case their maintainer customized
    the template.)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in learning more about how the Guestbook application
    works, the source code can be found on GitHub. The following file defines the
    required Redis service names:'
  prefs: []
  type: TYPE_NORMAL
- en: https://github.com/kubernetes/examples/blob/master/guestbook/php-redis/guestbook.php
  prefs: []
  type: TYPE_NORMAL
- en: 'The next value that needs to be overridden from the Redis chart is `usePassword`.
    The following code snippet shows what this value looks like in the `helm show
    values` output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The Guestbook application has been written for unauthenticated access to the
    Redis database, so we will want to set this value to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final value that we need to override is `configmap`. Here is how this value
    appears in the `helm show values` output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The default `configmap` value will enable both types of persistence that Redis
    can employ, **Append Only File** (**AOF**) and **Redis Database File** (**RDF**)
    persistence. AOF persistence in Redis works by adding new data entries to a changelog-style
    file to provide a history of changes. RDF persistence works by copying data to
    a file on certain intervals, so as to create data snapshots.
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we will create simple life cycle hooks that allow users
    to back up and restore the Redis database to a previous snapshot. Because only
    RDB persistence works with snapshot files, we will overwrite the `configmap` value
    to read `appendonly no`, which will disable AOF persistence.
  prefs: []
  type: TYPE_NORMAL
- en: 'With each Redis value identified, add these values to the end of your chart''s
    `values.yaml` file, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Remember from [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203)*,*
    *Understanding Helm Charts,* that values overridden from a chart dependency must
    be scoped underneath that chart name. That is why each of these values will be
    added underneath a `redis:` stanza.
  prefs: []
  type: TYPE_NORMAL
- en: You can check that you have configured your Redis values properly by referencing
    the `v`[`alues.yaml` file located at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/c](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/values.yaml)harts/guestbook/values.yaml
    in the Packt repository.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Some values unrelated to Redis may differ from your `values.yaml` file, as we
    will be modifying these in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: With the Redis dependency's values configured, let's proceed to modify the default
    values generated by `helm create` to deploy the Guestbook frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying values to deploy the Guestbook frontend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you ran the `helm create` command at the beginning of the chapter, some
    of the items that it created were default templates under the `templates/` directory
    and default values in the `values.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the default templates that were created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`deployment.yaml`: Used to deploy the Guestbook application to Kubernetes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ingress.yaml`: Provides one option to access the Guestbook application from
    outside the Kubernetes cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serviceaccount.yaml`: Used to create a dedicated `serviceaccount` for the
    Guestbook application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service.yaml`: Used to load-balance between multiple instances of the Guestbook
    application. Can also provide an option to access the Guestbook application from
    outside the Kubernetes cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_helpers.tp`: Provides a set of common templates used throughout the Helm
    chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NOTES.txt`: Provides a set of instructions used to access the application
    after it is installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these templates is configured by the chart's values. While the `helm
    create` command gave a great starting point toward deploying the Guestbook application,
    it did not provide each of the default values needed. In order to replace the
    defaults with their required values, we can observe the generated chart templates
    and modify their parameters accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk through the template locations that indicate where modifications
    need to be made.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first location is in the `deployment.yaml` chart template. Within that
    file, there is a line that indicates the container image to deploy, as illustrated
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the image is determined by the `image.repository` value and
    the `AppVersion` chart setting. If you look in your `values.yaml` file, you can
    see that the `image.repository` value is currently configured to deploy the `nginx`
    image by default, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if you look in the `Chart.yaml` file, you can see that the `AppVersion`
    is currently set to `1.16.0`, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the Guestbook application originated as a Kubernetes tutorial, you can
    find the specific image that needs to be deployed in the Kubernetes documentation
    at https://kubernetes.io/docs/tutorials/stateless-application/guestbook/#creating-the-guestbook-frontend-deployment.
    In the documentation, you can see that the image must be specified as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As a result, in order for the image field to be properly generated, the `image.repository`
    value must be set to `gcr.io/google-samples/gb-frontend`, and the `AppVersion`
    chart setting must be set to `v4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second location where a modification must be made is in the `service.yaml`
    chart template. In this file, there is a line that determines the service type,
    as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the `service.type` value, this service will default to having
    a `ClusterIP` service type, shown in the `values.yaml` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: For the `guestbook` chart, we will modify this value to instead create a `NodePort`
    service. This will allow the application to be accessed easier in a minikube environment
    by exposing a port on the minikube **virtual machine** (**VM**). Once connected
    to the port, we can access the Guestbook frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Note that while `helm create` generated an `ingress.yaml` template that would
    also allow access, `NodePort` services are more commonly recommended when working
    in minikube environments because add-ons or enhancements are not required. Luckily,
    the generated chart disables the ingress resource creation by default, so no action
    is required to disable this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have determined the default settings that need to be changed, let''s
    proceed by first updating the `values.yaml` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `image.repository` value so that it is set to `gcr.io/google-samples/gb-frontend`.
    The entire `image:` stanza should now read as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the `service.type` value so that it is set to `NodePort`. The entire
    `service:` stanza should now read as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can verify that your `values.yaml` file has been modified correctly by referring
    to the fi[le in the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-chart](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/values.yaml)s/charts/guestbook/values.yaml.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s update the `Chart.yaml` file so that the correct Guestbook application
    version is deployed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `appVersion` field so that it is set to `v4`. The `appVersion`
    field should now read as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You can verify that your `Chart.yaml` file has been modified correctly by referring
    to the fi[le in the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-char](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/Chart.yaml)ts/charts/guestbook/Chart.yaml.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the chart has been updated with the proper values and settings, let's
    see this chart in action by deploying it to the minikube environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Guestbook chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install your `guestbook` chart, run the following command outside of your
    `guestbook/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following message will be displayed if the installation was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: While the installation was successful, you may find that the Guestbook and Redis
    pods are not immediately in the `Ready` state. When a Pod is not ready, it cannot
    be accessed yet.
  prefs: []
  type: TYPE_NORMAL
- en: You can also force Helm to wait until these pods become ready by passing in
    the `--wait` flag. The `--wait` flag can be accompanied by the `--timeout` flag
    to increase the amount of time in seconds that Helm will wait for pods to become
    ready. The default is set to 5 minutes, which would be more than enough time for
    this application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can ensure that all pods are ready without the `--wait` flag by checking
    each Pod''s status, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When each Pod is ready, you will be able to observe that each Pod reports `1/1`
    under the `READY` column, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4: Output of kubectl get pods –n chapter5 when each Pod is ready'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.4: Output of kubectl get pods –n chapter5 when each Pod is ready'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the pods are ready, you can run the commands that were displayed by the
    release notes. If necessary, they can be displayed again by running the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy and paste the Guestbook URL (output from the `echo` command) into your
    browser, and the Guestbook **user interface** (**UI**) should be displayed, as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5: The Guestbook frontend'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.5: The Guestbook frontend'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to type a message in the dialog box and click **Submit**. The Guestbook
    frontend will display the message under the **Submit** button, which indicates
    that the message has been saved to the Redis database, as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6: The Guestbook frontend displaying a previously sent message'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.6: The Guestbook frontend displaying a previously sent message'
  prefs: []
  type: TYPE_NORMAL
- en: If you are able to write a message and see it displayed on your screen, then
    you have successfully built and deployed your first Helm chart! If you are not
    able to see your messages, your Redis dependency may not have been set up correctly.
    In that case, make sure that your Redis values have been configured properly and
    that your Redis dependency has been properly declared in the `Chart.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are ready, uninstall this chart with the `helm uninstall` command,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You will also need to manually remove the Redis **PersistentVolumeClaims** (**PVCs**),
    since the Redis dependency made the database persistent by using `StatefulSet`
    (which does not automatically remove PVCs when deleted).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to remove the Redis PVCs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will explore ways in which the `guestbook` chart can
    be improved.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the Guestbook Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The chart created in the previous section was able to successfully deploy the
    Guestbook application. However, as is the case with any type of software, the
    Helm chart can always be improved. In this section, we will focus on the following
    two features that will improve the `guestbook` chart:'
  prefs: []
  type: TYPE_NORMAL
- en: Life cycle hooks to back up and restore the Redis database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input validation to ensure only valid values are provided
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's focus first on adding life cycle hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pre-upgrade and pre-rollback life cycle hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will create two life cycle hooks, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first hook will occur in the `pre-upgrade` life cycle phase. This phase
    takes place immediately after the `helm upgrade` command is run, but before any
    Kubernetes resources become modified. This hook will be used to take a data snapshot
    of the Redis database before performing the upgrade, ensuring that the database
    is backed up in case the upgrade is errant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second hook will occur in the `pre-rollback` life cycle phase. This phase
    takes place immediately after the `helm rollback` command is run but before any
    Kubernetes resources are reverted. This hook will restore the Redis database to
    a previously taken data snapshot and will ensure that the Kubernetes resource
    configuration is reverted to match the way it was at the point the snapshot was
    taken.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By the end of this section, you will become more familiar with life cycle hooks
    and some of the powerful capabilities that can be performed with them. Be sure
    to keep in mind that the hooks created in this section are very simple and are
    only there for exploring the basic capabilities of Helm hooks. It is not advised
    to try to use these hooks verbatim in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk through how the `pre-upgrade` life cycle hook can be created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the pre-upgrade hook to take a data snapshot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Redis, data snapshots are contained inside a `dump.rdb` file. We can back
    this file up by creating a hook that first creates a new PVC in the Kubernetes
    namespace. The hook can then create a `job` resource that copies the `dump.rdb`
    file to the new `PersistentVolumeClaim`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `helm create` command generates some powerful resource templates
    that allow the initial `guestbook` chart to be created quickly, it does not scaffold
    out any hooks that can be used for this task. As a result, you can create the
    pre-upgrade hook from scratch by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you should create a new folder to contain the hook templates. While this
    is not a technical requirement, it does help keep your hook templates separate
    from the regular chart templates. It also allows you to group the hook templates
    by function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new folder called `templates/backup` in your `guestbook` file structure,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Next, you should scaffold the two templates required to perform the backup.
    The first template required is a `PersistentVolumeClaim` template that will be
    used to contain the copied `dump.rdb` file. The second template will be a job
    template that will be used to perform the copy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two empty template files to serve as placeholders, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You can double-check your work by referencing the Packt repository. Your file
    structure should appear [identical to the structure found at https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-cha](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook/templates/backup)rts/charts/guestbook/templates/backup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s create the `persistentvolumeclaim.yaml` template. Copy the contents
    of the file below to your `backup/persistentvolumeclaim.yaml` file (this file
    can also be copied from the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/backup/persistentvolumeclaim.yaml.
    Keep in mind that whitespace consists of `spaces`, not tabs, as per valid YAML
    syntax. The contents of the file can be seen here:![Figure 5.7: The backup/persistentvolumeclaim.yaml
    template'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_5.7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.7: The backup/persistentvolumeclaim.yaml template'
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding, let's walk through part of the `persistentvolumeclaim.yaml`
    file to help understand how it was created.
  prefs: []
  type: TYPE_NORMAL
- en: '*Lines 1* and *17* of this file consist of an `if` action. Since the action
    encapsulates the whole file, it indicates that this resource will only be included
    if the `redis.master.persistence.enabled` value is set to `true`. This value defaults
    to `true` in the Redis dependency chart and can be observed using the `helm show
    values` command.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 5* determines the name of the new PVC backup. Its name is based on the
    name given to the Redis master PVC created by the Redis dependency chart, which
    is `redis-data-redis-master-0`, so that it is obvious which PVC this is designed
    to be a backup of. Its name is also based on the revision number. Because this
    hook is run as a pre-upgrade hook, it will try to use the revision number being
    upgraded to. The `sub` function is used to subtract `1` from this revision number,
    so it is obvious that this PVC contains the data snapshot of the previous revision.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 9* creates an annotation to declare this resource as a `pre-upgrade`
    hook. *Line 10* creates a `helm.sh/hook-weight` annotation to determine the order
    in which this resource should be created compared to other pre-upgrade hooks.
    Weights are run in ascending order, so this resource will be created before other
    pre-upgrade resources.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `persistentvolumeclaim.yaml` file is created, we will create the
    final pre-upgrade template, `job.yaml`. Copy the following content to your `backup/job.yaml`
    file (this file can also [be copied from the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/cha](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/backup/job.yaml)rts/guestbook/templates/backup/job.yaml):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](image/Figure_5.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: The backup/job.yaml template'
  prefs: []
  type: TYPE_NORMAL
- en: Let's walk through part of this `job.yaml` template to understand how it was
    created.
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 9* once again defines this template to be a pre-upgrade hook. *Line 11*
    sets the hook weight to `1,` indicating that this resource will be created after
    the other pre-upgrade `PersistentVolumeClaim`.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 10* sets a new annotation to determine when this job should be deleted.
    By default, Helm does not manage hooks beyond their initial creation, meaning
    that they will not be deleted when the `helm uninstall` command is run. The `helm.sh/hook-delete-policy`
    annotation is used to determine the conditions in which a resource should be deleted.
    This job contains the `before-hook-creation` delete policy, which indicates it
    will be removed during a `helm upgrade` command if it already exists in the namespace,
    allowing a fresh job to be created in its place. This job will also have the `hook-succeeded`
    delete policy, which will result in its deletion if it is run successfully.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 19* performs the backup of the `dump.rdb` file. It connects to the Redis
    master, saves the state of the database, and copies the file to the backup PVC.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lines 29* and *32* define the Redis master PVC and backup PVC, respectively.
    These PVCs are mounted by the job in order to copy the `dump.rdb` file.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have followed along with each of the preceding steps, then you have created
    your pre-upgrade hooks for your Helm chart. Let's continue to the next section
    to create the pre-rollback hook. Afterward, we will redeploy the `guestbook` chart
    to see these hooks in action.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the pre-rollback hook to restore the database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whereas the pre-upgrade hook was written to copy the `dump.rdb` file from the
    Redis master PVC to the backup PVC, the `pre-rollback` hook can be written to
    perform the reverse action to restore the database to a previous snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create the pre-rollback hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `templates/restore` folder, which will be used to contain the pre-rollback
    hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, scaffold an empty `job.yaml` template, which will be used to restore
    the database, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You can check that you have created the correct structu[re by referencing the
    Packt repository at https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook/templates/restore)-charts/charts/guestbook/templates/restore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s add content to the `job.yaml` file. Copy the following content
    to your `restore/job.yaml` file (this file can al[so be copied from the Packt
    repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/c](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/restore/job.yaml)harts/guestbook/templates/restore/job.yaml):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.9: The rollback/job.yaml template'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.9.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.9: The rollback/job.yaml template'
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 7* of this template declares this resource as a `pre-rollback` hook.'
  prefs: []
  type: TYPE_NORMAL
- en: The actual data restore is performed on *lines 18* and *19*. *Line 18* copies
    the `dump.rdb` file from the backup PVC to the Redis master PVC. Once copied,
    *line 19* restarts the database so that the snapshot can be reloaded. The command
    used to restart the Redis database will return a failed exit code because the
    connection to the database will be terminated unexpectedly, but this can be resolved
    by appending `|| true` to the command, which will negate the exit code.
  prefs: []
  type: TYPE_NORMAL
- en: '*Line 29* defines the Redis master volume, and *line 32* defines the desired
    backup volume, which is determined by the revision that it is being rolled back
    to.'
  prefs: []
  type: TYPE_NORMAL
- en: With the pre-upgrade and pre-rollback life cycle hooks created, let's see them
    in action by running them in the minikube environment.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the life cycle hooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to run the life cycle hooks you created, you must first install your
    chart again by running the `helm install` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: When each Pod reports the `1/1` `Ready` state, access your Guestbook application
    by following the displayed release notes. Note that the port to access the application
    will be different than it was previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a message once you access the Guestbook frontend. An example message
    can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10: The Guestbook frontend upon installing the Guestbook chart and
    entering a message'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.10: The Guestbook frontend upon installing the Guestbook chart and
    entering a message'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a message has been written and its text is displayed under the **Submit**
    button, run the `helm upgrade` command to trigger the pre-upgrade hook. The `helm
    upgrade` command will hang briefly until the backup has finished, and can be seen
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'When the command returns, you should find the Redis master PVC along with a
    new PVC created, called `redis-data-redis-master-0-backup-1`, which can be seen
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This PVC contains a data snapshot that can be used to restore the database during
    the pre-rollback life cycle phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now proceed to add an additional message to the Guestbook frontend.
    You should have two messages appear under the **Submit** button, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11: Guestbook messages before running the rollback'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.11: Guestbook messages before running the rollback'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the `helm rollback` command to revert back to the first revision.
    This command will hang briefly until the restore process is finished, and can
    be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'When this command returns, refresh your Guestbook frontend in the browser.
    You will see the message you added after the upgrade disappear because it did
    not exist before the data backup was taken, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12: The Guestbook frontend after the pre-rollback life cycle phase
    is complete'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.12: The Guestbook frontend after the pre-rollback life cycle phase
    is complete'
  prefs: []
  type: TYPE_NORMAL
- en: While this backup-and-restore scenario served as a simple use case, it demonstrates
    one of many possibilities that adding Helm life cycle hooks to your charts can
    provide.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Hooks can be skipped by adding the `--no-hooks` flag to the corresponding life
    cycle command (`helm install`, `helm upgrade`, `helm rollback`, or `helm uninstall`).
    The command to which this command is applied will skip the hooks for that life
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: We will now focus on user input validation and how the Guestbook chart can be
    further improved upon to help prevent improper values from being provided.
  prefs: []
  type: TYPE_NORMAL
- en: Adding input validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with Kubernetes and Helm, input validation is automatically performed
    by the Kubernetes **application programming interface** (**API**) server when
    a new resource is created. This means that if an invalid resource is created by
    Helm, an error message will be returned by the API server, resulting in a failed
    installation. Although Kubernetes performs native input validation, there may
    still be cases in which chart developers will want to perform validation before
    the resources reach the API server.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin exploring how input validation can be performed by using the `fail`
    function in the `guestbook` Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: Using the fail function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fail` function is used to immediately fail template rendering. This function
    can be used in cases where users have provided a value that is invalid. In this
    section, we will implement an example use case to restrict user input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `guestbook` chart''s `values.yaml` file contains a value called `service.type`,
    which is used for determining the type of service that should be created for the
    frontend. This value can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We set this value to default to `NodePort`, but technically, other service types
    can be used. Imagine you wanted to restrict the service type to only `NodePort`
    and `ClusterIP` services. This action can be performed by using the `fail` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to restrict the service type in your `guestbook` chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the `templates/service.yaml` service template. This file contains a
    line that sets the service type depending on the `service.type` value, as illustrated
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We should check that the `service.type` value first equals `ClusterIP` or `NodePort`
    before setting the service type. This can be done by setting a variable to the
    list of proper settings. Then, a check can be performed to ascertain that the
    `service.type` value is included in the list of valid settings. If it is, then
    proceed to set the service type. Otherwise, chart rendering should be halted and
    an error message should be returned to the user, notifying them of the valid `service.type`
    inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `service.yaml` file illustrated next to implement the logic described
    in *Step 1*. This file can also be copied from the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/service.yaml:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](image/Figure_5.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.13: The service.type validation implemented in the service.yaml template'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lines 8* through *13* represent the input validation. *Line 8* creates a variable
    called `serviceTypes` that equals a list of proper service types. *Lines 9* through
    *13* represent an `if` action. The `has` function in *line 9* will check whether
    the `service.type` value is included in `serviceTypes`. If it is, then rendering
    will proceed to *line 10* to set the service''s type. Otherwise, rendering will
    proceed to *line 12*. *Line 12* uses the `fail` function to halt template rendering
    and displays a message to the user about the valid service types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attempt to upgrade your `my-guestbook` release by providing an invalid service
    type (if you have uninstalled your release, an installation will suffice as well).
    To do so, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If your changes in the preceding *Step 2* were successful, you should see a
    message similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: While validating a user's input with `fail` is a good way to ensure that provided
    values fit within a certain set of constraints, there are also occasions where
    you need to ensure that users have even provided certain values in the first place.
    This can be accomplished by using the `required` function, explained in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Using the required function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `required` function, like `fail`, is also used to halt template rendering.
    The difference is that, unlike `fail`, the `required` function is used to ensure
    that a value is not left blank when the chart's templates are rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that your chart contains a value called `image.repository`, as illustrated
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This value is used to determine the image that will be deployed. Given this
    value's importance to the Helm chart, we can back it with the `required` function
    to ensure that it always has a value when the chart is installed. Although we
    provide a default in this chart currently, adding the `required` function would
    allow you to remove this default if you wanted to ensure that users always provided
    their own container image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to implement the `required` function against the `image.repository`
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the `templates/deployment.yaml` chart template. The file contains a
    line that sets the container image based on the `image.repository` value (the
    `appName` chart setting also helps to set the container image, but for this example,
    we will focus only on `image.repository`), as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The `required` function takes the following two arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An error message to display whether the value is provided The value that must
    be provided
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given these two arguments, modify the `deployment.yaml` file so that the `image.repository`
    value is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add this validation, you can copy from the followi[ng code snippet or reference
    the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/h](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/deployment.yaml)elm-charts/charts/guestbook/templates/deployment.yaml:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Figure_5.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.14: The deployment.yaml snippet that uses the required function on
    line 28'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attempt to upgrade your `my-guestbook` release by providing an empty `image.repository`
    value, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If your changes were successful, you should see an error message similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you have successfully written your first Helm chart, complete
    with life cycle hooks and input validation!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to create a simple chart repository
    using GitHub Pages, which can be used to make your `guestbook` chart available
    to the world.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the Guestbook chart to a chart repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have completed the development of the Guestbook chart, the chart
    can be published to a repository so that it is easily accessible for other users.
    Let's begin by first creating the chart repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a chart repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chart repositories are servers containing two different components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Helm charts, packaged as `tgz` archives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `index.yaml` file, containing metadata about the charts contained in the
    repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic chart repositories require maintainers to generate their own `index.yaml`
    files, while more complex solutions such as the Helm community's `ChartMuseum`
    tool dynamically generate the `index.yaml` file when new charts are pushed to
    the repository. In this example, we will create a simple chart repository using
    GitHub Pages. GitHub Pages allows maintainers to create a simple static hosting
    site out of a GitHub repository, which can be used to create a basic chart repository
    to serve Helm charts.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to have a GitHub account to create a GitHub Pages chart repository.
    [If you already have a Gi](https://github.com/login)tHub account, you can log
    in at https://githu[b.com/login. Otherwise,](https://github.com/join) you can
    create a new account at https://github.com/join.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have logged in to GitHub, follow [these steps to create](https://github.com/new)
    your chart repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the https://github.com/new link to access the **Create a new repository**
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name for your chart repository. We suggest the name `Learn-Helm-Chart-Repository`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the checkbox next to **Initialize this repository with a README**. This
    is required because GitHub does not allow you to create a static site if it does
    not contain any content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can leave the rest of the settings at their default values. Note that in
    order to leverage GitHub Pages, you must leave the privacy setting set to **Public**
    unless you have a paid GitHub Pro account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create Repository** button to finish the repository creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although your repository has been created, it is not ready to serve Helm charts
    until GitHub Pages is enabled. Click the **Settings** tab within your repository
    to access your repository settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the **GitHub Pages** section of the **Settings** page (and **Options**
    tab). It appears toward the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Source**, select the option in the drop-down list called **master branch**.
    This will allow GitHub to create a static site that serves the contents of your
    master branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have successfully configured GitHub Pages, you will receive a message
    at the top of the screen that says **GitHub Pages source saved**. You will also
    be able to see the URL to your static site, as displayed in the following example
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](image/Figure_5.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.15: The GitHub Pages settings and example URL'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have configured your GitHub repository, you should clone it to your
    local machine. Follow these steps to clone your repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the root of your repository by selecting the **Code** tab at the
    top of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the green **Clone or download** button. This will reveal the URL to your
    GitHub repository. Note that this URL is not the same as your GitHub Pages static
    site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can use the following example screenshot as a reference to find your GitHub
    repository URL, if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16: Your GitHub repository URL can be found by clicking the Clone
    or download button'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.16: Your GitHub repository URL can be found by clicking the Clone
    or download button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have acquired your repository''s `git` reference, clone the repository
    to your local machine. Make sure you are not inside your `guestbook` directory
    when running the following command, as we want this repository to be separate
    from the `guestbook` chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Once you have cloned the repository, continue to the next section to publish
    your `guestbook` chart to your chart repository.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the Guestbook Helm chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helm provides a couple of different commands to make publishing a Helm chart
    a simple task. However, before running these commands, you may find it necessary
    to increment your chart's `version` field in the `Chart.yaml` file. Versioning
    your charts is an important part of the release process, as is the case in other
    types of software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the version field in your chart''s `Chart.yaml` file to 1.0.0, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Once your `guestbook` chart''s version has been incremented, you can proceed
    by packaging your chart into a `tgz` archive. This can be accomplished using the
    `helm package` command. Run this command from one level above your local `guestbook`
    directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: If successful, this will create a file called `guestbook-1.0.0.tgz`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When working with charts that contain dependencies, the `helm package` command
    requires those dependencies to be downloaded to the `charts/` directory in order
    to successfully package the chart. If your `helm package` command failed, check
    that your Redis dependency has been downloaded to the `charts/` directory. If
    it has not, you can add the `--dependency-update` flag to `helm package`, which
    will download the dependency and package your Helm chart in the same command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your chart is packaged, the resulting `tgz` file should be copied to the
    clone of your GitHub chart repository by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'When this file is copied, you can use the `helm repo index` command to generate
    the `index.yaml` file for your Helm repository. This command takes as an argument
    the location of your chart repository clone. Run the following command to generate
    your `index.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This command will succeed quietly, but you will see the new `index.yaml` file
    inside the `Learn-Helm-Chart-Repository` folder. The contents of this file provide
    the `guestbook` chart metadata. If there were other charts contained in this repository,
    their metadata would appear in this file as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Helm chart repository should now contain the `tgz` archive and the `index.yaml`
    file. Push these files to GitHub by using the following `git` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You may be prompted to enter your GitHub credentials. Once provided, your local
    contents will be pushed to the remote repository, and your `guestbook` Helm chart
    will be served from the GitHub Pages static site.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's add your chart repository to your local Helm client.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your chart repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the process for other chart repositories, you must first know the
    URL to your GitHub Pages chart repository in order to add it locally. This URL
    was displayed in the **Settings** tab, as described in the *Creating a chart repository*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you know your chart repository''s URL, you can add this repository locally
    with the `helm repo add` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will allow your local Helm client to interact with your repository
    with the name `learnhelm`. You can verify that your chart was published by searching
    for the `guestbook` chart against your locally configured repos. This can be done
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: You should find the `learnhelm/guestbook` chart returned in the search output.
  prefs: []
  type: TYPE_NORMAL
- en: With your `guestbook` chart successfully published, let's finish by cleaning
    up your minikube environment.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can clean up your environment by deleting the `chapter5` namespace, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: If you have finished working, you can also stop your minikube cluster with the
    `minikube stop` command.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build a Helm chart from scratch by writing
    a chart to deploy the Guestbook application. You began by creating a chart that
    deployed the Guestbook frontend and a Redis dependency chart, and you later improved
    upon this chart by writing life cycle hooks and adding input validation. You concluded
    this chapter by building your own chart repository with GitHub Pages and publishing
    your `guestbook` chart to this location.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn strategies around testing and debugging
    a Helm chart, to enable you to further strengthen your chart development skills.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For additional information on the Guestbook application, please refer to the
    *Deploying PHP Guestbook applica*[*tion with Redis* tutorial from the Kubernetes
    documentation, at https:](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)//kubernetes.io/docs/tutorials/stateless-application/guestbook/.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about developing Helm chart templates, please refer to the followi[ng
    links:](https://helm.sh/docs/chart_template_guide/getting_started/)
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chart Development Guide from the Helm documentat*](https://helm.sh/docs/chart_template_guide/getting_started/)*ion*:
    https://helm.sh/docs/chart_template_guide/gettin[g_started/](https://helm.sh/docs/topics/chart_best_practices/conventions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*List of best practices from the Helm documentation*](https://helm.sh/docs/topics/chart_best_practices/conventions/):
    https://helm.sh/docs/topics/chart_best[_practices/conventions/](https://helm.sh/docs/topics/charts_hooks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Additional inform](https://helm.sh/docs/topics/charts_hooks/)ation on chart
    hooks: https://helm.s[h/docs/topics/charts_hooks/](https://helm.sh/docs/topics/chart_repository/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Information on ch](https://helm.sh/docs/topics/chart_repository/)art repositories:
    https://helm.sh/docs/topics/chart_repository/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which command can be used to scaffold a new Helm chart?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which key advantages did declaring a Redis chart dependency provide when developing
    the `guestbook` chart?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What annotation can be used to set the execution order of hooks for a given
    life cycle phase?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the common use cases for using the `fail` function? What about the
    `required` function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Helm commands are involved in order to publish a Helm chart to a GitHub
    Pages chart repository?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `index.yaml` file in a chart repository?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
