- en: Network Penetration Testing - Pre-Connection Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many organizations have a wireless network. Imagine gaining access to a corporate
    wireless network and then using the wireless as a medium or channel to break into
    the wired network and compromise other systems and devices. It is essential to
    understand wireless penetration testing in order to be able to identify loopholes
    that would allow such security breaches. These skills will help you as a penetration
    tester, as you will be required to perform wireless security testing on target
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a deep dive into wireless hacking tools such as
    aircrack-ng. Furthermore, we will cover the essentials of understanding how various
    wireless attacks work. These attacks include deauthenticating users who are associated
    with a wireless access point, creating a fake access point, and performing password
    cracking.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the course of this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with packet sniffing using airodump-ng
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeted packet sniffing using airodump-ng
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deauthenticating clients on a wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a rogue AP/evil twin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing a password spraying attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up watering hole attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weak encryption exploitation for credential stealing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kali Linux**: [https://www.kali.org/](https://www.kali.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airgeddon**: [https://github.com/v1s1t0r1sh3r3/airgeddon](https://github.com/v1s1t0r1sh3r3/airgeddon)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WordPress server**: [https://www.turnkeylinux.org/wordpress](https://www.turnkeylinux.org/wordpress)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bee-Box**: [https://sourceforge.net/projects/bwapp/files/bee-box/](https://sourceforge.net/projects/bwapp/files/bee-box/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with packet sniffing using airodump-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with packet sniffing, we are going to use the `airodump-ng` tool.
    `airodump-ng` has many functionalities, including performing the raw capture of
    IEEE 802.11 frames. Additionally, using this tool, we'll be able to view wireless
    APs, associated and unassociated client devices (stations), encryption types,
    SSID, the manufacturer of the APs, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](d0922997-8773-40e5-becc-71d0f63d3a68.xhtml), *Understanding Network
    Penetration Testing*, we outlined the procedures involved in connecting a wireless
    network adapter to your Kali Linux machine and in enabling monitor mode. For this
    exercise, you'll need to repeat the process once more.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable monitor mode, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the wireless adapter to Kali Linux. Use the `ifconfig` command to verify
    the status of the adapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Terminate any process that may hamper the enabling of monitor mode by using
    the `airmon-ng check kill` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable monitor mode on your wireless adapter using the `airmon-ng start wlan0`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that your wireless adapter is in monitor mode, let''s use the `airodump-ng`
    tool to view a list of all nearby APs and stations. To perform this action, use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Your Terminal window will now begin to display all of the nearby APs, displaying
    the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BSSID`: This is the MAC address of the AP or wireless router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PWR`: This is the power rating. The lower the power rating, the further away
    the AP is from the wireless adapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Beacons`: The beacons are the advertisements sent from an AP. Beacons usually
    contain information about the AP, such as the network name and operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#Data`: This is the amount of captured data packets per network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#/s`: This field indicates the number of packets per second over a 10-second
    period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CH`: This is the operating channel for the AP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MB`: This field outlines the maximum speed that is supported by the AP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ENC`: This determines the encryption cipher being used on the wireless network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AUTH`: This determines the type of authentication protocol on the wireless
    network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ESSID`: The **Extended Service Set Identifier** (**ESSID**) and the name of
    the network SSID are the same.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STATION`: This displays the MAC addresses of both associated and unassociated
    devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upon executing the command, your wireless adapter will perform live scanning
    and monitoring of all wireless networks and devices nearby. You should receive
    a screenshot similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c428bee-6610-477f-a6ef-30298fc6d69f.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on your geographic location, the listed devices and networks will always
    vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing network traffic in real time can be overwhelming, especially in our
    situation where we can see all nearby devices. The `airodump-ng` tool allows us
    to use the `--bssid` parameter to filter the output for a specific AP. Additionally,
    using the `-c` parameter allows us to specify a channel the AP is operating on.
    Use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll get a similar output to the following, where the specific details about
    your target wireless network will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8f51204-2e0b-405a-9805-84ba4e2cc1f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you are able to perform packet sniffing, let's attempt to direct our
    attack to a specific target in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Targeted packet sniffing using airodump-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about additional features in airodump-ng.
    Most importantly, we will use airodump-ng to target a specific network; this will
    allow us to focus our attack on a **specific** **target** and not cause any harm
    to other nearby wireless networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though you''re filtering your view, the traffic (packets) are not being
    saved offline for post-analysis. Using the `-w` parameter will allow you to specify
    the file location to save the content. Therefore, the following command will help
    you to achieve this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `ls -l` command on your Terminal, you''ll see that the data has been
    written offline in the `root` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4818f88-b7ad-4536-a52a-0a4192d0bfc6.png)'
  prefs: []
  type: TYPE_IMG
- en: airodump-ng usually writes the captured data into five file types; these are
    the `.cap`, `.csv`, `.kistmet.csv`, `.kismet.netxml`, and `.log.csv` formats.
  prefs: []
  type: TYPE_NORMAL
- en: The longer you leave the `airodump-ng` tool running, the more packets will be
    written in the offline files and will eventually capture the WPA/WPA2 handshake
    between the clients and the targeted AP. During packet sniffing with Airodump-ng,
    you'll see a **WPA handshake** message appear in the top-right corner; this is
    an indication that the WPA/WPA2 handshake has been captured by airodump-ng. Capturing
    the WPA/WPA2 handshake will assist us in cracking the password for the target
    wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will attempt to deauthenticate users from a wireless
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Deauthenticating clients on a wireless network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever a client device, such as a laptop or smartphone, is attempting to create
    an association with a password-protected wireless network, the user will need
    to provide the correct passphrase. If the user provides the correct passphrase,
    the device will be authenticated on the network and will be able to access any
    resources available.
  prefs: []
  type: TYPE_NORMAL
- en: In a deauthentication attack, the attacker, or penetration tester, is attempting
    to knock (kick) every associated device off a wireless AP. This attack is executed
    where the attacker machine is not connected (associated) in any way to the target
    wireless AP or network.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the attacker machine to send a deauthentication frame to the wireless AP,
    a reason code is inserted within the body of the frame. The codes are used to
    inform the access point or wireless router of a change on the network. The reason
    code will indicate one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code 2**: Previous authentication no longer valid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code 3**: Deauthentication leaving'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will create the effect of each client being deauthenticated from the targeted
    AP. The following is an illustration of the attack on a network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/107805e1-7dec-4732-8d0b-cc4effe154ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To launch a deauthentication attack, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable monitor mode on your wireless adapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `airodump-ng wlan0mon` command to discover your target's BSSID address.
    The BSSID will be used to launch our attack specifically toward a particular AP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the target AP has been discovered, take note of its BSSID and operating
    channel, and then terminate the scanning of nearby APs by using *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Narrow your scope on wireless monitoring to the specific target AP just by
    using the following syntax: `airodump-ng --bssid <bssid value> -c <channel #>
    wlan0mon`. This current Terminal window will be used to monitor the progress of
    our attack.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new Terminal window. This window will be used to launch the attack using
    the `aireplay-ng` tool. The `aireplay-ng -0 0 -a <BSSID> wlan0mon` command will
    send a continuous stream of deauthentication frames to the target AP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your results should be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35b3ef5a-5251-4aa5-8c84-155bf31c6175.png)'
  prefs: []
  type: TYPE_IMG
- en: In the screenshot, we can see that `aireplay-ng` is sending a continuous stream
    of deauthentication frames to our targeted access point.
  prefs: []
  type: TYPE_NORMAL
- en: During the attack, switch back to the first Terminal window where you are monitoring
    your target network. Soon, you'll see that the clients (stations) are being disconnected
    and, eventually, the WPA/WPA2 handshake will be captured. You will notice on your
    Terminal with airodump-ng that the WPA handshake value will appear in the top-right
    corner of the window. This is an indication that the WPA/WPA2 handshake has been
    captured. In the next chapter, we will perform password cracking on a wireless
    network.
  prefs: []
  type: TYPE_NORMAL
- en: You can use tools such as **Hashcat** ([https://hashcat.net/hashcat/](https://hashcat.net/hashcat/))
    and **John the Ripper** ([https://www.openwall.com/john/](https://www.openwall.com/john/))
    to perform password cracking as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, if you would like to deauthenticate a specific client (station)
    from an AP, the following command will allow this action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are descriptions of each parameter we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-0`: This indicates that it''s a deauthentication attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0`: This specifies the number of frames to inject. Using `0` will create a
    continuous attack; if you specify `2`, only two deauthentication frames will be
    injected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: This allows you to specify the client''s MAC address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we'll be creating a honeypot using Kali Linux and various
    wireless tools.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rogue AP/evil twin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a future penetration tester or ethical hacker, you may be tasked with conducting
    extensive wireless security testing for your company or a client organization.
    Creating a rogue AP with an interesting SSID (wireless network name), such as
    `VIP_WiFi` or `Company-name_VIP`, will lure employees to establish a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In creating a rogue AP, the objective is to capture user credentials and sensitive
    information and to detect any vulnerable wireless clients in an organization.
    The following are some tips to consider when deploying your rogue AP:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose a suitable location to ensure there is maximum coverage for the potential
    victims.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deauthenticate clients from the real AP, causing them to create an association
    with the rogue AP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a captive portal to capture user credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get started, we are going to use **Airgeddon**. This tool contains a lot
    of features and functions that will assist us, from gathering information about
    a target wireless network and its clients to launching various types of attacks
    and luring users to associate with our rogue AP.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with creating a fake access point, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Airgeddon from its GitHub repository and give the `airgeddon.sh` script
    executable permissions on your user account. Use the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: On your Terminal window, use the `./airgeddon.sh` command to start the Airgeddon
    interface. Once the script has been initiated, Airgeddon will begin checking for
    the essential hardware and software requirements on your Kali Linux machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hit *Enter* a few times until you''ve reached the interface selection prompt;
    be sure to select your wireless adapter, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e3359e2-4c52-413f-9e8e-0387a61cdfb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Select option `2`, which has the wlan0 interface, and hit *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: If Airgeddon has indicated that you're missing any tools, please be sure to
    install them before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll now be presented with the main dashboard of Airgeddon. Here, you can
    choose to switch between monitor or managed mode on your wireless adapter. You''ll
    be able to launch various types of attacks, such as **Denial-of-Service** (**DoS**)
    attacks, attempt to crack wireless passwords, capture and decrypt wireless handshakes,
    perform an evil twin attack, or create a rogue AP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f024bda-63f4-4225-bd93-d2aea1a01e8f.png)'
  prefs: []
  type: TYPE_IMG
- en: For our attack, we are going to create a honeypot to lure victims into connecting
    to our fake AP to intercept, redirect, and capture sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, set your wireless adapter to monitor mode. You can do this within the
    Airgeddon menu using the **Put interface in monitor mode** option. Once completed,
    you should see the status of your wireless adapter now changed to **Monitor**
    mode, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f992a7d-b09f-4789-a4b7-0e1daca2f62f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Evil Twin attacks menu option and hit *Enter*. You''ll be presented
    with the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95928872-dd3a-4d7b-8bc4-173139007a85.png)'
  prefs: []
  type: TYPE_IMG
- en: Not only does Airgeddon allow us to easily set up a rogue AP or evil twin, but
    it also provides us with additional features, such as sniffing the victim's traffic,
    performing SSL stripping of any SSL/TLS connections, performing browser exploitation,
    and even creating a captive portal for gathering user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first look for a target. Choose option `4` and hit *Enter*. A pop-up
    Terminal window will open, displaying all nearby APs. When you''re ready to choose
    a target, choose the scanning window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1027ca72-3fb5-498b-a0dc-8c5a8a2c69e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose your target AP and hit *Enter* to continue. At this point, we have set
    our wireless adapter to Monitor mode and chosen our target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7d42a28-eb97-4387-a99a-e24e6dd6e76e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s perform an evil twin attack with sniffing. Choose option `6` and hit
    *Enter*. The following menu will become available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3abb0448-2f1c-443e-9fe9-9e7fac27013c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select option `2` to perform a deauthentication attack to the target wireless
    network; this will force the clients of the real network to disconnect (deauthenticate)
    and they will attempt to connect to our rogue AP/evil twin. Airgeddon will ask
    you to choose a physical interface that is connected to the internet/physical
    network. The purpose is to provide the illusion of regular network connectivity
    to the victims. When they are connected and accessing the local resources, the
    victims will think it''s the legitimate network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb876ff2-a25b-48c4-af19-4e2182b37add.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose the appropriate interface and hit *Enter* to continue; hit *Enter* once
    more to verify the selected interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the option to spoof your MAC address to change your identity.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re ready, launch the attack. Airgeddon will open a few smaller Terminal
    windows displaying the status of each attack it''s performing, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/923af4e8-36bf-4e34-b040-b39327950a33.png)'
  prefs: []
  type: TYPE_IMG
- en: Once a client is connected, the appropriate Terminal window will provide you
    with an update. With just a few steps, you now have your own rogue AP/evil twin.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss and demonstrate password spraying on a
    target system.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a password spraying attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Password spraying (sometimes referred to as reverse brute force) is a technique
    whereby multiple login attempts are made by using a valid username(s) and a word
    list containing various possibilities of the password. The objective of performing
    a password spraying attack is to obtain a set of valid user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: To perform a password spraying attack, we are going to use our existing WordPress
    server as our target **Burp Suite** to obtain the username and password input
    field on a web page, and `hydra` to perform our password spraying attack to find
    valid user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, please use the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your web browser to use the Burp Suite proxy settings. Once you've
    done that, open Burp Suite and turn on its Intercept mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, on your web browser, go to the WordPress login portal. The URL should
    be `http://<server address>/wp-login.php`. Please note that you should not attempt
    any attacks on any devices or networks where you have not acquired legal permission
    from the appropriate authorities. The tasks performed in this section are conducted
    in a lab environment for educational purposes only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following user credentials in the username and password fields and
    hit *Enter* to send a login request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`uname`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pass`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Head back over to Burp Suite. On the Proxy | Intercept tab, hit the forward
    button a few times until you see an HTTP `POST` message in the **Raw** sub-tab,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de17e88f-1e19-4ba6-ab67-0ef157acedd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Within the `POST` message, take note of the directory (`/wp-login.php`) in the
    first line and the username/password field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Be sure to record the login error message on the web page as it is required
    in the later steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7765a672-0c5b-485f-82ab-0985ab9d98eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In our exercise, two custom word lists have been created: the first word list
    contains a list of possible usernames, and the second contains a list of possible
    passwords. Using the `hydra` tool on Kali Linux, you will be able to perform a
    **password spraying** attack on the target WordPress server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `hydra`, we can have the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Substituting each value in the syntax, we get the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Replacing `uname` with `^USER^` and `pass` with `^PASS^`, we can tell `hydra`
    that these are the username and password fields. Additionally, `–V` is specified
    to produce a verbose output on the Terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After executing the command, the following is an example of the expected output.
    The rows that begin with `[80] [http-post-form]` provide a possible valid username
    and password for the target, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4691dc9-934c-40d6-b28b-e8bd218891f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Be sure to check each username and password to verify its authenticity on the
    target system. Rapidly firing usernames and passwords to a target system may cause
    a lockout and stop the attack on our end. To create a 10-second wait period between
    attempts, use the `-w 10` parameters. This is optional; however, it may reduce
    the chances of being locked out or blocked by the target.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover the essentials of a watering hole attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up watering hole attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the field of IT security, learning about various types of attacks and
    threats is very important. Some of these attacks have some very unusual names,
    and, in this section, we will cover the fundamentals of a **watering hole attack**.
  prefs: []
  type: TYPE_NORMAL
- en: Let's imagine you're the IT security administrator or engineer for a company.
    You've implemented the best security appliances within the industry to proactively
    detect and prevent any sort of threats, whether internal or external. You've also
    implemented industry best practices, adhered to standards, and ensured that your
    users (employees of the organization) are frequently trained in user security
    practices. You have built a security fortress within the organization and ensured
    that the network perimeter is also on guard for new and emerging threats.
  prefs: []
  type: TYPE_NORMAL
- en: Attackers would notice that they are unable to penetrate your network, and even
    social engineering techniques such as phishing emails would not be successful
    against your organization. This would create a big challenge to compromise the
    organization (target), as it's very well protected. One method of doing this is
    to perform a watering hole attack.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that, during their lunch break, a few employees visit the nearby coffee
    shop for a warm or cold beverage. Hackers could be monitoring the movements of
    the employees of an organization—say they visit places that contain public Wi-Fi
    quite often during their breaks, or even after work. Let's say there's a group
    of employees who frequent the local coffee shop. The attacker can compromise the
    coffee shop's Wi-Fi network and plant a payload that downloads to any device connected
    to the network and runs in the background.
  prefs: []
  type: TYPE_NORMAL
- en: By compromising the coffee shop's Wi-Fi network, the attack is poisoning the
    watering hole, which everyone, including the employees of the target organization,
    is using while they enjoy their beverages. Let's imagine Alice's smartphone is
    compromised at the coffee shop; she carries it back to the organization and connects
    to the internal (Wi-Fi) network. At this point, the attack is being generated
    from the inside and can compromise the remaining segments of the network, or even
    attempt to create a backdoor in the target organization.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other methods for creating a watering hole attack; this was just
    one example. Another example would be compromising a legitimate website that a
    lot of users visit often and planting malware on the potential victims' systems.
    When the systems are infected with malware, the payload can target other websites
    or networks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss and demonstrate how credentials can be
    stolen from systems that use weak encryption systems.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting weak encryption to steal credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Encryption plays is a key role in our daily lives; whether we are checking our
    emails on the go, browsing a favorite website, or simply sending a message to
    a friend, data encryption provides us with an acceptable level of privacy from
    prying eyes. Quite often, IT professionals don't always keep track of their compliance
    levels in maintaining encryption techniques to secure data on a system. This leads
    to a malicious user or hacker compromising a vulnerable system to retrieve confidential
    data due to poor encryption practices.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we will attempt to discover one of the most common vulnerabilities
    in encryption on a target. Once found, we will then exploit the weak encryption
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and set up the **bee-box** virtual machine. The bee-box file can be
    found at [https://sourceforge.net/projects/bwapp/files/bee-box/](https://sourceforge.net/projects/bwapp/files/bee-box/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, open the web browser on your Kali Linux (attacker machine),
    enter the IP address of bee-box, and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screen will appear. Click on the **bWAPP** link, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d729380b-f83c-4dd4-98b3-a89b991fb809.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll encounter a login portal. Insert the username `bee` and the password
    `bug` to log on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/04aaae79-65aa-40ec-8be4-1e24f41f70b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the top-left corner of the screen, use the drop-down menu and select Heartbleed
    Vulnerability. Then, click Hack to load the vulnerability on the target virtual
    machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33bf6c86-3348-4ef5-9edc-30de33a9badd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you''ll be presented with the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/051381cd-5022-4d8c-9ec5-09821cdd673c.png)'
  prefs: []
  type: TYPE_IMG
- en: On your Kali Linux machine, enter the new URL with the port number `8443` in
    the address bar and hit *Enter*. The new URL should be `https://10.10.10.131:8443`.
    Be sure to log in to the bWAPP application again using the credentials provided
    in *Step 4*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using Nmap, we can perform a vulnerability scan to determine whether the heartbleed
    vulnerability exists on a target. To perform this task, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If the vulnerability exists on the target, Nmap will present us with the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91322818-3fa2-4ccc-b625-00d965aedb99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we are certain that the heartbleed vulnerability exists on our target,
    it''s time to use Metasploit to perform a bit of exploitation. Within Metasploit,
    let''s use the `search` command to help us find a suitable module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c7b20c7-6a47-4bd3-a594-b118cd85f6e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The search returned two available modules. We will use the `auxiliary/scanner/ssl/openssl_heartbleed`
    module. Additionally, we will set `RHOSTS` as the target''s IP address and `RPORTS`
    as `8443`, as specified in the hint from the bWAPP interface. The following snippet
    shows the configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eec001a7-ae79-4aaa-9dc5-573e41130c78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon launching the module, you''ll observe that the data is being leaked in
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/991a6026-aa4c-4dfb-b472-bd4baf69f32c.png)'
  prefs: []
  type: TYPE_IMG
- en: Carefully examining the output, you can see that the exploit has returned the
    `Printable info leaked` section, which is followed by HTTP session information
    in plaintext; the target machine responded with a data leak. If no leak was found,
    the target machine won't return any data to our Metasploit interface. By default,
    a dump of the data has been extracted and stored in the `/root/.msf4/loot/…` location
    on your Kali Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `show info` command, you''ll see the available actions to perform
    under the `openssl_heartbleed` module, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cddebdb6-feb0-4e2b-aed5-a583104737b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These actions can be changed using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`set action DUMP`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set action KEYS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set action SCAN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the content of the `.bin` file after a `set action DUMP` command
    was used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51804a0e-fc70-4b64-8dba-0c195f9a3ba3.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, the more people are currently accessing the vulnerable application
    the higher the possibility of gathering more confidential information, such as
    login credentials. However, in our exercise, I was able to capture the cookie
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During this chapter, you learned how to perform wireless packet sniffing, familiarized
    yourselves with the basics of packet sniffing, and targeted packet sniffing using
    `aircrack-ng`. Additionally, you learned the essential skills required to perform
    a deauthentication attack on a target wireless access point during the *Deauthenticating
    clients on a wireless network* section.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Creating a rogue AP/evil twin* section, you learned how to use Airgeddon
    to chain multiple attacks together and create an evil twin/rogue access point.
    Furthermore, the section on password spraying provided the skills necessary to
    gain access to a remote system while acquiring the skills to exploit systems that
    use weak encryption.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [Chapter 10](d5124b0a-e923-4b55-93bb-ee34ae8fbd4c.xhtml),
    *Network Penetration Testing - Gaining Access*, we will be covering network penetration
    in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What tool can enable monitor mode for your wireless network adapter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is another name for the SSID?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During a deauthentication attack, what codes are used to disconnect clients?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool is used to perform deauthentication?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some additional reading resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deauthentication attacks**: [https://www.aircrack-ng.org/doku.php?id=deauthentication](https://www.aircrack-ng.org/doku.php?id=deauthentication)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common WLAN protection mechanisms and their flaws**: [https://hub.packtpub.com/common-wlan-protection-mechanisms-and-their-flaws/](https://hub.packtpub.com/common-wlan-protection-mechanisms-and-their-flaws/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced wireless sniffing**: [https://hub.packtpub.com/advanced-wireless-sniffing/](https://hub.packtpub.com/advanced-wireless-sniffing/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
