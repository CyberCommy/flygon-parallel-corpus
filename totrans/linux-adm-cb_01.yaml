- en: Introduction and Environment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and choosing a distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing our chosen distribution manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to our **virtual machine** (**VM**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing and updating our VM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how VMs differ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick `sudo` explanation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Vagrant to automatically provision VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anecdote (try, try, and try again)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into the nitty-gritty of what distribution (sometimes shortened
    to "distro") we're going to use, we must first take a rather large step backwards
    and consider the concept of **Linux** in a somewhat philosophical way.
  prefs: []
  type: TYPE_NORMAL
- en: A good description of "what Linux is" can be hard to pin down, due in no small
    part to a level of confusion willfully propagated by IT professionals, because
    it makes them sound much smarter than they actually are when they come to explain
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Because you're reading this book, I'm going to assume that you know of Linux
    at a high level; you know that it's an **operating system** (**OS**) like Windows
    or macOS, that it's not seen much of the limelight, and that it's not generally
    used on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: This assessment is both right and wrong, depending on who you're speaking to.
  prefs: []
  type: TYPE_NORMAL
- en: Laid-back **systems administrators** (**sysadmins**) will lean back further,
    nod their 80s era mohawk, and agree that Linux is an OS—and a decent one at that.
    They will then go back to playing with whatever trendy software they're learning
    this week so that they can try and shoehorn it into the infrastructure next week.
  prefs: []
  type: TYPE_NORMAL
- en: Self-proclaimed graybeards will stop what they're doing, sigh audibly, and pick
    up their fourth cup of coffee before swiveling around to give you a lecture on
    the difference between GNU/Linux (or GNU+Linux) and the Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: A kernel is an important part of any complete OS. It's the piece of software
    that sits between the hardware and the software, performing the grunt work of
    translating between the two. All operating systems will have a kernel of one sort
    or other, for example, the macOS kernel is call **XNU**.
  prefs: []
  type: TYPE_NORMAL
- en: The lecture you receive will be tedious, will involve names such as Richard
    Stallman, Linus Torvalds, and possibly even Andrew Tanenbaum, and may even take
    upwards of an hour, but the main takeaway will be that Linux is the accepted name
    of the OS you're learning about, while also being technically incorrect. They
    will say that Linux is really just the kernel, and everything beyond that is a
    distribution wrapped atop the GNU tools suite.
  prefs: []
  type: TYPE_NORMAL
- en: It is considered sensible to avoid this debate at all costs.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of this book, when I refer to Linux, I'm talking about the
    OS as a whole, and when I refer to the **kernel**, I'm really talking about the
    Linux kernel, the development of which is spearheaded by Linus Torvalds.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and choosing a distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux, as hinted at in the preceding section, is fragmented. There's no better
    way to describe this, due to the sheer number of different **distributions** you
    can download from a multitude of different vendors. Some of these vendors are
    for-profit, offering support contracts and SLAs with your purchase of their OS,
    and some are entirely voluntary, manned by one person in their garage.
  prefs: []
  type: TYPE_NORMAL
- en: There are literally hundreds of distributions to choose from, and each has their
    advocate-army to tell you why theirs is "the one true distribution" and"there's
    really no reason to go shopping around for a different one."
  prefs: []
  type: TYPE_NORMAL
- en: There are also Linux distributions that have been created for specific purposes,
    such as Red Star OS, the purportedly North Korean Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The truth of the matter is that most businesses use the Linux distribution
    they do because it was:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one that popped up when the owner Googled **free OS**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The one the first IT Administrator liked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The one that offers a contract they can invoke when something breaks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going through each distribution that's around at the moment would be futile,
    as they're being created or abandoned on an almost weekly basis. Instead, I'm
    going to run through a popular selection (in the server space, rather than the
    desktop), explain some key differences, and then talk about which I'll be using
    for the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Don't be deterred if the distribution your business uses isn't one we talk about
    here – most of the tooling is consistent across distributions, and where it differs,
    documentation exists to help you out.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about the various distributions available to you,
    a site called **DistroWatch** ([https://distrowatch.com/](https://distrowatch.com/))
    has been around for years, and offers a regularly updated list of most Linux distributions,
    organized by page hit ranking.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ubuntu is the first Linux distribution I ever installed, and I'd wager the same
    could be said for a lot of people who started in Linux around the mid-2000s. It's
    also the distribution I'm using to write this book.
  prefs: []
  type: TYPE_NORMAL
- en: It has enjoyed consistent mindshare on the desktop, thanks to its decent attempt
    at marketing (including its position in Google's rankings when searching `Linux`),
    its perception as **Linux for Human Beings**, and its user-friendliness.
  prefs: []
  type: TYPE_NORMAL
- en: Downstream from Debian, Ubuntu's development is headed by Canonical, and while
    they started with an emphasis on making a rock-solid desktop OS, they have since
    moved into the lofty realms of attempting to dominate the server space, and have
    entered the IoT device market too.
  prefs: []
  type: TYPE_NORMAL
- en: When we say "downstream" in this sense, we mean that Ubuntu shares a lot of
    its foundation with Debian, except it adds some extra bits and takes some bits
    out. In the Linux world, there are few **from-scratch** distributions, with most
    using another distribution as their bedrock.
  prefs: []
  type: TYPE_NORMAL
- en: Known also for its cutesy naming convention (18.04 being Bionic Beaver), the
    fact Ubuntu was so popular on the desktop meant it was the obvious distribution
    of choice for sysadmins to install on their servers, reaching for what they were
    already familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: More recently, it's become increasingly common to find Ubuntu installations
    when dealing with inherited systems, usually a **long-term support** (**LTS**)
    release (so that confusion and headaches around OS upgrades can be avoided for
    a reasonable length of time.)
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu releases on a six-monthly cycle, with every two years being an LTS release
    (14.04, 16.04, and 18.04, most recently). Their numbering convention is year-released,
    followed by month (so April 2018 is 18.04). It is possible to upgrade from version
    to version of Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Canonical also aren''t shy of introducing new technology and software in Ubuntu,
    even when it diverges from their Debian base. Recent examples of this include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Snaps**: A way of distributing distribution-agnostic software'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upstart**: A replacement initialization system that was later also replaced
    by `systemd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mir**: A display server, which was initially conceived as a way to replace
    the ageing X Window System'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu can be downloaded from [https://ubuntu.com](https://ubuntu.com).
  prefs: []
  type: TYPE_NORMAL
- en: Debian
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, Debian (the universal OS) is the basis for a lot of
    other distributions that came later, but it has consistently been one of the most
    popular, both on the desktop and on servers. It is still highly likely that you
    will choose to install Debian yourself, or will inherit a system running this
    distribution, with its reputation for stability.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, the server-space war was fought between two camps, the Debian
    Druids and the CentOS Cardinals. In more recent years, newcomers have entered
    the fray (like Ubuntu,) but these two still hold a considerable amount of hardware
    to ransom.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing every two or three years, the Debian versions are named after Toy
    Story characters (7—Wheezy, 8—Jessie, 9—Stretch). They have a reputation for being
    one of the most stable Linux distributions around, with tried and tested versions
    of software, as well as sensibly backported fixes.
  prefs: []
  type: TYPE_NORMAL
- en: Backporting is the act of taking a fix from a recent release of software, such
    as the kernel itself, and incorporating those fixes into the version you're running,
    recompiling it into a new piece of software. Features are rarely backported, due
    to features having the potential to introduce more breaking changes into long-term
    support distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Some criticism is sometimes leveled at Debian because it generally has older
    versions of packages available in its release version, which may not include all
    the trendy and cool features a systems administrator wants, or a developer desires.
    This isn't fair, given that people generally look for stability and security in
    the server world, over the latest and greatest version of Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Debian has staunch defenders, and it holds a special place in a lot of hearts,
    though it's unusual to see it in some Enterprise environments because it's developed
    by the Debian Project, rather than a traditional company that can offer support
    contracts. In my anecdotally dismissible experience, I have more often seen Debian
    in smaller companies who needed a quick solution, and slightly larger companies
    who still run some legacy systems.
  prefs: []
  type: TYPE_NORMAL
- en: Debian can be downloaded from [https://www.debian.org](https://www.debian.org).
  prefs: []
  type: TYPE_NORMAL
- en: CentOS - the one we'll mostly be using
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The other part of the traditional server-space war, CentOS features its own
    soldiers and martyrs. It is still widely used, and has a reputation for stability
    and boredom that rivals Debian's.
  prefs: []
  type: TYPE_NORMAL
- en: The **Community Enterprise Operating System** (**CentOS**) is a freely available
    and compiled version of the Red Hat Enterprise Linux distribution, which aims
    to offer functional compatibility, generally replacing the Red Hat logo with the
    CentOS logo to avoid trademark infringement. (In January of 2014 it was announced
    that Red Hat was joining forces with CentOS, to help drive and invest in CentOS
    development.)
  prefs: []
  type: TYPE_NORMAL
- en: Because of its nature, a lot of systems administrators have installed CentOS
    to better understand the Red Hat world, because (as mentioned previously) Red
    Hat has a good reputation in Enterprise companies, so it would make sense to install
    something so strikingly similar.
  prefs: []
  type: TYPE_NORMAL
- en: This installation trend goes both ways. I have seen companies who started out
    by installing CentOS because it was readily available and allowed them to design
    their infrastructure easily, utilizing publicly available and free repos, before
    moving to a RHEL deployment for the finished product.
  prefs: []
  type: TYPE_NORMAL
- en: '**Repos** is a short form way of saying repositories, which are the common
    location from which software is installed on a Linux system. Where Windows usually
    has downloads from websites, and macOS has the App Store, Linux has used software
    repositories for most of its life, and they have the advantage of being easily
    searchable with a few keystrokes on the command line.'
  prefs: []
  type: TYPE_NORMAL
- en: I have also seen companies who deployed RHEL everywhere, only to realise that
    they were spending a lot of money, and never invoking the support they'd bought
    because their operations team was just that good! They would then gradually phase
    out their Red Hat deployments and move to CentOS, changing very little in the
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Releases come about every few years, with version 7 being released in 2014,
    and getting consistent updates since then. However, it should be noted that version
    6, which was released in 2011, will be getting maintenance updates until 2020.
  prefs: []
  type: TYPE_NORMAL
- en: CentOS can be downloaded from [https://centos.org](https://centos.org). We will
    go through this in the installation section.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat Enterprise Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Red Hat Enterprise Linux, or RHEL as it's more commonly known (because it's
    a long name), has a very firm footing in Enterprises. It targets the commercial
    space very well, and as a result it is not uncommon to find yourself on a RHEL
    box, which you've initially assumed to be a CentOS installation.
  prefs: []
  type: TYPE_NORMAL
- en: What makes RHEL different is the support offered by Red Hat, Inc. and the various
    services that you can utilize if you've bought an official package.
  prefs: []
  type: TYPE_NORMAL
- en: While Red Hat still offers the source code for their distribution without question
    (hence CentOS), they sell versions and packages for everything from the desktop
    up to data centre installations.
  prefs: []
  type: TYPE_NORMAL
- en: There's an adage that states "no one got fired for buying IBM," which is a little
    dated in this day and age, but I've heard people invoke this philosophy to describe
    Red Hat on more than one occasion. No one will get fired for buying Red Hat (but
    you might be asked what the benefits are of paying for something that's available
    for free under another name.)
  prefs: []
  type: TYPE_NORMAL
- en: Beautifully, it was announced while I was in the editing stage of this book
    that IBM have bought Red Hat, bringing my comment above full circle. The universe
    is great sometimes.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from the support, the business-like attitude that other businesses like,
    and the contributions back to the community as a whole, Red Hat also offer something
    which has been variously described as "a waste of time" and "crucial for this
    role."
  prefs: []
  type: TYPE_NORMAL
- en: Exams are looked at with both affection and derision, depending on who you speak
    to in the Linux community (as with many things, there's something of a holy war
    about them). Red Hat offers two of the most popular, and many more to boot. You
    can study for and become a Red Hat Certified System Administrator, followed by
    a Red Hat Certified Engineer, which are widely seen as very acceptable qualifications
    to have.
  prefs: []
  type: TYPE_NORMAL
- en: As a college dropout, I'm quite happy to have an RHCE qualification under my
    belt.
  prefs: []
  type: TYPE_NORMAL
- en: Some people see these exams as a way of getting past the first line of those
    hiring (as in the people who scan your CV, and look for badges they recognize).
    Others see them as proof that you know what you're doing around a Linux system
    due to the fact that these exams are practical, (meaning they sit you in front
    of a computer and give you a set of steps to finish.) Some people dismiss exams
    altogether, although they're usually the ones who've never bothered trying the
    exam.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at [https://www.redhat.com](https://www.redhat.com), taking particular
    note of the various packages on offer. They do have a developer account too, which
    gives you access to services you would otherwise pay for (as long as you don't
    try and sneak them into a production environment!).
  prefs: []
  type: TYPE_NORMAL
- en: Installing VirtualBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I said in the previous section, I've chosen to mostly use CentOS for the
    recipes in this book. Hopefully, this gives you a good baseline for learning about
    Linux Administration, but also gives you a bit of a head start if you plan on
    going for any of the Red Hat exams.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of requiring you to have a spare laptop handy, or renting a server somewhere,
    I'm going to advocate using VMs for testing and running through the examples given.
  prefs: []
  type: TYPE_NORMAL
- en: VMs are exactly as they sound – a way of virtualizing computer hardware on one
    or a cluster of physical machines, thus allowing you to test, break, and play
    to your heart's content, without risking rendering your own computer unbootable.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways of creating a VM: macOS has xhyve, Windows has Hyper-V,
    and Linux has a native implementation called **Kernel Virtual Machine **(**KVM**).
  prefs: []
  type: TYPE_NORMAL
- en: KVM (along with libvirt) is the technology that you will come across most often
    in the Linux virtualization space. It forms the basis of popular technologies,
    such as Proxmox and OpenStack, while providing near-native speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Another way of creating and managing VMs is a program called VirtualBox, which
    is now developed by Oracle. The nice thing about this software, and the reason
    I shall be using it here, is that it's cross-platform, being produced for macOS,
    Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VirtualBox on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm using Ubuntu to write this book, so I'll run through the basic way of installing
    VirtualBox on an Ubuntu desktop.
  prefs: []
  type: TYPE_NORMAL
- en: This will be slightly different to installing it on other distributions, but
    a good number of them package it for installation, and should provide a guide
    for installing it.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your Terminal and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using sudo will generally prompt you for your password, and you won't see anything
    being printed to screen as you type.
  prefs: []
  type: TYPE_NORMAL
- en: You will likely be prompted to confirm installation of VirtualBox and its dependencies
    (there may be a lot—it's a complex program and if you haven't updated in a while,
    you may get a few dependency updates too).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit *Y* and *Enter* to continue. The following screenshot shows an example
    of the installation if started from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/544d0efc-3187-468b-8526-6401b6e1f151.png)'
  prefs: []
  type: TYPE_IMG
- en: Once done, you should have a working VirtualBox installation.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you'd like, you can also install VirtualBox through Ubuntu software.
  prefs: []
  type: TYPE_NORMAL
- en: Simply search for the software you desire, in this case, VirtualBox, and click
    through to its store page.
  prefs: []
  type: TYPE_NORMAL
- en: Once there, click Install and the package will be installed, no Terminal required!
  prefs: []
  type: TYPE_NORMAL
- en: After installation, your screen will change to show Launch and Remove options.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VirtualBox on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although I'm using Ubuntu, it's not the end of the world if you're not. macOS
    is a fine OS too, and handily it supports VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll run through a couple of ways of installing VirtualBox
    in macOS. You'll find that the layout is extremely similar, regardless of the
    OS you use.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you already have the command-line program `brew` installed, then getting
    VirtualBox is as easy as running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You may be prompted for a superuser password to complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew is available from [https://brew.sh/](https://brew.sh/) and is effectively
    the package manager that macOS needs, but doesn't have out of the box. I can't
    readily recommend blindly running scripts from mysterious websites, so be sure
    you understand what's being done (read the code) before you take the plunge and
    install brew.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle also provides an installation image for macOS, if you'd like to install
    it in the more traditional way.
  prefs: []
  type: TYPE_NORMAL
- en: Simply navigate to [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    and select the OS X hosts option.
  prefs: []
  type: TYPE_NORMAL
- en: This will prompt you to download the installer to your local system, which you
    can unpack and install.
  prefs: []
  type: TYPE_NORMAL
- en: Running through the installation, you may be prompted for your superuser password.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VirtualBox on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're not using a Linux flavor on your computer, and you're not using macOS,
    it's a good bet that you're running Windows (unless you've delved into FreeBSD
    on the desktop or similar, in which case I can't help you here—we'd need an entire
    afternoon).
  prefs: []
  type: TYPE_NORMAL
- en: If using Windows, I can suggest VirtualBox again, due to its cross-OS nature,
    and it can again be installed from Oracle's site.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like the macOS installation, navigate to [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    and select the Windows hosts option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a4e580a-3f97-4ff6-873f-9e9a712d3e77.png)'
  prefs: []
  type: TYPE_IMG
- en: This will download an executable that can be run.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that Windows can complain if you're attempting to run multiple
    virtualization solutions at once. If you've previously run Hyper-V, or Docker,
    and you experience issues attempting to start VirtualBox machines, try disabling
    your other solutions first.
  prefs: []
  type: TYPE_NORMAL
- en: Installing our chosen distribution manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phew, that was a journey, and we've not even started properly!
  prefs: []
  type: TYPE_NORMAL
- en: Next, we're going to look at setting up a VM manually. But fear not! We will
    also be looking at automating this procedure with Vagrant to avoid having to perform
    repetitive steps in the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Seriously, if you're already well-versed in installing CentOS, feel free to
    skip this section entirely. I have provided Vagrantfiles throughout the rest of
    this book for automating the boxes we're going to work on.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining our CentOS installation media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main way Linux distributions are distributed is in the form of ISO images.
    These images can then be burned onto a DVD as appropriate, or mounted for a VM to
    boot from.
  prefs: []
  type: TYPE_NORMAL
- en: Head over to [https://centos.org/download/](https://centos.org/download/) and
    have a look at the options on offer.
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to download the Minimal ISO, for reasons that will become clear shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking through should bring you to a mirror page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36bc9a7e-cc61-4b4f-b6a8-aa6b8d836e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a bandwidth-saving measure on part of the CentOS Project by prompting
    the end user to download from any number of different hosts. They can spread the
    cost of bandwidth out to volunteers.
  prefs: []
  type: TYPE_NORMAL
- en: What you tend to find is that these providers typically fall into two categories,
    with exceptions. Generally, the images are provided by universities, or hosting
    providers. The cynic in me thinks that the hosting providers offer a mirror service
    as an easy source of marketing, rather than some philanthropic gesture.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a download location near to you, and wait for the download to complete.
  prefs: []
  type: TYPE_NORMAL
- en: You may note that one of the download options is via Torrent. Torrenting is
    a great way of spreading out the cost of bandwidth to multiple people, and allowing
    a small piece of the software to be downloaded from multiple locations greatly
    reduces load on any one source. However, it should be noted that some workplaces
    watch out for this type of traffic on their networks due to the reputation torrenting
    has.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the checksum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once downloaded (which may take a while, since even minimal is large), you will
    be faced with an ISO image.
  prefs: []
  type: TYPE_NORMAL
- en: 'On my Ubuntu installation, I can see it in my `Downloads` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: One way to confirm our installation media and ensure that we've downloaded exactly
    what we expect, is to compare the `Sha256` sum of the downloaded file with a known-good
    value. This both proves that it's the download we expect it to be, and also checks
    that no corruption has occurred during the file download.
  prefs: []
  type: TYPE_NORMAL
- en: CentOS provides a release notes page that we can visit to find the `Sha256`
    sum we're comparing: [https://wiki.centos.org/Manuals/ReleaseNotes](https://wiki.centos.org/Manuals/ReleaseNotes).
  prefs: []
  type: TYPE_NORMAL
- en: Click through to Release Notes for CentOS 7, which should bring you to the most
    recent version of the release notes.
  prefs: []
  type: TYPE_NORMAL
- en: On this page, we can scroll down to Verifying Downloaded Installation Images,
    which will list the current `Sha256` sums for the download images.
  prefs: []
  type: TYPE_NORMAL
- en: Always make sure that the site you're getting your known-good `Sha256` values
    from is itself legitimate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my case, I can see that the `Sha256` value for the file I just downloaded
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in hand, I can go back to where I listed out the file in my Terminal,
    and run a basic command to check the `Sha256` value of the downloaded image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Comparing the value from the CentOS website with the value from my downloaded
    image confirms that they are the same.
  prefs: []
  type: TYPE_NORMAL
- en: The media is what we expected!
  prefs: []
  type: TYPE_NORMAL
- en: '`Sha256` checks can also be performed on Windows and macOS. On macOS, this
    is accomplished using built-in tools, though Windows may require other software.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our media and VirtualBox is installed, it's time to run through
    manually provisioning (technical term) our machine and installing CentOS.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will be provisioning a small VM, but even that will come
    with the cost of processing power, memory, and disk space. Always ensure that
    you have the appropriate resources available for the machine you're trying to
    create. In this case, at least 50 GB of free drive space and a minimum of 8 GB
    of memory is advisable.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox main window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upon starting, you will be greeted with the VirtualBox main window. At the moment,
    we're only interested in the New button in the top left. You need to click the
    New button.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will be prompted to name your VM.
  prefs: []
  type: TYPE_NORMAL
- en: Call your first machine `CentOS-1`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how when you name your machine, the Type and Version automatically detects
    what you've typed, and reconfigures the selection as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it gives us a Type of Linux, and a Version of Red Hat (64-bit).
    This is okay because of what we said before about CentOS and Red Hat Enterprise
    Linux being very close.
  prefs: []
  type: TYPE_NORMAL
- en: Hit Next.
  prefs: []
  type: TYPE_NORMAL
- en: 64-bit is the architecture of the OS, though the OS you install must be supported
    by the CPU you have (most CPUs these days are x86_64.) The common architectures
    were generally x86 (32-bit) and x86_64 (64-bit) for years, but more recently the
    x86 variant has been dying off. The most common installations these days are x86_64,
    though ARM and aarch64 machines are becoming more commonplace. In this book, we
    will only be using x86_64 machines.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have to configure the amount of memory to give our machine. If you're
    constrained by this, you can put it to a lower value than the default of `1024`
    MB (1 GB), but 1,024 MB is a reasonable place to start, and we can always adjust
    it later if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we'll be prompted to configure the hard disk for our virtual system.
  prefs: []
  type: TYPE_NORMAL
- en: Leave the default option of Create a virtual hard disk now selected, and click
    Create.
  prefs: []
  type: TYPE_NORMAL
- en: You'll be prompted to choose a type. Leave the default selected, that is, VDI
    (VirtualBox Disk Image).
  prefs: []
  type: TYPE_NORMAL
- en: You'll be given the option of provisioning the disk over time (Dynamically allocated)
    or all in one go (Fixed size). I tend to leave it as Dynamically allocated.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll be prompted to choose a location and a size for the disk. I would
    advise leaving the disk in the default location, and for the moment the default
    size of `8` GB should be enough disk space to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Hit Create.
  prefs: []
  type: TYPE_NORMAL
- en: If everything goes well, you will return to the main window, and a new VM should
    be listed on the left, in the `Powered Off` state.
  prefs: []
  type: TYPE_NORMAL
- en: CentOS installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our VM, it's time to install our OS on it.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking Start on the top of the main VirtualBox window, with your VM selected,
    should prompt you to first select a startup disk.
  prefs: []
  type: TYPE_NORMAL
- en: I've navigated to my `Downloads` folder and chosen the downloaded image from
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing Start will boot the machine from our media.
  prefs: []
  type: TYPE_NORMAL
- en: You will be presented with the option screen within the VM, with Test this media
    & install CentOS 7 selected by default.
  prefs: []
  type: TYPE_NORMAL
- en: I usually hit the up arrow (within the VM window) to select only Install CentOS
    7 and skip the media check, though you may wish to perform the test.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using physical media to install a machine (a DVD or CD), it might
    be a good idea to run a test of the media prior to installation.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing *Enter* will continue the installation.
  prefs: []
  type: TYPE_NORMAL
- en: You will be prompted to choose your language. I choose English, because I'm
    monolingual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, you will find yourself on the landing page of the most recent CentOS
    installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c216e71b-0a2b-4123-b31e-3dad56fa2dd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the message at the bottom, suggesting that items marked with the yellow
    icon need to be completed.
  prefs: []
  type: TYPE_NORMAL
- en: Because our date/time, keyboard, and language are all correct, we'll move on
    to the next stages, but feel free to correct any of these settings if they're
    wrong for you.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that under INSTALLATION SOURCE we've got Local media selected, and under
    SOFTWARE SELECTION we've got Minimal Install. This is a product of us selecting
    the minimal image earlier on, and gives us a good chance to talk about installation
    over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to configure our network. Click on NETWORK & HOST NAME to do
    this.
  prefs: []
  type: TYPE_NORMAL
- en: You should have a single Ethernet device, provided as part of the default provisioning
    step when making our VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Toggle the ON/OFF toggle to the right of your device name, and check that the
    network values are populated in a similar way to mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfad055f-aa52-469d-862f-8b0d00376cda.png)'
  prefs: []
  type: TYPE_IMG
- en: VirtualBox creates a NAT network by default, meaning that your VM doesn't sit
    on the exact same network as the host computer. Instead, the VM exists in a network
    by itself, but with a path to the outside world (via your host machine).
  prefs: []
  type: TYPE_NORMAL
- en: Press Done in the top left to complete our network setup (for now)!
  prefs: []
  type: TYPE_NORMAL
- en: 'Back on the main screen, click on INSTALLATION SOURCE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b021f44a-a3f4-4114-b327-46d3fec2f187.png)'
  prefs: []
  type: TYPE_IMG
- en: Within this screen, you can see that the auto-detected media is actually our
    disk image (`sr0` being Linux's denotion of the disc drive).
  prefs: []
  type: TYPE_NORMAL
- en: Change the selected radio button to be On the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Populate the URL bar with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should end up with the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/901711d3-0acd-4807-a9fa-6a383558659f.png)'
  prefs: []
  type: TYPE_IMG
- en: Press Done in the top left.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're back on the main screen, it will be indicated that your software
    source has changed, and you need to verify this by entering the SOFTWARE SELECTION window.
    Proceed with this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a read through the different options, but for now leave Minimal Install selected
    and click Done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/afea01e8-6057-4d62-87c5-1022d55eefda.png)'
  prefs: []
  type: TYPE_IMG
- en: The last thing to do from the main screen is set our INSTALLATION DESTINATION.
    Click through to this screen.
  prefs: []
  type: TYPE_NORMAL
- en: Have a read of the options, but for now we're not going to bother with changing
    the default partition layout, or encrypting our disk. You should also see that
    the default selected disk is our 8 GB VirtualBox one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Done (you shouldn''t have had to make any changes, but the installer
    makes you enter this screen at the very least):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/374bb271-1b2f-4455-a4db-2e0798dd305e.png)'
  prefs: []
  type: TYPE_IMG
- en: We've finally finished our (fairly basic) configuration. Hit the Begin Installation
    button at the bottom of the main screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see the installation begin, and will be given the following screen
    while you wait:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3aab7464-a2be-4122-b5f4-5e80ea64ca0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the options at the top in turn, setting a `root` password and creating
    a user.
  prefs: []
  type: TYPE_NORMAL
- en: The `root` user is akin to the administrator on a Windows system; it's all-powerful
    and can be dangerous in the wrong hands. Some distributions don't even prompt
    you to set a root password on installation, making you use your own user and `su`
    or `sudo` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'When making your user, flag them as an administrator too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7f408f0-9da3-48a0-adec-098a9b8860aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking Done will take you back to the installation progress screen, where
    you may be prompted through the rest of the installation, and eventually get asked
    to reboot into your freshly installed system.
  prefs: []
  type: TYPE_NORMAL
- en: No sane person should ever have to produce that many screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing and updating our VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our installed VM, we're going to log in and have a quick poke
    around.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in from the VirtualBox window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Clicking into our VM, as we did during installation, will allow us to type
    at the login prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fffbf2d8-5938-46fe-b6a4-734366bf27e6.png)'
  prefs: []
  type: TYPE_IMG
- en: We're going to use the user we created at installation time, rather than root.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you also get a bit of information on login attempts since your last
    login. In this case, I failed my first attempt at logging in, and it tells me
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fa84258-fb53-4a5c-bd70-a4f1154c4afd.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations – you've installed CentOS!
  prefs: []
  type: TYPE_NORMAL
- en: It's very rare to find a Linux server with a **graphical user interface** (**GUI**)
    installed, though it does happen. Of the thousands of servers I've worked with,
    I can count the number of times I've come across a GUI on one hand. It's usually
    cause for momentary confusion and distress, before concluding that someone had
    to have installed the GUI by accident – there can be no other explanation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go further, we''re going to run a quick command to find the IP address
    of our machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`ip a` is a shorthand way of typing `ip address` which we will cover more later.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us a lot of network information, but crucially it gives us the `inet` address
    of our network interface, `10.0.2.15`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24e3007d-88b0-4d93-91ce-faabf858a0f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Logging in from the host Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because using the VirtualBox interface is somewhat cumbersome (making things
    such as copy and paste tricky), it makes sense that there's a more elegant way
    to connect and interact with our machine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure Shell** (**SSH**) is the tool we''re going to use for this, as it
    provides a fast and secure way of connecting to remote machines.'
  prefs: []
  type: TYPE_NORMAL
- en: Native SSH clients are available for macOS and all Linux distributions. Windows
    has made some progress in the area too, though I'm to understand that the easiest
    way of using SSH on Windows is still to download a program called PuTTY.
  prefs: []
  type: TYPE_NORMAL
- en: Think of SSH as a Windows Remote Desktop Protocol. If you're new to this world,
    only it's generally faster to use, owing to the fact it's not got to stream a
    graphical connection at you. SSH is entirely text-based.
  prefs: []
  type: TYPE_NORMAL
- en: Using our IP address from a moment ago, we're going to try and SSH to our VM,
    from our host (the machine you're running VirtualBox on:)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Oh no! Something is off!
  prefs: []
  type: TYPE_NORMAL
- en: We haven't connected, and the connection was apparently refused!
  prefs: []
  type: TYPE_NORMAL
- en: Making sure sshd is running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''re going to make sure that the server component of `sshd` is running
    by logging onto our VM in VirtualBox and running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You should be prompted (at least once) for your user password that we set earlier.
  prefs: []
  type: TYPE_NORMAL
- en: What we're doing is enabling the `sshd` service to start when the server is
    booted with the first command, and starting it right now with the second (so that
    we don't have to reboot the VM).
  prefs: []
  type: TYPE_NORMAL
- en: Making sure that VirtualBox lets us through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just starting `sshd` isn't enough to get us connecting to the VM from the host –
    we also have to set up some Port Forwarding for the VirtualBox NAT network.
  prefs: []
  type: TYPE_NORMAL
- en: Port Forwarding is the method of manually specifying how traffic is to traverse
    a NAT'd network. If you were playing Diablo 2 or Warcraft III in the mid-2000s,
    you may have had great fun trying to get Port Forwarding working with your home
    router.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the main VirtualBox window, highlight your VM and click Settings at the
    top. Head to the Network section and click the arrow by Advanced to drop down
    a larger section. Click Port Forwarding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e611068c-e618-4953-84aa-90a23759b082.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the new window that''s popped up, click to add a new rule on the right,
    and populate it with the settings from the following screenshot, substituting
    your Guest IP if it differs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11ee068c-ed4c-4ab1-a961-73ed0d7b2295.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we're effectively mapping `127.0.0.1:2222` on our host to `10.0.2.15:22` on
    our guest. We've set it up so that any connection attempt made to the `localhost`
    address of our host machine, on port `2222`, gets forwarded to the VM on port
    `22`.
  prefs: []
  type: TYPE_NORMAL
- en: '`2222` in the example given is entirely random – it could be `8222`, `5123`,
    `2020`, and so on. I chose `2222` for convenience. You shouldn''t attempt to use
    ports lower than `1024` for this sort of thing, as these are restricted to root-only
    access.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now try our SSH command again, tweaked for what we''ve just set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There are some things to break down about this command.
  prefs: []
  type: TYPE_NORMAL
- en: I've specified the username by using `adam@` and I've told SSH to try connecting
    to the localhost address `127.0.0.1`, along with the port we've chosen, that is, `2222`.
  prefs: []
  type: TYPE_NORMAL
- en: We're presented with the fingerprint of the host, which we'll talk more about
    later, and which we accept.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re then prompted to log in, using the password we set up in the VM, for
    our user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Success!
  prefs: []
  type: TYPE_NORMAL
- en: We can now work on our VM as if it were a real server – just be mindful to make
    sure that you're on your VM when running any commands.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve got access to our machine, we''re going to run one command
    to make sure that we''ve got the latest version of all the installed software:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When run, you may be presented with a long list of software to update. Typing *Y*
    for confirmation and hitting *Enter* will work through the upgrade of this software,
    as well as any dependent software that's needed. You may also be prompted to accept
    new or updated GPG keys.
  prefs: []
  type: TYPE_NORMAL
- en: GPG is a book by itself – not an exciting book, but certainly a book.
  prefs: []
  type: TYPE_NORMAL
- en: If you've upgraded software that's constantly running, such as an Apache web
    server, it can be a good idea to schedule a restart of that service to make sure
    that the newer version is in use.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, the only things that should require a full system reboot
    after being updated are the kernel and the init (initialization) system. This
    is a stark difference to Windows, where rebooting seems to be what the OS is designed
    to do, and actual work is just a by-product.
  prefs: []
  type: TYPE_NORMAL
- en: In my case, my kernel got updated. I'm able to confirm this by doing the following.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we list the installed versions of the `kernel` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we check the version of the kernel currently in use, using `uname`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We can see from this that we're running version `3.10.0-862.el7`, but we have
    `3.10.0-862.9.1.el7` too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebooting the system causes the newer kernel to be selected at boot time, and
    running `uname` again shows a different result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Huzzah – we're running the newer kernel!
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how VMs differ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we started talking about VMs and what they are. We're now going to
    look at a couple of ways of working out if we're in a VM, from inside the machine
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: I would generally do this if I'd got a new **virtual private server** (**VPS**)
    from a hosting provider, and wanted to know what software was being used to virtualize
    my new machine.
  prefs: []
  type: TYPE_NORMAL
- en: dmidecode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of my favourite tools, dmidecode, can be used to dump a computer's **desktop
    management interface** (**DMI**) table. In practice, this means that it can be
    used to find out what kind of hardware you're running in a machine.
  prefs: []
  type: TYPE_NORMAL
- en: This command requires root access, so we'll be using `sudo` throughout these
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''re going to list the valid `types` we can pass to dmidecode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Starting at the top, we''re going to use `bios` and see if it gives us anything
    useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Instantly, we can see `VirtualBox` next to `Version`, which is a pretty strong
    hint that we're dealing with a VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will choose something else, `system`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Again, the `Product Name` seen here is `VirtualBox`, and the `Family` is `Virtual
    Machine`, both of which are pretty damning pieces of evidence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we''re going to look at the `Chassis Information`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Oracle corporation is, again, a significant piece of information that leads
    us to believe we're in a virtualized environment.
  prefs: []
  type: TYPE_NORMAL
- en: If we don't want a lot of other information, we can fine-tune our search using
    dmidecode's `-s` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this option without an argument outputs a list of potential arguments
    we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can instantly see `bios-version`, and as we know from earlier, it
    should be `VirtualBox`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: These types of short-output commands are very useful for scripting, where succinctness
    is sometimes desirable.
  prefs: []
  type: TYPE_NORMAL
- en: dmidecode is usually installed by default, at least on Ubuntu and CentOS installations.
  prefs: []
  type: TYPE_NORMAL
- en: lshw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Should dmidecode not be available, you can also make use of `lshw`, a command
    for listing hardware. Again, it makes use of the DMI table on a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Very quickly, we can use a format option of `lshw` to show the bus information
    of a system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This gives us information that instantly suggests a VM, such as the system,
    bus, and display entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have an easy-to-read breakdown of the classes available, meaning that
    we can query those directly, starting with `disk` in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if we think that''s too much information, we could query the
    system class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Quick sudo explanation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the various commands that were given in the preceding recipe, we used `sudo`
    repeatedly. This was so that we didn't have to log in as the `root` user to perform
    various restricted actions.
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo` is a contraction of ''superuser do'' because `sudo` used to be used
    for running commands as the "superuser" only, nowadays you can use it to run commands
    as various users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, if you attempt to run a command that you lack permissions to complete
    successfully, you''ll be greeted with an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here, I tried to have a look at the `/etc/sudoers` file, which also happens
    to be the file that determines a user's `sudo` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Running this command with `sudo` is a different story. Instead, it opens the
    file for me, dropping me into the `less` pager.
  prefs: []
  type: TYPE_NORMAL
- en: 'Toward the bottom of this file, we find the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `wheel` portion of this block is uncommented, and the text above that tells
    us what that means.
  prefs: []
  type: TYPE_NORMAL
- en: So, the obvious next question is, am I in the `wheel` group?
  prefs: []
  type: TYPE_NORMAL
- en: The term `wheel` has ancient origins in old-school UNIX installations. These,
    days it might be called `admin` or other. CentOS keeps it classic by using `wheel`.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, this is very easy to check – the file in question is always in the
    same place: `/etc/group`.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we print the contents of the `group` file to our screen, and look specifically
    for `wheel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We see the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the `group_name` is `wheel`, the `password` is a lower `x`,
    which means that shadow passwords are being used, the group ID is `10`, and the
    only user in this group is myself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even do this with a single word, that being the `groups` command, which
    prints the groups that your current user is a member of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Being granted the ability to run superuser commands with `sudo` isn't the immediate
    right of everyone on the system, and it's up to the individual company and administration
    team to decide how that power is distributed.
  prefs: []
  type: TYPE_NORMAL
- en: There are places where everyone in operations has the power of `sudo`, and places
    where one person has that power.
  prefs: []
  type: TYPE_NORMAL
- en: Using Vagrant to automatically provision VMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Going through the tedium of installing a new VM every time you want to test
    something new, or create a sandbox to work in, can get old fast.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, various administrators and developers have come up with solutions
    that make provisioning a VM (or several) a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a moment to think about the advantages of this approach, it''s easy
    to highlight just a few benefits of automated VM provisioning:'
  prefs: []
  type: TYPE_NORMAL
- en: It eliminates the time it takes to manually type answers into a VM window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows for the automated running of software tests in a development environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows for the sharing of text files that act as recipes for how to build
    a VM, rather than the shifting of large VM images from station to station. This
    is a form of **Infrastructure as Code** (**IaC**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kickstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One method of automating the deployment of boxes are kickstart files, which
    are frequently used in large deployments to automatically answer the questions
    that the installer asks the user.
  prefs: []
  type: TYPE_NORMAL
- en: If you take a look in the `/root/` folder of a CentOS VM, there's a good chance
    you'll find a file called `anaconda-ks.cfg`, which is effectively the kickstart
    file for the manual steps you took when installing the machine (anaconda being
    the name of the installer).
  prefs: []
  type: TYPE_NORMAL
- en: These files are tweaked, or written from scratch, and then hosted on a web server,
    on an installation network, ready to be picked up by an unconfigured machine.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Locally, kickstart files aren't really practical, and they're not quick to work
    with. We need something that can be set up quickly and easily, but which is also
    very powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Enter `Vagrant`.
  prefs: []
  type: TYPE_NORMAL
- en: Developed by Hashicorp as an open source piece of software, Vagrant can be used
    for automatically provisioning VMs, and even whole development environments.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, somewhere, you might find a `Vagrantfile` (the name of the core Vagrant...
    file...) is in a repository of some in-house application.
  prefs: []
  type: TYPE_NORMAL
- en: The developers working on the application pull down the repository to their
    local machine, and use the Vagrant configuration file to spin up a local development
    environment, which they can then use to test code changes or feature additions
    without utilizing expensive development environments.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant is available for macOS, Linux, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'On my Ubuntu host, I install Vagrant like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: There's quite a few dependencies, totalling around 200 MB of used disk space
    afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ubuntu''s packages are reasonably up to date, so we get a recent version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m quite particular about where I keep my files, so I''m going to create
    a dedicated folder called `Vagrant` in my home directory, which I''ll use for
    working with my Vagrant VMs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will initialize a new `Vagrantfile`. The following command will do
    this automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Have a look in the `Vagrantfile`, but don't make any changes yet. You'll see
    that a lot of the options are listed, but commented out by default. This is a
    good way of introducing you to what Vagrant is capable of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that, by default, Vagrant will attempt to use a box called `base`, but
    will also prompt you to look at [https://vagrantcloud.com/search](https://vagrantcloud.com/search)
    for other boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Doing a search for CentOS on `vagrantcloud` reveals a nice default box we can
    use: [https://app.vagrantup.com/centos/boxes/7](https://app.vagrantup.com/centos/boxes/7).'
  prefs: []
  type: TYPE_NORMAL
- en: It also lists the providers that the box can be provisioned under. VirtualBox
    is one of them, meaning it will work in our installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to change our `Vagrantfile` to point at this box. From the folder in
    which your `Vagrantfile` exists, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We've just used `sed` (a common tool for editing text on the command line, either
    in files or on standard out) with the `-i` option, to modify our `Vagrantfile`
    in-place. Opening the file now will show us that the `base` line has changed to
    point to `centos/7` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can provision our VM with another simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: All being well, your VM image will start to download from `vagrantcloud`, and
    your box will spin itself up in VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even see our VM in the VirtualBox main window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ba8e1b1-413e-44a9-8c79-18d982f8019d.png)'
  prefs: []
  type: TYPE_IMG
- en: Taking a look under Settings | Network and Port Forwarding shows how Vagrant
    also automatically sets up access for the NAT's network, in a very similar way
    to the manual way we did.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also connect to our new VM using a built-in Vagrant shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that we''ve provisioned and connected to a VM in four commands,
    in summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also destroy any VMs we create from within the same folder that we ran
    against our `Vagrantfile` using one command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: I wrote about manually setting up the VM with VirtualBox (and took all those
    screenshots) first, because it's good to get into the habit of learning about
    how things are done manually prior to automating the tedious bits. This same rule
    can be applied to most software, because even when it takes longer, knowing how
    something works under the hood makes troubleshooting much easier later on.
  prefs: []
  type: TYPE_NORMAL
- en: Anecdote - try, try, and try again
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will find that in your career the concept of holy wars is dominant, and
    every new generation of technology has its apologists and opponents. This is not
    least seen in the distribution-wars, which has tribal factions staunchly defending
    their OS of choice. If you ever find yourself in the position of choosing which
    distribution to install for a company or project, take into consideration everything
    you've read here, and do your own reading around before blindly accepting one
    person's opinion as truth.
  prefs: []
  type: TYPE_NORMAL
- en: That's not to say you should become tribal yourself – I've installed all of
    the preceding distributions at one time or another, the first of which was Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: Back in 2005, I learned about this thing called Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Before then, I'd known Macs my entire life, as it was the brand my dad had decided
    upon. I'd also cobbled together a single Windows machine for the purpose of playing
    Diablo, though I can't say I ever enjoyed using the OS itself.
  prefs: []
  type: TYPE_NORMAL
- en: Everything changed when I spotted a computer magazine on holiday, and ended
    up flipping through the various pages until I landed on a piece about Linux, which
    captured my imagination immediately. Something different and quirky appealed to
    my rebellious attitude, and as a result I ended up burning this thing called Ubuntu
    to a CD (or several).
  prefs: []
  type: TYPE_NORMAL
- en: Back then, Canonical would freely send you Ubuntu CDs if you requested them,
    but I was impatient, and burning disks was quicker.
  prefs: []
  type: TYPE_NORMAL
- en: I made a backup of everything I cared about on my computer, and set about working
    my way through my first installation once I'd worked out exactly how to boot from
    a CD. By all accounts it went well, and though I had to nip to another computer
    occasionally (no smartphones, remember) to look up what certain options meant,
    I eventually had a shiny new desktop OS installed.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble started around this time.
  prefs: []
  type: TYPE_NORMAL
- en: My wireless card didn't work, the graphics seemed sluggish, and I ran a single
    update before rebooting, which landed me not on a desktop, but at a command-line
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: I had never seen a command-line interface before.
  prefs: []
  type: TYPE_NORMAL
- en: To this day, I have no idea how I ever managed to get a functional OS on that
    box, and I was forever fighting a program called `NdisWrapper` to get my wireless
    to work, or installing proprietary (though I didn't know the word at the time)
    graphics drivers, which would break as soon as you upgraded the kernel (though
    again, I had no idea that was what was happening at the time).
  prefs: []
  type: TYPE_NORMAL
- en: I somehow plodded along, soon getting bored of Ubuntu when I discovered different
    distributions, and spending the next few months with a different desktop every
    week. I distinctly remember running through Ubuntu, Debian, Fedora, OpenSUSE,
    and a very, very early attempt at installing Gentoo, which I gave up on after
    about five minutes.
  prefs: []
  type: TYPE_NORMAL
- en: I ended up on forums frequently, painstakingly copying errors into Google to
    try and find other people who'd had the issues I was experiencing, and often discovering
    a post where the poster had inconveniently announced they'd **Fixed It!** without
    actually providing the solution they'd used.
  prefs: []
  type: TYPE_NORMAL
- en: All of this, as irritating as it was to me at the time, was a learning experience,
    and I think my love of Linux and computing in general can be traced back to the
    first time I installed Ubuntu. Prior to that date, computers had been games machines
    and that was it.
  prefs: []
  type: TYPE_NORMAL
- en: Soon, I was using Linux Mint to bypass the school firewall, booting to a Live
    USB drive, and ignoring all the feeble attempts at blocking that the school IT
    department had enabled (for some reason, they believed Windows was the only OS
    in existence). I still don't quite know how this worked, but the point was that
    it did.
  prefs: []
  type: TYPE_NORMAL
- en: Between bouts of World of Warcraft, Linux was something I tinkered with for
    years, keeping up on the latest releases and installing other distributions to
    try ("distribution-hopping" frequently). I broke things, fixed them, got angry
    with Linux, got angry with computers in general, but on the whole, I slowly improved.
  prefs: []
  type: TYPE_NORMAL
- en: Fast forward a little while and generally bad school results meant I bailed
    out without finishing college, or going to university. I had very little in the
    way of qualifications, but still had something of an aptitude for computing. I
    found and went on a course that lasted a few months and resulted in a couple of
    noddy Microsoft certifications, but which ultimately meant that I had a sparse
    CV that I could start submitting to companies.
  prefs: []
  type: TYPE_NORMAL
- en: I was called by and went for an interview with a hosting provider based in Manchester,
    and met with the man who's now the CTO. The interview was weird, with us variously
    discussing taking computers apart, a bit of Linux, and a lot of Counter Strike,
    as it turned out he'd played a lot in years past. I left feeling nervous, but
    fairly amused at how it had gone.
  prefs: []
  type: TYPE_NORMAL
- en: Upon returning, after being called back in, I was fairly stunned to get offered
    the job of Data Center Engineer, which while not a Linux-focused position, was
    more than I could have hoped for given my level of education. It made me incredibly
    happy to be employable, and I'm forever grateful to that company and interviewer
    for giving me a chance.
  prefs: []
  type: TYPE_NORMAL
- en: The takeaway I'd like to present from this is that Linux is fairly great – it
    can give even the most academically illiterate of us a decent career, and it's
    so vibrant and forever evolving that there's always something new to learn. I've
    met some great people, and learned some fascinating things on my journey, a lot
    of which I hope to pass on in these pages.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you find the rest of this book informative, whether you're a newcomer
    to Linux administration, or you're someone experienced that's just checking for
    tips and tricks you might not know.
  prefs: []
  type: TYPE_NORMAL
