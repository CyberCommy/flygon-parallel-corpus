- en: Building Production-Ready Kubernetes Clusters
  prefs: []
  type: TYPE_NORMAL
- en: This chapter proposes the most common deployment methods that are used on popular
    cloud services as well as on-premises, although you will certainly find a number
    of other tutorials on the internet explaining other approaches. This chapter explains
    the differences between managed/hosted cloud services versus self-managed cloud
    or on-premises Kubernetes deployments and the advantages of one vendor over another.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Amazon Web Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Google Cloud Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Microsoft Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Alibaba Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and managing Kubernetes clusters with Rancher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Red Hat OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting installation issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is recommended that you have a fundamental knowledge of Linux containers
    and Kubernetes in general. For preparing your Kubernetes clusters, using a Linux
    host is recommended. If your workstation is Windows-based, then we recommend that
    you use **Windows Subsystem for Linux** (**WSL**). WSL gives you a Linux command
    line on Windows and lets you run ELF64 Linux binaries on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: It's always good practice to develop using the same environment (which means
    the same distribution and the same version) as the one that will be used in production.
    This will avoid unexpected surprises such as **It Worked on My Machine** (**IWOMM**).
    If your workstation is using a different OS, another good approach is to set up
    a virtual machine on your workstation. VirtualBox ([https://www.virtualbox.org/](https://www.virtualbox.org/))
    is a free and open source hypervisor that runs on Windows, Linux, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll assume that you are using an Ubuntu host (18.04, code
    name Bionic Beaver at the time of writing). There are no specific hardware requirements
    since all the recipes in this chapter will be deployed and run on cloud instances.
    Here is the list of software packages that will be required on your localhost
    to complete the recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: cURL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vim or Nano (or your favorite text editor)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Amazon Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this section will take you through how to get a fully functional
    Kubernetes cluster with a fully customizable master and worker nodes that you
    can use for the recipes in the following chapters or in production.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover both Amazon EC2 and Amazon EKS recipes so that
    we can run Kubernetes on **Amazon Web Services** (**AWS**).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the operations mentioned here require an AWS account and an AWS user with
    a policy that has permission to use the related services. If you don't have one,
    go to [https://aws.amazon.com/account/](https://aws.amazon.com/account/) and create
    one.
  prefs: []
  type: TYPE_NORMAL
- en: AWS provides two main options when it comes to running Kubernetes on it. You
    can consider using the **Amazon Elastic Compute Cloud** (**Amazon EC2**) if you'd
    like to manage your deployment completely and have specific powerful instance
    requirements. Otherwise, it's highly recommended to consider using managed services
    such as **Amazon Elastic Container Service for Kubernetes** (**Amazon EKS**).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on whether you want to use AWS EC2 service or EKS, you can follow
    the following recipes to get your cluster up and running using either kops or
    eksctl tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure AWS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing kops to provision a Kubernetes cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a Kubernetes cluster on Amazon EC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a managed Kubernetes cluster on Amazon EKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure AWS services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we will get the AWS **Command-Line Interface** (**CLI**) `awscli` and
    the Amazon EKS CLI `eksctl` to access and configure AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `awscli` on your workstation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the AWS CLI so that it uses your access key ID and secret access
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Download and install the Amazon EKS command-line interface, `eksctl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify its version and make sure `eksctl` is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To be able to perform the following recipes, the `eksctl` version should be
    `0.13.0` or later.
  prefs: []
  type: TYPE_NORMAL
- en: Installing kops to provision a Kubernetes cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we will get the Kubernetes Operations tool, `kops`, and Kubernetes
    command-line tool, `kubectl`, installed in order to provision and manage Kubernetes
    clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install the Kubernetes Operations tool, `kops`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to make sure `kops` is installed and confirm that
    the version is `1.15.0` or later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Download and install the Kubernetes command-line tool, `kubectl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify its version and make sure `kubectl` is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To be able to perform the following recipes, the `kubectl` version should be
    `v1.15` or later.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning a Kubernetes cluster on Amazon EC2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe will take you through how to get a fully functional Kubernetes cluster
    with fully customizable master and worker nodes that you can use for the recipes
    in the following chapters or in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a domain for your cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a cloud management best practice to have subdomains and to divide your
    clusters with logical and valid DNS names for `kops` to successfully discovery
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, I will use the `k8s.containerized.me` subdomain as our hosted
    zone. Also, if your domain is registered with a registrar other than Amazon Route 53,
    you must update the name servers with your registrar and add Route 53 NS records
    for the hosted zone to your registrar''s DNS records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an S3 bucket to store the Kubernetes configuration and the state of
    the cluster. In our example, we will use `s3.k8s.containerized.me` as our bucket
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm your S3 bucket by listing the available bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable bucket versioning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Set environmental parameters for `kops` so that you can use the locations by
    default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an SSH key if you haven''t done so already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the cluster configuration with the list of zones where you want your
    master nodes to run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait a couple of minutes for the nodes to launch and validate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use `kubectl` to manage your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: By default, `kops` creates and exports the Kubernetes configuration under `~/.kube/config`.
    Therefore, no additional steps are required to connect your clusters using `kubectl`.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning a managed Kubernetes cluster on Amazon EKS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to get your managed Kubernetes-as-a-service cluster
    up and running on Amazon EKS using `eksctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a cluster using the default settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: By default, `eksctl` deploys a cluster with workers on two `m5.large` instances
    using the AWS EKS AMI in the `us-west-2` region. `eksctl` creates and exports
    the Kubernetes configuration under `~/.kube/config`. Therefore, no additional
    steps are required to connect your clusters using `kubectl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Confirm the cluster information and workers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have a two-node Amazon EKS cluster up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first recipe on Amazon EC2 showed you how to provision multiple copies of
    master nodes that can survive a master node failure as well as single AZ outages.
    Although it is similar to what you get with the second recipe on Amazon EKS with
    Multi-AZ support, clusters on EC2 give you higher flexibility. When you run Amazon
    EKS instead, it runs a single-tenant Kubernetes control plane for each cluster, and
    the control plane consists of at least two API server nodes and three `etcd` nodes
    that run across three AZs within a region.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the cluster options we used in s*tep 7* with the `kops
    create cluster` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--node-count=3` sets the number of nodes to create. In our example, this is `6`. This
    configuration will deploy two nodes per zone defined with`--zones=us-east-1a,us-east-1b,us-east-1c`,
    with a total of three master nodes and six worker nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--node-size` and `--master-size` set the instance size for the worker and
    master nodes. In our example, `t2.medium` is used for worker nodes and `t2.large` is
    used for master nodes. For larger clusters, `t2.large` is recommended for a worker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--zones` and `--master-zones` set the zones that the cluster will run in.
    In our example, we have used three zones called `us-east-1a`, `us-east-1b`, and `us-east-1c`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For additional zone information, check the AWS Global Infrastructure link in
    the*See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: AWS clusters cannot span across multiple regions and all the zones that have
    been defined for the master and worker nodes should be within the same region.
  prefs: []
  type: TYPE_NORMAL
- en: When deploying multi-master clusters, an odd number of master instances should
    be created. Also, remember that Kubernetes relies on etcd, a distributed key/value
    store. etcd quorum requires more than 51% of the nodes to be available at any
    time. Therefore, with three master nodes, our control plane can only survive a
    single master node or AZ outages. If you need to handle more than that, you need
    to consider increasing the number of master instances.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is also useful to have knowledge of the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the AWS Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a gossip-based cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different regions for an S3 bucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing cluster configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning an EKS cluster using the Amazon EKS dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Kubernetes Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the AWS Shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another useful tool worth mentioning here is `aws-shell`. It is an integrated
    shell that works with the AWS CLI. It uses the AWS CLI configuration and improves
    productivity with an autocomplete feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `aws-shell` using the following command and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5c520f0d-774a-4224-a917-223d3cbf2101.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use AWS commands with `aws-shell` with less typing. Press the *F10* key
    to exit the shell.
  prefs: []
  type: TYPE_NORMAL
- en: Using a gossip-based cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we created a domain (either purchased from Amazon or another
    registrar) and a hosted zone, because kops uses DNS for discovery. Although it
    needs to be a valid DNS name, starting with kops 1.6.2, DNS configuration became
    optional. Instead of an actual domain or subdomain, a gossip-based cluster can
    be easily created. By using a registered domain name, we make our clusters easier
    to share and accessible by others for production use.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, for any reason, you prefer a gossip-based cluster, you can skip hosted
    zone creation and use a cluster name that ends with `k8s.local` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Setting the environmental parameters for `kops` is optional but highly recommended
    since it shortens your CLI commands.
  prefs: []
  type: TYPE_NORMAL
- en: Using different regions for an S3 bucket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order for kops to store cluster configuration, a dedicated S3 bucket is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example for the `eu-west-1` region would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This S3 bucket will become the source of truth for our Kubernetes cluster configuration.
    For simplicity, it is recommended to use the `us-east-1` region; otherwise, an
    appropriate `LocationConstraint` needs be specified in order to create the bucket
    in the desired region.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the cluster configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `kops create cluster` command, which we used to create the cluster configuration, doesn't
    actually create the cluster itself and launch the EC2 instances; instead, it creates
    the configuration file in our S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the configuration file, you can make changes to the configuration
    using the `kops edit cluster` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can separately edit your node instance groups using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The config file is called from the S3 bucket's state store location. If you
    prefer a different editor you can, for example, set `$KUBE_EDITOR=nano` to change
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To delete your cluster, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This process may take a few minutes and, when finished, you will get a confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning an EKS cluster using the Amazon EKS Management Console
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the *Provisioning a managed Kubernetes cluster on Amazon EKS* recipe, we
    used eksctl to deploy a cluster. As an alternative, you can also use the AWS Management
    Console web user interface to deploy an EKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to get your cluster up and running on Amazon EKS:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and go to the Amazon EKS console at [https://console.aws.amazon.com/eks/home#/clusters](https://console.aws.amazon.com/eks/home#/clusters).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a cluster name and click on the Next Step button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Create Cluster page, select Kubernetes Version, Role name, at least two
    or more availability zones from the subnets list, and Security groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cluster creation with EKS takes around 20 minutes. Refresh the page in 15-20
    minutes and check its status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following command to update your `kubectl` configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, use `kubectl` to manage your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now that your cluster has been configured, you can configure `kubectl` to manage
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Kubernetes Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Last but not least, to deploy the Kubernetes Dashboard application on an AWS
    cluster, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time I wrote this recipe, Kubernetes Dashboard v.2.0.0 was still in
    beta. Since v.1.x version will be obsolete soon, I highly recommend that you install
    the latest version, that is, v.2.0.0\. The new version brings a lot of functionality
    and support for Kubernetes v.1.16 and later versions. Before you deploy Dashboard,
    make sure to remove the previous version if you have a previous version. Check
    the latest release by following the link in the following information box and
    deploy it using the latest release, similar to doing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As the Kubernetes version gets upgraded, the dashboard application also gets
    frequently updated. To use the latest version, find the latest link to the YAML
    manifest on the release page at [https://github.com/kubernetes/dashboard/releases](https://github.com/kubernetes/dashboard/releases).
    If you experience compatibility issues with the latest version of Dashboard, you
    can always deploy the previous stable version by using the following command:
    `$ kubectl apply -f`'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/depl`'
  prefs: []
  type: TYPE_NORMAL
- en: '`oy/recommended/kubernetes-dashboard.yaml`'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `kubernetes-dashboard` service is exposed using the `ClusterIP`
    type. If you want to access it from outside, edit the service using the following
    command and replace the `ClusterIP` type with `LoadBalancer`; otherwise, use port
    forwarding to access it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the external IP of your dashboard from the `kubernetes-dashboard` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Open the external IP link in your browser. In our example, it is `https://myaddress.us-east-1.elb.amazonaws.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will use the token option to access Kubernetes Dashboard. Now, let''s find
    the token in our cluster using the following command. In this example, the command
    returns `kubernetes-dashboard-token-bc2w5` as the token name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the secret name with yours from the output of the previous command.
    Get the token details from the description of the Secret:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the token section from the output of the preceding command and paste it
    into Kubernetes Dashboard to sign in to Dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2d90464c-0905-4590-a4c6-4a2da4455555.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you have access to Kubernetes Dashboard to manage your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kops documentation for the latest version and additional `create cluster` parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/kubernetes/kops/blob/master/docs/aws.md](https://github.com/kubernetes/kops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/kubernetes/kops/blob/master/docs/cli/kops_create_cluster.md](https://github.com/kubernetes/kops/blob/master/docs/cli/kops_create_cluster.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS Command Reference S3 Create Bucket API: [https://docs.aws.amazon.com/cli/latest/reference/s3api/create-bucket.html](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-bucket.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Global Infrastructure Map: [https://aws.amazon.com/about-aws/global-infrastructure/ ](https://aws.amazon.com/about-aws/global-infrastructure/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon EKS FAQ: [https://aws.amazon.com/eks/faqs/](https://aws.amazon.com/eks/faqs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AWS Fargate product, another AWS service, if you would prefer to run containers
    without managing servers or clusters: [https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A complete list of CNCF-certified Kubernetes installers: [https://landscape.cncf.io/category=certified-kubernetes-installer&format=card-mode&grouping=category](https://landscape.cncf.io/category=certified-kubernetes-installer&format=card-mode&grouping=category).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other recommended tools for getting highly available clusters on AWS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Konvoy: [https://d2iq.com/solutions/ksphere/konvoy](https://d2iq.com/solutions/ksphere/konvoy)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KubeAdm: [https://github.com/kubernetes/kubeadm ](https://github.com/kubernetes/kubeadm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KubeOne: [https://github.com/kubermatic/kubeone](https://github.com/kubermatic/kubeone)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KubeSpray: [https://github.com/kubernetes-sigs/kubespray](https://github.com/kubernetes-sigs/kubespray)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Google Cloud Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will take you through step-by-step instructions to configure Kubernetes
    clusters on GCP. You will learn how to run a hosted Kubernetes cluster without
    needing to provision or manage master and etcd instances using GKE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the operations mentioned here require a GCP account with billing enabled.
    If you don't have one already, go to [https://console.cloud.google.com](https://console.cloud.google.com) and
    create an account.
  prefs: []
  type: TYPE_NORMAL
- en: On **Google Cloud Platform** (**GCP**), you have two main options when it comes
    to running Kubernetes. You can consider using **Google Compute Engine** (**GCE**)
    if you'd like to manage your deployment completely and have specific powerful
    instance requirements. Otherwise, it's highly recommended to use the managed **Google
    Kubernetes Engine** (**GKE**).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure GCP services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a managed Kubernetes cluster on GKE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to GKE clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure GCP services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we will get the primary CLI for Google Cloud Platform, `gcloud`, installed
    so that we can configure GCP services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to download the `gcloud` CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the SDK and follow the instructions given:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: During the initialization, when asked, select either an existing project that
    you have permissions for or create a new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the Compute Engine APIs for the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Set a default zone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure you can start up a GCE instance from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the test VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If all the commands are successful, you can provision your GKE cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning a managed Kubernetes cluster on GKE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Cluster creation will take 5 minutes or more to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Google Kubernetes Engine (GKE) clusters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get access to your GKE cluster, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure `kubectl` to access your `k8s-devops-cookbook-1` cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify your Kubernetes cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have a three-node GKE cluster up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly provision a GKE cluster using some default
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 1,* we created a cluster with some default parameters*.* While all
    of the parameters are very important, I want to explain some of them here.
  prefs: []
  type: TYPE_NORMAL
- en: '`--cluster-version` sets the Kubernetes version to use for the master and nodes.
    Only use it if you want to use a version that''s different from the default. To
    get the available version information, you can use the `gcloud container get-server-config` command.'
  prefs: []
  type: TYPE_NORMAL
- en: We set the instance type by using the `--machine-type` parameter. If it's not
    set, the default is `n1-standard-1`. To get the list of predefined types, you
    can use the `gcloud compute machine-types list` command.
  prefs: []
  type: TYPE_NORMAL
- en: The default image type is COS, but my personal preference is Ubuntu, so I used `--image-type
    UBUNTU` to set the OS image to `UBUNTU`. If this isn't set, the server picks the
    default image type, that is, COS. To get the list of available image types, you
    can use the `gcloud container get-server-config` command.
  prefs: []
  type: TYPE_NORMAL
- en: GKE offers advanced cluster management features and comes with the automatic
    scaling of node instances, auto-upgrade, and auto-repair to maintain node availability. `--enable-autoupgrade`
    enables the GKE auto-upgrade feature for cluster nodes and `--enable-autorepair`
    enables the automatic repair feature, which is started at the time defined with
    the `--maintenance-window` parameter. The time that's set here is the UTC time
    zone and must be in `HH:MM` format.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some of the alternative methods that can be employed besides
    the recipe described in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Google Cloud Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying with a custom network configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the Workloads dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google Cloud Shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an alternative to your Linux workstation, you can get a CLI interface on
    your browser to manage your cloud instances.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://cloud.google.com/shell/](https://cloud.google.com/shell/) to
    get a Google Cloud Shell.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying with a custom network configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following steps demonstrate how to provision your cluster with a custom
    network configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a VPC network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a subnet in your VPC network. In our example, this is `10.240.0.0/16`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a firewall rule to allow internal traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a firewall rule to allow external SSH, ICMP, and HTTPS traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Add the `--network k8s-devops-cookbook` and `--subnetwork kubernetes` parameters
    to your `container clusters create` command and run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To delete your `k8s-devops-cookbook-1` cluster, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This process may take a few minutes and when finished, you will get a confirmation
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the Workloads dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On GCP, instead of using the Kubernetes Dashboard application, you can use
    the built-in Workloads dashboard and deploy containerized applications through
    Google Marketplace. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To access the Workload dashboard from your GCP dashboard, choose your GKE cluster
    and click on Workloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Show system workloads to see the existing components and containers
    that have been deployed in the `kube-system` namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GCP documentation: [https://cloud.google.com/docs/](https://cloud.google.com/docs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GKE on-prem installation: [https://cloud.google.com/gke-on-prem/docs/how-to/install-overview-basic](https://cloud.google.com/gke-on-prem/docs/how-to/install-overview-basic)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover a recipe using Microsoft **Azure Kubernetes Service**
    (**AKS**) in order to create a Kubernetes cluster on the Microsoft Azure Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the operations mentioned here require a Microsoft Azure subscription. If
    you don't have one already, go to [https://portal.azure.com](https://portal.azure.com)[ ](https://portal.azure.com)and
    create a free account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will take you through how to configure a Kubernetes cluster on
    Microsoft Azure. This section is further divided into the following subsections
    to make this process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure Azure services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a managed Kubernetes cluster on AKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to AKS clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure Azure services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we will get the Azure CLI tool called `az` and `kubectl` installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Download and install the `az` CLI tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the `az` version you''re using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `kubectl`, if you haven''t installed it already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: If all commands were successful, you can start provisioning your AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning a managed Kubernetes cluster on AKS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a resource group named `k8sdevopscookbook` in your preferred region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a service principal and take note of your `appId` and `password` for
    the next steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a cluster. Replace `appId` and `password` with the output from the preceding
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Cluster creation will take around 5 minutes. You will see `"provisioningState":
    Succeeded"` when it has successfully completed.'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to AKS clusters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gather some credentials and configure `kubectl` so that you can use them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify your Kubernetes cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have a three-node GKE cluster up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly provision an AKS cluster using some common
    options.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, the command starts with `az aks create`, followed by `-g` or `--resource-group`,
    so that you can select the name of your resource group. You can configure the
    default group using `az configure --defaults group=k8sdevopscookbook` and skip
    this parameter next time.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `--name AKSCluster` parameter to set the name of the managed cluster
    to `AKSCluster`. The rest of the parameters are optional; `--kubernetes-version`
    or `-k` sets the version of Kubernetes to use for the cluster. You can use the
    `az aks get-versions --location eastus --output table` command to get the list
    of available options.
  prefs: []
  type: TYPE_NORMAL
- en: We used `--node-vm-size` to set the instance type for the Kubernetes worker
    nodes. If this isn't set, the default is `Standard_DS2_v2`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we used `--node-count` to set the number of Kubernetes worker nodes. If
    this isn't set, the default is `3`. This can be changed using the `az aks scale` command.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `--generate-ssh-keys` parameter is used to autogenerate the SSH
    public and private key files, which are stored in the `~/.ssh` directory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although Windows-based containers are now supported by Kubernetes, to be able
    to run Windows Server containers, you need to run Windows Server-based nodes.
    AKS nodes currently run on Linux OS and Windows Server-based nodes are not available
    in AKS. However, you can use Virtual Kubelet to schedule Windows containers on
    container instances and manage them as part of your cluster. In this section,
    we will take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing Kubernetes Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To delete your cluster, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This process will take a few minutes and, when finished, you will receive confirmation
    of this.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Kubernetes Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To view Kubernetes Dashboard, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Kubernetes Dashboard, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'If your cluster is RBAC-enabled, then create `Clusterrolebinding`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Open a browser window and go to the address where the proxy is running. In our
    example, this is `http://127.0.0.1:8001/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft AKS FAQ: [https://docs.microsoft.com/en-us/azure/aks/faq](https://docs.microsoft.com/en-us/azure/aks/faq)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository of the open source core of AKS on GitHub: [https://github.com/Azure/aks-engine](https://github.com/Azure/aks-engine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster on Alibaba Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alibaba Cloud (also known as Aliyun) offers multiple templates that you can
    use to provision a Kubernetes environment. There are four main service categories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kubernetes: Self-managed Kubernetes deployed with three masters on ECS instances
    within a single zone. Worker nodes can be on either ECS or bare-metal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed Kubernetes: Similar to the Kubernetes cluster option, except master
    nodes are managed by Alibaba Cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-AZ Kubernetes: Similar to the Kubernetes cluster option, except the self-managed
    master and worker instances can be deployed in separate availability zones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Serverless Kubernetes: A Kubernetes service offering where you deploy container
    applications without having to manage and maintain clusters instances:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/d5d00123-6c97-4086-b3df-8808269e905b.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we will cover how to provision a highly available Multi-AZ
    Kubernetes cluster without needing to provision or manage master and etcd instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the operations mentioned here require an Alibaba Cloud account (also known
    as Aliyun) with an AccessKey. If you don't have one already, go to [https://account.alibabacloud.com](https://account.alibabacloud.com) and
    create an account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will take you through how to configure a Kubernetes cluster on
    Alibaba Cloud. This section is further divided into the following subsections
    to make this process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure Alibaba Cloud services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a highly available Kubernetes cluster on Alibaba Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Alibaba Container Service clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the command-line tools to configure Alibaba Cloud services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this recipe, we will use the Alibaba Cloud console and generate the API
    request parameters from the dashboard that will be used with the CLI. You will
    also need the Alibaba Cloud CLI, `aliyun`, and `kubectl` installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to download the `aliyun` tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: You can find the link to the latest version here: [https://github.com/aliyun/aliyun-cli](https://github.com/aliyun/aliyun-cli).
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the files and install them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the `aliyun` CLI version you''re using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: If you haven't created an AccessKey, go to Security Management in your account
    and create one ([https://usercenter.console.aliyun.com/#/manage/ak](https://account.alibabacloud.com/login/login.htm?spm=a2c44.11131515.0.0.4e57525cYlZEdf)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the CLI configuration by entering your AccessKey ID, AccessKey Secret,
    and region ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable `bash/zsh` autocompletion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Go to the Container Service console ([https://cs.console.aliyun.com](https://cs.console.aliyun.com))
    to give permissions to the container service to access cloud resources. Here,
    select `AliyunCSDefaultRole`, `AliyunCSServerlessKuberentesRole`, `AliyunCSClusterRole`,
    and `AliyunCSManagedKubernetesRole` and click on Confirm Authorization Policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you have the **Resource Orchestration Service** (**ROS**) and Autoscaling
    services enabled since they are required to get Kubernetes clusters deployed.
    ROS is used to automatically provision and configure resources for auto-deployment,
    operation, and maintenance based on your template, while Autoscaling is used to
    adjust compute resources based on demand.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning a highly available Kubernetes cluster on Alibaba Cloud
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a browser window and go to the Alibaba Cloud Virtual Private Cloud console
    at [https://vpc.console.aliyun.com](https://vpc.console.aliyun.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you select a region with at least three zones (most of the regions
    in mainland China have more than three zones) and click on Create VPC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a unique name to your VPC and select an IPv4 CIDR block. In our example, this
    is `10.0.0.0/8`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for your first VSwitch ( `k8s-1`), and select a zone (`Beijing
    Zone A`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set an IPv4 CIDR block. In our example, we used `10.10.0.0./16`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add button and repeat *steps 4* and *5* to get different zones.
    Use the following CIDR block information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|  | **VSwitch 2** | **VSwitch 3** |'
  prefs: []
  type: TYPE_TB
- en: '| **Name:** | k8s-2 | k8s-3 |'
  prefs: []
  type: TYPE_TB
- en: '| **Zone:** | Beijing Zone B | Beijing Zone E |'
  prefs: []
  type: TYPE_TB
- en: '| **IPv4 CIDR Block:** | 10.20.0.0/16 | 10.30.0.0/16 |'
  prefs: []
  type: TYPE_TB
- en: Click OK to create your VPC and VSwitches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Aliyun Web console on your web browser ([https://cs.console.aliyun.com](https://cs.console.aliyun.com).).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create Kubernetes Cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Standard Managed Cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Multi-AZ Kubernetes tab, give your cluster a name, and select the
    same region that you used to create your VPCs and VSwitches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have selected the same region, the VPC dropdown will be populated with `k8s-devops-cookbook-vpc`.
    Now, select all three VSwitches that we''ve created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/63922633-60f0-438c-9ec7-268c8e4a5d7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Set the instance types for the Master node configuration in each zone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the instance type for the Worker node configuration in each zone and the
    number of nodes in every zone to `3`. Otherwise, use the defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Kubernetes version (`1.12.6-aliyun.1`, at the time of writing).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Key Pair Name from the drop-down menu, or create one by clicking Create
    a new key pair:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c4c99701-34e6-4578-ba6e-6cc294d78b35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alibaba offers two CNI options: Flannel and Terway. The difference is explained
    in the *There''s more…* section of this recipe. Leave the default network options
    using `Flannel`. The default parameters support up to 512 servers in the cluster.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitoring and logging will be explained in [Chapter 8](4d910303-e648-4ec0-9a2d-99d553e1a641.xhtml), *Observability
    and Monitoring on Kubernetes*, and [Chapter 10](d76d00a0-541f-4395-92dc-1d6970e31ef2.xhtml),
    *Logging on Kubernetes*. Therefore, this step is optional. Check the `Install
    cloud monitoring plug-in on your ECS` and `Using Log Service` options to enable
    monitoring and logging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on Create to provision your Multi-AZ Kubernetes cluster. This step
    may take 15-20 minutes to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to Alibaba Container Service clusters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get access to your cluster on Alibaba Cloud, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the cluster''s credentials, go to the Clusters menu and click on the cluster
    name you want to access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dd1791c1-c581-4109-8292-a3f4541dd025.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy the content displayed in the KubeConfig tab to your local machine''s `$HOME/.kube/config` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d48997ed-5c67-4ccb-b8ac-b01612fe45af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify your Kubernetes cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: As an alternative, see the *Viewing the Kubernetes Dashboard* instructions under
    the *There's more...* section to manage your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to provision a managed Kubernetes cluster on Alibaba
    Cloud using a cluster template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the Container Service menu, Alibaba Cloud provides a few Kubernetes cluster,
    where you are offered seven cluster templates. We used the Standard Managed Cluster
    here. This option lets you manage the worker nodes only and saves you the cost
    of resources and management for the master nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4509b205-b24a-41dc-9263-877047ddcc67.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, accounts support up to 20 clusters and 40 nodes in each cluster.
    You can request a quota increase by submitting a support ticket.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an alternative way of using the Alibaba Cloud console, you can use REST
    API calls through `aliyuncli` to create the ECS instances and your cluster. Follow
    these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: After you've configured your cluster options on your Alibaba Cloud console,
    click on Generate API request Parameters right under the Create button to generate
    POST request body content to be used with the `aliyun` CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the content in a file. In our case, this file is called `cscreate.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For an explanation of the additional parameters listed in this section, please
    refer to the *Create a Kubernetes* section at [https://www.alibabacloud.com/help/doc-detail/87525.htm](https://www.alibabacloud.com/help/doc-detail/87525.htm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following command to create your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The Alibaba Cloud Container Service provides two network plugin options for
    their Kubernetes clusters: Terway and Flannel.'
  prefs: []
  type: TYPE_NORMAL
- en: Flannel is based on the community Flannel CNI plugin. Flannel is a very common
    and stable networking plugin that provides basic networking functionality. It
    is the recommended option for most use cases, except it does not support the Kubernetes
    NetworkPolicy. Terway is a network plugin developed by Alibaba Cloud CS. It is
    fully compatible with Flannel. Terway can define access policies between containers
    based on the Kubernetes NetworkPolicy. Terway also supports bandwidth limiting
    for containers.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and managing Kubernetes clusters with Rancher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rancher is a container management platform with the flexibility to create Kubernetes
    clusters with **Rancher Kubernetes Engine** (**RKE**) or cloud-based Kubernetes
    services, such as GKE, AKS, and EKS, which we discussed in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover recipes for configuring Rancher so that we can
    deploy and manage Kubernetes services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rancher can be installed on Ubuntu, RHEL/CentOS, RancherOS, or even on Windows
    Server. You can bring up Rancher Server in a high availability configuration or
    a single node. Refer to the *See also...* section for links to the alternative
    installation instructions. In this recipe, we will run Rancher on a single node.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will take you through how to configure and manage Kubernetes clusters
    with Rancher. To that end, this section is further divided into the following
    subsections to make this process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Rancher Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Kubernetes cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an existing cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling cluster and node providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Rancher Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to install Rancher Server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install a supported version of Docker. You can skip this step if you have Docker
    installed already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a user to a Docker group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Rancher Server, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Open a browser window and go to `https://localhost`. Replace `localhost` with
    your host's IP if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a new password and click on Continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the public IP address of Rancher server and click on Save URL. This IP needs
    to be externally accessible from your clusters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying a Kubernetes cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To deploy a new cluster, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Add Cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose a provider. In our example, we will use GKE. Some settings for other
    providers might be slightly different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fd8b3f2f-0c40-49ed-8c94-88b35db3b5cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a cluster name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have your GCP service account JSON file that we saved previously, skip
    to *step 10*.
  prefs: []
  type: TYPE_NORMAL
- en: From the GCP navigation menu, go to IAM and click on the Service accounts link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create Service Account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a service account name and click Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the required minimum permissions; that is, Compute Viewer, Viewer, Kubernetes
    Engine Admin, and Service Account User, and click Continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create Key. Use JSON as the key type in order to save your service
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Rancher UI, click on Read from a file and load the service account JSON
    file you saved previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Customize the Cluster Options as needed; otherwise, use the default settings
    and click on Create to deploy your Kubernetes cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/636bbafa-332b-4915-b95b-29b298f6cd68.png)'
  prefs: []
  type: TYPE_IMG
- en: Your cluster will be listed and ready to be managed immediately on your Rancher
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an existing cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To import an existing cluster, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Add Cluster
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/23165978-0c4b-4a3a-9902-7dcee75cb117.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a cluster name and click on Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow the instructions shown and copy and run the `kubectl` command displayed
    on the screen to an existing Kubernetes cluster. This command will look similar
    to the following if you are running with an untrusted/self-signed SSL certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e0f4937e-352f-4b2f-8113-6765b3960efe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on Done, your cluster will be listed and ready to manage immediately
    on your Rancher dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b72b4d19-a180-4661-85f2-66626655ab8f.png)'
  prefs: []
  type: TYPE_IMG
- en: The last step may take a minute to complete. Eventually, the state of your cluster
    will turn from Pending to Active when it is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling cluster and node providers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be able to support multiple providers, Rancher uses cluster and node drivers.
    If you don't see your provider on the list, then it is most likely not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable additional providers, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From Tools, click on Drivers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find your provider on the list and click Activate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/756d1cff-2dc4-43ad-b047-d6a75df90f51.png)'
  prefs: []
  type: TYPE_IMG
- en: From the same page, you can also deactivate the providers you don't intend to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly run Rancher Server to manage your Kubernetes
    clusters.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we used a single node installation using a default self-signed
    certificate method. For security purposes, SSL is required to interact with the
    clusters. Therefore, a certificate is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to use your own certificate signed by a recognized CA instead,
    you can use the following command and provide the path to your certificates to
    mount them in your container by replacing the `FULLCHAIN.pem` and `PRIVATEKEY.pem` files
    with your signed certificates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Using a recognized certificate will eliminate the security warning on the login
    page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is also useful to have knowledge of the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Bind mounting a host volume to keep data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping user volumes persistent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping data persistent on a host volume
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Rancher on the same Kubernetes nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bind mounting a host volume to keep data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the single node installation?, the persistent data is kept on the `/var/lib/rancher` path
    in the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep data on the host, you can bind mount a host volume to a location using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Bind mounts have limited functionality compared to volumes. When Rancher is
    started using the bind mount, a directory on the host machine will be mounted
    to the specified directory in the container.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping user volumes persistent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using RancherOS, only specific directories keep the data defined by the `user-volumes` parameter
    persistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add additional persistent `user-volumes`, for example, add the `/var/openebs` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: After rebooting, data in the specified directories will be persistent.
  prefs: []
  type: TYPE_NORMAL
- en: Running Rancher on the same Kubernetes nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add the node where you run Rancher Server on a cluster, replace the default
    ports `-p 80:80 -p 443:443` as follows and use the following command to start
    Rancher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: In this case, Rancher Server will be accessible through `https://localhost:8443`
    instead of the standard `443` port.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Rancher 2.x Documentation: [https://rancher.com/docs/rancher/v2.x/en/](https://rancher.com/docs/rancher/v2.x/en/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: K3s, a lightweight Kubernetes from Rancher Labs: [https://k3s.io/](https://k3s.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rio, an application deployment engine for Kubernetes from Rancher Labs: [https://rio.io/](https://rio.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Red Hat OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to deploy Red Hat OpenShift on AWS, bare-metal,
    or VMware vSphere VMs.
  prefs: []
  type: TYPE_NORMAL
- en: The steps in the *Provisioning an OpenShift cluster recipe *can be applied to
    deploy OpenShift on either VMs running on a virtualized environment or bare-metal
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the operations mentioned here require a Red Hat account with active Red
    Hat Enterprise Linux and OpenShift Container Platform subscriptions. If you don't
    have one already, go to [https://access.redhat.com](https://access.redhat.com) and
    create an account.
  prefs: []
  type: TYPE_NORMAL
- en: When you deploy on VMs, make sure to plan that the zones you create on Kubernetes
    nodes are actually physically located on separate hypervisor nodes.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we need to have a minimum of six nodes with Red Hat Enterprise
    CoreOS installed on them. These nodes can be either bare-metal, VMs, or a mix
    of bare-metal and VMs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will take you through how to configure Red Hat OpenShift. To that
    end, this section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading OpenShift binaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning an OpenShift cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to OpenShift clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading OpenShift binaries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Make sure you are on the Terminal of your first master and that you have an
    account with root access, or you are running as a superuser. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://cloud.redhat.com/openshift/install](https://cloud.redhat.com/openshift/install) and
    download the latest `OpenShift Installer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ca4493dd-b52c-4cb7-8575-107a4395153c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extract the installer files on your workstation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will create a file called `openshift-install` in the same
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning an OpenShift cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we will use the AWS platform to deploy OpenShift:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get your OpenShift cluster up, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Choose `aws` as your platform and enter your `AWS Access Key ID` and `Secret
    Access Key`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose your region. In our example, this is `us-east-1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a base domain. In our example, this is `k8s.containerized.me`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a cluster name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy Pull Secret from the Red Hat site and paste it onto the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/54710f98-e2fe-4123-8fe1-cd372651908f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation is complete, you will see the console URL and credentials
    for accessing your new cluster, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Switch to the Red Hat site and click on the `Download Command-Line Tools` link
    to download `openshift-client`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the `openshift-client` files in your workstation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will create the `kubectl` and `oc` files on the same folder
    and move the `oc` binary to PATH.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to OpenShift clusters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To connect to OpenShift clusters, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get access to your OpenShift cluster, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in to your OpenShift cluster after replacing `password` and `cluster address`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: If you prefer to use the web console instead, open the web console URL address
    from the *Provisioning an OpenShift cluster* recipe, in *step 7*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly deploy an OpenShift cluster on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we created a cluster using the default configuration of the installer-provisioned
    infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: The installer asked a series of questions regarding user information and used
    mostly default values for other configuration options. These defaults can be edited
    and customized if needed using the `install-config.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the defaults that were used for the deployment, let''s create an `install-config.yaml` file
    and view it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, the file''s default configuration
    creates a cluster consisting of three master and three worker nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Edit `install-config.yaml` as needed. Next time you create the cluster, new
    parameters will be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is also useful to have knowledge of the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To delete your cluster, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: This process will take a few minutes and, when finished, you will get a confirmation
    message.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenShift Container Platform 4.3 Documentation: [https://docs.openshift.com/container-platform/4.3/welcome/index.html](https://docs.openshift.com/container-platform/4.3/welcome/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Kubernetes cluster using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Powerful IT automation engines such as Ansible can be used to automate pretty
    much any day-to-day IT task, including the deployment of Kubernetes clusters on
    bare-metal clusters. In this section, we will learn how to deploy a simple Kubernetes
    cluster using Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use an Ansible playbook. The examples that will be used
    in these recipes are accessible through the `k8sdevopscookbook` GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you start executing the commands in this section''s recipes, clone the
    Ansible playbook examples using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: You will find the examples stored under the `k8sdevopscookbook/src` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will take you through how to configure a Kubernetes cluster using
    Ansible. To that end, this section is further divided into the following subsections
    to make this process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a Kubernetes cluster using an Ansible playbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the Kubernetes cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Ansible
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to provision a Kubernetes cluster using an Ansible playbook, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Ansible on your Linux workstation, first, we need to add the necessary
    repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Ansible using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify its version and make sure Ansible is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: At the time this recipe was written, the latest Ansible version was `2.9.4`.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning a Kubernetes cluster using an Ansible playbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to provision a Kubernetes cluster using an Ansible playbook, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `hosts.ini` file and replace the master and node IP addresses with
    your node IPs where you want Kubernetes to be configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'The `hosts.ini` file should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `groups_vars/all.yml` file to customize your configuration. The following
    is an example of how to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `site.yaml` playbook to create your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Your cluster will be deployed based on your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the Kubernetes cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get access to your Kubernetes cluster, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the configuration file from the `master1` node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Now, use `kubectl` to manage your cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ansible module for working with Kubernetes: [https://docs.ansible.com/ansible/latest/modules/k8s_module.html](https://docs.ansible.com/ansible/latest/modules/k8s_module.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes Operators examples using Ansible and the Operator SDK: [https://github.com/operator-framework/operator-sdk/blob/master/doc/ansible/user-guide.md](https://github.com/operator-framework/operator-sdk/blob/master/doc/ansible/user-guide.md)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting installation issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes consists of many loosely coupled components and APIs. Based on environmental
    differences, you may run into problems where a little bit more attention is required
    to get everything up and running. Fortunately, Kubernetes provides many ways to
    point out problems.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to get cluster information in order to troubleshoot
    potential issues.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to gather cluster information in order to troubleshoot potential
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file dump of the cluster state called `cluster-state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the master and service addresses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the resource usage of the `us-west-2.compute.internal` node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Mark the `us-west-2.compute.internal` node as unschedulable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Safely evict all the pods from the `us-west-2.compute.internal` node for maintenance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Mark the `us-west-2.compute.internal` node as schedulable after maintenance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to quickly troubleshoot common Kubernetes cluster
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 1, when the `kubectl cluster-info` command was executed with the `--output-directory`
    parameter, Kubernetes dumped the content of the cluster state under a specified
    folder. You can see the full list using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: In step 4, we marked the node as unavailable using the `kubectl cordon` command.
    Kubernetes has a concept of scheduling applications, meaning that it assigns pods
    to nodes that are available. If you know in advance that an instance on your cluster
    will be terminated or updated, you don't want new pods to be scheduled on that
    specific node. Cordoning means patching the node with `node.Spec.Unschedulable=true`.
    When a node is set as unavailable, no new pods will be scheduled on that node.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, we use, the `kubectl drain` command to evict the existing pods, because
    cordoning alone will not have an impact on the currently scheduled pods. Evict
    APIs take disruption budgets into account. If set by the owner, disruption budgets
    limit the number of pods of a replicated application that are down simultaneously
    from voluntary disruptions. If this isn't supported or set, Evict APIs will simply
    delete the pods on the node after the grace period.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is also useful to have knowledge of the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting log levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting log levels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the `kubectl` command, you can set the output verbosity with the
    `--v` flag, followed by an integer for the log level, which is a number between
    0 and 9\. The general Kubernetes logging conventions and the associated log levels
    are described in the Kubernetes documentation at [https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-output-verbosity-and-debugging](https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-output-verbosity-and-debugging).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is useful to get the output details in a specific format by adding one of
    the following parameters to your command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-o=wide` is used to get additional information on a resource. An example is
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '`-o=yaml` is used to return the output in YAML format. An example is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the output of the `-o=yaml` parameter can be used to create
    a manifest file out of an existing resource as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An overview and detailed uses of the kubectl command: [https://kubernetes.io/docs/reference/kubectl/overview/](https://kubernetes.io/docs/reference/kubectl/overview/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kubectl cheat sheet: [https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A visual guide on troubleshooting Kubernetes deployments: [https://learnk8s.io/a/troubleshooting-kubernetes.pdf](https://learnk8s.io/a/troubleshooting-kubernetes.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: K9s – the Kubernetes CLI to manage your clusters in style: [https://github.com/derailed/k9s](https://github.com/derailed/k9s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
