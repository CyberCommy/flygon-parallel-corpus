- en: Why Python in Penetration Testing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Why Python is a great option for security scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3 language basics and differences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going deep into the uses of Python and its modules in security scripting,
    we need to have an idea about the language basics and different versions. Also,
    it would be great if we could have an idea of why Python is an awesome option
    for security scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Why Python is a great option for security scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the wake of big security attacks and breaches, security/penetration testing
    is gaining momentum in the quality field. As a popular language in the programming
    area, it is evident from the tools, books, and scripts published in the last couple
    of years that Python has become the favorite scripting language for security researchers
    and hackers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though network and application security is inundated with many tools for
    automated and semi-automated tests, it may not always guarantee success. Improvisation
    of tools and scripts is the key to pen-testing, and there will always be some
    tasks that demand to be automated or to be fulfilled in another way. Becoming
    a successful real-world penetration tester involves a lot of custom scripting
    and programming tasks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are the main reasons for Python's popularity in security scripting and
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: Python can be used in both  and interpreted and compiled forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python programs can be compiled in any situation where they can be used as compiled
    and not required frequent changes. This will make Python programs run much faster
    and provide a better opportunity to remove vulnerabilities and bugs. Also, interpreted
    programs run much slower than compiled programs, and are more prone to vulnerabilities
    and attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Python code uses no compiler and can run on just about any device that runs
    the Python shell. Also, it shares a couple of other resemblances to scripting
    languages over programming languages. So, Python can be used to perform the functions
    of a scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax and indented layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The syntax and indented layout of Python makes it easy to figure out what is
    happening in a program during the review. The indentation also makes the program
    more readable and helps make the collaborative programming easier.
  prefs: []
  type: TYPE_NORMAL
- en: Simple learning curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning a new programming language is always a rigorous task. But Python was
    designed in such a way that it should be easily learned by even a novice programmer.
    Python's growing acceptance with the programmers is mainly due to its easiness
    to learn and its design philosophy highlights code readability that will help
    the beginner developers to learn many things by reading the code itself. Also,
    Python's **read evaluate print loop** (**REPL**) provides the developer a chance
    to play around with code and experiment with it. The standard Python library maintains
    a lot of functionalities with which we can execute complex functionalities with
    ease.
  prefs: []
  type: TYPE_NORMAL
- en: Powerful third-party libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have learned Python, you can leverage the platform backed with a large
    number of libraries. The **Python Package Index** (**PyPI**), is a repository
    of more than 85,000 reusable Python modules and scripts that you can use in your
    scripts. Python is the best language to learn as a security researcher, because
    of the availability of its large number of reverse engineering and exploitation
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform (code anywhere)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python works on Linux, Microsoft Windows, macOS X, and many other operating
    systems and devices. A Python program written on a macOS X computer will run on
    a Linux system and vice versa. Also, Python programs can run on Microsoft Windows
    computers, as long as the machine has Python interpreter installed.
  prefs: []
  type: TYPE_NORMAL
- en: Python 3 language basics and differences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 3.0 was first released in 2008\. Even though Python 3 supposed to be
    backward incompatible with other old version, many of its features are backported
    to support older versions. It is better to have an idea of Python versions and
    its differences for better understanding of our recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are new to Python, you might be confused about the different versions
    that are available. Before looking into the further details, let's have a look
    at the most recent major releases of Python and the key differences between Python
    2 and Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are the major Python versions available.
  prefs: []
  type: TYPE_NORMAL
- en: Python 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Published in late 2000, it has many more programmatic features including a cycle-detecting
    garbage collector that helps to automate memory management. The increased unicode
    support that helps to standardize characters, and list comprehensions that help
    to create a list based on existing lists are other features. In Python version
    2.2, the types and classes are consolidated into one hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 3 was released in late 2008, to update and fix the built-in design flaws
    of the prior versions of Python. The main focus of Python 3 development was to
    clean up the code base and reduce redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: In the beginning, the adoption of Python 3 was a very slow process due to its
    backward incompatibility with Python 2\. Moreover, many package libraries were
    only available for Python 2\. Later, there was an increased adoption for Python
    3 as the development team announced that there will be an end of life for Python
    2 support and more libraries have been ported or migrated to Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Python 2.7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python 2.7 was published in 2010 and was planned as the last release for 2.x
    versions. Its intention was to make it easier for Python 2.x users to port their
    features and libraries over to Python 3 by providing compatibility between the
    two, which included a unit test to support test automation, argparse for parsing
    command-line options, and more convenient classes in collections.
  prefs: []
  type: TYPE_NORMAL
- en: Key differences between Python 2.7 and Python 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some main differences between Python 2.x and Python 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Print**: In Python 2, `print` is a statement. So, there is no need to wrap
    the text in parentheses for printing. But in Python 3 `print` is a function. So,
    you have to pass the string you need to print to the function in parentheses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integer division**: Python 2 considers numbers without any digits after the
    decimal point as integers, which may lead to some unexpected results during division.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List comprehension loop variables leak**: In Python 2, giving the variable
    that is iterated over in a list comprehension *leaks* the variable into surrounding
    scope, this list comprehension loop variable *leak* bug has been fixed in Python
    3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unicode strings**: Python 2 requires you to mark the unicode string explicitly
    with the **u** prefix. But, Python 3 stores strings as unicode by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raising exceptions**: Python 3 requires different syntax for raising exceptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The progression from Python 2.x to Python 3.x is happening slowly, but it is
    underway. It is good to be mindful that there are material differences between
    Python 2.x and Python 3 as you may need to deal with code that is written in the
    version with which you are less familiar.
  prefs: []
  type: TYPE_NORMAL
