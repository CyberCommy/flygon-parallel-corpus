- en: Creating a Movie List Application in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you bought this book, you'd probably heard of React before and probably
    even tried out some of the code examples that can be found online. This book is
    constructed in such a way that the code examples in each chapter gradually increase
    in complexity, so even if you feel your experience with React is limited, each
    chapter should be understandable if you've read the previous one. When you reach
    the end of this book, you will know how to work with React and its stable features,
    up until version 16.11, and you will also have experience with **React Native**
    and **React 360**.
  prefs: []
  type: TYPE_NORMAL
- en: This first chapter kicks off with us learning how to build a simple movie list
    application and provides you with an overview of popular movies that we'll fetch
    from an external source. The core concepts for getting started with React will
    be applied to this project, which should be understandable if you've got some
    prior experience in building applications with React. If you haven't worked with
    React before, that's no problem either; this book describes the React features
    that are used in the code examples along the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new project with webpack and React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring a React project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a movie list application in React that retrieves
    data from a local JSON file and runs in the browser with webpack and Babel. Styling
    will be done using Bootstrap. The application that you'll build will return a
    list of the highest-grossing movies as of 2019, along with some more details and
    a poster for every movie.
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 1 hour.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application for this chapter will be built from scratch and uses assets
    that can be found on GitHub at [https://github.com/PacktPublishing/React-Projects/tree/ch1-assets](https://github.com/PacktPublishing/React-Projects/tree/ch1-assets)[.](https://github.com/PacktPublishing/React-Projects/tree/ch1-assets)
    These assets should be downloaded to your computer so that you can use them later
    on in this chapter. The complete code for this chapter can be found on GitHub
    as well: [https://github.com/PacktPublishing/React-Projects/tree/ch1](https://github.com/PacktPublishing/React-Projects/tree/ch1).
  prefs: []
  type: TYPE_NORMAL
- en: For applications that are created in this book, you'll need to have at least
    Node.js v10.16.3 installed on your machine so that you can run `npm` commands.
    If you haven't installed Node.js on your machine, please go to [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    where you can find the download instructions for macOS, Windows, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing Node.js, run the following commands in your command line to
    check the installed versions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Node.js (should be v10.16.3 or higher):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For `npm` (should be v6.9.0 or higher):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Also, you should have installed the **React Developer Tools** plugin (for Chrome
    and Firefox) and added it to your browser. This plugin can be installed from the
    **Chrome Web Store** ([https://chrome.google.com/webstore](https://chrome.google.com/webstore))
    or Firefox Addons ([https://addons.mozilla.org](https://addons.mozilla.org)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a movie list application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a new React application from scratch, starting
    with setting up a new project with webpack and Babel. Setting up a React project
    from scratch will help you understand the basic needs of a project, which is crucial
    for any project you create.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time you create a new React project, the first step is to create a new
    directory on your local machine. Since you're going to build a movie list application
    in this chapter, name this directory `movieList`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside this new directory, execute the following from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command will create a `package.json` file with the bare minimum
    of information that `npm` needs about this project. By adding the `-y` flag to
    the command, we can automatically skip the steps where we set information such
    as the `name`, `version`, and `description`. After running this command, the following
    `package.json` file will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are no dependencies for `npm` packages since we haven't
    installed any yet. The first package we'll be installing and configuring is webpack,
    which we'll do in the next part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the React application, we need to install webpack 4 (while writing this
    book, the current stable version of webpack is version 4) and webpack CLI as **devDependencies**.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install these packages from `npm` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to include these packages inside the `package.json` file and
    have them run in our start and build scripts. To do this, add the `start` and
    `build` scripts to our `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"+" symbol is used for the line which is added and "-" symbol is used for the
    line which is removed in the code.'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding configuration will add `start` and `build` scripts to our application
    using webpack. As you can see, `npm start` will run webpack in development mode
    and `npm build` will run webpack in production mode. The biggest difference is
    that running webpack in production mode will minimize our code to decrease the
    size of the project bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new directory inside our project called `src` and create a new file
    inside this directory called `index.js`. Later on, we''ll configure webpack so
    that this file is the starting point for our application. Place the following
    line of code inside this newly created file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now run the `npm start` or `npm build` command at our command line, webpack
    will start up and create a new directory called `dist`. Inside this directory,
    there will be a file called `main.js` that includes our project code. Depending
    on whether we''ve run webpack in development or production mode, the code will
    be minimized in this file. You can check whether your code is working by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command runs the bundled version of our application and should return the
    `movieList` string as output in the command line. Now, we're able to run JavaScript
    code from the command line. In the next part of this section, we will learn how
    to configure webpack so that it works with React.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring webpack to work with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve set up a basic development environment with webpack for a JavaScript
    application, we can start installing the packages we need in order to run any
    React application. These are `react` and `react-dom`, where the former is the
    generic core package for React and the latter provides an entry point to the browser''s
    DOM and renders React. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install these packages by executing the following command in the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Merely installing the dependencies for React is not sufficient to run it since,
    by default, not every browser can read the format (such as ES2015+ or React) that
    your JavaScript code is written in. Therefore, we need to compile the JavaScript
    code into a readable format for every browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we''ll use Babel and its related packages, which can be installed
    as `devDependencies` by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Next to the Babel core, we'll also install `babel-loader`, which is a helper
    so that Babel can run with webpack and two preset packages. These preset packages
    help determine which plugins will be used to compile our JavaScript code into
    a readable format for the browser (`@babel/preset-env`) and to compile React-specific
    code (`@babel/preset-react`).
  prefs: []
  type: TYPE_NORMAL
- en: With the packages for React and the correct compilers installed, the next step
    is to make them work with webpack so that they are used when we run our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, create a file called `webpack.config.js` in the root directory
    of the project. Inside this file, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The configuration in this file tells webpack to use `babel-loader` for every
    file that has the `.js` extension and excludes `.js` files in the `node_modules`
    directory for the Babel compiler. The actual settings for `babel-loader` are placed
    in a separate file, called `.babelrc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create the `.babelrc` file in the project''s root directory and
    place the following code inside it, which configures `babel-loader` to use the
    `@babel/preset-env` and `@babel/preset-react` presets when it''s compiling our
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can also declare the configuration for `babel-loader` directly inside the
    `webpack.config.js` file, but for better readability, we should place it in a
    separate `.babelrc` file. Also, the configuration for Babel can now be used by
    other tools that are unrelated to webpack.
  prefs: []
  type: TYPE_NORMAL
- en: The `@babel/preset-env` preset has options defined in it that make sure that
    the compiler uses the latest version of Node.js, so polyfills for features such
    as `async/await` will still be available. Now that we've set up webpack and Babel,
    we can run JavaScript and React from the command line. In the next part of this
    section, we'll create our first React code and make it run in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a React project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve set up React so that it works with Babel and webpack, we need
    to create an actual React component that can be compiled and run. Creating a new
    React project involves adding some new files to the project and making changes
    to the setup for webpack. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s edit the `index.js` file that already exists in our `src` directory
    so that we can use `react` and `react-dom`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this file imports the `react` and `react-dom` packages, defines
    a simple component that returns an `h1` element containing the name of your application,
    and has this component rendered with `react-dom`. The last line of code mounts
    the `App` component to an element with the `root` ID in your document, which is
    the entry point of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create this file by adding a new file called `index.html` to the `src`
    directory with the following code inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This adds an HTML heading and body. Within the `head` tag is the title of our
    application and inside the `body` tag is a section with the `id` property `root`.
    This matches with the element we've mounted the `App` component to in the `src/index.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step of rendering our React component is extending webpack so that
    it adds the minified bundle code to the `body` tags as `scripts` when running.
    Therefore, we should install the `html-webpack-plugin` package as a devDependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this new package to the webpack configuration in the `webpack.config.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the configuration for `html-webpack-plugin`, we've set the entry point of
    the application as the `index.html`. file. That way, webpack knows where to add
    the bundle to the `body` tag.
  prefs: []
  type: TYPE_NORMAL
- en: We can also add the configuration of the plugin directly inside the exported
    configuration for webpack by replacing the `htmlPlugin` constant in the exported
    configuration. As our application grows in size, this may make the webpack configuration
    less readable, depending on our preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we run `npm start` again, webpack will start in development mode and
    add the `index.html` file to the `dist` directory. Inside this file, we'll see
    that, inside your `body` tag, a new `scripts` tag has been inserted that directs
    us to our application bundle, that is, the `dist/main.js` file. If we open this
    file in the browser or run `open dist/index.html` from the command line, it will
    return the `movieList` result directly inside the browser. We can do the same
    when running the `npm build` command to start Webpack in production mode; the
    only difference is that our code will be minified.
  prefs: []
  type: TYPE_NORMAL
- en: This process can be speeded up by setting up a development server with webpack.
    We'll do this in the final part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a development server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While working in development mode, every time we make changes to the files
    in our application, we need to rerun the `npm start` command. Since this is a
    bit tedious, we will install another package called `webpack-dev-server`. This
    package adds the option to force webpack to restart every time we make changes
    to our project files and manages our application files in memory instead of by
    building the `dist` directory. The `webpack-dev-server` package can also be installed
    with `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we need to edit the `start` script in the `package.json` file so that
    it uses `webpack-dev-server` instead of webpack directly when running the `start`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration replaces webpack in the start scripts with `webpack-dev-server`,
    which runs webpack in development mode. This will create a local server that runs
    the application with the `--open` flag, which makes sure webpack is restarted
    every time an update is made to any of your project files.
  prefs: []
  type: TYPE_NORMAL
- en: To enable hot reloading, replace the `--open` flag with the `--hot` flag. This
    will only reload files that have been changed instead of the entire project.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we've created the basic development environment for our React application,
    which you'll develop and structure further in the next section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the development environment set up, it''s time to start creating the movie
    list application. First let''s have a look at the current structure of the project,
    where two of the directories within our project''s root directory are important:'
  prefs: []
  type: TYPE_NORMAL
- en: The first directory is called `dist` and is where the output from webpack's
    bundled version of your application can be found
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second one is called `src` and includes the source code of our application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Another directory that can be found in the root directory of our project is
    called `node_modules`. This is where the source files for every package that we
    install using `npm` are placed. It is recommended you don't make any manual changes
    to files inside this directory.
  prefs: []
  type: TYPE_NORMAL
- en: In the following subsections, we will learn how to structure our React projects.
    This structure will be used in the rest of the chapters in this book as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The official documentation for React doesn''t state any preferred approach
    regarding how to structure our React project. Although two common approaches are
    popular within the community: either structuring your files by feature or route
    or structuring them by file type.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The movie list application will use a hybrid approach, where files are structured
    by file type first and by feature second. In practice, this means that there will
    be two types of components: top-level components, which are called containers,
    and low-level components, which relate to these top-level components. Creating
    these components requires that we add the following files and code changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to achieve this structure is creating a new subdirectory of
    `src` called `containers`. Inside this directory, create a file called `List.js`.
    This will be the container for the list containing the movies and contains the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This container should be included in the entry point of our application so
    that it''s visible. Therefore, we need to include it in the `index.js` file, inside
    the `src` directory, and refer to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If we still have the development server running (if not, execute the `npm start` command
    again), we''ll see that our application still returns the same result. Our application
    should have the following file structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to add a component to the `List` container, which we''ll use
    later to display information about a movie. This component will be called `Card`
    and should be located in a new `src` subdirectory called `components`, which will
    be placed inside a directory with the same name as the component. We need to create
    a new directory called `components` inside the `src` directory, which is where
    we''ll create another new directory called `Card`. Inside this directory, create
    a file called `Card.js` and add the following code block to the empty `Card` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, import this `Card` component into the container for `List` and return
    this component instead of the `h1` element by replacing the `return` function
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve added these directories and the `Card.js` file, our application
    file''s structure will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If we visit our application in the browser again, there will be no visible
    changes as our application still returns the same result. But if we open the React
    Developer Tools plugin in our browser, we''ll notice that the application currently
    consists of multiple stacked components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the next part of this section, you will use your knowledge of structuring
    a React project and create new components to fetch data about the movies that
    we want to display in this application.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With both the development server and the structure for our project set up, it's
    time to finally add some data to it. If you haven't already downloaded the assets
    in the GitHub repository from the *Getting started* section, you should do so
    now. These assets are needed for this application and contain a JSON file with
    data about the five highest-grossing movies and their related image files.
  prefs: []
  type: TYPE_NORMAL
- en: The `data.json` file consists of an array with objects containing information
    about movies. This object has the `title`, `distributor`, `year`, `amount`, `img`,
    and `ranking` fields, where the `img` field is an object that has `src` and `alt` fields.
    The `src` field refers to the image files that are also included.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add the downloaded files to this project''s root directory inside
    a different subdirectory, where the `data.json` file should be placed in a subdirectory
    called `assets` and the image files should be placed in a subdirectory called
    `media`. After adding these new directories and files, our application''s structure
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This data will be retrieved in the top-level components only, meaning that
    we should add a `fetch` function in the `List` container that updates the state
    for this container and passes it down as props to the low-level components. The
    `state` object can store variables; every time these variables change, our component
    will rerender. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before retrieving the data for the movies, the `Card` component needs to be
    prepared to receive this information. To display information about the movies,
    we need to replace the content of the `Card` component with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the logic to retrieve the data can be implemented by adding a `constructor` function
    to the `List` component, which will contain an empty array as a placeholder for
    the movies and a variable that indicates whether the data is still being loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Immediately after setting up the `constructor` function, we should set up a
    `componentDidMount` function, where we''ll fetch the data after the `List` component
    is mounted. Here, we should use an `async/await` function since the `fetch` API
    returns a promise. After fetching the data, `state` should be updated by replacing
    the empty array for data with the movie information and the `loading` variable
    should be set to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The previous method that we use to retrieve information from JSON files using
    `fetch` doesn't take into account that the request to this file may fail. If the
    request fails, the `loading` state will remain `true`, meaning that the user will
    keep seeing the loading indicator. If you want to display an error message when
    the request doesn't succeed, you'll need to wrap the `fetch` method inside a `try...catch`
    block, which will be shown later on in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass this state to the `Card` component, where it can ultimately be shown in
    the `Card` component that we changed in the first step. This component will also
    get a `key` prop, which is required for every component that is rendered within
    an iteration. Since this value needs to be unique, the `id` of the movie is used,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If we visit our application in the browser again, we''ll see that it now shows
    a list of movies, including some basic information and an image. At this point,
    our application will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4b123e00-9d07-40fe-ad51-012675df5fed.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, limited styling has been applied to the application and it's
    only rendering the information that's been fetched from the JSON file. Styling
    will be added in the next part of this section using a package called **Bootstrap**.
  prefs: []
  type: TYPE_NORMAL
- en: Adding styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Showing just the movie information isn''t enough. We also need to apply some
    basic styling to the project. Adding styling to the project is done with the Bootstrap
    package, which adds styling to our components based on class names. Bootstrap
    can be installed from `npm` and requires the following changes to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Bootstrap, we need to install it from `npm` and place it in this project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, import this file into the entry point of our React application, called
    `index.js`, so that we can use the styling throughout the entire application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try and run the development server again, we will receive an error saying
    `"You may need an appropriate loader to handle this file type."`. Because Webpack
    is unable to compile CSS files, we need to add the appropriate loaders to make
    this happen. We can install these by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add these packages as a rule to the webpack configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The order in which loaders are added is important since `css-loader` handles
    the compilation of the CSS file and `style-loader` adds the compiled CSS files
    to the React DOM. Webpack reads these settings from right to left and the CSS
    needs to be compiled before it's attached to the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application should run in the browser correctly now and should have picked
    up some small styling changes from the default Bootstrap stylesheet. Let''s make
    some changes to the `index.js` file first and style it as the container for the
    entire application. We need to change the `App` component that is rendered to
    the DOM and wrap the `List` component with a `div` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `List` component, we need to set the grid to display the `Card` components,
    which display the movie information. Wrap the `map` function and the `Card` component
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the `Card` component is as follows. This will add styling for
    the `Card` component using Bootstrap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the finishing touches, open the `index.js` file and insert the following
    code to add a header that will be placed above our list of movies in the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If we visit the browser again, we''ll see that the application has had styling
    applied through Bootstrap, which will make it look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/11d65233-61d0-4897-8d37-ec219c48815c.png)'
  prefs: []
  type: TYPE_IMG
- en: The style rules from Bootstrap have been applied to our application, making
    it look far more complete then it did before. In the final part of this section,
    we'll add the ESLint package to the project, which will make maintaining our code
    easier by synchronizing patterns across the project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ESLint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we will add ESLint to the project to make sure our code meets certain
    standards, for instance, that our code follows the correct JavaScript patterns.
    Adding ESLint requires the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install ESLint from `npm` by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The first package, called `eslint`, is the core package and helps us identify
    any potentially problematic patterns in our JavaScript code. `eslint-loader` is
    a package that is used by Webpack to run ESLint every time we update our code.
    Finally, `eslint-plugin-react` adds specific rules to ESLint for React applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure ESLint, we need to create a file called `.eslintrc.js` in the
    project''s root directory and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `env` field sets the actual environment our code will run in and will use
    `es6` functions in it, while the `parserOptions` field adds extra configuration
    for using `jsx` and modern JavaScript. Where things get interesting, however,
    is the `plugins` field, which is where we specify that our code uses `react` as
    a framework. The `extends` field is where the `recommended` settings for `eslint`
    are used, as well as framework-specific settings for React.
  prefs: []
  type: TYPE_NORMAL
- en: We can run the `eslint --init` command to create custom settings, but using
    the preceding settings is recommended, so that we ensure the stability of our
    React code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at our command line or browser, we will see no errors. However,
    we have to add the `eslint-loader` package to the webpack configuration. In the
    `webpack.config.js` file, add `eslint-loader` next to `babel-loader`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'By restarting the development server, webpack will now use ESLint to check
    whether our JavaScript code complies with the configuration of ESLint. In our
    command line (or Console tab in the browser), the following error should be visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When using React, it''s recommended that we validate any props we send to components
    since JavaScript''s dynamic type system may lead to situations where variables
    are undefined or have an incorrect type. Our code will work without us having
    to validate the props, but to fix this error we have to install the `prop-types` package,
    which used to be a feature of React but was later deprecated. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The package that we use to check for prop types can be installed from `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can validate `propTypes` in our component by importing the package
    into the `Card` component and adding the validation to the bottom of this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look at the command line again, we''ll see that the missing `propTypes`
    validation error has disappeared. However, the validation for our props still
    isn''t very specific. We can make this more specific by also specifying the `propTypes`
    of all the fields of the `movie` prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We can also indicate which props are required for React to render the component
    by adding `isRequired` to the `propTypes` validation.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have created a basic React application from scratch using
    React, ReactDom, webpack, Babel, and ESLint.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've created a movie list application for React from scratch
    and learned about core React concepts. This chapter started with you creating
    a new project with webpack and Babel. These libraries help you compile and run
    your JavaScript and React code in the browser with minimal setup. Then, we described
    how to structure a React application. This structure will be used throughout this
    book. The principles that were applied provided you with the basics from which
    to create React applications from nothing and structure them in a scalable way.
  prefs: []
  type: TYPE_NORMAL
- en: If you've been working with React before, then these concepts probably weren't
    that hard to grasp. If you haven't, then don't worry if some concepts felt strange
    to you. The upcoming chapters will build upon the features that you used in this
    chapter, giving you enough time to fully understand them.
  prefs: []
  type: TYPE_NORMAL
- en: The project you'll build in the next chapter will focus on creating reusable
    React components with more advanced styling. This will be available offline since
    it will be set up as a **Progressive Web Application** (**PWA**).
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thinking in React [https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap [https://getbootstrap.com/docs/4.3/getting-started/introduction/](https://getbootstrap.com/docs/4.3/getting-started/introduction/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLint [https://eslint.org/docs/user-guide/getting-started](https://eslint.org/docs/user-guide/getting-started)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
