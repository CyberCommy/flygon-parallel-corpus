- en: Deploying Vue CLI 3 Apps on GitHub Pages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub Pages上部署Vue CLI 3应用
- en: 'In this chapter, we will set up a new repository on a new GitHub account, and
    quickly prototype a Vue-powered project. Then, we''ll deploy it using GitHub Pages.
    In this chapter, we''ll get acquainted with the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在一个新的GitHub账户上设置一个新的仓库，并快速原型化一个Vue项目。然后，我们将使用GitHub Pages进行部署。在本章中，我们将熟悉以下内容：
- en: GitHub Desktop app
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub桌面应用
- en: Basics of Git (what it is and how it works)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git的基础知识（它是什么以及它是如何工作的）
- en: Some basic Git commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些基本的Git命令
- en: Understanding branching in Git
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Git中的分支
- en: How to properly set up a Vue app to work with GitHub Pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何正确设置Vue应用以在GitHub Pages上工作
- en: By the end of this chapter, you'll have a fully working Vue app being served
    on GitHub Pages. Let's begin by understanding how to work with the GitHub Desktop
    app.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将拥有一个在GitHub Pages上运行的完全可用的Vue应用。让我们从理解如何使用GitHub桌面应用开始。
- en: Installing GitHub Desktop app
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GitHub桌面应用
- en: 'To begin, navigate to the following URL: `https://desktop.github.com`. Next,
    simply download the app with the prominent download button in the center of the
    screen as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到以下URL：`https://desktop.github.com`。接下来，只需通过屏幕中央醒目的下载按钮下载应用，如下截图所示：
- en: '![](assets/a488acad-2b93-495a-b0ef-3715fa7f7c30.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a488acad-2b93-495a-b0ef-3715fa7f7c30.png)'
- en: Once you have downloaded the GitHub Desktop app installation file (`GithubDesktopSetup.exe`),
    you need to run the installation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你下载了GitHub桌面应用的安装文件（`GithubDesktopSetup.exe`），你需要运行安装。
- en: Once installed, you'll be greeted with a minimal interface. If you're dealing
    with Git and GitHub for the first time, this minimal interface might seem like
    it's almost *too minimal*. What's going on in this app?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你会看到一个简洁的界面。如果你第一次使用Git和GitHub，这个简洁的界面可能看起来几乎是*太简洁*了。这个应用到底是怎么回事？
- en: In order to understand how this app works, you need to know some very basic
    concepts of Git in general.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这个应用是如何工作的，你需要了解一些Git的基本概念。
- en: Understanding how Git works
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Git的工作原理
- en: When you work on a project, if you are not using source version control such
    as Git, you might think that there is only one folder for your project. For example,
    any Vue app that you've installed using Vue CLI 3 will end up as one separate
    folder with a number of subfolders inside of it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在你工作在一个项目上时，如果你没有使用像Git这样的源代码版本控制，你可能会认为你的项目只有一个文件夹。例如，使用Vue CLI 3安装的任何Vue应用都会以一个单独的文件夹的形式存在，里面包含了一些子文件夹。
- en: 'We can simplify the tree structure of such a Vue app, and describe it like
    this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简化这样一个Vue应用的树形结构，并描述它如下：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that our imaginary Vue app has one root folder called `aVueApp`. Inside
    of this root folder are three subfolders that contain the complete functionality
    of our Vue app.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们想象中的Vue应用有一个名为`aVueApp`的根文件夹。在这个根文件夹里有三个子文件夹，包含了我们Vue应用的完整功能。
- en: As long as we're dealing with only a few files and folders, that is, as long
    as our Vue app is very small, we don't have to worry about versioning our files
    and folders, since there's almost nothing to be versioned. If we make an error
    in a file or a folder, we simply undo the changes and we get back to an earlier
    version of our file. This is a reasonable approach.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们只处理一些文件和文件夹，也就是说，只要我们的Vue应用非常小，我们就不必担心对文件和文件夹进行版本控制，因为几乎没有什么需要进行版本控制的。如果我们在一个文件或文件夹中犯了错误，我们只需撤消更改，就可以回到文件的早期版本。这是一个合理的方法。
- en: However, what would happen if our project grew to, say, 30 files spread across
    seven folders? Let's also imagine updating only a couple of lines of code in each
    of these 30 files, during the development of our Vue project. Let's further imagine
    that we make so many changes to these files and that we make a few major mistakes
    during development that we simply cannot continue working on our project. Normally,
    on a smaller project, we could simply undo the changes we made to a few files
    to get back to the *last working version* of our app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们的项目增长到，比如说，30个文件分布在七个文件夹中，会发生什么呢？让我们再想象一下，在开发Vue项目期间，我们只更新了这30个文件中的几行代码。让我们进一步想象，我们对这些文件做了很多更改，并且在开发过程中犯了一些重大错误，以至于我们根本无法继续在我们的项目上工作。通常，在一个较小的项目上，我们可以简单地撤消我们对几个文件所做的更改，以回到我们应用程序的*上一个工作版本*。
- en: However, with many changes spread across many different files, not only is it
    unlikely that we'd be able to remember to undo every single change back to the
    last working version of our app, undoing all these changes would also be time-consuming
    and, thus, ultimately impractical.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于许多更改分布在许多不同的文件中，我们不仅不太可能记得撤消每个更改以回到我们应用程序的上一个工作版本，而且撤消所有这些更改也会耗费时间，因此最终是不切实际的。
- en: What is a developer to do?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者该怎么办呢？
- en: 'Luckily, we have version control. Git is what''s known as a **DVCS**: a **distributed
    version control system**. Without getting too technical, you can think of Git
    as a big undo/redo button, with a slight caveat. Instead of undoing changes on
    a single file, Git tracks versions of a developer''s app through time, sort of
    like taking a snapshot of the entire app at a certain point in time.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有版本控制。Git被称为**分布式版本控制系统**。不用太技术化地说，你可以把Git想象成一个大的撤销/重做按钮，只是有一个小小的附带条件。Git不是在单个文件上撤消更改，而是通过时间跟踪开发者应用程序的版本，有点像在某个时间点对整个应用程序进行快照。
- en: A developer is responsible for deciding just when this should take place. For
    example, when you've written a new feature in your app, and you are ready to save
    your app in its present state so you can get back to it, you simply save it by
    *committing changes*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者负责决定何时进行这个过程。例如，当你在应用程序中编写了一个新功能，并且准备保存应用程序的当前状态以便以后回到它时，你只需通过*提交更改*来保存它。
- en: Rather than describing this in theory, let's start a new Vue app and start tracking
    changes made to it with the help of Git.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与其在理论上描述这个过程，不如开始一个新的Vue应用程序，并借助Git跟踪对其所做的更改。
- en: Starting a new Vue app and tracking changes with Git
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始一个新的Vue应用程序，并使用Git跟踪更改
- en: 'Let''s open Git Bash and create a new Vue project in a folder of our choice
    as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开Git Bash，并按照以下步骤在我们选择的文件夹中创建一个新的Vue项目：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's keep things simple and press the *Enter* key whenever Vue CLI 3 prompts
    us for an answer. As we've already learned, this is a quick and easy way to accept
    default settings when installing a new Vue app with Vue CLI 3.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保持简单，每当Vue CLI 3提示我们回答时，按下*Enter*键。正如我们已经学到的，这是在使用Vue CLI 3安装新的Vue应用程序时接受默认设置的快速简便方法。
- en: 'To start tracking a project with Git, we run the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Git跟踪项目，我们运行以下命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command initializes a new local Git repository. We're using the word local
    here because, currently, this repository is local to our computer only. If we
    wiped our computer's disk tomorrow, the local Git repository that we just made
    would be lost as well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令初始化了一个新的本地Git仓库。我们在这里使用“本地”这个词，因为目前，这个仓库只存在于我们的计算机上。如果明天我们抹掉了计算机的磁盘，我们刚刚创建的本地Git仓库也会丢失。
- en: 'However, there are cases when a Git repository has already been initialized.
    The following is a simple command we can run to see whether there is a Git repository
    in our project or not:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些情况下Git仓库已经被初始化。以下是一个简单的命令，我们可以运行来查看我们的项目中是否有Git仓库：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding command gives us information about the current state of our repository.
    If the folder we've run this command in is not empty, it will report that the
    current folder is not a Git repository.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令为我们提供了有关我们仓库当前状态的信息。如果我们运行此命令的文件夹不为空，它将报告当前文件夹不是一个Git仓库。
- en: 'Let''s run the `git status` command now in the root of the `chapter8` folder.
    This is what we get back:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`chapter8`文件夹的根目录运行`git status`命令。这是我们得到的内容：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This information tells us that we are currently on the master branch of our
    project, and that there is nothing to commit. The working tree is clean. What
    is this *working tree*?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息告诉我们，我们目前正在项目的主分支上，并且没有要提交的内容。工作树是干净的。这个*工作树*是什么？
- en: The **working tree** represents all the files and folders that have been saved
    and whose changes have been committed in our project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作树**代表了在我们项目中保存并已提交更改的所有文件和文件夹。'
- en: 'To inspect the history of changes made to our project''s files, we can run
    this command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查对我们项目文件所做更改的历史记录，我们可以运行这个命令：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command will list all the commits that we''ve added to the project so
    far. Here''s the output of the preceding command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将列出到目前为止我们添加到项目中的所有提交。以下是上一个命令的输出：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we can see several pieces of information:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到几条信息：
- en: Commit with a 40-character SHA unique identifier
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用一个包含40个字符的SHA唯一标识符进行提交
- en: Commit author (including author's username and email address)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交作者（包括作者的用户名和电子邮件地址）
- en: The date and time when the commit was made
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交时的日期和时间
- en: 'Let''s now make a minor change to our `App.vue` file. We''ll update the `msg`
    attribute from Welcome to Your Vue.js App to just Welcome. Once we''ve saved the
    changes, we can run the `git status` command again. This is what we will get back
    inside the console:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对`App.vue`文件进行一个小的更改。我们将把`msg`属性从Welcome to Your Vue.js App更新为只是Welcome。一旦我们保存了更改，我们可以再次运行`git
    status`命令。这是我们将在控制台中得到的内容：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can create another *snapshot* of the condition our app was in at this
    point in time. To do that, we need to do the following two things:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建应用程序在这个时间点的另一个*快照*。为此，我们需要做以下两件事：
- en: First, we need to add all our changes to the *staging area* (this is the second
    Git tree).
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们需要将所有更改添加到*暂存区*（这是第二个Git树）。
- en: Second, we need to commit those changes, so that they get their own commit SHA
    (unique identifier consisting of a string of 40 pseudo-random characters).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，我们需要提交这些更改，以便它们获得自己的提交SHA（由40个伪随机字符组成的唯一标识符）。
- en: Committing changes to our app
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交更改到我们的应用程序
- en: 'Let''s add all the changes with this command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用这个命令添加所有的更改：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we''ll commit the changes by giving a commit message as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过给出提交消息来提交更改，如下所示：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s run the `git log` command again to see the output. This time, we''ll
    also pass it a flag, `--oneline`, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次运行`git log`命令来查看输出。这一次，我们还将传递一个标志，`--oneline`，如下所示：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is the result that we get back inside the console:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在控制台中得到的结果：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that, this time, the information we get back is a lot more succinct. The
    40-character SHA string is now abbreviated to the first eight letters and numbers,
    and the author details are skipped. The `--oneline` flag is very useful when we
    have many commits to look into. You can even narrow down the number of results
    by passing another flag, starting with the minus character, and then the number
    of commits you want to see. Whichever number you specify, you'll get back that
    many of the most recent commits.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we currently have two commits, so we could run this command to
    see the last two commits:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We could also run this command to see only the last commit:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, we'll look at the three trees concept.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The three trees concept
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a concept of three trees in Git. It is important to note that this
    concept doesn''t have anything to do with the tree data structure. Here, the tree
    is just a metaphor we use to refer to a certain status of our files. The three
    trees include the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Working directory
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staging area (also known as staging index)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The repository
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The concept of three trees might sound confusing at first, but it''s actually
    very simple. Here is a basic Git workflow:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: We install an app using  `vue create <appname>`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As part of the installation, our app is initialized as a Git repository.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is complete, we have all our files (working directory)
    and a single commit (with the message that reads ''init'', meaning a repository
    has been initialized).
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then make some changes to our working directory.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before committing these changes, we need to add them to our *staging index*.
    The staging index is just a tree of updated files that we are preparing for a
    commit. If we haven't added any files with the `git add <filename>` command, our
    staging index is empty.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've staged all the files into the staging area, you then commit them
    (using the `git commit -m` syntax, followed with the specific commit message inside
    quotes).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you've committed your changes, you simply repeat the process.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Besides the working directory and the staging area, the third tree is simply
    the repository. You can use the `checkout` command to get to *load* whatever part
    of the repository you want into your working directory. Then you can simply repeat
    the process if you like.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Branching in Git
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another important concept in Git is branching. For science fiction fans, branching
    could be described as sort of a multiverse: a bunch of alternative realities in
    which your project can, for example, have a navbar in the footer, or no navbar
    at all.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: When we want to add a new feature to our project, we use branching. That way,
    each branch represents a separate feature of our project.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Every Git project starts off with a single branch: master.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we decide we need another branch for a special feature we need to work
    on, we simply run this command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding command means the following: create a new branch, call it `branch
    name here`, and switch to this newly added branch.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'To view a listing of all the branches in our project, we simply run this command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This command will print out all the branches we have in our project, as well
    as putting an asterisk in front of the current branch. Here''s an example output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding output would mean that we have a total of three branches in our
    project, and that we're currently on the `master` branch.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Merging branches
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One more thing to mention before we set up our project in GitHub is the concept
    of merging branches.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow goes like this: we check out a new branch using a sensible name
    (for example, `add-navbar`). Next, we add all the features that we want to this
    branch, and commit our changes. Once we''re done, we switch back to another branch,
    for example, *master*. Then we simply run the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Doing this will result in all the code from the `add-navbar` branch getting
    pulled into the `master` branch. Our `master` branch and our `add-navbar` branch
    now share the same code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Note that you cannot switch branches if you have changes in your working directory
    that haven't been committed! If you don't want to commit your changes, but still
    need to switch to a different branch, a workaround is to use the `git stash` command.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our quick introduction to some basic concepts of Git. However,
    this is nowhere near a complete introduction. We have only mentioned some basic
    features that we will be using in our project. There are still many more things
    to learn.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Registering a new GitHub account
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed GitHub Desktop. We also know enough about Git to be able to
    understand the rest of this chapter. Now we'll register for a GitHub account.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://github.com](https://github.com) and sign up for a new account.
    Make sure to check your email and confirm the registration.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve signed up and logged in, you''ll see an interface like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb732c39-e541-4bf8-803f-e2ae7562db96.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: This is the place where our *remote* GitHub repository will live. To add to
    our remote repository, we need to push our changes there. The remote repository
    is referred to as *origin/master*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, we have GitHub Desktop installed, and using it is the simplest way
    possible to interact with GitHub. You can easily create new repositories, update
    existing ones, add branches, and push to the remote, all from GitHub Desktop.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: We already have the `chapter8 Vue` project, with one commit added to it. Let's
    now use GitHub Desktop to add it to remote.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Adding origin/master using GitHub Desktop
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's open the GitHub Desktop app. We'll start using it by adding our `chapter8`
    project. To do that, click on the File dropdown in the main application menu at
    the very top. Next, click on the Add local repository command.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: A popup will appear. This popup's title is Add local repository. In the body
    of the popup, we can see a single input field with a placeholder that reads repository
    path. Next to it is the button to choose a local repository. Let's click the Choose...
    button.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the Choose... button will open Windows Explorer, where we can navigate
    to the location of our `chapter8` folder. Once you've selected the `chapter8`
    folder, simply click the Select Folder button at the very bottom of the Windows
    Explorer window.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, simply click the Add repository button in the popup as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6185478-abbb-4c2c-9a88-01f6f58d336b.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: That's it! You've just added your local repository. Now, you're ready to publish
    it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your local repository
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To publish our local repository, we need to simply click the Publish repository
    button as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/385e46d6-e6fe-4709-9d2c-5b8411182fd6.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'Once we click the Publish repository button, a new popup will appear. There
    are only the following default settings already added to the Publish repository
    popup window:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Repository name (as it will appear in GitHub)
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description (blank by default)
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep this code private checkbox (checked)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's accept the defaults and click the Publish repository button. We will now
    have a new private repository in our GitHub account.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in GitHub, here''s our remote repository:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/41ffa129-8509-4c53-8223-d6b865a99bb6.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the link to `chapter8` in the left-hand sidebar, we''ll be taken
    to our repository as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf965295-56f6-481e-91f0-be2b69386b18.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Here, we can see our entire project.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that there are currently 2 commits in our repository. Clicking
    on the 2 commits link will take us to a sort of visual Git log of commits, where
    you can also click on each individual commit to inspect the changes made at that
    specific time in our project's history.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll publish our project so that it can be seen on GitHub Pages.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Publishing our project on GitHub Pages
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub Pages is a hosting service. You can host static files there. This means
    that you can't host a database with a backend, so projects written in backend
    technologies, such as PHP, Node, .NET, and so on, can't be added.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Still, it's interesting how far you can take a simple project consisting of
    static files. You can even host a blog using Jekyll, GitHub's serverless blogging
    platform.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: However, the focus of this section is publishing our simple Vue app, so let's
    get ready to do that.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Getting our project ready to be published
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll begin in our repository dashboard on GitHub. Let'' navigate to the Settings
    tab as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d4756100-23ef-4af2-90cd-c122bdc145f8.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to scroll down to the GitHub Pages section as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b314042-65c6-4ab7-a6c2-6a6e4ff1f5cb.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the preceding screenshot, we can see that we need to make our repository
    public before we can publish it on GitHub Pages. To do that, we simply need to
    click the Make public button (the first button under the Danger Zone title) as
    follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/04375b60-1f5c-4f7d-b544-1afa465d584a.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: In the popup that appears, we'll type the name of our repository to confirm
    our choice, then click the I understand, make this repository public button. It
    is possible that GitHub will require you to retype your password at this stage.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need to scroll down to the GitHub Pages section again, and click the
    drop-down button. Choose master branch in the drop-down list as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35449adc-68e9-46e8-bc7c-18392c94474e.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve chosen the master branch, an alert will appear under the main
    menu, and it will read "GitHub Pages source saved", as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0520a350-e6e5-472f-a9e7-51dfe0de8429.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: 'Finally, scroll down to the GitHub Pages section again, and you''ll see this
    message:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff3dffd1-1d26-4d64-8afd-47a950404a69.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Everything is now ready for publishing on GitHub Pages, but we still need to
    configure our Vue app.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Vue configuration file
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With all the config files we''ve seen in this book, it should come as no surprise
    that Vue itself has one! The name of this file is `vue.config.js` and it lives
    in the root of our project. This file is optional, so `vue.config.js` doesn''t
    come with our project preinstalled. Let''s add it to the root of our project,
    and add the following code to it:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The first option we''ll give our Vue config file is `publicPath`, as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can read more about this setup at the following URL: [https://cli.vuejs.org/guide/deployment.html#github-pages](https://cli.vuejs.org/guide/deployment.html#github-pages).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Let's save our changes and use GitHub Desktop to commit them and push them to
    the remote repository.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Saving changes and pushing them to the remote repository with GitHub Desktop
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open GitHub Desktop and you''ll see your changes listed. Simply type your commit
    message in the lower-left corner of the app, and then click the Commit to master
    button (the blue button in the very lower-left corner of the GitHub Desktop app,
    as shown in the following screenshot):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6e8911f-480c-4137-80b2-14683fe4ff86.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Commit to master button, you need to push your changes to
    origin (another name for the remote repository) as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/67a208d2-6163-42a5-870d-02c08eede6a4.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'Unfortunately, our repository will still not be published. To publish it, we
    need to open the `.gitignore` file in our root, and comment out the `/dist` folder
    so that it''s no longer ignored, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we''ll build our project with this command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We''ll see the following message:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Commit changes in GitHub Desktop with a message, for example: `Prepare dist
    directory`. After that, like before, click the Push origin button.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Debugging your GitHub pages deployment
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, things just don''t work like they''re supposed to. In that case,
    you can simply locate the hidden `.git` folder inside your project, and just delete
    it. This will remove the local repository. Next, update the `vue.config.js` file,
    like this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Back in GitHub Desktop, the app will notice your changes and offer you to publish
    the repository. The offered repository name is `chapter8`, but you need to rename
    it to `chp8`. Back in GitHub, locate your new `chp8` repository, and set it to
    public. Note that you could have done that from the pop-up window in GitHub Desktop.
    Regardless of how you did it, it's important to make the repository public. Next,
    scroll down to the GitHub Pages section in the Settings tab of your GitHub repository's
    dashboard, and publish a new GitHub Pages project on the master branch, just like
    we did before.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, it is not perfectly clear in Vue documentation how to easily
    deploy a website on GitHub Pages. What currently works is publishing your `dist`
    folder as a subtree repository. Here are the commands used to achieve this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The repository for this chapter can be found at `https://github.com/ImsirovicAjdin/chp8`.
    If you look at the file structure, you''ll notice that your repository looks like
    this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Obviously, the `git subtree push --prefix dist origin master` command pushed
    only the contents of the `dist` directory to GitHub. To better understand how
    the repository for this chapter works, refer to the `chapter8` folder in this
    book's code, and once you open it, run the `git log` command on it inside a command-line
    program.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've learned about the very basics of Git and GitHub. We've
    seen how to set up and use GitHub Desktop, and how to use it to quickly and easily
    push a local repository to a remote on GitHub.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Further, we've looked at how to add branches to our app and how to pull in these
    branches to merge them with the master branch. Finally, we've discussed the tweaks
    we need to make to our project in order to publish it on GitHub Pages.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
