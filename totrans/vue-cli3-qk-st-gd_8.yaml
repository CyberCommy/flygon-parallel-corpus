- en: Deploying Vue CLI 3 Apps on GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will set up a new repository on a new GitHub account, and
    quickly prototype a Vue-powered project. Then, we''ll deploy it using GitHub Pages.
    In this chapter, we''ll get acquainted with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Desktop app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics of Git (what it is and how it works)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some basic Git commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding branching in Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to properly set up a Vue app to work with GitHub Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have a fully working Vue app being served
    on GitHub Pages. Let's begin by understanding how to work with the GitHub Desktop
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GitHub Desktop app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin, navigate to the following URL: `https://desktop.github.com`. Next,
    simply download the app with the prominent download button in the center of the
    screen as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a488acad-2b93-495a-b0ef-3715fa7f7c30.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have downloaded the GitHub Desktop app installation file (`GithubDesktopSetup.exe`),
    you need to run the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, you'll be greeted with a minimal interface. If you're dealing
    with Git and GitHub for the first time, this minimal interface might seem like
    it's almost *too minimal*. What's going on in this app?
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand how this app works, you need to know some very basic
    concepts of Git in general.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Git works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you work on a project, if you are not using source version control such
    as Git, you might think that there is only one folder for your project. For example,
    any Vue app that you've installed using Vue CLI 3 will end up as one separate
    folder with a number of subfolders inside of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can simplify the tree structure of such a Vue app, and describe it like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that our imaginary Vue app has one root folder called `aVueApp`. Inside
    of this root folder are three subfolders that contain the complete functionality
    of our Vue app.
  prefs: []
  type: TYPE_NORMAL
- en: As long as we're dealing with only a few files and folders, that is, as long
    as our Vue app is very small, we don't have to worry about versioning our files
    and folders, since there's almost nothing to be versioned. If we make an error
    in a file or a folder, we simply undo the changes and we get back to an earlier
    version of our file. This is a reasonable approach.
  prefs: []
  type: TYPE_NORMAL
- en: However, what would happen if our project grew to, say, 30 files spread across
    seven folders? Let's also imagine updating only a couple of lines of code in each
    of these 30 files, during the development of our Vue project. Let's further imagine
    that we make so many changes to these files and that we make a few major mistakes
    during development that we simply cannot continue working on our project. Normally,
    on a smaller project, we could simply undo the changes we made to a few files
    to get back to the *last working version* of our app.
  prefs: []
  type: TYPE_NORMAL
- en: However, with many changes spread across many different files, not only is it
    unlikely that we'd be able to remember to undo every single change back to the
    last working version of our app, undoing all these changes would also be time-consuming
    and, thus, ultimately impractical.
  prefs: []
  type: TYPE_NORMAL
- en: What is a developer to do?
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, we have version control. Git is what''s known as a **DVCS**: a **distributed
    version control system**. Without getting too technical, you can think of Git
    as a big undo/redo button, with a slight caveat. Instead of undoing changes on
    a single file, Git tracks versions of a developer''s app through time, sort of
    like taking a snapshot of the entire app at a certain point in time.'
  prefs: []
  type: TYPE_NORMAL
- en: A developer is responsible for deciding just when this should take place. For
    example, when you've written a new feature in your app, and you are ready to save
    your app in its present state so you can get back to it, you simply save it by
    *committing changes*.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than describing this in theory, let's start a new Vue app and start tracking
    changes made to it with the help of Git.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a new Vue app and tracking changes with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s open Git Bash and create a new Vue project in a folder of our choice
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's keep things simple and press the *Enter* key whenever Vue CLI 3 prompts
    us for an answer. As we've already learned, this is a quick and easy way to accept
    default settings when installing a new Vue app with Vue CLI 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start tracking a project with Git, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command initializes a new local Git repository. We're using the word local
    here because, currently, this repository is local to our computer only. If we
    wiped our computer's disk tomorrow, the local Git repository that we just made
    would be lost as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are cases when a Git repository has already been initialized.
    The following is a simple command we can run to see whether there is a Git repository
    in our project or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command gives us information about the current state of our repository.
    If the folder we've run this command in is not empty, it will report that the
    current folder is not a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the `git status` command now in the root of the `chapter8` folder.
    This is what we get back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This information tells us that we are currently on the master branch of our
    project, and that there is nothing to commit. The working tree is clean. What
    is this *working tree*?
  prefs: []
  type: TYPE_NORMAL
- en: The **working tree** represents all the files and folders that have been saved
    and whose changes have been committed in our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To inspect the history of changes made to our project''s files, we can run
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will list all the commits that we''ve added to the project so
    far. Here''s the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can see several pieces of information:'
  prefs: []
  type: TYPE_NORMAL
- en: Commit with a 40-character SHA unique identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commit author (including author's username and email address)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The date and time when the commit was made
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now make a minor change to our `App.vue` file. We''ll update the `msg`
    attribute from Welcome to Your Vue.js App to just Welcome. Once we''ve saved the
    changes, we can run the `git status` command again. This is what we will get back
    inside the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can create another *snapshot* of the condition our app was in at this
    point in time. To do that, we need to do the following two things:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to add all our changes to the *staging area* (this is the second
    Git tree).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, we need to commit those changes, so that they get their own commit SHA
    (unique identifier consisting of a string of 40 pseudo-random characters).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing changes to our app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add all the changes with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll commit the changes by giving a commit message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run the `git log` command again to see the output. This time, we''ll
    also pass it a flag, `--oneline`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result that we get back inside the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that, this time, the information we get back is a lot more succinct. The
    40-character SHA string is now abbreviated to the first eight letters and numbers,
    and the author details are skipped. The `--oneline` flag is very useful when we
    have many commits to look into. You can even narrow down the number of results
    by passing another flag, starting with the minus character, and then the number
    of commits you want to see. Whichever number you specify, you'll get back that
    many of the most recent commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we currently have two commits, so we could run this command to
    see the last two commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also run this command to see only the last commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll look at the three trees concept.
  prefs: []
  type: TYPE_NORMAL
- en: The three trees concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a concept of three trees in Git. It is important to note that this
    concept doesn''t have anything to do with the tree data structure. Here, the tree
    is just a metaphor we use to refer to a certain status of our files. The three
    trees include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Working directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staging area (also known as staging index)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The concept of three trees might sound confusing at first, but it''s actually
    very simple. Here is a basic Git workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: We install an app using  `vue create <appname>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As part of the installation, our app is initialized as a Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is complete, we have all our files (working directory)
    and a single commit (with the message that reads ''init'', meaning a repository
    has been initialized).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then make some changes to our working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before committing these changes, we need to add them to our *staging index*.
    The staging index is just a tree of updated files that we are preparing for a
    commit. If we haven't added any files with the `git add <filename>` command, our
    staging index is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've staged all the files into the staging area, you then commit them
    (using the `git commit -m` syntax, followed with the specific commit message inside
    quotes).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you've committed your changes, you simply repeat the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Besides the working directory and the staging area, the third tree is simply
    the repository. You can use the `checkout` command to get to *load* whatever part
    of the repository you want into your working directory. Then you can simply repeat
    the process if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Branching in Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another important concept in Git is branching. For science fiction fans, branching
    could be described as sort of a multiverse: a bunch of alternative realities in
    which your project can, for example, have a navbar in the footer, or no navbar
    at all.'
  prefs: []
  type: TYPE_NORMAL
- en: When we want to add a new feature to our project, we use branching. That way,
    each branch represents a separate feature of our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every Git project starts off with a single branch: master.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we decide we need another branch for a special feature we need to work
    on, we simply run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command means the following: create a new branch, call it `branch
    name here`, and switch to this newly added branch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view a listing of all the branches in our project, we simply run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will print out all the branches we have in our project, as well
    as putting an asterisk in front of the current branch. Here''s an example output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output would mean that we have a total of three branches in our
    project, and that we're currently on the `master` branch.
  prefs: []
  type: TYPE_NORMAL
- en: Merging branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One more thing to mention before we set up our project in GitHub is the concept
    of merging branches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow goes like this: we check out a new branch using a sensible name
    (for example, `add-navbar`). Next, we add all the features that we want to this
    branch, and commit our changes. Once we''re done, we switch back to another branch,
    for example, *master*. Then we simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Doing this will result in all the code from the `add-navbar` branch getting
    pulled into the `master` branch. Our `master` branch and our `add-navbar` branch
    now share the same code.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you cannot switch branches if you have changes in your working directory
    that haven't been committed! If you don't want to commit your changes, but still
    need to switch to a different branch, a workaround is to use the `git stash` command.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our quick introduction to some basic concepts of Git. However,
    this is nowhere near a complete introduction. We have only mentioned some basic
    features that we will be using in our project. There are still many more things
    to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a new GitHub account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed GitHub Desktop. We also know enough about Git to be able to
    understand the rest of this chapter. Now we'll register for a GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://github.com](https://github.com) and sign up for a new account.
    Make sure to check your email and confirm the registration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve signed up and logged in, you''ll see an interface like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb732c39-e541-4bf8-803f-e2ae7562db96.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the place where our *remote* GitHub repository will live. To add to
    our remote repository, we need to push our changes there. The remote repository
    is referred to as *origin/master*.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, we have GitHub Desktop installed, and using it is the simplest way
    possible to interact with GitHub. You can easily create new repositories, update
    existing ones, add branches, and push to the remote, all from GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: We already have the `chapter8 Vue` project, with one commit added to it. Let's
    now use GitHub Desktop to add it to remote.
  prefs: []
  type: TYPE_NORMAL
- en: Adding origin/master using GitHub Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's open the GitHub Desktop app. We'll start using it by adding our `chapter8`
    project. To do that, click on the File dropdown in the main application menu at
    the very top. Next, click on the Add local repository command.
  prefs: []
  type: TYPE_NORMAL
- en: A popup will appear. This popup's title is Add local repository. In the body
    of the popup, we can see a single input field with a placeholder that reads repository
    path. Next to it is the button to choose a local repository. Let's click the Choose...
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the Choose... button will open Windows Explorer, where we can navigate
    to the location of our `chapter8` folder. Once you've selected the `chapter8`
    folder, simply click the Select Folder button at the very bottom of the Windows
    Explorer window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, simply click the Add repository button in the popup as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6185478-abbb-4c2c-9a88-01f6f58d336b.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it! You've just added your local repository. Now, you're ready to publish
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your local repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To publish our local repository, we need to simply click the Publish repository
    button as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/385e46d6-e6fe-4709-9d2c-5b8411182fd6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we click the Publish repository button, a new popup will appear. There
    are only the following default settings already added to the Publish repository
    popup window:'
  prefs: []
  type: TYPE_NORMAL
- en: Repository name (as it will appear in GitHub)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description (blank by default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep this code private checkbox (checked)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's accept the defaults and click the Publish repository button. We will now
    have a new private repository in our GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in GitHub, here''s our remote repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/41ffa129-8509-4c53-8223-d6b865a99bb6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the link to `chapter8` in the left-hand sidebar, we''ll be taken
    to our repository as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf965295-56f6-481e-91f0-be2b69386b18.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see our entire project.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that there are currently 2 commits in our repository. Clicking
    on the 2 commits link will take us to a sort of visual Git log of commits, where
    you can also click on each individual commit to inspect the changes made at that
    specific time in our project's history.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll publish our project so that it can be seen on GitHub Pages.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing our project on GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub Pages is a hosting service. You can host static files there. This means
    that you can't host a database with a backend, so projects written in backend
    technologies, such as PHP, Node, .NET, and so on, can't be added.
  prefs: []
  type: TYPE_NORMAL
- en: Still, it's interesting how far you can take a simple project consisting of
    static files. You can even host a blog using Jekyll, GitHub's serverless blogging
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: However, the focus of this section is publishing our simple Vue app, so let's
    get ready to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting our project ready to be published
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll begin in our repository dashboard on GitHub. Let'' navigate to the Settings
    tab as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d4756100-23ef-4af2-90cd-c122bdc145f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to scroll down to the GitHub Pages section as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7b314042-65c6-4ab7-a6c2-6a6e4ff1f5cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the preceding screenshot, we can see that we need to make our repository
    public before we can publish it on GitHub Pages. To do that, we simply need to
    click the Make public button (the first button under the Danger Zone title) as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/04375b60-1f5c-4f7d-b544-1afa465d584a.png)'
  prefs: []
  type: TYPE_IMG
- en: In the popup that appears, we'll type the name of our repository to confirm
    our choice, then click the I understand, make this repository public button. It
    is possible that GitHub will require you to retype your password at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need to scroll down to the GitHub Pages section again, and click the
    drop-down button. Choose master branch in the drop-down list as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35449adc-68e9-46e8-bc7c-18392c94474e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve chosen the master branch, an alert will appear under the main
    menu, and it will read "GitHub Pages source saved", as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0520a350-e6e5-472f-a9e7-51dfe0de8429.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, scroll down to the GitHub Pages section again, and you''ll see this
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff3dffd1-1d26-4d64-8afd-47a950404a69.png)'
  prefs: []
  type: TYPE_IMG
- en: Everything is now ready for publishing on GitHub Pages, but we still need to
    configure our Vue app.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Vue configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With all the config files we''ve seen in this book, it should come as no surprise
    that Vue itself has one! The name of this file is `vue.config.js` and it lives
    in the root of our project. This file is optional, so `vue.config.js` doesn''t
    come with our project preinstalled. Let''s add it to the root of our project,
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The first option we''ll give our Vue config file is `publicPath`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about this setup at the following URL: [https://cli.vuejs.org/guide/deployment.html#github-pages](https://cli.vuejs.org/guide/deployment.html#github-pages).
  prefs: []
  type: TYPE_NORMAL
- en: Let's save our changes and use GitHub Desktop to commit them and push them to
    the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: Saving changes and pushing them to the remote repository with GitHub Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open GitHub Desktop and you''ll see your changes listed. Simply type your commit
    message in the lower-left corner of the app, and then click the Commit to master
    button (the blue button in the very lower-left corner of the GitHub Desktop app,
    as shown in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6e8911f-480c-4137-80b2-14683fe4ff86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the Commit to master button, you need to push your changes to
    origin (another name for the remote repository) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/67a208d2-6163-42a5-870d-02c08eede6a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Unfortunately, our repository will still not be published. To publish it, we
    need to open the `.gitignore` file in our root, and comment out the `/dist` folder
    so that it''s no longer ignored, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll build our project with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit changes in GitHub Desktop with a message, for example: `Prepare dist
    directory`. After that, like before, click the Push origin button.'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging your GitHub pages deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, things just don''t work like they''re supposed to. In that case,
    you can simply locate the hidden `.git` folder inside your project, and just delete
    it. This will remove the local repository. Next, update the `vue.config.js` file,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Back in GitHub Desktop, the app will notice your changes and offer you to publish
    the repository. The offered repository name is `chapter8`, but you need to rename
    it to `chp8`. Back in GitHub, locate your new `chp8` repository, and set it to
    public. Note that you could have done that from the pop-up window in GitHub Desktop.
    Regardless of how you did it, it's important to make the repository public. Next,
    scroll down to the GitHub Pages section in the Settings tab of your GitHub repository's
    dashboard, and publish a new GitHub Pages project on the master branch, just like
    we did before.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, it is not perfectly clear in Vue documentation how to easily
    deploy a website on GitHub Pages. What currently works is publishing your `dist`
    folder as a subtree repository. Here are the commands used to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The repository for this chapter can be found at `https://github.com/ImsirovicAjdin/chp8`.
    If you look at the file structure, you''ll notice that your repository looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, the `git subtree push --prefix dist origin master` command pushed
    only the contents of the `dist` directory to GitHub. To better understand how
    the repository for this chapter works, refer to the `chapter8` folder in this
    book's code, and once you open it, run the `git log` command on it inside a command-line
    program.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've learned about the very basics of Git and GitHub. We've
    seen how to set up and use GitHub Desktop, and how to use it to quickly and easily
    push a local repository to a remote on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Further, we've looked at how to add branches to our app and how to pull in these
    branches to merge them with the master branch. Finally, we've discussed the tweaks
    we need to make to our project in order to publish it on GitHub Pages.
  prefs: []
  type: TYPE_NORMAL
