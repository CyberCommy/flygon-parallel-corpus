- en: Chapter 15. Remove Repeated Logic in Page Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As things are now, the logic in our page scripts is highly repetitive. They
    all look very similar. Each one loads a setup script, instantiates a series of
    dependencies for a page controller, invokes that controller, and sends the response.
  prefs: []
  type: TYPE_NORMAL
- en: Our front controller gives us a place where we can execute the common elements
    of each page script and remove that repetition. Once the repetition has been removed,
    we can begin to eliminate the page scripts themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Repeated logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In essence, each of our page scripts follows this organizational flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Because we have been diligent about always using the same variable name for
    our controller object (`$controller`), always using the same method name for invoking
    it (`__invoke()`), and always using the same variable name for the response (`$response`),
    we can see that the only part of each page script that is different is the central
    section. That central block builds the controller object. Everything before and
    after is identical.
  prefs: []
  type: TYPE_NORMAL
- en: Further, because we have a front controller to handle all incoming requests,
    we now have a place to put the common before and after logic of every page script.
    That is what we will do here.
  prefs: []
  type: TYPE_NORMAL
- en: The Removal Process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, the removal process is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the front controller to add setup, controller invocation, and response
    sending.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify each page script to remove the setup, controller invocation, and response
    sending.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spot check, commit, push, and notify QA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the Front controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we modify the front controller logic to perform the logic common to
    every page script. We change it from the code listed in the previous chapter to
    something more like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have replaced the line that requires the `Router` class file with a line
    that requires the setup script. (Way back in the chapter on autoloading, we put
    the autoloader into our setup script, so it should be autoloading the `Router`
    class for us now.)
  prefs: []
  type: TYPE_NORMAL
- en: We have also added two lines after requiring the file `$route` to the page script.
    These invoke the controller and set the response. We use the common variable names
    for the controller and response objects in this shared logic. (If you chose something
    other than `$controller` and `$response` in the page scripts, replace those in
    the above script. Similarly, if you used a common controller method other than
    `__invoke()`, replace that as well.)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the setup work is going to be specific to our legacy application.
    As long as the setup work is the same for every page script (which it should be
    at this point) placing the common setup work here will be just fine.
  prefs: []
  type: TYPE_NORMAL
- en: Remove Logic from Page Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have added setup, controller invocation, and response-sending work
    to the front controller, we can remove that same work from each page script. Doing
    so should be as easy as doing a project-wide search in the `pages/` directory
    and deleting the found lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finding the setup lines probably requires a regular expression, since the relative
    location of the setup scripts may result in lines that use relative directory
    traversals. The following regular expression will find `includes/setup.php`, `../includes/setup.php`,
    `dirname(__DIR__)` . `/includes/setup.php`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: However, finding the controller invocation and response-sending lines should
    not require a regular expression, since they should be identical in every page
    script.
  prefs: []
  type: TYPE_NORMAL
- en: Search for controller invocation …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Search for response sending …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In each case, delete the found line. It is no longer needed now that the logic
    has been moved to the front controller.
  prefs: []
  type: TYPE_NORMAL
- en: Spot Check, Commit, Push, Notify QA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the repeated page script logic has been removed in favor of the same logic
    placed in the front controller, we can spot check the application. We do so by
    running our characterization tests if they exist, or by browsing to or otherwise
    invoking each page in the application if they do not.
  prefs: []
  type: TYPE_NORMAL
- en: After we are sure that the application still works properly, we commit our new
    code and push it to the common repository. Then we notify QA that we have new
    work for them to review.
  prefs: []
  type: TYPE_NORMAL
- en: Common Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What if the Setup Work Is Inconsistent?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the examples throughout this book, we have shown only a single script doing
    the setup work for each page script. Some legacy applications may use more than
    one setup script. As long as the setup work is identical across each page script,
    even if it is composed of more than one script, then we can move all the setup
    work to the front controller.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the setup work is not identical across each page script, we have
    a problem to deal with. If the page scripts do not enjoy an identical setup process
    at this point, we should do what we can to address that before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: It is imperative that we make the setup work identical in all page scripts.
    This may mean including all the different setup work from all page scripts in
    the front controller, even if some scripts don't need all that setup work. We
    can remedy this overlap the next chapter if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: If we cannot enforce an identical single-stage setup process, we may have to
    pursue a dual or two-stage setup process. First, we consolidate common setup work
    into the front controller and remove it from the page scripts. Extraneous, special-case,
    or page-specific setup work can remain with the page script as a degenerate but
    necessary part of the dependency creation work.
  prefs: []
  type: TYPE_NORMAL
- en: What if we used inconsistent naming?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In previous chapters, this book emphasizes the importance of consistent naming.
    This chapter is the point at which that consistency pays off.
  prefs: []
  type: TYPE_NORMAL
- en: If we discover we have been inconsistent in our naming of the controller object
    variable and/or the controller method name, all is not lost. We will not be able
    to do a one-pass search-and-replace, but we can still work through each page script
    manually and change the names to be consistent. Then the newly consistent names
    can be used by the front controller.
  prefs: []
  type: TYPE_NORMAL
- en: Review and next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this step, we have reduced our page scripts to a bare core of logic. All
    they do now is set up dependencies for, and then create, a controller object.
    The front controller does everything before that, and everything after.
  prefs: []
  type: TYPE_NORMAL
- en: As it happens, even this logic can be extracted from the page scripts. An object
    called a dependency injection container can receive the object creation logic
    as series of closures, one closure per page script. The container can handle the
    object creation for us and we can remove the page scripts entirely.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, our final refactoring will extract all object creation logic to a dependency
    injection container. We will also modify our front controller to instantiate controller
    objects instead of requiring page scripts. In doing so, we will have removed all
    of our page scripts and our application will have a fully modernized architecture.
  prefs: []
  type: TYPE_NORMAL
