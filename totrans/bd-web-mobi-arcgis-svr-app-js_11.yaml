- en: Chapter 11. Integration with ArcGIS Online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ArcGIS Online is a website designed for working with maps and other types of
    geographic information. On this site, you will find applications for building
    and sharing maps. You will also find useful basemaps, data, applications, and
    tools that you can view and use, plus the communities that you can join. For application
    developers, the really exciting news is that you can integrate ArcGIS Online content
    into your custom developed applications using the ArcGIS Server API for JavaScript.
    In this chapter, you'll explore how ArcGIS Online maps can be added to your applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding ArcGIS Online maps to your applications with the webmap ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding ArcGIS Online maps to your applications with JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice with ArcGIS Online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding ArcGIS Online maps to your applications with the webmap ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcGIS Server API for JavaScript includes two utility methods for working
    with maps from ArcGIS Online. Both methods are found on the `esri/arcgis/utils`
    resource. The `createMap()` method is used to create a map from an ArcGIS Online
    item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each map in the ArcGIS Online gallery has a unique ID. This unique ID, called
    webmap, will be important when you begin creating custom applications that integrate
    maps from ArcGIS Online. To get the webmap ID for a map that you''d like to add
    to your JavaScript API application, simply click on a map shared in ArcGIS Online
    that you''ve found. The address bar will contain the webmap ID for the map. You''ll
    want to make note of this ID. The following screenshot shows how you can obtain
    the webmap ID from the address bar of a browser for a particular map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ArcGIS Online maps to your applications with the webmap ID](graphics/7965_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have obtained the webmap ID for the ArcGIS Online map that you'd like
    to integrate into your custom JavaScript API application, you'll need to call
    the `getItem()` method, passing in the webmap ID. The `getItem()` method returns
    a `dojo`/`Deferred` object. The `Deferred` object is built specifically for tasks
    that may not complete immediately. It allows you to define `success` and `failure`
    callback functions that will be executed when the task is completed. In this case,
    a successful completion will pass in an `itemInfo` object to the `success` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `itemInfo` object will be used to create the map from ArcGIS Online inside
    your custom application. You''ll see a code example illustrating some of these
    topics as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll cover this entire function in two separate examples. For now we''ll
    examine the use of the `getItem()` method along with setting up callback functions
    for success or failure. These lines of code are highlighted in the preceding code
    example. In the first line of code, we create a variable called `agoId` and assign
    it the webmap ID that we''d like to use. Next we call `getItem()`, passing in
    the `agoId` variable containing our webmap ID. This creates a new `dojo`/`Deferred`
    object, which we assign to a variable called `itemDeferred`. Using this object,
    we can then create `success` and `error` callback functions. The `success` function,
    called `addCallback` is passed an `itemInfo` object that we''ll use to create
    our map. We''ll cover the actual creation of the map in the next section. In the
    event of some type of error condition, the `addErrback` function would be called.
    Now let''s see how the map is created. The highlighted lines of the following
    code snippet illustrate the creation of the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `createMap()` method is used to actually create the map from ArcGIS Online.
    This method takes an instance of `itemInfo`, which is returned from a successful
    call to `getItem()`; or, you can simply provide the webmap ID. As with any map
    that you create with the ArcGIS Server API for JavaScript, you also need to provide
    a reference to a `<div>` container that will hold the map and any optional map
    options that you'd like to provide. Just as with the `getItem()` method we examined
    earlier, `createMap()` also returns a `dojo`/`Deferred` object that you can use
    to assign success and error callback functions. The success function accepts a
    `response` object, which contains the `map` property that we use to retrieve the
    actual map. The error function runs when an error that would prevent the creation
    of the map occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ArcGIS Online maps to your applications with JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An alternative to creating a map using the webmap ID is to create a map using
    a JSON object that is a representation of the web map. This can be useful in situations
    where the application will not have access to ArcGIS Online. Take a look at the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, specify the layers that make up the map. In the preceding snippet, the
    World Terrain basemap from ArcGIS Online is added along with an overlay layer
    that adds additional information to the map such as boundaries, cities, water
    features and landmarks, and roads. An operational layer is added that displays
    U.S. census data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once `webmap` is defined, use `createMap()` to build a map from the definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Time to practice with ArcGIS Online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, you will learn how to integrate ArcGIS Online maps into your
    applications. This simple application will display a public map of supermarket
    access in the U.S., pulled from ArcGIS Online. This map shows data for the entire
    U.S. The following screenshot illustrates this map. The supermarkets included
    in the analysis have annual sales of $1 million or more. The population in poverty
    is represented by taking the block group poverty rate (for example, 10 percent)
    from the census and symbolizing each block in that block group based on that percentage.
    Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to practice with ArcGIS Online](graphics/7965_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The green dots represent populations in poverty who live within one mile of
    a supermarket. The red dots represent the population in poverty that live beyond
    a one mile walk to a supermarket, but may live within a 10 minute drive, assuming
    they have access to a car. The grey dots represent the total population in a given
    area. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin coding the application, let's explore ArcGIS Online and see
    how you can find maps and retrieve their unique identifiers. Open a web browser
    and go to [http://arcgis.com](http://arcgis.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, type `Supermarket` as shown in the following screenshot:![Time
    to practice with ArcGIS Online](graphics/7965_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will return a list of results. We're going to add the **Supermarket Access
    Map** result to our application:![Time to practice with ArcGIS Online](graphics/7965_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Open** link under the thumbnail image of the map.![Time to practice
    with ArcGIS Online](graphics/7965_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open the map in the ArcGIS Online viewer. You'll want to copy the
    web map number as shown in the following screenshot. I would suggest either writing
    the number down somewhere or copying and pasting to the Notepad. This is a unique
    ID for the map:![Time to practice with ArcGIS Online](graphics/7965_11_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following references for the objects that we''ll use in this exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this simple example, we''re going to hardcode the webmap ID into the application.
    Inside the `require()` function, create a new variable called `agoId` and assign
    it the webmap ID you obtained as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the last two steps in this exercise, we will deal with the `arcgisUtils.getItem()`
    and `arcgisUtils.createMap()` methods. Both these methods return what is known
    as a `Dojo`/`Deferred` object. You need to have a basic understanding of `Deferred`
    objects, or the code won''t make a lot of sense. The `dojo`/`Deferred` object
    is built specifically for tasks that may not complete immediately. It allows you
    to define success and failure callback functions that will execute when the task
    does complete. A success callback function will be called by `Deferred.addCallback()`,
    while a failure function will take the form `Deferred.errCallback()`. In the case
    of `getItem()`, a successful completion will pass in an `itemInfo` object to the
    success function. This `itemInfo` object will be used to create the map from ArcGIS
    Online inside your custom application. A failure to complete due to some reason
    will result in the generation of an error being passed to the `Deferred.addErrback()`
    function. Add the following code block to your application and then we''ll discuss
    its details further:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the first line of code, we call the `getItem()` function, passing in the
    `agoId` variable, which references the **Supermarket Access Map** from ArcGIS
    Online. This method returns a `Dojo`/`Deferred` object, which is stored in a variable
    called `itemDeferred`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getItem()` function gets details about the ArcGIS Online item (webmap).
    The object passed back to the callback is a generic object with the following
    specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Assuming that the call to `getItem()` was successful, this generic item object
    is then passed into the `addCallback()` function. Inside the callback function,
    we then make a call to the `getMap()` method, passing in the `itemInfo` object,
    a reference to the map container, and any optional parameters that define the
    map functionality. The map parameters in this case include the presence of a navigation
    slider and navigation buttons. The `getMap()` method then returns another `Dojo`/`Deferred`
    object, which is stored in the `mapDeferred` variable. In the next step, you'll
    define the code blocks that handle the `Deferred` object that will be passed back.
  prefs: []
  type: TYPE_NORMAL
- en: 'The object returned to the `mapDeferred.addCallback()` function will take the
    following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to handle the information returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The success function (`mapDeferred.addCallback`) pulls the map from the response
    and assigns it to the map container.
  prefs: []
  type: TYPE_NORMAL
- en: You may want to review the solution file (`arcgisdotcom.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on the **Run** button, you should see the following map. If not,
    you may need to recheck your code for accuracy:![Time to practice with ArcGIS
    Online](graphics/7965_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ArcGIS Online is becoming increasingly important as a platform for creating
    and sharing maps and other resources. As a developer, you can integrate these
    maps into your custom applications. Each map has a unique identifier that you
    can use to pull the map into your custom application developed with ArcGIS Server
    and the JavaScript API. Because it can take some time to return these maps from
    ArcGIS Online, the `getItem()` and `createMap()` methods return `Dojo`/`Deferred`
    objects, which provide callback functions for both success and failure. Once the
    maps have been successfully obtained from ArcGIS Online, they can then be presented
    in your application just like any other map service. In the next chapter, you
    will learn how to use the ArcGIS API in JavaScript for mobile applications.
  prefs: []
  type: TYPE_NORMAL
