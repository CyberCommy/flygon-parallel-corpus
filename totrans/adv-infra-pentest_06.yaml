- en: Exploiting Git and Continuous Integration Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous integration** (**CI**) and **Continuous delivery** (**CD**) are
    becoming two major parts of modern software development. This chapter is an amazing
    opportunity to discover how to secure CI servers. We are going to start with refreshers
    about software development methodologies and CI. In addition to learning how to
    build a CI environment from scratch, we will discover what it takes to secure
    CI and CD pipelines.'
  prefs: []
  type: TYPE_NORMAL
- en: Software development methodologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A software project, like any project, needs to go through well-defined steps
    to be well-managed. In order to ensure efficient project management, a software
    development project requires a number of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirements**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Design**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Implementation**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Verification**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Maintenance**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The steps are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous steps are carried out through different methods, according to
    business requirements. There are many development methodologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Waterfall methodology:** This is a linear and sequential  methodology; there
    is no turning back in it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prototyping methodology:** In this methodology, the product is built and
    tested again and again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spiral methodology:** This methodology is risky and costly to use as it is
    done by iterating the development processes (objectives identification, alternatives,
    constraints, and planning).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile methodologies: **Agile methodologies are methods based on iterating
    and incrementing, which creates a flexible and a rapidly adaptive environment.
    There are many well-known agile methods, such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Crystal:** This methodology is based on people communications and interactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scrum:** This is an  agile methodology (there are even some experts who are
    considering it as an important part in agile movement and not an agile methodology)
    for managing software development, by dividing the project into actions during 
    specific time periods called **sprints**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extreme Programming** (**XP**): This includes short development cycles and
    is aligned with customer needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feature-Driven Development** (**FDD**): This is a features- and client-centric
    methodology.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agile development methodologies are less risky than other classic methodologies.
    The following graph shows the Agile development cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CI is a software development practice where developers have the chance to integrate
    their code many times a day before waiting for the end of the project. Nowadays,
    CI is a key practice in every software project. These frequent check-ins solve
    the classic integration headaches, and they allow developers and CI adopters the
    following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Error detection in a short period of time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting and locating issues easily
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivering software products faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI adoption is a major step for avoiding tense integrations, and it delivers
    software in time because inaccurate time and effort estimates are main causes
    of a failed project, in addition to the lack of effective communication at all
    levels. CI is based on automation. Automation is an integral aspect of CI. Thus,
    automation of the tests will ensure faster development and in product-to-market time.
  prefs: []
  type: TYPE_NORMAL
- en: Types of tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed before, automating tasks is a necessity in CI. You can perform
    many types of test, and not necessarily all of them at once. According to a test
    automation strategy introduced by Mike Cohn, tests can be represented by the following
    pyramid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.gif)'
  prefs: []
  type: TYPE_IMG
- en: '**Unit tests** are narrow in scope and typically verify the behavior of individual
    methods or functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integration tests** make sure that multiple components behave correctly together.
    This can involve several classes, as well as testing the integration with other
    services.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Acceptance tests** are similar to the integration tests, but they focus on
    the business cases rather than the components themselves.'
  prefs: []
  type: TYPE_NORMAL
- en: '**UI tests** will make sure that the application functions correctly from a
    user perspective.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following summarizes the CI environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Continuous integration versus continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**C****I** is a subset of **CD**. In the CD process, we add an extra layer
    that automates the delivery during the release process. This additional step ensures
    that even after the release of the product and the delivery to the client, you
    can make new changes quickly based on a predefined schedule (daily, weekly, monthly,
    and so on) according to your business requirements. If all the tests are successful,
    the new changes will be deployed automatically, which speeds up the release of
    a product to your customers in an efficient way.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To accelerate the process, you can add a further step called Continuous deployment.
    The following diagram shows the three operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DevOps** is an enhanced practice that enables collaboration between developers
    and operation managers during the entire product life cycle. It is a set of tools
    and mindset principles implemented for successfully building a communication channel
    between the two parties. You can have a clearer understanding by looking at the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Continuous integration with GitHub and Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have had an overview of development methodologies and the different product
    life cycle processes. Now let''s learn how to build a real-world CI environment
    using GitHub and the Jenkins CI server, illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins is an open source automation server. Thanks to its ability to automate
    tasks, it can perform CI. You can download it from [https://jenkins.io/:](https://jenkins.io/)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the demonstration, we are going to use an Ubuntu 16.04 machine. To install
    Jenkins, you need to add the repository key, add the Jenkins Debian package repository
    to the `sources.list` file using the `echo` command, and update the `sources.list`
    file by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, install Jenkins using the `apt-get install Jenkins` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can check whether the Jenkins service is running by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Open port `8080` for Jenkins by typing `sudo ufw allow 8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `https://www.<your domain/IP here>.com:8080` and complete the required
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your plugin mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create an Admin User, save, and we are done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Voila!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00191.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new item and complete the configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Continuous integration attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like any modern organization, precious assets, continuous integrations, and
    CD servers are high targets because they represent good entry points for compromising
    production systems. There are many dangerous attacks that threaten CI servers.
    The following are some examples of CI/CD server attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse shell using CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unauthorized commit to master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins-CI Script-Console Java Execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration server penetration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing CI and CD servers is essential. Establishing security controls is critical
    to securing the pipelines, as they are a bridge between the source code and the
    production servers.
  prefs: []
  type: TYPE_NORMAL
- en: Rotten Apple project for testing continuous integration  or continuous delivery
    system security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Rotten Apple project is an open source project developed with the aim of
    giving developers and penetration testers an easy and efficient experience when
    testing CI servers, by delivering various features and capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: You can clone the project from its GitHub repository by typing `sudo git clone
    https://github.com/claudijd/rotten_apple.   `
  prefs: []
  type: TYPE_NORMAL
- en: Continuous security with Zed Attack Proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Zed Attack Proxy** (**ZAP**), shown here, is a well-known security open source
    tool. It comes with various useful capabilities for penetration testers. ZAP can
    play a huge role as an additional CI security layer. In other words, it could
    be a continuous security layer for a web application. ZAP and Jenkins deliver
    the possibility of experiencing an additional component. Then, you are not delivering
    a software project in time, but you are enhancing the security of the CI/DI pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Thanks to a ZAP Jenkins plugin, you can enhance the security of a CI environment.
    After the tests, ZAP will generate a report in different formats (XHTML, XML,
    and JSON).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the ZAP plugin, you can use the web interface: go to `manage Jenkins
    -> manage plugins`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the Filter bar to search for ZAP, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Install without restart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the job and select the Run OWASP ZAP proxy in the Build options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Complete the required configuration and finally build the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '>![](img/00197.jpeg)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was an overview of the hidden power of CI servers and their benefits
    for enterprises. Thus, we discovered how to build a CI environment step by step
    and learned what it takes to secure CI/CD servers. The next chapter will take
    you on an intensive journey where you will learn how Metasploit and PowerShell
    are used to attack organization infrastructures.
  prefs: []
  type: TYPE_NORMAL
