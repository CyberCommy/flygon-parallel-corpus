- en: Multimedia Viewers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to upload and download files through
    cloud storage. Now, in this chapter, we are going to learn how to open these files,
    specifically media files such as images, music, and videos, using Qt's multimedia
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the multimedia module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image viewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The music player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The video player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the multimedia module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using the multimedia module again, which we covered
    previously in [Chapter 9](8a75976e-c1e9-4846-8fad-62cffff8b917.xhtml), *The Camera
    Module*. However, this time we will be using some other parts of the module, so
    I thought it would be a good idea to dissect the module and see what's inside
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting the module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The multimedia module is a really large module that consists of many different
    parts, that provide very different features and functionality. The main categories
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do note that classes that handle image formats, such as `QImage`, `QPixmap`,
    and so on, are not a part of the multimedia module but rather the GUI module.
    This is because they are an important part of the GUI that cannot be separated.
    Despite this, we will still cover the `QImage` class within this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under each category are subcategories that look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Audio:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio recorder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Video:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video recorder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video playlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Camera:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera viewfinder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera image capture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera video recorder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Radio:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radio tuner (for devices that support analog radio)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the classes is designed to fulfill a different purpose. For example,
    the `QSoundEffect` is used for playing low latency audio files (such as WAV files).
    `QAudioOutput`, on the other hand, outputs raw audio data to a specific audio
    device, which gives you low-level control over your audio output. Finally, the
    `QMediaPlayer` is a high-level audio (and video) player that supports many different
    high-latency audio formats. You must understand the differences between all the
    classes before choosing the right one for your project.
  prefs: []
  type: TYPE_NORMAL
- en: The multimedia module in Qt is such a huge beast that often confuses newcomers,
    but can be advantageous if you know which to choose from. Another issue with the
    multimedia module is that it may or may not work on your target platform. This
    is because underneath all these classes are native implementations for specific
    platforms. If a particular platform does not support a feature, or there is not
    yet an implementation for it, then you won't be able to use those functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information regarding the different classes provided by Qt''s multimedia
    module, please visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://doc.qt.io/qt-5.10/qtmultimedia-index.html](https://doc.qt.io/qt-5.10/qtmultimedia-index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The image viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Digital images have become an important aspect of our daily life. Whether it's
    a selfie, prom night photo, or a funny meme, we spend a lot of our time looking
    at digital images. In the following section, we will learn how to create our own
    image viewer using Qt and C++.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a user interface for the image viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started with creating our first multimedia program. In this section,
    we will create an image viewer, which, as its name implies, opens up an image
    file and displays it on the window:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's open up Qt Creator and create a new Qt Widgets Application project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, open up `mainwindow.ui` and add a `Label` (name it as `imageDisplay`)
    to the central widget, which will serve as the canvas for rendering our image.
    Then, add a layout to the centralWidget by selecting it and pressing Layout Vertically,
    located on top of the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e2e8370-e62f-4fe3-a04e-3b95358c4be8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can remove the tool bar and status bar to give space to the `Label`. Also,
    set the layout margins of the central widget to `0`:![](img/f69e4fd6-cecc-4275-b956-e6399396412e.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, double-click on the menu bar and add a File action, followed by
    Open File underneath it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cb08727-5a95-4356-8c66-787f8a8a9aeb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, under the Action Editor, right-click on the Open File action and select
    Go to slot...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b5e3338b-a8c9-4402-af8c-a5f030de6057.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A window will pop out and ask you to pick a signal, so choose triggered() and
    click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9f8f7e1-2970-42cf-adf4-726ef91fae7b.png)'
  prefs: []
  type: TYPE_IMG
- en: A `slot` function will be created for you automatically, but we will keep that
    for the next section. We are done with the user interface, and it is really that
    simple. Next, let's move on and start writing our code!
  prefs: []
  type: TYPE_NORMAL
- en: Writing C++ code for image viewers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open up `mainwindow.h` and add the following headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following variable, called `imageBuffer`, which will serve as
    the pointer that points to the actual image data before rescaling. Then, add the
    functions as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up `mainwindow.cpp` and initialize the `imageBuffer` variable in
    the class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add the following code to the `slot` function Qt created for us
    in the previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code basically opens up the file-selection dialog, and it creates
    a `QPixmap` object with the selected image file. After all that is done, it will
    call the `resizeImage()` function, which looks like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What the `resizeImage()` function does is simply copy the image data from the
    `imageBuffer` variable and resize the image to fit the window size before displaying
    it on the window's canvas. You could be opening an image that is way larger than
    your screen resolution, and we don't want the image to get cropped when opening
    such a large image file.
  prefs: []
  type: TYPE_NORMAL
- en: The reason why we use the `imageBuffer` variable is so that we can keep a copy
    of the original data and not affect the image quality by resizing it many times.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we also call this `resizeImage()` function within the `paintEvent()`
    function. Whenever the main window is being resized or restored from a minimized
    state, `paintEvent()` will automatically get called, and so will the `resizeImage()`
    function, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. If you build and run the project now, you should get a pretty neat
    image viewer that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fca8f4b0-48cb-4037-ba35-3518c6beac66.png)'
  prefs: []
  type: TYPE_IMG
- en: The music player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will learn how to build our own custom music player
    using Qt and C++.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a user interface for music players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s move on to the next project. In this project, we will be building an
    audio player using Qt. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous project, we will be creating a `Qt Widgets Application`
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up the `project file (.pro)`, and add in the `multimedia` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We added the `multimedia` text so that Qt includes classes related to the multimedia
    module in our project. Next, open up `mainwindow.ui`, and refer to the following
    screenshot to construct the user interface:![](img/e87dedd9-939f-4e7d-a19f-3bb2bad50497.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We basically added a Labelat the top, followed by a Horizontal Slider and another
    Labelto show the current time of the audio. After that, we added three Push Buttons
    at the bottom for the Play button, Pause button, and Stop button. Located at the
    right-hand side of these buttons is another Horizontal Layout that controls the
    audio volume.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all the Push Buttons have no icon for now, and it's very confusing
    which button is for what purpose.
  prefs: []
  type: TYPE_NORMAL
- en: To add icons to the buttons, let's go to File | New File or Project and select
    Qt Resource File under the Qt category. Then, create a prefix called `icons`,
    and add the icon images to the prefix:![](img/d2370cbd-83c0-45ae-99b9-47fd81a252d7.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, add those icons to the Push Button by setting its icon property
    and selecting Choose Resource.... Then, set the `pixmap` property of the label,
    located beside the volume slider, as the volume icon:![](img/ab91665f-5ce4-4f6b-b1f4-9b2772ab7fa2.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have added the icons to the Push Button and Label, the user interface
    should look a lot better:![](img/cd321651-a9b0-45bb-8e91-72c15d5d11b3.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're done with the user interface; let's move on to the programming part!
  prefs: []
  type: TYPE_NORMAL
- en: Writing C++ code for music players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To write the C++ code for music players, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First and foremost, open up `mainwindow.h` and add the following headers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add the `player` variable, which is a `QMediaPlayer` pointer. Then,
    declare the functions that we''re going to define later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up `mainwindow.cpp` and initialize the player variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `QMediaPlayer` class is the main class that is used by our application to
    play any audio file loaded by it. Thus, we need to know the state of the audio
    playing and its current position. We can get this information by connecting its
    `stateChanged()` and `positionChanged()` signals to our custom `slot` functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `stateChanged()` signal allows us to obtain information about the current
    state of the audio playing. Then, we enable and disable the Push Button accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the `positionChanged()` and `slot` functions, we use them to set the
    timeline slider, as well as the timer display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done, open up `mainwindow.ui` and right-click on each of the Push
    Buttons, and select Go to slot... followed by selecting the `clicked()` signal.
    This will generate a `slot` function for each of the Push Buttons. The code for
    these `slot` functions is very simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After that, right-click on both of the Horizontal Sliders, and select Go to
    slot... followed by choosing the `sliderMoved()` signal, and click OK:![](img/e66e337a-4d88-42fb-a93e-7499babbe61d.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `sliderMoved()` signal will be called whenever the user drags the slider
    to change its position. We need to send this position to the media player and
    tell it to adjust the audio volume or change the current audio position. Do be
    cautious not to set the default position of your volume slider to zero. Consider
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to add File and Open File actions to the menu bar, just like we
    did in the previous example project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, right-click on the Open File action in the Action Editor and select Go
    to slot... After that, select `triggered()`, and let Qt generate a `slot` function
    for you. Add the following code to the `slot` function for audio file selection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding simply opens up a file-selection dialog that only accepts MP3
    and WAV files. You can add other formats too if you wish, but the supported formats
    vary between platforms; therefore, you should test it to make sure the format
    you want to use is supported.
  prefs: []
  type: TYPE_NORMAL
- en: After that, it will send the selected audio file to the media player for preloading.
    Then, we try to get the music's title from the metadata and display it on the
    `Labelwidget`. However, this feature (obtaining metadata) may or may not be supported
    on your platform, so just in case it won't show up, we replace it with the audio
    file name. Lastly, we enable the play button and automatically start playing the
    music.
  prefs: []
  type: TYPE_NORMAL
- en: That's it. If you build and run the project now, you should be able to get a
    simple but fully functional music player!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7da6ec50-1bc9-4ef7-8120-2c9b755c11fd.png)'
  prefs: []
  type: TYPE_IMG
- en: The video player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have learned how to create an audio player. In this
    chapter, we will further improvise our program and create a video player using
    Qt and C++.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a user interface for video players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next example is that of the video player. Since `QMediaPlayer` also supports
    video output, we can use the same user interface and C++ code from the previous
    audio player example, and just make some minor changes to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open `project file (.pro)` and add in another keyword, called `multimediawidgets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up `mainwindow.ui` and add a Horizontal Layout (name it as `movieLayout`)
    above the timeline slider. After that, right-click on the layout and select Morph
    into | QFrame. We then set its sizePolicy property to Expanding, Expanding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0c92ef1-df28-4145-86a6-361aae7a70db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, we set the QFrame''s background to black color by setting its `styleSheet`
    property, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The user interface should look something like the following, and we''re done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eebc0672-a33c-47c9-98f3-237b4dc4e74c.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing C++ code for video players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To write the C++ code for video players, we perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `mainwindow.h`, there aren''t many changes to it. All we need to do is
    to include `QVideoWidget` in the header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open `mainwindow.cpp`. We must define a `QVideoWidget` object and set
    it as the video output target, before adding it to the layout of the `QFrame`
    object we just added in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `slot` function thatgets called when the Open File action has been triggered,
    we simply change the file-selection dialog to accept only `MP4` and `MOV` formats.
    You can add in other video formats too if you wish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That's it. The rest of the code is literally the same as the audio player example.
    The main difference with this example is that we defined the video output widget,
    and Qt will handle the rest for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we build and run the project now, we should be getting a really slick video
    player, like what you see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45c1d750-a1a7-4261-8ce5-c7821acb069e.png)'
  prefs: []
  type: TYPE_IMG
- en: On a windows system, there was a case where the video player would throw an
    error. This problem is similar to the one reported here: [https://stackoverflow.com/questions/32436138/video-play-returns-directshowplayerservicedoseturlsource-unresolved-error-cod](https://stackoverflow.com/questions/32436138/video-play-returns-directshowplayerservicedoseturlsource-unresolved-error-cod)
  prefs: []
  type: TYPE_NORMAL
- en: To resolve this error, simply download and install the K-Lite_Codec_Pack which
    you can find here: [https://www.codecguide.com/download_k-lite_codec_pack_basic.htm](https://www.codecguide.com/download_k-lite_codec_pack_basic.htm).
    After this, the video should play like a charm!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to create our own multimedia players using
    Qt. What comes next is something quite different from our usual topics. In the
    following chapter, we will learn how to use QtQuick and QML to create touchscreen-friendly,
    mobile-friendly, and graphics-oriented applications.
  prefs: []
  type: TYPE_NORMAL
