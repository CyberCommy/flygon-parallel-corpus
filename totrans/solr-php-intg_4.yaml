- en: Chapter 4. Advanced Queries – Filter Queries and Faceting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter starts by defining filter queries and their benefits compared
    to the normal search queries that we have used earlier. We will see how we can
    use filter queries in Solr with PHP and the Solarium library. We will then explore
    faceting in Solr. We will also see how PHP can be used to facet in Solr. We will
    explore faceting by field, faceting by query, and faceting by range. We will also
    look at faceting by using pivots. The topics that will be covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Filter queries and their benefits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing filter queries using PHP and Solarium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a filter query configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faceting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faceting by field, query, and range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faceting pivots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter queries and their benefits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filter queries are used to put a **filter** on the results from a Solr query
    without affecting the score. Suppose we are looking for all books that are in
    stock. The related query will be `q=cat:book AND inStock:true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Another way to handle the same query is by using filter queries. The query will
    change to `q=cat:book&fq=inStock:true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Though the results are the same, there are certain benefits of using filter
    queries. A filter query stores only document IDs. This makes it very fast to apply
    filters to include or exclude documents in a query. A normal query on the other
    hand has a complex scoring function causing reduced performance. Scoring or relevance
    calculation and ranking is not done on a filter query. Another benefit of using
    filter queries is that they are cached at Solr level resulting in an even better
    performance. It is recommended to use filter queries instead of normal queries.
  prefs: []
  type: TYPE_NORMAL
- en: Executing filter queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add a filter query to our existing query, first we need to create a filter
    query from our Solr query module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The string provided as a parameter to the `createFilterQuery()` function is
    used as *key* for the filter query. This key can be used to retrieve the filter
    query associated with this query. Once the filter query module is available, we
    can use the `setQuery()` function to set a filter query for this Solarium query.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding piece of code, we have created a filter query by the name
    of `Availability`. We will set the filter query for key `Availability` as `instock:true`
    and then execute the complete query as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once the resultset is available, it can be iterated over to get and process
    the results.
  prefs: []
  type: TYPE_NORMAL
- en: Let us check Solr logs and see the query that was sent to Solr.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can see the `fq` parameter `inStock:true` appended to the parameter list
    of our Solr query.
  prefs: []
  type: TYPE_NORMAL
- en: The `getFilterQuery(string $key)` function can be used to retrieve the filter
    query associated with a Solarium query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating filter query configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also pass filter query as a configuration parameter to the Solarium query
    using the `addFilterQuery()` function. For this, we need to first define the filter
    query as a configuration array and then add it to the Solarium query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Solr query created by the preceding configuration is similar to the one
    created earlier. The benefit of using filter query configuration is that we can
    define multiple standard filter queries as configurations and add them in our
    Solr query as required. The `addTag(String $tag)` and `addTags(array $tags)` functions
    are used to define tags in the filter queries. We can use these tags to exclude
    certain filter queries in facets. We will go through an example later.
  prefs: []
  type: TYPE_NORMAL
- en: Faceting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Faceted searches break up the search results into multiple categories, showing
    counts for each category. Faceting is used in searches to drill down into a subset
    of results from a query. To get an idea of how facets are helpful, let us go to
    [www.amazon.com](http://www.amazon.com) and search for mobile phones. We will
    see facets on the left-hand side such as brand, display size, and carrier. Once
    we select a facet to drill down, we will see more facets that will help us narrow
    down the phone we would like to purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Faceting is generally done on human readable text that is predefined such as
    location, price, and author name. It would not make sense tokenizing these fields.
    So, *facet fields* are kept separate from search and sorting fields in the Solr
    schema. They are also not converted to lowercase but are kept as they are. Faceting
    is done on indexed fields on Solr. So there is no need to store faceted fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solarium introduces the concept of **facetset**, which is one central component
    and can be used to create and manage facets and also set global facet options.
    Let us push the `books.csv` file from this chapter into the Solr index. We can
    use the same command that was used in [Chapter 2](ch02.html "Chapter 2. Inserting,
    Updating, and Deleting Documents from Solr"), *Inserting, Updating, and Deleting
    Documents from Solr*, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Facet by field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Faceting by field counts the number of occurrences of a term in a specific field.
    Let us create facets on **author** and **genre**. There are separate string fields
    in our Solr index for indexing facet-related strings without any tokenization.
    In this case, the fields are `author_s` and `genre_s`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fields ending with `_s` are dynamic fields defined in our Solr `schema.xml`.
    Dynamic fields defined as `*_s` match any field that ends in `_s` and all attributes
    in the field definition are applied on this field.
  prefs: []
  type: TYPE_NORMAL
- en: To create a facet on our `author_s` field, we need to get the `facetset` component
    from the Solarium query, create a `facet field` key and set the actual field using
    the facets that will be created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the number of facets to get using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Return all facets that have at least one term in them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Also return documents that do not have any value for the facet field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After executing the query, we will have to get the facets and counts by the
    facet field key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In addition, we can use the `setOffset(int $offset)` function to show faceting
    starting from this offset. The `setOffset(int $offset)` and `setLimit(int $limit)`
    functions can be used for pagination within facets.
  prefs: []
  type: TYPE_NORMAL
- en: On going through the Solr logs, we can see the query that was executed on Solr.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The parameter `facet=true` is passed to enable faceting. Fields on which we
    need faceting are passed as multiple `facet.field` values. Other parameters that
    we can see here are `facet.missing`, `facet.mincount`, and `facet.limit`. To check
    out the Solr response to facet query, let us copy the query from logs, paste it
    to our Solr URL, and remove the `omitHeaders` and `wt` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Facet by field](graphics/4920_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Facets are on fields – author and genre. Counts for different authors and genres
    are visible.
  prefs: []
  type: TYPE_NORMAL
- en: Facet by query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use a facet query in addition to the normal query to get counts with
    respect to the facet query. The counts are not affected by the main query and
    filter queries can be excluded from it. Let's see the code to get counts of facets
    where `genre` is `fantasy` and also see an example of excluding a filter query.
  prefs: []
  type: TYPE_NORMAL
- en: Let us first create a query to select all books in our index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Create a filter query for books that are in stock and tag it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the `facetset` component from our query using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Create a facet by query to count the number of books of a particular genre.
    Also, exclude the filter query we added earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us add another facet query where the filter query is not excluded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: After the query is executed, we can get the count from the resultset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here the count for the `fantasy` facet contains books that are not in stock
    as well because we had excluded the filter query for getting books that are in
    stock. Whereas, the `fiction` facet contains only books that are in stock as the
    filter query has not been excluded in this facet query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: From Solr logs, we can see that the parameter being passed for creating facets
    using query is `facet.query`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Facet by query](graphics/4920_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Facet counts for queries on genre fantasy and fiction
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create multiple facet queries for getting counts of different query
    facets. But it is easier to use the **facet multiquery** feature provided by Solarium.
    Let us see the code to get facet counts for `genre` as `fantasy` and `fiction`
    using the facet multiquery feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here is the code to get the facet counts for all facet queries after executing
    the main query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The Solr query created using `facetMultiQuery` and `facetQuery` is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Facet by range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Faceting can also be done on range basis. So for example, we can create facet
    counts of books for every two dollars. Using range faceting, we can give counts
    of books with prices between 0-2 dollars and from 2-4 dollars and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we start faceting from price `0` dollars and up to `16`
    dollars. The following code will be used to display the range facets along with
    their counts after executing the query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Facet by range](graphics/4920_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Facet by range output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The parameter used in the Solr query in this case is `facet.range`. It is possible
    to provide more than one faceting parameters together. For example, we can facet
    by query and facet by range in a single query.
  prefs: []
  type: TYPE_NORMAL
- en: Facet by pivot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the different ways of creating facets, there is a concept of
    **facet by pivots** that is provided by Solr and is exposed via Solarium. Pivot
    faceting allows us to create facets within the results of the parent facet. The
    input to pivot faceting is a set of fields to pivot on. Multiple fields create
    multiple sections in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create a facet pivot on `genre` and `availability` (in
    stock):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: To display the pivots, we have to get all facets from the resultset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: And for each facet, get the field, value, and count for the facet and more facet
    pivots within the facet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Also get all pivots inside this facet and process them in the same fashion using
    recursive calls if required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This feature is very helpful in creating a complete categorization of data as
    facets at different levels. From Solr query logs it is seen that the parameter
    used here is `facet.pivot`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: On executing the same query on the Solr interface, we get the following output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![Facet by pivot](graphics/4920_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first level of categorization happens on the genre field. Inside the genre,
    the second level of categorization happens on the inStock field.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw advanced query functionalities of Solr. We defined filter
    queries and saw the benefits of using filter queries instead of normal queries.
    We saw how to do faceting on Solr using PHP and Solarium. We saw different ways
    to facet results as facets by field, facets by query, facets by range and creating
    facet pivots. We also saw the actual queries being executed on Solr and in some
    cases executed the query on Solr and saw the results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore highlighting of search results using PHP
    and Solr.
  prefs: []
  type: TYPE_NORMAL
