- en: Ramping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to be a great coder, you need to ramp up and learn about things that
    will help you become a better developer. In this chapter, we're going to look
    at text editors that will speed up our workflow. We'll then look at a *CSS reset*,
    which resets the default browser such that its styling is reduced to nothing,
    and the built-in browser developer tools to help us troubleshoot our code. Then,
    we'll look at how to rename elements with classes and IDs as well as qualify our
    selectors using descendant selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Text editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML, CSS, and JavaScript can be written in any text-editing application. This
    is one of the great things about the three core web languages. The problem is
    that writing HTML, CSS, and JavaScript is extremely error-prone. For CSS, commas,
    semicolons, and curly braces need to be typed in the right spots. A specific syntax
    needs to be adhered to perfectly in most cases, else your page won''t render as
    expected. The following is an illustration of TextEdit for Mac. It''s similar
    in nature to Notepad for Windows, in that it doesn''t have many features that
    make writing code easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s write some code in TextEdit anyway. We start with the HTML doc type.
    Post this, we add an HTML opening and closing tag and then the `head` tag and
    inside that the `title` tag. You''ll soon realize that it''s a pretty tedious
    process, that is, writing code in TextEdit. We can write code here, but we''re
    really getting nothing out of it, no syntax highlighting, and no other assistance
    whatsoever:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Luckily, a good text editor can really do the hard work for you. In this chapter,
    we'll look at such a text editor, namely Sublime Text 3, and some of the nice
    features it has to help you write HTML and CSS even better. First, we'll look
    at snippets, then we'll look at syntax highlighting, followed by code suggestions
    and multiple cursors. Sublime Text 3 is my text editor of choice as it is fast
    and easy to use. One of the things I love is how easy and natural it allows me
    to write code.
  prefs: []
  type: TYPE_NORMAL
- en: Snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Sublime Text 3, you simply need to type in `html:5` in your HTML file and
    hit the *Tab* key to get a basic boilerplate for your HTML. So, all of the code
    that we had to type in TextEdit can be quickly written for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another thing is when you type in `div` and hit the *Tab* key, you can have
    `div` expanded with the closing tag created automatically and the cursor right
    in between the opening and closing `div` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can do this for any HTML element; just type in something like `p` and hit
    *Tab* and get your cursor right in between:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That is beautiful! It's really nice to have something that simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can take this one step further and install the Emmet package. I highly encourage
    you to do so. This will provide you with even better code snippets. In fact, the
    `html:5` code snippet that produced the basic HTML boilerplate before, is actually
    an Emmet snippet; it doesn''t come standard with Sublime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The ability to install packages, which are basically plugins, in Sublime is
    another reason why it''s so powerful. There''s a package for everything you need
    that doesn''t come out of the box with Sublime. So let''s say you need syntax
    highlighting for ColdFusion code; there''s a package available that will do this
    for you. I have an article on my site that covers package installation, which
    is pretty simple. Just check it out at [richfinelli.com/installing-sublime-package-manager/](http://www.richfinelli.com/installing-sublime-package-manager/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By far, this is the best package, and the first thing you should install is
    Emmet. With Emmet, say you go to your HTML and type in something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will expand to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `$` expanded in to 1 for the first `a`, and 2 for second, and
    so on, which can be very useful. Writing HTML quickly using a CSS selector-like
    syntax is just one of the nice things that Emmet allows you to do.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple cursors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keeping the `div` tag we just expanded with Emmet, let''s look at Sublime''s
    multiple cursors feature. Since we had five lists, we may need to type in the
    same thing in each one. If you hold down your *cmd* key and click on separate
    lines of code, you can actually create multiple cursors. As illustrated, you can
    now type the same thing in five different spots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s say you want to type in some placeholder text where you will have
    multiple cursors. First, type in "lorem5", or "lorem" followed by any other number,
    and you''ll get than many words of placeholder "lorem ipsum" text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, just hit *Tab*, and it will automatically expand to, in our case, 5 words
    of lorem ipsum text, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Syntax highlighting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s switch over to our CSS for a second. Another feature that will make
    our job much easier is syntax highlighting. Notice how the rule sets all follow
    a color scheme. The selectors are red, properties are blue, and the values are
    purple. They will start getting embedded into your subconscious mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What Sublime Text does for you is it subtly points out your mistakes. I often
    type in a semicolon where a colon is required. This will cause your CSS to not
    work. Syntax highlighting, though, tells me that something is wrong because, as
    shown in the following screenshot, the color scheme changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s easy to spot a color difference but difficult to see the difference between
    a colon and a semicolon if you are not looking for it:'
  prefs: []
  type: TYPE_NORMAL
- en: Code suggestion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some cool features available, such as code completion and code suggestion.
    So if you start typing in something like `border-`, you''ll get all the different
    properties that start with `border`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, I''m looking for `border-radius`, so I can just go to that suggestion
    and hit *Tab* and it automatically completes the task for me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There are so many other reasons why I love this text editor that I won't go
    into. It comes at a cost of $70 but has an unlimited free trial that you can use
    to determine whether or not you like itâ€”trust me, you will. Now I'm not saying
    that Sublime is the only text editor you should use or try. There are other good
    editors as well, like Visual Studio Code, Atom, Adobe Brackets, and others. If
    you're using something else that does most of the things I'm talking about and
    it works for you, then stick with it. Just make sure that you don't use Notepad
    or TextEdit to write your code as that will be very painful and unproductive.
  prefs: []
  type: TYPE_NORMAL
- en: A good text editor is essential for writing good HTML and CSS and will make
    our lives much easier. Next, you're going to learn about CSS resets and how they
    help us create a very good starting point for writing CSS.
  prefs: []
  type: TYPE_NORMAL
- en: CSS reset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, you learned about the power of a good text editor. In this
    section, we're going to use that text editor to explore something called a *CSS
    reset*. There's a lot of pieces to starting a website that need to be in place
    and are typically part of your website boilerplate. I call these pieces your "base
    layer". A big part of this *base layer* is the CSS reset. A reset allows you to
    eliminate browser inconsistencies with regard to default browser styling and eliminate
    all default browser styles in general. It allows *you* to more easily provide
    *your* handcrafted styles using CSS. In this section, we're going to first load
    in a CSS reset, then examine that reset and see what it's doing. Finally, we'll
    add to and customize the reset to fit our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Loading Eric Meyer's CSS reset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few different resets to choose from, but I''ve been hooked to the
    CSS guru Eric Meyer''s reset. Let''s go grab it from [meyerweb.com/eric/tools/css/reset/](http://meyerweb.com/eric/tools/css/reset/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, scroll down a little bit to find the top of the reset, then just highlight
    all of the code until you get to the closing curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch over to Sublime, open your style sheet, and paste it in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we save this, let''s open the `index.html` file for our site. One of
    the things you can do with Sublime is this: if you right-click on your HTML file,
    you can select Open in Browser and it will open your default browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In my case, it''s Chrome. So this is what the site will look like without the
    reset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the next screenshot, all of the CSS we added actually removed
    the little bit of styling we had. This is why we call it a reset. All text looks
    the sameâ€”no margin, no padding, no nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Examining the CSS reset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up at the very top of our style sheet, there is a CSS comment that credits
    Eric Meyer for the reset. We''ll leave that in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we have the bulk of the reset. This huge chunk of code is vaguely a reminder
    of the rule set you learned about in [Chapter 1](part0021.html#K0RQ0-a72d261cc09f412988422c8a08f12cd5),
    *CSS Foundations*. It''s really just a rule set with a very long selector. The
    selector has just about every HTML element separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that all these elements are going to receive the same styles from
    the declaration block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the first three declarations of this declaration block, `margin`,
    `padding`, and `border` are set to `0`. Using the value of `0` is the same as
    using `0px` just with two less characters. You just don't need to specify pixels
    if the value is zero. This removes the default margin, padding, and border from
    all the elements. Right below those declarations, we have the `font-size` property,
    which is `100%`. This line is an instruction to make all the fonts browser-default,
    which basically means `16px` since the default browser font size for most desktop
    browsers is `16px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below this declaration block, we have the new HTML5 elements whose display
    we set to block. This allows some older browsers that don''t recognize these new
    elements to now consider them block-level elements. This allows HTML5 to work
    in some older browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have a new selector and declaration that sets the `line-height` to
    `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `line-height` property cascades downward, meaning if we set it on an element,
    for example, `body`, it will be inherited down to all the other elements it contains.
    The value of `1` is a unit-less value, so `1` will be equal to the size of the
    font. The value of `1.2` would be 1.2 times the size of the font. So, if the `font-size`
    is `16px` and `line-height` is `1`, then the `line-height` will be equivalent
    to `16px`. If `line-height` is set to `2` and your font size is `16px`, then `line-height`
    will be equivalent to `32px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next in the style sheet are the ordered and unordered lists, where we remove
    the bullet point and numbers from `ul`, `ol` and by way of cascade, `li`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Beneath this, you will see that the reset has set some defaults for the `blockquote`
    and `q` elements. I find myself rarely using block quotes, and this reset is kind
    of long, so typically I get delete this section of the reset. But if you find
    yourself using these elements often, then keep it in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have 2 `table` properties being reset: `border-collapse` and `border-spacing`:
    which I''ve never dug into too deeply but ultimately handle some nuanced table
    inconsistencies that you''ll never see in any modern desktop browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is pretty much the anatomy of a CSS reset. This reset should be a part
    of your base layer of CSS that gets you started. We'll now look at how we can
    add to this and customize it.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the CSS reset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s update the `line-height` and `font-family` property on the `body` element,
    which will establish what is called "vertical rhythm" and make `Arial` the default
    `font-family` for all the elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then see how it affects the text, chiefly adding some vertical space
    between rows lines of text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Establishing these defaults early for everything is nice; that way, you don't
    have to describe `line-height` and `font-family` over and over again for each
    element throughout your CSS. Note that not all properties act like `font-family`
    and `line-height` and are inherited by child elements; only certain properties
    have this effect, mainly text-level properties behave like this. In this case,
    we set those properties on the `body` element, but they cascaded down to `h1`,
    `h2`, and our `p`, giving them all the `Arial` `font` and `line-height` of `1.4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''d like to add in a couple more rules sets to our reset. Let''s make some
    room down at the bottom of the reset. The first one I''d like to add is `clearfix`,
    as shown in the next piece of code. I''m not going to go into `clearfix` now.
    I''ll explain it in depth in [Chapter 3](part0056.html#1LCVG0-a72d261cc09f412988422c8a08f12cd5),
    *Creating a Page Layout with Floats*. This default is very helpful for clearing
    floats; we''re going to need it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing we''ll do is set the `max-width` for media elements to ensure
    responsive media. I''ll discuss this more in [Chapter 6](part0133.html#3UQQQ0-a72d261cc09f412988422c8a08f12cd5),
    *Becoming Responsive*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, I''d like to un-reset our `strong` and `b` elements and make sure
    that they *do* have a `font-weight` of `bold`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'So that''s it about the reset. Now, jumping over to our HTML, I want to elaborate
    on two more pieces of our base layer that aren''t in the reset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we have a piece of `clearfix` that handles `IE 7`, as shown in the following
    code. You don''t need to know exactly what this is doing, but you may want to
    know that it makes `clearfix` work in IE7\. If you''re not supporting older versions
    of IE, you can omit that part. Again, we''ll look at `clearfix` in detail in [Chapter
    3](part0056.html#1LCVG0-a72d261cc09f412988422c8a08f12cd5), *Creating a Page Layout
    with Floats*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we zoom in to this code, it happens to be an embedded stylesheet. You can
    see there is an opening and closing `style` tag with a rule set in between:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Outside of the embedded stylesheet, the line that precedes the opening `style`
    tag is what''s called an `IE` conditional comment, and it says this: "if lower
    than or equal to `IE 7`, see the rule below."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Underneath the rule set, we have a `script` pointing to the HTML5 Shiv library,
    which makes older versions of IE understand the newer HTML5 elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is also inside of an IE conditional comment, but it's targeting all versions
    of IE. Actually, IE 10 and higher don't support IE conditional comments anymore,
    so this script only supports IE9 and lower versions; however, it makes sure our
    HTML5 elements are supported in older browsers. Again, if you aren't supporting
    these older browsers, feel free to omit that as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we dissected our CSS resets and how to get your base layer
    ready for writing code. Now, let's take a look at the *Chrome DevTools* section.
  prefs: []
  type: TYPE_NORMAL
- en: Chrome DevTools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the CSS we have done so far has been fairly simple. Everything we did
    worked the first time we tried, and that doesn't always happen. Often, CSS doesn't
    work and I'm left wondering what I missed. Syntax highlighting in my editor, while
    helpful, doesn't stop me from overlooking mistakes. Usually, it's a tiny mistake
    that causes something not to work and it's hard to find the error and fix it.
    In this section, we'll simply look at how to open up DevTools. Then, we'll modify
    some CSS in the inspector and finally look at the console to find errors.
  prefs: []
  type: TYPE_NORMAL
- en: How to open developer tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To open up Chrome''s DevTools, all you need to do is right-click or *Ctrl*
    + click on any part of the page. You''ll get a contextual menu, as shown in the
    following screenshot. When you select the Inspect Element option, you get a whole
    new world of techie goodness:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What typically happens is DevTools will occupy the lower half of your screen.
    As you can see in the following screenshot, on the left-hand side, you have your
    HTML as rendered by the browser, technically referred to as the DOM. On the right-hand
    side, you will have all your styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you hover over something on the left-hand side, it gets highlighted at the
    top. So, if you hover over `h2` or click on it, it gets highlighted, as you can
    see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you hover over `<section>` or click on it, it gets highlighted at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Changing CSS inside the inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the right-hand side of the inspector, you will see all your styles for whatever
    element you have highlighted in the DOM. You can even click on any of those properties
    or values and change them. So if you click on `26px`, next to `font-size`, you
    can increase it to whatever you want. This is updated immediately in the browser,
    which is very cool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can even uncheck certain properties and see that change immediately. So,
    as you can see in the next screenshot, if you click on the `h2` element in the
    DOM and then uncheck color and margin bottom on the right-hand side, this change
    to the h2 element takes immediate effect. Simply recheck them to add them back:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the last elementâ€”in this case, `margin-bottom` and hit *Tab*,
    it will allow you to type in a new property and value. So add `margin-left` of
    `-40px` and see what it looks like; this moves this `h2` over `40px` to the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now these aren''t permanent changes. As soon as the browser is refreshed, these
    styles will disappear; however, you can copy this rule set and paste it into your
    code if you want to keep these changes we''re experimenting with. It even tells
    us where this rule set is currently located in the style sheet-line 86\. If you
    hover your mouse over that, it will tell you exactly where that file is in your
    website''s folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the console to find errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re just looking at the tip of the iceberg so far when it comes to what
    you can do with Chrome DevTools. For instance, sometimes adding an image can be
    tricky. So, let''s add the following image tag to the page by typing it into our
    HTML, above `h2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If we save this and refresh the site, we will see that the image just doesn''t
    show up, so there''s something wrong. Refreshing the page, a red error icon with
    the number one will show up in DevTools. As shown in the following screenshot,
    there''s an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To see what the error is, click on the Console tab. You''ll see that the `sharkey.png`
    file cannot be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is good information. It''s telling you it''s not a problem related to
    permissions. It''s not a 403; it just can''t find the file it''s looking for at
    this location. So one of the things I would do is open up my `images` folder and
    make sure that the image is in the folder, and in this case, let''s say that it
    is. There''s only one problem, though. The file it''s looking for is spelled differently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s looking for `sharkey`, S-H-A-R-K-E-Y, and the file is actually just S-H-A-R-K-Y,
    so that is easy enough to fix. Now that you know what''s wrong, you can just change
    the name in your HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you refresh the browser after saving this, this image should show up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So these two things, the element inspector and the console, can be extremely
    useful in experimenting with code and troubleshooting code. My biggest suggestion
    is if things aren't working as you expect them to with your HTML, CSS, and JavaScript,
    just open up DevTools and take a look under the hood. Chances are that pretty
    much all day, you'll have DevTools open. I should also add that Firefox, Safari,
    and IE have DevTools that all do similar tasks and can be just as useful for troubleshooting
    in those browsers. We've barely scratched the surface of what developer tools
    can do. Check out my blog post on troubleshooting HTML and CSS with the Chrome
    DevTools for more information; it is available at [www.richfinelli.com/troubleshooting-html-and-css](http://www.richfinelli.com/troubleshooting-html-and-css).
  prefs: []
  type: TYPE_NORMAL
- en: 'It explains how to create new selectors and how to access computed values instead
    of declared values, which is nice when debugging CSS rules and determining which
    rules take priority. It also walks you through the device emulation mode, among
    other things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to use Chrome DevTools, your ace in the hole for troubleshooting
    HTML and CSS. Next, you're going to learn how to rename elements, which is where
    a lot of the power of CSS really takes place.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming elements â€” classes and IDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Renaming elements is such a powerful feature of CSS. Let me set this up for
    you. So far, CSS has been good because we have been able to keep things consistent.
    All heading 1s are blue with a font size of 20 pixels, for instance, but what
    if you want your `h1` to look different? That's where renaming and classifying
    elements really becomes useful. In this section, you're going to learn about how
    to rename and style elements based on classes and IDs. We'll look at how this
    will pay off on our shark website, first with classes, followed by IDs.
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Look at the `index.html` file. You can see there are several HTML5 `<section>`
    tags throughout the page: one in the initial section, one in the secondary section,
    and one in the alternate section, making three all together. One of those is shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the second `<section>`, there are three `div` tags, each housing an
    `img`, `h2`, `p`, and an `a` tag. So there is nothing fancy about this HTML. The
    last section looks a lot like the first section; it just has `h1` and `h2` elements
    and a couple of paragraphs. Here''s the dilemma, though: we want `h1` at the bottom
    of the page to be different from the site''s main `h1` element. The solution is
    to add a class and a style based on this class. So, down in the alternative section,
    inside of the `h1` element, we''re going to add the class attribute. We''ll type
    `class=""` and enter any name or abbreviation we think is fitting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll tell you right now the hardest job in programming and computer science
    is naming things. This name should be meaningful enough so that if another person
    comes across your code and were to pick up from where you left, they won''t be
    completely lost. So, in our case, we''ll use `alt-headline`. Classes are case-sensitive,
    so I recommend you use lowercase and separate words using a dash, which is the
    common naming convention in CSS. If you use a space, it will be seen as two classes,
    and that''s really not what we want to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: So we'll save our HTML and hop over to our CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Underneath `h1`, we will add our class name, preceded by a period as our selector.
    Type `.alt-headline` and add a font size of 40px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we save this, we''ll make this CSS window smaller so we can see our
    site adjacent to our code. Scroll down to `h1` on your site and you will see in
    the preview on the left-hand side that it''s currently `70px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you save the CSS, `h1` becomes `40px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I put this new rule set below the original `h1` rule set, and you might think
    that because it comes second, it overwrites the one above it. That''s actually
    not what''s happening here. Even if I were to switch this rule set to be above
    `h1`, it would still be `40px`. This is because classes carry more weight than
    an element when used as a selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For good measure though, let's keep the `alt-headline` rule set below the original
    `h1` selector.
  prefs: []
  type: TYPE_NORMAL
- en: Classifying multiple elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Classes are also used for classifying multiple elements. If you want to change
    the `h2` tags in the middle section to all be similar but different to `h2` tags
    elsewhere on the page, using a class will be the perfect option. Let''s go into
    our HTML, add a class to all the `div` tags in the `secondary-section`, and call
    it `column-title`. Go to the `The Octopus`, `The Crab`, and `The Whale` headings,
    and use Sublime''s nice multiple cursor browser feature to add `class="column-title"`
    to each one of them. For example, the `The Octopus` heading should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we go to our CSS and add `.column-title` underneath `h2`. We''ll then
    add some properties and values. Add `font-style` as `normal`; you want to get
    rid of `italic`. Our color is blue, `#0072ae`, and we''ll make `font-weight` bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this, go to the browser, and you''ll see that now the `h2` tags underneath
    each image are different to the other `h2` tags that you have elsewhere on the
    site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `h2` tags at the bottom and the top of the site are still red and in italic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Classes can be very useful for naming and classifying groups of the same element
    that you want to look the same. Next, let's rename an element using an ID.
  prefs: []
  type: TYPE_NORMAL
- en: IDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scroll up to the top of our site, and in our HTML, go to `h1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s give the first `h1` tag a special ID called `main-site-title`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With an ID, you can also use whatever name you want inside the quotes as long
    as it''s meaningful. Switch over to the CSS and scroll down to just underneath
    our `alt-headline` class. This is where we''ll add `main-site-title`. The main
    difference between writing classes and IDs is we start classes with a period and
    IDs with a number sign or pound sign or a hashtag (whatever you want to call it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we''ll then say the color is different: `deep pink`. Save this
    and refresh the site to see the effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that this changes just the Old Chompy `h1`, the one that has the
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: Should we use classes or IDs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "Now, you're probably thinking, what's the difference between a class and an\
    \ ID? Well, the first point to make is an ID has more weight than a class, literally\
    \ 10 times more weight. Keeping your selectors lightweight is one of the keys\
    \ to scalable, reusable CSS. What does having more weight really mean? It means\
    \ it's more specific and an ID will overrule any class. We'll deep dive into specificity\
    \ rules and weights in [\uFEFFChapter 4](part0072.html#24L8G0-a72d261cc09f412988422c8a08f12cd5),\
    \ *Creating Buttons with Modular, Reusable CSS Classes, and CSS3*. For now, just\
    \ know that IDs will overrule classes when targeting the same element. The second\
    \ point to make is that an ID is unique, and therefore, it can only be used once\
    \ per page. Given these two points, primarily the first point, as a coding standard,\
    \ I rarely use IDs for styling because classes are almost always more than sufficient."
  prefs: []
  type: TYPE_NORMAL
- en: Renaming elements with a simple class is so unbelievably powerful and probably
    the most useful thing in all of CSS. While naming classes, although sometimes
    tricky, it is important to make names semantic or meaningful. For example, if
    you're naming your blog post container, it's okay to name it "blog-post-container"
    because that perfectly describes what it is. IDs, although they have their time
    and place, aren't as useful as classes. It's best to just use a class in most
    circumstances to keep your specificity low. In the next section, you'll learn
    about how we can target elements by their context using descendant selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Descendant selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Renaming elements with classes, as you learned in the previous section, is an
    extremely powerful feature in CSS. However, that's not the only way to target
    a specific type of element. Descendant selectors will allow you to target elements
    on a page based on their ancestor elements. This is often necessary because you
    only want to apply a margin or a new font based on the context of the element.
    You can use a descendant selector to get that context without putting a class
    on every element every time you want to target it. I'm going to first explain
    what parent, sibling, and child elements are as well as what ancestor and descendant
    elements are. We'll need to be clear about these if we want to use descendant
    selectors. We'll follow this up by using a practical example of the descendant
    selector and finishing up by calculating the descendant selector's weight.
  prefs: []
  type: TYPE_NORMAL
- en: Parent, child, and sibling elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go to our HTML and take a peek at this nicely nested HTML code in the
    `secondary-section`. So basically, what we have here is a `section` tag and three
    `div` tags that are inside of that section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: So `<div>` is the child element of `<section>`, while `<section>` is the parent.
    In other words, `<div>` is the descendant of `<section>`, `<section>` is the ancestor
    of `<div>`. `<figure>` is also a descendant of `<section>`, and `<img>` is a descendant
    of `<section>`. Note that `<figure>`, `<h2>`, and `<p>` are on the same level
    of the HTML so they are siblings, and they are also all descendants of `<section>`.
    That's as complicated as it gets; there are no uncles, no aunts, and no third
    cousins.
  prefs: []
  type: TYPE_NORMAL
- en: Creating descendant selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, *Renaming elements â€“ classes and IDs*, we added a
    class to all `<h2>`''s because we knew that `<h2>` tags in the `secondary-section`
    of our HTML were different than all other `<h2>` tags. So we probably will want
    to target other elements in this area to be different as well. Here''s how we
    can do that best. Instead of putting the class on the `<h2>` tag, let''s put it
    on the `section` tag and use descendant selectors from there. Let''s get rid of
    `class="column-title"` in all the `<h2>` tags. On the `section` element, let''s
    add a new class, namely `secondary-section`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and you will see the `<h2>` tags lose their blue bold color because
    in the CSS, we were still targeting the `.column-title` class that no longer exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So now what I''ll do is go into the CSS, find the `.column-title` class, update
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This is our descendant selector. If we save and refresh, we see that it changes
    those `<h2>` tags back to the blue, bold, and non-italic `font-style` that we
    want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So this `.secondary-section` selector shown in the following CSS is a descendant
    selector. It''s targeting all the `h2`''s that are inside of `secondary-section`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If we take a peek back at the HTML, you will see the `h2` is indeed inside
    of `secondary-section`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can take this a step further. Go into the CSS and underneath our existing
    `.secondary-section h2` rule set, type `.secondary-section p`. This is going to
    target our paragraph inside of the `secondary-section`. So add a color of deep
    pink, save and refresh, and you''ll see that now all our paragraphs are pink:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also do this with our `image` tag. If you look back at the HTML, our
    `image` tag is inside of a `div` tag that''s inside of a `figure` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Switching back to our CSS, we can type the selector `.secondary-section div
    figure img` and then we add a border of `10px`, solid, in this gray color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While we can see that works and we have got a gray border round our images
    on the site, we''re being a little more specific than we need to be with our selector.
    We could just get away with typing `img` without `div` and `figure` and the borders
    would still be there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s another problem with using a really long selector like this. The following
    selector carries more weight and could overrule other styles that you may not
    want it to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This is against keeping your code lightweight. Specificity is something I really
    want to stress; don't overdo it with really long selectors. In fact, as a rule
    of thumb, try not to go more than three levels deep; there are exceptions to this
    rule, of course, but try to keep it in mind as you write your CSS. The reason
    for this is there's an exact science to calculating the weight of your CSS selector,
    which I'll get into in a later section. I want to at least introduce it now so
    that we can start getting familiar with it.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the weight of selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A class is worth 10 points, so `.secondary-section` is worth 10 points. A plain
    old element such as `p` or `div` is worth 1 point. Therefore, the `.secondary-section
    p` selector is 11 points. The `.secondary-section div figure img` selector is
    13 points. Let''s create another selector below the one worth 13 points and we
    have `.secondary-section img`. Then, let''s change the `border-color` to `blue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'When we save this, our border is going to remain gray because the point value
    of our last selector is only 11; it''s getting beat out by the previous selector''s
    point value of 13\. That''s the problem with these long descendant selectors that
    are longer than they should be, they get weighted heavier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: IDs have a point value of 100 points, which is why I advise against using them.
    They have so much unnecessary weight to them and drive the specificity level through
    the roof. Assigning point values kind of sounds like keeping score on a video
    game, but the difference is you want to try and keep your point value as low as
    possible on this game. If you do that, you will be able to write less complicated
    CSS.
  prefs: []
  type: TYPE_NORMAL
- en: BEM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One technique for keeping specificity low is avoiding descendant selectors altogether
    using *BEM*. BEM stands for *Block Element Modifier* and is a naming convention
    for CSS. The idea is to use a specific naming convention to add a class to every
    element you are eventually going to style. This way every element has a specificity
    score of 10, thus every element has the same specificity. There's a lot more to
    it that just that, and I recommend checking it out at [http://getbem.com/](http://getbem.com/)
    to learn more about it. I tend to use the BEM methodology, but that's not to say
    descendant selectors need to be completely avoided. I think there's a time and
    place for them. My suggestion is keep your descendant selectors reasonable and
    avoid longer descendant selectors with more than 3 levels.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the features of a good text editor, discussed
    CSS resets, explored the troubleshooting power of Chrome's DevTools, and learned
    how to rename elements with classes. In the final section of this chapter, you
    learned about descendant selectors.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is about creating a multicolumn layer using floats and understanding
    the solutions to the problems that floats cause.
  prefs: []
  type: TYPE_NORMAL
