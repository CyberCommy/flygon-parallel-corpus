- en: Chapter 6. Cross-platform Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。跨平台开发
- en: 'Microsoft platforms are not the only platforms that can execute C# code. With
    the Mono framework, you can target other platforms, such as Linux, Mac OS, iOS,
    and Android. In this chapter, we will explore the tools and frameworks needed
    to build a Mac app. Some of the tools we will look at here are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 微软平台并不是唯一可以执行C#代码的平台。使用Mono框架，您可以针对其他平台进行开发，如Linux、Mac OS、iOS和Android。在本章中，我们将探讨构建Mac应用程序所需的工具和框架。我们将在这里看到一些工具，例如：
- en: '**MonoDevelop**: This is a C# IDE that lets you write C# on other non-Windows
    platforms'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MonoDevelop**：这是一个C# IDE，可以让您在其他非Windows平台上编写C#'
- en: '**MonoMac**: This provides bindings to the Mac libraries so you can use native
    APIs from C#'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MonoMac**：这提供了对Mac库的绑定，因此您可以从C#使用本机API'
- en: '**Cocoa**: This is the framework used to create Mac apps'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cocoa**：这是用于创建Mac应用程序的框架'
- en: The application we are going to build in this chapter is a utility that you
    can use to look for text on a website. Given a URL, the application will look
    for links and will follow them to look for specific trigger text. We will take
    a look at displaying the results using Mac OS' UI SDK, AppKit.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中构建的应用程序是一个实用程序，您可以使用它来查找网站上的文本。给定一个URL，应用程序将查找链接，并跟随它们查找特定的触发文本。我们将使用Mac
    OS的UI SDK，AppKit来显示结果。
- en: Building a web scraper
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建网络爬虫
- en: If you have C# experience and need to build an application or utility, Mono
    can give you a head start at creating it quickly, using existing skillsets. Let's
    say you have a need to keep an eye on a website so that you can act when a new
    post containing a given piece of text shows up. Rather than sitting there and
    refreshing the page manually all day, you want to build an automated system to
    do this. If the website does not provide an RSS feed or other API to give you
    programmatic access, you can always fall back on a tried and true method of getting
    remote data—writing an HTTP scraper.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有C#经验并且需要构建应用程序或实用程序，Mono可以让您快速创建它，利用现有的技能。假设您需要监视一个网站，以便在包含给定文本的新帖子出现时采取行动。与其整天手动刷新页面，不如构建一个自动化系统来完成这项任务。如果网站没有提供RSS订阅或其他API来提供程序化访问，您总是可以退而求其次，使用一种可靠的方法来获取远程数据——编写一个HTTP爬虫。
- en: It sounds more complex than it is, all that this utility will do is let you
    put in a URL and some parameters, so the app knows what to search for. Then, it
    will take care of going out to the website, requesting all of the relevant pages,
    and searching for your target text.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来比实际复杂，这个实用程序将允许您输入一个URL和一些参数，以便应用程序知道要搜索什么。然后，它将负责访问网站，请求所有相关页面，并搜索您的目标文本。
- en: 'Start by creating the project. Open MonoDevelop and create a new project from
    the **File** | **New** | **Solution** menu item which brings up the **New Solution**
    dialog. In that dialog, choose **MonoMac Project** from the **C#** | **MonoMac**
    list on the left-hand panel. When you create the solution, the project template
    initializes it with the basics of a Mac application, as shown in the following
    screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从创建项目开始。打开MonoDevelop并从**文件** | **新建** | **解决方案**菜单项创建一个新项目，这将打开**新解决方案**对话框。在该对话框中，从左侧面板的**C#**
    | **MonoMac**列表中选择**MonoMac项目**。创建解决方案时，项目模板将初始化为Mac应用程序的基础，如下面的屏幕截图所示：
- en: '![Building a web scraper](img/6761_06_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![构建网络爬虫](img/6761_06_01.jpg)'
- en: As with the web app we built in the previous chapter, Mac applications use the
    Model-View-Controller pattern to organize themselves. The project template has
    created the controller (`MainWindowControl`) and the view (`MainWindow.xib`);
    it is up to you to create the model.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在上一章中构建的Web应用程序一样，Mac应用程序使用模型-视图-控制器模式来组织自己。项目模板已经创建了控制器（`MainWindowControl`）和视图（`MainWindow.xib`）；创建模型由您来完成。
- en: Building the model
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建模型
- en: One of the primary benefits of using something like MonoMac is the ability to
    share code across platforms, especially if you are already familiar with C#. Because
    we are writing C#, any common logic and data structures can be reused if we want
    to build a part of the same app for a different platform. By way of example, a
    popular app named iCircuit ([http://icircuitapp.com](http://icircuitapp.com)),
    which was written using the Mono framework, has been published for iOS, Android,
    Mac, and also Windows Phone. The iCircuit app achieved nearly 90 percent code
    reuse on some of the platforms.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似MonoMac这样的工具的主要好处之一是能够在不同平台之间共享代码，特别是如果您已经熟悉C#。因为我们正在编写C#，所以任何通用逻辑和数据结构都可以在需要为不同平台构建相同应用程序的情况下得到重用。例如，一个名为iCircuit的流行应用程序（[http://icircuitapp.com](http://icircuitapp.com)），它是使用Mono框架编写的，已经发布了iOS、Android、Mac和Windows
    Phone版本。iCircuit应用程序在某些平台上实现了近90%的代码重用。
- en: The reason that this figure was not 100 percent is that one of the guiding principles
    that the Mono framework has been focusing on recently is building applications
    using native frameworks and interfaces. One of the main points of contention with
    cross platform toolkits in the past has been that they never feel particularly
    native because they are forced to settle for the lowest common denominator to
    maintain compatibility. With Mono, you are encouraged to use a platform's native
    APIs through C# so that you can take advantage of all of the strengths of that
    platform.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数字之所以不是100%是因为Mono框架最近一直专注于使用本机框架和接口构建应用程序的指导原则之一。过去跨平台工具包的主要争议点之一是它们从来没有特别本地化，因为它们被迫妥协以保持兼容性的最低公分母。使用Mono，您被鼓励通过C#使用平台的本机API，以便您可以利用该平台的所有优势。
- en: The model is where you will be able to find the most reuse, as long as you take
    care to keep all platform-specific dependencies out of the model where possible.
    To keep things organized, create a folder, named `models`, in your project, which
    we will use to store all of our model classes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是您可以找到最多重用的地方，只要您尽量将所有特定于平台的依赖项排除在模型之外。为了保持组织，创建一个名为`models`的文件夹，用于存储所有模型类。
- en: Accessing the Web
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问网络
- en: 'As with the Windows 8 application that we built in [Chapter 4](ch04.html "Chapter 4. Creating
    a Windows Store App"), *Creating a Windows Store App*, the first thing we want
    to do is provide the ability to connect to a URL and download data from a remote
    server. In this case, though, we just want access to the HTML text so that we
    can parse it and look for various attributes. Add a class, named `WebHelper`,
    to the `/Models` directory, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在[第4章](ch04.html "第4章 创建Windows Store应用程序")中构建的Windows 8应用程序一样，*创建Windows
    Store应用程序*，我们想要做的第一件事是提供连接到URL并从远程服务器下载数据的能力。不过，在这种情况下，我们只想要访问HTML文本，以便我们可以解析它并查找各种属性。在`/Models`目录中添加一个名为`WebHelper`的类，如下所示：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is very similar to the `WebRequest` class that we built in [Chapter 4](ch04.html
    "Chapter 4. Creating a Windows Store App"), *Creating a Windows Store App*, except
    that it simply returns the HTML string that we want to parse instead of deserializing
    a JSON object; and because the `Get` method will be carrying out remote I/O, we
    use the `async` keyword. As a rule of thumb, any I/O bound method that could potentially
    take more than 50 milliseconds to complete should be asynchronous. 50 milliseconds
    is the threshold used by Microsoft when deciding which OS-level APIs will be asynchronous.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在[第4章](ch04.html "第4章 创建Windows Store应用程序")中构建的`WebRequest`类非常相似，*创建Windows
    Store应用程序*，只是它只返回我们要解析的HTML字符串，而不是反序列化JSON对象；并且因为`Get`方法将执行远程I/O，我们使用`async`关键字。作为一个经验法则，任何可能需要超过50毫秒才能完成的I/O绑定方法都应该是异步的。微软在决定哪些OS级API将是异步的时，使用了50毫秒的阈值。
- en: Now, we are going to build the backing storage model for the data that the user
    enters in the user interface. One of the things we want to be able to do for the
    user is save their input so that they don't have to re-enter it the next time
    they launch the application. Thankfully, we can take advantage of one of the built-in
    classes on Mac OS and the dynamic object features of C# 5 to do this in an easy
    way.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为用户在用户界面中输入的数据构建后备存储模型。我们希望为用户做的一件事是保存他们的输入，这样他们下次启动应用程序时就不必重新输入。幸运的是，我们可以利用Mac
    OS上的一个内置类和C# 5的动态对象特性来轻松实现这一点。
- en: The `NSUserDefaults` class is a simple key/value storage API that persists the
    settings that you put into it across application sessions. But while programming
    against "property bags" can provide you with a very flexible API, it can be verbose
    and difficult to understand at a glance. To mitigate that, we are going to build
    a nice dynamic wrapper around `NSUserDefaults` so that our code at least looks
    strongly typed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSUserDefaults`类是一个简单的键/值存储API，它会在应用程序会话之间保留您放入其中的设置。但是，尽管针对“属性包”进行编程可以为您提供一个非常灵活的API，但它可能会很冗长，并且难以一眼理解。为了减轻这一点，我们将在`NSUserDefaults`周围构建一个很好的动态包装器，以便我们的代码至少看起来是强类型的。'
- en: First, make sure that your project has a reference to the `Microsoft.CSharp.dll`
    assembly; if not, add it. Then, add a new class file, named `UserSettings.cs`,
    to your `Models` folder and inherit from the `DynamicObject` class. Take note
    of the `MonoMac.Foundation` namespace being used in this class, as this is where
    the Mono bindings to the Mac's Core Foundation APIs reside.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保您的项目引用了`Microsoft.CSharp.dll`程序集；如果没有，请添加。然后，在`Models`文件夹中添加一个名为`UserSettings.cs`的新类文件，并从`DynamicObject`类继承。请注意，此类中使用了`MonoMac.Foundation`命名空间，这是Mono绑定到Mac的Core
    Foundation API的位置。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We only need to override two methods, `TryGetMember` and `TrySetMember`. In
    those methods, we will use the `NSUserDefaults` class, which is a native Mac API,
    to get and set the given value. This is a great example of how we can bridge the
    native platform that we are running on while still having a C# friendly API surface
    to program against.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要重写两个方法，`TryGetMember`和`TrySetMember`。在这些方法中，我们将使用`NSUserDefaults`类，这是一个本地的Mac
    API，来获取和设置给定的值。这是一个很好的例子，说明了我们如何在运行的本地平台上搭建桥梁，同时仍然具有一个C#友好的API表面来进行编程。
- en: Of course, the astute reader will remember that, at the beginning of this chapter,
    I said that we should keep platform-specific code out of the model where possible.
    That is, as these things usually are, more of a guideline. If we wanted to port
    this program to another platform, we could just replace the internal implementation
    of this class to something appropriate for the platform, such as using `SharedSettings`
    on Android, or `ApplicationDataContainer` on Windows RT.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，敏锐的读者会记得，在本章的开头，我说我们应该尽可能将特定于平台的代码从模型中分离出来。这通常是一个指导方针。如果我们想要将这个程序移植到另一个平台，我们只需将这个类的内部实现替换为适合该平台的内容，比如在Android上使用`SharedSettings`，或者在Windows
    RT上使用`ApplicationDataContainer`。
- en: Making a DataSource
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个数据源
- en: Next, we are going to build the class that will encapsulate most of our primary
    business logic. When we talk about cross-platform development, this would be a
    primary candidate for code that would be shared across all platforms; and the
    better you are able to abstract your code into self-sustained classes such as
    these, the higher the likelihood that it will be reusable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建一个类，该类将封装大部分我们的主要业务逻辑。当我们谈论跨平台开发时，这将是一个主要的候选代码，可以在所有平台上共享；并且您能够将代码抽象成这样的自包含类，它将更有可能被重复使用。
- en: 'Create a new file, called `WebDataSource.cs`, in the `Models` folder. This
    class will be responsible for going out over the Web and parsing the results.
    Once the class has been created, add the two following members to the class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Models`文件夹中创建一个名为`WebDataSource.cs`的新文件。这个类将负责通过网络获取并解析结果。创建完类后，向类中添加以下两个成员：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This list of strings will be what drives the user interface whenever we find
    a match in the website's source. In order to parse the HTML to get those results,
    we can take advantage of a great open source library called the **HTML Agility
    Pack**, which you can find on the CodePlex site ([http://htmlagilitypack.codeplex.com/](http://htmlagilitypack.codeplex.com/)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: When you download the package and unzip it, look in the `Net45` folder for the
    file named `HtmlAgilityPack.dll`. This assembly will work on all CLR platforms,
    so you can take it and copy it right into your project. Add the assembly as a
    reference by right-clicking on the `References` node in the solution explorer,
    and choosing **Edit References** | **.NET Assembly**. Browse to the `HtmlAgilityPack.dll`
    assembly from the .NET Assembly table and click on **OK**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have added this dependency, we can start writing the primary logic
    for the application. Remember, our goal is to make an interface that allows us
    to spider a website looking for a particular piece of text. Add the following
    method to the `WebDataSource` class:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Retrieve` method, which has the `async` keyword to enable you to wait an
    asynchronous operation, starts by instantiating the `UserSettings` class as a
    dynamic object so that we can pull out the values from the UI. Next, we retrieve
    the initial URL and load the results into an `HtmlDocument` class, which lets
    us parse out all of the links that we are looking for. Here is where it gets interesting,
    for each link, we retrieve that URL's content asynchronously and process it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might assume that, because you are waiting in the loop (with the `await`
    keyword), each iteration of the loop will execute concurrently. But remember that
    asynchrony does not necessarily mean concurrency. In this case, the compiler will
    rewrite the code so that the main thread is not held up while waiting for the
    HTTP calls to complete, but the loop will not continue iterating while waiting
    either, so each iteration of the loop will be completed in the correct sequence.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we implement the `ProcessPost` method, which takes the contents of
    a single URL and searches it using the regular expression provided by the user.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With the `WebDataSource` class completed, we have everything we need to start
    working on the user interface. This goes to show how a few good abstractions (`WebHelper`
    and `UserSettings`) and new features such as `async` and `await` can be combined
    to produce relatively complex functionality, all while maintaining a great performance
    profile.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Building the view
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will build the second and third legs of the MVC triangle, the view,
    and the controller. Starting with the view is the next logical step. When developing
    Mac applications, the easiest way to build the UI is to use Xcode's interface
    builder, which you can install from the Mac App Store. MonoDevelop on the Mac
    is built to specifically interoperate with Xcode for building the UI.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening `MainWindow.xib` from MonoDevelop by double-clicking on it.
    It will automatically open XCode with the file in the interface builder editor.
    The form will initially just be a blank window, but we are going to start adding
    views. Initially, the experience will be very familiar for anyone who has used
    Visual Studio's WYSIWYG editors for WinForms or XAML, but those similarities soon
    diverge.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: If it is not already displayed, bring up the **Utilities** panel on the right-hand
    side of the screen by clicking on the button shown in the following screenshot,
    which you can find in the top-right corner of Xcode.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the view](img/6761_06_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'Find the object library and browse through the list of user interface elements
    that are available to you. For now, look for a Vertical Split View in the object
    library and drag it out to the editor surface, making sure to stretch it across
    the whole window, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the view](img/6761_06_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: This lets us build a simple UI that lets the user resize the various elements
    to whatever makes sense for him/her. Next, we will add the user-provided options
    as text field elements, with accompanying labels, of course, to the left-hand
    panel.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**URL**: This is the URL of the website that you want to scrape.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Item Link XPath**: This is on the page retrieved with the URL. This XPath
    query should return a list of links that you are interested in scanning.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content XPath**: For each item, we will retrieve the HTML contents based
    on the URL retrieved from **Item Link XPath**. In that new HTML document, we want
    to pick a content element that we will look at.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trigger Regex**: This is a regular expression that we will use to indicate
    a match.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are also going to want a way to display the results of any matches. In order
    to do so, add a table view from the object library into the second right-hand
    panel. This table view, which is analogous to the grid controls of the regular
    .NET/Windows world, will give us a place to display our results in list format.
    Also add a push button that we will use to initiate our web call.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Once completed, your interface should look like the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the view](img/6761_06_04.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 'With the interface defined, we start looking to the controller. Exposing the
    individual view elements to the controller is something unique if you have never
    worked with Xcode before. Where other tools for other platforms tend to automatically
    generate code references to textboxes and buttons, in Xcode you must manually
    link them up to properties in your controller. You will be exposed to some Objective-C
    code for this, but only very briefly, and you don''t really have to do anything
    with it aside from the following steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Display the assistant editor and make sure that `MainWindowController.h` is
    showing in the editor. This is the header file for the controller that will interact
    with the view in our program.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to add what are called **outlets** to the controller and connect them
    with the UI elements, so you can get references to them from code. This is accomplished
    by holding the *Ctrl* key on your keyboard, and clicking-and-dragging from the
    control textbox into the header file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A small dialog, shown in the following screenshot, will be displayed, it lets
    you change a few options before the code is generated:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the view](img/6761_06_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: Do that for all of the text views and give them appropriate names such as `urlTextView`,
    `linkXPathTextView`, `contentXPathTextView`, `regexTextView`, and `resultsTableView`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you go to add the button, you will notice that you have an option to change
    the connection type to an **Action** connection instead of an **Outlet** connection.
    This is how you can wire up the button''s click event. When you have completed
    this, the header file should have the following elements defined:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Close Xcode and go back to MonoDevelop and take a look at the `MainWindow.designer.cs`
    file.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that all of the outlets and actions that you added will be represented
    in the C# code. MonoDevelop watches the files on the file system, and when Xcode
    makes changes to them, it regenerates this code accordingly.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Remember that we want the user's settings to persist between sessions. So when
    the window loads, we want to initialize the textboxes with whatever values were
    entered previously. We will use the `UserSettings` class that we created earlier
    in the chapter to provide those values. Override the `WindowDidLoad` method (as
    shown in the following code), which is executed when the program first runs, and
    set the values from the user's settings to the text views.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we turn our attention to the displaying of data. Our primary output in
    this application is `NSTableView`, which we are going to use to display any matching
    links in the target URL. In order to bind data to the table, we create a custom
    class that inherits from `NSTableViewSource`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The table view will request a row's data in the `GetObjectValue` method whenever
    it needs to render a given table cell. So this just takes an array of strings
    and returns the appropriate index from the array when requested.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每当表视图需要渲染给定的表格单元时，表视图将在`GetObjectValue`方法中请求行数据。因此，当请求时，它只需获取一个字符串数组，并从数组中返回适当的索引。
- en: Now we define the method that quite literally puts everything together.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们定义了一个方法，它几乎可以将所有东西都整合在一起。
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the `GetData` method, the first thing we do is pull the values from the textboxes
    and store them in the `UserSettings` object. Next, we retrieve the data from `WebDataSource`,
    asynchronously of course. Now, pass the results to `TableViewSource` so that it
    can be displayed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GetData`方法中，我们首先要做的是从文本框中获取值，并将其存储在`UserSettings`对象中。接下来，我们异步地从`WebDataSource`中检索数据。现在，将结果传递给`TableViewSource`以便显示。
- en: 'Finally, implement the `buttonClicked` action that you wired up in Xcode.:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，实现在Xcode中连接的`buttonClicked`操作。
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now run the program and put in some values for a web page you want to search
    through. You should see results like those shown in the following screenshot,
    you can try to use the same values as well, but please note that it will not work
    if Hacker News has updated their HTML structure.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行程序，并输入一些要搜索的网页的值。您应该会看到类似于以下截图中显示的结果，您也可以尝试使用相同的值，但请注意，如果Hacker News已更新其HTML结构，则不起作用。
- en: '![Building the view](img/6761_06_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![构建视图](img/6761_06_06.jpg)'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we created a small utility application for Mac OS, using MonoMac
    and MonoDevelop. Some ideas that you can use to extend or improve this application
    are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用MonoMac和MonoDevelop为Mac OS创建了一个小型实用程序应用程序。以下是一些可以用来扩展或改进此应用程序的想法：
- en: Persist results across app sessions (look at Core Data)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨应用程序会话保留结果（查看Core Data）
- en: Build better user experience by giving the user feedback while processing (look
    at `NSProgressIndicator`)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在处理过程中向用户提供反馈来改善用户体验（查看`NSProgressIndicator`）
- en: Improve the application's performance by parallelizing URL requests (look at
    `Parallel.ForEach`)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过并行化URL请求来提高应用程序的性能（查看`Parallel.ForEach`）
- en: Try porting the application to different platforms. For iOS, look at MonoTouch
    ([http://ios.xamarin.com](http://ios.xamarin.com)), and for Android, look at Mono
    for Android ([http://android.xamarin.com](http://android.xamarin.com))
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试将应用程序移植到不同的平台。对于iOS，查看MonoTouch（[http://ios.xamarin.com](http://ios.xamarin.com)），对于Android，查看Mono
    for Android（[http://android.xamarin.com](http://android.xamarin.com)）
- en: C# is an incredibly expressive and powerful language. With the ability to target
    every mainstream computing platform, you have an incredible array of opportunities
    available to you as a developer, all while using a consistent programming language
    where you can re-use code easily across platforms.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: C#是一种非常表达力和强大的语言。能够针对每个主流计算平台，作为开发人员，您有着令人难以置信的机会，同时可以使用一种一致的编程语言，在不同平台上轻松重用代码。
