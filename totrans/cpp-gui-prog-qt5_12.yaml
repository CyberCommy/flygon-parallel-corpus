- en: Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to draw images on-screen using Qt. In
    this chapter, however, we are going learn something totally different, which is
    setting up our own file server and linking it to our Qt application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the FTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the file list on the list view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading files to the FTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading files from the FTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the FTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will learn how to set up an FTP server, which stores
    all the files uploaded by a user and allows them to download them at any time.
    This section is not related to Qt, so if you already have a running FTP server,
    please skip this part and proceed to the next section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**FTP **is an acronym for **File Transfer Protocol**. FTP is used to transfer
    files from one computer to another on a network, usually over the internet. FTP
    is just one of the many different forms of cloud storage technology, but it is
    also a simple one that you can easily set up on your own computer.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many different FTP servers that have been developed by different groups
    of people for a specific operating system. In this section of the chapter, we
    will learn how to set up a FileZilla server, which runs on the Windows operating
    system. If you're running other operating systems such as GNU, Linux, or macOS,
    there are many other FTP server programs that you can use, such as VSFTP and Pure-FTPd.
  prefs: []
  type: TYPE_NORMAL
- en: On Debian, Ubuntu, or other similar variants of Linux, running `sudo apt-get
    install vsftpd` on the Terminal will install and configure an FTP server. On macOS,
    open System Preferences from the Apple menu and select Sharing. Then, click on
    the Service tab and select FTP access. Finally, click the Start button to start
    running the FTP server.
  prefs: []
  type: TYPE_NORMAL
- en: If you already have a running FTP server, please skip to the next section, in
    which we'll start learning about C++ programming.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading FileZilla
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'FileZilla is really easy to set up and configure. It provides a fully functional
    and easy-to-use user interface and doesn''t require any prior experience to operate
    it. The first thing we need to do is download FileZilla. We will do it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser and hop over to [https://filezilla-project.org](https://filezilla-project.org).
    You will see two download buttons located at the Home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Download FileZilla Server and it will bring us to the download page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4bfbf211-e454-4edf-bc21-d4658021c8eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you're at the download page, click on the Download FileZilla Server button
    and start downloading the software. We're not going to use the FileZilla Client,
    so you don't have to download that. Once everything is ready, let's proceed to
    install the software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like most Windows software, the installation process is very straightforward.
    Keep everything as default and click Next all the way until the installation process
    begins. It will take a couple of minutes at most for the installation to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once it''s completed, click on the Close button and we''re done!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f2e50ce-e947-4859-9cb8-7b4325f307d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up FileZilla
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have installed FileZilla, the control panel will most likely open by
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is the first time you have launched FileZilla, it will ask you to
    set up the server. Keep the server IP address as `127.0.0.1` (which means **localhost**)
    and the admin port to `14147`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Key in your desired password for administrating the server and check on the
    Always connect to this server option. Press Connect and the FTP server will now
    start up! This is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c47f55c-7b14-4f7e-bb5f-43c5af4b817c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the FTP server has started running, we need to create a user account.
    Click on the fourth icon from the left to open up the Users dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90d51fc3-b15a-43fd-afc2-b99511c8b1f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, under the General page, click on the Add button located at the right side
    of the window. Create an account by setting a username and press OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We don''t have to set the user to any group for now, as user groups are only
    useful when you have many users that have the same privilege settings since it
    is easier to change all users settings at once or move users to different groups.
    Once you have created the user, check on the Password option and key in your desired
    password. It is always a good practice to put the password on your FTP account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93277ddc-baa0-4121-a281-25dcef5ebd9e.png)'
  prefs: []
  type: TYPE_IMG
- en: After that, we will proceed to the Shared folders page and add a shared directory
    for our newly created user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure the Delete and Append options are checked so that files that have
    the same name can be replaced. We will be using that for updating our file list
    in a moment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51573cbf-7f90-4144-8677-cba2ec6bad13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the third icon from the left, the FileZilla Server options
    dialog will appear. You can basically configure everything here to suit your needs.
    For instance, if you don''t want to use the default port number `21`, you can
    simply change it on the options window, under the General settings page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/697d6dcd-114e-4477-bc2e-7437b0905d2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also set the speed limit for all users or a specific user under the
    Speed Limits page. This can prevent your server from becoming low performance
    when many users are downloading huge files at the same time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1868a1d7-c12b-482b-9536-b844f2e7d50c.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's proceed to create our Qt project!
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the file list on the list view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we successfully set up a FTP server and kept it running.
    In the following section, we will learn how to create an FTP client program that
    displays the file list, uploads files to the FTP server, and finally downloads
    files from it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As usual, let''s create a new project using **Qt Creator**. The following steps
    will help:'
  prefs: []
  type: TYPE_NORMAL
- en: We can create a new project by going to File | New File or Project and selecting Qt
    Widgets Application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your project has been created, open your project (`.pro`) file and add
    the `network` keyword so that Qt knows that you need the Networking module in
    your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Setting up user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After that, open up `mainwindow.ui` and perform the following steps to design
    the upper part of our user interface for uploading files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place a Labelthat says Upload File: on top of every other widget.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put a horizontal layout and two Push Buttons alongside it that say Open and
    Upload, under the Label respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place a Progress Bar under the Horizontal Layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put a Horizontal Line followed by a Vertical Spacer at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a026044-0639-4540-af80-4de768b78ffa.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we''re going to construct the bottom part of the user interface that
    is used for downloading files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3130468f-e520-4536-8be3-2b8c472857ee.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This time, our user interface is very similar to the upper part, except we have
    added a List View before the second Progress Barfor displaying the file list.
    We put everything on the same page for this example program so that it's simpler
    and less confusing to explain.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the file list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will learn how to save and display the file list on the FTP server.
    Actually, the FTP server does provide the file list by default, and Qt was able
    to display it using the `qtftp` module back in older versions. However, since
    Version 5, Qt has completely dropped the `qtftp` module and this feature no longer
    exists.
  prefs: []
  type: TYPE_NORMAL
- en: If you're still interested in the old `qtftp` module, you can still obtain its
    source code on GitHub by visiting the following link: [https://github.com/qt/qtftp](https://github.com/qt/qtftp)
  prefs: []
  type: TYPE_NORMAL
- en: In Qt, we use the `QNetworkAccessManager` class to communicate with our FTP
    server so features that are specifically designed for FTP no longer work. But,
    don't worry, we will look into some other alternative methods to achieve the same
    result.
  prefs: []
  type: TYPE_NORMAL
- en: The best method, in my opinion, is using an online database to store the file
    list and its information (file size, format, status, and so on). If you're interested
    in learning how to connect your Qt application to a database, please refer to
    [Chapter 3](f726e000-7f3b-4631-9df1-ed2819ed5f9b.xhtml), *Database Connection*.
    However, for the sake of simplicity, we will use another method that works just
    fine but is less secure—by saving the file names directly on a text file and storing
    it on the FTP server.
  prefs: []
  type: TYPE_NORMAL
- en: If you're doing a serious project for your client or company, please do not
    use this method. Check out [Chapter 3](f726e000-7f3b-4631-9df1-ed2819ed5f9b.xhtml), *Database
    Connection*, and learn to use an actual database instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright, just assume that there is no other way but to use the text file; how
    are we going to do that? It''s very simple: create a text file called `files.txt`
    and place it into the FTP directory we just created at the very beginning of this
    chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, open up `mainwindow.h` and add the following headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add in the following variables and functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are done with the previous step, open up `mainwindow.cpp` and add
    the following code to the class constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did was basically initialize the `QNetworkAccessManager` object and
    set up the variables that store our FTP server''s information, since we will be
    repeated using it many times in later steps. After that, we will call the `getFileList()`
    function to start downloading `files.txt` from our FTP server. The `getFileList()`
    function looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We used a `QUrl` object to store the information about our server and the location
    of the file we're trying to download, and then fed it to a `QNetworkRequest` object
    before sending it off by calling `QNetworkAccessManager::get()`. Since we have
    no idea when all the files will get downloaded completely, we make use of Qt's
    `SIGNAL` and `SLOT` mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: 'We connected the `finished()` signal that comes from our `downloadFileListReply` pointer
    (which points to a `QNetworkReply` object in `mainwindow.h`) and linked it to
    the `slot` function `downloadFileListFinished()`, which we defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is a bit long, so I have broken down the function into the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If any problems occur during the download, display a message box that tells
    us the nature of the problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything went nicely and the download has completed, we will try and read
    the data by calling `downloadFileListReply` | `readAll()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, clear the List Widget and start parsing the content of the text file.
    The format we used here is very simple; we only used a comma symbol to separate
    each file name: `filename1,filename2,filename,...` It is important that we do
    not do this in the actual project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have called `split(",")` to split the string into a string list, do
    a `for` loop and display each file name on the List Widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To test whether the preceding code works or not, create a text file called
    `files.txt` and add the following text to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, place the text file to your FTP directory and run your project. You should
    be able to see it appear like this on the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/515e1c2d-015e-4fd2-88e6-9588304c21a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Once it is working, we can clear away the content of the text file and proceed
    to our next section.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files to the FTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we don't have any files in our FTP directory yet (except the file list),
    let's write the code to allow us to upload our first file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open `mainwindow.ui` and right click on the Open button. Then, select
    Go to slot and select the clicked() option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9101a98a-64cd-4902-b2ea-d463509b03d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A `slot` function will be automatically created for you. Then, add the following
    code to the function to open up the file selector window for our users to select
    their desired file for upload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, repeat this step and do the same for the Upload button. This time,
    the code for its `slot` function looks something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The code looks a bit long, so let''s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: We used the `QFile` class for opening the file that we want to upload (the file
    path is taken from `ui->uploadFileInput->text()`). If the file doesn't exist,
    display a message box to inform the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we fill in the information of our FTP server and the upload destination
    into a `QUrl` object before feeding it to a `QNetworkRequest` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we start reading the content of our file and provide it to the `QNetworkAccessManager::put()`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we have no idea when the file will get uploaded completely, we used the
    `SIGNAL` and `SLOT` mechanisms provided by Qt. We linked the `uploadProgress()`
    and `finished()` signals to our two custom `slot` function called `uploadFileProgress()`
    and `uploadFileFinised()`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `slot` function `uploadFileProgress()` will tell us the current progress
    of our upload, and therefore we can use it to set the progress bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Meanwhile, the `uploadFileFinished()` function will be triggered when the file
    has been completely uploaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We are not done with the preceding function yet. Since a new file has been added
    to the FTP server, we must update the existing file list and replace the `files.txt`
    file stored within the FTP directory. Since the code is slightly longer, we will
    break the code into several parts, which all are occurring before showing the
    File successfully uploaded message box.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s check whether the newly uploaded file has already existed within
    our file list (replacing an old file on the FTP server). If it does, then we can
    skip the entire thing; otherwise, append the filename to our `fileList` string
    list, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a temporary text file (`files.txt`) in our application''s
    directory and save the new file list in the text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we use the `QFile` class to open the text file we just created, and
    we upload it again to the FTP server to replace the old file list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we use the `SIGNAL` and `SLOT` mechanisms so that we are notified when
    the file list has been uploaded. The `slot` function `uploadFileListFinished()` looks
    something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We basically just call `getFileList()` again after we have updated the file
    list into the FTP server. If you build and run the project now, you should be
    able to upload your first file to your local FTP server, hooray!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f62c8f3-6cf9-42aa-8a69-8d79ea69d13b.png)'
  prefs: []
  type: TYPE_IMG
- en: Downloading files from the FTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have successfully uploaded our first file to the FTP server, let's
    create the feature for downloading the file back onto our computer!
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open `mainwindow.ui` again and right-click on the Set Folder button.
    Select Go to slot... and pick the clicked() signal to create a `slot` function.
    The `slot` function is very simple; it will just open up a file selection dialog,
    but this time it will only let the user select a folder instead since we provided
    it with a `QFileDialog::ShowDirsOnly` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, right click on the List Widget and select Go to slot... This time around,
    we will pick the `itemDoubleClicked(QListWidgetItem*)` option instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ccd5fed6-24d3-4345-a7b5-06be7331f314.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user double-clicks on an item in the List Widget, the following function
    will be triggered, which kick-starts the download. The file name can be obtained
    from the `QListWidgetItem` object by calling `item->text()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like what we did in the `upload` function, we also used the `SIGNAL` and
    `SLOT` mechanisms here to obtain the progression of the download process as well
    as the completed signal. The `slot` function `downloadFileProgress()` will be
    called during the download process, and we used that to set the value of our second
    progress bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the `slot` function `downloadFileFinished()` will be called when the
    file has been completely downloaded. What we''re going to do after that is read
    all the data of the file and save it to our desired directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Build the program now and you should be able to download any files listed on
    the file list!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9b76d2da-fc18-4ff7-9e3f-1a559ee1d2cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create our own cloud storage client using
    Qt's Networking module. In the following chapter, we will learn more about the
    multimedia module and create our own multimedia player from scratch using Qt.
  prefs: []
  type: TYPE_NORMAL
