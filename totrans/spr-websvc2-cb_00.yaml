- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Web-Services (Spring-WS), introduced by the SpringSource community ([http://www.springsource.org/](http://www.springsource.org/)),
    aims to create contract-first SOAP Web-Services in which either a WSDL or an XSD
    is required primarily for the creation of a Web-Service. Since Spring-WS is a
    Spring-based product, it takes advantage of Spring''s concepts such as Inversion
    of Control (IOC) and dependency injection. Some of the key features of Spring-WS
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Powerful endpoint mappings: The incoming XML requests can be forwarded to any
    handler object, based on the payload, SOAP action, and an XPath expression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rich XML API support: The incoming XML messages can be read using a variety
    of Java''s XML APIs such as DOM, JDOM, dom4j, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Built by Maven: Spring-WS can be easily integrated with your Maven project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support for Marshalling technologies: Several OXM technologies, such as JAXB,
    XMLBean, XStream, and JiBX, can be used alternatively for the conversion of XML
    messages to/from an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security support: Security operations, such as encryption/decryption, signature,
    and authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Covering all of these key features of Spring-WS 2.x has been the main goal of
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the last two chapters, a different approach toward Web-Service development
    using REST-style and contract-last development using Spring remoting feature are
    detailed.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building SOAP
    Web-Services:* This chapter covers setting up SOAP Web-Services over HTTP, JMS,
    XMPP, and E-mail protocols. It also covers the different implementations of Web-Service''s
    endpoint using technologies such as DOM, JDOM, XPath, and Marshaller.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),
    *Building Clients for SOAP Web-Services:* This chapters covers building SOAP Web-Services
    clients over HTTP, JMS, XMPP, and E-mail protocols, using Spring-WS template classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Testing and Monitoring Web-Services"), *Testing
    and Monitoring Web-Services:* This chapter explains the testing of Web-Services
    using the latest features of Spring-WS and monitoring a Web-Service using tools
    such as soapUI and TCPMon.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Exception/SOAP Fault Handling"), *Exception/SOAP
    Fault Handling:* This chapter explains exception handling in the case of application/system
    failure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Logging and Tracing of SOAP Messages"), *Logging
    and Tracing of SOAP Messages:* In this chapter, we will see how to log important
    events and trace Web-Services.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Marshalling and Object-XML Mapping (OXM)"),
    *Marshalling and Object-XML Mapping (OXM):* We will discuss marshalling/un-marshalling
    technologies as well as creating a custom marshaller in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Securing SOAP Web-Services using XWSS Library"),
    *Securing SOAP Web-Services using XWSS Library:* This chapter covers security
    topics, such as encryption, decryption, digital signature authentication, and
    authorization using the Spring-WS feature, based on XWSS, and has a recipe about
    creating key stores.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Securing SOAP Web-Services using WSS4J Library"),
    *Securing SOAP Web-Services using WSS4J Library:* In this chapter, we will see
    security topics, such as encryption, decryption, digital signature authentication,
    and authorization using the Spring-WS feature, based on the WSS4J package.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. RESTful Web-Services"), *RESTful Web-Services:*
    This chapter explains REST Web-Service development using RESTful support in Spring.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Spring Remoting"), *Spring Remoting:* We
    will discuss contract-last Web-Service development using Spring remoting features
    to expose local business services as a Web-Service using Hessian/Burlap, JAX-WS,
    JMS, and a recipe to set up a Web-Service by Apache CXF using JAX-WS API.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java knowledge as well as basic Maven knowledge is a prerequisite. Having experience
    with Web-Service makes it easier for you to use recipes in your development environment,
    professionally. Basic recipes in the book help beginners learn Web-Service topics
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for those Java/J2EE developers that either have experience with
    Web-Service and for beginners. Since this book covers a variety of topics in Web-Service
    development, those who are already familiar with Web-Service can benefit from
    the book as a reference. Beginners can use this book to gain real-world experience
    of Web-Service development rapidly.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text are shown as follows: "MessageDispatcherServlet is the core
    component of Spring-WS."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "You can click on the **JUnit** tab, adjacent to the **Console** tab, to see whether
    the test case has succeeded or not".'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
