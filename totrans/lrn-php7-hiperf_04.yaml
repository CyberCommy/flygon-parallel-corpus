- en: Chapter 4. Improving Database Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Databases play a key role in dynamic websites. All incoming and outgoing data
    is stored in a database. So, if the database for a PHP application is not well
    designed and optimized, it will effect the application''s performance tremendously.
    In this chapter, we will look into the ways of optimizing our PHP application''s
    database. The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MyISAM and InnoDB storage engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Percona DB and Percona XtraDB storage engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL performance monitoring tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memcached
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is the most commonly used **Relational Database Management System** (**RDMS**)
    for the Web. It is open source and has a free community version. It provides all
    those features that can be provided by an enterprise-level database.
  prefs: []
  type: TYPE_NORMAL
- en: The default settings provided with the MySQL installation may not be so good
    for performance, and there are always ways to fine-tune these settings to get
    an improved performance. Also, remember that your database design plays a big
    role in performance. A poorly designed database will have an effect on the overall
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will discuss how to improve the MySQL database's performance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will modify the MySQL configuration's `my.cnf` file. This file is located
    in different places in different operating systems. Also, if you are using XAMPP,
    WAMP, or any other cross-platform web server solution stack package on Windows,
    this file will be located in the respective folder. Whenever `my.cnf` is mentioned,
    it is assumed that the file is open no matter which OS is used.
  prefs: []
  type: TYPE_NORMAL
- en: Query caching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Query caching is an important performance feature of MySQL. It caches `SELECT`
    queries along with the resulting dataset. When an identical `SELECT` query occurs,
    MySQL fetches the data from memory so that the query is executed faster and thus
    reduces the load on the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether query cache is enabled on a MySQL server or not, issue the
    following command in your MySQL command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will display the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query caching](graphics/B05225_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous result set shows that query cache is enabled. If query cache is
    disabled, the value will be `NO`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable query caching, open up the `my.cnf` file and add the following lines.
    If these lines are there and are commented, just uncomment them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the `my.cnf` file and restart the MySQL server. Let''s discuss what the
    preceding three configurations mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '`query_cache_type`: This plays a little confusing role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `query_cache_type` is set to `1` and `query_cache_size` is 0, then no memory
    is allocated, and query cache is disabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `query_cache_size` is greater than 0, then query cache is enabled, memory
    is allocated, and all queries that do not exceed the `query_cache_limit` value
    or use the `SQL_NO_CACHE` option are cached.
  prefs: []
  type: TYPE_NORMAL
- en: If the `query_cache_type` value is 0 and `query_cache_size` is `0`, then no
    memory is allocated, and cache is disabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `query_cache_size` is greater than 0, then memory is allocated, but nothing
    is cached—that is, cache is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: '`query_cache_size`: `query_cache_size`: This indicates how much memory will
    be allocated. Some think that the more memory is used, the better it will be,
    but this is just a misunderstanding. It all depends on the database size, query
    types and ratios between read and writes, hardware, database traffic, and other
    factors. A good value for `query_cache_size` is between 100 MB and 200 MB; then,
    you can monitor the performance and other variables on which query cache depends,
    as mentioned, and adjust the size. We have used 128MB for a medium traffic Magento
    website and it is working perfectly. Set this value to `0` to disable query cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`query_cache_limit`: This defines the maximum size of a query dataset to be
    cached. If a query dataset''s size is larger than this value, it isn''t cached.
    The value of this configuration can be guessed by finding out the largest `SELECT`
    query and the size of its returned dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storage engines (or table types) are a part of core MySQL and are responsible
    for handling operations on tables. MySQL provides several storage engines, and
    the two most widely used are MyISAM and InnoDB. Both these storage engines have
    their own pros and cons, but InnoDB is always prioritized. MySQL started using
    InnoDB as the default storage engine, starting from 5.5.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MySQL provides some other storage engines that have their own purposes. During
    the database design process, which table should use which storage engine can be
    decided. A complete list of storage engines for MySQL 5.6 can be found at [http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'A storage engine can be set at database level, which is then used as the default
    storage engine for each newly created table. Note that the storage engine is the
    table''s base, and different tables can have different storage engines in a single
    database. What if we have a table already created and want to change its storage
    engine? It is easy. Let''s say that our table name is `pkt_users`, its storage
    engine is MyISAM, and we want to change it to InnoDB; we will use the following
    MySQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will change the storage engine value of the table to `INNODB`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s discuss the difference between the two most widely used storage
    engines: MyISAM and InnoDB.'
  prefs: []
  type: TYPE_NORMAL
- en: The MyISAM storage engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A brief list of features that are or are not supported by MyISAM is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: MyISAM is designed for speed, which plays best with the `SELECT` statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a table is more static—that is, the data in this table is less frequently
    updated/deleted and mostly only fetched—then MyISAM is the best option for this
    table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MyISAM supports table-level locking. If a specific operation needs to be performed
    on the data in a table, then the complete table can be locked. During this lock,
    no operations can be performed on this table. This can cause performance degradation
    if the table is more dynamic—that is, if the data is frequently changed in this
    table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MyISAM does not have support for foreign keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MyISAM supports full-text search.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MyISAM does not support transactions. So, there is no support for `COMMIT` and
    `ROLLBACK`. If a query on a table is executed, it is executed, and there is no
    coming back.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data compression, replication, query caching, and data encryption is supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cluster database is not supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The InnoDB storage engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A brief list of features that are or are not supported by InnoDB is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: InnoDB is designed for high reliability and high performance when processing
    a high volume of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InnoDB supports row-level locking. It is a good feature and is great for performance.
    Instead of locking the complete table as with MyISAM, it locks only the specific
    row for the `SELECT`, `DELETE`, or `UPDATE` operations, and during these operations,
    other data in this table can be manipulated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InnoDB supports foreign keys and forcing foreign keys constraints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactions are supported. COMMIT and ROLLBACK are possible, so data can be
    recovered from a specific transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data compression, replication, query caching, and data encryption is supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InnoDB can be used in a cluster environment, but it does not have full support.
    However, InnoDB tables can be converted to the NDB storage engine, which is used
    in the MySQL cluster by changing the table engine to NDB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will discuss some more performance features that
    are related to InnoDB. Values for the following configuration are set in the `my.cnf`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: innodb_buffer_pool_size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This setting defines how much memory should be used for InnoDB data and the
    indices loaded into memory. For a dedicated MySQL server, the recommended value
    is 50-80% of the installed memory on the server. If this value is set too high,
    there will be no memory left for the operating system and other subsystems of
    MySQL, such as transaction logs. So, let's open our `my.cnf` file, search for
    `innodb_buffer_pool_size`, and set the value between the recommended value (that
    is, 50-80%) of our RAM.
  prefs: []
  type: TYPE_NORMAL
- en: innodb_buffer_pool_instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This feature is not that widely used. It enables multiple buffer pool instances
    to work together to reduce the chances of memory contentions on a 64-bit system
    and with a large value for `innodb_buffer_pool_size`.
  prefs: []
  type: TYPE_NORMAL
- en: There are different choices on which the value for `innodb_buffer_pool_instances`
    are calculated. One way is to use one instance per GB of `innodb_buffer_pool_size`.
    So, if the value of `innodb_bufer_pool_size` is 16 GB, we will set `innodb_buffer_pool_instances`
    to 16.
  prefs: []
  type: TYPE_NORMAL
- en: innodb_log_file_size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `innodb_log_file_size` is the the size of the log file that stores every
    query information executed. For a dedicated server, a value up to 4 GB is safe,
    but the time taken for crash recovery may increase if the log file's size is too
    large. So, in best practice, it is kept in between 1 and 4 GB.
  prefs: []
  type: TYPE_NORMAL
- en: The Percona Server - a fork of MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the Percona website, Percona is a free, fully compatible, enhanced,
    open source, and drop-in replacement for MySQL that provides superior performance,
    scalability, and instrumentation.
  prefs: []
  type: TYPE_NORMAL
- en: Percona is a fork of MySQL with enhanced features for performance. All the features
    available in MySQL are available in Percona. Percona uses an enhanced storage
    engine called XtraDB. According to the Percona website, it is an enhanced version
    of the InnoDB storage engine for MySQL that has more features, faster performance,
    and better scalability on modern hardware. Percona XtraDB uses memory more efficiently
    in high-load environments.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, XtraDB is a fork of InnoDB, so all the features available
    in InnoDB are available in XtraDB.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Percona Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Percona is only available for Linux systems. It is not available for Windows
    as of now. In this book, we will install Percona Server on Debian 8\. The process
    is same for both Ubuntu and Debian.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install the Percona Server on other Linux flavors, check out the Percona
    installation manual at [https://www.percona.com/doc/percona-server/5.5/installation.html](https://www.percona.com/doc/percona-server/5.5/installation.html).
    As of now, they provide instructions for Debian, Ubuntu, CentOS, and RHEL. They
    also provide instructions to install the Percona Server from sources and Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s install the Percona Server through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your sources list file using the following command in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If prompted for a password, enter your Debian password. The file will be opened.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, place the following repository information at the end of the `sources.list`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file by pressing *CTRL* + *O* and close the file by pressing *CTRL*
    + *X*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your system using the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the installation by issuing the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The installation will be started. The process is the same as the MySQL server
    installation. During the installation, the root password for the Percona Server
    will be asked; you just need to enter it. When the installation is complete, you
    will be ready to use the Percona Server in the same way as MySQL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Percona Server and optimize it as discussed in the earlier sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MySQL performance monitoring tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is always a need to monitor the performance of database servers. For this
    purpose, there are many tools available that make it easy to monitor MySQL servers
    and performance. Most of them are open source and free, and some provide a GUI.
    The command-line tools are more powerful and the best to use, though it takes
    a little time to understand and get used to them. We will discuss a few here.
  prefs: []
  type: TYPE_NORMAL
- en: phpMyAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the most famous, web-based, open source, and free tool available to
    manage MySQL databases. Despite managing a MySQL server, it also provides some
    good tools to monitor a MySQL server. If we log in to phpMyAdmin and then click
    on the **Status** tab at the top, we will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![phpMyAdmin](graphics/B05225_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Server** tab shows us basic data about the MySQL server, such as when
    it started, how much traffic is handled from the last start, information about
    connections, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The next is **Query Statistics**. This section provides full stats about all
    of the queries executed. It also provides a pie chart, which visualizes the percentage
    of each query type, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: If we carefully look at the chart, we can see that we have 54% of the `SELECT`
    queries running. If we use some kind of cache, such as Memcached or Redis, these
    `SELECT` queries should not be this high. So, this graph and statistics information
    provides us with a mean to analyze our cache systems.
  prefs: []
  type: TYPE_NORMAL
- en: '![phpMyAdmin](graphics/B05225_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next option is **All Status Variables**, which lists all of the MySQL variables
    and their current values. In this list, one can easily find out how MySQL is configured.
    In the following screenshot, our query cache variables and their values are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![phpMyAdmin](graphics/B05225_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next option that phpMyAdmin provides is **Monitor**. This is a very powerful
    tool that displays the server resources and their usages in real time in a graphical
    way.
  prefs: []
  type: TYPE_NORMAL
- en: '![phpMyAdmin](graphics/B05225_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, we can see **Questions**, **Connections/Processes**,
    **System CPU Usage**, **Traffic**, **System Memory**, and **System swap** in a
    nice graphical interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last important section is **Advisor**. This gives us advice regarding the
    settings for performance. It gives you as many details as possible so that the
    MySQL server can be tuned for performance. A small section from the advisor section
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![phpMyAdmin](graphics/B05225_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If all these advices are applied, some performance can be gained.
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL workbench
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a desktop application from MySQL and is fully equipped with tools to
    manage and monitor the MySQL server. It provides us with a dashboard for performance
    in which all the data related to the server can be seen in a beautiful and graphical
    way, as shown in the screenshot that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The MySQL workbench](graphics/B05225_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Percona Toolkit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the tools mentioned before are good and provide some visual information
    about our database server. However, they are not good enough to show us some more
    useful information or provide more features that can make our lives easy. For
    this purpose, another command-line toolkit is available, which is called Percona
    Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Percona Toolkit is a set of more than 30 command-line tools, which includes
    those used to do an analysis of slow queries, archive, optimize indices and many
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Percona Toolkit is free and open source and is available under GPL. Most of
    its tools run on Linux/Unix-based systems, but some can run on Windows too. An
    installation guide can be found at [https://www.percona.com/doc/percona-toolkit/2.2/installation.html](https://www.percona.com/doc/percona-toolkit/2.2/installation.html).
    A complete set of tools can be found at [https://www.percona.com/doc/percona-toolkit/2.2/index.html](https://www.percona.com/doc/percona-toolkit/2.2/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's discuss a few tools in the subsections to follow.
  prefs: []
  type: TYPE_NORMAL
- en: pt-query-digest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This tool analyzes queries from slow, general, and binary log files. It generates
    a sophisticated report about the queries. Let''s run this tool for slow queries
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering the preceding command in the terminal, we will see a long report.
    Here, we will discuss a short part of the report, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![pt-query-digest](graphics/B05225_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, slow queries are listed with the slowest at the
    top. The first query, which is a `SELECT` query, takes the most time, which is
    about 12% of the total time. The second query, which is also a `SELECT` query,
    takes 11.5% of the total time. From this report, we can see which queries are
    slow so that we can optimize them for the best performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, pt-query-digest displays information for each query, as shown in the
    following screenshot. In the screenshot, data about the first query is mentioned,
    including the total timing; percentage (pct) of time; min, max, and average time;
    bytes sent; and some other parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![pt-query-digest](graphics/B05225_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: pt-duplicate-key-checker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This tool finds duplicate indices and duplicate foreign keys either in a set
    of specified tables or in a complete database. Let''s execute this tool again
    in a large database using the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed, the following output is printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![pt-duplicate-key-checker](graphics/B05225_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the end of the report, a summary of the indices is displayed, which is self-explanatory.
    Also, this tool prints out an `ALTER` query for each duplicate index that can
    be executed as a MySQL query to fix the index, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This tool displays MySQL config information and advice for each query. This
    is a good tool that can help us set up MySQL configurations properly. We can execute
    this tool by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After execution, the following output will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![pt-duplicate-key-checker](graphics/B05225_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are many other tools provided by Percona Toolkit that are out of the scope
    of this book. However, the documentation at [https://www.percona.com/doc/percona-toolkit/2.2/index.html](https://www.percona.com/doc/percona-toolkit/2.2/index.html)
    is very helpful and easy to understand. It provides complete details for each
    tool, including its description and risks, how to execute it, and other options
    if there are any. This documentation is worth reading if you wish to understand
    any tool in Percona Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Percona XtraDB Cluster (PXC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Percona XtraDB Cluster provides a high-performance cluster environment that
    can help easily configure and manage a database on multiple servers. It enables
    databases to communicate with each other using the binary logs. The cluster environment
    helps divide the load among different database servers and provides safety from
    failure in case a server is down.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the cluster, we need the following servers:'
  prefs: []
  type: TYPE_NORMAL
- en: One server with IP 10.211.55.1, which we will call Node1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A second server with IP 10.211.55.2, which we will call Node2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And a third server with IP 10.211.55.3, which we will call Node3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we already have the Percona repository in our sources, let''s start by installing
    and configuring Percona XtraDB Cluster, also called PXC. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install Percona XtraDB Cluster on Node1 by issuing the following command
    in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The installation will start similarly to a normal Percona Server installation.
    During the installation, the password for a root user will be also asked.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the installation is complete, we need to create a new user that has replication
    privileges. Issue the following commands in the MySQL terminal after logging in
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first query creates a user with the username `sstpackt` and password `sstuserpassword`.
    The username and password can be anything, but a good and strong password is recommended.
    The second query sets proper privileges to our new user, including locking tables
    and replication. The third query refreshes the privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the MySQL configuration file located at `/etc/mysql/my.cnf`. Then,
    place the following configuration in the `mysqld` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Save the file after adding the preceding configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, start the first node by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will bootstrap the first node. Bootstrapping means getting the initial
    cluster up and running and defining which node has the correct information and
    which one all the other nodes should sync to. As Node1 is our initial cluster
    node and we created a new user here, we have to only bootstrap Node1.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SST** stands for **State Snapshot Transfer**. It is responsible for copying
    full data from one node to another. It is only used when a new node is added to
    the cluster and this node has to get complete initial data from an existing node.
    Three SST methods are available in `Percona XtraDB Cluster`, `mysqldump`, `rsync`,
    and `xtrabackup`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the MySQL terminal on the first node and issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'A very long list will be displayed. A few of them are shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Percona XtraDB Cluster (PXC)](graphics/B05225_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, repeat Step 1 and Step 3 for all nodes. The only configuration that needs
    to be changed for each node is `wsrep_node_address`, which should be the IP address
    of the node. Edit the `my.cnf` configuration file for all the nodes and place
    the node address in `wsrep_node_address`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the two new nodes by issuing the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now each node can be verified by repeating step 7.
  prefs: []
  type: TYPE_NORMAL
- en: To verify whether the cluster is working fine, create a database in one node
    and add some tables and data into the tables. After this, check other nodes for
    the newly created database, tables, and the data entered in each table. We will
    have all this data synced to each node.
  prefs: []
  type: TYPE_NORMAL
- en: Redis – the key-value cache store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redis is an open source, in-memory key-value data store that is widely used
    for database caching. According to the Redis website ([www.Redis.io](http://www.Redis.io)),
    Redis supports data structures such as strings, hashes, lists, sets, and sorted
    lists. Also, Redis supports replication and transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Redis installation instructions can be found at [http://redis.io/topics/quickstart](http://redis.io/topics/quickstart).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether Redis is working fine on your server or not, start the Redis
    server instance by running the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then issue the following command in a different terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If the output of the preceding command is as follows, the Redis server is ready
    to be run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Redis – the key-value cache store](graphics/B05225_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Redis provides a command line, which provides some useful commands. There are
    two ways to execute commands on the Redis server. You can either use the previous
    method or just type `redis-cli` and hit *Enter*; we will be presented with the
    Redis command line, where we can then just type the Redis commands that will be
    executed.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Redis uses the IP 127.0.0.1 and port 6379\. Remote connections are
    not allowed, though remote connections can be enabled. Redis stores data that
    is already created in the database. Database names are integer numbers, such as
    0, 1, 2, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We won''t go in much detail about Redis here, but we will discuss a few commands
    that are worth noting. Note that all these commands can be either executed in
    the previous way, or we can just enter the `redis-cli` command window and type
    the commands without typing `redis-cli`. Also, the following commands can be executed
    directly in PHP, which makes it possible to clear out the cache directly from
    our PHP application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SELECT`: This command changes the current database. By default, redis-cli
    will be opened at database 0\. So, if we want to go to database 1, we will run
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`FLUSHDB`: This command flushes the current database. All keys or data from
    the current database will be deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FLUSHALL`: This command flushes all the databases, no matter which database
    it is executed in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KEYS`: This command lists all the keys in the current database matching a
    pattern. The following command lists all the keys in the current database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, it's time for some action in PHP with Redis.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of writing this topic, PHP 7 does not have built-in support for Redis yet.
    For this book's purpose, we compiled the PHPRedis module for PHP 7, and it works
    very nicely. The module can be found at [https://github.com/phpredis/phpredis](https://github.com/phpredis/phpredis).
  prefs: []
  type: TYPE_NORMAL
- en: Connecting with the Redis server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned before, by default, the Redis server runs on the IP 127.0.0.1
    and port 6379\. So, to make a connection, we will use these details. Take a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we instantiated a Redis object by the name of `redisObject`,
    which is then used in the second line to connect to the Redis server. The host
    is the local IP address 127.0.0.1, and the port is 6379\. The `connect()` method
    returns `TRUE` if the connection is successful; otherwise, it returns `FALSE`.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and fetching data from the Redis server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we are connected to our Redis server. Let''s save some data in the Redis
    database. For our example, we want to store some string data in the Redis database.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `set` method stores data into the current Redis database and takes two
    arguments: a key and a value. A key can be any unique name, and a value is what
    we need to store. So, our key is `packt_title`, and the value is `Packt Publishing`.
    The default database is always set to 0 (zero) unless explicitly set otherwise.
    So, the preceding `set` method will save our data to database 0 with the `packt_title`
    key.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the `get` method is used to fetch data from the current database. It takes
    the key as the argument. So, the output of the preceding code will be our saved
    string data `Packt Publishing`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what about arrays or a set of data coming from the database? We can store
    them in several ways in Redis. Let''s first try the normal strings way, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The output of the preceding code will be the same array. For testing purposes,
    we can comment out the `set` method and check whether the `get` method fetches
    the data or not. Remember that in the preceding code, we stored the array as a
    `json` string, then fetched it as a `json` string, and decoded it to the array.
    This is because we used the methods that are available for the string datatype,
    and it is not possible to store arrays in the string datatype.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we used the `select` method to select another database and use it instead
    of 0\. This data will be stored in database 1 and can't be fetched if we are at
    database 0.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A complete discussion of Redis is out of the scope of this book. So, we have
    provided an introduction. Note that if you use any framework, you have built-in
    libraries available for Redis that are easy to use, and any datatype can be used
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: Redis management tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Redis management tools provide an easy way to manage Redis databases. These
    tools provide features so that every key can be checked and a cache can be cleared
    easily. One default tool comes with Redis, called Redis-cli, and we discussed
    it earlier. Now, let''s discuss a visual tool that is great and easy to use, called
    **Redis Desktop Manage** (**RDM**). A screenshot of the main window of RDM looks
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Redis management tools](graphics/B05225_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'RDM provides the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It connects to remote multiple Redis servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It displays data in a specific key in different formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It adds new keys to a selected database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It adds more data to a selected key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It edits/deletes keys and their names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports SSH and SSL and is cloud ready
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some other tools that can be used, but RDM and Redis-cli are the best
    and easiest to use.
  prefs: []
  type: TYPE_NORMAL
- en: Memcached key-value cache store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the Memcached official website, it's a free, open source, high
    performance, and distributed memory object caching system. Memcached is an in-memory
    key-value store that can store datasets from a database or API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly to Redis, Memcached also helps a lot in speeding up a website. It
    stores the data (strings or objects) in the memory. This allows us to reduce the
    communication with outside resources, such as databases and or APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are assuming that Memcached is installed on the server. Also, the PHP extension
    for PHP 7 is also assumed to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s play a little with Memcachd in PHP. Take a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a very simple example of using Memcached. The comments
    are written with each line of code and are self-explanatory. After instantiating
    a Memcached object, we have to add a Memcached server. By default, the Memcached
    server server runs on the localhost IP, which is 127.0.0.1, and on the port 11211\.
    After this, we checked for some data using a key, and if it is available, we can
    process it (in this case, we displayed it. It can be returned, or whatever processing
    is required can be carried out.). If the data is not available, we can just add
    it. Please note that the data can come from a remote server API or from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have just provided an introduction to Memcached and how it can help us store
    data and improve performance. A complete discussion is not possible in this title.
    A good book on Memcached is *Getting Started with Memcached* by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered MySQL and the Percona Server. Also, we discussed
    in detail query caching and other MySQL configuration options for performance
    in detail. We mentioned different storage engines, such as MyISAM, InnoDB, and
    Percona XtraDB. We also configured Percona XtraDB Cluster on three nodes. We discussed
    different monitoring tools, such as PhpMyAdmin monitoring tools, MySQL workbench
    performance monitoring, and Percona Toolkit. We also discussed Redis and Memcached
    caching for PHP and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss benchmarking and different tools. We will
    use XDebug, Apache JMeter, ApacheBench, and Siege to benchmark different open
    source systems, such as WordPress, Magento, Drupal, and different versions of
    PHP, and compare their performance with PHP 7.
  prefs: []
  type: TYPE_NORMAL
