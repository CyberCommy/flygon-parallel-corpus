- en: Access Control Lists and Shared Directory Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we reviewed the basics of Discretionary Access Control.
    In this chapter, we'll take our discussion of DAC a step further. We'll look at
    some more advanced techniques that you can use to make DAC do exactly what you
    want it to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an **access control list** (**ACL**) for either a user or a group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an inherited ACL for a directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a specific permission by using an ACL mask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `tar --acls` option to prevent loss of ACLs during a backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user group and adding members to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a shared directory for a group, and setting the proper permissions
    on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the SGID bit and the sticky bit on the shared directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ACLs to allow only certain members of the group to access a file in the
    shared directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an access control list for either a user or a group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The normal Linux file and directory permissions settings are okay, but they're
    not very granular. With an ACL, we can allow only a certain person to access a
    file or directory, or we can allow multiple people to access a file or directory
    with different permissions for each person. If we have a file or a directory that's
    wide open for everyone, we can use an ACL to allow different levels of access
    for either a group or an individual. Towards the end of the chapter, we'll put
    what we've learned all together in order to manage a shared directory for a group.
  prefs: []
  type: TYPE_NORMAL
- en: 'You would use `getfacl` to view an access control list for a file or directory.
    (Note that you can''t use it to view all files in a directory at once.) To begin,
    let''s use `getfacl` to see if we have any access control lists already set on
    the `acl_demo.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All we see here are just the normal permissions settings, so there's no ACL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step for setting an ACL is to remove all permissions from everyone
    except for the user of the file. That''s because the default permissions settings
    allow members of the group to have read/write access, and others to have read
    access. So, setting an ACL without removing those permissions would be rather
    senseless:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When using `setfacl` to set an ACL, you can allow a user or a group to have
    any combination of read, write, or execute privileges. In our case, let''s say
    that I want to let Maggie read the file, and to prevent her from having write
    or execute privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `-m` option of `setfacl` means that we're about to modify the ACL. (Well,
    to create one in this case, but that's okay.) TheÂ `u:` means that we're setting
    an ACL for a user. We then list the user's name, followed by another colon, and
    the list of permissions that we want to grant to this user. In this case, we're
    only allowing Maggie read access. We complete the command by listing the file
    to which we want to apply this ACL. The `getfacl` output shows that Maggie does
    indeed have read access. Finally, we see in the `ls -l` output that the group
    is listed as having read access, even though we've set the `600` permissions setting
    on this file. But, there's also a `+` sign, which tells us that the file has an
    ACL. When we set an ACL, the permissions for the ACL show up as group permissions
    in `ls -l`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To take this a step further, let''s say that I want Frank to have read/write
    access to this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, we can have two or more different ACLs assigned to the same file. In the
    `ls -l` output, we see that we have `rw` permissions set for the group, which
    is really just a summary of permissions that we've set in the two ACLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set an ACL for group access by replacing the `u:` with a `g:`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Members of the `accounting` group now have read access to this file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an inherited access control list for a directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you'll want all files that get created in a shared directory
    to have the same access control list. We can do that by applying an inherited
    ACL to the directory. Although, understand that, even though this sounds like
    a cool idea, creating files in the normal way will cause files to have the read/write
    permissions set for the group, and the read permission set for others. So, if
    you're setting this up for a directory where users just create files normally,
    the best that you can hope to do is to create an ACL that adds either the write
    or execute permissions for someone. Either that, or ensure that users set the
    `600` permissions settings on all files that they create, assuming that users
    really do need to restrict access to their files.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if you're creating a shell script that creates files in a
    specific directory, you can include `chmod` commands to ensure that the files
    get created with the restrictive permissions that are necessary to make your ACL
    work as intended.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demo, let''s create the `new_perm_dir` directory, and set the inherited
    ACL on it. I want to have read/write access for files that my shell script creates
    in this directory, and for Frank to have only read access. I don''t want anyone
    else to be able to read any of these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'All I had to do to make this an inherited ACL was to add the `d:` before the
    `u:frank`. I left the default permissions settings on the directory, which allows
    everyone read access to the directory. Next, I''ll create the `donnie_script.sh`
    shell script that will create a file within that directory, and that will set
    read/write permissions for only the user of the new files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After making the script executable, I''ll run it and view the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: So, `new_file.txt` got created with the correct permissions settings, and with
    an ACL that allows Frank to read it. (I know that this is a really simplified
    example, but you get the idea.)
  prefs: []
  type: TYPE_NORMAL
- en: Removing a specific permission by using an ACL mask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can remove an ACL from a file or directory with the `-x` option. Let''s
    go back to the `acl_demo.txt` file that I created earlier, and remove the ACL
    for Maggie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'So, Maggie''s ACL is gone. But, the `-x` option removes the entire ACL, even
    if that''s not what you really want. If you have an ACL with multiple permissions
    set, you might just want to remove one permission, while leaving the others. Here,
    we see that Frank still has his ACL that grants him read/write access. Let''s
    now say that we want to remove the write permission, while still allowing him
    the read permission. For that, we''ll need to apply a mask:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `m::r` sets a read-only mask on the ACL. Running `getfacl` shows that Frank
    still has a read/write ACL, but the comment to the side shows his effective permissions
    to be read-only. So, Frank's write permission for the file is now gone. And, if
    we had ACLs set for other users, this mask would affect them the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Using the tar --acls option to prevent the loss of ACLs during a backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you ever need to use `tar` to create a backup of either a file or a directory
    that has ACLs assigned to it, you''ll need to include the `--acls` option switch.
    Otherwise, the ACLs will be lost. To show this, I''ll create a backup of the `perm_demo_dir`
    directory without the `--acls` option. First, note that I do have ACLs on files
    in this directory, as indicated by the `+` sign on the last two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I''ll do the backup without the `--acls`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks good, right? Ah, but looks can be deceiving. Watch what happens when
    I delete the directory, and then restore it from the backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'I don''t even have to use `getfacl` to see that the ACLs are gone from the
    `perm_demo_dir` directory and all of its files, because the `+` signs are now
    gone from them. Now, let''s see what happens when I include the `--acls` option.
    First, I''ll show you that an ACL is set for this directory and its only file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I''ll use tar with `--acls`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll now delete the `new_perm_dir` directory, and restore it from backup.
    Again, I''ll use the `--acls` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The presence of the `+` signs indicates that the ACLs did survive the backup
    and restore procedure. The one slightly tricky part about this is that you must
    use `--acls` for both the backup and the restoration. If you omit the option either
    time, you will lose your ACLs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user group and adding members to it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, I've been doing all of the demos inside my own home directory, just
    for the sake of showing the basic concepts. But, the eventual goal is to show
    you how to use this knowledge to do something more practical, such as controlling
    file access in a shared group directory. The first step is to create a user group
    and to add members to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that we want to create a `marketing` group for members ofâyou guessed
    itâthe marketing department:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now add some members. You can do that in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Add members as we create their user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `usermod` to add members that already have user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `/etc/group` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding members as we create their user accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we can add members to the group as we create their user accounts, using
    the `-G` option of `useradd`. On Red Hat or CentOS, the command would look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On Debian/Ubuntu, the command would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And, of course, I''ll need to assign Cleopatra a password in the normal manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Using usermod to add an existing user to a group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The good news is that this works the same on either Red Hat or CentOS or Debian/Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the `-a` wasn't necessary, because Maggie wasn't a member of any
    other secondary group. But, if she had already belonged to another group, the
    `-a` would have been necessary to keep from overwriting any existing group information,
    thus removing her from the previous groups.
  prefs: []
  type: TYPE_NORMAL
- en: This method is especially handy for use on Ubuntu systems, where it was necessary
    to use `adduser` in order to create encrypted home directories. (As we saw in
    a previous chapter, `adduser` doesn't give you the chance to add a user to a group
    as you create the account.)
  prefs: []
  type: TYPE_NORMAL
- en: Adding users to a group by editing the /etc/group file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This final method is a good way to cheat, to speed up the process of adding
    multiple existing users to a group. First, just open the `/etc/group` file in
    your favorite text editor, and look for the line that defines the group to which
    you want to add members:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'So, I''ve already added Cleopatra and Maggie to this group. Let''s edit this
    to add a couple more members:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When you're done, save the file and exit the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `groups` command for each of them will show that our wee bit of cheating
    works just fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This method is extremely handy for whenever you need to add lots of members
    to a group at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a shared directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next act in our scenario involves creating a shared directory that all
    the members of our marketing department can use. Now, this is another one of those
    areas that engenders a bit of controversy. Some people like to put shared directories
    in the root level of the filesystem, while others like to put shared directories
    in the `/home` directory. And, some people even have other preferences. But really,
    it''s a matter of personal preference and/or company policy. Other than that,
    it really doesn''t much matter where you put them. For our purposes, to make things
    simple, I''ll just create the directory in the root level of the filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The new directory belongs to the root user. It has a permissions setting of
    `755`, which permits read and execute access to everybody, and write access only
    to the root user. What we really want is to allow only members of the marketing
    department to access this directory. We''ll first change ownership and group association,
    and then we''ll set the proper permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we don''t have any one particular user that we want to own the
    directory, and we don''t really want for the root user to own it. So, assigning
    ownership to the `nobody` pseudo user account gives us a way to deal with that.
    I then assigned the `770` permissions value to the directory, which allows read/write/execute
    access to all `marketing` group members, while keeping everyone else out. Now,
    let''s let one of our group members log in to see if she can create a file in
    this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Okay, it works, except for one minor problem. The file belongs to Vicky, as
    it should. But, it's also associated with Vicky's personal group. For the best
    access control of these shared files, we need them to be associated with the `marketing`
    group.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the SGID bit and the sticky bit on the shared directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I've told you before that it's a bit of a security risk to set either the SUID
    or SGID permissions on files, especially on executable files. But, it is both
    completely safe and very useful to set SGID on a shared directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'SGID behavior on a directory is completely different from SGID behavior on
    a file. On a directory, SGID will cause any files that anybody creates to be associated
    with the same group with which the directory is associated. So, bearing in mind
    that the SGID permission value is `2000`, let''s set SGID on our `marketing` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `s` in the executable position for the group indicates that the command
    was successful. Let''s now let Vicky log back in to create another file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Vicky''s second file is associated with the `marketing` group, which is just
    what we want. Just for fun, let''s let Charlie do the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, Charlie''s file is associated with the `marketing` group. But, for some
    strange reason that nobody understands, Charlie really doesn''t like Vicky, and
    decides to delete her files, just out of pure spite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The system complains that Vicky's original file is write-protected, since it's
    still associated with her personal group. But, the system does still allow Charlie
    to delete it, even without sudo privileges. And, since Charlie has write access
    to the second file, due to its association with the `marketing` group, the system
    allows him to delete it without question.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay. So, Vicky complains about this, and tries to get Charlie fired. But,
    our intrepid administrator has a better idea. He''ll just set the sticky bit in
    order to keep this from happening again. Since the SGID bit has a value of `2000`,
    and the sticky bit has a value ofÂ `1000`, we can just add the two together to
    get a value of `3000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `T` in the executable position for others indicates that the sticky bit
    has been set. Since the `T` is uppercase, we know that the executable permission
    for others has not been set. Having the sticky bit set will prevent group members
    from deleting anybody else''s files. Let''s let Vicky show us what happens when
    she tries to retaliate against Charlie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Even with the `-f` option, Vicky still can't delete Charlie's file. Vicky doesn't
    have `sudo` privileges on this system, so it would be useless for her to try that.
  prefs: []
  type: TYPE_NORMAL
- en: Using ACLs to access files in the shared directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As things currently stand, all members of the `marketing` group have read/write
    access to all other group members' files. Restricting access to a file to only
    specific group members is the same two-step process that we've already covered.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the permissions and creating the ACL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, Vicky sets the normal permissions to allow only her to access her file.
    Then, she''ll set the ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s nothing here that you haven''t already seen. Vicky just removed all
    permissions from the group and from others, and set an ACL that only allows Cleopatra
    to read the file. Let''s see if Cleopatra actually can read it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: So far, so good. But, can Cleopatra write to it?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Okay, Cleopatra can't do that, since Vicky only allowed her the read privilege
    in the ACL.
  prefs: []
  type: TYPE_NORMAL
- en: Charlie tries to access Vicky's file with an ACL set for Cleopatra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, though, what about that sneaky Charlie, who wants to go snooping in other
    users' files?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: So, yes, it's really true that only Cleopatra can access Vicky's file, and even
    then only for reading.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab â creating a shared group directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this lab, you''ll just put together everything that you''ve learned in
    this chapter to create a shared directory for a group. You can do this on either
    of your virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On either virtual machine, create the `sales` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Create the users Mimi, Mr. Gray, and Mommy, adding them to the sales group as
    you create the accounts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the CentOS VM, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Ubuntu VM, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Assign each user a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `sales` directory in the root level of the filesystem. Set proper
    ownership and permissions, including the SGID and sticky bits:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in as Mimi, and have her create a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Have Mimi set an ACL on her file, allowing only Mr. Gray to read it. Then,
    have Mimi log back out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Have Mr. Gray log in to see what he can do with Mimi''s file. Then, have Mr.
    Gray create his own file and log back out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Mommy will now log in and try to wreak havoc by snooping in other users'' files,
    and by trying to delete them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: End of Lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to take Discretionary Access Control to the proverbial
    next level. We first saw how to create and manage access control lists to provide
    more fine-grained access control over files and directories. We then saw how to
    create a user group for a specific purpose, and how to add members to it. Then,
    we saw how we can use the SGID bit, the sticky bit, and access control lists to
    manage a shared group directory.
  prefs: []
  type: TYPE_NORMAL
- en: But, sometimes, Discretionary Access Control might not be enough to do the job.
    For those times, we also have mandatory access control, which we'll cover in the
    next chapter. I'll see you there.
  prefs: []
  type: TYPE_NORMAL
