- en: Chapter 3. Objectives and Target Behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we had an overview of the gamification design process,
    starting with defining our business objectives and target behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of developing our gamification system is to cause behavior change.
    Before our users had our gamified system, they behaved in a certain way. After
    we implement our system, we intend for them to behave differently. We want them
    to take on behavior that is in line with our business objectives. Hence, in this
    chapter, we will take a closer look at what really needs to happen behind the
    scenes to get our users (players) to take the actions we need them to take.
  prefs: []
  type: TYPE_NORMAL
- en: 'We uncovered 10 actions that we wanted our players to take in the previous
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Check their discussion thread count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review a differing point of view section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a target discussion amount for a particular time period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a target number of differing points of view" to review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch a video (or some instructional material) on how to use the discussion
    area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch a video (or some instructional material) on the value of viewing other
    perspectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Participate in the discussion groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read through other users' discussions posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Participate in the discussion groups over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read through other users' perspectives over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We hypothesize that if players take these 10 actions on a regular and consistent
    basis we could meet our business objectives of:'
  prefs: []
  type: TYPE_NORMAL
- en: Increasing engagement in discussion with others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increasing the level of consideration for different perspectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We hope that if we meet these two objectives, we can fulfill our mission of
    teaching, and in turn, help our players learn thinking skills by interacting with
    our gamified system.
  prefs: []
  type: TYPE_NORMAL
- en: We need to keep in mind when designing our system that a behavior really isn't
    just one action but a chain of actions that we want our players to take. We will
    map out our behavior chain (the actions that we want users to take) in more detail
    later in this chapter. Ideally, we can create a behavior cycle (that is, habit)
    in our players. Habits, however, aren't happenstance; we must design our system
    to encourage the behaviors that we want to become habits.
  prefs: []
  type: TYPE_NORMAL
- en: It is important that we find the smallest behavior or action, and if possible,
    attach that action to an existing action.
  prefs: []
  type: TYPE_NORMAL
- en: For example, most people are in the habit of checking their e-mails first thing
    in the morning. It is debatable whether this is a good or bad habit, but it is
    a habit of many of our players nonetheless. We want our players to read through
    other players' posts as a target behavior. A small behavior they could take on
    towards actually taking that action is simply seeing who has posted in the last
    24 hours. We could tie this to their existing habit of checking their e-mails
    by sending them a simple dashboard via e-mail everyday. They, of course, could
    turn this feature off, leaving them in control. The player would have the ability
    to actually take the action of reading posts and responding to posts directly
    from this dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Fogg behavioral model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a fundamental question that we need to ask and ultimately answer. Professor
    BJ Fogg, founder and director of the Persuasive Technology lab at Stanford University,
    has done an excellent job of describing why persons take a particular action with
    the **Fogg Behavioral Model** (**FBM**). It is a tool that designers can use to
    understand why users are taking or not taking a particular action or behavior.
  prefs: []
  type: TYPE_NORMAL
- en: According to the FBM, if your users are not taking a designed action, it's because
    something is missing from the behavior equation. The FBM behavior equation states
    *Behavior = Motivation + Ability + Trigger*.
  prefs: []
  type: TYPE_NORMAL
- en: 'When there is an adequate level of motivation coupled with an appropriate level
    of ability and the appropriate trigger, a behavior happens every time. This can
    be seen from the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fogg behavioral model](graphics/8119_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: BJ Fogg''s Behavioral Model ([http://www.behaviormodel.org/](http://www.behaviormodel.org/))'
  prefs: []
  type: TYPE_NORMAL
- en: At the point that these two concepts—motivation and ability trigger—converge,
    behavior occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What is actually motivating to one person may not be motivating to another,
    hence the need for a clear understanding of your players and the motivational
    type. But according to Professor Fogg, motivation is made up of three components.
    The three subcomponents of motivation are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sensation: measured on the continuum of pleasure to pain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Anticipation: measured on the continuum of hope to fear'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Social cohesion: measured on the continuum of acceptance to rejection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each person, their degree of motivation to take a specific action can be
    measured along these three continuums, resulting in a measure of how motivated
    they are to take that action. Hence our task is to make our target behaviors as
    pleasurable as possible, inspire as much hope as possible, and make them as socially
    acceptable as possible. We must keep in mind that these are all continually fluctuating
    variables depending on the individual.
  prefs: []
  type: TYPE_NORMAL
- en: Ability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming that a user is sufficiently motivated, he/she must also have the ability
    to take the desired action. Many applications are very naïve when it comes to
    their users' ability to do what it is that they expect their users to do. Fogg's
    model suggests that simply having the motivation to do something is not enough
    to actually do it. Ability must be present also.
  prefs: []
  type: TYPE_NORMAL
- en: Fogg discusses ability in the context of perceived simplicity. A user is more
    able to take a desired action if he/she deems that action as simple. The simpler
    it is perceived to be from the users' perspective, the higher it is on the ability
    continuum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fogg takes this concept further by suggesting that simplicity is a function
    of resource scarcity. The more resources that a user has, the simpler a task is.
    The six key resources to look at when attempting to ascertain a user''s perceived
    simplicity are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Money**: How much money the task requires relative to how much money the
    user has'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time**: How much time the task requires relative to how much time the user
    has'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Physical effort**: How much physical effort the task requires relative to
    the users physical ability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Brain cycles**: How hard the user will need to think to complete the tasks
    relative to the users'' intellectual capacity at the time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social deviance**: How much taking the action will take the user out of his/her
    social norm'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-routine**: How much the user will need to veer from their normal routine
    to take the action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is to the degree that a user perceives that he/she has the adequate resources
    to take an action that describes how simple the task is for him/her and how able
    he/she is to take the action.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are referring to perceived simplicity. Truly, simplicity will end
    when the user runs out of the aforementioned resources. At the moment he/she runs
    out of money, time, physical ability, and so on, the task becomes, by definition,
    difficult. We are, however, referring to perceived simplicity. Perceived simplicity
    refers to the amount of resources the user thinks a task should take compared
    to how many resources it actually takes.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if our user thinks it will take 10 minutes to log in, read a post,
    and respond to it but they actually do it in 4 minutes, they will perceive that
    task as simple. This is the ideal scenario. Ideally, we want our target behaviors
    to be simpler (that is, require fewer resources) than our players originally anticipated.
    In short, we will be sure to raise the resource expectations of our users and
    then work to make our target behaviors as painless as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose that we now have a sufficiently motivated user with the ability to
    take the action defined in our target behavior. In other words, they are over
    the activation threshold for our target behavior. But for some reason, our players
    are not behaving like we expect them to. According to FBM, there must be an appropriate
    trigger to make the user aware of taking the action and why he/she should take
    that action. All of this needs to be happening simultaneously. **Triggers** come
    in three forms depending on the user and where he/she is relative to the activation
    threshold:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Facilitator**: This form is most effective when the motivation level is high
    but the ability is low. This trigger attempts to make it easier for the already
    motivated user to go ahead and take on the target behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signal**: This form is most effective when the motivational level and the
    ability to do the task are high. This trigger serves merely as a reminder to take
    an action (for example, an alarm clock).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spark**: This form is most effective when the ability is high but the motivation
    level is not quite as high. A spark temporarily raises the user''s motivation
    level. It is like he/she is on fire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When attempting to improve the chances of players taking our desired behaviors,
    we will work on ensuring that the necessary triggers are present. We will then
    turn our efforts to reducing the activation threshold by simplifying the behavior
    and increasing the user's motivation to take the action. We will do the easier
    things first, and then we will work on the harder tasks. It is easier to present
    a trigger for action than it is to make the task easier to do. Assuming that you
    are clearly presenting the trigger, and have simplified the tasks, we can turn
    our attention to motivating the player to take action.
  prefs: []
  type: TYPE_NORMAL
- en: Triggers in our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's turn our attention to some of our potential triggers for our VUPoint e-learning
    application. Remember that timing is the key to effective triggers. We need to
    make our players aware of when they are over the activation threshold. This is
    when their motivation and ability levels are high enough for a trigger to be affective.
  prefs: []
  type: TYPE_NORMAL
- en: One potential trigger that we have mentioned already is the daily dashboard
    e-mail. Another might be an e-mail reminder if the person has not logged in for
    five days. We may even consider sending this trigger on the weekend, assuming
    that the player's time resource and brain cycles resource might be higher. (This
    is only an assumption.)
  prefs: []
  type: TYPE_NORMAL
- en: We can safely assume that the player is sufficiently motivated each time they
    log in since they make the effort to log in. At login, it makes sense to give
    the same dash signal trigger. After the player has logged in and gone into reading
    some posts from other players, it might make sense to offer a facilitator trigger.
    We offer a quick response button to a random post. We will need to give more consideration
    to how to choose that random quick post.
  prefs: []
  type: TYPE_NORMAL
- en: But what about the user who doesn't even log in anymore? We will assume that
    their motivation is relatively low but that the ability to take action is available.
    We might send out a spark trigger e-mail. In this e-mail, the goal is to inspire
    and light a fire under the player to take action. We can give quick numbers about
    the activity that's going on the site and how much they are missing out on. We
    can then give them the option to quickly reply, just as we did with the facilitator.
    Hopefully the inspiration words/message will be enough to raise the player's motivation
    level. Then we can facilitate the action by giving him/her a quick and easy task
    to undertake.
  prefs: []
  type: TYPE_NORMAL
- en: Increasing our players' ability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assuming that we have put all the triggers we reasonably can into place, without
    turning off our players, we can focus on player ability. Remember this is a function
    of how simple it is to undertake a desired behavior from the player's perspective.
  prefs: []
  type: TYPE_NORMAL
- en: One immediate step we can take in that direction is to do as much automatically
    for the user as possible. Activities such as logging in to the application and
    receiving e-mail triggers should come by default. Of course, the user can turn
    these defaults off if they choose. We want to accomplish all behaviors in no more
    than two clicks of a mouse, and with one click wherever possible. We can, in our
    testing phase, identify tasks taking longer than two minutes and attempt to reduce
    the time it takes to perform them.
  prefs: []
  type: TYPE_NORMAL
- en: There are probably things we can do to lessen the amount of brain cycles (brain
    energy) to undertake our target behaviors. The first thing that comes to mind
    is making it very easy to identify opposing and similar perspectives. We can address
    this by simply color coding a post with respect to whether we think the player
    will agree or disagree with the perspective. We do not need to be correct in our
    prediction, since our goal is to reduce the amount of thought the player puts
    into deciding which posts to read. Such a predictive algorithm is outside the
    scope of this book, but anything that we can do to reduce the mental capacity
    needed to take our target behavior (that is, respond to a post) is the goal.
  prefs: []
  type: TYPE_NORMAL
- en: Motivating our players
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By far, the most difficult aspect of the FBM to manufacture or control is the
    motivation aspect. We can attempt to generate as much motivation as we can through
    external rewards, but there are so many psychological variables to contend with
    that it is completely out of our control. What we are attempting to do is design
    user behavior. Even better, we'd like to create a habit in a player to take our
    desired actions.
  prefs: []
  type: TYPE_NORMAL
- en: But what is a habit, really? A habit is the pain that we feel when we do not
    do a particular action. How can we create a situation where our players experience
    negative emotions if they do not log in to our application? How do we create an
    environment where not responding to other players' posts or not reading other
    players' posts makes a player feel a sense of social rejection? Will he/she feel
    a sense of anticipating fear for not using the application on a regular basis?
    Of course, we could write an entire book on these concepts alone, but these are
    the questions we'd need to tackle when we attempt to motivate users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lecturer and author Nir Eyal refers to building motivation and habit in players
    as creating **The Desire Engine**, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motivating our players](graphics/8119_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: He suggests that we can systematically create desire and ultimately build our
    target behaviors into habits for our players. His formula is simple and cyclical.
  prefs: []
  type: TYPE_NORMAL
- en: Identify internal and external triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: External triggers are like the triggers we have discussed previously, whereas
    internal triggers are triggers that the player experiences within his/her own
    emotions. For example, a player gets an e-mail, which is an external trigger that
    highlights posts made about gun violence in the United States. If the player has
    been a victim of gun violence or has experienced it in some way he/she may have
    strong emotions towards the topic and be considerably more inclined to respond
    to the post (that is, taking on our target behavior). Our external trigger sets
    off an internal trigger within the player. We need to maximize internal triggers
    wherever possible. We have already outlined some of our external triggers in the
    previous sections. What might be some internal triggers our players could experience?
  prefs: []
  type: TYPE_NORMAL
- en: Intended action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because our triggers cause an action, it is our task now to make that action
    as simple as possible to execute. We discussed one-click actions and auto login
    wherever possible to achieve these ends.
  prefs: []
  type: TYPE_NORMAL
- en: Variable reward
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But how do we or how should we respond to players performing our actions? We
    respond with a variable reward. Our initial thought may be that a reward of any
    kind would suffice. But according to Eyal, the reward should be unpredictable
    to create a sense of anticipation and wanting. For example, when we flip a light
    switch, the lights come on. That's what we expect. It's predictable and reliable
    assuming everything is working properly. However, this does not create a sensing
    of wanting or drive to continually flip the light switch. What if, however, each
    time you flipped the switch a different appliance came on. In one case, the light
    may come on and in another, the television, while in another, a radio, randomly.
    Now we have created desire. It's the classic jack-in-the-box scenario, you never
    quite know when or if the clown will pop out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a variable reward by randomly giving the user pop-up messages
    saying "good job". Sometimes we show a lot of fanfare when the user acts and at
    other times not so much. We vary the reward for performing the action so that
    the player is never really sure whether they will receive a reward, and if they
    do receive one, they don't know what it will be.
  prefs: []
  type: TYPE_NORMAL
- en: Research suggests that the brain produces the pleasure chemical dopamine when
    we are expecting a reward. Dopamine production increases significantly when the
    reward varies.
  prefs: []
  type: TYPE_NORMAL
- en: In our scenario, sometimes the user gets a pop-up message giving rewards. At
    other times, we will give the player suggestions for more posts to review.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we ask the player to make some commitment of time, energy, or effort.
    Remember that at this point the player's brain is swimming in dopamine. We can
    now ask them to make a small commitment to our game. We ask them to rate another's
    posts, read another's post, or maybe even invite a Facebook friend to join. This
    small commitment on the player's part sets up the conditions for another path
    through The Desire Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Our development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of this discussion about behavior and psychology could cause us to lose
    sight of our goal here. The goal is to build a gamified e-learning application.
    To that end, we will need to set up our environment to build our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build our application we will need a few pieces in place. We will need:'
  prefs: []
  type: TYPE_NORMAL
- en: A web server (Apache)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side technology (PHP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database (MySQL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side technology (JQuery)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor (Notepad++)![Our development environment](graphics/8119_03_13.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need a web server to host and test our application. We will use the open
    source web server Apache. We will use **Hypertext Preprocessor** **(PHP**), which
    will run on the Apache web server to generate the HTML for our pages. We will
    store and access the data needed for our application on the open source database
    MySQL. We will primarily use JavaScript to interact with the player on the client
    (that is, the browser). We will primarily use the JQuery JavaScript framework.
    Lastly we need a plain text editor. There are several free and paid versions,
    so use the one that you are most familiar with. I will be using Notepad++.
  prefs: []
  type: TYPE_NORMAL
- en: But before we can start coding, we need to set up and test our environment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a LAMP stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web development environment that we will use is commonly referred to as
    the **LAMP** (**Linux, Apache, MySQL, PHP**) **Stack**. There are various flavors
    of the stack, depending upon your operating system. I will be demonstrating setting
    up **WAMP**, the Windows version of the LAMP stack.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MAC users refer to MAMP ([www.mamp.info](http://www.mamp.info))
  prefs: []
  type: TYPE_NORMAL
- en: Linux Users refer to XAMPP ([www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html))
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by downloading WAMP at [www.wampserver.com/en](http://www.wampserver.com/en)
    and installing it on our local computer.![Installing a LAMP stack](graphics/8119_03_03.jpg)![Installing
    a LAMP stack](graphics/8119_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming that everything gets installed correctly, you will have a **WAMPSERVER**
    icon on your system tray where you can actually start the web server using the
    **Start All Services** option. You will know that your WAMP server installation
    is running correctly when you see the **server Online** message in the system
    tray as shown in the following screenshot:![Installing a LAMP stack](graphics/8119_03_05.jpg)![Installing
    a LAMP stack](graphics/8119_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will build and store our website files in the `www` directory of our WAMP
    server installation folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default installation folder is `C:\wamp`.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's see if your PHP is running correctly. Go to your web browser and enter
    `http://localhos``t/`. Assuming that no other web server is running, and no other
    application is blocking port 80, you should see a screen like the one shown in
    the following screenshot:![Installing a LAMP stack](graphics/8119_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, let's test to see if PHP is responding correctly. In our text editor,
    we will ask PHP to display some general information about the server for us with
    a special "Hello World" message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `index.php` in your text editor. Enter the following code.
    (We''ll talk more about the specifics of PHP a little later):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing a LAMP stack](graphics/8119_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Troubleshooting the WAMP server setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you experience problems getting your Apache Web server to run, here are
    a few troubleshooting steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Check to see what is currently listening on your computer. On the command prompt
    (cmd) enter `netstat –aon | more`, as shown in the following screenshot:![Troubleshooting
    the WAMP server setup](graphics/8119OS_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check your task manager for that process ID to see which application this is.
    An example of this is shown in the following screenshot:![Troubleshooting the
    WAMP server setup](graphics/8119_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simply disable this application. If such an option is not available, as in the
    case of the NT Kernel, or a system running something on port 80, you will need
    to change the port in the Apache configuration file (`httpd.conf`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are still having issues with your installation, visiting a website such
    as Stack Overflow ([www.stackoverflow.com](http://www.stackoverflow.com)) should
    lead to some other possible troubleshooting options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have objectives and targets for our proposed system, with the overarching
    goal of changing behavior. We took extra care to ensure that our target behavior
    supports our business objectives. This gives us a good handle on the success and
    failure criteria of our gamified system.
  prefs: []
  type: TYPE_NORMAL
