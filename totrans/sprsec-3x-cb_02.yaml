- en: Chapter 2. Spring Security with Struts 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Struts 2 with Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Struts 2 application with basic Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Struts 2 with digest/hashing-based Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Spring Security logout with Struts 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating databases with Struts 2 and Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the logged-in user info in Struts 2 with Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom error messages in Struts 2 for authentication failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating with ApacheDS with Spring Security and Struts 2 application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned the basics of security in [Chapter 1](ch01.html "Chapter 1. Basic
    Security"), *Basic Security*, which helped us to understand Spring Security better
    and also the origin of the Spring Security component in the Spring Framework.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, let's see how Spring Security can be used to authenticate users
    in a Struts 2 framework-based web application.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Struts 2 can be integrated with JSF and Spring. It is a very flexible
    POJO Action-based MVC framework. POJO itself performs the role of an action class
    to fulfill the requests. Struts 2 is derived from another framework called WebWork
    and it works with servlet filters, which intercept the request and response.
  prefs: []
  type: TYPE_NORMAL
- en: '**Exploring the Spring package**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the JARs from MAVEN directly or add the dependency in your
    POM file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We prefer to use the latest JARs 3.1.4 from [http://mvnrepository.com/artifact/org.springframework.security/spring-security-core/](http://mvnrepository.com/artifact/org.springframework.security/spring-security-core/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Main packages in Spring Security**'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.springframework.security.authentication`: This is our area of interest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.security.crypto`: This is used for encryption and decryption'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.security.util`: This is a general utility class used by
    the Spring Security API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.security.core`: This contains security core classes related
    to authentication and authorizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.security.access`: This contains voter-based security access
    control annotations and decision making interfaces'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.security.provisioning`: This contains user and group provisioning
    interfaces'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key Spring Security features**'
  prefs: []
  type: TYPE_NORMAL
- en: Supports JAAS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports MongoDB authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides authentication with OpenID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrates multitenancy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides basic authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides digest authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security works like an independent module. Authentication code is handled
    independently by the Spring Security framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports authentication with ApacheDS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports authentication with Open LDAP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication mechanism**'
  prefs: []
  type: TYPE_NORMAL
- en: User submits their credentials to the system; that is, a username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`org.springframework.security.authentication.UsernamePasswordAuthenticationToken`
    accepts the credentials and passes them to `org.springframework.security.authentication.AuthenticationManager`
    for validation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: System authenticates the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Credential flows as follows: `UsernamePasswordAuthenticationToken` | `AuthenticationManager`
    | `Authentication`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally a fully loaded authentication instance is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SecurityContextHolder` accepts the authentication instance.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The system also checks for authorization of roles or groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the user is allowed to access the system based on his authorization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating Struts 2 with Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first set up a Struts 2 application and integrate Spring Security with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eclipse Indigo or higher version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss as server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Struts 2 JARs: 2.1.x'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring-core JARs 3.1.4\. Release and Spring-Security 3.1.4.Release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Struts 2 Spring plugin jar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to set up the Struts 2 application with
    form-based Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Eclipse IDE, create a dynamic web project and name it `Spring_Security_Struts2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a source folder at `src/main/java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `struts.xml` file under the source folder `src/main/java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To integrate Struts 2 with the Spring application, add the `application-context.xml`
    file reference here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Struts filter mapping in `web.xml`. Spring listener also needs to be
    added to the `web.xml` file. The listener entry should be above the Struts 2 filter
    entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `contextLoaderListener` will tell the `servletcontainer` about the `springcontextLoader`
    and it will track events. This also allows the developers to create `BeanListeners`,
    which allow it to track events in the Bean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `web.xml` file, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To set up form-based security, we need to create `login.jsp`. The form action
    is `j_spring_security_check`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create a folder and name it `secure/hello.jsp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map the `login` action with `login.jsp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map the `loginfailed` action with `login.jsp?error=true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Map the `welcome` action with `secure/hello.jsp` with the action class-`HelloWorld`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`struts.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `login page` URL is mapped with the Struts 2 action `'/login'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security is applied on the Struts 2 action `'/welcome'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user will be prompted to login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user with `role_user` will be authorized to access the pages
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Applicationcontext-security.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just run the application. You will be provided with a link to access the secured
    page. On clicking on the link you will be prompted to log in. This is actually
    a form-based login.
  prefs: []
  type: TYPE_NORMAL
- en: Here on submit, the action is sent to the Spring Framework which authenticates
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: On success, the user will see the authenticated page.
  prefs: []
  type: TYPE_NORMAL
- en: The Struts 2 framework easily gels with the Spring Framework and its modules
    with very minor modification.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_02_01.jpg)![How it works...](img/7525OS_02_02.jpg)![How
    it works...](img/7525OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Struts 2 application with basic Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Struts 2 with digest/hashing-based Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Displaying custom error messages in Struts 2 for authentication failure*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating databases with Struts 2 and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating with ApacheDS with Spring Security and Struts 2 application*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Spring Security logout with Struts 2* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the logged-in user info in Struts 2 with Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Struts 2 application with basic Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will demonstrate basic Spring Security authentication with
    Struts 2\. We will create a sample Struts 2 application and add Spring Security
    features to the action to make it secured. Only authenticated authorized users
    can access it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Update the `Applicationcontext-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new dynamic project in Eclipse: `Struts2_Spring_BASIC_Security_Recipe2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for integrating the Struts 2 application with Spring
    Security to implement basic authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `applicationcontext-security.xml` file to support basic security:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Applicationcontext-security.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user runs the Struts 2 application and tries to access the secured
    resource, the Spring Security context is initialized and the Struts 2 action is
    interrupted with Spring's login dialog box, which will request the username and
    password. On successful authentication, the user will be redirected to the Struts
    2 action page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the workflow of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Struts 2 and Spring basic security on browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using Struts 2 with digest/hashing-based Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Struts 2 with digest/hashing-based Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the form-based or basic authentication doesn't make the Struts 2-based
    application secure since the passwords are exposed to the user as plain text.
    There is a crypto package available in Spring Security JAR. The package can decrypt
    the encrypted password, but we need to tell the Spring Security API about the
    algorithm used for encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a dynamic web project in Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the Struts 2 JARs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Spring Security related JARs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `web.xml`, `struts2.xml`, and JSP settings remain the same as the previous
    application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s encrypt the password: `packt123456`.'
  prefs: []
  type: TYPE_NORMAL
- en: We need to use an external JAR, `JACKSUM`, which means Java checksum. It supports
    both MD5 and SHA1 encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Download the `jacksum.zip` file ([http://www.jonelo.de/java/jacksum/#Download](http://www.jonelo.de/java/jacksum/#Download))
    and extract the ZIP folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/7525OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Update the `applicationcontext-security.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to update the `Applicationcontext-security.xml` file. Observe that the
    type of authentication is basic but the password is hashed using the algorithm.
    We want the Spring Security to decrypt it using the SHA algorithm and authenticate
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security is very flexible in handling digest authentication. You can
    also see that there is no container-based dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic authentication from the browser can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Spring has authenticated the user by decrypting the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Displaying custom error messages in Struts 2 for authentication failure*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating databases with Struts 2 and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating with ApacheDS with Spring Security and Struts 2 application*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Spring Security logout with Struts 2* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the logged-in user info in Struts 2 with Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Spring Security logout with Struts 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section let us implement a logout scenario, where the logged-in user
    will be logged out of the application. The logout action will be handled by the
    Spring Security framework. We need to configure the `struts.xml` file to handle
    the `j_spring_security_logout` action.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a dynamic web project in Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the Struts 2 related JARs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Spring Security-related JARs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `web.xml`, `struts2.xml`, and JSP settings remain the same as the previous
    application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s update the secure page, `hello.jsp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s map the `j_spring_security_logout` with the `struts.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user clicks on **logout**, the user will be logged out and will be
    redirected to `index.jsp`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `applicationcontext-security.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Security also provides options to handle logout. When the user clicks
    on **logout**, the user is directed to the assigned page.
  prefs: []
  type: TYPE_NORMAL
- en: '`j_spring_secuurity_logout` provides the logout option for the Struts 2 application.'
  prefs: []
  type: TYPE_NORMAL
- en: The Struts 2 application has the map and the URL with its action.
  prefs: []
  type: TYPE_NORMAL
- en: The logout option is usually given in the secured pages.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Till now we have stored the authentication information in the `.xml` file. We
    have also hashed the password. How about storing the information on the external
    system and getting it? Let's see how Struts 2 works with this database authentication
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Displaying custom error messages in Struts 2 for authentication failure*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating databases with Struts 2 and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating with ApacheDS with Spring Security and Struts 2 application*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the logged-in user info in Struts 2 with Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating databases with Struts 2 and Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let us authorize the user who logs into the Struts 2 application
    using the information stored in the database. Spring Security needs to be configured
    in Struts 2 application such that it gets to know the location of the database
    and SQL that needs to be executed to authenticate the user using Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a dynamic web project in Eclipse: `Struts2_Spring_DBAuthentication_Recipe4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `struts.xml` file to `src/main/java`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `db-beans.xml` file to `WEB-INF`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `webContent` folder from the previous recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following JARs into the `lib` folder or update your POM file if you
    are using maven:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-jdbc-3.0.7.RELEASE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mysql-connector-java-5.1.17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commons-dbcp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commons-pool-1.5.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform database authentication with Struts 2 and Spring, we need to create
    a `db-beans.xml` file. The `db-beans.xml` file will have database information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `db-beans.xml` file in the same place as `applicationcontext-security.xml`.
    Update the `web.xml` file to read the `db-beans.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following SQL script in your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `applicationContext-security.xml` file to read the database configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Struts 2 Framework gives a link to access the secured page. But the Spring Security
    framework interrupts and gives an authentication dialog box .The authentication
    is done by Spring Security Framework by querying the database. The authentication
    manager is configured with the datasource ref, which will load information for
    the security framework to authenticate the user based on the query.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we applied security with just a JSP file, which is mapped without action
    in `struts2.xml`. Let's see how we can map an action class with JSP, and then
    integrate with Spring Security. Ideally it should work in the same way. Let's
    get the logged-in user information in the action class and display it on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Displaying custom error messages in Struts 2 for authentication failure*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating with ApacheDS with Spring Security and Struts 2 application*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting the logged-in user info in Struts 2 with Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the logged-in user info in Struts 2 with Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in our examples we have not used any Struts 2 action class.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an action class and see how Security behaves with this action class.
    We will use form-based authentication with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far in our examples we have not used any Struts 2 action class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an action class and see how security behaves with this action
    class. We will use form-based authentication with this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a dynamic web project: `Struts2_Spring_Security_Recipe5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a package: `com.packt.action`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `struts.xml` file from the previous recipe in `src/main/java`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also copy the `WebContent` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to add an action class to the package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `struts.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `HelloAction` file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `Struts.xml` file with `HelloAction`. So when the user is authenticated,
    it will pass the request to the action class which will execute the `execute()`
    method, and then will be redirected to `hello.jsp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Getting the logged in user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can get the logged in username in the action class and we can display it
    on the page or use it further in our application.
  prefs: []
  type: TYPE_NORMAL
- en: We can use `request.getUserPrincipal` in our action class to get the logged
    in user information.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the project setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a dynamic web project in Eclipse: `Struts2_Spring_Security_Recipe6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `src/main/java` folder from the previous recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the `Web content` folder from the previous recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the `HelloAction.java` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `secure/Hello.jsp` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user information is stored in principal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Displaying the logged in user on the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After displaying the user information, we can display the custom error message
    to the user on authentication failure.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Displaying custom error messages in Struts 2 for authentication failure*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Authenticating with ApacheDS with Spring Security and Struts 2 application*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom error messages in Struts 2 for authentication failure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will capture the authentication failure message from Spring
    Security in our Struts 2 application and see how this can be displayed to the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Redirect to failure action on authentication failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a custom message to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for capturing Spring Security''s authentication
    failure messages in the JSP application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `applicationcontext.xml` file, we can redirect the URL to another action:
    `Authentication-failure-url="/loginfailed? error=true"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `login.jsp` page with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Login failed action is mapped with the `login.jsp` file in `struts2.xml`. The
    `authentication-failure-url` is added in the `application-context.xml`. When the
    user enters the wrong credentials, authentication fails and the user is redirected
    to the login page with an error message.
  prefs: []
  type: TYPE_NORMAL
- en: The error message configuration is done in the JSP file.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Authenticating with ApacheDS with Spring Security and Struts 2 application*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating with ApacheDS with Spring Security and Struts 2 application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be storing the user credentials and role information
    in the Apache directory server. Spring Security has to locate the server and log
    in to the server. It should authenticate the user by comparing the credentials
    submitted by the user and the credentials and role information present in the
    Apache directory server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a dynamic web project in Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `src/main/java` folder and the `WebContent` Folder remain the same
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install Apache directory studio: 1.5.3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install Apache directory server: 2.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10389 is the apache-ds port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add LDAP-related security JARs to the `WebContent Lib` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-ldap-core-tiger-1.3.X release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-ldap-odm-1.3.X release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-security-ldap-1.3.X release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-ldap-ldif-batch-1.3.X release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-ldap-test-1.3.X release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-ldap-core-1.3.X release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spring-ldap-ldif-core-1.3.X release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to set up Apache directory to authenticate users
    in the Struts 2 application using Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the Apache DS Server after installing the mentioned prerequisites.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a partition using the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `server.xml` file: `C:\Program Files\Apache Directory Server\instances\default\conf\server.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add JDM partition: `<jdbmPartition id="packt" suffix="o=packt"/>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can restart the Apache DS Server to see the changes. Then connect to Apache
    DS using the Apache Directory Studio. Right Click on **DIT**. Create **Entry**
    from **Scratch**. Select **Organization**, select **o** and in the **Value** enter
    `packt`. Select **Finish** and refresh the **DIT** to see the updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Apache Directory studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the Apache directory server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apache DS runs on 10389.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two groups `ou=groups` and `ou=user`.![How to do it...](img/7525OS_02_11.jpg)![How
    to do it...](img/7525OS_02_12.jpg)![How to do it...](img/7525OS_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, object class is for adding entries to `ou=groups`, since this maintains
    the role:![How to do it...](img/7525OS_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, object class is to add entries to `ou=people`:![How to do it...](img/7525OS_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign roles to users by adding `UniqueMember` to `cn=admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Spring-security-ldap.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Spring Security-ldap.xml` will contain details on the server location and
    the domain. It should connect to retrieve the user information. The domain is
    `sevenSeas`. 1039 is the port number for the LDAP server. Spring Security uses
    the `ldap-server` tag to give the information on LDAP. It also gives the password
    and the domain on which it will connect. The Struts 2 request will be interrupted
    by Spring Security and, for authentication, the user information will be received
    from the login page. Spring Security requires the LDAP for the username; on success,
    the user is given access to the secured resources.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Spring Security with JSF"), *Spring Security
    with JSF*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
