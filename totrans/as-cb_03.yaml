- en: Chapter 3. Material Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will teach you what material design is about, why it is such a
    great improvement, and why you should use it for your apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Recycler views and card views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ripples and elevations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the introduction of material design, the looks of Android apps will finally
    mature. They can compete very well with iOS designs. Android material apps have
    a flat design, but come with some interesting differences such as elevations.
    Consider the following figure for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/B04299_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Think of it as multiple slides of paper. It is based on, well, materials. Each
    slide of paper has a particular elevation. So, the environment is in fact a 3D
    world with effects such as light and shadow. Any motion should have real-world
    behaviour as if the moved elements are real physical objects. Animation is another
    important element of material design.
  prefs: []
  type: TYPE_NORMAL
- en: First have a look at [https://www.google.co.in/design/spec/material-design/introduction.html](https://www.google.co.in/design/spec/material-design/introduction.html)
    to see what material design is all about. Sure, many things are interesting for
    designers in particular, and you probably are interested only in the implementation
    of all this beautiful stuff; however, this link provides you with a little bit
    more context about what material design is about.
  prefs: []
  type: TYPE_NORMAL
- en: For a long time, most Android apps suffered from bad design or, in the early
    days no design at all. Or, they looked pretty similar to those made for iPhone,
    including all the elements that are typical for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the next app screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/B04299_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Material design, this is what most of Google apps look like nowadays.
  prefs: []
  type: TYPE_NORMAL
- en: Many Google's apps for Android use material design now. They all follow the
    same guidelines for interaction and design. The interface is minimalistic, as
    one would expect from Google. Also, the interface has become more uniform, making
    it easier to understand and use.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, responsiveness was something you had to take care of yourself. Material
    design comes with ripples and other effects, doing the same thing, which is providing
    feedback on user input, but it is much easier to implement and is much more elegant.
  prefs: []
  type: TYPE_NORMAL
- en: As for the components, material design dictates for example how buttons in a
    particular situation should look. Think of floating buttons used for actions,
    or flat buttons used in dialog boxes. It also replaces the **ListView** with **RecyclerView**,
    which provide more flexibility to show lists. **CardViews** are common elements
    and you can see them being used in the Google apps quite often. Various animations
    provide more natural transitions, such as those for navigational or scrolling
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Material design is not just for the latest and greatest. While it comes with
    Android Lollipop (5.0) and higher versions, most material design features can
    be used in Android version 2.1 and up via the `v7 support` libraries, which allow
    us to apply a material design and still support virtually almost all Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Altogether, material design provides quite a lot to the beautification of your
    app. People want to be beautiful too. Health apps are booming because of this.
    Finding out what is healthy to eat, suggesting to drink more water, and advising
    on running or fitness exercises are common objectives that come with these type
    of apps. To demonstrate the beauty of Material design, we will be creating an
    app that will help people become healthier.
  prefs: []
  type: TYPE_NORMAL
- en: So, what about a `drink water and take a selfie` app? People need to drink water
    more often and if they do, they could see the effect of it. Beautiful people deserve
    a beautiful app. This makes sense, does it not?
  prefs: []
  type: TYPE_NORMAL
- en: Reycler views and card views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recycler view replaces the good old list view. It provides more flexibility
    in how the elements of a list are shown, for example, as a grid and as horizontal
    or vertical items. Instead of rows, we can now choose to display cards wherever
    it is suitable.
  prefs: []
  type: TYPE_NORMAL
- en: In our app, each card should display some text about the entry and a thumbnail
    of the picture that we took. This is what this recipe will be all about.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, you need to have Android up and running. Also make
    sure that you have installed the latest SDK. (You can check whether you have the
    latest SDK by opening the SDK manager). To do so, open the **Tools** menu, choose
    **Android**, and next, choose the **SDK Manager** option.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s investigate, using the following steps, how to use recycler views and
    cards:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Android Studio and start a new project. Name your application `WaterApp`
    and enter `packtpub.com` in the **Company Domain** field. Then, click on the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Blank Activity** in the next dialog box and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following dialog box, click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `build.gradle` file within your `app` folder and add the dependency
    for the recycler view to the `dependencies` section as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Change `minSdkVersion` to at least `21` in the `build.gradle` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This does not really have to be the minimal required version, but since the
    support libraries for backward compatibility purposes do not contain all of the
    Material design features, I have chosen to pick API level 21 here, just to be
    on the safe side.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronize your project by clicking on the **Sync now** label on the yellow
    bar that appears after we edit the `build.gradle` file, or in case it does not,
    click on the **Sync Project with Gradle files** button on the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` layout file, remove the `Hello World TextView`,
    and add a `RecyclerView` tag to the layout, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In your `MainActivity` class, add the following to the `onCreate` method just
    after `setContentView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `RecyclerView` class is not a known class yet. Use the *Alt* + *Enter*
    shortcut to add the right import statement or add the following line yourself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to use a linear layout manager for this recipe. Add the following
    lines after the line we have added in step 9:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new package and name it `models`, and within this package, create
    a new `Drink` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `Date` class refers to the `java.util.Date` package (this is specified
    since there is also a SQL-related class with the same class name).
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a layout to display the items. Right-click on the `layout` package
    in the project tree and create a new resource file. To do so, choose **New** and
    **New Layout Resource File** from the menu. Name it `adapter_main.xml` and hit
    the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch the layout to the **Text** modus, change the orientation of `LinearLayout`
    from `vertical` to `horizontal`, add some padding to it and add an image view
    to it, as shown in the following snippet. We will also add a default image so
    that we have something to look at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next to the image, we want to display a date and time and the comments using
    two `TextView` widgets wrapped in another `LinearLayout` widget. Add these after
    the `ImageView` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another package and name it `adapters`. Within that package, create
    the `MainAdapter` class that will be using a `ViewHolder` class, helping us to
    display the data exactly where we want it to appear. We also include all methods
    that need to be overridden such as the `onBindViewHolder` method and the `getItemCount`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have more things to do. Add the `onBindViewHolder` method and add the implementation
    to actually bind the data to the right widgets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` file, we need to have an instance of the adapter and
    some data to display. Add a private adapter and a private array list containing
    the `Drink` items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the `onCreate` method, tell `recyclerView` which adapter to use
    and tell the adapter which dataset to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` file, we want to add some dummy data so that we have
    some idea about what things are going to look like. Add the following to the `onCreate`
    method just before the part where we create the `MainAdapter` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Import the required packages using the *Alt* + *enter* shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: Run your app to verify that everything has gone well so far. Your app will display
    two entries containing the sample data that we have created in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using card views**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The app looks okay but I would not want to call it beautiful yet. Let''s see
    if we can improve this a little. The following steps will help us to create the
    app using card views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `build.gradle` file in the `app` folder and add a `CardView` dependency,
    just after the one for the recycler view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: And synchronize your project again.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By the way, if this app was for real, then avoid unpleasant surprises by specifying
    an exact version instead of using the `+` sign in the version number for any dependency
    your app may have. Currently, this is `21.0.0` for this particular dependency,
    but By the time you read this, a new version might be available.
  prefs: []
  type: TYPE_NORMAL
- en: If an error appears indicating Gradle failed to resolve the card view dependency,
    then click on the **Install Repository and sync project** link, accept the license,
    and click on the **Next** button. Wait a while until the download is complete
    and the installation has finished. Once this is done, click on the **Finish**
    button. Sync your project again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new layout and name it `adapter_main_card_view.xml`. Add some padding
    to the `LinearLayout` tag and within the `linear layout` tag, add a `CardView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: From the previous layout, the `adapter_main.xml` file, copy `ImageView` and
    the two `TextView` widgets (but not `LinearLayout` that contains the two `TextView`
    widgets) and paste them within `CardView` that you have added to the `adapter_main_card_view.xml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because `CardView` behaves as if it is `FrameLayout`, you need to set the margins
    for the text labels. Add a left margin to both text views. Also modify the top
    margin for the `TextView` comment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you tell the `MainAdapter` class to use this layout by changing the layout
    ID in the `onCreateViewHolder` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app again and we will see what it will look like this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using card views](img/B04299_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next recipe, we will add an elevated floating button and we will create
    a new activity that allows the users of our app to add drinks, comments, and a
    selfie.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a lot of documentation about material design. Browse through the various
    examples that are available on various websites, such as [https://www.materialup.com](https://www.materialup.com),
    [http://materialdesignblog.com](http://materialdesignblog.com) or [http://material-design.tumblr.com](http://material-design.tumblr.com).
  prefs: []
  type: TYPE_NORMAL
- en: Or, download some of the material designed apps that are available in the Play
    Store, such as the Inbox, Google+, Wunderlist, Evernote, LocalCast, and SoundCast
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Ripples and elevations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While elevations and ripples are not exactly to be considered to make people
    more beautiful, applying these and other material design principles to our app
    will certainly contribute to the beautification of it.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we created a list to show all logged drinks. In this
    recipe we will add an elevated button to add new entries. Also, we will create
    a new activity.
  prefs: []
  type: TYPE_NORMAL
- en: For each entry, the user can describe some thoughts on what he drank. Of course,
    the user has to be able to take a selfie each time so that later he can check
    whether drinking all that water or green tea (or beer for that matter, if the
    user of our app does have a slightly different objective than that this app has
    been intended for) indeed did have a positive effect on his health and his (or
    her) looks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, it would be great if you have the previous recipe completed
    as this will build upon our previous achievements.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a floating button and create a new activity to edit new entries:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new drawable resource file to the `res/drawable` folder, name it `button_round_teal_bg.xml`,
    and hit the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using XML, we will create a round oval shape for the button. Remove the selector
    tags first (if any). Wrap it up in a `ripple` tag. A `ripple` provides visible
    feedback in case the button is being pressed; I have chosen a material design
    variant of teal as the color but you can of course pick any color that you like.
    For inspiration, you could check out [http://www.google.com/design/spec/style/color.html](http://www.google.com/design/spec/style/color.html).
    The content for the file looks like as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you run into any error, check `minSdkVersion` in the `build.gradle`
    file. Refer to step 5 of the first recipe for further information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a button to the `activity_main.xml` layout file just after the recycler
    view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Colors should be defined in a separate color resource file. Also, elevations
    and margins should be placed in a dimension resource file. Since this is out of
    scope for this recipe, I suggest you do this later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we want to have some shadows, and also we want to change the elevation
    if the button is being pushed or released. Create a new directory in the `res`
    folder and name it `anim`. Within this folder, create a new animation resource
    file. Name the file `button_elevation.xml` and hit the **OK** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Inform the image button about this new resource file. In your `activity_main.xml`
    layout, add the following line to your image button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the onCreate method in the MainActivity class add an `OnClickListener`
    to the button that we just created and call the `showEntry` method, which we will
    be creating in a minute or two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Create a new layout resource file, name it `activity_entry.xml`, and use `FrameLayout`
    as the root element. Then hit the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `EditText` widget for comments, a button to take pictures and another
    button to save the entry. Then wrap these elements in a `CardView` widget. Add
    an `ImageView` widget after the `CardView` widget, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Create a new class, name it `EntryActivity`, and click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make your class descend from `Activity`, override the `onCreate` method, and
    set the content view to the layout that you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Do not forget to add your new activity in the `AndroidManifest.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` class, add the `showEntry` method and the implementation
    that is needed to display the new activity. We will be using the `startActivityForResult`
    method here because this will allow the `EntryActivity` to return data later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you run the app and push the button, you will notice the visual feedback.
    To see the effect properly, you may want to use a stylus or enlarge the size of
    the button. If you release the button, you will see the entry layout. In the layout,
    if you push (and hold) the **Add entry** button (or the camera button), you will
    notice the ripple effect. We did not have to do anything special for that. With
    the introduction of Lollipop (and previous description), this is the default behavior
    for buttons. However, these buttons do look a bit boring and as you have seen
    with the floating button, there are plenty of customization options available.
    Let''s follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `EntryActivity` class, set the `OnClickListener` for the camera button
    and do the same thing for the `add` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a private member that will contain the URI for the photo that we are going
    to take:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `takePicture` method and add the implementation for it. We will create
    a file with a unique image name up front by using a time stamp and we will tell
    the image capture intent to use `Uri` for that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Override the `onActivityResult` method that will be triggered once a photo
    has been taken. If everything goes well, we need to create a bitmap of the file
    we just created by taking the picture and show a preview of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, implement the `getBitmapFromUri` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the appropriate permission and feature to the `AndroidManifest.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s implement the `submitEntry` method. We will return the comment and
    `uri` of the picture and end the activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the implementation for the `onClick` event of the `add` button. Just call
    the `submitEntry` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` class, we will handle the returned result by overriding
    the `onActivityResult` method. A new drink will be created and added to the list
    of drinks. Finally, we will notify the adapter that there is an update to be displayed
    by adding the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainAdapter` class, we need to do some work to display thumbnails of
    each image. Add this to the end of the `onBindViewHolder` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If an `Uri` is known for the item, we need to display a thumbnail for it. We
    will implement `getBitmapFromUri` in `MainAdapter` slightly different. The method
    to do so goes like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, run the app. You can use a real device or Genymotion for that. If you are
    using Genymotion you have to enable the camera, as described in [Chapter 1](ch01.html
    "Chapter 1. Welcome to Android Studio"), *Welcome to Android Studio*. Click on
    the **add** button, have a glass of water, enter some comments, and then take
    a selfie. Hit the **Add entry** button to make it appear in the list.
  prefs: []
  type: TYPE_NORMAL
- en: This is amazing! You are done for now. The app is far from pixel perfect but
    we have made some interesting moves. Beautification takes time. In the next recipe,
    we are going to implement some wow stuff by adding transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On some devices, but not all of them, the picture may be rotated. This is one
    of the challenges that come with Android development and we will cover that topic
    in [Chapter 6](ch06.html "Chapter 6. Capture and Share"), *Capture and Share.*
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The list with entries is not yet persisting other than during the life time
    of the application. If you want, you can make the entries persistent, for example,
    by storing the entries in a SQLite database or eventually by using Parse, which
    is discussed in [Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based
    Backend"), *Applications with a Cloud-based Backend*. Since persistency is not
    the objective for this recipe, it will not be discussed any further here. In [Chapter
    7](ch07.html "Chapter 7. Content Providers and Observers"), *Content providers
    and observers*, SQLite and content providers are discussed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since API level 23 there is a FloatingActionButton widget that you can use
    as well. It comes in two sizes: default and mini.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"),
    *Applications with a Cloud-based Backend*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Capture and Share"), *Capture and Share*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Content Providers and Observers"), *Content
    providers and observers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you click on any of the cards it will display the entry view again with the
    comments and a preview of the picture that we took previously.
  prefs: []
  type: TYPE_NORMAL
- en: We do not just want to move from the list view to the detail view. Material
    design also takes care of great natural transitions. This recipe is going to apply
    just that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, you will need to have the previous recipes up and
    running. This recipe is going to add some animations to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will help us to add the animations to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `mDrink` member to `ViewHolder` in the `MainAdapter` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file in the `onBindViewHolder` method inform the `view holder`
    about the actual drink, just after the initialization of `currentDrink`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreateViewHolder` method, add an `OnClickListener` to the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If the view is being clicked on, we want the `EntryActivity` class to display
    the selected drink entry. In order to be able to inform the entry about the selection,
    we need to make the `Drink` model a `parcelable` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to implement a couple of methods for that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Add two constructors for the `Drink` class—a default one and one that takes
    a parcel—so we can recreate the object and populate it with the appropriate values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainAdapter` class, add a private variable for the request. This approach
    makes your code more readable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The so-called magical numbers are easy to misunderstand and should be avoided
    as much as possible. This and other recipes are just for demo purposes but in
    the real world, you should use self-explaining constants where possible. Here,
    `REQUEST_EDIT_ENTRY` makes much more sense than just putting the number `2` in
    your code somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now within the `onClick` method that we created previously in the `onCreateViewHolder`
    method of the `MainAdapter`, we can start a new entry activity and pass the selected
    drink as a parameter. The implementation of the `onClick` method will now look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreate` method of the `EntryActivity` class, we will retrieve and
    display the properties of the selected drink. Add this implementation to the end
    of the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The EditText for the comments will be filled with the comments so that the
    user can edit them. If an image is attached to the drink entry, it will be shown
    in the preview image view. Now if only we had an easy and cool way of animating
    the thumbnail of the image into the preview:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Surprise! There is. Add a new string resource in the `strings.xml` (in the
    `res/values` folder) file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreateViewHolder` method in the `MainAdapter` class, within the `onClick`
    implementation, and right before the `startActivityForResult` method, we will
    use the `ActivityOptionsCompat` class to create a transition from the thumbnail
    (the holder''s `mImageView` member) to the preview image in the layout for the
    entry activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Supply these options by replacing the `startActivityForResult` call on the
    next line with this implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `adapter_main_card_view.xml` layout file and add this line to the
    image view (the one with the `main_image_view` ID):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In the `activity_entry.xml` layout, add this line as well to the `ImageView`
    widget (the one with the `entry_image_view_preview` ID). This way Android knows
    where the transition of the thumbnail into the larger preview image has to go).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is good practice to use string resources. We can use these resources here
    to make sure we are talking about the same transition everywhere in the code but
    it will also be great for localization purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Now if you run your app and click on any of the cards in the `MainActivity`
    class, you will see that the thumbnail is enlarged and fits into the place holder
    for the preview image in the layout of the `EntryActivity` class. The reversed
    transition is shown if you choose the back button. In previous versions we could
    not do this with only a few lines of code!
  prefs: []
  type: TYPE_NORMAL
- en: Theming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a bonus, let''s do some theming using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://www.materialpalette.com](http://www.materialpalette.com) and pick
    two colors. Theming comes up with a color set that we can use for a theme as shown
    in the following screenshot:![Theming](img/B04299_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `color.xml` file in the `res/values` folder and add the suggested
    color names and values. I have chosen blue and indigo on the website so my color
    resource file looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `styles.xml` file in the `res/values` folder and make it look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theming](img/B04299_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Modify your layout files and change text views and other elements so that it
    can reflect the color scheme. Run the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android's activity transitions will take care of everything. We just need to
    tell what, where, and how. With just a few lines of code the API allows you to
    create meaningful transitions between activities, which will heavily improve the
    **User Experience** (**UX**) of your application.
  prefs: []
  type: TYPE_NORMAL
- en: With each new step, the looks of your app become better and better! Unfortunately,
    this is where this introduction to material design ends. Make improvements wherever
    you want. Play with it and have fun! Animations, UX, and layouts are important
    elements of high-quality apps.
  prefs: []
  type: TYPE_NORMAL
- en: For wearable apps, this may be even more important as we will see in the next
    chapter. But how can we enable a great user experience on such as small screen?
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen only a few aspects of Material Design. There is so much more to
    discover.
  prefs: []
  type: TYPE_NORMAL
- en: Improve the looks and UX of the app further, add the implementation in the `MainActivity`
    class to handle the data of drink entries that you have added, and make enhancements
    wherever you want them. Or, you can have a look at your existing apps and see
    how you can materialize them.
  prefs: []
  type: TYPE_NORMAL
