- en: Chapter 3. Network Vulnerability Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using nmap for manual vulnerability assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating nmap with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walkthrough of Metasploitable assessment with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability assessment with OpenVAS framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, we covered the discovery of live servers over the network along
    with service enumeration. Here, we will discuss what a vulnerability assessment
    is. A vulnerability assessment is a process in which a tester aims to determine
    the services running on the ports and check if they are vulnerable. Vulnerabilities
    when exploited can lead us to have unauthenticated access, denial of service,
    or information leakage. Vulnerability assessment is essential as it gives us a
    holistic picture of the security of the network being tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be checking whether services running on open ports
    have vulnerabilities. It is vital to know the operating system on which the service
    is running since it is one of the crucial factors in reconnaissance for vulnerability
    discovery where remote code execution is involved. The reason is that the same
    services on different operating systems will have different exploits due to architecture
    difference. Let''s talk about one vulnerability: the SMB service, which is vulnerable
    as per MS08-067 netapi vulnerability. This vulnerability persists on old Windows
    systems, but not on the new ones. For example, Windows XP is vulnerable to this
    attack; however, Windows Vista is not because it got patched. Hence, it is really
    important to have the map of what OS and service pack version the system is running,
    along with the service on the open port, if you are to find any vulnerabilities.
    In this chapter, we will be learning different ways in which we can detect vulnerabilities
    over target IPs.'
  prefs: []
  type: TYPE_NORMAL
- en: Using nmap for manual vulnerability assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now it is evident that nmap plays a very important role right from IP discovery.
    Nmap also has a vulnerability assessment functionality, which is achieved via
    the **Nmap Scripting Engine** (**NSE**). It allows the user to run vulnerability
    detection scripts. The NSE contains a very large set of scripts that range right
    from discovery to exploitation. These scripts are available in the `nmap` folder,
    and are segregated by their categories. These categories can be better understood
    by reading the `scripts.db` file, located in the `nmap` folder. However, in this
    chapter we will limit ourselves to vulnerability detection.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to begin this chapter, we will be using nmap to check the NSE scripts
    located in nmap under the `scripts` folder. For demonstration purposes, we will
    be using Metasploitable 2 and Windows XP SP1.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We should first see where the NSE scripts are located. Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to understand all the different categories that these scripts belong
    to, type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You might notice from the preceding screenshot that there is a category called
    `vuln`. We will be working mainly with this category. To run a simple `vuln` category
    scan, use the following command on your terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say we want a quick assessment of just a few sets of ports. We can run
    a port-based `vuln` assessment scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that it revealed a lot of information, and showed us many possible
    attack vectors; it even detected the SQL injection for a potential attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s say we want to know the detail of what the script category `vuln` does.
    We can simply check that by typing the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check whether the remote machine that is running is vulnerable to SMB.
    We first find out whether the SMB port is open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we detect that the port is open, we run an `smb` vulnerability detection
    script, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, one can use the various scripts available in nmap with the category of `vuln`
    to perform an assessment over the target IP and find vulnerabilities based on
    the port and services running.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Understanding all the parameters is rather easy; we have been toying with the
    scripts available in the NSE engine. Let''s understand a few of the commands used
    in this method:'
  prefs: []
  type: TYPE_NORMAL
- en: The `scripts.db` file contains all the NSE categorizing information that it
    uses to specify which scripts can be considered a particular kind of vulnerability.
    There are different categories, such as `auth`, `broadcast`, `brute`, `default`,
    `dos`, `discovery`, `exploit`, `external`, `fuzzer`, `intrusive`, `malware`, `safe`,
    `version`, and `vuln`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the preceding example, we ran an `nmap` command with the `vuln` parameter
    along for the script. We were simply instructing nmap to use the `vuln` category
    and run all the scripts that are categorized under `vuln`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The scan for this takes a long time as it will run many vulnerability assessments
    on many detected open ports.
  prefs: []
  type: TYPE_NORMAL
- en: At one point, we specified an additional port parameter to the `vuln` category
    scan. This just makes sure that the script only runs for the specified ports and
    not the other ones, thereby saving us a lot of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--script-help <filename>|<category>|<directory>|<expression>|all[,...]`
    command is the help feature for the NSE engine. The `help` command should always
    be accompanied by the category or a specific filename of the NSE script, or an
    expression. For example, to check for all SMB-related help, one can simply use
    the expression `*smb*`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `--script-args=unsafe=1` command, the `script-args` syntax is similar
    to the additional parameters to be passed to the script that we just selected;
    in this scenario, we are passing an additional `unsafe` parameter with the value
    `1`, stating that the script has permission to run dangerous scripts that could
    cause a service crash.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned how to use the NSE for vulnerability assessment. The `script-args`
    parameter is used for many purposes, such as providing the file for username and
    passwords, specifying the credentials for a given service so that the NSE can
    extract information, post authentication, and so on. This is recommended so that
    you have a deeper insight of the `script-args` feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More information can be found in the NSE documentation at  [https://nmap.org/book/nse-usage.html](https://nmap.org/book/nse-usage.html)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating nmap with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performing a vulnerability assessment with only nmap is insufficient since vulnerabilities
    keep increasing in number, day after day. There are many vulnerabilities reported
    within a month, and therefore it is recommended that you make use of more than
    one vulnerability scanning tool. In the previous chapter, we saw how we can export
    the output of the nmap scan to an XML file; here, we will learn how to integrate
    the nmap output with Metasploit for vulnerability assessment purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will have to first set up and update Metasploit in the Kali Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is that, for demonstration purposes, we have added more services
    to the Windows operating system to understand the activity better, since by default
    only a handful of ports are shown open. To prepare for the activity, we perform
    a scan on the Windows machine and save an XML output for the same.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will first save the nmap XML file for the Metasploitable 2 server using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The file will be saved in the current working directory of your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start Metasploit, we will start the services involved in the Metasploit
    program. We will start the Postgres SQL service and the Metasploit service. To
    do this, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the service is started, we''ll start Metasploit by entering the following
    in the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we will import the nmap scan into Metasploit. To do so, enter the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The command imports the file from the specified path. Make sure to keep a note
    to import from the path where the reader has stored the file.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the import is successful, we will search for the IP running the SMB service,
    using the following command in Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have found that there is a port of interest, we will try to dig
    deeper. Let''s try to display the SMB shares. Enter the following in the Metasploit
    console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to list the available shares, we will run the scanner auxiliary module.
    Simply type `run` or `exploit` in the Metasploit console; both commands work for
    the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, we were able to receive the details of one IP address. Let''s
    look a little closer at the live host. We will try to enumerate the type of pipe
    auditors available for this host. Type the following in the Metasploit console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A named pipe serves as an endpoint for communication; it is a logical connection
    between the client and the server; an `smb` name pipe is related to the connection
    with respect to Server Message blog. If we are lucky, we might be able to retrieve
    information like available public shares.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done, you can check that all the parameters are entered properly.
    Since there are a few tabs that must be entered before the exploit can be checked
    for the attack, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After checking online for any vulnerability on the given port, it was found
    that SMB shares are vulnerable to `ms08_067_netapi` attacks for all Windows versions
    earlier than Windows XP Service Pack 2\. Let''s try and find out if our live host
    is vulnerable to this attack. Enter the following to load the `ms08_067_netapi`
    module in the Metasploit window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if the IP is vulnerable, use the `check` command and you will get
    the output stating if it can be a successful attack vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the target is vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, we first imported the nmap result into Metasploit. This is
    very convenient when we have a bulk list of IP outputs in nmap, as we can import
    all of them and, at our convenience, perform the vulnerability assessment phase.
    Let us have a look at the understanding of all preceding the commands we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`service postgresql start`: This starts the Postgres SQL service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service metasploit start`: This starts the Metasploit client service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfconsole`: This starts the Metasploit console'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db_import`: This command allows Metasploit to import the nmap result from
    the XML file and adds it to the database containing the host list with all the
    information available via nmap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`services -p ( port no) -R`: This command shows the service running on the
    specified port and, if an IP exists which satisfies the criteria, then it would
    add it to the Metasploit host list via the `-R` command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use <scanning module>`: The `use` command selects the type of module you want
    to select from Metasploit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check`: In certain scenarios Metasploit allows the user to run the check command
    which in turn fingerprints the service and tells us if it is vulnerable or not.
    However it will not work in cases of DDOS modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more options available in Metasploit that can help you operate different
    auxiliary modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walkthrough of Metasploitable assessment with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to perform an assessment on a vulnerable
    server called Metasploitable 2\. This section will give you a walk through of
    some of the assessment tests that are carried out in the vulnerability assessment
    environment. Vulnerability assessment is a very extensive phase. We need to perform
    many tasks, such as finding out which ports are open on the server, what services
    are running on them, and whether the services are vulnerable. The same can be
    done by searching online for a known service vulnerability. All the information
    gathering and exploit compatibility checking can be done at the vulnerability
    assessment end. The point where we start exploiting the system for root or shell
    attacks can be termed as penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this exercise, we will require Metasploitable 2, a deliberately created
    vulnerable virtual machine with many services which contain vulnerabilities. The
    virtual machine of this can be downloaded at ( [https://www.vulnhub.com/entry/metasploitable-2,29/](https://www.vulnhub.com/entry/metasploitable-2,29/)
    ), along with a Kali Linux machine which we already possess. We will first see
    how to install and set up the Metasploitable 2 lab in order to commence the vulnerability
    assessment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the image has been downloaded, load it on the virtual machine. One can
    use either Virtual box or VMplayer; installation is as follows:![How to do it...](img/image_03_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once loaded, it will be loaded into the virtual machine. It will show in the
    **Virtual** tab like this:![How to do it...](img/image_03_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the **Network Adapter** device to **Bridge** mode so that it acquires
    a LAN IP. For VMware users, right click on the image, click on **Settings**, and
    select the network adapter options and select bridge mode. For VirtualBox users,
    right click on the Metasploitable image, select **Settings**, go to network and
    set the **Connect to** option to **Bridged**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One can choose to set this to **NAT** or **Host only** mode as well; ensure
    that both the machines are on the same network setting; in **Host only** mode
    however, the user will not have access to Internet. Since this activity is conducted
    in a controlled environment, the settings have been permitted to **Bridged** network.
    However, as a reader, it is recommended that you keep these virtual machines in
    a **NAT** environment or **Host only** environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the same is done, power on the machine. Since we have set the connection
    to bridged, we will automatically be assigned the IP. The same can be checked
    with the `ifconfig` command. However if we are not allocated one, run `dhclient`
    in super user. The username is `msfadmin` and the password is `msfadmin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now begin the vulnerability assessment on our Kali machine. First,
    we will perform an `nmap` scan to see the open ports on the Metasploitable 2 machine.
    Enter the following command in your Kali terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the port numbers are found, we will run the information gathering modules
    or the NSE scripts for more information. Enter the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output provides us with a lot of information. Let''s have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows us that the server is running `ftp`, `openssh`,
    `telnet`, `smtp`, `domain`, and so on. More information has been retrieved. Let''s
    look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also see a `mysql` service, `postgresql` service, `vnc` service, `x11`,
    and `IRC` running on the system. Now let's start with the vulnerability assessment
    of the Metasploitable 2 server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use Metasploit throughout this process. Let''s analyze the `ftp` service
    to see if it is vulnerable to any known component. If the `Rhosts` option does
    not show our target IP address, we can fill it manually. Enter the following command
    in the Metasploit console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will try to use the authentication bypass for `mysql` and see if we are
    successful. Run the following command on the `msf` terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We also know that there was an `nfs` service running. Let''s run the information
    gathering module `nfsmount`. Enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even try a brute force attack on the `postgresql` service via the `metasploit`
    module. To do this, enter the following commands in the `mfs` terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is an `smtp` service running as well. We can run the `smtp enumuser`
    script of Metasploit to list the available usernames. Run the following command
    in the `msf` terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We performed an assessment on the VNC service as well. To do this, enter the
    following command in the `msf` terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is an `x11` plugin to check for open `x11` connections. Let''s test for
    an `x11` service running on the system. Type the following in the `msf` terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is also an IRC channel that is running on the server on port `6667`. The
    name of the IRC is `unreal IRC`. For verification, you can run a version detection
    scan on the given port using nmap. If we Google possible exploits for this service,
    we see the following:![How to do it...](img/image_03_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By clicking on the [https://www.exploit-db.com/exploits/16922/](https://www.exploit-db.com/exploits/16922/)
    link, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This confirms that the IRC service may be vulnerable to backdoor command execution.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully assessed the Metasploitable 2 server. We haven't done all
    the tests, but we have covered a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have used the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/ftp/anonymous`: This command loads the anonymous `ftp`
    assessment script, which will help us understand if the specified IP is vulnerable
    to the anonymous ftp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/mysql/mysql_authbypass_hashdump`: This command loads
    the `mysql` authentication bypass `hashdump` check if it is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/nfs/nfsmount`: This command loads the `nfs` check and
    shows us what content has been shared by the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/postgres/postgres_login`: This module brute forces with
    the available list of credentials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/smtp/smtp_enum`: This command loads the module that
    helps list the available usernames on the SMTP service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/vnc/vnc_login`: This command loads the `vnc` credential
    `bruteforce` script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/x11/open_x11`: This command loads the `x11` open terminal
    enumeration script on Metasploit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show options`: This command shows the parameters needed to execute the scripts.
    All of the scripts mentioned here fit this description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exploit/run`: This command executes the script and provides the outputs for
    the respective script run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More of the scanning scripts can be found at the `/usr/share/metasploit-framework/modules/auxiliary/scanner
    directory`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image_03_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These are all the available scripts for vulnerability assessment, as long as
    we find a corresponding that runs on the target machine.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information, visit [https://www.offensive-security.com/metasploit-unleashed/auxiliary-module-reference/](https://www.offensive-security.com/metasploit-unleashed/auxiliary-module-reference/)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability assessment with OpenVAS framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen how manual vulnerability assessment testing takes place with the
    help of `metasploit`, `nmap` scripts. We will now look at how to use an automated
    scanner. OpenVAS is a framework consisting of several services and tools with
    comprehensive and powerful vulnerability scanning capabilities. OpenVAS is a part
    of the Kali Linux OS. It is available for download at [http://www.openvas.org/](http://www.openvas.org/)
    , and it is open source software. In this recipe, we will learn how to set up
    the OpenVAS. We will install, update, and start using the services. Here is the
    architecture to understand how the scanner operates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerability assessment with OpenVAS framework](img/image_03_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Find more information on OpenVAS at [http://www.openvas.org/](http://www.openvas.org/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will have to update all the packages and libraries. Once the installation
    of OpenVAS is done, we will update the plugins and use the scanner on the Metasploitable
    2 machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will update and upgrade our OS to make sure our packages and libraries
    are up to date. To perform that, enter the following in the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It will take quite some time to update and upgrade all your packages. Once this
    is done, browse to the following location and start the OpenVAS setup:![How to
    do it...](img/image_03_034.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The setup is self-explanatory, and you will come across the following screens.
    It updates the OpenVAS NVT Feed, as shown in the following screenshot:![How to
    do it...](img/image_03_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the installation proceeds, it updates the CVE feeds. **CVE** stands for **Common
    Vulnerabilities and Exposures**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the download completes, a user is created and the services are made available
    to us, as shown in the following screenshot:![How to do it...](img/image_03_037.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now check if the installation has been done properly using the following
    command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On successful installation, we will be shown the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This shows that our installation has been successful. We will restart the services
    at once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also create a new password for the user, as well as a new user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_03_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know that the installation has been done successfully, we will access
    the Greenbone Security Assistant. Enter the `https://127.0.0.1:9392/login/login.html`
    URL in the Iceweasel browser and enter our credentials:![How to do it...](img/image_03_042.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, this is how the screen will look. We will enter the target IP
    address as seen in the following screenshot:![How to do it...](img/image_03_043.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we hit the **Start Scan** option, the scanner uses its knowledge of all
    the plugins and checks for any known vulnerabilities on the application. It is
    a time-consuming process and totally depends on the number of ports open on the
    server. Once the scan completes, the total number of vulnerabilities detected
    is shown:![How to do it...](img/image_03_044.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, to view the reports we will click on the
    **Scan Management** tab and click on the **Reports** option, which takes us to
    the reporting page. Then, we will select the IP address that we scanned, which
    will show us all the vulnerabilities:![How to do it...](img/image_03_045.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can export a PDF report with these details. Above the reports, as the mouse
    pointer indicates in the following screenshot, there will be a download option,
    and we can save it from there:![How to do it...](img/image_03_046.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The saved PDF file will look as shown in the following screenshot:![How to do
    it...](img/image_03_047.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This file can then be used to enumerate the different kinds of vulnerabilities,
    and then we can check for the false positives-if there are any-among the list
    of vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, it is pretty easy to set up and operate the OpenVAS vulnerability
    scanner. Let's look at what actually happens in the backend, and what a few of
    the preceding commands that we used mean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the commands first:'
  prefs: []
  type: TYPE_NORMAL
- en: '`openvas-check-setup`: This command verifies that our OpenVAS setup is installed
    correctly and warns us of any incomplete installation of files. It also recommends
    any necessary fixes to get the software up and running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openvas-stop`: This command stops the services involved in the OpenVAS, such
    as the OpenVAS scanner, manager, and the Greenbone Security Assistant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openvas-start`: This command starts all the services involved in the OpenVAS,
    such as the OpenVAS scanner, manager, and the Greenbone Security Assistant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openvasmd --user=<Your Username> --new-password=<Your password>`: This commands
    helps set a new password for the user you created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openvasmd --create-user <Username>`: This command creates a user with the
    username specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we initiate a scan, the scanner loads all the modules and plugins to perform
    assessment on all the available ports. The procedure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Scans for open ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs plugins for all the open ports and their services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs known vulnerabilities from the CVE database and OpenVAS NVT feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the plugins assessment, we are provided with the output of the positive
    possible vulnerabilities of the target we are assessing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can even configure the scan as per our convenience with the help of the **Configuration**
    tab in the Greenbone Security Assistant. We can set the credentials of the system
    for a system configuration review as well, and customize the alerts, the filters,
    and the ports that we want to scan.
  prefs: []
  type: TYPE_NORMAL
- en: It is not easy to understand the term "vulnerability assessment" just by looking
    at a few examples. There needs to be a standard that can be followed to get the
    basic idea of how the assessment really happens. In this section, we will learn
    what vulnerability assessment means.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability assessment is confused with penetration testing at times. The
    core purpose of vulnerability assessment throughout the entire procedure is to
    identify threats to a system, environment, or an organization. During a vulnerability
    assessment process, the main goals are to find entry points into the system and
    find out if they are using vulnerable services or vulnerable components. Rigorous
    testing is then done to determine whether various types of known threats are present
    on the system.
  prefs: []
  type: TYPE_NORMAL
- en: However, penetration testing is something that goes beyond mere identification.
    When you start to attack the system in order to gain a shell, or crash a service,
    then you are involved in penetration testing. In order to have an organized approach
    to vulnerability assessment, one can refer to the open source. There is a very
    good article that helps understand the silver lining between Vulnerability Assessment
    and Penetration testing written by Daniel Meissler. Here is a link to the article: 
    [https://danielmiessler.com/study/vulnerability-assessment-penetration-test/](https://danielmiessler.com/study/vulnerability-assessment-penetration-test/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of testing methodologies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Penetration Testing Execution Standard** (**PTES**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Web Application Security Project** (**OWASP**): Web Application Testing
    Guide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Source Security Testing Methodology Manual** (**OSSTMM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Application Hacker's Methodology (Web application hacker's handbook)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PTES
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Penetration Testing Execution Standard can be found at [http://www.pentest-standard.org/index.php/Main_Page](http://www.pentest-standard.org/index.php/Main_Page)
    and it comprises seven main sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pre-engagement Interactions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Intelligence Gathering*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Threat Modelling*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vulnerability Analysis*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Exploitation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Post-Exploitation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reporting*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As summarized by the PTES, "*Vulnerability testing is the process of discovering
    flaws in systems and applications which can be leveraged by an attacker. These
    flaws can range anywhere from host and service misconfiguration, or insecure application
    design. Although the process used to look for flaws varies and is highly dependent
    on the particular component being tested, some key principals apply to the process.*"
  prefs: []
  type: TYPE_NORMAL
- en: PTES is a very detailed technical series of guidelines, and can be found at
    [http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines](http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines)
    .
  prefs: []
  type: TYPE_NORMAL
- en: OWASP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Open Web Application Security Project mainly deals with web application-based
    security assessments. The OWASP is a non-profit charitable organization that aims
    to improve the security of software. It is a widely used, web-based security organization.
    OWASP can be found at [https://www.owasp.org/](https://www.owasp.org/) .
  prefs: []
  type: TYPE_NORMAL
- en: 'The goals of OWASP are best summed up by the organization itself: "*Everyone
    is free to participate in OWASP and all of our materials are available under a
    free and open software license. You''ll find everything about OWASP here on or
    linked from our wiki and current information on our OWASP blog. OWASP does not
    endorse or recommend commercial products or services, allowing our community to
    remain vendor neutral with the collective wisdom of the best minds in software
    security worldwide.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*We ask that the community look out for inappropriate uses of the OWASP brand
    including use of our name, logos, project names and other trademark issues.*"'
  prefs: []
  type: TYPE_NORMAL
- en: The OWASP testing guide can be found at [https://www.owasp.org/index.php/Web_Application_Penetration_Testing](https://www.owasp.org/index.php/Web_Application_Penetration_Testing)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Web Application Hacker's Methodology
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This methodology has been well defined in the book, *The Web Application Hacker''s
    Handbook: Finding and Exploiting Security Flaws, 2ed.*  The same is available
    on [http://www.amazon.in/Web-Application-Hackers-Handbook-Exploiting/dp/8126533404/&keywords=web+application+hackers+handbook](http://www.amazon.in/Web-Application-Hackers-Handbook-Exploiting/dp/8126533404/&keywords=web+application+hackers+handbook).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize the methodology, have a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web Application Hacker''s Methodology](img/image_03_048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information regarding the working of OpenVAS, refer to the video tutorial
    by NetSecNow at [https://www.youtube.com/watch?v=0b4SVyP0IqI](https://www.youtube.com/watch?v=0b4SVyP0IqI)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
