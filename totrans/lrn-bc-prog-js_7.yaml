- en: Block Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, let's build a block explorer that will allow us to interact
    with the blockchain. A block explorer is simply a user interface that will allow
    us to explore the data inside of the blockchain. It will allow us to search for
    a specific block, specific transaction, or specific address, and then display
    that particular information in a visually appealing format.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we'll do to build the block explorer is to add some new
    methods and endpoints to the blockchain, in order to search for the data. Then,
    let's add a frontend to the block explorer, so we can use it in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a block explorer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the block explorer endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the `getBlock`, `getTransaction`, and `getAddressData` methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and testing `/block/:blockHash`, `/transaction/:transactionId`, and `/address/:address` endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing our block explorer's interface and testing it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get started on building our block explorer.
  prefs: []
  type: TYPE_NORMAL
- en: What is a block explorer?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A block explorer is an online platform that allows you to navigate through
    the blockchain, searching for various things including addresses, blocks, transactions,
    and so on. For example, if you visit [https://www.blockchain.com/explorer](https://www.blockchain.com/explorer),
    you can see a block explorer utility for the Bitcoin and Ethereum blockchains,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5baf74be-82e9-42eb-b497-9bac04387285.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside of this block explorer, you can search the entire blockchain for a specific
    block, hash, or transaction, or any other piece of data that is required. The
    utility also displays results on an interface that''s easy to understand. For
    example, if we search for `Block #549897` in the block explorer, you''ll see all
    the details of that particular block, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66f3d303-52cf-44c6-bf65-355a9aa66818.png)'
  prefs: []
  type: TYPE_IMG
- en: This is exactly what we're going to build for our blockchain in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the block explorer endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order for the block explorer to function correctly, we''ll need to query
    the blockchain for addresses, block hashes, and transaction IDs so that we can
    search for a particular parameter and get that particular piece of data in return.
    Consequently, the first step that we''ll need to carry out is to build a few more
    endpoints. To do this, lets proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `dev/networkNode.js` file and after the `/consensus` endpoint, let''s
    define the first endpoint of our block explorer, `/block/:blockHash`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A specific `blockHash` will be sent with this endpoint, which, as a result,
    will simply return to us the block that the input of `blockHash` corresponds to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next endpoint that we''ll build will be `/transaction/:transactionId`.
    This is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With this endpoint, send a `transactionId`, and in the response, we should expect
    to get the correct transaction that this ID corresponds to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the third endpoint that we''ll build is `/address/:address`, which
    is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this endpoint, we'll send a specific address, and in response, you should
    expect to get all of the transactions that correspond to this address—every time
    this specific address has either sent or received Bitcoin—in response. you'll
    also get to know the current balance of this address, which is how many Bitcoins
    this address currently owns.
  prefs: []
  type: TYPE_NORMAL
- en: So, these are the three endpoints that you'll be building in this chapter. For
    each of these endpoints, we will build a specific method in the blockchain data
    structure that will query the blockchain for the correct piece of data. So, let's
    create methods that query the blockchain for a specific block hash, transaction,
    and address.
  prefs: []
  type: TYPE_NORMAL
- en: Building the getBlock method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s build a new method called `getBlock` that will take the given `blockHash`
    and search the entire blockchain for the block associated with that particular
    hash. In order to build the `getBlock` method, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `dev/blockchain.js` file and after the `chainIsValid` method, define
    this new method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this method, we want to iterate through the entire blockchain and search
    for the block that has a particular `blockHash` value. Then, this method will
    return that specific block to us. We''re going to do all this with the help of
    a `for` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When defining the `for` loop, we cycle through every single `block` in the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, inside the loop, mention the conditions with the help of `if` statements,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To signify that the correct block that we''re searching for is found, we''re
    going to use a flag. Let''s define this flag variable as has been highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As we iterate through all of the blocks in the chain, if we come across the
    correct block, we assign it to `correctBlock`. Let''s mention this condition as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, at the end of this method, we want to return the `correctBlock` as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Building the /block/:blockHash endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use the `getBlock` method inside of `/block/:blockHash` endpoint to
    retrieve a specific block by its `blockHash`. Let''s follow these next steps to
    build the endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we want to do in this endpoint is to use the `blockHash` value
    that is sent with the `/block/:blockHash` request. We can access this `blockHash`
    on the `req.params` object. Go to the `dev/networkNode.js` file and in the `/block/:blockHash` endpoint
    that we defined previously, add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Essentially, when we hit the `/block/:blockHash` endpoint, we're accessing the
    hash value of a block present on a particular node in the network. We're also
    accessing the hash value using the `req.params` object, which will give us access
    to any value in the `/block/:blockHash` URL that has a colon in front of it. Consequently,
    when a user makes a request to this endpoint, they're going to send in a `blockHash`
    in the URL, and then we can grab that `blockHash` with the help of `req.params.blockHash`.
    We're then going to save that value inside the `blockHash` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, inside the endpoint, we want to use the `getBlock` method that we created
    in the previous section. We''ll add that method to the endpoint, as highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: By this point in the code, the block that we're looking for should be present
    in the `correctBlock` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, send back the `correctBlock` variable as a response, so let''s add
    the following highlighted code to the endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is how we build the `/block/:blockHash` endpoint using the `getBlock` method.
    Now, let's test this endpoint and verify whether or not it's working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the /block/:blockHash endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to test the `/block/:blockHash` endpoint, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first check how many blocks are present in the blockchain. Go to the
    browser and type `localhost:3001/blockchain` in the address bar and then press
    *Enter*. You''ll see the single genesis block present inside of the blockchain,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07ae3071-7127-4c90-abc0-4b25590ee71d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to add a couple more blocks to this chain. To do this, go over to
    another tab in the browser, type `localhost:3001/mine`, and then press *Enter*.
    Using the same process, let''s generate one more block. We should now have three
    blocks inside the chain: one genesis block and the two blocks we just added.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to test the `/block/:blockHash` endpoint, let''s simply take the hash
    value of one of these blocks and use it to test the endpoint. Let''s copy the
    hash value of the third block in the chain, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/df0bf9b7-fb4e-4fae-a841-8f93b5d4badf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, go to another tab in the browser. Type `localhost:3001/block` in the
    address bar and then paste the hash value that we copied directly after this URL.
    Take a look at the following screenshot for a better understanding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dac61c7b-8feb-4906-90fa-6023e74418f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we know that the hash that we''ve used is present in the third block in
    the chain. So, we should expect to get the third block returned to us as a result
    of running the `/block/:blockHash` endpoint. Now press *Enter* and the correct
    block should be returned to us as output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2ce260e8-54bf-4db5-b9cd-dd8ebb5ca4ce.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can observe that the correct block is returned
    to us. The returned block consists of the hash value that we used in the `/block/:blockHash`
    endpoint to search for the block.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar manner, you can now try searching for another block from the chain
    using the endpoint and the hash value of that particular block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we were to send in the wrong hash or a hash that doesn''t exist with
    the endpoint, then we should expect to get null returned to us as output, instead
    of the block being returned. Let''s try this by sending the wrong hash value to
    the `/block/:blockHash` endpoint. In the address bar of the browser, type `localhost:3001/block`,
    then add a fake hash value to it and press *Enter*. The following output should
    be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbfea903-4249-41e4-9bc0-d02b67b8ebb3.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, you can observe that `block` is equal to `null`.
    This means that the hash value used to search the block doesn't exist in the chain.
    Consequently, from the test, we can conclude that the `/block/:blockHash` endpoint
    works perfectly and as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the getTransaction method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add a new method on the blockchain data structure called `getTransaction`.
    This will allow us to get a specific transaction by passing `transactionId`. We'll
    use this new method inside of the `/transaction/:transactionId` endpoint. So,
    let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `dev/blockchain.js` file, and after the `getBlock` method, define
    the `getTransaction` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This method is very similar to the `getBlock` method. Here, we'll iterate through
    the entire chain and will set a flag equal to the correct transaction that we
    are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step in building this method will be to iterate through the entire
    blockchain. For this, use the `forEach` loop as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Since, in this method, we''re looking for transactions, we need to iterate
    through every single transaction on every block in the chain. Therefore, we need
    to add another `for` loop inside the preceding `for` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have access to every single transaction on the blockchain, we simply
    need to compare the `transactionId` of every transaction with the `transactionId`
    that we''re looking for. When the two match, then we know we have found the correct
    transaction. Let''s define this condition inside the loop as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, just like we did inside of the `getBlock` method, we want to set a flag
    to indicate that we have found the correct transaction inside the `getTransaction`
    method. Consequently, at the top of both of the loops, define the flag variable
    and use it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, just to make this method a little bit more useful, we''re also going to
    send back the block in which we found the transaction we were hunting for. To
    do this, define another flag as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then find the transaction we''re looking for, set the condition as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, finally, the last thing to do is to return both variables as output.
    Let''s define this return condition as follows, outside of both the loops:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Building the /transaction/:transactionId endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s build the `/transaction/:transactionId` endpoint by using the `getTransaction`
    method that we built in the previous section. Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do inside of this endpoint is to store the transaction ID
    sent as a request parameter. Let''s store that in a `transactionId` variable, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing to do is use the `getTransaction` method inside of the endpoint.
    To do this, add the following to the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'From the `getTransaction` method, we get an object returned to us that has
    the transaction we''re looking for, and the block that the transaction is in.
    We want to store this data in a variable called `transactionData`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we want to send back a simple response with the `transactionData` variable
    in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And this is how we build the `/transaction/:transactionId` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the /transaction/:transactionId endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to test the `/transaction/:transactionId` endpoint to verify
    that it works as expected. However, before doing that, we need to add some transaction
    data and blocks to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new transactions and blocks to the blockchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to what we did in the previous section, first, let''s add some transactions
    and blocks to the blockchain:'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, head over to Postman and hit the `localhost:3001/transaction/broadcast`
    endpoint to send the transaction to all the nodes in the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, send a couple of example transactions to the network. You can create the
    transactions as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29aa69ad-2785-4e2d-a2e8-7f039885ffdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding the transaction data, click on the Send button to send the transaction
    to the network. Similarly, you can add one more transaction of `"amount": 200`
    and send that to the network.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, mine a new block so that we can add these transactions into the blockchain. In
    the browser, open a tab and type `localhost:3001/mine` into the address bar. The
    new block will then be created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a0a8015-acf5-462c-886c-f45802e60ed5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, send another transaction of `"amount": 300` and send this to the network
    using the previously mentioned process. Once the transaction has been sent, let''s
    mine a block again to add the transaction to the blockchain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f6e4015-5fd2-4c53-85b9-4051ab8b2b7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, add two more transactions, with `"amount":` values of `400` and `500`,
    and send those to the network. Lastly, mine a block again to add the transactions
    that we created now to the blockchain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2af27f07-d285-48b6-ab63-e86236a03fef.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if you go to `localhost:3001/blockchain`, you'll see all of the blocks
    and transactions that we just added to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After adding transactions and blocks to the blockchain, let''s test the `/transaction/:transactionId`
    endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the browser and open another tab. In the address bar, type `localhost:3001/transaction/`
    and then append a `transactionId` value from any block present in the blockchain to
    the end of this URL and press *Enter*. Take a look at the following screenshot
    for reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22e3aba2-af6c-417c-a6f1-fba0ea3db39e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you run this endpoint, the following output should be returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ce1d2b7-fce4-4a00-a821-e489f7289d30.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can observe that we had the transaction, associated
    with the `transactionId` that we passed with endpoint, returned as output. We
    also had the block returned, which consisted of the particular `transactionId`
    that we were looking for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, carry out another example with a `transactionId` which doesn''t exist
    in the blockchain. To do this, go to the browser and type `localhost:3001/transaction/` into
    the address bar. After doing this, add a random hash value to the endpoint. Take
    a look at the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d6c1399-a364-4f23-a5bf-20e7af95cc1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you run this endpoint you will get the value null returned as output,
    as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e34a4032-d60b-4bd7-98e7-7bf9ea0e20c0.png)'
  prefs: []
  type: TYPE_IMG
- en: The null value returned as seen in the preceding screenshot, indicates to us
    that this `transactionId` does not exist in the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: From the test, we can conclude that the `/transaction/:transactionId` endpoint
    and the `getTransaction` method are working just as they should.
  prefs: []
  type: TYPE_NORMAL
- en: Building the getAddressData method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll build a new method on the blockchain prototype, called `getAddressData`,
    and we''ll use this method inside of the `/address/:address` endpoint to fetch
    the data for a specific address that we are searching for:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build this new method inside of the `blockchain.js` file. After the
    `getTransaction` method, define the `getAddressData` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the first thing that we want to do inside of this method is to get all
    of the transactions that are associated with the address and put them into a single
    array. Let''s define that array now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we want to cycle through all of the transactions inside of the blockchain.
    If any of those blocks have the address we''re searching for as the recipient
    or sender in a transaction, then we want to add all those transactions into the
    `addressTransactions` array. Let''s define this condition as follows. The first
    step is cycling through all of the blocks on the blockchain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in order to access the transactions that are inside the blockchain, we
    need to cycle through all of the transactions that are present on each block.
    So, inside of the `forEach` loop, we will have to define another `forEach` loop
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, inside of the `forEach` loop that we defined just now, we have access
    to every single transaction that is on the blockchain. We just want to test each
    transaction to see if the sender or the recipient address matches with the address
    that we''re searching for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: At this point in the code, we are cycling through all of the transactions inside
    of our blockchain. If we come across a transaction in which the sender address
    or the recipient address equals the address we are looking for, then we push that
    transaction into the `addressTransactions` array. So, after both `forEach` loop
    has completed, we'll have an array that has all of the transactions associated
    with the address that we're are searching for inside of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the balance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing that we want to do is to cycle through the `addressTransactions`
    array to figure out what the balance of the address that we are searching for is. In
    order to know the balance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first define a variable `balance` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to cycle through all of the transactions inside of the `addressTransactions`
    array. We will do that with the help of the `forEach` loop as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the loop, mention the conditions with the help of `if` and `else-if`
    statements, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, at the end of the `forEach` loop, we want to return an object that
    has a property of `addressTransactions` that matches our `addressTransactions`
    array, and the same match for `addressBalance`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: And with that, we're done building the `getAddressData` method.
  prefs: []
  type: TYPE_NORMAL
- en: Developing the /address/:address endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s build the `/address/:address` endpoint and we''ll use the `getAddressData`
    method inside of this endpoint. The `/address/:address` endpoint will be very
    similar to the `/block/:blockHash` and `/transaction/:transactionId` endpoints,
    so you shouldn''t find it too challenging:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we want to do inside of the endpoint is to store the address
    in a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing that we want to do is use the `getAddressData` method to get
    all of the data for the given address. In order to do that, we will add the following
    highlighted code to the endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'From this method, we get an object returned to us that has the `addressTransactions`
    and the `addressBalance` in it. We want to store this data in a variable as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, finally, we want to return the response that contains this data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This is how we build the `/address/:address` endpoint. Now, let's test this
    endpoint to check that it's working well.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the /address/:address endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to test the endpoint, we need to add some transaction data to the
    blockchain, let''s follow these steps to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the browser and explore the blockchain that's present on `localhost:3001`.
    You'll observe that there's only one block present here. So, let's add more transaction
    data and blocks to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To do this, go to Postman and send the transaction data to `localhost:3001/transaction/broadcast`.
    While creating these transactions, we want to make sure that we keep track of
    a specific address so that we can check for it when we test the `/address/:address`
    endpoint. In order to keep track of this specific address, let's change the first
    three letters of one of the addresses to JEN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create the first transaction. Set the `"amount":` value to `100`, and
    add `JEN` to the sender''s address for this transaction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fccee6a3-b60d-4ba7-bcce-a543fd7b824e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on Send to send the transaction to node `3001`. Then, on similar
    lines, make another transaction for `amount: 200` and this time, add `JEN` to
    the recipient''s address, and keep the sender''s address as a random hash:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c226b9dc-091b-4f5f-bc1f-eff848a816ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, mine a block to add these transactions to the blockchain. Go to `localhost:3001/mine`
    and mine a new block in the chain as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b076c60-a2cc-4e30-9e60-22294cbc42a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can make a couple more transactions by changing the amount value
    and interchanging the sender's and recipient's addresses, with `JEN` present in
    the address. Once a few transactions are created, mine a block to add these new
    transactions to the blockchain. Then, create new transactions again, and give
    them different amounts by interchanging the sender's and recipient's addresses.
    Again, mine a new block to add the transactions to the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: You can then explore the whole blockchain, with the new transactions and blocks
    that we added to it, by going to `localhost:3001/blockchain`. You'll be presented
    with a bunch of blocks and transactions inside the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in order to test the `/address/:address` endpoint, let''s follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to the browser, and hit the `localhost:3001/address/` endpoint in
    a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, copy one of the addresses from the transactions that we just added to
    the blockchain and paste it in the endpoint. Take a look at the following screenshot
    for reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cd99846-c3d7-4fc7-99fa-736b300ea724.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when we run this endpoint, we should see all the transactions associated
    with that particular address, along with the Bitcoin balance of that particular
    address. Take a look at the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/884fb442-2cc3-4913-8484-5ed4953f35d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we get the `addressData` property returned, which
    consists of the `addressTransactions` array and the `addressBalance` property.
    The `addressTransactions` array consists of all the transactions associated with
    the address that we mentioned in the endpoint. In addition, the `addressBalance`
    property consists of the balance of Bitcoins of the address that we mentioned
    in the endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f480b2b-6a5b-4407-a9c2-873c926051a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you can try to check the balance of the node address by copying the recipient's
    address of the mining reward transactions and pasting it in the `/address/:address`
    endpoint, as we did for the previous example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After running this endpoint, you'll see the balance of mining reward transactions.
    Try implementing many other similar examples to get a clear understanding of how
    the `/address/:address` endpoint works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another example you can try to implement is to pass an address that doesn''t
    exist in the blockchain. You will get the following response returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d67a48d1-03c0-431a-8ef4-11eb567a95ec.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can observe that the `addressTransactions`
    array is empty, as there are no transactions associated with the nonexistent address
    that we had as input. Furthermore, the `addressBalance` value for the nonexistent address
    is `0`. Consequently, we can conclude from the test that the `/address/:address`
    endpoint is working just as it should.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the block explorer file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's understand how to set up the block explorer frontend. The block explorer
    will be a user interface with which we can interact with the blockchain from the
    browser. In order to build this user interface and make it functional, we need
    to use HTML, CSS, and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Now, instead of building all of the frontend by yourself, you can find an entire
    prebuilt frontend at the following link: [https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/block-explorer/index.html](https://github.com/PacktPublishing/Learn-Blockchain-Programming-with-JavaScript/blob/master/dev/block-explorer/index.html).
    We're not building the entire frontend in this section, because that's not the focus
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: To build the frontend, all you have to do is copy the file from the link provided
    and add that to the project's file structure. Now, go to the `dev` folder and
    create a new folder inside it, called `block-explorer`. Inside this `block-explorer`
    folder, create a file called `index.html`, into which you need to paste the supplied
    code for the frontend and then save the file. You'll get a quick overview of what
    this frontend code consists of and how the code functions in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Building the /block-explorer endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s build an endpoint that will retrieve the `block-explorer` file for us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `dev/networkNode.js` file, and in here, create a new endpoint that will
    send this file to us. Define the endpoint as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, inside of this endpoint, all we want to do is send back the `index.html`
    file to whoever called this endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You must have observed in the previous sections that we usually use `res.json`,
    which is a way to send JSON data. However, in this endpoint, we want to send the
    whole file, so we''ll use the `res.sendFile` method instead. Note that in the
    preceding code, we used `{ root: __dirname }`. This code term indicates that we
    should look into the directory in which the project is stored, and search in there for
    the file with the `/block-explorer/index.html` path. This is why we added this
    option to the endpoint as a second parameter, and this is how we build an endpoint
    to send the `index.html` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, save the `networkNode.js` file and verify whether this endpoint works
    by hitting `localhost:3001/block-explorer` in the browser. You will then be presented
    with the block explorer frontend, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45b96e5c-3143-4922-be7d-573ae6a1cc22.png)'
  prefs: []
  type: TYPE_IMG
- en: Everything that you see here in this frontend is contained within the `index.html`
    file that we just created.
  prefs: []
  type: TYPE_NORMAL
- en: Block explorer file explanation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're simply going to walk through the `index.html` file that
    we created in the previous section. We'll do this to gain a better understanding
    of what is going on. So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `index.html` file, we have all of the HTML and JavaScript code to
    give the necessary functionality to the block explorer. This code also allows
    us to hit the API, and lastly, we just have some CSS and styles, which make everything
    look nice in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code begins by importing a couple of libraries, such as `angular.js`, to
    hit the API, along with jQuery, Bootstrap, and some Bootstrap styles to make everything
    functional and aesthetically pleasing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have the body of the HTML model, which consists of the block explorer title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have a text input form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have a `select` input with three options in it: `Block Hash`, `Transaction
    ID`, and `Address`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To use this page, let''s enter either a Block Hash, Transaction ID, or Address
    into the text field, and then select which one we''re looking for from the drop-down
    menu, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2174b88c-b631-43d0-b652-89344466b170.png)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, in the HTML code, we just have some tables that will display all of
    our data for us once we have some data from the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we also have some JavaScript code in our `index.html` file. In
    this JavaScript code, we use Angular to make the calls to our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we have a method where we hit the `/block/:blockHash` endpoint whenever
    we select the Block Hash option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we have the method for the `/transaction/:transactionId` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have the method for the `/address/:address` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Throughout the rest of this JavaScript, we just have a little bit more functionality
    and then we have the CSS styles towards the end of the code. Consequently, this
    code is contained in the `index.html` file. If you want to dig a little bit deeper
    into this to gain a clearer understanding, feel free to do so. You can also customize
    it however you would like to.
  prefs: []
  type: TYPE_NORMAL
- en: Then you press Search, and if the specified data exists in the blockchain, a
    table will be displayed that will show all of that data. If the data doesn't exist
    on our blockchain, you will get the result that no data was found. This is how
    the block explorer frontend will work.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have built an entire block explorer frontend, and we have
    the backend of the block explorer—the three endpoints that we just created—in
    order to search through the entire blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we're going to test the block explorer to make sure that
    it works perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our block explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to test the block explorer to make sure that
    it works correctly, and also to make sure that all endpoints and methods that
    we created in the previous chapter also work correctly. If the block explorer
    works, then we already know that the entire blockchain is also working correctly
    and is running on the decentralized blockchain network, so everything is wrapping
    up nicely now as we enter the final section of this chapter. Consequently, this
    is the last test that we will be doing. Let''s follow these steps now to test
    the block explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to test the block explorer, we should ensure that we have all five
    of the nodes running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, head over to the browser and open up the block explorer by going to `localhost:3003/block-explorer`. You
    can actually go to a block explorer that's hosted on any of the nodes in the network,
    because the blockchain is hosted across the entire network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in order to test the block explorer, we need to add some data to the blockchain.
    To add data to the blockchain, we're just going to create a lot of transactions
    and create some new blocks similar to what we did in the previous sections. You
    can refer back to the previous chapters for a quick review on how to add transactions
    and blocks to the blockchain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding the data, we can now test the block explorer. Let''s first get
    a block by searching for its block hash. Let''s select the Block Hash option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a465bd88-f866-497e-afcb-2f18883956ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, from the blockchain, copy the hash value from any of the blocks and paste
    it into the block explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8799bb9d-11df-4f03-b42f-792ae81be284.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the Search button. You should see a similar output as in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a17bde2-ca74-4ef8-9c1d-229fcff582c5.png)'
  prefs: []
  type: TYPE_IMG
- en: This is basically how the block explorer works. We enter a hash or a piece of
    data that we're looking for, and in return, we get that piece of data as output.
    From the preceding screenshot, we can observe that we had the block returned with
    an index of `4` for the hash value that we input to the block explorer. We also
    got all of the details related to that block. Furthermore, as you can probably
    tell for this search, we're hitting the `/block/:blockHash` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, search for a transaction by inputting the `transactionId`. Go to block
    explorer and select the Transaction ID option. Then, go to the blockchain and
    copy a `transactionId` value from any block and input it to the block explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f116f514-a314-46df-87d6-2d0d85c2a27b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then click on the Search button. You''ll see a similar output to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8098b0c5-0ac5-4d8c-aa10-7e2d873883f9.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that we got all of the transaction
    details related to the `transactionId` that we input to the block explorer. We
    also got to observe the balance amount of 400 bitcoins for that particular `transactionId`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, test the address endpoint. To do this, select the Address option from
    the block explorer and then input either the sender''s or recipient''s address
    from any of the blocks. Then click on the Search button. You should see the following
    output on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/495f512d-da51-4440-8836-d6983e0ae3e0.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that the address has a balance of
    749.35 Bitcoins and we can see all of the transactions that are associated with
    the address that we've input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for any of these searches, if we input a piece of data that doesn''t exist,
    we''ll get the result back as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9badf319-0a93-47cf-9900-c18977e4e4ec.png)'
  prefs: []
  type: TYPE_IMG
- en: This proves that the block explorer works just as it should.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built an amazing user interface to explore the blockchain
    that we have built in this book so far. We started by defining the necessary endpoints
    for querying the required data. Then we built methods such as `getBlock`, `getTransaction`, and
    `getAddressData` to help the endpoints to query the data. Furthermore, we developed
    the `/block/:blockHash`, `/transaction/:transactionId`, and `/address/:address`
    endpoints. After doing this, we added the block explorer's frontend code to our
    blockchain directory and then tested the block explorer and all the endpoints
    that we developed.
  prefs: []
  type: TYPE_NORMAL
- en: With this chapter, we have reached the end of this book. By this point, we have
    built our very own blockchain and added all the necessary functionalities to it.
    In addition to this, we have also built our decentralized network and an interface
    to explore the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be a quick summary of what we have learned throughout
    this book. We'll then explore what else we can do with the blockchain that we've
    developed.
  prefs: []
  type: TYPE_NORMAL
