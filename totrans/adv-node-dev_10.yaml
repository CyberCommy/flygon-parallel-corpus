- en: Async/Await Project Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to go through the process of learning how async/await
    works, what exactly it is, and where it''s going to fit into what we know about
    Node already. **Async/await** is a feature that is not available in all versions
    of Node. You have to be using the 7.6 or greater. So if you are on V7, just make
    sure you are on 7.6 or greater. If we go over to [nodejs.org](https://nodejs.org/en/),
    you''re going to see that v9 is actually out, so we can go ahead and just upgrade
    to V9 right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8df4fd3d-1152-4b3c-bff2-725e9cb538bd.png)'
  prefs: []
  type: TYPE_IMG
- en: It's perfectly fine if there's a newer version. You can go ahead and grab that
    as well, as long as it is 7.6 or up. So 6.10, it's not going to have the syntax
    that we're about to dive into.
  prefs: []
  type: TYPE_NORMAL
- en: Using async/await features in promises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, before we actually use async/await, we're going to go ahead and run through
    an example that just uses promises. We're going to use techniques we already know
    to set up a little example project. Now, when people hear about async/await, they
    think that they need to forget everything they know about callbacks and promises,
    and that is not true. Async/await is not a third option; it is more like an enhancement
    for promises. We're going to go through an example using just regular old promises,
    things you already know how to do. Then we're going to see how async/await can
    enhance that code. So, to kick things off, we do need a place to put all of this.
    I'm going to make a brand new project on my Desktop, `async-await`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can crack that open in our editor and make sure to crack it open in your
    terminal as well. Now, the goal here is to just make a very simple project. We''re
    not going to need any Node modules for this one and we are just going to need
    a single file. This file can sit in the root of the project and we''ll just call
    it `app-promises.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eebdc135-aed2-48bd-b38c-440efd8094cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is going to be the version of our application that just uses promises.
    Now, before we go any further, I do want to give you a quick idea as to what the
    chapter is going to look like. We''re going to go through three distinct things:
    first up, we are going to create a very contrived example and this is going to
    allow us to learn how to use async/await without a lot of overhead or baggage.
    So, we''re going to be creating constants, like `users`, which would just be an
    array of objects and constants, like `grades`; also an array of objects and this
    is going to be what a database would look like.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, there is nothing asynchronous about accessing some property from
    an array, so we're going to go ahead and create some new promises to turn a synchronous
    process into an asynchronous one.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the getUser project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, the first project is not very real-world, but it is going to be a great
    way to learn the new syntax. Then we're going to move on to another little project
    where you're going to be required to make two actual API calls from some APIs
    I picked out. Those will be asynchronous and we'll use async/await there. To wrap
    things up, we're going to add a little bit of async/await code back into the todo
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to kick things off, we''re going to go through this very contrived example
    and we can start by creating a few users to work with. Each user object is going
    to have a few properties; we''ll start off with an `id`, just like they would
    have inside of a real database. I''m going to give this one an id of `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also have a name, a string name for the user. I''m going to call the
    first one `Andrew` and then we''re going to move on to the final property, a `schoolId`,
    an ID that will change as the student switches from one school to another. We
    can just make up another id for this one. I''m going to go ahead and start at
    `101`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have user number `1` created'' let''s go ahead and clone him. I''m
    going to copy it, toss a comma and paste it, and we''ll create just one more user
    for this example. This one will have an `id` of `2`. We''ll change the name from
    `Andrew` over to something like `Jessica` and we''ll give her a `schoolId` of
    `999`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have some users in place, we''re going to create our first of three
    functions we''ll be building in this section. This one is called const `getUser`.
    It is going to take the `id` of the user, find that user, and return the user
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if the `id` is `1`, we''re going to get this object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s `2`, I''m going to get this object back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If it's `3` or some other id that doesn't exist, I'm going to actually have
    an error thrown. So, this is going to return a promise of resolve if the `id`
    is a match with one of the users, or reject if it's not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as I mentioned, this is a contrived example, so we''re going to be creating
    new promises explicitly. I''m going to create a new promise, passing in that promise
    function which, as you remember, gets called with `resolve` and `reject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then we're going to go ahead and add a little bit of logic in the function.
  prefs: []
  type: TYPE_NORMAL
- en: The array find method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do is try to find a match and I''m going to use
    the array find method to get that done. We''ll create a `const user` to store
    the match, then we''ll set it equal to `users.find`, passing in our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now this function gets called one time for every item in the array. It's an
    array of users so we can call the individual item `user`. If we return `true`,
    it is going to consider that a match. It'll stop and it'll set that object on
    a user. If we return `false`, it'll continue on through the array and, if none
    are matched, undefined will be the value for user. So, we're just going to return
    `user.id`, checking if it equals the `id` passed in.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a great candidate for the shorthand syntax here. We just have
    an arrow function that returns some value. It just provides the value and have
    it be implicitly returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have the exact same functionality. Now, before we go ahead and use
    it, let''s go ahead and actually call `resolve` or `reject`. If there is a user,
    we''re going to do one thing; if there''s not a user, that''s fine, we''re just
    going to do something else. In the `else` statement, we''ll be calling `reject`
    and, in if statement, we''ll be calling `resolve`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, `resolve` is just going to have the user passed in and, for `reject`, we
    can come up with an error message that helps the user figure out what went wrong.
    We can add `unable to find user with id of .`, then, we'll put the `id` next to
    it. Inside the template string, I'm going to reference `id`. This is the exact
    value that was passed in the `getUser` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, before we go ahead and actually run this, let's just use `getUser` real
    quick. I'm going to call `getUser` with an `id` of `2`, which should return `Jessica`.
    I'll add on then and `catch`. Inside `catch`, we can `catch` that error. We're
    just going to get the error and log it out, `console.log(e)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can set up our `then` callback; inside `then`, we''re going to get
    access to the user and, for now, we''ll just log it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Running the getUser object test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To actually run this, we''re going to head over into the Terminal and make
    sure we do get the expected results. I''m going to be using `nodemon` to get that
    done. If you just updated Node, it also updated `npm` and, at the end of the day,
    what that means is that you no longer have access to those global modules. You
    might need to rerun `npm install -g nodemon` before you can use the `nodemon`
    command. I''m going to use `nodemon` running the `app-promises.js` file and, right
    here, we have our output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e958782-4416-4d8d-9f6e-6853fcbc6698.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have Jessica printing with a `schoolId` of `999` and an `id` of `2`. That
    is because I passed `2` in `getUser` id:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If I switch this out for `1`, I should see `Andrew`. I do indeed see `Andrew`.
    Finally, let''s go ahead and pass in an ID that doesn''t exist like `21`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Right here I do get the message: `unable to find user with id of 21`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48afe2da-d67b-4dce-b536-052629b8d18f.png)'
  prefs: []
  type: TYPE_IMG
- en: So, this is the first of three projects that we're going to be building. Let's
    go ahead and knock out the other two real quick.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the getGrades project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will set us up to actually explore the async/await syntax, using `const
    getGrades`. `getGrades` is going to be very similar to `getUsers` although. Instead
    of working with the users array, it is going to work with the grades array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, we don't have any grades set up, so let's go ahead and set some up.
  prefs: []
  type: TYPE_NORMAL
- en: Creating grades for the getGrades project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to go ahead and create a few grades. First up, let''s create a
    grade with an `id` of `1`. Now, this `1` is going to be attached to `Andrew`,
    so we''ll go ahead and use the `schoolId` to do that. The `schoolId`, in this
    case for `Andrew`, is `101`. Then, we''re going to put in the actual `grade`.
    In this case, I''ll go ahead and give myself an `86`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is grade `1`; let''s go ahead and create three more grades. I''m going
    to copy it, toss in a comma, and paste it two times. This one is going to have
    an id of `2`. We can associate this one with `Jessica`, so we''ll give her the
    `schoolId` value of `999`. She''s really smart so we''ll give her a `100`. Finally,
    id of `3`: we''ll leave this one associated with `Andrew` and, next, we''ll give
    him a grade of an `80`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: So, we have some grades in place and the goal is to return all of the grades
    for a particular student based off of their `schoolId`. If I pass in `101`, I
    would expect an array to come back with the object associated with Andrew. If
    I pass in `999`, I would expect an array to come back with the one associated
    with Jessica, and if I pass in a value like `55`, there are going to be no grades
    for that student, so we'll go ahead and return an empty array.
  prefs: []
  type: TYPE_NORMAL
- en: Returning a new promise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in the `getGrades` variable, we''re going to get the `schoolId` that we''re
    using to look things up with. Then we''re going to go ahead and return a new promise;
    this is all part of the contrived example, `resolve` and `reject` are our two
    arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Then, right here, we're going to go ahead and `resolve` the filtered grades
    array, that is `grades.filter`. We're going to filter this one by passing an arrow
    function. It'll get called with the individual grade, not user, and then we'll
    go ahead and implicitly return something. If we return `true`, it'll be considered
    a match and that grade will be resolved. If we return `false`, that grade will
    be removed from the array that gets resolved. In this case, we want to keep the
    grade if the `grade.schoolId` equals the `schoolId` that the function was called
    with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, that is it for `getGrades`; we can go ahead and test it out.
    I''m going to call `getGrades` instead of `getUser`. I''m going to pass in a valid
    `schoolId` like `101` and, instead of user, we''ll have `grades`  and next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If I save this, what do we get? We get an array with two objects, as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e6a57eb-ba42-42c7-bdca-429a6839e282.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have all the grades for `Andrew`, `86` and `80`. I''m going to go ahead
    and pass in `999`; we get Jessica''s grades and, finally, we pass in `12`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If I pass in `12`, we get an empty array, which is exactly what I was hoping
    for. Just one more function left, and then we'll be done with this section and
    we can move on to the next one.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the getStatus project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This project is going to be called `const getStatus`. `getStatus` is going
    to be a function and it is going to take the `userId`, the `id` for the user whose
    status you''re trying to fetch. Now, the goal of this project is to just return
    a string along the lines. We''ll start off with their name, like `Andrew`, and
    then we''ll add a little bit of information; `Andrew has a`, in this case, I have
    an `83` average in the class (so I take `80`, I add on `86`, I divide it by `2`
    to generate that average). So, we want to resolve the following string from `getStatus`
    after we actually run through `getUser` and `getGrades`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Resolving the getStatus string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to go ahead and knock this out, and then we''ll be done. That
    means we''ll be calling `getStatus` with a `userId`. We''re going to get the status
    back and we are going to log the status out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now to kick things off, what do we need to do? First up, we have to go ahead
    and `return` to keep the promise chain alive, because we attach the then and `catch`
    callbacks with the `getStatus` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we''ll be calling `getUser`. Before we can actually use `getGrades`,
    we have to take the `userId`, find the user object, and get their `schoolId`.
    We also want to make sure to have access to the name for the message, so we need
    two pieces of information off of that object: `getUser` and `userId`. We''ll add
    our `then` callback. In this callback, we''re going to get access to that user
    object and this contains some useful information. One of those pieces of information
    is going to allow us to actually call `getGrades`. I''m going to `return getGrades`,
    right here, and we''re going to pass in the student school ID, that''s `user.schoolId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'So now that we have `getGrades` called, we''ll have access to those grades
    next. The success callback for `getGrades` promise  will get the `grades` array.
    We can then go ahead and actually create an `average` variable, which we''ll do
    in a second, and then we can `return our string`. So, that is the goal for this
    function, but this is where we run into one of the first problems you most likely
    have seen when working with promises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We have the `getStatus` promise chain; we have to have one promise called in
    order to actually start the other one and, at the end of the day, I want to do
    something with values from both. Well, we can't; we do not have access to user
    inside the second `then` function. It was created in another function, the first
    `then` callback, which is a pretty common problem.
  prefs: []
  type: TYPE_NORMAL
- en: So, how do we solve this? There are a few ways we could do that. Most of them
    are kind of ugly workarounds. Just below the `getStatus` variable, I could make
    a variable called `user` and I would set it equal to undefined at first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the first `then` callback, I will give it a value when this function
    runs. Now, I can''t have two variables with the same thing. If I try to type `user
    = user`, we''re going to run into some problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'It is going to take the `user` value and set it equal to the user value in
    then callback. It''s not going to use the user variable at all. So we have to
    add another little workaround: `tempUser`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Then we're going to go ahead and set `user = tempUser`, and this is going to
    technically work. We'll now have access to user variable and we can get some stuff
    done.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the average
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, we can calculate the average of our `average = 0` in the second `then`
    callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ve been using const throughout the course. We can actually switch
    our `var` over to `let`; `let` is the ES6 equivalent to `var`, so this is a variable
    whose value we can change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re going to start off with an average of `0` and move on to actually
    calculating a better average if there are `grades`: `grades.length`. If `grades.length`
    is greater than `0`, we''re going to go ahead and actually run a calculation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're going to use a few array methods here. First up, we're going to set
    average equal to some value. We're going to kick things off by taking our array
    of objects and getting it down to an array of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: We'll do that using map; that's `grades.map`. Here, we're going to go ahead
    and get access to the individual grade and all we're going to do is implicitly
    return `grade.grade`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: So, we have the individual `grade` object and we're trying to access its `grade`
    property. At this point, we have an array of numbers. We need to turn those numbers
    into a sum and then we have to divide that by the length of the array. We'll be
    using `reduce` here, so we call `reduce` on an array of numbers. `reduce` works
    a little differently than some of the other array methods you might have seen
    in the past. This one takes two arguments, `a` and `b`;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the first time it goes through, it''s going to take the first two grades
    and we''ll be able to do something with those grades. What do we want to do? We
    want to return `a + b`. Then it''s going to take that sum for the first two grades,
    it is going to call the reduce function again, putting that sum and putting the
    third grade. We''ll take `a + b` to get that value added on to the new `b` and
    then we''ll continue to generate that sum. Now, you can actually simplify that
    `a + b`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, this alone just gives us the sum so, in the case of `Andrew`, we haven't
    calculated the average `83`; we've just added up the two numbers. You also want
    to divide this by `grades.length`; that is what's going to give us the average.
    We can go ahead and test this out by printing the `average` variable, `console.log
    (average)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: I'm going to save it. We have `getStatus` and we have `getStatus` for `1`. That
    is perfectly fine, we can continue to use that. In the terminal, we get `83` printing,
    which is the correct average.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ddf5dd1-a439-4778-9e86-517849b86da5.png)'
  prefs: []
  type: TYPE_IMG
- en: If I go ahead and rerun it for user `2`, we get `100` printing. Everything is
    working really well; `undefined` is just coming up because we don't have anything
    returned so status equals `undefined`, which prints in the `console.log` statement.
    So, instead of just dumping average to the screen, let's go ahead and actually
    return our template string. This is the final thing we're going to do in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Returning the template string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just above the `console.log` statement for average, we''re going to follow
    this format starting off with the name, that is, `user.name`. Then we''re going
    to move on to the next part, has a, followed by their grade. That''s the `average`.
    We''ll toss the `%` after it in the class period:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''re returning something, this value will be accessible to whoever
    calls `getStatus`. In this case, that happens right here. In the Terminal, we
    see `Jessica has 100% in the class` printing to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b34cd88f-5855-41dd-90f3-65856c3ec008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If I go on to `1`, we see `Andrew` has an `83` and, if I type in some other
    `id`, we can see `Unable to find user with the id of 123` printing. So, this is
    it for our contrived starter example. I know there wasn''t a heck of a lot of
    interesting stuff here, but I promise having an example to work with, it''s going
    to make understanding async/await so much easier. So, the goal in the next section
    is to take the code snippet and get it down to about three lines of code using
    this new syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: It's going to be three lines of code that are a whole lot easier to read and
    work with. It's going to look like synchronous code as opposed to callbacks and
    promise chains.
  prefs: []
  type: TYPE_NORMAL
- en: Async/await basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you''re finally going to get to use the new async/await functionality.
    We''re going to create an alternative version of the `getStatus` function and
    call it `getStatusAlt`, so we can go ahead and actually define that: a const `getStatusAlt`. Now,
    it''s still going to be a function, so we''re going to start off by creating an
    arrow function (`=>`). We''re still going to take in an argument, so we''ll define
    that `userId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, though, we're going to switch things up. Instead of working through the
    old example, we're going to use the new async/await functionality. To explore
    this, let's temporarily comment out the `getStatus`-`then` and `catch` block code.
    We'll be recreating it with a call to `getStatusAlt` as opposed to a call to `getStatus`,
    but I do want to leave the old code in place so we can directly compare and contrast
    the differences.
  prefs: []
  type: TYPE_NORMAL
- en: The new async/await functionality is going to allow us to write our old code
    in a way that looks like synchronous code, which means that we'll be able to avoid
    things like `then` callbacks, promise chaining, and workarounds. With async/await,
    we're going to able to avoid all of that stuff, creating a function that's just
    a whole lot easier to read, alter, work with, and test. Now, `getStatusAlt` is
    going to start off in a way that is super boring.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to return a string, `Mike`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This is the JavaScript `101` stuff. You would expect `Mike` to come back. If
    I use `consult.log`, his name should pop out through `getStatusAlt`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s just go ahead and work through this, so we''re going to save the file,
    `nodemon` is going to restart, and there we go. We have `Mike` printing to the
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7eaf74b-6b0e-4ffe-9b31-76b5f717ace6.png)'
  prefs: []
  type: TYPE_IMG
- en: That's exactly what we would expect. Now, with async/await, we actually mark
    our functions as special functions. I have a few functions here. We're going to
    be marking `return 'Mike'` as a special async function. So in the future, `async/await`
    are going to be two words `async` and `await`. These aren't just words, but actual
    keywords that we're going to be typing out.
  prefs: []
  type: TYPE_NORMAL
- en: Using the async function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first one, `await`, will eventually get used inside of our `async` functions
    but, before we can ever use `await`, we have to mark that function as `async`,
    so we''re going to do that first. We''re going to explore it, then we''ll move
    on to `await`. In the `getStatusAlt` variable line, all we''re going to do is
    add `async` in front of our arguments list with a space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, this is actually going to change how the `console.log` works; to explore
    that, all we''re going to do is save the file and see what we get. Instead of
    getting the string `Mike` back, you can see we''re now getting a `Promise` back:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ed5f2f8-73dd-49f2-b71f-cbd75509283e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re getting a promise back that resolves the string `Mike`, so this brings
    us to the first big difference between regular functions and `async` functions.
    Regular functions return strings and strings come back; `async` functions always
    return promises. If you return something from an `async` function, it''s actually
    returning a promise and it''s resolving the value. So this function is equivalent
    to the following code. You don''t have to write this out; this is just to get
    the idea. It is equivalent to creating a function that returns a new promise where
    that new promise gets `resolve` and `reject`, and it then calls resolve with `Mike`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: These two are identical, they have the exact same functionality. We create a
    new promise, we resolve `Mike` or we use an `async` function that simply returns
    something.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, that is lesson one: when you have an `async` function, whatever you return
    is actually just going to get resolved, which means that we can switch up this
    usage.'
  prefs: []
  type: TYPE_NORMAL
- en: In place of `console.log` statement, I'm going to call `getStatusAlt`. This
    time we're getting a promise back and we know that, so we can just use the `then`
    callback. What are we going to get back? We're going to get back the return value
    as our resolved value.
  prefs: []
  type: TYPE_NORMAL
- en: 'If I return to string, I''d get a string back; here a number, I''d get a number;
    a Boolean, an object, a function; whatever you explicitly return from this function
    is going to be available as if it was resolved, which means that I can create
    a name variable like a `console.log(name)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, what are we going to get back inside `nodemon`? We''re just going to get
    back `Mike` once again, the regular plain old string. Because we''ve added on
    a piece of promise-based chaining, we then get the name and we print it out, and
    here `Mike` prints once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df24595e-51c1-4109-9dda-980a368ea47b.png)'
  prefs: []
  type: TYPE_IMG
- en: So, if returning a value is equivalent to resolving, how do we reject?
  prefs: []
  type: TYPE_NORMAL
- en: Rejecting an error using the async function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If I want it to reject an error like (`''This is an error''`), how do I go
    about doing that with the new `async` feature? All we do is throw a new error
    using standard JavaScript techniques. Throw a new error with a message, (`''This
    is an error''`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to using the `reject` argument in the new Promise. When
    you throw a new error from an `async` function, it is exactly the same as rejecting
    some value. So, in this case, we can go ahead and use that error by adding a `catch`,
    like we would if it was a regular old promise. We''re going to get the error back,
    and I''ll use `console.log` to print it to the screen, if it occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s always going to occur, because I throw it on line `1`. If I save the
    file, `nodemon` restarts and we get `Error: This is an error` printing to the
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c705b4a4-fef0-4bca-8159-8b51cc42380e.png)'
  prefs: []
  type: TYPE_IMG
- en: So, those are the first two important things you need to know about `async`
    functions before we go any further and use await. Returning something is equivalent
    to resolving, and throwing an error is equivalent to rejecting; we always get
    a promise back.
  prefs: []
  type: TYPE_NORMAL
- en: Using the await function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we have only used half of the feature. We've used the `async`
    part, which alone is not particularly useful. It gets really useful when we combine
    it with `await`, so let's go ahead and start taking a look at that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `await` function is going to allow us to introduce the other functions
    back into play, `getGrades` and `getUser`. We''re just going to go ahead and use
    `await`, and then we''ll talk about exactly what''s happening. So, for the moment,
    bear with me and just type out this line: `const user =` and we''re going to set
    it equal to the `await` keyword. We''ll talk about this in just a second; we''re
    going to call `getUser` and we''re going to pass in the `userId`. So let''s start
    breaking this line down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We've done this before; we're calling `getUser` with the `userId`. It returns
    a promise.  We're creating a new variable user and it's a constant; it's the `await`
    part that's new. So the `await` keyword, as I mentioned earlier, has to be used
    in an `async` function. We're meeting that criteria. We have an `async` function,
    which means we can use await inside it.
  prefs: []
  type: TYPE_NORMAL
- en: We use `await` just before a promise, so here we get a promise back. So, we're
    awaiting for that promise to either `resolve` or `reject`. If that promise resolves,
    the result of this expression is going to be the resolved value, which means that
    resolved value will get stored in the user variable. If the promise rejects, it
    is going to be equivalent to throwing an error, which means no user variable will
    ever be created. The function will stop executing and we'll get that error inside
    `catch`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and actually play around with this. What I''m going to do is
    pass an `id` into `getStatusAlt`. Let''s go ahead and use `Jessica`; all we''re
    going to do is `console.log(user)` to the screen. We want to see what user equals.
    Now, `nodemon` is going to restart in the background and my `nodemon` got cleared
    before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d87d9af9-e821-468c-b768-3957d25d81d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Right here, we have our object with an `id` of `2`, the name of `Jessica`, and
    the school id of `999`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, without `await`, we would be getting a promise back; with `await`, we're
    able to actually get that value back, which is equivalent to what we did previously.
    It's equivalent to this stuff where we got access to the user and we did something
    with it but, using `async/await`, we're able to do this in a way that looks very
    synchronous.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can apply this exact same technique to getting the grades. Next to
    the `user` const, we''re going to make a const called `grades`. We want those
    grades back. What we don''t want to do is create stupid temporary variables, add
    complex chaining, and nesting. We just want to get the grades, so we''re going
    to await the following promise, to either `resolve` or `reject`. For the one that
    comes back from `getGrades`, we pass in a valid school id, `user.schoolId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This is going to return the `grades` array, for that user will be able to dump
    them to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the Terminal, we are getting the object and the grades for `Jessica`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/739f501c-8c70-46e8-8293-12942466abb9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'She just has one grade, so we have an array with a single object inside it.
    We''re not getting back a promise; we''re getting back a regular old array. The
    same thing is true for `Andrew`; he''s going to have those two grades:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'They''re all going to come back and, if I switch this up to an `id` that''s
    not valid, we''re going to get our error: `Unable to find user with an id of 123`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fa2a59c-d746-4226-8300-43b89c28006d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That is because the `await` function rejects, which is equivalent to throwing
    an error. We saw that when we throw an error from an `async` function with access
    to it via `catch`. So, at this point, we have our user, we have our grades, and
    we''re ready to move on to the final step, which is the actual important stuff.
    So far, we''re just getting data out, took a few lines of code that required us
    to nest things. At this point, we can take the code snippet for average, exactly
    as it sits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'This code relies on a `user` variable, which we have, and a `grades` variable,
    again, we have it as well. We can take it and copy it in the `async` function
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we set up our average variable. We calculate the average if there are
    grades and we return our status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we can use the status and we can print it using the `console.log`
    statement. Let''s change this back to a valid `id`, either `1` or `2`, some `id`
    that does exist. This time, when JavaScript runs through `getStatusAlt`, it is
    actually going to return the correct status: `Andrew has an 83 in the class` or `Jessica
    has a 100 in the class`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28df30c7-48ca-4b69-b59d-9acbf81ca8eb.png)'
  prefs: []
  type: TYPE_IMG
- en: We were able to do all of this without a single callback, no chaining, no nesting,
    just regular old code that looks like synchronous code.
  prefs: []
  type: TYPE_NORMAL
- en: This code is way more readable, maintainable, and understandable than what we
    have up above. Using `async`/`await`, we're going to be able to do just that.
    We're going to be able to write better, more concise promise-based code. Now,
    you'll notice that I'm not using `await` on the functions up above. There is no
    need to, because we don't need `async` inside them. One more important thing to
    note, there is no top-level `await`. You have to use `await` inside an `async`
    function so, in our case, all that means is that we do use a little chaining at
    the end, but when we are working with complex chains, we are able to use `async/await`
    to get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I don't expect you to be able to use `async`/`await` on your
    own. We're going to run through another example using real APIs that's going to
    give us a little more real-world experience. I'm excited to get to it.
  prefs: []
  type: TYPE_NORMAL
- en: A real-world example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to move on from our contrived example and we''re
    going to look at an example using two real HTTP APIs. Before we do, it''s important
    to note that arrow functions (`=>`) aren''t the only functions that support `async`.
    I just happen to use an arrow function (`=>`). I could also use an ES5 function
    with the `function` keyword; this works as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'I can save the file and I''m still going to get `Jessica has 100%` printing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8ec5e0a-4379-481c-b740-d670caa0ac4d.png)'
  prefs: []
  type: TYPE_IMG
- en: I could also `async` an ES6 object method, but I'm going to stick to an arrow
    function (`=>`) here. Now, we're going to leave this file in the dust and we're
    going to move on to a brand new file for our real-world example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a currency-converter using the async/await function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This one is going to be called `currency-convert.js` and, as you can probably
    guess by the name, we're going to create a currency converter.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, this is just a function that takes three arguments. We're going
    to start off with the currency code for the currency we're starting with; in this
    case, let's say I have US dollars. Then there's the currency code we're trying
    to convert to; let's say I'm going up to Canada and I want to see how much my
    money is worth; and the amount we want to convert by.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this is essentially asking for the Canadian equivalent of `23 USD`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to be able to use any code we want and any value we want. Now,
    to actually get all that information, we are going to be using two APIs. We would
    essentially be saying `23 USD is worth28 CAD. You can spend these in the following
    countries`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Then we'll go ahead and list out all of the countries that actually accept the
    Canadian dollar. Now, to actually get all this information, we will be using those
    two APIs and I do want to explore those over inside Chrome. Then, we'll install
    Axios, make the requests, and integrate all of that into the currency converter.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring APIs for currency exchange rate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first API we''re going to be using is at [fixer.io](http://fixer.io/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6c4836a-172c-4101-acd2-d02c93c36e95.png)'
  prefs: []
  type: TYPE_IMG
- en: This one is going to give us current currency numbers, so we're going to be
    able to get those exchange rates. If we go over to their website, they have a
    great usage page. You can click the URLs; it's going to show you the exact data
    that would come back had you made an HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: 'This API and the other one we''re going to be using, they do not require authentication
    so we''re going to be able to integrate them without too much trouble. Here, we
    see the base currency is the Euro and we can see what a Euro is worth in other
    currencies. So €1 is currently worth 1.2411 USD or 1.5997 CAD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36b75cae-700a-47d5-a1c6-9654a68cf1f6.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the first end point that we're going to be using and we're actually
    going to be using an alternative following. Here we can specify the base query
    parameter that is going to start us out at the currency of our choice. This is
    the currency that we're converting from and then we get the exchange rate.
  prefs: []
  type: TYPE_NORMAL
- en: So, if I wanted to convert US dollars to Canadian dollars, I would get the base
    USD conversion chart. I would find this number and I would just multiply `23`
    by this number, or whatever value I was trying to convert. So this is API number
    one; let's go ahead and grab the URL, open it up in the browser and we're going
    to leave that up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other API that we''re going to be using, you can find at [restcountries.eu](http://restcountries.eu/).
    This one contains some useful information about countries. If you go to the All
    example, we can get this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13b625b3-896c-4479-a9d8-98162303e6f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can crack it open in the browser and we can see the extensive list of countries
    and country data that the API returns, starting off with `Afghanistan`: various
    things about it, top-level domains, alternative spellings, `regions`, lat and
    long, `population`, a lot of really nice information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6ff62d0-642b-4be6-a7d5-81730f992e4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It also includes those currency codes, so we''re actually going to be using
    a different endpoint. They support the Currency endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2fe1c21-e741-4e4d-8592-89304582a399.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This lets you find countries that use a specific currency, so let''s take this
    URL and crack it open in the browser. Here we''re using `cop`; let''s go ahead
    and swap that out for `usd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2ec3da1-d9d6-455b-bdd2-9fc43b274cb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, there are multiple countries that use the United States dollar. We have
    `American Samoa`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Down below, if we scroll way, way, way down the list, we''re going to get other
    things; here we''ve got Zimbabwe, for example. Then, we have the United States
    of America - that''s an obvious one - Turks and Caicos Islands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c380bfce-b017-4b6e-8d8c-6fba9a14b850.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So there are quite a few different places that use the US dollar. If we swap
    it out for `cad` - Canada; only one there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a9f94bb-8a3e-423e-8d08-d20afdf77a75.png)'
  prefs: []
  type: TYPE_IMG
- en: So, using these two endpoints, we're going to be able to convert the currency
    and figure out, which countries support that currency. We're going to wire all
    of this up together, then I'm going to set you out on your own to actually use
    async/await to get that information.
  prefs: []
  type: TYPE_NORMAL
- en: Taking advantage of axios inside our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go ahead and kick things off over inside the Terminal by shutting things
    down, clearing the output, and installing the necessary dependencies. I''m going
    to run `npm init`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7551dc3-cf00-4304-be21-38dc2e2b092d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can just generate a quick `package.json` file using the defaults and they''ll
    use `npm install axios`. The current version of Axios is `0.18.1`, and we''ll
    toss on the `save` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: It's going to make sure to say that as a dependency, and there we go. Everything
    is working, as expected. Now we can clear this output and we can actually take
    advantage of Axios inside our application. So, let's kick things off with the
    first one. We're going to go ahead and set up a function that makes the call to
    Fixer and gets the exchange rate.
  prefs: []
  type: TYPE_NORMAL
- en: The getExchangeRate function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do that, over inside Atom, we''re going to kick things off by creating a
    `const axios`; we''re going to `require axios`, and then we''re going to make
    `const` for one of our two functions. This is for the first endpoint `getExchangeRate`.
    Now, `getExchangeRate` is going to take two pieces of information: the `from`
    currency code and the `to` currency code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to be a function. All we''re going to do is use `axios`. That''s
    `axios.get`, and we''re going to pass in that URL that I just copied from the
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Now we want to set the base equal to whatever currency we're coming from. So
    I can go ahead and use a template string, swapping out the static base value for
    a dynamic one, accessing `from` and `then` functions. We're going to use `then`
    real quick. We're going to use `then` here to just manipulate the value. This
    is going to return the promise from Axios with a bunch of information about the
    HTTP requests. The caller of `getExchangeRate` does not care about that. They
    shouldn't even know that an HTTP request was made. All they need back is a number,
    so that is exactly what we're going to give them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `then` callback, we''re going to have access to `response`, and on the
    `response` we''re going to be able to get that currency code. We''re going to
    `return response.data`. This gets us into the JSON object. Now, in here we have
    a `rates` object, which is key-value pairs, where the key is the currency, so
    we do want to access `rates` and we want to get the rate for whatever the `to`
    variable is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'So, in this case, we would have USD to Canadian dollars. We would call this
    URL with `USD` and we would get this value back: `1.2889`. That is the exact value
    that we''re going to return. Let''s go ahead and test this out down below, `getExchangeRate`.
    I''m going to pass in `USD` to `CAD` (Canadian) dollars, `then` we''ll get our
    `rate` back and we can log it out, `console.log(rate)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to go ahead and save this. In the background, inside the Terminal,
    we can start up `nodemon` once again, and we''re going to run the `currency-convert`
    file. Right here, we get that value `1.2889` is the current currency exchange
    rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3baa5fea-f353-4913-8903-d22186ac6841.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I could put `EUR` in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'I could figure out what the Euro exchange rate is `0.80574`, so there we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76ee4c08-faa0-425b-a58d-d08e4266ab0d.png)'
  prefs: []
  type: TYPE_IMG
- en: We got our first one all knocked out. Now, the other one that we're going to
    create real quick is going to be `getCountries`.
  prefs: []
  type: TYPE_NORMAL
- en: The getCountries function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `getCountries`  function is going to get a list of countries, just their
    names, and we''re going to get it by `currencyCode`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'This one, just like `getExchangeRate`, is also going to return a promise from
    `axios.get` and the URL we want to get lives over in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f40d00e9-2900-41b0-b991-716d90bfd0a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, right here we have our URL. We have the spot where we''re going to dump
    our `currencyCode`, so we can knock that out. It''s going to be a template string
    and we''re going to get rid of `CAD` and inject whatever the `currencyCode` argument
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, at this point, once again, we do want to do a little manipulation to the
    data, so I could go ahead and use `then`. In the `then` callback, I can go ahead
    and access the `response`. What I want to do with the `response` is I just want
    to loop over it. I want to figure out all the countries that support my currency
    and then I want to return an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Now you know that we're going to get all those countries back, right? So, for
    `cad` we have an array with the single object inside it. For `usd`, we have an
    array with multiple objects inside it, so we're going to take this array of objects
    and convert it to an array of string.
  prefs: []
  type: TYPE_NORMAL
- en: 'We would start off with `American Samoa`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9cd2b07-ef23-4441-8c3c-a2b3214be8c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To do that, we''re just going to use `map`. Back inside Atom, we can go ahead
    and knock this out really quickly by returning `response.data`, which is an array,
    which means it has access to that `map` method. We are then going to use `map`.
    Each individual item is going to be a `country`; each `country` has a `name` property,
    so we can return `country.name`, giving us an array of country names that support
    the `currency`. In this case, we can simplify that by implicitly returning `country.name`.
    Now, let''s go ahead and test that out right here; `getCountries`. We''re going
    to get `countries` back and we''re going to dump `countries` to the screen. We
    only provide a single argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if we save this and check things out over in the Terminal, we should see
    exactly what comes back. Here we have a list of all of the countries that we can
    use that currency in, in this case, the US dollar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34db21af-227a-4289-81b4-6a01be9772f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We could go over to `EUR` to see which countries support that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: If we save the file, we're going to get that list back in just a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have all the countries that support it, everything from `Belgium` all
    the way down to `Zimbabwe` and `Spain`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/248390da-7b6c-42b7-bfd0-cfcda4a062e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All those countries are included. Next up, is CAD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'You should just have that one, Canada, and it does indeed show up right there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6354192-c490-48bb-bf34-ee1388d7a068.png)'
  prefs: []
  type: TYPE_IMG
- en: So, at this point, we have all the data we need to actually get things done.
    So, together we're going to build the equivalent of this function over in our
    promises and you're going to be building out the `async` one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over here, let''s go ahead and get started: `const convertCurrency`. That is
    going to be the function we''ll be building. It''s the one that you''ll eventually
    make `async` but, for now, we''ll leave it as a regular arrow function (`=>`).
    We''re going to get the currency code that we''re converting `from` the one we''re
    converting `to`, and the amount we''re looking to convert.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside here, we can kick things off by getting those countries. I''m going
    to `return getCountries`. I''m going to call that with the currency that we''re
    converting to, then we can tack on `then` and we are going to get the `countries`
    list back. Next up, we''re going to return a call to `getExchangeRates` - passing
    in `from` and `to`, and we''re going to get that back as a promise as well, which
    means we can tack on another `then` call. Here we''re going to get that rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Now, inside the `then` callback, we can go ahead and actually calculate all
    the stuff we're going to calculate. In this case, we're going to generate that
    long string I was talking about.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first start off by creating a `const`; this const will be called `exchangedAmount`.
    All we're going to do is take the `amount` the user passed in and multiply it
    by the exchange `rate`; so, in this case, we would successfully convert US dollars
    from Canadian dollars. Now, down below, we can go ahead and start working on that
    string. We're going to `return` a template string and, inside here, we're going
    to do quite a few things.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first off, we''re going to start off with the `amount`. The `amount` in
    the currency you''re coming `from` is `worth`. Then we''re going to put the `amount`
    in the currency you''re going to, it''s `exchangedAmount`. Then we''ll toss in
    `to`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'So, this is part one. We can actually go ahead and test this out before even
    moving on. Next, I''m going to switch the `getCountries` call over to a `convertCurrency`
    call. We''re going to go ahead and convert Canadian dollars over to US Dollars.
    Let''s go ahead and convert a hundred of those. Now we''re going to get the `status`
    back, as opposed to actually getting back the countries list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We can go ahead and save currency-convert and see what happens over inside
    the Terminal. Over here, we get `100 CAD is worth 73.947 USD`, and this is a great
    first step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a374ceff-7e82-4451-92c5-f13ebe93efef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we''re also going to tack on that country''s list, which we do not have
    access to in this function. We can go through the same step we used last time.
    We''ll create `tempCountries`. Up above, we can make a new variable called countries
    and we''ll set countries equal to `tempCountries` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Now we'll be able to access those countries and do something with them. What
    are we going to do? We're just going to join them all together, separated by a
    comma, to create that nice list. That'll be the currency that we're talking about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we''ll add a colon and then we will interpolate the following. So, we''re
    going to take all those countries, we''re going to take that array, and we''re
    going to convert it over to a string using `join`. What do we want to put between
    all of them? We''re going to put a comma and a space, we''re going to create a
    comma separated list of countries that that currency can be used in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go ahead and save currency- convert and see what happens over inside
    `nodemon` when things restart, `100 CAD is worth 73 USD. USD can be used in the
    following countries`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c0d7eb8-59cd-4525-ada1-17035f8265ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we have a list of all the countries we can use it in. Let''s go ahead
    and test out a different variation. Let''s go ahead and switch US dollars over
    to Canadian dollars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'This time around, we''re going to get a different output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b2b831d-12f4-4ef7-a3d5-41b422e32711.png)'
  prefs: []
  type: TYPE_IMG
- en: The Canadian dollar can be used in the following countries, in this case, just
    `Canada`. Everything is working as expected. The problem is we're using promise
    chaining in order to get everything done. We need to use the `async` function
    instead of that.
  prefs: []
  type: TYPE_NORMAL
- en: Creating convertCurrencyAlt as the async/await function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to convert this over to async/await, and you''re going to do that
    right here at the end of `convertCurrency` function. We''re going to use `Create
    convertCurrencyAlt as async function`. So, just like we did over inside of app-promises,
    you''re going to create an `async` function. Then you''re going to fetch both
    pieces of data using `await`: `Get countries and rate using await and our two
    functions`. So, you''re going to `await` both of these promises and then you''re
    going to store that value in some variable. You can create a country''s variable
    and a `rate` variable. Finally, you''ll be able to take these two lines and just
    tack those on at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'That will calculate the `exchangedAmount` and it will return the correct information:
    `Calculate exchangedAmount` and `Return status string`. You have two statements
    to get the data, one to calculate the exchanged amount and the final one to actually
    print things out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to go ahead and kick things off by creating that `const convertCurrencyAlt`.
    This one is going to be an `async` function, so we have to mark it as such. We
    can then move on to our arguments list, which is exactly the same as the other
    one: `from`, `to`, and `amount`. Then we''re going to put the arrow and arrow
    function (`=>`), and we''re going to open and close our curly braces.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can move on to the first thing, which is getting the countries and getting
    the exchange rate. I''m going to start off with countries; `const countries` equals.
    We are going to `await` the promise that comes back from `getCountries`. What
    countries do we want to get? The ones where the `to` currency is able to be used.
    Then we''re going to move on down below to rate. So, `const rate`. In this case,
    we are also trying to `await` something; we''re trying to `await` the promise
    that comes back from `getExchangeRate`. We''re trying to get the exchange rate,
    right here, `from` and `to`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'So, at this point, we have all that data and we can move on to calculating
    the exchanged amount and returning the string. We already built that out, there''s
    no need to recreate it. We can just copy both of those lines, paste them down
    below, and there we go. Everything is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Now, down below, instead of calling `convertCurrency`, we're able to call `convertCurrencyAlt`,
    passing in the exact same arguments and getting back the status.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The difference is that our function is using `async`; a whole lot more readable,
    much easier to work with. We''re going to go ahead and save currency-convert.
    That is going to run through the process of getting all of that data, converting
    it and then we''re going to go ahead and print the status. What do we get at the
    end of the day? Over here, we get the exact same thing as shown in output here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4080d79-100c-4234-8b4b-c895dc865f65.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we're going to talk about a few other places we can use
    `async` in this example, and we're also going to talk about how we can work with
    and handle errors.
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors and awaiting async function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to kick this section off by converting both `getExchangeRate` and
    `getCountries` over to `async` functions. They're good candidates because we do
    have promises and we could just await those promises instead. Then we're going
    to talk about errors, how we can throw them and how we can customize errors that
    get thrown by other code. It's going to make it really useful and it'll make it
    a lot easier to actually use `async`/`await` in the real world where you do need
    to handle errors.
  prefs: []
  type: TYPE_NORMAL
- en: Converting getExchangeRate and getCountries into the async function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So the first thing we''re going to do is convert `getExchangeRate` and `getCountries`.
    The first step I''m going to take is to make this an `async` function, otherwise
    we can''t use `await`. Then we''re going to go ahead and set up a variable, a `const` response,
    and we are going to set this equal to `await`. Then we''re going to await the
    following promise, the one that comes back from `axios.get`. I''m going to copy
    it, paste it, toss a semicolon at the end, and the only thing left to do is to
    return the value. I''m going to take the `return` statement and move it right
    there, then we can remove all of the previous code we had:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have the exact same functionality and it''s a little bit nicer. Now,
    the benefit isn''t as drastic as the benefit from going to `convertCurrency` to `convertCurrencyAlt`,
    but it is still indeed nice and I''d recommend using `async` anywhere you can.
    Now we need to convert `getCountries` using the exact same steps we just followed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mark `currencyCode` one as `async`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Create that `response` variable and actually awaiting on the promise. We''re
    going to await the following promise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to just `return` the exact same thing. There we go:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have both of these converted, we're just going to test our work
    by saving the file and, as long as we get the exact same output, we'll move on
    to talking about errors; how it could catch them, how we can throw them, and how,
    in general, we can improve the errors that show up in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright, the new result just showed up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f42f941-2149-465f-91e3-41459ffc071e.png)'
  prefs: []
  type: TYPE_IMG
- en: It is identical to the other two, which means that we are good to go. Now, I'd
    like to shift the discussion over to errors.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling in the async function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we're going to do is get the endpoints to trigger errors. We're going to
    look at how exactly we can handle those endpoints and how we can tweak them to
    be something that's a little more useful, because currently we're going to get
    back just a whole bunch of junk.
  prefs: []
  type: TYPE_NORMAL
- en: Printing an error to the screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Step one is to actually print the error out to the screen so we can see what
    we''re working with. We''re going to `catch` the error and we''re going to print
    the error, `console.log(e)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Now let's go ahead and start making some things fail. We're going to kick things
    off by making `getCountries` fail; that's the first call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, this one only uses `to`, so all we have to do to get that to fail is to
    send in a bad to `countryCode`. I''m going to use `MMM`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and we''ll see what we get over inside the browser. Now what
    we''re going to get back is a whole bunch of junk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91ec9cbc-23ec-4cf2-bcd0-c03c5bf778cd.png)'
  prefs: []
  type: TYPE_IMG
- en: What's coming back here is actually the `axios` response. This has the error
    information; it has things like that status code. You can see it was a 404\. We
    have a message saying not found. This is letting us know that `countryCode` we
    provided was not found by that endpoint. Now this is not particularly useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to come up with something that is a little more useful, like a message:
    `Unable to get countries that use MMM`. That''d be great. So, to do that, we''re
    going to tweak `getCountries`. We''re going to go ahead and use a regular old `try
    catch` block and set it up like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'If the code in the `try` block throws an error, the `catch` block will run,
    otherwise `catch` will never run. All we''re going to do is take `const response` and `return
    statement` code and move it inside of `try`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'So, what we''re doing is saying anytime either of these lines throw an error,
    run the code in the `catch` block and provide the error. Now we know what the
    error is. It doesn''t contain much of anything, so what we''re going to do is
    just throw our own error; something that is human-readable: `throw new Error`.
    In this case, we''re going to stick with a template string and we''re going to
    go ahead and set it up: `Unable to get countries that use`. Then we''ll inject,
    right before the period, the `currencyCode`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we go ahead and save the currency-convert application with a bad to `countryCode`,
    we're going to see `Unable to get countries that use MMM` as the error. We could
    access the message directly using `e.message`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: That'll improve the output even more. Now we just have a string. We could do
    anything we want with that string. It's very clear: `Unable to get the countries
    that use MMM`.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling for the getExchangeRate function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's go ahead and look at the next one in our list, that is, the `getExchangeRate` function.
    There are actually two things that can go wrong here; the `axios` request can
    fail itself and we could also end up with a response that's valid, but the `to` status
    code is invalid. In that case, there would be no rate for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can go ahead and actually simulate this by commenting out a few lines
    of code that''s going to allow us to test to `getExchangeRate` in isolation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if I go ahead and mess the `USD` with `QWE`, we can save the file and
    we are going to get another error request failed with status code 422:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53166ba5-3402-4671-beba-504da35aa544.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What we''re going to do again is go through that exact same process. So, we''re
    going to wrap those two lines in a `try catch` block. Then, if `catch` runs, you''re
    going to throw a new error using the following format: `Unable to get exchange
    rate for USD and CAD`. This is going to be the `from` USD currency code to CAD
    currency code. We''re going to kick things off by setting up that `try catch` block.
    We are going to try to run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'If it runs that would be very nice but, if it doesn''t, we do want to handle
    that as well by throwing a new error. Inside the `catch` block, we are going to
    provide our message; it''ll just be a template string. Now, the message I want
    to provide is `Unable to get exchange rate for ${from} and ${to}`, followed by
    a period:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go ahead and save this and see what happens over inside the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37665d81-2f4a-42f7-91a6-49cb6dc77311.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We get `Unable to get exchange rate for QWE and MMM`. Now currently that''s
    failing because `from` is invalid, but what if `from` is valid? What if we''re
    trying to go to `USD` to `MMM`? This time around we are actually going to get
    something different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/639973a0-e857-4d02-b0f8-178c197411ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we just get `undefined`. It comes up because the `return` statement in `getExchangeRate` has `response.data.rates`. We
    have a valid `from countryCode` so valid data comes back, but the `to countryCode` does
    not exist, which is where undefined comes from.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can always go ahead and fix that by creating a variable `const rate`, and
    we''ll set it equal to `response.data.rates[to]`. Then, well, a little bit of `if` logic.
    If there is `rate`, we''re just going to go ahead and return it. If there''s no `rate`,
    we''re just going to go ahead and `throw` a new error, which will trigger the `catch` block,
    which will print the message to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we save the code using these same codes, we get the message once again: `Unable
    to get the exchange rate for USD and MMM`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0f4490f-2302-4e77-a61b-826dfe13753d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now this message is going to show up if `from` is invalid, if `to` is invalid,
    or if both are invalid.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in place, we now have some little error handling set up and we can
    bring back the rest of the lines from our application. If we run through the app
    using this bad data here, `Unable to get countries that use MMM` prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e232781-0bbe-4eb2-a64f-d7fdca377911.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s switch it back over to valid country codes like `USD` and `CAD`. Let''s
    actually use the Euro, `EUR`, for a change and over inside the browser we should
    get valid values, since both of those country codes are indeed valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19bc552f-7419-43a7-8400-37a54cd4ce27.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we get the exchange rate, we get all of the countries that use the Euro,
    we aren't getting any of our error messages, which is fantastic. So by using regular
    techniques, things from way back in JavaScript, like `try`, `catch`, and `throw`
    new error, we're able to create a very nice setup using those `async` functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'That is it for this section, and that is it for our little currency-convert
    example. So, at this point, we''ve gone through two examples: we went through
    the app promises example, where we had a contrived set of data; we created a few
    functions and we got to explore the basics of `async`/`await`. Then we went through
    the currency- convert example, where we used two real APIs and we added a little
    more robust error handling. At the end of the day, they''ll both use the exact
    same `async` and `await` techniques. Hopefully, you''re starting to see how this
    can fit into our Node applications. In the next and final section, we''re actually
    going to use `async` and `await` to make some changes to the Node API.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into a new syntax `async`/`await`. We looked into
    project setup, basics of `async`/`await`, and a real-world example. We also looked
    into error handling using `async`/`await`.
  prefs: []
  type: TYPE_NORMAL
