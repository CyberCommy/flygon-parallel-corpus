- en: Digging Deeper with SVG Authoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, in this book, you've been exposed to most of the basic SVG features
    and elements. With just the tools you've experienced so far, you could start to
    do some real tasks with SVG. That said, SVG has a lot more to offer. This chapter
    will start to look at more advanced SVG tools. Some of these techniques will play
    an important role in doing dynamic SVG animations and visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Transformations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clipping and masking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing content into SVG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving SVG on the web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these, along with the tools you've already learned about, will give you
    a strong SVG foundation.
  prefs: []
  type: TYPE_NORMAL
- en: Transformations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transformations in SVG allow you to manipulate an SVG element in a variety of
    ways, including scaling, rotating, skewing, and translating (which looks like
    moving the element, but isn't exactly that). Using transformations allows you
    to manipulate the SVG without changing its intrinsic values (for example, height,
    width, *x*, and *y*) which is important when you're manipulating elements in a
    dynamic way.
  prefs: []
  type: TYPE_NORMAL
- en: This section will introduce you to the common transformation functions one by
    one, with examples of each.
  prefs: []
  type: TYPE_NORMAL
- en: translate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `translate` transform moves the SVG element by the specified `x` and `y`
    coordinates. A translation changes the *origin* of the element's coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: The `y` coordinate is an optional argument and is assumed to be equivalent to
    the `x` argument if it's not provided.
  prefs: []
  type: TYPE_NORMAL
- en: The following sample shows three equivalent circles. The first circle is not
    transformed in any way. The second is transformed with a single argument (`10`),
    which moves it by `10` on the `x` axis and `10` on the `y` axis. The third is
    translated by `"75"` pixels on the `x` plane and `0` pixels on the `y` plane.
    The underlying element has equivalent metrics in each case but they display differently.
  prefs: []
  type: TYPE_NORMAL
- en: '*Why not just move the elements*, you might ask. For one thing, this is useful
    in dynamic SVG as you don''t have to track the original position of the element
    if you move the element around. You can simply reset the element to its original
    state by removing the transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17e444b7-49eb-4edd-abdd-c2bd1ac9ca57.png)'
  prefs: []
  type: TYPE_IMG
- en: scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `scale` transform scales the SVG element by the specified `x` and `y` coordinates.
    The unit is a **factor**, so passing in two would *double* the size of the element.
  prefs: []
  type: TYPE_NORMAL
- en: As with `translate`, the `y` coordinate is optional and is assumed to be equivalent
    to the `x` argument if it's not provided.
  prefs: []
  type: TYPE_NORMAL
- en: If you've done CSS transforms and scaled an element, you might be surprised
    by the way `scale` works. Even if you haven't done CSS you might be surprised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scaling in SVG is from the *origin point* of the coordinate system. See the
    following example, showing three separate boxes. One is not scaled at all. The
    next two rectangles are scaled by `1.25` on both axes and then by `2` on the *x*
    axis and then not scaled on the *y* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, the result is that not only are
    the dimensions of the element scaled, the distance from the origin of the coordinate
    system is also scaled. The first element is adjusted in both directions along
    with both the `x` and `y` planes. The second element is shifted along the `x`
    axis to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89065f89-d182-4119-a5c8-cfb864fdf250.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Compare that to the following code, which shows the way that CSS scaling works.
    Using the same scaling factors in CSS produces a totally different result. Instead
    of scaling from the origin of the SVG document, CSS scales out from the center
    point of the element itself. The syntax might look similar but the results are
    different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb5c86a8-aee2-44ea-8dd8-d8001f4282bd.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to produce a similar effect with SVG, there's an interesting trick
    you can use. This trick is also useful to illustrate the way that the `transform`
    attribute can accept multiple transform functions. You're not limited to just
    the one.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does it work? As I mentioned, the point of origin for the CSS transformation
    is the *center of the box being transformed*. This technique replicates that same
    point of origin in SVG.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you need to do a trick where you shift the point of origin for the
    element to a new point of origin that matches the CSS point of origin. Here's
    how this works. In this case, our rectangles are at `(100, 100)` in the coordinate
    system and are `100` pixels on a side. The center of the box is therefore at `(150,
    150)`. Translating the element by `(150,150)` sets the point of origin for these
    elements to the equivalent of the CSS point of origin.  Remember that the CSS
    point of origin is the center of the box (which was `(150,150)` before the transformation)
    and that translating an element actually *changes* its point of origin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the translation, we apply the scale. This happens at the new point
    of origin at `(150, 150)` (again, equivalent to what would be the CSS point of
    origin) and expands the squares by `1.25` and `2`, respectively. Finally, we transform
    the element *back* to its *original* point of origin `(0,0)` and, because they
    were manipulated at the CSS equivalent point of origin `(150, 150)`, the scaled
    elements are now centered appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following illustration shows how this works step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: The first frame shows the starting position. The `100` pixel rectangles are
    placed at `(100,100)` and their point of origin is `(0,0)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They are then translated by `(150,150)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They are then transformed, from the new point of origin, `(150,150)`, by `1.25`
    and `(2,1)`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'They''re translated back to `(0,0)` while still maintaining the new scale.
    Their actual point of origin at this point is `(0,0)` but it renders as if it
    had the CSS point of origin, `(150,150)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2fe40745-aac9-42d7-a491-1d7f86f3c218.png)'
  prefs: []
  type: TYPE_IMG
- en: rotate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `rotate` transform rotates the element by a number of degrees. This transform
    takes three arguments. The first is the number of degrees. The second and third
    arguments are `x` and `y` coordinates that define the point of origin for the
    rotation. If there is no point of origin for the element, the origin point of
    the viewport is used. This can be seen in the following two code samples, where
    nine rectangles are drawn on the SVG element. The first is not transformed. The
    next eight are rotated incrementally by ten degrees each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot of the rendered code, they `arc`
    across the entire canvas with the `(0,0)` point of the viewport at the origin
    of the rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcce9649-bd12-4c9b-aec6-7911ea408214.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Compare that to the following, which changes the rotation point to the middle
    of the viewport along with the `x` axis and the top of the viewport on the `y`
    axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, when this code is rendered in a browser, the same elements
    with the same angle of rotation `arc` across the top right-hand quarter of the
    viewport. *The squares radiate out from the new point of origin*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bf754e3-4767-4f4e-8711-0a3ed2e81633.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As with scaling, if you want to rotate around the center point of the element,
    you can use the same translation trick you learned about in that section. In the
    following code sample, the rectangles are translated by the equivalent of their
    center point `(100,100)`, rotated by `10` degrees, and then translated back to
    their original point of origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/559236ef-62a0-4117-ae8d-bed164d60639.png)'
  prefs: []
  type: TYPE_IMG
- en: skew
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `skew` transforms skew the element by an angle along the specified axis.
    Like `­rotate` and `scale`, `skew` is based on the current origin point. The following
    code sample shows two sets of elements. One is skewed along the `x` axis. The
    other is skewed along the `y` axis. For each set of elements, there is a transform
    that just focuses on the `skew` and then there is another `skew` transform by
    the same amount that also includes the translation technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the output of this code in the following screenshot. The blue square
    shows the original position and then the two skewed elements are arrayed on top
    of it to show the difference between skewing based on the original origin point
    and using the translation technique to change the point of origin to the center
    of the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0ad4118-aa8d-4415-9869-b479a6e51977.png)'
  prefs: []
  type: TYPE_IMG
- en: There is another option to transform elements. You can use what's called a *transformation
    matrix*. Matrix transformations are powerful (they can represent any of the other
    transformation functions) but also complicated and they rely heavily on math.
    Since not everyone thinks math is fun, matrix transformations aren't as common
    as the other transformation functions. For that reason, I'm not going to cover
    them here. Realistically, you can do anything you need to do with the ones you've
    already learned.
  prefs: []
  type: TYPE_NORMAL
- en: Clipping and masking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clipping and masking allow you to subtract portions of elements in an SVG document.
  prefs: []
  type: TYPE_NORMAL
- en: Clipping paths, implemented with the `clipPath` element, use any combination
    of paths, text elements, and basic shapes to serve as the outline of a simple
    mask. This means that everything on the inside of the `clipPath` element's outline
    is visible and everything on the outside is cropped out. Every pixel in `clipPath`
    is either on or off.
  prefs: []
  type: TYPE_NORMAL
- en: Masks, implemented with the `mask` element, can contain graphics, text, and
    basic shapes to serve as a semi-transparent mask. With a mask, each pixel value
    indicates the degree of opacity and can range from being fully transparent to
    fully opaque.
  prefs: []
  type: TYPE_NORMAL
- en: Clipping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `clipPath` element in SVG allows you to cut a shape out of another shape.
    Clipping uses the geometry of the shape to define the area that's cut out. It
    doesn't take into account anything other than the shape, so attributes such as `stroke`
    and `fill` don't change the area being cut out.
  prefs: []
  type: TYPE_NORMAL
- en: The following code sample shows a very simple, but very useful, pattern for
    using the `clipPath` element. The basic effect is to cut out one half of a complicated
    element (the star we drew in [Chapter 2](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml),
    *Getting Started with Authoring SVG*) in order to lay it on top of another instance
    of that same star creating a bisected star design in red and black. While you
    could create two halves of the star and place them next to each other, mixing
    and matching instances of the same element is much more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how this works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in the `defs` section, we create `clipPath` element itself. Any children
    of the `clipPath` will be bundled together to create the clipping pattern that
    we''ll use later. In this case, it''s a simple rectangle that covers half of the
    canvas. It has an ID of `"box"`. Following that, we create a reusable instance
    of the star we created in [Chapter 2](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml),
    *Getting Started with Authoring SVG*. We give that an ID of `"star"`. Outside
    of the `defs` section, we put it all together. With two instances of the `use`
    element, which allows you to swap in elements defined elsewhere, we link to the
    star''s `polygon` and insert it twice into the document, once with a red fill
    and once with a black fill. Note that the user element uses a fragment identifier
    to reference the polygon. `"#star"` is a valid, relative URL pointing to a specific
    `id` on this page. The second variation has a `clip-path` attribute that links
    to our box, `clipPath`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of that code can be seen in the following screenshot. The red instance
    of the star is exposed as the left half of the black star, which is clipped out
    by the square defined in the `clipPath` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97c81615-98f0-4dd4-84a6-f5f6c2dbf40f.png)'
  prefs: []
  type: TYPE_IMG
- en: Masking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Masking, in contrast to clipping, takes account of attributes beyond the simple
    shape of the element being cut out. As was mentioned, you leverage the full range
    of transparent, semi-transparent, or fully opaque pixels. This allows for interesting
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: The following example shows how multiple masks can be used together. In this
    example, we make heavy use of the `defs` section and then compose an image using
    different reusable elements.
  prefs: []
  type: TYPE_NORMAL
- en: For starters, we create two gradients. One is a linear gradient that has five
    steps, mostly black, which creates a very intense band of white in the middle
    of the gradient. The second is a radial gradient, which has a central area of
    black surrounded by a very large circle of white. Using these for a mask means
    that each of the pixels in these gradients lands on a continuum from fully opaque
    (black pixels) to fully transparent (white pixels) and variable transparency in
    the middle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at these gradients by themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61079b70-717a-40af-882b-da2b9e524d40.png)'
  prefs: []
  type: TYPE_IMG
- en: We then create a `text` element that says Mastering SVG and bring in a `pattern`
    element, which you'll recognize from [Chapter 2](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml),
    *Getting Started with Authoring SVG*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the body of the SVG element, we link to the text elements, using fragment
    identifiers (`#mastering-SVG`) pointing to the IDs of the `text` elements in the
    `defs` section, and apply the two masks to them with the `mask` attribute with
    a `url` value pointing to the fragment identifier of the `mask` attribute. Take
    a look at how the masks affect the text elements by themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a10117ff-c916-432c-81d7-3214ecb82327.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Putting it all together, we stack the two text elements on top of each other,
    and add a patterned box behind the text boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Running it in a browser produces the following output. As you can see, the
    areas of yellow and the areas of red that are visible in the two text elements
    blend together. There are areas of fully opaque color in the center and edges
    blended with areas of semi-transparent color, where the background pattern shows
    through, in between:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/e27e4130-72de-4c50-9397-e6b4e4a0e322.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: This section just touches on the possibilities of masking and clipping. You'll
    continue to see examples of these powerful techniques throughout this rest of
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: Importing images into SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to creating images wholesale in SVG, it's also possible to pull
    other images into an SVG document.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of ways to do this. One way is to use the SVG `image` element
    and import the image in a way that will be familiar to you if you''ve used the
    HTML `img` element. In this example, we use the `image` element. It takes a `href`
    attribute, which acts like an `img src` (as seen in HTML) and it has `height`
    and `width` attributes. Unlike the HTML `img` element, it also accepts an `x`
    and `y` position:'
  prefs: []
  type: TYPE_NORMAL
- en: In the context of an HTML document, the HTML `spec` actually defines `IMAGE`
    as a synonym of `img`. It only exists in the context of inline SVG.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered in the browser, we get the full photographic image with an SVG text
    element serving as a caption:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49ae51e3-8f84-4773-9162-3a230f6603d6.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also use the `image` element to import in other SVG images. There are
    certain restrictions with that technique that limit the usefulness of the imported
    SVG element. They are basically treated like static images so things such as further
    importing images won't work;  you can't import other images inside the imported
    SVG image. Only the *first *referenced image will be imported. To use the full
    power of an imported SVG image, you should use the `use` element and point to
    an external URL. With this technique, you can also target specific fragments of
    the imported document. This technique would allow you to create a symbol library
    and import the symbols into your SVG document by reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this simple example, we show how using the `use` element and referencing
    a fragment of an included document imports the image properly. `#image` points
    to the `id` element of a  specific element in the  imported file, `svg-with-import.svg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The blank space at the top of this document shows where the image is failing
    to load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/026b2f03-f121-4ed6-9f52-f270fdf0c1d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get this example to work in Versions of Internet Explorer less than 8, you
    need to use a polyfill script called `svg4everybody` ([https://github.com/jonathantneal/svg4everybody](https://github.com/jonathantneal/svg4everybody)).
    Insert it into your document, call it when you need to use some SVG, and it just
    works. `svg4everybody` also polyfills the experience in Safari 6 and Edge 12\.
    How to fix your page is shown in the following code sample. You include the file
    and then call the `svg4everybody()` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filters allow you to apply a variety of effects to elements or groups of elements.
    Filters allow you to blur images, apply lighting effects, and many other advanced
    image manipulation techniques. If you've ever used Adobe Photoshop or other graphics
    manipulation programs, these filters are just like the filters you've seen in
    that environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filters are implemented in the `defs` section of the SVG document and are grouped
    as part of a `filter` element. They are referenced the same way that `mask` and
    `clipPath` elements are, via a fragment URL. The following example shows the common
    Gaussian blur filter applied to a circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Rendered in a browser, you can see the blurred circle on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5dc536ec-18c1-480a-b2ee-c4e4f7c6d03f.png)'
  prefs: []
  type: TYPE_IMG
- en: I'm not going to go through filters in detail in this book. There are a lot
    of them out there; there are varying (sometimes confusing) levels of browser support
    and they can be very complicated to explain. I did want to show you one so that
    you can see the basic pattern and this one is as straightforward as they come.
    *All* of the other filters follow the same general pattern. A `filter` or series
    of filters are grouped in the `defs` section and referenced with an `id` element.
    Just know that simple pattern and you're ready to experiment with them or to incorporate
    them into your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Serving SVG on the web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One final note about SVG before we move into more details in the following
    chapters about the way that SVG interacts with the wider universe of web technology:
    if you''re going to serve SVG on the web, you need to ensure that it''s served
    with the correct content type. Browsers expect SVG to be served with the `"image/svg+xml"` media
    type. If you run into problems with SVG images not displaying and you can verify
    that they exist on the server, it''s a good bet to check the headers (using the
    Network tab of your browser debugger of choice) to see if they''re being served
    correctly. If they''re not (for example, if they''re `text/xml`), then you need
    to set the media type properly. This section outlines how to set the proper media
    type in common web servers.'
  prefs: []
  type: TYPE_NORMAL
- en: Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the correct media type in Apache is as simple as adding the following
    line to your `.htaccess` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: nginx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the correct media type in nginx requires you to have the following entry
    in your `mime.types` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: IIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the correct media type in IIS can happen in two ways. You can add the
    media type using the IIS manager ([https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753281(v=ws.10)](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753281(v=ws.10)))
    or you can add the following entries to `web.config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about a large number of more advanced SVG features.
    You learned about multiple transformations, which allow you to manipulate SVG
    elements without changing their underlying structure. This opens up a number of
    possibilities that we'll continue to examine throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about clipping and masking, which allow you to manipulate images
    by subtracting portions of them using complicated drawings. This includes the
    ability to use variable opacity to manipulate images.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you learned about implementing a basic SVG filter and about serving
    SVG files on the web in common web servers.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](35befb3f-3d4c-45e5-b79d-e08554579075.xhtml), *Using SVG in HTML*,
    you'll learn some details about using SVG within the context of an HTML document,
    which is where the real power of SVG is exposed for the entire world to see.
  prefs: []
  type: TYPE_NORMAL
