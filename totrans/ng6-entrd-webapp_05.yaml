- en: Enhance Angular App with Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml)*, Prepare Angular
    App for Production Release*, we mentioned the need to deliver a high-quality application.
    Currently, the app has a terrible look and feel to it, which is only fit for a
    website created in the late 1990s. The first impression a user or a client will
    get about your product or your work is very important, so we must be able to create
    a great looking application that also delivers a great user experience across
    mobile and desktop browsers.
  prefs: []
  type: TYPE_NORMAL
- en: As full-stack developers, it is difficult to focus on the polish of your application.
    This gets worse, as the feature set of an application rapidly grows. It is no
    fun to write great and modular code backing your views, but then revert to CSS
    hacks and inline styles in a rush to improve your application.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material is an amazing library that is developed in close coordination
    with Angular. If you learn how to leverage Angular Material effectively, the features
    you create will look and work great from the get go, whether you're working on
    small or large applications. Angular Material will make you a far more effective
    web developer, because it ships with a wide variety of user controls that you
    can leverage, and you won't have to worry about browser compatibility. As an added
    bonus, writing custom CSS will become a rarity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to configure Angular Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the UX with Angular Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The goal of the Angular Material project is to provide a collection of useful
    and standard-setting high-quality **user interface** (**UI**) components. The
    library implements Google''s Material Design specification, which is pervasive
    in Google''s mobile apps, web properties, and Android operating system. Material
    Design does has a particular digital and boxy look and feel, but it is not just
    another CSS library, like Bootstrap is. Consider the login experience coded using
    Bootstrap here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/56b5efb4-a4c0-433e-ab0d-604e0831e7cf.png)Bootstrap Login Experience'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that input fields and their labels are on separate lines, the checkbox
    is a small target to hit, the error messages are displayed as an ephemeral toast
    notification, and the submit button just sits in the corner. Now consider the
    given Angular Material sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f4d79a7f-aaed-4d65-9f60-dd05562e57cb.png)Angular Material Login
    Experience'
  prefs: []
  type: TYPE_NORMAL
- en: 'The input fields and their labels are initially combined, grabbing the user''s
    attention in a compact form factor. The checkbox is touch friendly and the Submit
    button stretches to take up the available space for a better default responsive
    UX. Once a user clicks on a field, the label tucks away to the top-left corner
    of the input field, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7ef987fd-ae5d-4b4e-8f48-13fdfd8062ac.png)Angular Material Animations
    and Error'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the validation error messages are shown inline, combined with a
    color change in the label, keeping the user's attention on the input field.
  prefs: []
  type: TYPE_NORMAL
- en: Material Design helps you design a modular UI with your own branding and styling,
    while also defining animations that allow for a user to have a better **user experience**
    (**UX**) when using your application. The human brain subconsciously keeps track
    of objects and their locations. Any kind of animation that aids in transitions
    or reactions that result from human input results in reduced cognitive load on
    the user, therefore allowing the user to focus on processing the content instead
    of trying to figure out the quirks of your particular app.
  prefs: []
  type: TYPE_NORMAL
- en: A combination of modular UI design and fluid motion creates a great UX. Look
    at how Angular material implements a simple button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7e0b60a1-4d7b-4fcb-be2d-53029100d40e.png)Angular Material Button
    Animation'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, note how the click animation on the button originates
    from the actual location that the user has clicked on. However subtle, this creates
    a continuity motion ,resulting in an appropriate reaction from a given action.
    This particular effect becomes more pronounced when the button is used on a mobile
    device, leading to an even more natural human computer interaction. Most users
    can't articulate what makes an intuitive UX actually intuitive, and these subtle
    yet crucial cues in design and experience make tremendous progress in allowing
    you to design such an experience for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material also aims to become the reference implementation for high-quality
    UI components for Angular. If you intend to develop your own custom controls,
    the source code for Angular Material should be your first and foremost resource.
    The term high-quality is used often, and it's really important to quantify what
    that means. The Angular Material team puts it aptly on their website.
  prefs: []
  type: TYPE_NORMAL
- en: '**What do we mean by "high-quality"?**'
  prefs: []
  type: TYPE_NORMAL
- en: Internationalized and accessible so that all users can use them. Straightforward
    APIs that don't confuse developers and behave as expected across a wide variety
    of use cases without bugs. Behavior is well-tested with both unit and integration
    tests. Customizable within the bounds of the Material Design specification. Performance
    cost is minimized. Code is clean and well-documented to serve as an example for
    Angular devs. Browser and screen reader support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material supports the most recent two versions of all major browsers:
    Chrome (including Android), Firefox, Safari (including iOS), and IE11 / Edge.'
  prefs: []
  type: TYPE_NORMAL
- en: Building web applications, especially ones that are also mobile-compatible,
    is really difficult. There are a lot of nuances that you must be aware of. Angular
    Material abstracts away these nuances, including supporting all major browsers,
    so that you can focus on creating your application. Angular Material is no fad,
    and it's not to be taken lightly. If used correctly, you can greatly increase
    your productivity and the perceived quality of your work.
  prefs: []
  type: TYPE_NORMAL
- en: It won't always be possible to use Angular Material in your projects. I would
    recommend either PrimeNG, found at [https://www.primefaces.org/primeng](https://www.primefaces.org/primeng),
    or Clarity, found at [https://vmware.github.io/clarity](https://vmware.github.io/clarity),
    as component toolkits that can satisfy your most, if not all, user control needs.
    The one thing to avoid here would be to pull dozens of user controls from different
    sources and end up with a hodgepodge library with hundreds of quirks and bugs
    to learn, maintain, or work around.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material setup and performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular Material is configured by default to optimize the package size of your
    final deliverable. In Angular.JS and Angular Material 1.x, the entire dependent
    library would be loaded. However, with Angular Material 6, we are able to specify
    only the components that we intend to use, resulting in dramatic performance improvements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table, you can see improvement of the performance characteristics
    of a typical Angular 1.x + Angular Material 1.x vs Angular 6 + Material 6 application
    over a fiber connection with high speed and low latency:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Fiber Network** | **Angular 6 + Material 6** | **Angular 1.5 + Material
    1.1.5** | **    % Diff** |'
  prefs: []
  type: TYPE_TB
- en: '| Time to first page render* |                                0.61 s |                                     
    1.69 s** |   ~2.8x faster |'
  prefs: []
  type: TYPE_TB
- en: '| Base-level assets delivered* |                              113 KB |                                   
    1,425 KB | 12.6x smaller |'
  prefs: []
  type: TYPE_TB
- en: '**Images or other media content has not been included in the results for a
    fair comparison'
  prefs: []
  type: TYPE_NORMAL
- en: '**Average value: Lower quality infrastructure leads to 0.9 to 2.5s in initial
    render times*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the ideal conditions of a high-speed and low-latency connection, Angular
    6 + Material 6 apps load under a second. However, when we switch over to a more
    common moderate-speed and high-latency Fast 3G mobile network, the differences
    become more pronounced, as in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Fast 3G Mobile Network** | **Angular 6 + Material 6** | **Angular 1.5 +
    Material 1.1.5** | **    % Diff** |'
  prefs: []
  type: TYPE_TB
- en: '| Time to first page render* |                                1.94 s |                                     
    11.02 s |   5.7x faster |'
  prefs: []
  type: TYPE_TB
- en: '| Base-level assets delivered* |                              113 KB |                                 
    1,425 KB | 12.6x smaller |'
  prefs: []
  type: TYPE_TB
- en: '**Images or other media content has not been included in the results for a
    fair comparison*'
  prefs: []
  type: TYPE_NORMAL
- en: Even though the size differences of the apps remain consistent, you can see
    that the additional latency introduced by a mobile network results in a dramatic
    slowdown of the legacy Angular application to an unacceptable level.
  prefs: []
  type: TYPE_NORMAL
- en: Adding all components to Material 6 will result in about ~1.3 MB of additional
    payload that will need to be delivered to the user. As you can see from the earlier
    comparison, this must be avoided at all costs. To deliver the smallest possible
    app possible, crucially in mobile and sales related scenarios, where every 100
    ms of load time has an impact on user retention, you may load and include modules
    individually. Webpack's tree-shaking process will divide modules in to different
    files trimming down the initial download size. In future builds, Angular is expected
    to shrink further in size, potentially halving the sizes mentioned in the above
    table.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started with the task and improve the UX of the weather app with
    Angular Material. Let''s move the Improve the UX of the app task to In Progress
    on our Waffle.io Kanban board. Here, you can see the status of my Kanban board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/da9a69e9-5ce9-4e8a-bcb1-1efedc94f194.png)Waffle.io Kanban Board'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Angular 6, you can automatically add Angular Material to your project, saving
    a lot of time in the process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `add` command, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `index.html` file has been modified to add the icons library
    and the default font, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Also note that `app.module.ts` has been updated to import `BrowserAnimationsModule`,
    as demonstrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your app and ensure that it works correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With that, you're done. Your app should be configured with Angular Material.
    It is still important to understand all the various components that make up Angular
    Material; in the next sections, we will go over the manual installation and configuration
    steps. You may skip to the *Angular Flex Layout* section, but I strongly recommend
    skimming over the manual steps, because I introduce the concept of creating an
    Angular module to organize your Material modules.
  prefs: []
  type: TYPE_NORMAL
- en: Manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will begin by installing all required libraries. As of Angular 5, the major
    version of Angular Material should match the version of your Angular installation
    and with Angular 6, the versions should be synced:'
  prefs: []
  type: TYPE_NORMAL
- en: In the terminal, execute  `npm install @angular/material @angular/cdk @angular/animations hammerjs`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe `package.json` versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, all libraries have the same major and minor version at 5.0\.
    If your major and minor versions don''t match, you can rerun the `npm install`
    command to install a specific version or choose to upgrade your version of Angular
    by appending the semver version of the package to the install command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you are working on a Bash-like shell, you can save some typing by using the
    bracket syntax to avoid having to repeat portions of the command, like `npm install
    @angular/{material,cdk,animations}@6.0.0`.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to update your version of Angular, refer to the *Updating Angular*
    section in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml), *Staying Up
    to Date with Angular* *Updates*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Material's components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at what we are exactly installing:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@angular/material` is the official Material 2 library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/cdk` is a peer-dependency, not something you directly use unless
    you intend to build your own components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/animations` enables some of the animations for some Material 2 modules.
    It can be omitted to keep app size minimal. You may use `NoopAnimationsModule`
    to disable animations in the modules that require this dependency. As a result,
    you will lose some of the UX benefits of Angular Material.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hammerjs` enables gesture support; it''s critical if you''re targeting any
    touch-enabled device, not just phones and tablets, but also hybrid-laptops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually configuring Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the dependencies are installed, let's configure Angular Material in
    our Angular app. Note that if you used `ng add @angular/material` to install Angular
    Material, some of this work will be done for you.
  prefs: []
  type: TYPE_NORMAL
- en: Importing modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by creating a separate module file to house all our Material
    module imports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in the terminal to generate `material.module.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note the use of the `--flat` flag, which indicates that an additional directory
    shouldn't be created for `material.module.ts`. Also, note that `-m`, an alias
    for `--module`, is specified so that our new module is automatically imported
    into `app.module.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the newly created file `material.module.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that the module has been imported into `app.module.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add animations and gesture support (optional, but necessary for mobile device
    support):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Modify `material.module.ts` to import basic components for Button, Toolbar,
    and Icon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove  `CommonModule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Material is now imported into the app, let's now configure a theme and add the
    necessary CSS to our app.
  prefs: []
  type: TYPE_NORMAL
- en: Importing theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A base theme is necessary in order to use Material components. We can define
    or change the default theme in `angular.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose a new option from here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`deeppurple-amber.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indigo-pink.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pink-bluegrey.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`purple-green.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update `angular.json` to use the new Material theme
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may create your own themes as well, which is covered in the Custom Themes
    section of this chapter. For more information, visit [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming).
  prefs: []
  type: TYPE_NORMAL
- en: Note that any CSS implemented in `styles.css` will be globally available throughout
    the application. That said, do not include view-specific CSS in this file. Every
    component has their own CSS file for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Material Icon font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can get access to a good default set of iconography by adding the Material
    Icon web font to your application. Clocking in at 48 kb in size, this is a very
    lightweight library.
  prefs: []
  type: TYPE_NORMAL
- en: 'For icon support, import the font in `index.html`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discover and search through the icons on [https://www.google.com/design/icons/](https://www.google.com/design/icons/).
  prefs: []
  type: TYPE_NORMAL
- en: For a richer set of icons, check out [MaterialDesignIcons.com](https://materialdesignicons.com/).
    This icon set contains the base set of Material icons, plus a rich set of third-party
    icons that contains useful imagery from social media sites to a rich set of actions
    that cover a lot of ground. This font is 118 kb in size.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Flex Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can make effective use of Material, you must be aware of its layout
    engine. If you have been doing web development for a while, you may have encountered
    Bootstrap''s 12-column layout system. A mathematical barrier to my brain wired
    to divvy things up as parts of a 100%. Bootstrap also demands a strict adherence
    to a div column, div row hierarchy that must be precisely managed from your top-level
    HTML all the way to the bottom. This can make for a very frustrating development
    experience. In the following screenshot, you see can see how Bootstrap''s 12-column
    scheme looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8256e1d7-bda6-48d1-a3d7-5367a0865298.png)Bootstrap''s 12 Column
    Layout Scheme'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap's custom grid-layout system was revolutionary for its time, but then
    CSS3 Flexbox arrived at the scene. In combination with Media Queries, these two
    technologies allow for creation of responsive user interfaces. However, it is
    very laborious to effectively leverage these technologies. As of Angular v4.1,
    the Angular team introduced its Flex Layout system that just works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Flex Layout documentation on GitHub aptly explains as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular Flex Layout provides a sophisticated layout API using FlexBox CSS +
    mediaQuery. This module provides Angular (v4.1 and higher) developers with component
    layout features using a custom Layout API, mediaQuery observables,and injected
    DOM flexbox-2016 css stylings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular''s excellent implementation makes it very easy to use FlexBox. As the
    documentation further explains:'
  prefs: []
  type: TYPE_NORMAL
- en: The Layout engine intelligently automates the process of applying appropriate
    FlexBox CSS to browser view hierarchies. This automation also addresses many of
    the complexities and workarounds encountered with the traditional, manual, CSS-only
    application of Flexbox CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library is highly capable and can accommodate any kind of grid layout you
    can imagine, including integration with all CSS features you may expect, such
    as the `calc()` function. In the next illustration, you can see how columns can
    be described using CSS Flexbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/63d95278-15b4-4cc3-af6b-2abf80f6ef36.png)Angular Flex Layout Scheme'
  prefs: []
  type: TYPE_NORMAL
- en: The great news is that Angular Flex Layout is no way coupled with Angular Material
    and can be used independently of it. This is very important decoupling that resolves
    one of the major pain points of using AngularJS with Material v1, where version
    updates to Material would often result in bugs in layout.
  prefs: []
  type: TYPE_NORMAL
- en: For more details, check out: [https://github.com/angular/flex-layout/wiki](https://github.com/angular/flex-layout/wiki).
  prefs: []
  type: TYPE_NORMAL
- en: At the time of publication, `@angular/flex-layout` hasn't delivered a stable
    release. The GitHub activity on the project suggests a stable release synchronized
    with the launch of Angular 6\. Further, CSS Grid is poised to supersede CSS Flexbox
    and as a result, the underlying technology that this library uses may change.
    My wish is that this library acts as an abstraction layer to the layout engine
    underneath.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All UIs you design and build should be mobile-first UIs. This is not just to
    serve mobile phone browsers, but also cases where a laptop user may use your application
    side by side with another one. There are many nuances to getting mobile-first
    design right.
  prefs: []
  type: TYPE_NORMAL
- en: The following is the *Mozilla Holy Grail Layout,* which demonstrates "the ability
    to dynamically change the layout for different screen resolutions" while optimizing
    the display content for mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Basic concepts of Flexbox at [https://mzl.la/2vvxj25](https://mzl.la/2vvxj25).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a representation of how the UI looks on a large screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/65decbe5-c598-4b0c-86df-2583ed0dfcd1.png)Mozilla Holy Grail Layout
    on Large Screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The same layout is represented on a small screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0ec3a455-4250-41c3-a5b0-caf6a25c787c.png)Mozilla Holy Grail Layout
    on Small Screen'
  prefs: []
  type: TYPE_NORMAL
- en: Mozilla's reference implementation takes 85 lines of code to accomplish this
    kind of responsive UI. Angular Flex Layout accomplishes the same task with only
    half the code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Angular Flex Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s install and add Angular Flex layout to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the terminal, execute `npm i @angular/flex-layout`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the time of publishing, the current release of `@angular/flex-layout` is
    version `5.0.0-beta.14`, which causes numerous peer dependency errors. To get
    around these errors, execute `npm i @angular/flex-layout@next` to install version `6.0.0-beta.15`,
    as mentioned in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml),* Staying
    Up to Date with Angular Updates*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `app.module.ts`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Layout basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap and CSS FlexBox are different beasts than Angular Flex Layout. If
    you learn Angular Flex Layout, you will code a lot less layout code, because Angular
    Material automatically does the right thing most of the time, but you'll be in
    for a disappointment once you realize how much more code you have to write to
    get things working once you leave the protective cocoon of Angular Flex Layout.
    However, your skills will still translate over, since the concepts are largely
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: Let's review the Flex Layout APIs in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Flex Layout APIs for DOM containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These directives can be used on DOM containers such as `<div>` or `<span>`,
    like `<div fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="15px">...</div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| HTML API     | Allowed values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `fxLayout` | <direction> &#124; <direction> <wrap>  Use: row &#124; column
    &#124; row-reverse &#124; column-reverse |'
  prefs: []
  type: TYPE_TB
- en: '| `fxLayoutAlign` | <main-axis> <cross-axis>  main-axis: start &#124;center
    &#124; end &#124; space-around &#124; space-between'
  prefs: []
  type: TYPE_NORMAL
- en: cross-axis: start &#124; center &#124; end &#124; stretch |
  prefs: []
  type: TYPE_NORMAL
- en: '| `fxLayoutGap` | % &#124; px &#124; vw &#124; vh |'
  prefs: []
  type: TYPE_TB
- en: Flex Layout APIs for DOM elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These directives influence how DOM elements acts within their container, like
    `<div fxLayout="column"><input fxFlex /></div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| HTML API | Allowed values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `fxFlex` | "" &#124; px &#124; % &#124; vw &#124; vh &#124; <grow> <shrink>
    <basis> |'
  prefs: []
  type: TYPE_TB
- en: '| `fxFlexOrder` | int |'
  prefs: []
  type: TYPE_TB
- en: '| `fxFlexOffset` | % &#124; px &#124; vw &#124; vh |'
  prefs: []
  type: TYPE_TB
- en: '| `fxFlexAlign` | start &#124; baseline &#124; center &#124; end |'
  prefs: []
  type: TYPE_TB
- en: '| `fxFlexFill` | *none* |'
  prefs: []
  type: TYPE_TB
- en: Flex Layout APIs for any element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following directives can be applied to any HTML element to show, hide,
    or change the look and feel of the said elements, such as `<div fxShow fxHide.lt-sm></div>`,
    which will show an element unless the screen size is less than small:'
  prefs: []
  type: TYPE_NORMAL
- en: '| HTML API | Allowed values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `fxHide` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
  prefs: []
  type: TYPE_TB
- en: '| `fxShow` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
  prefs: []
  type: TYPE_TB
- en: '| `ngClass` | @extends ngClass core |'
  prefs: []
  type: TYPE_TB
- en: '| `ngStyle` | @extends ngStyle core |'
  prefs: []
  type: TYPE_TB
- en: This section covers the basics for Static Layouts. You can read more about the
    Static APIs at [https://github.com/angular/flex-layout/wiki/Declarative-API-Overview](https://github.com/angular/flex-layout/wiki/Declarative-API-Overview).
    We'll cover the Responsive API in *Chapter 10, Angular App Design and Recipes*.
    You can read more about the Responsive APIs at [https://github.com/angular/flex-layout/wiki/Responsive-API](https://github.com/angular/flex-layout/wiki/Responsive-API).
  prefs: []
  type: TYPE_NORMAL
- en: Adding Material Components to your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all the various dependencies installed, we can start modifying
    our Angular app to add Material components. We will add a toolbar, material design
    card element, and cover accessibility and typography concerns alongside basic
    layout techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material schematics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Angular 6 and the introduction of schematics, libraries like Material can
    provide their own code generators. At time of publication, Angular Material ships
    with three rudimentary generators to create Angular components with a side navigation,
    a dashboard layout, or a data table. You can read more about generator schematics
    at [https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can create a side navigation layout by executing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This command updates `app.module.ts`, directly importing Material modules into
    that file, breaking my suggested `material.module.ts` pattern from earlier. Further,
    a new `SideNavComponent` is added to the app as a separate component, but as mentioned
    in the *Side Navigation* section in [Chapter 9](55413e2b-68e2-4dd0-9018-133008fc3321.xhtml),
    *Design Authentication and Authorization*, such a navigation experience needs
    to be implemented at the very root of your application.
  prefs: []
  type: TYPE_NORMAL
- en: In short, Angular Material Schematics hold a promise of making it a lot less
    cumbersome to add various Material modules and components to your Angular app;
    however, as provided, these schematics are not suitable for the purposes of creating
    a flexible, scalable, and well-architected code base, as pursued by this book.
  prefs: []
  type: TYPE_NORMAL
- en: For the time being, I would recommend using these schematics for rapid prototyping
    or experimentation purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start manually adding some components to LocalCast Weather.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying landing page with Material Toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start making further changes to `app.component.ts`, let's switch the
    component to use inline templates and inline styles, so we don't have to switch
    back and forth between file for a relatively simple component.
  prefs: []
  type: TYPE_NORMAL
- en: Update `app.component.ts` to use an inline template
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove `app.component.html` and `app.component.css`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start improving our app by implementing an app-wide toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the `h1` tag in `app.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `h1` tag with `mat-toolbar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the result; you should see a toolbar, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/42f5f573-2884-440c-9540-770ed02f0388.png)LocalCast Weather Toolbar'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `mat-toolbar` with a more attention-grabbing color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For a more native feeling, it is important that the toolbar touches the edges
    of the browser. This works well both on large- and small-screen formats. In addition,
    when you place clickable elements such as a hamburger menu or a help button on
    the far-left or far-right side of the toolbar, you''ll avoid the potential that
    the user will click on empty space. This is why Material buttons actually have
    a larger hit-area than visually represented. This makes a big difference in crafting
    frustration-free user experiences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This won''t be applicable to this app, however, if you''re building a dense
    application; you''ll note that your content will go all the way to the edges of
    the application, which is not a desirable outcome. Consider wrapping your content
    area in a div and apply the appropriate margins using css, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next screenshot, you can see the edge-to-edge toolbar with the primary
    color applied to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7e54cf2f-2240-4a22-866f-b7654818ba92.png)LocalCast Weather with
    Improved Toolbar'
  prefs: []
  type: TYPE_NORMAL
- en: Representing weather in Material Card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material card is a great container to represent the current weather information.
    The card element is surrounded by a drop-shadow that delineates the content from
    its surroundings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `MatCardModule` in `material.module`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In `app.component`, surround `<app-current-weather>` with `<mat-card>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the barely distinguishable card element, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/ad16e3d4-58ff-43d4-8988-a1676f40c863.png)LocalCast Weather with
    Indistinguishable Card'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to lay out the screen better, we need to switch to the Flex Layout
    engine. Start by removing the training-wheels from the component template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove `style="text-align:center"` from the surrounding `<div>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To center an element in a page, we need to create row, assign a width to the
    center element, and create two additional columns on either side that can flex
    to take the empty space, such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Surround `<mat-card>` with the preceding HTML
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe that the card element is properly centered, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7bf7efe3-f04f-4bea-a665-6e685e8f8c65.png)LocalCast Weather with
    Centered Card'
  prefs: []
  type: TYPE_NORMAL
- en: Reading through the Card documentation and looking through the examples on Material's
    documentation site at [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview),
    you'll note that `mat-card` provides elements to house title and content. We will
    implement this in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: On [material.angular.io](https://material.angular.io), you can view the source
    code of any example by clicking on  the brackets icons or launch a working example
    in Plunker by clicking on the arrow icon.
  prefs: []
  type: TYPE_NORMAL
- en: Accessibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Leveraging such Material features may feel unnecessary; however, you must consider
    responsiveness, styling, spacing, and accessibility concerns when designing your
    app. The Material team has put in a lot of effort so that your code works correctly
    under most circumstances and can serve the largest possible user base with a high-quality
    user experience. This can include visually-impaired or keyboard-primary users,
    who must rely on specialized software or keyboard features such as tabs to navigate
    your app. Leveraging Material elements provides crucial metadata for these users
    to be able to navigate your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Material claims support for the following screen reader software:'
  prefs: []
  type: TYPE_NORMAL
- en: NVDA and JAWS with IE / FF / Chrome (on Windows)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoiceOver with Safari on iOS and Safari / Chrome on OSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TalkBack with Chrome on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card header and content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s implement the title and content elements of `mat-card`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: With Material, less is always more. You'll note that we were able to remove
    the center `div` and directly apply the `fxFlex` on the center card. All material
    elements have native support for the Flex Layout engine, and this has tremendous
    positive maintainability implications in complicated UIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we apply `mat-card-header`, you can see this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/28ccc742-6469-4e94-b138-269bd94daefd.png)LocalCast Weather Card
    with Title and Content'
  prefs: []
  type: TYPE_NORMAL
- en: Note that fonts within the card now match Material's Roboto font. However, Current
    Weather is no longer attention grabbing, like before. If you add back in the `h2`
    tag inside `mat-card-title`, Current Weather will visually look bigger; however,
    the font won't match the rest of your application. To fix this issue, you must
    understand Material's typography features.
  prefs: []
  type: TYPE_NORMAL
- en: Material typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material''s documentation aptly puts it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Typography is a way of arranging type to make text legible, readable, and appealing
    when displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Material offers a different level of typography that has different font-size,
    line-height, and font-weight characteristics that you can apply to any HTML element,
    not just the components provided out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table are CSS classes that you can use to apply Material''s
    typography, such as `<div class="mat-display-4">Hello, Material world!</div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class Name** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| `display-4`, `display-3`, `display-2` and `display-1` | Large, one-off headers,
    usually at the top of the page (for example, a hero header) |'
  prefs: []
  type: TYPE_TB
- en: '| `headline ` | Section heading corresponding to the `<h1>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `title ` | Section heading corresponding to the `<h2>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `subheading-2` | Section heading corresponding to the `<h3>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `subheading-1` | Section heading corresponding to the `<h4>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `body-1` | Base body text |'
  prefs: []
  type: TYPE_TB
- en: '| `body-2` | Bolder body text |'
  prefs: []
  type: TYPE_TB
- en: '| `caption ` | Smaller body and hint text |'
  prefs: []
  type: TYPE_TB
- en: '| `button` | Buttons and anchors |'
  prefs: []
  type: TYPE_TB
- en: You can read more about Material Typography at [https://material.angular.io/guide/typography](https://material.angular.io/guide/typography).
  prefs: []
  type: TYPE_NORMAL
- en: Applying typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple ways to apply typography. One way is to leverage the `mat-typography`
    class and use the corresponding HTML tag like `<h2>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way is to apply the specific typography directly on an element, like
    `class="mat-title"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note that `class="mat-title"` can be applied to `div`, `span` or an `h2` with
    the same results.
  prefs: []
  type: TYPE_NORMAL
- en: As a general rule of thumb, it is usually a better idea to implement the more
    specific and localized option, which is the second implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the tagline as center-aligned caption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can center the tagline of the application using `fxLayoutAlign` and give
    it a subdued `mat-caption` typography, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the layout changes and caption typography:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the results, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/6d9d2f32-1481-4e39-a7ae-4438c97290ce.png)LocalCast Weather Centered
    Tagline'
  prefs: []
  type: TYPE_NORMAL
- en: Updating Current Weather card layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s still more work to do to make the UI look like the design, particularly
    the contents of the Current Weather card, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c7872ffe-c0e2-4cba-8afc-206e4eaaec03.png)'
  prefs: []
  type: TYPE_IMG
- en: To design the layout, we'll leverage Angular Flex.
  prefs: []
  type: TYPE_NORMAL
- en: You'll be editing `current-weather.component.html`, which uses the `<div>` and
    `<span>` tags to establish elements that live on separate lines or on the same
    line, respectively. With the switch over to Angular Flex, we need switch all elements
    to `<div>` and specify rows and columns using `fxLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Layout Scaffolding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to start by implementing the rough scaffolding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the current state of the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go through the file step by step and update it:'
  prefs: []
  type: TYPE_NORMAL
- en: Update `<span>` elements to `<div>` on lines 3, 4, and 8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wrap the `<img>` element with a `<div>`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `fxLayout="row"` property to the `<div>` element that has multiple child
    elements on lines 2 and 6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The City and Country column takes roughly 2/3rds of the screen, so add `fxFlex="66%"`
    to the `<div>` element on line 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `fxFlex` to the next `<div>` element on line 4 to ensure that it takes up
    the rest of the horizontal space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `fxFlex="66%"` to the new `<div>` element, surrounding the `<img>` element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `fxFlex` to the next `<div>` element on line 4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final state of the template should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You can be more verbose in adding Angular Flex attributes; however, the more
    code you write, the more you'll need to maintain, making future changes more difficult.
    For example, the `<div>` element on line 12 doesn't need `fxLayout="row"`, since
    a `<div>` implicitly gets a new line. Similarly, on line 4 and line 7, the right-hand
    side column doesn't need an explicit `fxFlex` attribute, since it'll automatically
    be squeezed by the left-hand side element.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a grid placement perspective, all your elements are now in the correct *cell,* as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/55cad2dd-c7cf-40c2-a1c3-b6fb224128f5.png)LocalCast Weather with
    layout scaffolding'
  prefs: []
  type: TYPE_NORMAL
- en: Aligning elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to align and style each individual cell to match the design. The
    date and temperature needs to be right aligned and the description centered:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To right align the date and temperature, create a new css class named `.right`
    in `current-weather.component.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Add `class="right"` to the `<div>` elements on lines 4 and 10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Center the `<div>` element for description in the same way you centered the
    app's tagline earlier in the chapter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe that the elements are aligned correctly, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/4d1dc5c5-d03b-42cc-a401-a78812906c9e.png)LocalCast Weather with
    correct alignments'
  prefs: []
  type: TYPE_NORMAL
- en: Styling elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finalizing the styling of elements is usually the most time-consuming part
    of frontend development. I recommend doing multiple passes to achieve a close
    enough version of the design with minimal effort first and then have your client
    or team decide whether it''s worth the extra resources to spend more time to polish
    the design:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new css property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: For the city name, on line 3, add `class="mat-title no-margin"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the date, on line 4, add `"mat-subheading-2 no-margin"` to `class="right"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the format of the date from `'fullDate'` to `'EEEE MMM d'` to match the
    design
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `<img>,` on line 8 to add `style="zoom: 175%"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the temperature, on line 10, append `"mat-display-3 no-margin"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the description, on line 12, add `class="mat-caption"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the final state of the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe that the styled output of your code changes, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a48e4e8a-d448-438b-b6a4-b0da85fc268e.png)LocalCast Weather with
    styling'
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tagline can benefit from some top and bottom margins. This is common CSS
    that we''re likely to use across the application, so let''s put it in `styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement `vertical-margin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply `vertical-margin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Current Weather has the same style as the City Name; we need to distinguish
    between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app.component.ts`, update Current Weather with a `mat-headline` typography:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The image and the temperature aren''t centered, so add `fxLayoutAlign="center
    center"` to the row surrounding those elements on line 6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the final design of your app, which should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/bf49f665-4779-4c99-93f5-5f5a2a176a0c.png)LocalCast Weather final
    design'
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking to match design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an area where you may spend a significant amount of time. If we were
    following the 80-20 principal, pixel-perfect tweaks usually end up being the last
    20% that takes 80% of the time to complete. Let''s examine the differences between
    our implementation and the design and what it would take to bridge the gap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/77565e77-0a6a-4088-8dab-f487cc8133d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The date needs further customization. The numeric ordinal *th* is missing;
    to accomplish this, we will need to bring in a third-party library such as moment
    or implement our own solution and bind it next to the date on the template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `current.date` to append an ordinal to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement a `getOrdinal` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note that the implementation of `getOrdinal` boils down to a complicated one-liner
    that isn't very readable and is very difficult to maintain. Such functions, if
    critical to your business logic, should be heavily unit tested.
  prefs: []
  type: TYPE_NORMAL
- en: Angular 6, at the time of writing, doesn't support new line breaks in the date
    template; ideally, we should be able to specify the date format as `'EEEE\nMMM
    d'` to ensure that the line break is always consistent.
  prefs: []
  type: TYPE_NORMAL
- en: The temperature implementation needs to separate the digits from the unit with
    a `<span>` element, surrounded with a `<p>`, so the superscript style can be applied
    to the unit, such as `<span class="unit">℉</span>`, where unit is a CSS class
    to make it look like a superscript element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a `unit` CSS class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply `unit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to experiment with how much of space the forecast image should have,
    by tweaking the `fxFlex` value on line 7\. Otherwise, the temperature overflows
    to the next line and your setting can further be affected by the size of your
    browser window. For example, `60%` works well with a small browser window, but
    when maximized, it forces an overflow. However, `55%` seems to satisfy both conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4e0df4b3-6917-409e-8d70-2ce2fd05e3c3.png)LocalCast Weather after
    tweaks'
  prefs: []
  type: TYPE_NORMAL
- en: As always, it is possible to further tweak margins and paddings to further customize
    the design. However, each deviation from the library will have maintainability
    consequences down the line. Unless you're truly building a business around displaying
    weather data, you should defer any further optimizations to the end of the project,
    as time permits, and if experience is any guide, you will not be making this optimization.
  prefs: []
  type: TYPE_NORMAL
- en: 'With two negative margin-bottom hacks, you can attain a design fairly close
    to the original, but I will not include those hacks here and leave it as an exercise
    for the reader to discover on the GitHub repository. Such hacks are sometimes
    necessary evils, but in general, they point to a disconnect between design and
    implementation realities. The solution leading up to the tweaks section is the
    sweet spot, where Angular Material thrives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/414f1e2e-7bb5-48c9-a6f6-3c1326a1c882.png)LocalCast Weather after
    tweaks and hacks'
  prefs: []
  type: TYPE_NORMAL
- en: Updating unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to keep your unit tests running, you will need to import `MaterialModule`
    to any component''s `spec` file that uses Angular material:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You will also need to update any test, including e2e tests, that search for
    a particular HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, since the app''s title, LocalCast Weather, is not in an `h1` tag
    anymore, you must update the `spec` file to look for it in a `span` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, in e2e tests, you will need to update your page object function
    to retrieve the text from the correct location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Custom themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we previously discussed, Material ships with some default themes like deeppurple-amber,
    indigo-pink, pink-bluegrey, and purple-green. However, your company or product
    may have its own color scheme. For this, you can create a custom theme that change
    the look of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a new theme, you must implement a new scss file:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file under `src` called `localcast-theme.scss`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Material theme guide, located at [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming),
    includes an up-to-date starting file. I'll break down the contents of the file
    further
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by including the base theming library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `mat-core()` mixin, which includes all common styles used by various
    Material components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '`mat-core()` should only be included once in your application; otherwise, you''ll
    introduce unnecessary and duplicated css payload in your application.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mat-core()` contains the necessary scss functions to be able to inject your
    custom colors into Material, such as mat-palette, mat-light-theme, and mat-dark-theme.'
  prefs: []
  type: TYPE_NORMAL
- en: At a minimum, we must define a new primary and an accent color. Defining new
    colors, however, is not a straightforward process. Material requires a palette
    to be defined, mat-palette, which needs to be seeded by a complicated color object
    that can't just be overridden by a simple hex value such as `#BFB900`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To pick your colors, you may use the Material Design Color Tool, located at
    [https://material.io/color](https://material.io/color). Here''s a screenshot of
    the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8f3bf1d1-8b8c-4e8c-9c48-b4d4f2a2c6ff.png)Material.io Color Tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Material Palette, select a Primary and a Secondary color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My primary selection is red with a hue value of `500`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My secondary selection is indigo with a hue value of `A400`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observe how your selections would apply to a material design app by going through
    the 6 prebuilt screen on the left
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Evaluate the accessibility implications of your selections, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/12c7fbf2-e1ea-4800-ae75-87bc62b30a05.png)Material.io Color Tool
    Accessibility tabThe tool is warning us that our selections result in ineligible
    text, when white text is used over the primary color. You should either take care
    to avoid displaying white text over your primary color or change your selection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The interface for `mat-palette` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the primary and secondary `mat-palette` objects using the default hue
    from the tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new theme and apply it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In `angular.json`, locate the `apps.styles` attribute
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepend the list with `localcast-theme.scss` while removing the `styles.input`
    attribute
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Even though your theme is in scss, you may continue using css in the rest of
    your application. Angular CLI supports compiling both scss and css. If you would
    like to change the default behavior, you may switch to scss altogether by changing
    the `defaults.styleExt` property in the `angular.json` file from css to scss.
  prefs: []
  type: TYPE_NORMAL
- en: You may also choose to eliminate `styles.css` and merge its contents with `localcast-theme.scss`
    or convert `styles.css` to a sass file by simply renaming it to `styles.scss`.
    If you do this, don't forget to update `angular.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your application should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/43caf8be-eb2d-49ea-ba98-27770c9852e5.png)LocalCast Weather with
    custom theme'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now move the UX task to the done column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a334c98f-f445-4c4a-81cb-97ecf78285ac.png)Waffle.io Kanban Board
    Status'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create further customized themes, you should consider using the
    Material Design Theme Palette Generator at [http://mcg.mbitson.com](http://mcg.mbitson.com).
    This will generate the necessary code to define your custom color palette to create
    truly unique themes.
  prefs: []
  type: TYPE_NORMAL
- en: You may also find the Color Blender at [https://meyerweb.com/eric/tools/color-blend](https://meyerweb.com/eric/tools/color-blend) to
    find midway points between two colors.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml), *Staying Up to Date
    with Angular Updates*, we leveraged `ng update` for an automated upgrade experience
    and also went over a manual and methodical approach to updating packages. We will
    follow a similar strategy when updating Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `ng update` for a quick and painless upgrade experience, which
    should look like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, I have discovered the `material-update-tool` published by the
    Angular team at [https://github.com/angular/material-update-tool](https://github.com/angular/material-update-tool).
    In it''s current form this tool is advertised as a specific Angular Material 5.x
    to 6.0 updater tool, so it may perhaps become part of `ng update` like the `rxjs-tslint`
    tool in the future. You may run the tool as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If you're lucky and everything goes well, feel free to skip the rest of this
    section. For the rest of the section I will go over a specific scenario involving
    release candidates and beta versions that I ran into during the development of
    this example, which highlights the need for a manual update. First, we will establish
    awareness of the current versions, then discover latest available versions, and,
    finally, update and test the upgrade, like we did while updating Angular manually.
  prefs: []
  type: TYPE_NORMAL
- en: Take stock of your current versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Observe Angular Material package versions in `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In this particular case, I had installed Material 5.0.0 during its RC phase.
    It is advisable to not ship Beta or RC libraries. Since our `@angular/core` package
    indicated that we're on Angular version 5.0.0, we will aim to upgrade to the latest
    5.x.x release of Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Check on the latest available versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will leverage npm CLI tool to discover the latest available versions of
    Angular Material:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute `npm info @angular/material` and observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You can observe that, combined with the time information found deeper in the
    output, since the `5.0.0-rc0` release 5 new releases have been pushed, the final
    version is the major 5.0.0 release of the library.
  prefs: []
  type: TYPE_NORMAL
- en: If there are other major versions of the Material library available, such as
    6.0.0, you should still stick to the 5.x.x version, since our `@angular/core`
    version is at 5.x.x. As rule of thumb, you should aim to keep Angular and Material
    on the same major versions.
  prefs: []
  type: TYPE_NORMAL
- en: Research the latest available versions of `@angular/core`,  `@angular/animations`, `@angular/cdk`,
    `@angular/flex-layout`, `@angular/material`, and `hammerjs`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To reduce the amount of information you need to weed through, execute `npm info
    <package-name>` versions for each package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Document your findings in a table similar to the following; we''ll discuss
    how to determine your target version here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Package** | **Current** | **Latest** | **Target** |'
  prefs: []
  type: TYPE_TB
- en: '| @angular/core | 5.0.0 | 5.1.0 | 5.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| @angular/animations | 5.0.0 | 5.1.0 | 5.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| @angular/cdk | 5.0.0-rc0 | 5.0.0 | 5.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| @angular/flex-layout | 2.0.0-beta.10-4905443 | 2.0.0-rc.1 | 2.x.x |'
  prefs: []
  type: TYPE_TB
- en: '| @angular/material | 5.0.0-rc0 | 5.0.0 | 5.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| hammerjs | 2.0.8 | 2.0.8 | 2.x.x |'
  prefs: []
  type: TYPE_TB
- en: 'Research results reveal that a new minor version of Angular was released, which
    is useful information to have. In determining your target version, stay conservative.
    Follow the following guidance:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not update Angular components while updating Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you intended to also update Angular components, do it in separate phases
    and ensure that you execute your tests after each individual phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update any Beta or RC package to its latest available version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When new versions of packages are available, stay within the same Major release
    of the package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adhere to these guidelines, unless the documentation suggests otherwise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know what version to upgrade to, let''s go ahead and do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to update Material and its related components
    to their target versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Verify your `package.json` to ensure that the versions match the expected version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address any NPM Warnings (as detailed in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml),
    *Staying Up to Date with Angular Updates*, in the *Updating Angular* section)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this specific instance, I receive impossible-to-meet peer dependency warnings
    by the `@angular/flex-layout` package. Further investigation on GitHub ([https://github.com/angular/flex-layout/issues/508](https://github.com/angular/flex-layout/issues/508))
    reveals that this is a known issue and in general to be expected from a Beta or
    RC package. This means it is safe to ignore these warnings.
  prefs: []
  type: TYPE_NORMAL
- en: After your upgrade is complete, ensure that you execute the Post Update Checklist, as
    detailed in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml),*Staying Up
    to Date with Angular Updates.*
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what Angular Material is, how to use the Angular
    Flex layout engine, the impact of UI libraries on performance, and how to apply
    specific Angular Material components to your application. You became aware of
    pitfalls of overly-optimizing UI design and how to add a custom theme to your
    application. We also went over how you can keep Angular Material up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will update the weather app to respond to user input
    with reactive forms and keep our components decoupled, while also enabling data
    exchange between them using `BehaviorSubject`. After the next chapter, we will
    be done with the weather app and shift our focus on building larger, line-of-business
    applications.
  prefs: []
  type: TYPE_NORMAL
