- en: Chapter 8. Configuration Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to a study, most of the critical errors that occur in large IT systems
    are due to people and processes. Half of those errors are due to a lack of release
    synchronization, coordination between machines, and configuration management.
    Big machinery and infrastructure are way too hard to manage and maintain for any
    single team. Having an identical configuration set for every machine to make them
    all work in synchronization is a nightmare for management teams. For these reasons,
    we have a process called **Configuration Management** (**CM**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to describe how to use the CM process to maintain
    and manage a CentOS 7 Linux server infrastructure. We are going to describe in
    brief some of the most common open source configuration management tools, with
    an example of setting up a management server with a client using Puppet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Through this chapter, you are going to learn these topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Operating system configuration management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source configuration management tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation and configuration of a Puppet server and client
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing configuration management
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration management is a process that helps organize multiple machines/systems
    so that they can coordinate with each other to perform one rather big process
    or run multiple redundant processes. It is widely used by military organizations
    to manage their systems, such as weapon systems, vehicles, and information systems.
    Outside the military, it is widely used in IT service management for big infrastructure
    handling.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: There are still many IT organizations that work with old and traditional tools
    such as customized scripts (shell scripts, expect scripts, and so on) and manual
    process implementation to run repetitive tasks. We have well acknowledged the
    fact that those techniques are no longer effective, especially when used in large-scale
    infrastructures. Even for small infrastructures, it is hard to track and maintain
    them due to all-time configuration changes. All of this may have a direct impact
    on the reliability of the infrastructure itself, which may also affect the productivity
    of the organization.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Automated configuration management has put an end to manual scripting and configuration;
    it has also been used to perform other tasks that most system administrators do
    on a daily basis (system updates, firmware patch, release update and management,
    and so on).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: For the new generation of system administrators, everything is automated. Most
    machines run on the same set of configurations, and a set of servers to manage
    them all. Everything is watched by monitoring tools. The job of a system administrator
    is to initialize their infrastructure's basic configuration to start their configuration
    management server, set up clients if needed on other machines, and then start
    sending configurations to the clients to apply it. The configuration management
    server will act as the master of the Puppets and send them direct orders to follow
    for whatever their architecture or type of OS is.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing configuration management](img/B04674_08_08.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://flylib.com/](http://flylib.com/)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'For our case, we will be setting up a CentOS 7 server to control a CentOS 7
    client using configuration management, where we are going to show you how manual
    configuration is time consuming and unreliable. Before that, we will be showing
    you a list of famous open source tools used for configuration management:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing configuration management](img/B04674_08_09.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.axiossystems.it](http://www.axiossystems.it)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Open source configuration management tools
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to enumerate the world's most famous open source
    configuration management tools, going through the description of each tool, the
    major focus, and where it can serve well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Chef
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chef is a configuration management tool that helps us configure and maintain
    servers that provide a variety of services. Chef uses something called recipes,
    made to describe the desired management (configuration, installation, change)
    for the server's applications and utilities. It is widely used for infrastructure
    with cloud-computing-based platforms (such as Rackspace, Internap, Amazon, Google,
    OpenStack, SoftLayer, and Microsoft) because of its capacity to automatically
    provision and configure new machines on the go. The scalability of Chef allows
    it to be used for small and large infrastructures on demand.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Chef can be executed as a server or a client. The clients are executed on the
    servers/machines that we want to manage using our server. And the Chef server
    agent is installed in one centralized server, on which it manages the recipes
    depending on what the administrator has defined for each node (web server, cluster
    machine, storage server, and so on). Then the client executes the recipes sent
    to it by the server. By default, the client updates its recipe from the server
    every 30 minutes to see whether there is any change that needs to be done.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the project, Chef used to manage only Linux machines, but
    now it is capable of managing Windows machines as well. The Chef server is now
    supported by multiple Linux platforms (RHEL/CentOS, FreeBSD, OSX, Solaris, and
    so on).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: This is what it looks like, architecture-wise, after having Chef installed.
    The first images shows the interaction between chef and a variety of nodes that
    can manage.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Chef](img/B04674_08_10.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.yet.org](http://www.yet.org)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot show the interaction between chef and the Amazon web
    services to be on use for advanced configuration
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Chef](img/B04674_08_11.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://www.chef.io/](https://www.chef.io/)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more detailed information on how to set up and master Chef, please have
    a look at some of Packt''s other books on Chef at: [https://www.packtpub.com/all/?search=chef](https://www.packtpub.com/all/?search=chef)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: SaltStack (Salt)
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SaltStack is a Python-based open source configuration management tool. It is
    also called a remote engine. In a way, it is a new approach to infrastructure
    management. It is easy to run, scalable, can handle thousands of nodes, and can
    establish very fast communication between its nodes (servers, terminals, and so
    on).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: It is well known due to its dynamic communication inside the infrastructures
    it mages, where it benefit amazingly from that to organize, execute, and establish
    configuration management through its nodes, as well as much more.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: It is available for a variety of operating systems (CentOS, Debian, RHEL, Ubuntu,
    and even Windows).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Salt is designed to be very extensible, wherein it has the capacity to use
    module management so as to be moldable to a variety of applications. Salt offers
    dynamic modules to manage the remote execution and administration of its components.
    They are categorized as follows: execution modules, state modules, grains, renderer
    modules, returners, and runners.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'SaltStack has a paid product called SaltStack Enterprise. It is designed for
    big infrastructures in IT organizations, system administration, site reliability
    engineering, and development configuration and management for modern data center
    infrastructures, applications, and code. It is briefly depicted in the following
    figure, which shows how it covers a variety of fields to help the establishment,
    management, and maintenance of the following services shown in the two following
    figures:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![SaltStack (Salt)](img/B04674_08_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.saltstack.com](http://www.saltstack.com)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: This figure shows the interaction between the three major services (ITOps, DevOps,
    CloudOps) and the capacity to use SaltStack to manage those all together.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![SaltStack (Salt)](img/B04674_08_12.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.saltstack.com](http://www.saltstack.com)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'SaltStack services operate on several steps as shown in the following figure:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![SaltStack (Salt)](img/B04674_08_13.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://saltstack.com](http://saltstack.com)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more detailed information on how to set up and master SaltStack, please
    have a look at some of Packt''s other books on SaltStack at: [https://www.packtpub.com/all/?search=saltstack](https://www.packtpub.com/all/?search=saltstack).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Ansible
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ansible is a free and simple solution for configuration management. It is well
    known for automated configuration management, whereby it relies on SSH to access
    nodes and configure them through Python-based solutions. It uses a minimal amount
    of dependencies and environment tools (such as client agents), and is secure.
    It is also very reliable and does not require very advanced learning lessons to
    start using it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Its configuration requires the editing of some human-readable configuration
    files to ensure that everyone can understand them, if an update or reconfiguration
    is ever needed. It requires only the SSH password or an SSH key in order to access
    the nodes to be managed, without the need for the installation of an agent. So,
    there will definitely be no need to worry about not having the agent running due
    to an upgrade, patch, or daemon malfunction.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Ansible supports modules as well. Basically, most of them run on JSON and it
    has standard output support for all kinds of programming languages. It also includes
    more than 200 modules, which can be used to manage and automate services.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: It is well supported by the RHEL community (Red Hat, Fedora, CentOS, and Scientific
    Linux). It is easily downloadable through the EPEL repository. It is also supported
    by other Linux distributions of the Debian family, and other Unix-like systems
    such as OS X, BSD, and recently by MS Windows.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Ansible](img/B04674_08_14.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://sysadmincasts.com](https://sysadmincasts.com)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more detailed information on how to set up and master Ansible, please have
    a look at some of Packt''s other books on Ansible at: [https://www.packtpub.com/all/?search=ansible](https://www.packtpub.com/all/?search=ansible)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Puppet
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet is an open source configuration management tool designed to manage and
    configure machines within the same infrastructure, to simplify various system
    administration tasks where the user declares the machines' states and resources
    using different ways (Ruby DSL, Puppet declaration language, and others). It is
    published under the GPL and Apache licenses. It is mainly used to manage and configure
    Unix-based machines and Microsoft systems. To establish Puppet, as best practice,
    we require a Puppet server agent to do the role of a configuration management
    server and for the other nodes, the ones the server is going to manage, we require
    the client version. Puppet inspects each node's configuration, and then identifies
    the changes between the old and the new configurations specified at its configuration
    file, if there are any. Then it starts making the required changes to adjust the
    node to the specified state. This task is useful; not only for establishing a
    new configuration, but also for regaining it if anything goes wrong with the machines.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, Puppet''s major advantages are that it automates every step of the
    software delivery process, from the provisioning of physical and virtual machines
    to organization and reporting. Puppet is widely used by many organizations because
    it has the following features:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: It is designed to prevent duplication during the process of problem resolution
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It gives the capacity to make rapid and repeatable configurations automatically
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It simplifies the management of both physical and virtual devices
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes the task of system administration much easier
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Puppet offers two services: one as an open source and free solution, and the
    other as a paid solution for enterprises. Both of them serve to help system administrators
    automate their infrastructure configuration management. Puppet Enterprise has
    much more to offer for big enterprises.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Puppet](img/B04674_08_15.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.slideshare.net/](http://www.slideshare.net/)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Puppet is not just a simple configuration management tool. It is a streamlined
    node installation, management, and repair solution that simplifies the management
    of a grid of nodes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'As the following figure shows, to use Puppet to establish a new configuration,
    there are four important steps to be followed: Define, Simulate, Enforce, and
    Report. Herein, the system administrator first defines what kind of configuration
    needs to be set. Then, Puppet tests the deployment without harming the infrastructure
    and makes sure that it will work ok. After that, Puppet starts comparing what
    is new to what is already being used, and starts enforcing what needs to be done
    to meet the user''s demands. Finally, it reports the status of each node on its
    dashboard.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Puppet](img/B04674_08_02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.slideshare.net](http://www.slideshare.net)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Puppet
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For our Puppet installation, we are going to install the free open source version
    of Puppet.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: We have chosen Puppet to be our primary configuration management solution because
    Puppet is a more declarative solution. This has made it more attractive for damage
    repair than any other solution.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two possible architectures for Puppet: the Agent/Master architecture
    or the standalone architecture. The Agent/Master architecture is based on one
    or many Puppet master servers managing servers/nodes that has a Puppet client
    agent running as a background service. In the standalone architecture, the client
    nodes run Puppet as a master and slave agent at the same time. Which is used usually
    to schedule management tasks or jobs to that machine it is installed on.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to use the Client/Master architecture, where we
    are going to use two CentOS 7 servers; one will be used as the master Puppet server
    and the other as the client that the Puppet agent will run on.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the installation, we need to make sure that some preinstallation
    tasks are done. We have already decided on the architecture, so we have a better
    idea of which software packages we are going to install.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Then we should define which machine will act as a Puppet server agent. We should
    always start by installing the server and then move on to the clients.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure presents the interaction between the Puppet master and
    client when trying to establish a change requested by the manager from the Puppet
    master interface:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and configuring Puppet](img/B04674_08_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://elatov.github.io/2014/08/setting-up-puppet-master-on-centos-7/](http://elatov.github.io/2014/08/setting-up-puppet-master-on-centos-7/)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Our infrastructure will consist of the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Puppet master server:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: `CentOS 7`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: `10.0.0.10`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: `masterpuppet.packt.co.uk`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First client server:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: `CentOS 7`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: `10.0.0.11`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: `webserver1.packt.co.uk`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Second client server:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: `CentOS 7`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP address**: `10.0.0.12`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostname**: `webserver2.packt.co.uk`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually, we should check which Linux version and family we are using for the
    clients and the servers of the infrastructure. In our case, we have already defined
    those to be CentOS 7 for all the machines of our environment.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, the Puppet architecture will be managed through the network, so
    we should make sure that all the nodes (servers and clients) are well configured
    to run the Puppet traffic. And we need to open the default Puppet access port
    8140 for incoming connections at the server so that the client can access it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Finally, for the network, we should have all the nodes configured with a unique
    hostname, and each one of the machines needs to have in its `/etc/hosts` file
    all the other machines defined with their IP addresses:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To ensure that all the confirmations are synchronized between the nodes, we
    need to establish a network time-server (using NTP) connection to have all nodes
    synchronized with the same time:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and configuring Puppet](img/B04674_08_16.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: 'We can now start the installation of our Puppet server:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to enable the Puppet open source repository that offers Puppet,
    PuppetDB, and other packages. We will be using RPM to add the Puppetlabs file
    to the system:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then we install the Puppet server:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We need to accept all that the installation manager may ask, for example, the
    RPM-GPG-Key verification, and whether we want to install the package or not.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we need to configure Puppet to understand that this node is the master
    Puppet server:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we need to add these two lines under the `[main]` section:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Since this is our Puppet server, we need to create its certificate. We need
    to start the Puppet server manually, for long enough until it creates the required
    certificate. After that, we need to stop it because we are still running the configuration:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After getting the following message, we need to hit Ctrl + C to stop the service:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this point, we can start Puppet. But we would like to integrate the Puppet
    service with Apache to make it one service that can serve both by installing a
    special module. To do this, we need to install some useful packages:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we need to install Passenger, which is an open source tool that we will
    use to install some Apache plugins to help with the development of the Puppet
    web server. For the installation task, we will use GEM, a Ruby tool for installing
    Ruby-based packages:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'From that point onward, we can install the Passenger Apache module. For CentOS
    7, we need to locate the executable file. It doesn''t get its binary set in the
    BIN environment during the installation. So, we need to execute it from where
    it is installed:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Installing and configuring Puppet](img/B04674_08_17.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: After that, we follow the instructions provided by the last command as follows.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to write `1` to install the Apache 2 module:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we just type *Enter* whenever the program asks. We can ignore the warnings
    and hope for no errors. Otherwise, we need to make sure that we have installed
    all the required tools earlier. We know that it is done when we see the error
    and warning summary, and we get this message:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we create the two directories where Puppet is going to generate its public
    and temporary files, and set ownership to its configuration file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To finish, we create the Puppet virtual host file at the Apache2 configuration
    directory, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We fill it with the following configuration options, changing the red text
    depending on what we have configured on a different environment:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We set SELinux to permissive to let the new modules use the resources:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we change the SELINUX option to look like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then we need to restart the Apache service and add it to the system startup
    services, while disabling the Puppet service:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With this step done, we can say that we are done configuring the server. We
    can now proceed to setting up and configuring the clients.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and configuring Puppet](img/B04674_08_18.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://www.aosabook.org](http://www.aosabook.org)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'As we said earlier, we need to make sure that the `/etc/hosts` file is well
    configured and has all the nodes (whether client or server) on it. Plus, we need
    to make sure that the NTP service is running and loading the time for the same
    time-server as our server. Usually, we can just go with the default set by the
    system and that works fine:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As with the server, we do the same thing to configure the Puppet repository
    for the clients:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then we install the Puppet client agent:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, just before starting the service, we need to add the Puppet master server
    id to the client agent configuration file. So, we go ahead and edit the Puppet
    configuration file. We add the server address under the agent option:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then we save the file, start the service, and enable it for the system startup
    services:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We need to do the same for all client servers.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we go back to our Puppet server and check whether the certificate
    has been sent:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We should see something like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This means that we have a client asking the server to approve a certificate
    request. We can sign each server certificate using this command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can now go back to the client to check whether the certificate is successfully
    set using the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We know that it is well configured if we get the following output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and configuring Puppet](img/B04674_08_04.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: At this point, our puppet Master and Client infrastructure is working fine.
    Let's try and create a configuration from the Puppet server and send it to the
    client to apply it.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a manifest file called `site.pp` in the `/etc/puppet/manifest`
    folder, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then we test the service by making the client nodes (`webserver1` and `webserver2`)
    and install some tools. We need to add the following code to the last opened file
    for editing:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To verify that Puppet is running well we can always go to the client and type
    in the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Installing and configuring Puppet](img/B04674_08_05.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: 'By default, the Puppet agent will check the Puppet server every 30 minutes
    to see whether there is any change that has happened so that it can apply it.
    Therefore, during the test, we can always force a manual update, as we did earlier.
    The update time can be changed, by changing it in the Puppet configuration file
    under the `[main]` section, as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then we can change it to have a service installed and ensure that it is running:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![Installing and configuring Puppet](img/B04674_08_06.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'We can also install a program that is located only at the EPEL repository by
    forcing the installation of the EPEL repository before the program:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Installing and configuring Puppet](img/B04674_08_07.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'Then we can perform some user manipulation where we can create a user on all
    the client servers. First, we need to create it at the same machine to get its
    password with the hashing. Then we edit the `site.pp` file to give some information
    about the user:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Before finishing the chapter, we would like to explore what the Puppet Labs
    offer as extra modules, which we can use without the need to create our own, to
    perform simple, daily tasks. To search for the modules, we use the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, to install the desired one, we use the `install` option:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Then, to check what is installed, we go to the `/etc/puppet/module` folder,
    and there we will have all the modules with their configuration files. We can
    always change them depending on our needs.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and configuring Puppet](img/B04674_08_19.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://static.virtualizationpractice.com](http://static.virtualizationpractice.com)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We believe that we have presented some decent information about how to use
    Puppet for CentOS 7 but still Puppet has a lot to offer. To explore more about
    it, please check some of Packt''s other books on mastering Puppet at: [https://www.packtpub.com/all/?search=puppet](https://www.packtpub.com/all/?search=puppet)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s have a look at the references used throughout the chapter:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuration management on Wikipedia: [https://en.wikipedia.org/wiki/Configuration_management](https://en.wikipedia.org/wiki/Configuration_management)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chef website: [https://www.chef.io/](https://www.chef.io/)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SaltStack website: [http://saltstack.com](http://saltstack.com)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ansible website: [http://www.ansible.com](http://www.ansible.com)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Puppet website: [https://puppetlabs.com](https://puppetlabs.com)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What is puppet web page: [https://puppetlabs.com/puppet/what-is-puppet](https://puppetlabs.com/puppet/what-is-puppet)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet网页是什么：[https://puppetlabs.com/puppet/what-is-puppet](https://puppetlabs.com/puppet/what-is-puppet)
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced configuration management and its benefits for
    system administrators, especially when working in a big computer environment.
    We introduced in brief some of the well-known open source solutions used to carry
    out configuration management on Linux servers, especially CentOS 7\. Then we chose
    Puppet as our candidate to show in a step-by-step tutorial how to set up and configure
    master/client architecture. And, finally, we have tested some commands on the
    client nodes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了配置管理及其对系统管理员的好处，特别是在大型计算机环境中工作时。我们简要介绍了一些用于在Linux服务器上进行配置管理的知名开源解决方案，特别是CentOS
    7。然后我们选择了Puppet作为我们的候选人，以逐步教程的方式展示如何设置和配置主/客户端架构。最后，我们在客户端节点上测试了一些命令。
- en: In the final chapter, we will show you a few things that we believe every system
    administrator using Linux in general and CentOS more specifically should know,
    to better manage and secure their infrastructure in the best-practice ways.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将向您展示一些我们认为每个使用Linux系统管理员，特别是CentOS的管理员应该知道的东西，以更好地以最佳实践方式管理和保护他们的基础设施。
