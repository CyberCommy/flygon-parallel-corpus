- en: Working with Google's Location Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we built our **location-based alarm** (**LBA**) app
    to include Google Maps, added a marker and customization of the location, and
    also built the UI for receiving user input for the alarm.
  prefs: []
  type: TYPE_NORMAL
- en: We will focus now on the integration of the Google Location API with our app
    and receiving updates on the user's location. The location of interest entered
    by the user will be saved and compared with the location updates received for
    the alarm to be triggered as the user reaches the area of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Google provides various means to access and identify the location of the user.
    The Google Location APIs provides information on the user's last known location,
    display the location address, receive continuous updates on the location changes,
    and so on. Developers can add GeoFence—a fence around a geographical region—and
    any time users pass through the GeoFence an alert can be generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Google Location API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive updates on the user's current location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize user shared preferences to persist the user's location of interest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Match and display the alert when the user reaches the location of interest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary focus of this chapter is to introduce and explain the concept and
    usage of the location in our app. With this objective in mind, these concepts
    are explained with the app receiving the location updates when running in the
    foreground. The handling of required permissions is also handled in a simpler
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating shared preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users of our app will enter the desired location for which they want the alarm
    to be triggered. Users enter the `Lat` and `Lng` of the location and for us to
    compare this with the current location users are in, we need to store the details
    entered by them as the desired location.
  prefs: []
  type: TYPE_NORMAL
- en: Shared preferences are file-based storage that contain key-value pairs and provide
    an easier means to read and write. The shared preferences file is managed by the
    Android framework and the file can be either private or shared.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first integrate shared preferences into our code and save the latitude
    and longitude the user entered in the UI screen for the alarm.
  prefs: []
  type: TYPE_NORMAL
- en: Shared preferences give us an option of saving the data in key-value pairs.
    While we can use the generically available shared preference file, it is better
    to have a specific shared preference file for our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to define a string for our shared preference file to be used by our
    app. Navigate to app | src | main | res | values | strings.xml. Let us add a new
    string, `PREFS_NAME`, and name it as `LocationAlarmFile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will add the following code in our `SettingsActivity` class to capture the
    user input and save that in the shared preferences file. The shared preferences
    file is opened by referring to the string `PREFS_NAME` in the resources file and
    the file is opened with `MODE_PRIVATE`, which indicates the file is available
    only for our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is available, we open the editor and share the latitude and longitude
    input from the user as a string using `putString` as key-value pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To read and display from shared preferences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The user is alerted about the alarm being set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e94c0720-b24e-426b-8d67-08a28aedecdc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The latitude that is entered by the user is stored and read from shared preference
    and displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3eb7b5d4-409e-47f2-bd74-31eb98885280.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The longitude entered by the user is also read from shared preferences and
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e0402fa-652e-4d8c-bf4d-295149b723e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Play Services provide location-based services that can be integrated
    and used by our app. Adding the location services and using them requires permissions
    to identify and get the location updates from the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Google Location services from Play Services, we need to include
    the `play-services-location` in the `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It is important to include **only** the specific feature required for the app
    from Google Play Services. For example, here we require location services, so
    we need to specify the services for the location. Including all Google Play Services
    will make the app size huge; ask for permissions that are not really required
    for the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to add the permission for accessing the fine location in our `AndroidManifest.xml`
    file. This gives us access to obtain the location details from the network provider
    and also the GPS provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: During runtime, we need to check whether the device has the location enabled;
    if not, we will display a message requesting the user to enable the location and
    grant permission for the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `checkLocation` Boolean function finds out if the device has the location
    enabled or not for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f698a5c3-d5f2-40d4-b344-897e05332272.png)'
  prefs: []
  type: TYPE_IMG
- en: Integration of the location API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will integrate the location API into our app to receive location updates.
    Integration of the location API involves some changes in the code. Let us discuss
    them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Classes and variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integration of the Google location API requires implementation of `GoogleAPIClient`,
    `ConnectionCallbacks`, and connection failed listeners by `MapsActivity`. Let
    us proceed and make the changes to the `MapsActivity`. Earlier, we had the `MapsActivity`
    extend `AppCompatActivity` and implement the `OnMapReadyCallback` interface. Now,
    since we need to use the location API''s we have to also implement the `GoogleAPIClient`,
    `ConnectionCallbacks`, and `onConnectionFailedListener` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We declare the variables required for `GoogleMap` and other variables to store
    the latitude and longitude received from the user and also from the location API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We declare the `UPDATE_INTERVAL`, the interval in which we would like to receive
    the updates from the location API, and `FASTEST_INTERVAL`, the rate at which our
    app can handle the update. We also declare the `LocationManager` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreate` function, we set the content view for the UI and also ensure
    the `GoogleApiClient` is instantiated. We also request that the user enables the
    location is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onCreate()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Google API client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Declaring, initializing, and managing the connection options of the Google API
    client is to be handled along the lifecyle events of Android app. We also need
    to get the location updates once the connection is established.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `onStart` method, we check if the `mGoogleAPIClient` instance is not
    null and request the connection be initiated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onStop` method, we check whether the `mGoogleAPIClient` instance is
    connected and if it is, we call the `disconnect` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In case something goes wrong and the connection gets suspended, we request
    a reconnect in the `onConnectionSuspended` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In case the Google Location API cannot establish the connection, we log the
    reason for this by getting the error code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the `onConnected` method, we first check for the permission to `ACCESS _FINE_LOCATION`
    and that the `ACCESS_COARSE_LOCATION` is indeed present in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the `startLocationUpdates()` method once we ensure the permissions
    are granted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `fusedLocationProviderClient` provides the current location details and
    assigns them to the `mLocation` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `startLocationUpdates` creates the `LocationRequest` instance and provides
    the parameters we set for the updates. We also call the `FusedLocationAPI` and
    request the location updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onLocationChanged` method is the important method in which we get the
    details of the current location of the user. We also read the latitude and longitude
    the user input for the alarm from the shared preferences. Once we get both sets
    of details, we call the `CheckAlarmLocation` method which matches the latitude/longitude
    and alert the user as and when they reach the area of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d2b3a7d9-134b-41af-83ef-b778674eb1a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Matching the location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `startLocationUpdates` method provides the current latitude and longitude
    of the user continuously as per the interval we have set. We need to use the latitude
    and longitude information obtained and need to compare this with the latitude
    and longitude entered by the user for the alarm.
  prefs: []
  type: TYPE_NORMAL
- en: 'As and when the user enters the location of interest, we display an alert message
    that the User has reached the area for which the alarm has been set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/adf9fa70-f09d-4fdd-bc66-7d8439a26a79.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we continued developing our location-based alarm app to make
    use of the Google Location APIs from Google Play Services and utilized the functionality
    of providing an alert as when the user entered the area of interest.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to use shared preferences for the persistence of the data entered
    by the user, retrieving the same and using the Location APIs to match the current
    location of the user with the area of interest.
  prefs: []
  type: TYPE_NORMAL
