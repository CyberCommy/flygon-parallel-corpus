- en: Scanning and Evasion Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描和规避技术
- en: 'In this chapter, we will describe the process of discovering devices on a target
    network using various tools in Kali Linux, as well as other tools available from
    GitHub. We will be looking into the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将描述在Kali Linux中使用各种工具以及GitHub上其他可用工具发现目标网络上的设备的过程。我们将研究以下主题：
- en: A description of the target-discovery process
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标发现过程的描述
- en: The method used to identify target machines using the tools in Kali Linux
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kali Linux工具识别目标机器的方法
- en: The steps required to find the operating systems of the target machines (operating
    system fingerprinting)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找目标机器操作系统所需的步骤（操作系统指纹识别）
- en: Automated scanning with Striker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Striker进行自动扫描
- en: Anonymization with Nipe
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nipe进行匿名化
- en: To help you understand these concepts easily, we will use a virtual network
    as the target network.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您轻松理解这些概念，我们将使用虚拟网络作为目标网络。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'These are the technical requirements:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是技术要求：
- en: 'Minimal hardware requirements: 6 GB RAM, quad-core 2.4 GHz processor, and 500
    GB HDD'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低硬件要求：6 GB RAM，四核 2.4 GHz 处理器和 500 GB 硬盘
- en: Kali Linux 2018
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kali Linux 2018
- en: A virtual machine for testing, for example, Metasploitable or BadStore, and
    so on. (Refer to [Chapter 2](573e3579-5017-4c33-acd8-01e866ed66d8.xhtml), *Setting
    Up Your Test Lab*)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于测试的虚拟机，例如 Metasploitable 或 BadStore 等（参见[第2章](573e3579-5017-4c33-acd8-01e866ed66d8.xhtml)，*设置您的测试实验室*）
- en: Identifying the target machine
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别目标机器
- en: The tools included in this category are used to identify the target machines
    that can be accessed by a penetration tester. Before we start the identification
    process, we need to know our client's terms and agreements. If the agreements
    require us to hide penetration-testing activities, we need to conceal our activities.
    Stealth techniques may also be applied for testing the **Intrusion Detection System**
    (**IDS**) or **Intrusion Prevention System** (**IPS**) functionality. If there
    are no such requirements, we may not need to conceal our penetration-testing activities.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此类工具用于识别渗透测试人员可以访问的目标机器。在开始识别过程之前，我们需要了解客户的条款和协议。如果协议要求我们隐藏渗透测试活动，我们需要隐藏我们的活动。隐蔽技术也可以用于测试**入侵检测系统**（**IDS**）或**入侵预防系统**（**IPS**）的功能。如果没有这样的要求，我们可能不需要隐藏我们的渗透测试活动。
- en: ping
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ping
- en: '`ping` is the most famous tool that is used to check whether a particular host
    is available. The `ping` tool works by sending an **Internet Control Message Protocol**
    (**ICMP**) echo request packet to the target host. If the target host is available
    and the firewall is not blocking the ICMP echo request packet, it will reply with
    the ICMP echo reply packet.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping`是用于检查特定主机是否可用的最著名的工具。`ping`工具通过向目标主机发送**Internet控制消息协议**（**ICMP**）回显请求数据包来工作。如果目标主机可用且防火墙没有阻止
    ICMP 回显请求数据包，它将回复 ICMP 回显回复数据包。'
- en: The ICMP echo request and ICMP echo reply are two of the available ICMP control
    messages. For other ICMP control messages, you can refer to the following URL: [https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ICMP回显请求和ICMP回显回复是可用的ICMP控制消息之一。有关其他ICMP控制消息，请参阅以下网址：[https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages](https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages)。
- en: Although you can't find `ping` in the Kali Linux menu, you can open the console
    and type the `ping` command, along with its options.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您在Kali Linux菜单中找不到`ping`，但您可以打开控制台并输入`ping`命令以及其选项。
- en: 'To use `ping`, you can just type `ping` and the destination address, as shown
    in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`ping`，您只需输入`ping`和目标地址，如下面的屏幕截图所示：
- en: '![](img/5882d01e-65a8-4141-a511-2b5bfc104150.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5882d01e-65a8-4141-a511-2b5bfc104150.png)'
- en: In Kali Linux, by default, `ping` will run continuously until you press *Ctrl*
    + *C*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali Linux中，默认情况下，`ping`将持续运行，直到按下*Ctrl* + *C*。
- en: 'The `ping` tool has a lot of options, but the following are a few that are
    often used:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping`工具有很多选项，但以下是经常使用的一些选项：'
- en: '**The** `-c` **count**: This is the number of echo request packets to be sent.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`-c`** **计数**：这是要发送的回显请求数据包的数量。'
- en: '**The** `-I` **interface address**: This is the network interface of the source
    address. The argument may be a numeric IP address (such as `192.168.56.102`) or
    the name of the device (such as `eth0`). This option is required if you want to
    ping the IPv6 link-local address.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`-I`** **接口地址**：这是源地址的网络接口。参数可以是数字 IP 地址（如`192.168.56.102`）或设备的名称（如`eth0`）。如果要ping
    IPv6链路本地地址，则需要此选项。'
- en: '**The** `-s` **packet size**: This specifies the number of data bytes to be
    sent. The default is 56 bytes, which translates into 64 ICMP data bytes when combined
    with the 8 bytes of the ICMP header data.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`-s`** **数据包大小**：指定要发送的数据字节数。默认值为 56 字节，与 ICMP 头数据的 8 字节组合在一起，可以得到 64 个 ICMP
    数据字节。'
- en: Let's use the preceding information in practice.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前面的信息付诸实践。
- en: Suppose you are starting with internal penetration-testing work. The customer
    gave you access to their network using a LAN cable and they also gave you the
    list of target servers' IP addresses.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您要开始内部渗透测试工作。客户通过局域网电缆为您提供了他们网络的访问权限，并提供了目标服务器的 IP 地址列表。
- en: The first thing you would want to do before launching a full penetration-testing
    arsenal is to check whether these servers are accessible from your machine. You
    can use `ping` for this task.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动完整的渗透测试工具之前，您可能想要做的第一件事是检查这些服务器是否可以从您的机器访问。您可以使用`ping`来完成这项任务。
- en: 'The target server is located at `172.16.43.156`, while your machine has an
    IP address of `172.16.43.150`. To check the target server availability, you can
    give the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 目标服务器位于`172.16.43.156`，而您的机器的 IP 地址为`172.16.43.150`。要检查目标服务器的可用性，您可以给出以下命令：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Besides IP addresses, `ping` also accepts hostnames as the destination.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 IP 地址，`ping`还接受主机名作为目标。
- en: 'The following screenshot is the result of the preceding `ping` command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是前述`ping`命令的结果：
- en: '![](img/d932a749-c492-4bb2-9089-1532e50438fc.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d932a749-c492-4bb2-9089-1532e50438fc.png)'
- en: From the preceding screenshot, we know that one ICMP echo request packet was
    sent to the destination (IP address = `172.16.43.156`). Also, the sending host
    (IP address = `172.16.43.150`) received one ICMP echo reply packet. The round-trip
    time required was `.869 ms`, and there was no packet loss during the process.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们知道已向目的地（IP地址=`172.16.43.156`）发送了一个ICMP echo请求数据包。同时，发送主机（IP地址=`172.16.43.150`）收到了一个ICMP
    echo回复数据包。所需的往返时间为`.869 ms`，在整个过程中没有丢包。
- en: 'Let''s see the network packets that are transmitted and received by our machine.
    We are going to use Wireshark, a network protocol analyzer, on our machine to
    capture these packets, as shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的机器发送和接收的网络数据包。我们将在我们的机器上使用网络协议分析器Wireshark来捕获这些数据包，如下图所示：
- en: '![](img/9f2ce614-5024-4845-a39e-2eb550f5a864.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f2ce614-5024-4845-a39e-2eb550f5a864.png)'
- en: From the preceding screenshot, we can see that our host (`172.16.43.150`) sent
    one ICMP echo request packet to the destination host (`172.16.43.156`). Since
    the destination is alive and allows the ICMP echo request packet, it sent the
    ICMP echo reply packet back to our machine. We will cover *Wireshark* in more
    detail in the *Network sniffers* section in Chapter 9, *Privilege Escalation*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们可以看到我们的主机（`172.16.43.150`）向目标主机（`172.16.43.156`）发送了一个ICMP echo请求数据包。由于目标是活动的并允许ICMP
    echo请求数据包，它将ICMP echo回复数据包发送回我们的机器。我们将在第9章*特权提升*的*网络嗅探器*部分更详细地介绍*Wireshark*。
- en: 'If your target is using an IPv6 address, such as `fe80::20c:29ff:fe18:f08`,
    you can use the `ping6` tool to check its availability. You need to give the `-I`
    option for the command to work against the link-local address:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的目标使用IPv6地址，例如`fe80::20c:29ff:fe18:f08`，您可以使用`ping6`工具来检查其可用性。您需要为命令指定`-I`选项，以针对链路本地地址进行操作：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the packets sent to complete the `ping6` request:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了发送完成`ping6`请求的数据包：
- en: '![](img/0ea32c68-8b3c-4cef-9699-55f171770f7a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ea32c68-8b3c-4cef-9699-55f171770f7a.png)'
- en: From the preceding screenshot, we know that `ping6` is using the `ICMPv6` request
    and reply.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们知道`ping6`正在使用`ICMPv6`请求和回复。
- en: To block the `ping` request, the firewall can be configured to only allow the
    ICMP `echo` request packet from a specific host and to drop the packets sent from
    other hosts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要阻止`ping`请求，防火墙可以配置为仅允许来自特定主机的ICMP `echo`请求数据包，并丢弃从其他主机发送的数据包。
- en: fping
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: fping
- en: The difference between `ping` and `fping` is that the `fping` tool can be used
    to send a ping (ICMP echo) request to several hosts at once. You can specify several
    targets on the command line, or you can use a file containing the hosts to be
    pinged.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping`和`fping`之间的区别在于`fping`工具可以用来一次向多个主机发送ping（ICMP echo）请求。您可以在命令行上指定多个目标，也可以使用包含要ping的主机的文件。'
- en: In the default mode, `fping` works by monitoring the reply from the target host.
    If the target host sends a reply, it will be noted and removed from the target
    list. If the host doesn't respond within a certain time limit, it will be marked
    as `unreachable`. By default, `fping` will try to send three ICMP echo request
    packets to each target.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认模式下，`fping`通过监视目标主机的回复来工作。如果目标主机发送回复，将对其进行记录并从目标列表中删除。如果主机在一定时间内没有响应，将标记为`不可达`。默认情况下，`fping`将尝试向每个目标发送三个ICMP
    echo请求数据包。
- en: 'To access `fping`, you can use the console to execute the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问`fping`，可以使用控制台执行以下命令：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will display the description of usage and options available in `fping`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示`fping`中的用法和可用选项的描述。
- en: The following scenarios will give you an idea of `fping` usage.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下情景将让您了解`fping`的用法。
- en: 'If we want to know the alive hosts of `172.16.43.156`, `172.16.43.150`, and
    `172.16.43.155` at once, we can use the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要一次知道`172.16.43.156`、`172.16.43.150`和`172.16.43.155`的活动主机，我们可以使用以下命令：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the result of the preceding command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的结果：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can also generate the host list automatically without defining the IP addresses
    one by one and identifying the alive hosts. Let''s suppose we want to find the
    alive hosts in the `172.16.43.0/24` network; we can use the `-g` option and define
    the network to check, using the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以自动生成主机列表，而不需要逐个定义IP地址并识别活动主机。假设我们想要在`172.16.43.0/24`网络中找到活动主机；我们可以使用`-g`选项并定义要检查的网络，使用以下命令：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we want to change the number of ping attempts made to the target, we can
    use the `-r` option (retry limit) as shown in the following command line. By default,
    there are three ping attempts:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更改发送到目标的ping尝试次数，可以使用`-r`选项（重试限制），如下命令行所示。默认情况下，有三次ping尝试：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result of the command is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的结果如下：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The cumulative statistics can be displayed by employing the `-s` option (print
    cumulative statistics), as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`-s`选项（打印累积统计信息）显示累积统计信息，如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the result of the preceding command line:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令行的结果：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: hping3
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hping3
- en: The `hping3` tool is a command-line network-packet generator and analyzer tool.
    The capability to create custom network packets allows `hping3` to be used for
    TCP/IP and security testing, such as port scanning, firewall-rule testing, and
    network-performance testing.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`hping3`工具是一个命令行网络数据包生成器和分析器工具。创建自定义网络数据包的能力使`hping3`可以用于TCP/IP和安全测试，如端口扫描、防火墙规则测试和网络性能测试。'
- en: 'The following are several other uses of `hping3`, according to the developer:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据开发人员的说法，`hping3`还有以下几种用途：
- en: Testing firewall rules
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试防火墙规则
- en: Testing IDS
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试IDS
- en: Exploiting known vulnerabilities in the TCP/IP stack
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用TCP/IP堆栈中已知的漏洞
- en: To access `hping3`, go to the console and type `hping3`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问`hping3`，请转到控制台并键入`hping3`。
- en: You can give commands to `hping3` in several ways, via the command line, interactive
    shell, or script.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Without any given command-line options, `hping3` will send a null TCP packet
    to port `0`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to change to a different protocol, you can use the following options
    in the command line to define the protocol:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | Short option | Long option | Description |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| 1 | `-0` | `--raw-ip` | This sends raw IP packets |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| 2 | `-1` | `--icmp` | This sends ICMP packets |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| 3 | `-2` | `--udp` | This sends UDP packets |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| 4 | `-8` | `--scan` | This indicates the use of scan mode |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| 5 | `-9` | `--listen` | This indicates the use of listen mode |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: 'When using the TCP protocol, we can use the TCP packet without any flags (this
    is the default behavior) or we can give one of the following flag options:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | Option | Flag name |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| 1 | `-S` | `syn` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| 2 | `-A` | `ack` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| 3 | `-R` | `rst` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| 4 | `-F` | `fin` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| 5 | `-P` | `psh` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| 6 | `-U` | `urg` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: '| 7 | `-X` | `xmas: flags fin, urg, psh set` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: '| 8 | `-Y` | `ymas` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: Let's use `hping3` for several cases, as follows.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Send one ICMP echo request packet to a `192.168.56.101` machine. The options
    used are `-1` (for the ICMP protocol) and `-c 1` (to set the count to one packet):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the output of this command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: From the preceding output, we can identify that the target machine is alive,
    because it has replied to our ICMP echo request.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify this, we captured the traffic using `tcpdump` and the following screenshot
    shows the packets:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25cc7916-3d6e-4715-bfcc-57e48b1ef1e0.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: We can see that the target has responded with an ICMP echo reply packet.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Besides giving the options in the command line, you can also use `hping3` interactively.
    Open the console and type `hping3`. You will then see a prompt where you can type
    your Tcl commands.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: The following links are resources for Tcl: [http://www.invece.org/tclwise/](http://www.invece.org/tclwise/) and  [http://wiki.tcl.tk/](http://wiki.tcl.tk/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'For the preceding example, the following is the corresponding Tcl script:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open a command-line window and give the following command to get a response
    from the target server:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After that, open another command-line window to input the sending request.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the response received:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a53f30f2-3af0-492b-b7ef-79185a9a28c8.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'You can also use `hping3` to check for a firewall rule. Let''s suppose you
    have the following firewall rules:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Accept any TCP packets directed to port `22` (SSH)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accept any TCP packets related to an established connection
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop any other packets
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To check these rules, you can give the following command in `hping3`, in order
    to send an ICMP echo request packet:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following code is the result:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can see that the target machine has not responded to our ping probe.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Send a TCP packet with the SYN flag set to port `22`, and we will get the result
    shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1bbdb6f-f19d-4945-836e-d23f3541daea.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that the target machine's firewall
    allows our SYN packet to reach port `22`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check whether the UDP packet is allowed to reach port `22`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20077aed-0b61-48f6-8506-2358bdb76a65.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that the target machine's firewall
    does not allow our UDP packet to reach port `22`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: There are other things that you can do with `hping3`, but, in this chapter,
    we'll only discuss a small subset of its capabilities. If you want to learn more,
    you can consult the `hping3` documentation site at [http://wiki.hping.org](http://wiki.hping.org).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: OS fingerprinting
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we have established that the target machine is alive, we can then find
    out which operating system is used by the target machine. This method is commonly
    known as **Operating System** (**OS**) fingerprinting. There are two methods of
    doing OS fingerprinting: active and passive.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: In the active method, the tool sends network packets to the target machine and
    then analyzes the response it receives to determine the operating system of the
    target machine. The advantage of this method is that the fingerprinting process
    is fast. However, the disadvantage is that the target machine may notice our attempt
    to get its operating system's information.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: To overcome the active method's disadvantage, a passive method of OS fingerprinting
    exists. This method was pioneered by Michal Zalewsky when he released a tool called
    `p0f`. The major advantage of passive OS fingerprinting is that it does the work
    while reducing the interaction between the testing machine and the target, greatly
    increasing the stealth of the fingerprinting. The most significant disadvantage
    of the passive method is that the process will be slower than for the active method.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will describe a couple of tools that can be used for OS
    fingerprinting.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: p0f
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `p0f` tool is used to fingerprint an operating system passively. It can
    be used to identify an operating system on the following machines:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Machines that connect to your box (SYN mode; this is the default mode)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machines you connect to (`SYN` + `ACK` mode)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machines you cannot connect to (`RST`+ mode)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machines whose communications you can observe
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `p0f` tool works by analyzing the TCP packets sent during the network activities.
    Then, it gathers the statistics of special packets that are not standardized by
    default by any corporations. An example is that the Linux kernel uses a 64-byte
    ping datagram, whereas the Windows operating system uses a 32-byte ping datagram
    or the **Time To Live** (**TTL**) value. For Windows, the TTL value is `128`,
    while for Linux this TTL value varies among Linux distributions. This information
    is then used by `p0f` to determine the remote machine's operating system.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: When using the `p0f` tool included with Kali Linux, we were not able to fingerprint
    the operating system on a remote machine. We figured out that the `p0f` tool hadn't
    updated its fingerprint database. Unfortunately, we couldn't find the latest version
    of the fingerprint database. So, we used `p0f v3` (version 3.06b) instead. To
    use this version of `p0f`, just download the `TARBALL` file from [http://lcamtuf.coredump.cx/p0f3/releases/p0f-3.06b.tgz](http://lcamtuf.coredump.cx/p0f3/releases/p0f-3.06b.tgz)
    and compile the code by running the `build.sh` script. By default, the fingerprint
    database file's (`p0f.fp`) location is in the current directory. If you want to
    change the location, for example, to `/etc/p0f/p0f.fp`, you need to change this
    in the `config.h` file and recompile `p0f`. If you don't change the location,
    you may need to use the `-f` option to define the fingerprint database file location.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'To access `p0f`, open a console and type `p0f -h`. This will display its usage
    and options description. Let''s use `p0f` to identify the operating system used
    in a remote machine we are connecting to. Just type the following command in your
    console:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will read the fingerprint database from the file and save the log information
    to the `p0f.log` file. It will then display the following information:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next, you need to generate network activities involving a TCP connection, such
    as browsing the remote machine or letting the remote machine connect to your machine.
    For the purposes of this demonstration, a connection to the HTTP site on the 2
    machine was established.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: If `p0f` has successfully fingerprinted the operating system, you will see information
    on the remote machine's operating system in the console and in the log file (`p0f.log`).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the abridged information displayed to the console:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows the content of the log file:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41626c39-148b-4afa-8380-8c1ff649db33.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: Based on the preceding result, we know that the target is a `Linux 2.6` machine.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the information from the target machine:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3389df6-946c-43f7-aeb6-0a148c974037.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: By comparing this information, we know that `p0f` got the OS information correctly.
    The remote machine is using Linux Version 2.6.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: You can stop `p0f` by pressing the *Ctrl* + *C* key combination.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Introducing port scanning
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest definition of port scanning is that it is a method used to determine
    the state of the **Transmission Control Protocol** (**TCP**) and **User Datagram
    Protocol** (**UDP**) ports on the target machines. An open port may mean that
    there is a network service listening on the port and the service is accessible,
    whereas a closed port means that there is no network service listening on that
    port.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: After getting the port's state, an attacker will then check the version of the
    software used by the network service and find out the vulnerabilities of that
    version of software. For example, suppose that server A has web-server software
    version 1.0\. A few days ago, there was a security advisory released. The advisory
    gave information about the vulnerability in web-server software Version 1.0\.
    If an attacker finds out about server A's web server and is able to get the version
    information, the attacker can use this information to attack the server. This
    is just a simple example of what an attacker can do after getting information
    about the services available on the machine.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Before we dig into the world of port scanning, let's discuss a little bit of
    TCP/IP protocol theory.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Understanding TCP/IP protocol
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the TCP/IP protocol suite, there are dozens of different protocols, but the
    most important ones are TCP and IP. IP provides addressing, datagram routing,
    and other functions for connecting one machine to another, while TCP is responsible
    for managing connections and provides reliable data transport between processes
    on two machines. IP is located in the network layer (layer 3) in the **Open Systems
    Interconnection** (**OSI**) model, whereas TCP is located in the transport layer
    (layer 4) of OSI.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Besides TCP, the other key protocol in the transport layer is UDP. You may be
    asking what the differences between these two protocols are.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, TCP has the following characteristics:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '**This is a connection-oriented protocol**: Before TCP can be used for sending
    data, the client and the server that want to communicate must establish a TCP
    connection using a three-way handshake mechanism, as follows:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client initiates the connection by sending a packet containing a SYN (synchronize)
    flag to the server. The client also sends the **Initial Sequence Number** (**ISN**)
    in the sequence number field of the SYN segment. This ISN is chosen randomly.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server replies with its own SYN segment containing its ISN. The server acknowledges
    the client's SYN by sending an ACK (acknowledgment) flag containing the client
    `ISN` + `1` value.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client acknowledges the server by sending an ACK flag containing the server
    ISN + `1`. At this point, the client and the server can exchange data.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To terminate the connection, the TCP must follow this mechanism:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client sends a packet containing a `FIN` (finish) flag set.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server sends an `ACK` (acknowledgment) packet to inform the client that
    the server has received the FIN packet.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the application server is ready to close, the server sends a FIN packet.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client then sends the `ACK` packet to acknowledge receiving the server's
    `FIN` packet. In a normal case, each side (client or server) can terminate its
    end of the communication independently by sending the `FIN` packet.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**This is a reliable protocol**: TCP uses a sequence number and an acknowledgment
    to identify packet data. The receiver sends an acknowledgment when it has received
    the packet. When a packet is lost, TCP will automatically retransmit it if it
    hasn''t received any acknowledgment from the receiver. If the packets arrive out
    of order, TCP will reorder them before submitting them to the application.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications that need to transfer files or important data use a TCP, such as
    **Hypertext Transport Protocol** (**HTTP**) and **File Transfer Protocol** (**FTP**).
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要传输文件或重要数据的应用程序使用TCP，例如**超文本传输协议**（**HTTP**）和**文件传输协议**（**FTP**）。
- en: 'UDP has opposing characteristics to TCP, which are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: UDP具有与TCP相反的特性，如下：
- en: This is a connectionless protocol. To send data, the client and the server don't
    need to establish a UDP connection first.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种无连接的协议。要发送数据，客户端和服务器不需要首先建立UDP连接。
- en: It will do its best to send a packet to the destination, but if a packet is
    lost, UDP will not automatically resend it. It is up to the application to retransmit
    the packet.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会尽力将数据包发送到目的地，但如果数据包丢失，UDP不会自动重新发送。由应用程序重新传输数据包。
- en: Applications that can bear the loss of some packets, such as video streaming
    and other multimedia applications, use UDP. The other well-known applications
    that use UDP are **Domain Name System** (**DNS**), **Dynamic Host Configuration
    Protocol** (**DHCP**), and **Simple Network Management Protocol** (**SNMP**).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 可以承受一些数据包丢失的应用程序，例如视频流和其他多媒体应用程序，使用UDP。使用UDP的其他知名应用程序包括**域名系统**（**DNS**）、**动态主机配置协议**（**DHCP**）和**简单网络管理协议**（**SNMP**）。
- en: 'For applications to be able to communicate correctly, the transport layer uses
    addressing, called ports. A software process listens on a particular port number
    on the server side, and the client machine sends data to that server port to be
    processed by the server application. The port numbers have a 16-bit address, and
    the number can range from `0` to `65,535`. To avoid a chaotic usage of port numbers,
    there are universal agreements on port number ranges, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序能够正确通信，传输层使用称为端口的寻址。软件进程在服务器端的特定端口号上监听，并且客户端机器将数据发送到该服务器端口，以便由服务器应用程序处理。端口号有一个16位地址，数字范围从`0`到`65,535`。为了避免端口号的混乱使用，有关端口号范围的通用协议如下：
- en: '**Well-known port numbers (**`0` **to** `1,023`**)**: Port numbers in this
    range are reserved port numbers and are usually used by the server processes that
    are run by a system administrator or privileged user. Examples of the port numbers
    used by an application server are SSH (port `22`), and HTTP (port `80`), HTTPS
    (port `443`).'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**众所周知的端口号（**`0` **至** `1,023`**）**：此范围内的端口号是保留端口号，通常由系统管理员或特权用户运行的服务器进程使用。应用服务器使用的端口号示例包括SSH（端口`22`）和HTTP（端口`80`）、HTTPS（端口`443`）。'
- en: '**Registered port numbers (**`1,024` **to** `49,151`**)**: Users can send a
    request to the **Internet Assigned Number Authority** (**IANA**) to reserve one
    of these port numbers for their client-server application.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册端口号（**`1,024` **至** `49,151`**）**：用户可以向**互联网编号分配机构**（**IANA**）发送请求，为他们的客户端-服务器应用程序保留其中一个端口号。'
- en: '**Private or dynamic port numbers (**`49,152` **to** `65,535`**)**: Anyone
    can use the port numbers in this range without registering them with the IANA.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有或动态端口号（**`49,152` **至** `65,535`**）**：任何人都可以使用此范围内的端口号，而无需向IANA注册。'
- en: After discussing the differences between TCP and UDP in brief, let's describe
    TCP and UDP message formats.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在简要讨论了TCP和UDP之间的区别之后，让我们描述一下TCP和UDP消息格式。
- en: Understanding TCP and UDP message formats
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解TCP和UDP消息格式
- en: 'A TCP message is called a segment. A TCP segment consists of a header and a
    data section. The TCP header is often 20 bytes long (without TCP options). It
    can be described using the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: TCP消息称为段。TCP段由头部和数据部分组成。TCP头通常为20个字节长（不包括TCP选项）。可以使用以下屏幕截图描述TCP头：
- en: '![](img/5d90b6e9-1c4f-4cc3-bb4a-5c50dd27e726.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d90b6e9-1c4f-4cc3-bb4a-5c50dd27e726.png)'
- en: 'The following is a brief description of each field:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对每个字段的简要描述：
- en: The **Source Port** and the **Destination Port** have a length of 16 bits each.
    The source port is the port on the sending machine that transmits the packet,
    while the destination port is the port on the target machine that receives the
    packet.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源端口**和**目标端口**各自的长度为16位。源端口是发送机上传输数据包的端口，而目标端口是接收数据包的目标机器上的端口。'
- en: The **Sequence Number (32 bits)**, in a normal transmission, is the sequence
    number of the first byte of data of this segment.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列号（32位）**在正常传输中，是此段数据的第一个字节的序列号。'
- en: The **Acknowledgment Number (32 bits)** contains the sequence number from the
    sender, increased by one.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认号（32位）**包含发送方的序列号，增加了一个。'
- en: '**H.Len. (4 bits)** is the size of the TCP header in 32-bit words.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**H.Len.（4位）**是TCP头的大小，以32位字为单位。'
- en: '**Rsvd.** is reserved for future use. It is a 4-bit field and must be zero.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rsvd.** 保留供将来使用。它是一个4位字段，必须为零。'
- en: 'The **Control Bits** (control flags) contain eight 1-bit flags. In the original
    specification (RFC 793; the RFC can be downloaded from [http://www.ietf.org/rfc/rfc793.txt](http://www.ietf.org/rfc/rfc793.txt)),
    TCP only has six flags, as follows:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制位**（控制标志）包含八个1位标志。在原始规范（RFC 793；可以从[http://www.ietf.org/rfc/rfc793.txt](http://www.ietf.org/rfc/rfc793.txt)下载RFC）中，TCP只有六个标志，如下：'
- en: '**SYN**: This flag synchronizes the sequence numbers. This bit is used during
    session establishment.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SYN**：此标志同步序列号。此位在会话建立期间使用。'
- en: '**ACK**: This flag indicates that the **Acknowledgment** field in the TCP header
    is significant. If a packet contains this flag, it means that it is an acknowledgement
    to the previously received packet.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ACK**：此标志表示TCP头中的**确认**字段是重要的。如果数据包包含此标志，这意味着它是对先前接收的数据包的确认。'
- en: '**RST**: This flag resets the connection.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RST**：此标志重置连接。'
- en: '**FIN**: This flag indicates that the party has no more data to send. It is
    used to tear down a connection gracefully.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FIN**：此标志表示一方没有更多数据要发送。它用于优雅地终止连接。'
- en: '**PSH**: This flag indicates that the buffered data should be pushed immediately
    to the application rather than wait for more data.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PSH**：此标志表示缓冲数据应立即推送到应用程序，而不是等待更多数据。'
- en: '**URG**: This flag indicates that the **Urgent Pointer** field in the TCP header
    is significant. The urgent pointer refers to important data-sequence numbers.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URG**：这个标志表示TCP头部中的**紧急指针**字段是重要的。紧急指针指的是重要的数据序列号。'
- en: 'Later on, RFC 3168 (the RFC can be downloaded from [http://www.ietf.org/rfc/rfc3168.txt](http://www.ietf.org/rfc/rfc3168.txt))
    added two more extended flags, as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，RFC 3168（RFC可以从[http://www.ietf.org/rfc/rfc3168.txt](http://www.ietf.org/rfc/rfc3168.txt)下载）添加了两个扩展标志，如下所示：
- en: '**Congestion Window Reduced (CWR)**: This is used by the data sender to inform
    the data receiver that the queue of outstanding packets to be sent has been reduced
    due to network congestion'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥塞窗口减小（CWR）**：这是数据发送方用来通知数据接收方由于网络拥塞而减少了待发送的未决数据包队列'
- en: '**Explicit Connection Notification-Echo (ECN-Echo)**: This indicates that the
    network connection is experiencing congestion'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显式连接通知-回显（ECN-Echo）**：这表示网络连接正在经历拥塞'
- en: '**Window Size (16 bits)** specifies the number of bytes the receiver is willing
    to accept'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**窗口大小（16位）**指定接收方愿意接受的字节数'
- en: '**Checksum (16 bits)** is used for the error checking of the TCP header and
    data'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**校验和（16位）**用于对TCP头部和数据进行错误检查'
- en: The flags can be set independently of each other.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 标志可以独立设置。
- en: To get more information on TCP, consult RFC 793 and RFC 3168.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关TCP的更多信息，请参阅RFC 793和RFC 3168。
- en: 'When performing port scanning on the TCP port using a SYN packet sent to the
    target machine, an attacker might face the following behaviors:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用SYN数据包对目标机器的TCP端口进行端口扫描时，攻击者可能会面临以下行为：
- en: The target machine responds with the SYN+ACK packet. If we receive this packet,
    we know that the port is open. This behavior is defined in the TCP specification
    (RFC 793), which states that the SYN packet must be responded to with the SYN
    + ACK packet if the port is open, without considering the SYN packet payload.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标机器以SYN+ACK数据包回应。如果我们收到这个数据包，我们就知道端口是开放的。这种行为在TCP规范（RFC 793）中定义，规定如果端口是开放的，SYN数据包必须用SYN
    + ACK数据包回应，而不考虑SYN数据包的有效负载。
- en: The target machine sends back a packet with the RST and ACK bits set. This means
    that the port is closed.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标机器发送一个设置了RST和ACK位的数据包。这意味着端口是关闭的。
- en: The target machine sends an ICMP message, such as `ICMP Port Unreachable`, which
    means that the port is not accessible to us, most likely because it is blocked
    by the firewall.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标机器发送ICMP消息，比如`ICMP端口不可达`，这意味着该端口对我们不可访问，很可能是因为防火墙阻止了它。
- en: The target machine sends nothing back to us. This may indicate that there is
    no network service listening on that port or that the firewall is blocking our
    SYN packet silently.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标机器对我们没有任何回应。这可能表示该端口上没有网络服务监听，或者防火墙正在默默地阻止我们的SYN数据包。
- en: From a pentester's point of view, interesting behavior is when the port is open,
    because this means that there is a service available on that port that can be
    tested further.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从渗透测试人员的角度来看，端口开放时的行为是有趣的，因为这意味着该端口上有一个可以进一步测试的服务。
- en: If you conduct a port-scanning attack, you should understand the various TCP
    behaviors listed in order to be able to attack more effectively.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进行端口扫描攻击，您应该了解各种TCP行为的列表，以便能够更有效地进行攻击。
- en: 'When scanning for UDP ports, you will see different behaviors; these will be
    explained later on. Before we go on to see various UDP behaviors, let''s see the
    UDP header format first, as shown in the following screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在扫描UDP端口时，您将看到不同的行为；这些将在稍后解释。在我们继续看各种UDP行为之前，让我们先看一下UDP头部格式，如下图所示：
- en: '![](img/e576d8b1-6b82-466e-bda0-d05398d3f967.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e576d8b1-6b82-466e-bda0-d05398d3f967.png)'
- en: The following is a brief explanation of each field in the UDP header depicted
    in the preceding figure.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是UDP头部中每个字段的简要解释，如前图所示。
- en: 'Just like the TCP header, the UDP header also has the **Source Port** and the
    **Destination Port**, each of which has a length of 16 bits. The source port is
    the port on the sending machine that transmits the packet, while the destination
    port is the port on the target machine that receives the packet:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 就像TCP头部一样，UDP头部也有**源端口**和**目标端口**，每个端口长度为16位。源端口是发送数据包的发送机器上的端口，而目标端口是接收数据包的目标机器上的端口。
- en: '**UDP Length** is the length of the UDP header'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UDP长度**是UDP头部的长度'
- en: '**UDP Checksum (16 bits)** is used for the error checking of the UDP header
    and data'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UDP校验和（16位）**用于对UDP头部和数据进行错误检查'
- en: Note that there are no sequence-number, acknowledgement-number, and control-bits
    fields in the UDP header.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在UDP头部中没有序列号、确认号和控制位字段。
- en: 'During a port-scanning activity to the UDP port on the target machine, an attacker
    might face the following behaviors:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在对目标机器的UDP端口进行端口扫描活动时，攻击者可能会面临以下行为：
- en: The target machine responds with a UDP packet. If we receive this packet, we
    know that the port is open.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标机器以UDP数据包回应。如果我们收到这个数据包，我们就知道端口是开放的。
- en: The target machine sends an ICMP message, such as `ICMP Port Unreachable`. It
    can be concluded that the port is closed. However, if the message sent is not
    an ICMP unreachable message, it means that the port is filtered by the firewall.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标机器发送ICMP消息，比如`ICMP端口不可达`。可以得出结论，端口是关闭的。然而，如果发送的消息不是ICMP不可达消息，那么意味着端口被防火墙过滤了。
- en: 'The target machine sends nothing back to us. This may indicate one of the following
    situations:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标机器对我们没有任何回应。这可能表示以下情况之一：
- en: The port is closed
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口是关闭的
- en: The inbound UDP packet is blocked
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入站UDP数据包被阻止
- en: The response is blocked
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应被阻止
- en: UDP port scanning is less reliable when compared to TCP port scanning because,
    sometimes, the UDP port is open but the service listening on that port is looking
    for a specific UDP payload. Hence, the service will not send any replies.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 与TCP端口扫描相比，UDP端口扫描的可靠性较低，因为有时UDP端口是开放的，但在该端口上监听的服务正在寻找特定的UDP有效负载。因此，服务将不会发送任何回复。
- en: Now that we have briefly described port-scanning theory, let's put this into
    practice. In the following sections, we will look at several tools that can be
    used to help us perform network scanning.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经简要描述了端口扫描理论，让我们将其付诸实践。在接下来的几节中，我们将看看几个工具，可以帮助我们进行网络扫描。
- en: For the practical scenarios in this chapter, we will utilize a Metasploitable
    virtual machine, as explained in [Chapter 2](573e3579-5017-4c33-acd8-01e866ed66d8.xhtml),
    *Setting up your Test Lab*, as our target machine. It has an IP address of `172.16.43.156`,
    while our attacking machine has an IP address of `172.16.43.150`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的实际场景中，我们将利用一个Metasploitable虚拟机作为我们的目标机器。它的IP地址是`172.16.43.156`，而我们的攻击机器的IP地址是`172.16.43.150`。
- en: The network scanner
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络扫描仪
- en: In this section, we will look at several tools that can be used to find open
    ports, fingerprint the remote operating system, and enumerate the services on
    the remote machine.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看几个工具，可以用来查找开放端口、指纹远程操作系统，并枚举远程机器上的服务。
- en: Service enumeration is a method that is used to find the service version that
    is available on a particular port on the target system. This version information
    is important because, with this information, the penetration tester can search
    for security vulnerabilities that exist for that software version.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 服务枚举是一种用于查找目标系统上特定端口上可用服务版本的方法。这个版本信息很重要，因为有了这个信息，渗透测试人员可以搜索存在于该软件版本的安全漏洞。
- en: While standard ports are often used, sometimes systems administrators will change
    the default ports for some services. For example, an SSH service may be bound
    to port `22` (as a convention), but a system administrator may change it to be
    bound to port `2222`. If the penetration tester only does a port scan to the common
    port for SSH, it may not find that service. The penetration tester will also have
    difficulties when dealing with proprietary applications running on non-standard
    ports. By using the service enumeration tools, these two problems can be mitigated,
    so there is a chance that the service can be found, regardless of the port it
    is bound to.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常使用标准端口，但有时系统管理员会更改某些服务的默认端口。例如，SSH服务可能绑定到端口`22`（作为约定），但系统管理员可能会将其更改为绑定到端口`2222`。如果渗透测试人员只对SSH的常用端口进行端口扫描，可能无法找到该服务。当处理运行在非标准端口上的专有应用程序时，渗透测试人员也会遇到困难。通过使用服务枚举工具，这两个问题可以得到缓解，因此有可能找到服务，无论它绑定到哪个端口。
- en: Nmap
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap
- en: Nmap is a port scanner that is comprehensive, feature- and fingerprint-rich,
    and widely used by the IT security community. It is written and maintained by
    Fyodor. It is a must-have tool for a penetration tester because of its quality
    and flexibility.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap是一个全面的、功能丰富的、广泛被IT安全社区使用的端口扫描器。它由Fyodor编写和维护。由于其质量和灵活性，它是渗透测试人员必备的工具。
- en: 'Besides being used as a port scanner, Nmap has several other capabilities,
    as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用作端口扫描器外，Nmap还具有以下几个功能：
- en: '**Host discovery**: Nmap can be used to find live hosts on the target systems.
    By default, Nmap will send an ICMP echo request, a TCP SYN packet to port `443`,
    a TCP ACK packet to port `80`, and an ICMP timestamp request to carry out host
    discovery.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机发现：Nmap可以用来在目标系统上找到活动的主机。默认情况下，Nmap将发送一个ICMP回显请求，一个TCP SYN数据包到端口`443`，一个TCP
    ACK数据包到端口`80`，以及一个ICMP时间戳请求来进行主机发现。
- en: '**Service/version detection**: After Nmap has discovered the ports, it can
    further check for the service protocol, the application name, and the version
    number used on the target machine.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务/版本检测：在Nmap发现端口后，它可以进一步检查目标机器上使用的服务协议、应用程序名称和版本号。
- en: '**Operating system detection**: Nmap sends a series of packets to the remote
    host, and examines the responses. Then, it compares these responses with its operating
    system fingerprint database and prints out the details if there is a match. If
    it is not able to determine the operating system, Nmap will provide a URL to which
    you can submit the fingerprint to update its operating system fingerprint database.
    Of course, you should submit the fingerprint if you know the operating system
    used on the target system.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统检测：Nmap向远程主机发送一系列数据包，并检查响应。然后，它将这些响应与其操作系统指纹数据库进行比较，并在有匹配时打印出详细信息。如果它无法确定操作系统，Nmap将提供一个URL，您可以提交指纹以更新其操作系统指纹数据库。当然，如果您知道目标系统使用的操作系统，应该提交指纹。
- en: '**Network traceroute**: This is performed to determine the port and protocol
    that are most likely to reach the target system. Nmap traceroute starts with a
    high value of TTL and decrements it until the TTL value reaches zero.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络路由跟踪：这是为了确定最有可能到达目标系统的端口和协议。Nmap路由跟踪从一个较高的TTL值开始，并递减直到TTL值达到零。
- en: '**Nmap Scripting Engine**: With this feature, Nmap can be extended. If you
    want to add a check that is not included with the default Nmap, you can do so
    by writing the check using the Nmap scripting engine. Currently, there are checks
    for vulnerabilities in network services and for enumerating resources on the target
    system.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nmap脚本引擎：有了这个功能，Nmap可以被扩展。如果您想添加一个默认Nmap中没有包含的检查，可以使用Nmap脚本引擎编写检查。目前，有检查网络服务漏洞和枚举目标系统资源的功能。
- en: 'It is good practice to always check for new versions of Nmap. If you find the
    latest version of Nmap that is available for Kali Linux, you can update your Nmap
    by issuing the following commands:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 始终检查Nmap的新版本是一个好习惯。如果您找到了适用于Kali Linux的最新版本的Nmap，可以通过发出以下命令来更新您的Nmap：
- en: '[PRE19]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To start Nmap, you can navigate to Applications and then to Information Gathering.
    You can also start Nmap by going to the console to execute the following command:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动Nmap，可以转到应用程序，然后转到信息收集。您也可以通过转到控制台来执行以下命令来启动Nmap：
- en: '[PRE20]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will display all of the Nmap options with their descriptions.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示所有Nmap选项及其描述。
- en: A user who is new to Nmap will find the available options quite overwhelming.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, you only need one option to scan for the remote machine. That
    option is your target IP address or hostname, if you have set up the DNS correctly.
    This is done with the following command:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is the result of the scan without any other options:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: From the preceding result, we can see that the target machine is very vulnerable
    to attack because it has many open ports.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we continue to use Nmap, let''s take a look at the port states that
    can be identified by Nmap. There are six port states that are recognized by Nmap,
    as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '**Open**: This means that there is an application accepting a TCP connection,
    UDP datagram, or SCTP association.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed**: This means that although the port is accessible, there is no application
    listening on the port.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filtered**: This means that Nmap can''t determine whether the port is open
    or not because there is a packet-filtering device blocking the probe to reach
    the target.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unfiltered**: This means that the port is accessible, but Nmap cannot determine
    whether it is open or closed.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open|Filtered**: This means that Nmap is unable to determine whether a port
    is open or filtered. This happens when a scan of open ports doesn''t give a response.
    It can be achieved by setting the firewall to drop packets.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed|Filtered**: This means Nmap is unable to determine whether a port
    is closed or filtered.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After describing the port states, we will describe several options that are
    commonly used during penetration testing, and, after that, we will use those options
    in practice.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Nmap target specification
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap will treat everything on the command line that isn't an option or option
    argument as a target host specification. We suggest that you use the IP address
    specification instead of the hostname. By using the IP address, Nmap doesn't need
    to do DNS resolution first. This will speed up the port-scanning process.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'In the current version, Nmap supports the following IPv4 address specifications:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: It supports a single host, such as `172.16.43.156`.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports a whole network of adjacent hosts by using the CIDR notation, such
    as `172.16.43.0/24`. This specification will include 256 IP addresses ranging
    from `172.16.43.0` to `172.16.43.255`.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It supports an octet range addressing, such as `172.16.2-4,6.1`. This addressing
    will include four IP addresses: `172.16.2.1`, `172.16.3.1`, `172.16.4.1`, and
    `172.16.6.1`.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports multiple host specifications, such as `172.16.43.1 172.168.3-5,9.1`.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the IPv6 address, Nmap only supports a fully qualified IPv6 format and hostname,
    such as `fe80::a8bb:ccff:fedd:eeff%eth0`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Besides getting the target specification from the command line, Nmap also accepts
    a target definition from a text file by using the `-iL <inputfilename>` option.
    This option is useful if we already have the IP addresses from another program.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the entries in that file use the Nmap-supported target-specification
    format. Each entry must be separated by spaces, tabs, or a new line.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is a sample of that file:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, let's scan a network for `172.16.430/24`. We want to see the packets sent
    by Nmap. To monitor the packets sent, we can use a packet-capture utility, such
    as `tcpdump`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a console and type the following command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `172.16.43.150` IP address belongs to our machine, which launches Nmap.
    You need to adjust it to your configuration.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Open another console on the same machine and type the following command:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `tcpdump` console, you will see the following packet:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: From the preceding packet information, we know that the attacking machine sent
    a packet with a SYN flag set from port `49270` to the target machine port `23`
    (Telnet). The SYN flag is set by default if Nmap is run by a privileged user,
    such as `root` in Kali Linux.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a packet sent by the attacking machine to other
    machines and ports on the target network:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c288704-bc73-47b4-97be-79bf2b971c5e.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: 'If the remote machine responds, the response packet will look like the following
    code:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that the flag sent is denoted by the character `R`, which is reset. It
    means that port `1720` in the target machine is closed. We can verify this with
    the previous Nmap result.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if the port is open, you will see the following network traffic:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can see that the packet in the preceding code is to acknowledge the sequence
    number from the previous packet displayed. This packet has an acknowledgement
    number of `239440323`, while the previous packet had a sequence number of `239440322`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Nmap TCP scan options
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to use most of the TCP scan options, Nmap needs a privileged user
    (a root-level account in the Unix world or an administrator-level account in the
    Windows world). This is used to send and receive raw packets. By default, Nmap
    will use a TCP SYN scan, but if Nmap doesn''t have a privileged user, it will
    use the TCP connect scan. The various scans used by Nmap are as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '**TCP connect scan (**`-sT`**)**: This option will complete the three-way handshake
    with each target port. If the connection succeeds, the port is considered open.
    As a result of the need to do a three-way handshake for each port, this scan type
    is slow and it will most likely be logged by the target. This is the default scan
    option used if Nmap is run by a user who doesn''t have any privileges.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SYN scan (**`-sS`**)**: This option is also known as **half-open** or **SYN
    stealth**. With this option, Nmap sends a SYN packet and then waits for a response.
    A SYN/ACK response means that the port is listening, while an RST/ACK response
    means that the port is not listening. If there is no response or an ICMP-unreachable
    error-message response, the port is considered to be filtered. This scan type
    can be performed quickly, and, because the three-way handshake is never completed,
    it is unobtrusive and stealthy. This is the default scan option if you run Nmap
    as a privileged user.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP NULL scan (**`-sN`**), FIN scan (**`-sF`**), and XMAS scan (**`-sX`**)**:
    The `NULL` scan doesn''t set any control bits. The FIN scan only sets the FIN
    flag bit, and the `XMAS` scan sets the FIN, `PSH`, and URG flags. If an RST packet
    is received as a response, the port is considered closed, while no response means
    that the port is open/filtered.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP Maimon scan (**`-sM`**)**: The TCP Maimon scan was discovered by Uriel
    Maimon. A scan of this type will send a packet with the FIN/ACK flag bit set.
    BSD-derived systems will drop the packet if the port is open, and will respond
    with RST if the port is closed.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP ACK scan (**`-sA`**)**: This scan type is used to determine whether a
    firewall is stateful or not, and which ports are filtered. A network packet of
    this type only sets the ACK bit. If RST is returned, it means that the target
    is unfiltered.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP Window scan (**`-sW`**)**: This scan type works by examining the TCP
    Window field of the RST packet''s response. An open port will have a positive
    **TCP Window** value, while a closed port will have a zero TCP Window value.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP Idle scan (**`-sI`**)**: Using this technique, no packets are sent to
    the target by your machine; instead, the scan will bounce off to a zombie host
    you specify. An IDS will report the zombie as the attacker.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap also supports you in creating your own custom TCP scan by giving you the
    option of **scanflags**. The argument to that option can be numerical, such as
    `9` for PSH and FIN, or symbolic names. Just put together any combination of URG,
    ACK, PSH, RST, SYN, FIN, ECE, CWR, ALL, and NONE in any order; for example, `--scanflags
    URGACKPSH` will set the flags URG, ACK, and PSH.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling host discovery
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a host is blocking a ping request, Nmap may detect that the host is not active;
    so, Nmap may not perform heavy probing, such as port scanning, version detection,
    and operating system detection. To overcome this, Nmap has a feature for disabling
    host discovery. With this option, Nmap will assume that the target machine is
    available and will perform heavy probing against that machine.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: This option is activated using the `-Pn` option.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Nmap UDP scan options
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the TCP scan has many types of scans, the UDP scan only has one type,
    which is the UDP scan (`-sU`). Even though the UDP scan is less reliable than
    the TCP scan, as a penetration tester, you should not ignore this scan, because
    there may be interesting services located on these UDP ports.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: The biggest problem with the UDP scan is how to perform the scan quickly. A
    Linux kernel limits the sending of the `ICMP Port Unreachable` message to one
    message per second. Doing a UDP scan of 65,536 ports to a machine will take more
    than 18 hours to complete.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'To help mitigate this problem, there are several methods that can be used,
    as follows:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Running the UDP scan in parallel
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning the most popular ports first
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning behind the firewall
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the `--host-timeout` option to skip slow hosts
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These methods can help to decrease the time required for doing UDP port scans.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a scenario where we want to find which UDP ports are open on
    the target machine. To speed up the scanning process, we will only check for ports
    `53` (DNS) and `161` (SNMP). The following is the command used to do this:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is the result of this command:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Nmap port specification
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the default configuration, Nmap will only scan randomly the 1,000 most common
    ports for each protocol. The `nmap-services` file contains a popularity score
    for the selection of the top ports.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'To change that configuration, Nmap provides several options:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '`-p` **port range**: This scans only the defined ports. To scan ports `1` to
    `1024`, the command is `-p 1-1024`. To scan ports `1` to `65535`, the command
    is `-p-`.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-F` **(fast)**: This will scan only 100 common ports.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r` **(don''t randomize port)**: This option will set sequential port scanning
    (from lowest to highest).'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--top-ports <1 or greater>`: This option will only scan the `N` highest-ratio
    ports found in the `nmap-service` file.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To scan for ports `22` and `25` using the TCP NULL scan method, you can use
    the following command:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following command lines are the result:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following are the packet''s dumped snippets:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'From the packets displayed in the preceding code, we can see the following:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: In the first and second packets, the attacking machine checks whether port `22`
    on the target machine is open. After a period of time, it checks port `25` on
    the target machine.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the third and fourth packets, the attacking machine checks whether port `25`
    on the target machine is open. After a period of time, it checks port `22` on
    the target machine.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After waiting for some time, as there is still no response from the target machine,
    Nmap concludes that those two ports are open or filtered.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap output options
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Nmap result can be saved to an external file. This option is useful if you
    want to process Nmap result with other tools. Even if you save the output to a
    file, Nmap still displays the result on the screen.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap supports several output formats, as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '**Interactive output**: This is a default output format, and the result is
    sent to the standard output.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Normal output (**`-oN`**)**: This format is similar to the interactive output,
    but it doesn''t include the runtime information and warnings.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XML output (**`-oX`**)**: This format can be converted to an HTML format,
    parsed by the Nmap graphical user interface (GUI), or imported to the database.
    We suggest you use this output format as much as you can.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grepable output (**`-oG`**)**: This format is deprecated, but it is still
    quite popular. Grepable output consists of comments (lines starting with a pound
    sign (`#`)) and target lines. A target line includes a combination of six labeled
    fields that are separated by tabs and followed by a colon. The fields are `Host`,
    `Ports`, `Protocols`, `Ignored State`, `OS`, `Seq Index`, `IP ID Seq`, and `Status`.
    We sometimes use this output if we want to process the Nmap output using the UNIX
    commands, such as `grep` and `awk`.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the `-oA` option to save Nmap results in the three formats at once
    (normal, XML, and grepable).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: 'To save a scan result to an XML file (`myscan.xml`), use the following command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following is a snippet of the XML file:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For brevity purposes, a number of the ports have been removed from the previous
    snippet. In the XML output, you will see each port that Nmap scans against. The
    following shows each of the ports being scanned separately and what the response
    is. Again, for brevity''s sake, all of the ports have not been included:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The XML output is a bit daunting to look at. To make it easier, you can convert
    the Nmap XML file to HTML. This allows you to have clean-looking output for reporting
    purposes, as some of the non-technical personnel you may report to may not be
    used to viewing raw outputs. To convert the XML file, you can use the `xsltproc`
    program. The following command is used to convert the XML file to an HTML file:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following is a part of the HTML report, as displayed by the Firefox ESR
    browser included in Kali Linux:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85f43d2b-f099-4327-8fec-0994fc3f867c.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
- en: 'If you want to process the Nmap XML output to your liking, there are several
    programming language generic XML libraries that you can use for this purpose.
    Also, there are several libraries specifically developed to work with an Nmap
    output:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '**Perl**: Nmap-Parser ([http://search.cpan.org/dist/Nmap-Parser/](http://search.cpan.org/dist/Nmap-Parser/))'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python**: python-nmap ([http://xael.org/norman/python/python-nmap/](http://xael.org/norman/python/python-nmap/))'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ruby**: Ruby Nmap ([http://rubynmap.sourceforge.net/](http://rubynmap.sourceforge.net/))'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PowerShell**: PowerShell script to parse Nmap XML output ([http://www.sans.org/windows-security/2009/06/11/powershell-script-to-parse-nmap-xml-output](http://www.sans.org/windows-security/2009/06/11/powershell-script-to-parse-nmap-xml-output))'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap timing options
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nmap comes with six timing modes that you can set with options (`-T`):'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '`paranoid (0)`: In this timing mode, a packet is sent every five minutes. The
    packets are sent serially. This mode is useful for avoiding IDS detection.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sneaky (1)`: This mode sends a packet every 15 seconds, and there are no packets
    sent in parallel.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polite (2)`: This mode sends a packet every 0.4 seconds, and there is no parallel
    transmission.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normal (3)`: This mode sends multiple packets to multiple targets simultaneously.
    This is the default timing mode used by Nmap. It balances between time and network
    load.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aggressive (4)`: Nmap will scan a given host for only five minutes before
    moving on to the next target. Nmap will not wait more than 1.25 seconds for a
    response.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insane (5)`: In this mode, Nmap will scan a given host for only 75 seconds
    before moving on to the the next target. Nmap will not wait for more than 0.3
    seconds for a response.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our experience, the default timing mode usually works well unless you want
    to have a stealthier or faster scan.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Useful Nmap options
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss several Nmap options that are quite useful
    when doing a penetration-testing job.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: Service version detection
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap can also be asked to check the service version when doing port scanning.
    This information is very useful when you perform the vulnerability-identification
    process later on.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: To use this feature, give Nmap the `-sV` option.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example for this feature''s usage. We want to find the
    software version used on port `22`:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is the result of this command:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a839fe05-ccce-47e3-88f5-6a440c1a7a6b.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
- en: From the preceding information, we know that on port `22` there is an SSH service
    using the `OpenSSH` software version 4.7p1, and the SSH protocol is `2.0`.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Operating system detection
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap can also be asked to check the operating system used on the target machine.
    This information is very useful when you perform the vulnerability-identification
    process later on.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: To use this feature, give Nmap the `-O` option.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of this feature''s usage. We want to find the operating
    system used on the target machine:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following command lines are the result of this command:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16d75c31-92c3-4c68-9052-bf0d2a833834.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
- en: Based on the preceding information, we can see that the remote system is a Linux
    operating system using Linux kernel versions `2.6.9 - 2.6.33`. If there are vulnerabilities
    on those Linux kernels, we can exploit them.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: Aggressive scan
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you use the `-A` option, it will enable the following probe:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Service-version detection (`-sV`)
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating-system detection (`-O`)
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script scanning (`-sC`)
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traceroute (`--traceroute`)
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It may take some time for this scan type to finish. The following command can
    be used for aggressive scanning:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following is the abridged result of this command:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bbd9901-bb24-40b6-af62-ed66cb8ab16b.png)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
- en: 'In addition to the detailed information about ports, services, and the certificates,
    further down the result we get detailed information concerning the Apache Webserver
    configured on this target machine:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ac74298-c7a0-422d-985e-31a6c59ef639.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
- en: Nmap for scanning the IPv6 target
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we mentioned that you can specify an IPv6 target in
    Nmap. In this section, we will discuss this in depth.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: 'For this scenario, the following is the IPv6 address of each machine involved:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To scan an IPv6 target, just use the `-6` option and define the IPv6 target
    address. Currently, you can only specify individual IPv6 addresses. The following
    is a sample command to port scan the IPv6 address:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following is the result of this command:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f52fa5e0-9c8d-4aa1-b95a-ba9681002f98.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
- en: We can see that, in IPv6 testing, the number of ports open is less than in the
    IPv4 testing. This may be caused by services on the remote machine that do not
    support IPv6 yet.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with Netdiscover
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Netdiscover is another discovery tool, and is built into Kali Linux 2018.2\.
    Currently at the .03-pre-beta7 version and written by Jaime Penalba, Netdiscover
    can reform reconnaissance and discovery on both wireless and switched networks
    using ARP requests.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: To launch Netdiscover, type `netdiscover –h` to view the usage options. (Should
    you only type the `netdiscover` command by itself, Netdiscover will launch a default
    scan.)
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fdecc99-2a53-4356-890a-bf3081d6490a.jpg)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
- en: 'To scan a range of IPs , type `netdiscover –r` followed by the IP range. For
    this example, we''ve used `netdiscover –r 10.10.0.0/24`. You may also choose to
    do a passive scan using the `netdiscover –p` option:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26f29542-14fe-47d3-aee9-3a95e00f644e.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
- en: In the preceding scan, we can see that the discovery includes Dell and HP workstations,
    Cisco devices, and even Xerox multi-function devices.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: The Nmap scripting engine
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Nmap itself has already become a powerful network-exploration tool,
    with the additional scripting engine capabilities, Nmap becomes a much more powerful
    tool. With the **Nmap Scripting Engine** (**NSE**), users can automate various
    networking tasks, such as checking for new security vulnerabilities in applications,
    detecting application versions, or other capabilities that are not available in
    Nmap. Nmap has already included various NSE scripts in its package, but users
    can also write their own scripts to suit their needs.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 'The NSE scripts utilize the Lua programming language ([http://www.lua.org](http://www.lua.org))
    embedded in Nmap, and, currently, the NSE scripts are categorized as follows:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '`auth`: The scripts in this category are used to find the authentication set
    on the target system; for example, by using the brute-force technique.'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: These scripts are run using the `-sC` or `-A` options. A script
    will be grouped in the default category if it satisfies the following requirements:'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must be fast
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It needs to produce valuable and actionable information
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its output needs to be verbose and concise
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must be reliable
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should not be intrusive of the target system
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should divulge information to the third party
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discovery`: These scripts are used to find the network.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DoS**: The scripts in this category may cause **Denial of Service** (**DoS**)
    on the target system. Please use them carefully.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exploit`: These scripts will exploit security vulnerabilities on the target
    system. The penetration tester needs to have permission to run these scripts on
    the target system.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`external`: These scripts may divulge information to third parties.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fuzzer`: These scripts are used to do fuzzing on the target system.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intrusive`: These scripts may crash the target system or use all of the target
    system''s resources.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`malware`: These scripts will check for the existence of malware or backdoors
    on the target system.'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe`: These scripts are not supposed to cause a service crash, **Denial of
    Service** (**DoS**), or exploit the target system.'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: These scripts are used with the version detection option (`-sV`)
    to carry out advanced detection for the service on the target system.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vuln`: These scripts are used to check for security vulnerabilities on the
    target system.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Kali Linux, these Nmap scripts are located in `the /usr/share/nmap/scripts`
    directories, and, currently, Nmap Version 7.70, which is included with Kali Linux,
    contains 588 scripts.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several command-line arguments that can be used to call NSE, as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '`-sC or --script=default`: This performs a scan using default scripts.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script <filename> | <category> | <directories>`: This performs a scan using
    the script defined in filenames, categories, or directories.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script-args <args>`: This provides a script argument. An example of these
    arguments is the username or the password if you use the `auth` category.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To port scan the `172.16.43.156` host and utilize the default script categories,
    we can give the following command:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following is an abridged result:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: From the preceding information, you can see that the Nmap result is now more
    thorough. This is because it utilizes the NSE default scripts.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you only want specific information on the target system, you can
    use the script by itself. If we want to collect information about the HTTP server,
    we can use several HTTP scripts in NSE, such as `http-enum`, `http-headers`, `http-methods`,
    and `http-php-version`, using the following command:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The following is the result of this command:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce668a8e-e17b-439b-948a-a521cfadb95f.png)'
  id: totrans-443
  prefs: []
  type: TYPE_IMG
- en: 'By utilizing four NSE scripts related to HTTP, we gain more information regarding
    the target system''s web server:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several interesting directories to check: `Tikiwiki`, `test`, and
    `phpMyAdmin`'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have an interesting file: `phpinfo.php`'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know the server is using PHP version `5.2.3 -5.2.5`
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After discussing Nmap, let's discuss another port-scanner tool.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: There is a useful NSE script called Nmap NSE Vulscan ([http://www.computec.ch/mruef/software/nmap_nse_vulscan-1.0.tar.gz](http://www.computec.ch/mruef/software/nmap_nse_vulscan-1.0.tar.gz))
    that can help you to map the version information you obtain from a target machine
    with a vulnerability database, such as CVE ([http://cve.mitre.org/](http://cve.mitre.org/)),
    VulDB ([https://vuldb.com/?](https://vuldb.com/?)), SecurityTracker ([http://securitytracker.com/](http://securitytracker.com/)),
    and SecurityFocus ([http://www.securityfocus.com/](http://www.securityfocus.com/)).
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the sample result of the CVE script:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b42f504b-c463-4634-b76c-123e03fa979d.png)'
  id: totrans-451
  prefs: []
  type: TYPE_IMG
- en: Nmap options for firewall/IDS evasion
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During penetration testing, you may encounter a system that is using a firewall
    and an IDS to protect the system. If you just use the default settings, your action
    may get detected or you may not get the correct result from Nmap. The following
    options may be used to help you evade the firewall/IDS:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '`-f` **(fragment packets)**: The purpose of this option is to make it harder
    to detect the packets. By specifying this option once, Nmap will split the packet
    into 8 bytes or fewer after the IP header.'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--mtu`: With this option, you can specify your own packet-size fragmentation.
    The **Maximum Transmission Unit** (**MTU**) must be a multiple of eight, or Nmap
    will give an error and exit.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-D` **(decoy)**: By using this option, Nmap will send some of the probes from
    the spoofed IP addresses specified by the user. The idea is to mask the true IP
    address of the user in the log files. The user IP address is still in the logs.
    You can use `RND` to generate a random IP address, or `RND:number` to generate
    the `<number>` IP address. The hosts you use for decoys should be up, or you will
    flood the target. Also remember that, by using many decoys, you can cause network
    congestion, so you may want to avoid that, especially if you are scanning your
    client''s network.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--source-port <portnumber> or -g (spoof source port)`: This option will be
    useful if the firewall is set up to allow all incoming traffic that comes from
    a specific port.'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--data-length`: This option is used to change the default data length sent
    by Nmap in order to avoid being detected as Nmap scans.'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--max-parallelism`: This option is usually set to one in order to instruct
    Nmap to send no more than one probe at a time to the target host.'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--scan-delay <time>`: This option can be used to evade an IDS/IPS that uses
    a threshold to detect port-scanning activity.'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may also experiment with other Nmap options for evasion, as explained in
    the Nmap manual ([http://nmap.org/book/man-bypass-firewalls-ids.html](http://nmap.org/book/man-bypass-firewalls-ids.html)).
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: Automated scanning with Striker
  id: totrans-462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Striker is an automated scanning and deep information-gathering tool built into
    Python, which performs port/service and vulnerability scanning. Much like the
    automated tools we used in the previous chapter (Red_Hawk and Devploit), Striker
    is simple to install and use.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 'We must first download Striker. To do so, open a Terminal and change to the
    `Desktop` (or directory of your choice) by typing the following:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Enter the following to clone Striker to your desktop or (or directory of your
    choice):'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![](img/43032ee7-6c3c-42c7-a787-6d2f322fd574.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
- en: Once the download has completed successfully (with objects and deltas at 100%,
    as seen in the previous screenshot), change to the Striker directory by typing
    `cd Striker` and then using the `ls` command to list the files within the Striker
    folder. You should see five files listed, including `requirements.txt` and `striker.py`.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61a0865f-64fa-4da7-abdd-96f580ac3100.jpg)'
  id: totrans-470
  prefs: []
  type: TYPE_IMG
- en: For Striker to run without errors, we must first use the package management
    installer (`pip`) to ensure that all of the requirements necessary to run Striker
    are met, including the Whois module (which is necessary for information gathering).
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we run the following two commands, `pip install -r requirements.txt`
    followed by `pip install whois`:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cc78dab-f95c-413c-837a-25ccc92a6469.jpg)'
  id: totrans-473
  prefs: []
  type: TYPE_IMG
- en: 'Once all requirements have been installed successfully, type `pip install whois`
    (even though the requirement may have already been installed):'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d78d1aa-0b15-453d-9588-499324b0244d.jpg)'
  id: totrans-475
  prefs: []
  type: TYPE_IMG
- en: 'Finally, to run Striker, we type `python striker.py`:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50b626aa-534b-42a0-bdf0-5ab1b39da866.jpg)'
  id: totrans-477
  prefs: []
  type: TYPE_IMG
- en: The Striker GUI will now run. As a fully automated tool, all that is required
    from this point onward is the target IP or URL.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we have used the [http://scanme.nmap.org/](http://scanme.nmap.org/)
    website that is used in the Nmap scanning section. Compare the results of the
    scan with those found by Nmap earlier:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f527c7bc-f3e1-492c-95e1-dc8e358f1afe.jpg)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
- en: 'Note that Striker also found DNS record information as well as two email addresses,
    as seen in the following screenshot:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3eda44f2-6431-47f2-95b2-749c267e8c36.jpg)'
  id: totrans-482
  prefs: []
  type: TYPE_IMG
- en: Anonymity using Nipe
  id: totrans-483
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nipe is a tool that utilizes the Tor network as a user's default gateway, thereby
    routing all traffic through the Tor network, which is commonly used to offer some
    level of privacy and anonymity. It should be noted that, when using a tool for
    privacy and anonymity, masking the IP address alone will not offer anonymity,
    as DNS information may still be available. Both IP and DNS information must be
    masked.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: 'We first install Nipe by cloning it to our machine on the desktop or directory
    of your choice. Open a terminal and change directories to the Desktop (or directory
    of your choice):'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Clone Nipe to your machine by typing the following:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![](img/523e0fd8-b899-464c-9039-6b762b5234ee.jpg)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
- en: 'Change to the Nipe directory by typing `cd Nipe`, and then list the contents
    of the directory by typing `ls`:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4a53e4e-c19c-4fe8-8e06-933ffb8c891a.jpg)'
  id: totrans-491
  prefs: []
  type: TYPE_IMG
- en: 'To install Nipe, type `cpan install Switch JSON LWP::UserAgent`. When prompted
    to perform an automatic installation, press *Enter*:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77d30371-85ab-4ea6-9b5a-ca954dcab123.jpg)'
  id: totrans-493
  prefs: []
  type: TYPE_IMG
- en: 'To install Nipe dependencies, run the command, `perl nipe.pl install`:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/861f0543-4641-44e5-bc9f-534b131266de.jpg)'
  id: totrans-495
  prefs: []
  type: TYPE_IMG
- en: Before starting Nipe, check your public IP address and DNS IP, and compare them
    to the given IPs after starting Nipe. Some examples of websites you can use to
    view your public IP are [www.whatsmyipaddress.com](http://www.whatsmyipaddress.com)
    and [www.dnsleak.com](http://www.dnsleak.com).
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the Nipe service type `perl nipe.pl start`:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/febcafd0-2fb9-4b59-872f-34bd0941ec02.jpg)'
  id: totrans-498
  prefs: []
  type: TYPE_IMG
- en: You can also restart the service to mask your IP to different regions by typing
    `perl nipe.pl restart`. All commands used for installing and using the Nipe tool
    can also be found on its GitHub page at [https://github.com/GouveaHeitor/nipe](https://github.com/GouveaHeitor/nipe).
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: Use the IP and DNS verification websites previously listed to check that your
    settings have indeed changed.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed the target-discovery process. We started by discussing
    the purposes of target discovery: identifying the target machine and finding out
    the operating system used by the target machine. Then, we continued with the tools
    included with Kali Linux and GitHub that can be used for discovering and identifying
    target machines.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: We discussed several tools for host discovery and scanning, such as `ping`,
    Nmap, `p0f`, and Striker, and also looked at masking your IP and DNS using Nipe to
    evade detection.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about vulnerability scanning and the tools
    that can be used in Kali Linux for this purpose.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-505
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which tool can be used to send ICMP echo requests to several hosts at once?
    (`fping`)
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many scripts are available in Nmap 7.7? (588 scripts)
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the FIN flag? (It indicates that there is no more data
    to be sent and that the connection should be terminated.)
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does a filtered port indicate? (A packet-blocking device is preventing
    the probe from reaching the target.)
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Nmap option can be used to make it harder to detect packets when evading
    firewalls and IDS? (`-f`, which is used to fragment packets)
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command used to scan a range of IPs using the Netdiscover tool?
    (netdiscover `-r`)
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which option can be used in Netdiscover to run a passive scan? (`-p`)
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which website can be used to ensure that DNS information is not being leaked?
    ([www.dnsleak.com](http://www.dnsleak.com/))
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linux networking tools: [https://gist.github.com/miglen/70765e663c48ae0544da08c07006791f](https://gist.github.com/miglen/70765e663c48ae0544da08c07006791f)'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap scripting engine: [https://nmap.org/book/nse.html](https://nmap.org/book/nse.html)'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: 'Port scanning techniques: [https://nmap.org/book/man-port-scanning-techniques.html](https://nmap.org/book/man-port-scanning-techniques.html)'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
