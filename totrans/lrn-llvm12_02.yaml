- en: '*Chapter 1*: Installing LLVM'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn how to work with LLVM, it is best to begin by compiling LLVM from the
    source. LLVM is an umbrella project, and its GitHub repository contains the sources
    for all the projects that belong to LLVM. Each LLVM project is in a top-level
    directory of the repository. Besides cloning the repository, your system must
    also have all tools that are required by the build system installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the prerequisites ready, which will show you how to set up your build
    system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building with CMake, which will cover how to compile and install the LLVM core
    libraries and Clang with CMake and Ninja.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the build process, which will talk about the various way we can
    influence the build process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the prerequisites ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with LLVM, your development system must run a common operating system
    such as Linux, FreeBSD, macOS, or Windows. Building LLVM and Clang with debug
    symbols enabled easily need tens of gigabytes of disk space, so be sure that your
    system has plenty of disk space available – in this scenario, you should have
    30 GB of free space.
  prefs: []
  type: TYPE_NORMAL
- en: The required disk space depends heavily on the chosen build options. For example,
    building only the LLVM core libraries in release mode, while targeting only one
    platform, requires about 2 GB of free disk space, which is the bare minimum needed.
    To reduce compile times, a fast CPU (such as a quadcore CPU with 2.5 GHz clock
    speed) and a fast SSD would also be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: It is even possible to build LLVM on a small device such as a Raspberry Pi –
    it just takes a lot of time to do so. I developed the examples in this book on
    a laptop with an Intel quadcore CPU running at 2.7 GHz clock speed, with 40 GB
    RAM and 2.5 TB SSD disk space. This system is well-suited for the development
    task at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Your development system must have some prerequisite software installed. Let's
    review the minimal required versions of these software packages.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Linux distributions often contain more recent versions that can be used. The
    version numbers are suitable for LLVM 12\. Later versions of LLVM may require
    more recent versions of the packages mentioned here.
  prefs: []
  type: TYPE_NORMAL
- en: To check out the source from **GitHub**, you need **git** ([https://git-scm.com/](https://git-scm.com/)).
    There is no requirement for a specific version. The GitHub help pages recommend
    using at least version 1.17.10.
  prefs: []
  type: TYPE_NORMAL
- en: The LLVM project uses **CMake** ([https://cmake.org/](https://cmake.org/)) as
    the build file generator. At least version 3.13.4 is required. CMake can generate
    build files for various build systems. In this book, **Ninja** ([https://ninja-build.org/](https://ninja-build.org/))
    is being used because it is fast and available on all platforms. The latest version,
    1.9.0, is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, you also need a **C/C++ compiler**. The LLVM projects are written
    in modern C++, based on the C++14 standard. A conforming compiler and standard
    library are required. The following compilers are known to work with LLVM 12:'
  prefs: []
  type: TYPE_NORMAL
- en: gcc 5.1.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clang 3.5 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Clang 6.0 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2017 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please be aware that with further development of the LLVM project, the requirements
    for the compiler are most likely to change. At the time of writing, there are
    discussions to use C++17 and drop Visual Studio 2017 support. In general, you
    should use the latest compiler version available for your system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Python** ([https://python.org/](https://python.org/)) is used to generate
    the build files and to run the test suite. It should be at least version 3.6.'
  prefs: []
  type: TYPE_NORMAL
- en: Although not covered in this book, there may be reasons why you need to use
    Make instead of Ninja. In this case, you need to use `ninja` in each command with
    `make` for the scenarios described here.
  prefs: []
  type: TYPE_NORMAL
- en: To install the prerequisite software, the easiest thing to do is use the package
    manager from your operating system. In the following sections, the commands you
    must enter to install the software for the most popular operating systems are
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ubuntu 20.04 uses the APT package manager. Most of the basic utilities are
    already installed; only the development tools are missing. To install all the
    packages at once, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Fedora and RedHat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The package manager for Fedora 33 and RedHat Enterprise Linux 8.3 is called
    **DNF.** Like Ubuntu, most of the basic utilities are already installed. To install
    all the packages at once, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: FreeBSD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On FreeBSD 12 or later, you must use the PKG package manager. FreeBSD differs
    from Linux-based systems in that Clang is the preferred compiler. To install all
    the packages at once, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For development on OS X, it is best to install **Xcode** from the Apple store.
    While the XCode IDE is not used in this book, it comes with the required C/C++
    compilers and supporting utilities. To install the other tools, you can use the
    Homebrew package manager (https://brew.sh/). To install all the packages at once,
    type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like OS X, Windows does not come with a package manager. The easiest way to
    install all the software is to use the **Chocolately** ([https://chocolatey.org/](https://chocolatey.org/))
    package manager. To install all the packages at once, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Please note that this only installs the build tools from `package visualstudio2019community`
    instead of `visualstudio2019buildtools`. Part of the Visual Studio 2019 installation
    is the x64 Native Tools Command Prompt for VS 2019\. Upon using this command prompt,
    the compiler is automatically added to the search path.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The LLVM project uses Git for version control. If you have not used Git before,
    then you should do some basic configuration of Git first before continuing; that
    is, setting a username and email address. Both pieces of information are used
    if you commit changes. In the following commands, replace `Jane` with your name
    and `jane@email.org` with your email:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Git uses the **vi** editor for commit messages. If you would prefer
    using another editor, then you can change the configuration in a similar way.
    To use the **nano** editor, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For more information about git, please see the *Git Version Control Cookbook
    - Second Edition* by Packt Publishing ([https://www.packtpub.com/product/git-version-control-cookbook/9781782168454](https://www.packtpub.com/product/git-version-control-cookbook/9781782168454)).
  prefs: []
  type: TYPE_NORMAL
- en: Building with CMake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the build tools ready, you can now check out all the LLVM projects from
    GitHub. The command for doing this is essentially the same on all platforms. However,
    on Windows, it is recommended to turn off auto-translation for line endings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review this process in three parts: cloning the repository, creating
    a build directory, and generating the build system files.'
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On all non-Windows platforms, type in the following command to clone the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you must add the option to disable line endings from being auto-translated.
    Here, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This `git` command clones the latest source code from GitHub into a local directory
    named `llvm-project`. Now, change the current directory to the new `llvm-project`
    directory with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the directory is all the LLVM projects, each in its own directory. Most
    notably, the LLVM core libraries are in the `llvm` subdirectory. The LLVM project
    uses branches for subsequent release development ("release/12.x") and tags ("llvmorg-12.0.0")
    to mark a certain release. With the preceding `clone` command, you get the current
    development state. This book uses LLVM 12\. To check out the first release of
    LLVM 12, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With this, you have cloned the whole repository and checked out a tag. This
    is the most flexible approach.
  prefs: []
  type: TYPE_NORMAL
- en: Git also allows you to clone only a branch or a tag (including history). With
    `git clone --branch llvmorg-12.0.0 https://github.com/llvm/llvm-project`, you
    check out the same label, as we did previously, but only the history for this
    tag is cloned. With the additional`–-depth=1` option, you prevent the history
    from being cloned too. This saves time and space but obviously limits what you
    can do locally.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create a build directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a build directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike many other projects, LLVM does not support inline builds and requires
    a separate `build` directory. This can easily be created inside the `llvm-project`
    directory. Change into this directory with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a build directory called `build` for simplicity. Here, the commands
    for Unix and Windows systems differ. On Unix-likes system, you should use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you should use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change into the `build` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, you are ready to create the build system files with the CMake tool inside
    this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the build system files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To generate the build system files that will compile LLVM and Clang using Ninja,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, the backslash character, `\`, is the directory name separator. On
    Windows, CMake automatically translates the Unix separator, `/`, into the Windows
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-G` option tells CMake which system to generate build files for. The most
    often used options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ninja`: For the Ninja build system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Unix Makefiles`: For GNU Make'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Visual Studio 15 VS2017` and `Visual Studio 16 VS2019`: For Visual Studio
    and MS Build'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Xcode`: For XCode projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The generation process can be influenced by setting various variables with the
    `–D` option. Usually, they are prefixed with `CMAKE_` (if defined by CMake) or
    `LLVM_` (if defined by LLVM). With the `LLVM_ENABLE_PROJECTS=clang` variable setting,
    CMake generates build files for Clang in addition to LLVM. The last part of the
    command tells CMake where to find the LLVM core library source. More on that in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the build files have been generated, LLVM and Clang can be compiled with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the hardware resources, this command takes between 15 minutes (a
    server with lots of CPU cores and memory and fast storage) and several hours (dual-core
    Windows notebook with limited memory) to run. By default, Ninja utilizes all available
    CPU cores. This is good for compilation speed but may prevent other tasks from
    running. For example, on a Windows-based notebook, it is almost impossible to
    surf the internet while Ninja is running. Fortunately, you can limit resource
    usage with the `–j` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume you have four CPU cores available and that Ninja should only
    use two (because you have parallel tasks to run). Here, you should use the following
    command for compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once compilation is finished, a best practice is to run the test suite to check
    if everything works as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Again, the runtime of this command varies widely due to the available hardware
    resources. The Ninja `check-all` target runs all test cases. Targets are generated
    for each directory containing test cases. Using `check-llvm`, instead of `check-all`
    runs the LLVM tests but not the Clang tests; `check-llvm-codegen` only runs the
    tests in the `CodeGen` directory from LLVM (that is, the `llvm/test/CodeGen` directory).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also do a quick manual check. One of the LLVM applications you will
    be using is `-version` option, it shows the LLVM version of it, its host CPU,
    and all its supported architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you have trouble getting LLVM compiled, then you should consult the *Common
    Problems* section of the *Getting Started with the LLVM System* documentation
    ([https://llvm.org/docs/GettingStarted.html#common-problems](https://llvm.org/docs/GettingStarted.html#common-problems))
    for solutions to typical problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, install the binaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: On a Unix-like system, the install directory is `/usr/local`. On Windows, `C:\Program
    Files\LLVM` is used. This can be changed, of course. The next section explains
    how.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the build process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CMake system uses a project description in the `CMakeLists.txt` file. The
    top-level file is in the `llvm` directory; that is, `llvm/CMakeLists.txt`. Other
    directories also contain `CMakeLists.txt` files, which are recursively included
    during the build-file generation.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the information provided in the project description, CMake checks which
    compilers have been installed, detects libraries and symbols, and creates the
    build system files, such as `build.ninja` or `Makefile` (depending on the chosen
    generator). It is also possible to define reusable modules, such as a function
    to detect if LLVM is installed. These scripts are placed in the special `cmake`
    directory (`llvm/cmake`), which is searched automatically during the generation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: The build process can be customized by defining CMake variables. The`–D` command-line
    option is used to set a variable to a value. These variables are used in CMake
    scripts. Variables defined by CMake itself are almost always prefixed with `CMAKE_`,
    and these variables can be used in all projects. Variables defined by LLVM are
    prefixed with `LLVM_` but they can only be used if the project definition includes
    the use of LLVM.
  prefs: []
  type: TYPE_NORMAL
- en: Variables defined by CMake
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some variables are initialized with the values of environment variables. The
    most notable are `CC` and `CXX`, which define the C and C++ compilers to be used
    for building. CMake tries to locate a C and a C++ compiler automatically, using
    the current shell search path. It picks the first compiler that's found. If you
    have several compilers installed, such as gcc and Clang or different versions
    of Clang, then this might not be the compiler you want for building LLVM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you like to use `clang9` as a C compiler and clang++9 as a C++ compiler.
    Here, you can invoke CMake in a Unix shell in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This sets the value of the environment variables for the invocation of `cmake`.
    If necessary, you can specify an absolute path for the compiler executables.
  prefs: []
  type: TYPE_NORMAL
- en: '`CC` is the default value of the `CMAKE_C_COMPILER` CMake variable, while `CXX`
    is the default value of the `CMAKE_CXX_COMPILER` CMake variable. Instead of using
    the environment variables, you can set the CMake variables directly. This is equivalent
    to the preceding call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Other useful variables defined by CMake are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CMAKE_INSTALL_PREFIX`: A path prefix that is prepended to every path during
    installation. The default is `/usr/local` on Unix and `C:\Program Files\<Project>`
    on Windows. To install LLVM in the `/opt/llvm` directory, you must specify `-DCMAKE_INSTALL_PREFIX=/opt/llvm`.
    The binaries are copied to `/opt/llvm/bin`, the library files are copied to `/opt/llvm/lib`,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CMAKE_BUILD_TYPE`: Different types of builds require different settings. For
    example, a debug build needs to specify options for generating debug symbols and
    are usually linking against debug versions of system libraries. In contrast, a
    release build uses optimization flags and links against production versions of
    libraries. This variable is only used for build systems that can only handle one
    build type, such as Ninja or Make. For IDE build systems, all variants are generated,
    and you must use the mechanism of the IDE to switch between build types. Some
    possible values are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEBUG`: Build with debug symbols'
  prefs: []
  type: TYPE_NORMAL
- en: '`RELEASE`: Build with optimization for speed'
  prefs: []
  type: TYPE_NORMAL
- en: '`RELWITHDEBINFO`: Release build with debug symbols'
  prefs: []
  type: TYPE_NORMAL
- en: '`MINSIZEREL`: Build with optimization for size'
  prefs: []
  type: TYPE_NORMAL
- en: The default build type is `DEBUG`. To generate build files for a release build,
    you must specify `-DCMAKE_BUILD_TYPE=RELEASE`.
  prefs: []
  type: TYPE_NORMAL
- en: '`CMAKE_C_FLAGS` and `CMAKE_CXX_FLAGS`: These are extra flags that are used
    when we''re compiling C and C++ source files. The initial values are taken from
    the `CFLAGS` and `CXXFLAGS` environment variables, which can be used as alternatives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CMAKE_MODULE_PATH`: Specifies additional directories that are searched for
    in CMake modules. The specified directories are searched before the default ones.
    The value is a semicolon-separated list of directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHON_EXECUTABLE`: If the Python interpreter is not found or if the wrong
    one is picked if you have installed multiple versions of it, you can set this
    variable to the path of the Python binary. This variable only takes effect if
    the Python module of CMake is included (which is the case for LLVM).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CMake provides built-in help for variables. The `--help-variable var` option
    prints help for the `var` variable. For instance, you can type the following to
    get help for `CMAKE_BUILD_TYPE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also list all the variables with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This list is very long. You may want to pipe the output to `more` or a similar
    program.
  prefs: []
  type: TYPE_NORMAL
- en: Variables defined by LLVM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The variables defined by LLVM work in the same way as those defined by CMake,
    except that there is no built-in help. The most useful variables are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LLVM_TARGETS_TO_BUILD`: LLVM supports code generation for different CPU architectures.
    By default, all these targets are built. Use this variable to specify the list
    of targets to build, separated by semicolons. The current targets are `AArch64`,
    `AMDGPU`, `ARM`, `BPF`, `Hexagon`, `Lanai`, `Mips`, `MSP430`, `NVPTX`, `PowerPC`,
    `RISCV`, `Sparc`, `SystemZ`, `WebAssembly`, `X86`, and `XCore`. `all` can be used
    as shorthand for all targets. The names are case-sensitive. To only enable PowerPC
    and the System Z target, you must specify `-DLLVM_TARGETS_TO_BUILD="PowerPC;SystemZ"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_PROJECTS`: This is a list of the projects you want to build, separated
    by semicolons. The source for the projects must be at the same level as the `llvm`
    directory (side-by-side layout). The current list is `clang`, `clang-tools-extra`,
    `compiler-rt`, `debuginfo-tests`, `lib`, `libclc`, `libcxx`, `libcxxabi`, `libunwind`,
    `lld`, `lldb`, `llgo`, `mlir`, `openmp`, `parallel-libs`, `polly`, and `pstl`.
    `all` can be used as shorthand for all the projects in this list. To build Clang
    and llgo together with LLVM, you must specify `-DLLVM_ENABLE_PROJECT="clang;llgo"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_ASSERTIONS`: If set to `ON`, then assertion checks are enabled.
    These checks help find errors and are very useful during development. The default
    value is `ON` for a `DEBUG` build and `OFF` otherwise. To turn assertion checks
    on (for example, for a `RELEASE` build), you must specify `–DLLVM_ENABLE_ASSERTIONS=ON`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_EXPENSIVE_CHECKS`: This enables some expensive checks that can
    really slow down your compilation speed or consume large amounts of memory. The
    default value is `OFF`. To turn these checks on, you must specify `-DLLVM_ENABLE_EXPENSIVE_CHECKS=ON`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_APPEND_VC_REV`: LLVM tools such as `llc` display the LLVM version they
    are based on, besides other information if the`–version` command-line option is
    provided. This version information is based on the `LLVM_REVISION` C macro. By
    default, not only the LLVM version but also the Git hash of the latest commit
    is part of the version information. This is handy in case you are following the
    development of the master branch because it makes it clear which Git commit the
    tool is based on. If this isn''t required, then this can be turned off with `–DLLVM_APPEND_VC_REV=OFF`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_THREADS`: LLVM automatically includes thread support if a threading
    library is detected (usually, the pthreads library). Furthermore, in this case,
    LLVM assumes that the compiler supports `-DLLVM_ENABLE_THREADS=OFF`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_EH`: The LLVM projects do not use C++ exception handling, so they
    turn exception support off by default. This setting can be incompatible with other
    libraries your project is linking with. If needed, you can enable exception support
    by specifying `–DLLVM_ENABLE_EH=ON`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_RTTI`: LVM uses a lightweight, self-built system for runtime type
    information. Generating C++ RTTI is turned off by default. Like the exception
    handling support, this may be incompatible with other libraries. To turn generation
    for C++ RTTI on, you must specify `–DLLVM_ENABLE_RTTI=ON`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_WARNINGS`: Compiling LLVM should generate no warning messages
    if possible. Due to this, the option to print warning messages is turned on by
    default. To turn it off, you must specify `–DLLVM_ENABLE_WARNINGS=OFF`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_PEDANTIC`: The LLVM source should be C/C++ language standard-conforming;
    hence, pedantic checking of the source is enabled by default. If possible, compiler-specific
    extensions are also disabled. To reverse this setting, you must specify `–DLLVM_ENABLE_PEDANTIC=OFF`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_ENABLE_WERROR`: If set to `ON`, then all the warnings are treated as
    errors – the compilation aborts as soon as warnings are found. It helps to find
    all the remaining warnings in the source. By default, it is turned off. To turn
    it on, you must specify `–DLLVM_ENABLE_WERROR=ON`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_OPTIMIZED_TABLEGEN`: Usually, the tablegen tool is built with the same
    options as the other parts of LLVM. At the same time, tablegen is used to generate
    large parts of the code generator. As a result, tablegen is much slower in a debug
    build, thus increasing the compile time noticeably. If this option is set to `ON`,
    then tablegen is compiled with optimization turned on, even for a debug build,
    possibly reducing compile time. The default is `OFF`. To turn this on, you must
    specify `–DLLVM_OPTIMIZED_TABLEGEN=ON`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM_USE_SPLIT_DWARF`: If the build compiler is gcc or Clang, then turning
    on this option will instruct the compiler to generate the DWARF debug information
    in a separate file. The reduced size of the object files reduces the link time
    of debug builds significantly. The default is `OFF`. To turn this on, you must
    specify `-LLVM_USE_SPLIT_DWARF=ON`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LLVM defines many more CMake variables. You can find the complete list in the
    LLVM documentation of CMake ([https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables](https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables)).
    The preceding list only contains the ones you are likely to need.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you prepared your development machine to compile LLVM. You
    cloned the LLVM GitHub repository and compiled your own versions of LLVM and Clang.
    The build process can be customized with CMake variables. You also learned about
    useful variables and how to change them. Equipped with this knowledge, you can
    tweak LLVM for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a closer look at the contents of the LLVM
    mono repository. You will learn which projects are in it and how the projects
    are structured. You will then use this information to create your own project
    using LLVM libraries. Finally, you will learn how to compile LLVM for a different
    CPU architecture.
  prefs: []
  type: TYPE_NORMAL
