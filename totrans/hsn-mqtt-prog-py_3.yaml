- en: Securing an MQTT 3.1.1 Mosquitto Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will secure an MQTT 3.1.1 Mosquitto server. We will make
    all the configurations required to work with digital certificates to encrypt all
    the data sent between MQTT clients and the server. We will use TLS and we will
    learn to work with client certificates for each MQTT client. We will also learn
    to force the desired TLS protocol version. We will gain an understanding of the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of securing a Mosquitto server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a private certificate authority to use TLS with Mosquitto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a certificate for the Mosquitto server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring TLS transport security in Mosquitto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the MQTT TLS configuration with command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the MQTT TLS configuration with GUI tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a certificate for each MQTT client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring TLS client certificate authentication in Mosquitto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the MQTT TLS client authentication with command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the MQTT TLS configuration with GUI tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forcing the TLS protocol version to a specific number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the importance of securing a Mosquitto server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security for IoT applications is an extremely important topic that deserves
    many entire books dedicated to it. Each solution has its own security requirements
    and it is very important to consider all of them when developing each component
    of the solution.
  prefs: []
  type: TYPE_NORMAL
- en: If we use MQTT to publish values that are neither confidential nor critical
    for other applications, our only concern might be to keep control of the maximum
    number of subscribers to each topic to make sure messages are always available.
    This way, we can prevent the MQTT server failing to deliver messages to a huge
    number of subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: However, most of the time we won't be working on a solution that can share data
    with the entire world without limitations and doesn't need to care about data
    confidentiality and integrity, in addition to data availability. Imagine that
    we are working on a solution that allows users to control a huge octocopter drone.
    If the drone flies the wrong way, we can do harm to real people. We cannot allow
    any unknown publisher to be able to send messages to the topics that allow us
    to control the octocopter. We have to make sure that the right person is controlling
    the octocopter and that commands sent as part of messages cannot be altered by
    an intruder in the middle; that is, we need data integrity.
  prefs: []
  type: TYPE_NORMAL
- en: The different levels of security come at a price; that is, there is always an
    additional overhead. Hence, we should always keep a balance to avoid overheads
    that can make the entire solution unfeasible and unusable. Whenever we add more
    security, we will require additional bandwidth and we will add a processing overhead
    in the clients and the server. We have to take into account that some cryptographic
    algorithms that work without problems in modern smartphones aren't suitable for
    IoT boards with constrained processing power. Sometimes, security requirements
    can force us to use specific hardware, such as more powerful IoT boards. We definitely
    have to consider security before purchasing all the hardware for our solution.
  prefs: []
  type: TYPE_NORMAL
- en: Another important thing that we must take into account is that many security
    levels require maintenance tasks that might be unfeasible in certain cases or
    extremely difficult to achieve in other cases. For example, if we decide to use
    a certificate for each device that will become a client of the MQTT server, we
    will have to generate and distribute a certificate for each device. We have to
    access the filesystem for the device to copy new files to it. If we have to invalidate
    a certificate, it will be necessary to provide a new certificate to the affected
    device. Consider a situation in which all devices are distributed in different
    locations that are difficult to access; we must have a mechanism to remotely access
    a device and be able to provide it with the new certificate. This task will also
    require security because we don't want anybody to access the device's filesystem.
    Thus, things can become extremely complex once we start analyzing all the security
    requirements and possible and necessary maintenance tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Each MQTT server or broker implementation can provide specific security features.
    We will work with some of the features provided by Mosquitto out of the box. Specific
    security requirements might make us decide to work with a specific MQTT server
    or broker implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we work with Mosquitto, we can implement security at the following levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network**: We can use a **VPN** (short for **virtual private network**) to
    extend a private network across the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transport**: MQTT uses TCP as the transport protocol, and therefore by default
    communications aren''t encrypted. **TLS** (short for **Transport Layer Security**) is
    usually referred to as TLS/SSL because **SSL** (short for **Secure Socket Layers**) is
    its predecessor. We can use TLS to secure and encrypt communications between MQTT
    clients and the MQTT server. The use of TLS with MQTT is sometimes referred to
    as MQTTS. TLS allows us to provide both privacy and data integrity. We can use
    TLS client certificates to provide authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application**: At this level, we can take advantage of features included
    in MQTT to provide application-level authentication and authorization. We can
    use the `ClientId` (client identifier) to identify each client and combine it
    with user name and password authentication. We can add additional security mechanisms
    at this level. For example, we can encrypt the message payload and/or add integrity
    checks to ensure data integrity. However, the topic will still be unencrypted,
    and therefore TLS is the only way of making sure everything is encrypted. We can
    work with plugins to provide more complex authentication and authorization mechanisms.
    We can grant or deny permissions to each user to control which topics they can
    subscribe to and which topics they can publish messages to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most popular MQTT implementations provide support for TLS. However, make sure
    that you check the features before selecting the appropriate MQTT server for your
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: We won't cover all security topics, because it would require one or more entire
    books dedicated to these topics. Instead, we will focus on the most common features
    used in transport-level security first and then we will move on to application-level
    security. The use of VPNs is beyond the scope globally of this book. However,
    you must consider their use based on your specific needs. We will use Mosquitto
    for our examples, but you can follow many similar procedures for any other MQTT
    server you decide to use. Everything we will learn will be useful for any other
    MQTT server that provides support for the same security features that we will
    use with Mosquitto.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a private certificate authority to use TLS with Mosquitto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been working with a Mosquitto server with its default configuration,
    which listens on port `1883` and uses plain TCP as the transport protocol. The
    data sent between each MQTT client and the MQTT server isn't encrypted. There
    are no restrictions on subscribers or publishers. If we open firewall ports and
    redirect ports in the router, or we configure port securities for a cloud-based
    virtual machine in which the MQTT server is running, any MQTT client that has
    the IP address or host name for the MQTT server can publish to any topic and can
    subscribe to any topic.
  prefs: []
  type: TYPE_NORMAL
- en: In our examples in [Chapter 2](790c1d9a-c895-481e-a1c1-94ea07694cb4.xhtml), *Using
    Command-Line and GUI Tools to Learn How MQTT Works*, we haven't made any changes
    in our configurations to allow incoming connections to port 1883, and therefore
    we haven't opened our Mosquitto server to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: We want to use TLS with MQTT and Mosquitto in our development environment. This
    way, we will make sure that we can trust the MQTT server because we have confidence
    it is who it says it is, our data will be private because it will be encrypted,
    and it will have integrity because it won't be altered. If you have experience
    with the *HTTP* protocol, you'll recognize that we make the same shift we do when
    we move from using *HTTP* to *HTTPS*.
  prefs: []
  type: TYPE_NORMAL
- en: Websites purchase certificates from major certificate authorities. If we want
    to use a purchased certificate for the server, we don't need to generate our own
    certificates. In fact, it is the most convenient option when we have an MQTT server
    made public and we move to a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we will use the free OpenSSL utility to generate the necessary
    certificates for the server to enable TLS with Mosquitto for our development environment.
    It is very important to notice that we won't generate a production-ready configuration
    and we are focusing on a secure development environment that will mimic a secure
    production environment.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSL is already installed in macOS and most modern Linux distributions. In
    Windows, we have already installed OpenSSL as one of the prerequisites for Mosquitto.
    The use of the OpenSSL utility deserves an entire book, and therefore we will
    just focus on generating the certificate we need with the most common options.
    If you have specific security needs, make sure you explore the necessary options
    to achieve your goals with OpenSSL.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, we will generate an X.509 digital certificate that uses the X.509
    **PKI** (short for **public key infrastructure**) standard. This digital certificate
    allows us to confirm that a specific public key belongs to the subject included
    within the certificate. There is an identity that issues the certificate and its
    details are also included in the certificate.
  prefs: []
  type: TYPE_NORMAL
- en: The digital certificate is valid only within a specific period, and therefore
    we must take into account that a digital certificate will expire some day and
    we will have to provide a new certificate to replace the expired one. There are
    specific data requirements for certificates based on the specific X.509 version
    that we use. According to the version and to the options we use to generate the
    certificates, we might need to provide specific data.
  prefs: []
  type: TYPE_NORMAL
- en: We will be running commands to generate different X.509 digital certificates
    and we will provide all the necessary details that will be included in the certificate.
    We will understand all the data that the certificate will have when we create
    it.
  prefs: []
  type: TYPE_NORMAL
- en: We will create our own private certificate authority, also known as a CA. We
    will create a root certificate and then we will generate the server key.
  prefs: []
  type: TYPE_NORMAL
- en: Check the directory or folder in which you installed OpenSSL.
  prefs: []
  type: TYPE_NORMAL
- en: On macOS, OpenSSL is installed in `/usr/bin/openssl`. However, it is an old
    version and it is necessary to install a newer version before running the commands.
    It is possible to install the new version with the `homebrew` package manager
    and you will be able to run the new version in another directory. For example,
    the path for version 1.0.2n, installed with `homebrew`, will be in `/usr/local/Cellar/openssl/1.0.2n/bin/openssl`.
    Make sure you don't use the default old version.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, the OpenSSL version we installed as a prerequisite for Mosquitto,
    in [Chapter 2](https://cdp.packtpub.com/hands_on_mqtt_programming_with_python/wp-admin/post.php?post=26&action=edit#post_25), *Using
    Command-Line and GUI Tools to Learn How MQTT Works*, has the `openssl.exe` executable
    file in the default `C:\OpenSSL-Win32\bin` folder. If you are working with Windows,
    you can use either the Command Prompt or Windows PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: In any operating system, use the full path to the appropriate OpenSSL version
    in each of the next commands that start with `openssl`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory named `mosquitto_certificates` and change the necessary
    permissions for this directory to make sure that you can only access its contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal in macOS or Linux, or a Command Prompt in Windows, and go to
    the previously created directory, `mosquitto_certificates`. Run the following
    command to create a 2,048-bit root key and save it in the `ca.key` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show sample output generated by the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will generate the private root key in the `ca.key` file.
    Make sure you keep this file private because anybody that has this file will be
    able to generate certificates. It is also possible to password-protect this file
    by using other options with `openssl`. However, as previously explained, we will
    follow the necessary steps to use TLS and you can explore additional options related
    to OpenSSL and certificates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to self-sign the root certificate. The next command uses
    the previously created 2,048-bit private key saved in the `ca.key` file and generates
    a `ca.crt` file with the self-signed X.509 digital certificate. The command makes
    the self-signed certificate valid for `3650` days. The value is specified after
    the `-days` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we specified the `-sha256` option to use SHA-256 hash functions.
    If we want increased security, we can use the `-sha512` instead option of `-sha256`
    in all cases in which we are using `-sha256`. This way, we will use SHA-512 hash
    functions. However, we must take into account that SHA-512 might not be appropriate
    for certain power-constrained IoT devices.
  prefs: []
  type: TYPE_NORMAL
- en: After you enter the previous command, OpenSSL asks for information that will
    be incorporated into the certificate. You have to enter the information and press
    *Enter*. If you don't want to enter specific information, just enter a dot (`.`)
    and press *Enter*. It is possible to pass all the values as arguments for the
    `openssl` command, but it makes it a bit difficult to understand what we are doing.
    In fact, it is also possible to use fewer calls to the `openssl` command to perform
    the previous tasks. However, we run a few more steps to understand what we are
    doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show sample output and questions with sample answers. Remember
    that we are generating our private certificate authority:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to display the data and details for the recently
    generated certificate authority certificate file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the previous commands, we will have the following two files in
    the `mqtt_certificates` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ca.key`: Certificate authority key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ca.crt`: Certificate authority certificate file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The certificate authority certificate file is in the **PEM** (short for **privacy
    enhanced mail**) format. We must remember this format because some MQTT utilities
    will require us to specify whether the certificate is in PEM format or not. A
    wrong value in this option won't allow the MQTT client to establish a connection
    with an MQTT server that uses a certificate in PEM format.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a certificate for the Mosquitto server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a private certificate authority, we can create the certificate
    for the Mosquitto server, that is, a certificate for the computer that will run
    the MQTT server.
  prefs: []
  type: TYPE_NORMAL
- en: First, we must generate a new private key that will be different from the private
    key we generated for our own private certificate authority.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to create a 2,048-bit key and save it in the `server.key`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show sample output generated by the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate the private key in the `server.key` file.
    Go back to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to generate a certificate signing request. The next command
    uses the previously created 2,048-bit private key saved in the `server.key` file
    and generates a `server.csr` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After you enter the previous command, OpenSSL asks for information that will
    be incorporated in the certificate. You have to enter the information and press
    *Enter*. If you don''t want to enter specific information, just enter a dot (`.`)
    and press *Enter*. In this case, the most important value is Common Name. Enter
    the IPv4 or IPv6 address for the computer that is running the Mosquitto server
    in this field instead of the `192.168.1.1` value shown in the next lines. The
    following lines show the sample output and questions with sample answers. Do not
    forget to enter the appropriate value for Common Name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to sign the previously created certificate signing request,
    that is, the `server.csr` file. The next command also uses the self-signed X.509
    digital certificate for the certificate authority and its private key that we
    generated before: the `ca.crt` and `ca.key` files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The command generates a `server.crt` file with the signed X.509 digital certificate
    for the Mosquitto server. The command makes the signed certificate valid for 3,650
    days. The value is specified after the `-days` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As happened when we created the self-signed X.509 digital certificate for the
    certificate authority, we also specify the `-sha256` option to use SHA-256 hash
    functions for the Mosquitto server certificate. You can use `-sha512` instead
    option of `-sha256` if you want to use SHA-512 hash functions for increased security.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show sample output generated by the previous command. The
    values shown after `subject` will be different in your configuration because you
    entered your own values when you generated the certificate signing request that
    was saved in the `server.csr` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to display data and details for the generated server
    certificate file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show sample output that displays details about the signature
    algorithm, the issuer, the validity, the subject, and the signature algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the previous commands, we will have the following three files
    in the `mqtt_certificates` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`server.key`: Server key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server.csr`: Server certificate signing request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server.crt`: Server certificate file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server certificate file is in PEM format, as is the certificate authority
    certificate file.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring TLS transport security in Mosquitto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will configure Mosquitto to use TLS transport security and work with
    encrypted communications with different clients. Notice that we haven't generated
    certificates for the clients, and therefore we won't use client certificates for
    authentication. This way, any client that has the `ca.crt` file will be able to
    establish communication with the Mosquitto server.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Mosquitto installation directory and create a new sub-directory named
    `certificates`. In Windows, you will need administrator privileges to access the
    default installation folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following files from the `mqtt_certificates` directory, in which we
    saved the certificate authority certificate and the server certificate, to the
    `certificates` sub-directory we recently created within the Mosquitto installation
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ca.crt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server.crt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server.key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are running the Mosquitto server in a Terminal window in macOS or Linux,
    press *Ctrl* + *C* to stop it. In Windows, stop the appropriate service by using
    the *Services* app. If you are running the Mosquitto server in Linux, run the
    following command to stop the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Go to the Mosquitto installation directory and open the `mosquitto.conf` configuration
    file with your favorite text editor. By default, all the lines for this file are
    commented out; that is, they start with a hash sign (`#`). The default value for
    each setting is indicated and includes the appropriate comments. This way, we
    easily know all the default values. The settings are organized in different sections.
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to make a backup copy of the exiting `mosquitto.conf` configuration
    file before making changes to it. Whenever we make changes to `mosquitto.conf`,
    it is a good idea to be able to easily roll back to the previous configuration
    if something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS or Linux, add the following lines at the end of the configuration
    file and make sure you replace `/usr/local/etc/mosquitto/certificates` with the
    full path to the `certificates` directory we created within the `Mosquitto` installation
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows, add the following lines at the end of the configuration file and
    make sure you replace `C:\Program Files (x86)\mosquitto\certificates` with the
    full path to the `certificates` directory we created within the `Mosquitto` installation
    folder. Notice that you will need administrator privileges when you run the text
    editor to open the file; that is, you will have to run the text editor as an administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We specified the `8883` value for the listener option to make Mosquitto listen
    for incoming network connections on TCP port number `8883`. This port is the default
    port number for MQTT with TLS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cafile` option specifies the full path for the file that provides a PEM-encoded
    certificate authority certificate file: `ca.crt`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `certfile` option specifies the full path for the file that provides a
    PEM encoded server certificate: `server.crt`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `keyfile` option specifies the full path for the file that provides
    a PEM-encoded server keyfile: `server.key`.'
  prefs: []
  type: TYPE_NORMAL
- en: Save the changes to the `mosquitto.conf` configuration file and launch Mosquitto
    again with the same mechanism we learned for Linux, macOS, and Windows in the
    previous chapter. The Mosquitto server will be listening on port `8883` instead
    of `1883`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the MQTT TLS configuration with command-line tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `mosquitto_sub` command-line utility included in Mosquitto
    to try to generate a simple MQTT client that subscribes to a topic and prints
    all the messages it receives. We will use the default configuration, to try to
    establish a communication with the Mosquitto server, by using the default `1883`
    port without a certificate authority certificate specified. Open a Terminal in
    macOS or Linux, or a Command Prompt in Windows, go to the directory in which Mosquitto
    is installed, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mosquitto_sub` utility will display the following error. The Mosquitto
    server is not accepting any connections on port `1883` anymore. Notice that the
    error message might be different depending on the platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command using the `-p` option, followed by the port number
    that we want to use: `8883`. This way, we will try to connect to port `8883` instead
    of the default port `1883`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mosquitto_sub` utility will display debug messages indicating it is sending
    the `CONNECT` packet to the MQTT server. However, the connection will never be
    established because the potential MQTT client isn''t providing the required certificate
    authority. Press *Ctrl* + *C* to stop the utility trying to connect. The following
    lines show the sample output generated by the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command uses the `-h` option followed by the MQTT server host.
    In this case, we specify the IPv4 address of the computer that is running the
    Mosquitto MQTT server: `192.168.1.1`. Notice that this value must match the IPv4
    or IPv6 address that we specified as the value in the Common Name field when we
    generated the `server.csr` file, that is, the server certificate signing request.
    If you used a host name as the value in the Common Name field instead of an IPv4
    or IPv6 address, you will have to use the same host name. If there is not match
    between the value specified for the `-h` option and the value indicated in the
    Common Name field, the Mosquitto server will reject the client. Thus, make sure
    you replace `192.168.1.1` in the next line with the appropriate value. In addition,
    the command specifies the certificate authority certificate file after the `--cafile`
    option and indicates that we want to use port `8883`. You just have to replace
    `ca.crt` with the full path to the `ca.crt` file you created in the `mqtt_certificates`
    directory. For example, it might be `C:\mqtt_certificates\ca.crt` in Windows or
    `/Users/gaston/mqtt_certificates/ca.crt` in macOS or Linux. The `mosquitto_sub`
    utility will create an MQTT subscriber that will establish an encrypted connection
    with Mosquitto:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you specify a value for the `-h` option that doesn''t match the value specified
    in the Common Name field when you generated the `server.csr` file, you will see
    the following error message as a result of the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If the command generates the previous error message, make sure you review the
    previous steps to generate the `server.csr` file. Make sure you don't use `localhost`
    as the value for the `-h` option.
  prefs: []
  type: TYPE_NORMAL
- en: With a similar syntax, we will use the `mosquitto_pub` command-line utility
    included in Mosquitto to generate a simple MQTT client that publishes a message
    to a topic, with an encrypted connection. Open a Terminal in macOS or Linux, or
    a Command Prompt in Windows, go to the directory in which Mosquitto is installed,
    and run the following command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to replace `192.168.1.1` in the next line with the appropriate value. In
    addition, replace `ca.crt` with the full path to the `ca.crt` file you created
    in the `mqtt_certificates` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: After the command publishes the message, you will see it in the window that
    used the `mosquitto_sub` command to subscribe to the `sensors/octocopter01/altitude`
    topic.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the MQTT TLS configuration with GUI tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will use the MQTT.fx GUI utility to generate another MQTT client that
    uses an encrypted connection to publish messages to the same topic: `sensors/octocopter01/altitude`.
    We have to make changes to the connection options to enable TLS and specify the
    certificate authority certificate file. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch MQTT.fx, select local mosquitto in the drop-down located at the upper-left
    corner, and click on the configuration icon at the right-hand side of this drop-down
    and at the left-hand side of the Connect button. MQTT.fx will display the Edit
    Connection Profiles dialog box with different options for the connection profile
    named local mosquitto.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Broker Address textbox and enter the IPv4 or IPv6 address that we
    specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name. If there is no match between the value specified
    in Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Broker Port textbook and enter 8883.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the SSL/TLS button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the Enable SSL/TLS checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the CA certificate file radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter or select the full path to the `ca.crt` file that you created in the
    `mqtt_certificates` folder in the CA Certificate File textbox and click OK. The
    following screenshot shows a dialog box with the selected options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/83c21b8b-589b-446b-8a24-067dc32e5e6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Connect button. MQTT.fx will establish an encrypted connection
    with the local Mosquitto server. Notice that the Connect button is disabled and
    the Disconnect button is enabled because the client is connected to the Mosquitto
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Subscribe and enter `sensors/octocopter01/altitude` in the drop-down at
    the left-hand side of the Subscribe button. Then, click the Subscribe button.
    MQTT.fx will display a new panel at the left-hand side with the topic to which
    we have subscribed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Publish and enter `sensors/octocopter01/altitude` in the drop-down at
    the left-hand side of the Publish button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following text in the textbox below the Publish button: `250 f`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click the Publish button. MQTT.fx will publish the entered text to the
    specified topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Subscribe and you will see the published message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the configuration changes we have made to the Mosquitto server, any client
    that has the certificate authority certificate file, that is, the `ca.crt` file
    we generated, will be able to establish a connection with Mosquitto, subscribe,
    and publish to topics. The data sent between MQTT clients and the MQTT server
    is encrypted. In this configuration, we don't require the MQTT clients to provide
    certificates for authentication. However, don't forget that we are making configurations
    for our development environment. We should never use self-signed certificates
    for a production Mosquitto server.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another very popular GUI utility we can use to generate MQTT clients
    that can subscribe to topics and publish to topics: MQTT-spy. This utility is
    open source and can run on any computer that has Java 8 or higher installed on
    it. You can find more information about MQTT-spy here: [https://github.com/eclipse/paho.mqtt-spy](https://github.com/eclipse/paho.mqtt-spy).
    The options to establish a connection with an MQTT server with a certificate authority
    certificate file are similar to the ones we analyzed for MQTT.fx. However, if
    you also want to work with this utility, it is convenient to analyze them in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will use the MQTT-spy GUI utility to generate another MQTT client that
    uses an encrypted connection to publish messages to the same topic, `sensors/octocopter01/altitude`.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch MQTT-spy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Connections | New connection. The Connection list dialog box will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Connectivity tab and select MQTT 3.1.1 in the Protocol version
    drop-down. We want to work with MQTT version 3.1.1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Server URI(s) textbox and enter the IPv4 or IPv6 address that we specified
    as the value in the Common Name field when we generated the `server.csr` file,
    that is, the server certificate signing request. If you used a host name as the
    value in the Common Name field instead of an IPv4 or IPv6 address, you will have
    to use the same host name. If there is not match between the value specified in
    Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client generated by the MQTT-spy utility.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Security tab and in the TLS tab below the User auth. tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select CA certificate in the TLS/SSL mode drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select TLSv1.2 in the Protocol drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter or select the full path to the `ca.crt` file that you created in the
    `mqtt_certificates` folder and click Open connection. The following screenshot
    shows the dialog box with the selected options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d728a805-2bdb-4628-9282-39da7dab785e.png)'
  prefs: []
  type: TYPE_IMG
- en: MQTT-spy will close the dialog box and will display a new tab with a green background
    and the connection name that has appeared highlighted and selected at the left-hand
    side in the Connection list dialog. Make sure you click on the tab for the new
    connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `sensors/octocopter01/altitude` in the Topic drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following text in the Data textbox: `178 f`. The following screenshot
    shows the tab for the new connection and the data entered in the different controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6bef46e1-b6bf-40f3-8807-db4264417e38.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Publish button. MQTT-spy will publish the entered text to the specified
    topic and you will be able to see the message in both the MQTT.fx subscriber and
    the `mosquitto-sub` subscriber.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a certificate for each MQTT client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we want to require each MQTT client to provide a valid certificate to establish
    a connection with the MQTT server. This way, only clients that have a valid certificate
    will be able to publish or subscribe to topics. We will use the previously created
    private certificate authority to create client certificates for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: We will generate a sample certificate for our local computer that will act as
    a client. We can follow the same procedure to generate additional certificates
    for additional devices that we want to connect to the Mosquitto server. We just
    need to use a different name for the file and use a different device name in the
    corresponding option.
  prefs: []
  type: TYPE_NORMAL
- en: We must use the same certificate authority certificate that we used to generate
    the server certificate to generate the client certificates. As previously explained,
    for a production environment we shouldn't use self-signed certificates. This procedure is
    useful for development environments.
  prefs: []
  type: TYPE_NORMAL
- en: First, we must generate a new private key that will be different from the private
    keys we generated for our own private certificate authority and for the server
    certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to create a 2,048-bit key and save it in the `board001.key`
    file. To repeat this procedure for other devices, replace `board001` with any
    other name that identifies the device that will use the certificate. Do this in
    all the following commands that use `board001` for different filenames and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show sample output generated by the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will generate the private key in the `board001.key` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the Terminal in macOS or Linux, or the Command Prompt in Windows.
    Run the following command to generate a certificate-signing request, also known
    as CSR. The next command uses the previously created 2,048-bit private key saved
    in the `board001.key` file and generates a `board001.csr` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After you enter the previous command, OpenSSL asks for information that will
    be incorporated in the certificate. You have to enter the information and press
    *Enter*. If you don''t want to enter specific information, just enter a dot (.)
    and press *Enter*. In this case, the most important value is Common Name. Enter
    the device name in this field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to sign the previously created certificate signing request,
    that is, the `board001.csr` file. The next command also uses the self-signed X.509
    digital certificate for the certificate authority and its private key that we
    generated before: the `ca.crt` and `ca.key` files. The command generates a `board001.crt`
    file with the signed X.509 digital certificate for the MQTT client. The command
    makes the signed certificate valid for 3,650 days, which is the value specified
    after the `-days` option. The `-addTrust clientAuth` option indicates that we
    want to use the certificate to authenticate a client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show sample output generated by the previous command. The
    values shown after subject will be different in your configuration because you
    entered your own values when you generated the certificate signing request that
    was saved in the `board001.csr` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to display data and details for the generated server
    certificate file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show sample output that displays details about the signature
    algorithms, the issuer, the validity and the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the previous commands, we will have the following three new files
    in the certificates directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`board001.key`: Client key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`board001.csr`: Client certificate signing request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`board001.crt`: Client certificate file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client certificate file is in the PEM format, as are the certificate authority
    certificate file and the server certificate file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have to provide the following three files to any device that we want
    to connect to the Mosquitto server:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ca.crt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`board001.crt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`board001.key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never provide additional files to devices that have to establish a connection
    with the MQTT server. You don't want the devices to be able to generate additional
    certificates. You just want them to authenticate with a valid certificate.
  prefs: []
  type: TYPE_NORMAL
- en: The `openssl` utility allows us to provide values for many parameters with additional
    command-line options. Hence, it is possible to automate many of the previous steps
    to make it easier to generate multiple device certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring TLS client certificate authentication in Mosquitto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will configure Mosquitto to use TLS client certificate authentication.
    This way, any client will require the `ca.crt` file and a client certificate,
    such as the recently generated `board001.crt` file, to establish a communication
    with the Mosquitto server.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running the Mosquitto server in a Terminal window in macOS or Linux,
    press *Ctrl* + *C* to stop it. In Windows, stop the appropriate service.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Mosquitto installation directory and open the `mosquitto.conf` configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In macOS, Linux, or Windows, add the following line at the end of the configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We specified the `true` value for the `require_certificate` option to make Mosquitto
    require a valid client certificate for any client that requests a connection to
    Mosquitto.
  prefs: []
  type: TYPE_NORMAL
- en: Save the changes to the `mosquitto.conf` configuration file and launch Mosquitto
    again. We will use the `mosquitto_sub` command-line utility included in Mosquitto
    to generate a simple MQTT client that subscribes to a topic filter and prints
    all the messages it receives.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the MQTT TLS client authentication with command-line tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will use the Mosquitto command-line tools to test the client authentication
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command specifies the certificate authority certificate file,
    the client certificate, and the client key. You have to replace `ca.crt`, `board001.crt`,
    and `board001.key` with the full path to these files created in the certificates
    directory. However, it is a better idea to copy these files to a new directory
    as if we were working with files that will be only available to the device that
    wants to establish a connection with Mosquitto. As with previous commands, this
    command uses the `-h` option followed by the MQTT server host. In this case, we
    specify the IPv4 address of the computer that is running the Mosquitto MQTT server:
    `192.168.1.1`. Notice that this value must match the IPv4 or IPv6 address that
    we specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name. The `mosquitto_sub` utility will create an
    MQTT subscriber that will establish an encrypted connection with Mosquitto and
    will provide the client certificate and client key to perform authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'With a similar syntax, we will use the `mosquitto_pub` command-line utility
    included in Mosquitto to generate a simple MQTT client that publishes a message
    to a topic that will match the previously specified topic filter, with an encrypted
    connection and client authentication. Open a Terminal in macOS or Linux, or a
    Command Prompt in Windows, go to the directory in which Mosquitto is installed,
    and run the following command. Remember to replace `ca.crt`, `board001.crt`, and
    `board001.key` with the full path to these files created in the `mqtt_certificates`
    directory. In addition, replace 192.168.1.1 with the IPv4 or IPv6 address that
    we specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, it is necessary to invalidate a client certificate. Mosquitto allows
    us to specify a PEM-encoded certificate revocation list file. We have to specify
    the path to this file as a value for the `crlfile` option in the Mosquitto configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the MQTT TLS configuration with GUI tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will use the MQTT.fx GUI utility to generate another MQTT client that
    uses an encrypted connection and TLS client authentication to publish messages
    to a topic that matches the topic filter we used for the subscription, `sensors/hexacopter25/altitude`.
    We have to make changes to the connection options we used when we enabled TLS.
    We have to specify the client certificate and client key files. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch MQTT.fx and click Disconnect if you were connected to the Mosquitto MQTT
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select local mosquitto in the drop-down located in the upper-left corner and
    click on the configuration icon at the right-hand side of this drop-down and at
    the left-hand side of the Connect button. MQTT.fx will display the Edit Connection
    Profiles dialog box with different options for the connection profile named local
    mosquitto.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Broker Address textbox and enter the IPv4 or IPv6 address that we
    specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name. If there is no match between the value specified
    in Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the SSL/TLS button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the Enable SSL/TLS checkbox is activated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the Self signed certificates radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter or select the full path to the `ca.crt` file that you created in the `mqtt_certificates`
    folder in the CA File textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter or select the full path to the `board001.crt` file that you created in
    the `mqtt_ertificates` folder in the Client Certificate File textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter or select the full path to the `board001.key` file that you created in
    the `mqtt_certificates` folder in the Client Key File textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure the PEM Formatted checkbox is activated. The following screenshot
    shows a dialog box with the selected options and sample values for the different
    textboxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3093410b-c541-47f5-8e6d-0bc2abce3334.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK. Then, click on the Connect button. MQTT.fx will establish an encrypted
    connection with the local Mosquitto server by using the certificate and key files
    we have specified. Notice that the Connect button is disabled and the Disconnect
    button is enabled because the client is connected to the Mosquitto server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Subscribe and enter `sensors/+/altitude` in the drop-down at the left-hand
    side of the Subscribe button. Then, click the Subscribe button. MQTT.fx will display
    a new panel at the left-hand side with the topic filter to which we have subscribed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Publish and enter `sensors/hexacopter25/altitude` in the drop-down at
    the left-hand side of the Publish button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following text in the textbox below the Publish button: `1153 f`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click the Publish button. MQTT.fx will publish the entered text to the
    specified topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Subscribe and you will see the published message, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fcca001d-30a8-45c5-922b-61374483c7a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will use the MQTT-spy GUI utility to generate another MQTT client that
    uses an encrypted connection to publish messages to another topic that will match
    the `sensors/+/altitude` topic filter: `sensors/quadcopter500/altitude`. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch MQTT-spy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Connections | New connection or Connections | Manage connections if you
    were already running MQTT-spy or saved the previous settings. The Connection list
    dialog box will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Connectivity tab and make sure MQTT 3.1.1 is selected in the Protocol
    version drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Server URI(s) textbox and enter the IPv4 or IPv6 address that we specified
    as the value in the Common Name field when we generated the `server.csr` file,
    that is, the server certificate signing request. If you used a host name as the
    value in the Common Name field instead of an IPv4 or IPv6 address, you will have
    to use the same host name. If there is no match between the value specified in
    Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client generated by the MQTT-spy utility.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Security tab and on the TLS tab below the User auth. tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select CA certificate & client certificate/key in the TLS/SSL mode drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select TLSv1.2 in the Protocol drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter or select the full path to the `ca.crt` file that you created in the `mqtt_certificates`
    folder in the CA certificate file textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter or select the full path to the `board001.crt` file that you created in
    the `mqtt_ertificates` folder in the Client certificate file textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter or select the full path to the `board001.key` file that you created in
    the `mqtt_certificates` folder in the Client key file textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Activate the Client key in PEM format checkbox. Finally, click Open connection
    or Close and re-open existing connection. The following screenshot shows a dialog
    box with the selected options and sample values for the textboxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d1b1f37c-11cd-44e3-a5ee-168bbcfbb383.png)'
  prefs: []
  type: TYPE_IMG
- en: MQTT-spy will close the dialog box and will display a new tab with a green background
    and the connection name that appeared highlighted and selected at the left-hand
    side in the Connection list dialog box. Make sure you click on the tab for the
    new connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `sensors/quadcopter500/altitude` in the Topic drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following text in the Data textbox: `1417 f`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Publish button. MQTT-spy will publish the entered text to the specified
    topic and you will be able to see the message in both the MQTT.fx subscriber and
    the `mosquitto-sub` subscriber.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As happens with any security configuration, any checkbox that isn't activated
    based on the previous instructions won't allow the MQTT client to establish a
    connection with Mosquitto. It is very important to remember that the certificates
    use the PEM format.
  prefs: []
  type: TYPE_NORMAL
- en: Forcing the TLS protocol version to a specific number
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is good practice to use the highest possible TLS protocol version. By default,
    a Mosquitto server accepts TLS 1.0, 1.1, and 1.2\. If all the clients are capable
    of working with the highest TLS protocol version supported by Mosquitto, we should
    force Mosquitto to use only the highest version. This way, we make sure that we
    won't be vulnerable to attacks on previous TLS versions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will make the necessary changes in the configuration file to force the
    use of TLS 1.2\. If you are running the Mosquitto server in a Terminal window
    in macOS or Linux, press *Ctrl *+ *C* to stop it. In Windows, stop the appropriate
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Mosquitto installation directory and open the `mosquitto.conf` configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In macOS, Linux, or Windows, add the following line at the end of the configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We specified the `tlsv1.2` value for the `tls_version` option to make Mosquitto
    work only with TLS 1.2\. Any client that uses a previous TLS version won't be
    able to establish a connection with the Mosquitto server.
  prefs: []
  type: TYPE_NORMAL
- en: Save the changes to the `mosquitto.conf` configuration file and launch Mosquitto
    again. We specified the TLS version when we configured the connection in both
    the MQTT.fx and MQTT-spy GUI utilities; specifically, we specified TLS 1.2 as
    the desired TLS version for the client, and therefore no additional changes are
    required. We must use the `--tls-version tlsv1.2` option in the `mosquitto_sub`
    and `mosquitto_pub` command-line utilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal in macOS or Linux, or a Command Prompt in Windows, go to the
    directory in which Mosquitto is installed, and run the following command. Remember
    to use the full paths for the `ca.crt`, `device.001`, and `device.key` files.
    In addition, replace `192.168.1.1` with the IPv4 or IPv6 address that we specified
    as the value in the Common Name field when we generated the `server.csr` file,
    that is, the server certificate signing request. If you used a host name as the
    value in the Common Name field instead of an IPv4 or IPv6 address, you will have
    to use the same host name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The previous command specified the use of TLS 1.2, and therefore the MQTT client
    can establish a connection with the Mosquitto server and publish the message.
    If we specify a different TLS version, the `mosquitto_pub` command won't be able
    to connect with the Mosquitto server.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see whether you can answer the following questions correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Which is the default port number for MQTT over TLS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1883`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`5883`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`8883`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following utilities allows us to generate an X.509 digital certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenX509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TLS4Devs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenSSL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we use MQTT over TLS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are both bandwidth and processing overheads compared to MQTT over TCP
    without TLS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is just a small bandwith overhead but no processing overhead at all compared
    to MQTT over TCP without TLS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no overhead compared to MQTT over TCP without TLS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following can we use to secure and encrypt communications between
    the MQTT clients and the MQTT server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TCPS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TLS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTPS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we specify `true` as the value for the `require_certificate` option of the
    Mosquitto configuration file (`mosquitto.conf`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clients that want to connect to the MQTT server will require a client certificate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clients that want to connect to the MQTT server won't require a client certificate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clients that want to connect to the MQTT server can provide an optional client
    certificate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rights answers are included in the [Appendix](d9cf708f-f027-4bfa-a2d2-9fd3653165d9.xhtml), *Solutions*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we generated a private certificate authority, a server certificate,
    and client certificates to enable TLS transport security and TLS client authentication
    with Mosquitto. Communications between MQTT clients and the MQTT server are encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: We worked with OpenSSL to generate self-signed digital certificates for our
    development environment. We tested the MQTT TLS configuration with MQTT.fx, MQTT-spy,
    and Mosquitto command-line utilities. We forced Mosquitto to use only a specific
    TLS version.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other security topics related to MQTT servers and Mosquitto.
    We will work with some of them in forthcoming chapters, in which we will develop
    applications that will use MQTT with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to encrypt communications between MQTT clients and
    the Mosquitto server, we will understand MQTT libraries and we will write Python
    code to control a vehicle with MQTT messages delivered through encrypted connections,
    which are the topics that we are going to discuss in [Chapter 4](87908cb8-83ed-4b74-bfc5-dd0c4ddd93aa.xhtml),
    *Writing Code to Control a Vehicle with Python and MQTT Messages*.
  prefs: []
  type: TYPE_NORMAL
