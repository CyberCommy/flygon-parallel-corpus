- en: Chapter 7. Choosing How You Develop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving into the HTML5 development flow will require you to move away from the
    applications which become familiar during the Flash development cycle. Applications
    such as Flash Professional, Flash Builder, and Flash Develop are all specifically
    designed to work with Flash content and Flash content alone. As great as these
    applications are, there are many similar HTML5 development applications that allow
    you to build rich web experiences in a very similar manner that you are used to.
    This chapter will cover the process of moving away from using the Adobe Flash
    Professional development environment and beginning the hard decision of what new
    development software to use when creating your HTML5 projects. Although there
    is an endless variety of great software that you could use, this chapter will
    cover many of the new and popular applications that the web developers are using
    right now.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what is needed in an HTML5 IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools for asset creation and manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating interactive animated HTML5 elements with Adobe Edge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of some of the most popular HTML5 code editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools for code execution and run time testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing the Flash development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best part of developing applications in the Flash environment is the fact
    that Adobe has put in a ton of time building the tools and applications contained
    in the Creative Suite which allow you to create your entire application within
    their application set. Although, there is an argument that this system is confining
    and slow to update. The fact of the matter is, when all of the right tools are
    available to help you build your applications, jumping into your next project
    is that much easier. Since it's not regulated or controlled by one specific company,
    HTML5 development is a much more open development platform as developers can freely
    choose how and what they use to build their projects.
  prefs: []
  type: TYPE_NORMAL
- en: I must emphasize, in this chapter we will overview many of the common methods
    and applications that HTML5 developers are using to get the job done. Of course,
    none of these applications or methods are the absolute right way to build HTML5
    projects, hopefully you will find an application that fits what you are looking
    for. As time progresses and you build more and more HTML5-related projects, be
    sure to always put in the extra effort when researching the best tool for the
    job at hand. The rapidly changing environment leads many projects to rise and
    fall in a short period of time. Staying on top of what is out there will help
    to keep you on top of the game, as well as continue to extend your HTML5 development
    skill set.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements of HTML5 development environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to writing HTML, CSS, and JavaScript all within the same code
    editor, there are some general considerations that most developers usually make
    to ensure that they acquire a feature set that suits their needs. Since the entire
    HTML5 stack is rendered as plain text documents, technically any text editor will
    get the job done. Although every developer has their own unique setup and development
    style, there are many common pieces of functionality that are always worth looking
    out for.
  prefs: []
  type: TYPE_NORMAL
- en: Asset and file management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having the ability to preview and even manipulate assets that are included into
    your projects, such as images, video, audio, and other external assets, directly
    within your development environment can allow you to speed up the development
    flow by containing your focus within a specific application. Applications such
    as Adobe's Dreamweaver, which we will cover in a moment, are a great example of
    a software that has been designed to marry the process of design and development.
    It's worth noting that many of the plain and simple code editors, which will be
    overviewed in this chapter, may not contain features which support easy file and
    asset management. However, when large feature integrations like this are not included
    within code editors, the general end result is a much faster, light-weight application.
  prefs: []
  type: TYPE_NORMAL
- en: Code highlighting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with any programming language, code highlighting or coloring is an essential
    feature to have within your code editor. The ability to easily understand what
    parts of your code are doing what, will allow you to not only develop your applications
    with greater ease, it will also help you understand other developer's code with
    far fewer issues. Code highlighting is also the key in making sure you're writing
    your code in the proper language syntax. For a code editor to be able to properly
    color or highlight your code, the applications must be able to properly recognize
    and parse the specific language that your code has been written in. Therefore,
    keeping an eye out for code-editing applications that have support for the specific
    programming language you intend to use it for is critical when attempting to find
    the best fit. Luckily, in our case, HTML5 development or HTML, CSS, and JavaScript
    development is widely supported by many code-editing applications available, so
    the amount of choice you have is extremely substantial.
  prefs: []
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having good code completion built into the code editor you choose to use can
    be a huge help with attempting to learn a new programming language. If you have
    spent time using Flash Builder in your Flash development career, I am sure that
    you have already seen how much faster you can write good, working code. Although,
    some developers argue that code completion just creates a lazy developer who avoids
    remembering the specifics of anything in the language syntax. The reality is that
    code completion is used by developers from new to seasoned veterans to avoid delays
    while writing code and to just generally speed up the time it takes to write long
    snippets of code.
  prefs: []
  type: TYPE_NORMAL
- en: When developing Flash applications with development environments such as Flash
    Builder ([http://www.adobe.com/products/flash-builder.html](http://www.adobe.com/products/flash-builder.html))
    or Flash Develop ([http://www.flashdevelop.org](http://www.flashdevelop.org)),
    you are presented with one of the best case scenarios for utilizing code completion.
    Since these code editors are specifically built for writing ActionScript 3, they
    can optimize this development experience by focusing on what is available in the
    ActionScript 3 API.
  prefs: []
  type: TYPE_NORMAL
- en: In reality there are two forms of code completion when developing HTML5 or many
    other languages for that matter. The obvious form of this is auto completing text
    as you type. An example of this would be when you have typed a declared variable
    name and hit the *.* key to get ready to specify a property on that object. Some
    editors will generate a dropdown menu below the active line of code with a list
    of available properties you can append on the current object. This form of code
    completion can be super handy when learning a new language as it is laying out
    the available possibilities right in front of you as you develop. The second form
    of code completion is the generation of larger snippets of code. For example,
    when you attempt to declare a new function by typing the word `function` in your
    code editor some editors will recognize this and automatically generate the default
    function layout for you. All you have to do is fill in the internal code and you're
    done. Some developers have issues with this feature as it may not generate the
    code to their exact specification, but many editors now support the ability to
    modify the pre-existing code snippets and even add your own.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and manipulating assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a developer with previous experience creating applications in Flash, you
    may have grown accustomed to using the Flash Professional development environment
    to not only store your application asset files in SWC files for project inclusion,
    but to build entire projects as well. The ability to work with project assets
    within a feature-rich development environment such as Flash Professional is one
    of the reasons why Flash became so popular in the first place. When moving to
    HTML5 development, it would be a shame to lose such a great development environment
    for building and manipulating assets. Luckily, with the popularity of HTML5 booming,
    many new exciting projects and applications have been released to bring this type
    of asset control to the web development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe Edge Animate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As Adobe grows its products into a fully cloud-based software setup, they have
    also introduced a number of HTML5-based projects allowing web developers to easily
    create HTML5 content in the traditional Adobe user-friendly environment. One of
    the newest and exciting pieces of software in this collection is Adobe Edge. Edge
    allows for easy creation of interactive and animated HTML5 content, all within
    a point and click user interface. In essence, you can think of Edge as the replacement
    for the Flash IDE when developing with HTML, CSS, and JavaScript in the HTML5
    stack. Although this software has nowhere near the current power that the Flash
    IDE supports, its feature support has been growing on an exponential scale since
    it has been released.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adobe Edge can be downloaded for free by signing in to Adobe''s Application
    Manager. Head over to [http://html.adobe.com/edge/animate](http://html.adobe.com/edge/animate)
    to download Edge and sign up for an Adobe account if you haven''t done so already.
    Once you have set up your account, locate the **Edge Tools & Services** section
    within the Application Manager and download the software to your computer. It''s
    worth noting that, as mentioned, this new cloud-based software delivery system
    is the new direction Adobe is heading in to enable easier access to the software
    in their catalogue. You can easily test out any other product by Adobe by clicking
    on the **Try** link under each of the available software descriptions as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adobe Edge Animate](img/3325OT_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have managed to get Edge downloaded and installed, fire it up, and
    you can get your first glance at the user interface. Although, it is not exactly
    like the Flash Professional user interface you may be used to, you can probably
    see many similarities that will easily allow you to integrate your existing Adobe
    user interface skills you gained from Flash, Photoshop, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adobe Edge Animate](img/3325OT_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a moment to overview some of the exciting features and support
    Edge has for unique features such as CSS3 filters and animations. We can start,
    as most do, with a simple blue box, our Hello World of the user interface realm.
    The main toolbar by default is located on the top of the window and the square
    shape tool is easily found within:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adobe Edge Animate](img/3325OT_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s worth glancing at some of the other tools within the toolbar as they
    will be pretty familiar and self-explanatory. Regardless, we will come back and
    check those out shortly. For now we will select the square shape tool and draw
    a decently-sized rectangle on the stage presented in the user interface. Take
    notice of how similar this process is to creating content in Flash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adobe Edge Animate](img/3325OT_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default your shape won't be blue, so after it has been placed on the stage,
    head over to the **Properties** panel located on the left side of the application
    window by default and modify the color of the shape by using the color selector.
  prefs: []
  type: TYPE_NORMAL
- en: With our box ready to be animated, let's move our focus down to the **Timeline**
    panel displayed on the bottom of the application window by default. As mentioned,
    if you spent any time with Flash Professional and timeline-based animations, this
    feature within Edge will not only be familiar, but should probably excite you
    as well. If the concept of timeline animations is new to you, it is the process
    of controlling an element within the application view over a set amount of time.
    By defining how your assets animate over time, you can easily control their behavior
    on a specific playback interval. To demonstrate this, we will use the timeline
    to animate our new blue rectangle around the stage, applying different effects
    and properties to it as it moves around.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we will enable the Toggle Pin which will easily allow us to set the
    new state of an element within a key frame of the animation timeline. The Toggle
    Pin is located in the **Timeline** panel in the top button navigation. It is represented
    with a blue pin marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adobe Edge Animate](img/3325OT_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the Toggle Pin activated, when the timeline is set to a new position, any
    update to the element will only be applied within that new key frame. The resulting
    action will be an automatically created motion tween over a given period of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'By dragging the play head on the timeline to 1 second, we have now told Edge
    to start applying new properties to any element on the stage. So, let''s drag
    our blue box from the top-left corner of the stage to the top-right corner and
    then hit the Space bar to view the resulting animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adobe Edge Animate](img/3325OT_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, in text you will have to take my word, but the resulting action is
    that of what you are used to when tweening elements in Flash. As the play head
    travels from 0 seconds to our new keyframe at 1 second, the position of the blue
    box is automatically updated to animate the position from start to finish. As
    simple as this example is, it not only presents many of the extremely similar
    aspects Edge has with Flash Professional, but it highlights the core of what Edge
    has been made to do.
  prefs: []
  type: TYPE_NORMAL
- en: Let's spend a bit more time checking out what else can be done to our blue box
    by checking out what is available within the **Properties** panel. Without getting
    into too much detail of every bit of the **Properties** panel, the easiest way
    to sum it up is that it is obviously inspired by the **Properties** panel in Flash
    Professional. Although some of the properties available to you within Edge are
    different than that of Flash, the layout and style is almost identical. If Adobe
    Edge interests you, it would be worth spending some time and checking out some
    of the available properties that are available in the current release. I also
    recommend that when testing, open the published files in as many of the browsers
    you have at your disposal, from desktop to mobile. Get an idea as to how different
    devices and platforms react to the load of HTML5 animations to better judge how
    far to push your applications in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, at any time during your development or testing phase, you can select
    the **Preview in Browser** option in the **File** menu to view how your current
    project looks and feels within an actual web browser. This is also a perfect time
    to dig into the generated source code to get a better idea as to what the Edge
    compiler has actually done for us.
  prefs: []
  type: TYPE_NORMAL
- en: Edge builds the application source into HTML, CSS, and minimized JavaScript
    files and saves the JavaScript data with the filename of `YOUR-PROJECT-NAME_edgePreload.js`.
    Although this minimized JavaScript is hard to read or understand, it is set up
    to be as small of a filesize as possible to optimize the loading when retrieved
    over the Internet by your end users.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe Edge also contains a built-in code editor to allow you to easy append
    code into your Edge projects further extending what your web application can do.
    This code editor, though used in a slightly different manner, is an extremely
    recognizable panel to anyone who has written any ActionScript within the Flash
    IDE. Within the code editing panel, you will find a collection of code snippets
    that can be appended to your project with a single click. From adding features
    as simple as a play method call on one of your elements, to dynamically creating
    and destroying new instantiations of your elements, the built-in code snippets
    can easily get you on your feet. The code editor also can simplify the code display
    by only displaying what is needed for you to manipulate your elements. This can
    be toggled by selecting the **Full Code** tab available on the top-right corner
    of the code window and will result in the entire project JavaScript document source
    being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Coding environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generally, the bulk of the work to create an HTML5 project is going to take
    place within an environment set up to allow you to write HTML, CSS, and JavaScript
    all within the same location. Since all of these different development languages
    are all contained in plain text files, there is no specific requirement when choosing
    what editor you could use. However, as HTML5 grows into a more evolved web and
    application development platform, the need for platforms that support features
    such as media integration, code formatting and completion, device testing and
    debugging have pretty much become a must. Many software titles that have been
    around since before HTML5 have updated their feature set to include support for
    HTML5 development and have added new features to make developing for the Web easier.
    A perfect example of this in action is the latest version of Adobe's Dreamweaver
    included in the latest version of the Creative Suite.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe Dreamweaver CS6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since the Adobe Creative Suite should already be somewhat familiar to you,
    we will start the overview of HTML5 code editors with Adobe''s Dreamweaver. Dreamweaver
    has been a part of the Creative Suite since Version 3\. Although you may find
    that many web developers have a love or hate relationship with Dreamweaver, because
    of its ease of accessibility if you have purchased the Creative Suite, many web
    developers have used it at one point or another. The important thing to note now,
    regardless of if you have used Dreamweaver before or not, is that Adobe has added
    a ton of new features specifically related to HTML5 web development to aid in
    your entire development cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adobe Dreamweaver CS6](img/3325OT_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I won't dive too deep into the use of Dreamweaver, as there are many great books
    and tutorials available all over the Web to aid you when starting to learn its
    feature set and user interface. I will, however, overview some of the new and
    exciting features that Dreamweaver CS6 has included to allow web developers to
    integrate HTML5 elements and features into their web projects with ease. It is
    worth noting that many of these features, at the time of writing this book, are
    only available in the second update to Dreamweaver CS6 on the Creative Cloud.
    Users who have the natively installed version of Dreamweaver are currently out
    of luck. If you are interested in testing some of these features yourself, download
    the 30-day trial of Dreamweaver from the Creative Cloud and give it a go.
  prefs: []
  type: TYPE_NORMAL
- en: Audio and video embedding
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The latest update to Dreamweaver CS6 added some great new features surrounding
    the inclusion and manipulation of HTML5-ready audio and video files into your
    documents. As with many forms of media that can be imported into your HTML5 projects,
    audio and video can now be easily selected from your project source directories
    and placed into your document with a couple of clicks. Setting element properties
    such as auto play, enabling playback controls, and even setting poster images
    can all be done directly from within the Dreamweaver user interface. This process
    can not only ensure you are developing your media playback code to proper syntax
    specification, but easily allows you to set playback alternatives for browsers
    and platforms that only support specific file types.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe Edge support
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As you have already learned about some of the power of Adobe Edge Animate, you
    can probably understand why direct Adobe Edge integration into Dreamweaver is
    a huge win for web developers. Rather than manually stripping the exported data
    from your Adobe Edge projects and applying them into your own, you can now seamlessly
    integrate your interactive and animated elements right into your Dreamweaver project.
    If you have ever been fortunate enough to save a couple hours with the **Import
    From Photoshop** feature in Flash Professional, you will easily understand how
    this cross-application communication can save you countless hours of development.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap and jQuery Mobile support
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You may be surprised to learn that Adobe actually played a major role in the
    development of the jQuery Mobile framework. It seems the relationship is still
    strong, as Adobe has continued its full jQuery Mobile support from Dreamweaver
    CS5.5 into CS6\. The newest jQuery Mobile feature updates have made it incredibly
    easy to theme your jQuery Mobile projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PhoneGap and jQuery Mobile support](img/3325OT_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, the jQuery Mobile **Swatches** panel
    allows us to easily select specific elements within the live view of our project,
    and apply new theme properties to that element with a click of the mouse. The
    resulting code update is presented as the highlighted change showing you what
    has been modified in your existing document. This feature moves far beyond supporting
    just the default jQuery Mobile themes. Dreamweaver will automatically detect any
    customized themes that have been appended into your project and allow you to continue
    to manipulate and implement that theme within the Dreamweaver jQuery Mobile **Swatches**
    panel. You can drill your selection down to specific elements within your webpages
    and modify assets such as icons and fonts as well. The most popular HTML5 mobile
    framework just became a lot easier to use.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap users are not left out in the cold either. If you are looking to build
    your mobile projects into native applications Dreamweaver has made it extremely
    user friendly from a developer's perspective. The new PhoneGap **Build Service**
    panel allows you to build your current working project for any of the support
    mobile platforms with a couple clicks of the mouse. Your PhoneGap builds can be
    sent and downloaded from the PhoneGap build server all from within Dreamweaver.
    Building native applications in HTML5 for five different popular mobile platforms
    has never been easier or more user friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Fluid Grid Layout and HiDPI support
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The new **Fluid Grid Layout** system in Dreamweaver allows you to easily target
    and customize your webpage layouts for specific devices right from project creation.
    With the grid system activated in your page layouts, you can begin specifying
    exactly how many columns a specific element can take up. If the browser window
    is resized or the page is loaded on a display that is above or below the targeted
    screen resolutions, the grid system will automatically respond to the change by
    updating how many columns will be displayed. The concept of laying out elements
    within your webpages is not a new one. However, with the release of so many devices
    which can now access your content, the requirements to stay on top of modern display
    specifications can be draining. Adobe has enabled Dreamweaver users to easily
    integrate an optimized condition set allowing for easy responsive web design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fluid Grid Layout and HiDPI support](img/3325OT_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Today we are seeing mobile and desktop screens getting higher in pixel density.
    The need for proper environments that will allow developers to test on these displays,
    even if they do not have access to one, has become a must. Dreamweaver has now
    integrated **HiDPI** support into an easy to use user interface making testing
    for specific display types a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: Aptana
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''re coming from a Flash development background that mainly existed in
    Flash Builder, then Aptana ([http://www.aptana.com](http://www.aptana.com)) may
    be worth a look. Built on the same Eclipse ([http://www.eclipse.org](http://www.eclipse.org))
    editor that Flash Builder has been created with, Aptana brings an extremely recognizable
    code development user interface to many Flash developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aptana](img/3325OT_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Aptana includes a ton of great features specifically designed to aid with web
    development. Code-assist features are in place to aid with HTML, CSS, and JavaScript
    syntax and deployment wizards can easily integrate automated file updating to
    your public web server. Aptana also contains built-in support for Git integration
    so you can easily integrate version control support for your projects. Like Flash
    Builder, Aptana allows you to easily add multiple projects into the application
    at the same time. Having the code from multiple projects in front of you can easily
    save you time when referencing source code from a feature you added elsewhere.
    Aptana is free to use, open source, and actively developed on by a large group
    of contributors.
  prefs: []
  type: TYPE_NORMAL
- en: Brackets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the newest and the most exciting HTML5 code editors in the works is Brackets
    by Adobe ([http://brackets.io/](http://brackets.io/)). This open-source editor
    is not only designed specifically for HTML5 developers, but the application itself
    is actually written with the HTML5 stack, allowing you to easily customize your
    editing experience.
  prefs: []
  type: TYPE_NORMAL
- en: Brackets is actually an amazing representation as to how far HTML development
    has come in the last couple years. The ability to create such a rich interactive
    environment to manipulate local files on your computer with web technology is
    just another step in moving towards a completely web application-based lifestyle.
  prefs: []
  type: TYPE_NORMAL
- en: Brackets is still in the early development process but is already in a useable
    state to be used by anyone today. Despite being written in HTML, CSS, and JavaScript,
    since it is packaged and run as a desktop application, it can easily create and
    manipulate file on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: To start using Brackets, you will need to head over to the project website to
    get the links to the latest builds ([http://download.brackets.io/](http://download.brackets.io/)).
    As with many open source projects, as the end user, you will be presented with
    the choice to download a pre-packaged build of the software which is usually the
    most stable. Or you can download the nightly, or latest development build which
    the contributors to the project are actively working on. Development builds are,
    as you may assume, unstable and may result in some issues upon usage. However,
    if you are willing to brave the storm of buggy software, the information and experiences
    you have while using it can be extremely important to the development team working
    on the project. Submitting issues and bugs that you may have encountered during
    your usage should be logged within the Brackets **Issue Tracker** on their GitHub
    project account ([https://github.com/adobe/brackets/issues](https://github.com/adobe/brackets/issues)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of example, I will download the latest pre-packaged stable
    build of the software to show you some of the exciting features that Brackets
    has to offer. After downloading the installer and running it, open up the application
    on your Windows or OS X-based machine. On the initial boot up of the application,
    you will be presented with a default example setup that will look something like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Brackets     ](img/3325OT_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, the interface, though familiar to
    many of you, is extremely simplistic yet elegantly styled and laid out.
  prefs: []
  type: TYPE_NORMAL
- en: Inline editing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the coolest features currently built into Brackets is its easy to use
    inline code editing system. As a web developer, you will find yourself jumping
    from not only program to program while developing your projects, but from file
    to file containing a completely different language of code. To simplify this process
    and speed up the development of elements within your documents, Brackets allows
    you to select elements within your HTML files, and view their relative CSS styles.
    To accomplish this, select an element within the HTML example file, and press
    *Ctrl* +*E* or *Cmd* + *E* (depending on your operating system) to display the
    styles for that element directly within the same HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'No longer do you have to waste time sifting through line after line of CSS
    in dedicated CSS files to find your element styles. Now Brackets can do all the
    hard work searching while you continue to write code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inline editing](img/3325OT_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the inline editor is displayed (as seen in the preceding screenshot under
    the `<body>` HTML element tag), not only can you easily edit the styles related
    to the selected element, but some important data is also displayed. In the top-left
    corner of the inline style window is the filename of the document containing the
    relative styles and beside the filename is the line number where the styles can
    be located.
  prefs: []
  type: TYPE_NORMAL
- en: As simple as the concept of inline editing is, we can take it even further by
    inspecting the styles of elements that contain multiple styles definitions. For
    example, looking at the following link element in brackets displays a number of
    different styles which are all applied to the same element in one way or another.
    By selecting the different definitions in the inline editor, you can easily switch
    between each of the style settings, edit them, and continue on your way. Of course
    this inline editing concept is not only for HTML and CSS, it reaches in your JavaScript
    development cycle as well. The team behind Brackets is still building more of
    this inline editing functionality into the application by extending features such
    as color and gradient selections.
  prefs: []
  type: TYPE_NORMAL
- en: Live Preview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Another great feature already built into Brackets is **Live Preview** . Instead
    of the traditional method of editing code, saving it, and then moving over to
    the browser to test it, the Live Preview system simplifies this into an automated
    test build as you type. When the **Live Preview** button is activated in the top-right
    corner of the application window, the default system web browser will open containing
    the current working HTML page. As mentioned, with this feature selected, you can
    continue to modify the current document and view the reflected changes as you
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live Preview](img/3325OT_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot illustrates a change to the body element background-color
    style property, changing it from white to red. This simple automated save and
    reload functionality is just another piece of Brackets that allows web developers
    to spend less time doing recurring time consuming tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Thanks to the fact that Brackets is open source and created with the same platforms
    it is intended to be used for, many developers have begun creating their own customized
    extensions and plugins for Brackets. From adding the ability to do custom code
    highlighting with the mouse, to added support for code completion, the spectrum
    of public input has been pretty amazing. Of course you don't have to rely on the
    public to get new features into Brackets. As stated before, the entire project
    has been built with the technology you are learning about in this book. So if
    you are willing to take the jump, attempting to add some new unique feature into
    Brackets could be a great learning project.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The best part of Brackets is not only the fact that it is completely open source,
    freely available, and actively developed, but the entire application is built
    on the HTML5 stack. As your web development skill set grows, the Brackets project
    can be a fantastic place to expand and share your development skills with the
    rest of the world. The development team consistently appends updates and modifications
    submitted by the public and is always asking for further input from its users.
    Since Brackets is still cooking in the development oven, now is a great time to
    jump aboard and help create what could be the next big HTML5 code editor. All
    of the project information can be found within the project website pages, as well
    as the project GitHub page. If you wish to dive even deeper, hop onto IRC and
    checkout the `#brackets` channel on [freenode.net](http://freenode.net).
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If a light-weight code editor such as Brackets is more up your alley, then
    Sublime Text is another editor worth checking out ([http://www.sublimetext.com](http://www.sublimetext.com)).
    Sublime is simple and light weight and supports massive amount of programming
    languages right out of the box, so it can be used for much more than just HTML5
    development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sublime Text](img/3325OT_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sublime''s multiple text selection feature is one worth noting. When working
    on larger documents of code, the need to make the same edit to a large amount
    of text, such as spacing, seems to come up quite a bit. To alleviate this issue,
    Sublime uses a multiple text selection and edit feature to allow you to easy modify
    many parts of the same document with a single change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sublime Text](img/3325OT_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, Sublime also includes a minimized
    layout of your code to easily allow you to locate specific sections of your code
    based on how they look. As weird as this may sound, surprisingly it is really
    effective. Sublime has a ton of other great features making it one of my personal
    favorite code editors out there.
  prefs: []
  type: TYPE_NORMAL
- en: Available on Window, OS X, and Linux, Sublime can be downloaded and installed
    for free and used indefinitely. However to remove purchase alerts, a license can
    be purchased for $70 USD from the Sublime Text website ([https://www.sublimetext.com/buy](https://www.sublimetext.com/buy)).
  prefs: []
  type: TYPE_NORMAL
- en: Execution and testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of the software titles shown so far have contained their own methods to
    aid you in the process of testing and debugging your websites and applications.
    However, the amount of technology out there to test for and test with is growing
    at a rate which makes it very hard for a specific piece of software to stay on
    top. Having a library of different applications and services at your disposal
    will not only allow you to test many different aspects of your project, but possibly
    save you a ton of time in the process.
  prefs: []
  type: TYPE_NORMAL
- en: Web browser developer consoles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although we have already spent some time in this book looking into some of
    the functionality contained within many of the popular browser developer consoles,
    there are a couple other aspects of the console that are worth looking into when
    considering frontend execution benchmarks and tests. As your projects grow in
    size and complexity, the requirement that you spend time optimizing the flow and
    execution of your application grows with it. If you have ever had the chance to
    use the Adobe Flash Profiler or Adobe Scout to dig into how and what your application
    is doing during runtime, you may already understand the benefit of this type of
    precaution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web browser developer consoles](img/3325OT_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is from the new Adobe Scout ([http://gaming.adobe.com/technologies/scout/](http://gaming.adobe.com/technologies/scout/))
    profiling tools used by game developers to look at what is going on inside their
    game as it is actually being played. Moving out of the realm of Flash development
    unfortunately means dropping the use of great new applications and profilers such
    as Scout, however, there are many alternatives available to you as a HTML5 developer,
    we will just need to go hunting for them.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the 2013 Adobe Max Conference, details of a new version of Adobe Scout
    specifically built for HTML5 development in the works were discussed. Keep an
    eye out for this fantastic tool's release date on the Adobe website. You can also
    watch the video demonstration from the conference at [http://tv.adobe.com/watch/max-2013/adobe-scout-profiling-taken-to-the-next-level/](http://tv.adobe.com/watch/max-2013/adobe-scout-profiling-taken-to-the-next-level/).
  prefs: []
  type: TYPE_NORMAL
- en: We have already spent some time looking at the JavaScript or web developer consoles
    in many of the popular web browsers today, but there are many more features these
    panels contain that can aid in running tests and benchmarks on your project prior
    to releasing it to the public.
  prefs: []
  type: TYPE_NORMAL
- en: Network analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many developer consoles within web browsers contain network consoles which
    allow you to visualize how the data within your webpages are loading from the
    perspective of your users. Open the console up prior to loading the page and when
    the page is loaded, the real-time data is passed into an easy-to-read table that
    can display exactly what files are being loaded, if they succeeded or failed loading,
    what the filesize of the asset was, as well as exactly how long it took to load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network analysis](img/3325OT_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Combining all of this data can easily allow you to find issues within your webpages
    that you may have missed during the development phase. One easy thing to look
    out for is what the total page load size is once the page has completely loaded.
    Keeping in mind the various methods and speeds at which users connect to the Internet,
    it is always wise to think of the end user first when attempting to optimize the
    filesize of the assets used in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Timeline profiling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With many of the common built-in timeline profiling tools, you can literally
    hit the record button and capture exactly what is going on under the hood of your
    application during runtime. When events are captured, they are displayed in real
    time and displayed with the total memory usage. This data can be extremely helpful
    when attempting to locate where any potential memory leaks in your application
    may be taking place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timeline profiling](img/3325OT_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If some of these forms of application analysis methods are foreign to you, don't
    worry, we will be covering more on this topic in the chapters to come. Spending
    the time to check out how well your websites and applications actually run on
    different platforms can save you a ton of headaches post launch.
  prefs: []
  type: TYPE_NORMAL
- en: Stats.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dealing with the concept of **Frames per Second** or **FPS** in Flash is regular
    occurrence. Since the entire platform is built on the concept of a timeline, having
    your application run at a specific FPS or at its maximum FPS is usually the end
    goal of every Flash project. During your Flash development career, there may have
    been a chance you ran into, or even used, a version of Mr. Doob''s Hi-ReS Stats
    script ([https://github.com/mrdoob/Hi-ReS-Stats](https://github.com/mrdoob/Hi-ReS-Stats)).
    This great little piece of code allows you to easily append an overlay on your
    applications displaying the FPS over time as well as the current amount of memory
    your application is using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stats.js](img/3325OT_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous example from a prototype found on the great Flash
    resource site WonderFl ([http://wonderfl.net/c/6fCf](http://wonderfl.net/c/6fCf))
    the stats script is being used to display how well this Rubik's cube application
    is running as it is used. This is extremely handy when attempting to find locations
    in the execution of your projects that may be causing issues.
  prefs: []
  type: TYPE_NORMAL
- en: Although the idea of FPS within HTML5 development is not exactly the same, as
    static HTML pages don't have an active FPS during or after they are loaded. However,
    when dealing with animation and timer intervals within JavaScript, the FPS concept
    can be used as we have become used to in Flash development. Thanks to the work
    of Mr. Doob, the `Stats` script that once only existed for Flash project is now
    available to be used within your HTML5 projects as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit [https://github.com/mrdoob/stats.js/](https://github.com/mrdoob/stats.js/)
    to download the latest version of the project. Implementing the `Stats` display
    in JavaScript is a little more involved than with ActionScript 3, however, it
    is still relatively straightforward. Take a look at this example implementation
    of the `Stats` display from the project documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The major difference here is the fact that you are required to create the interval
    from which the `Stats` window will draw its calculations on your own. Since, as
    mentioned, JavaScript isn't based on a frame-based development paradigm, applying
    your own method for application intervals is the only way for data such as frames
    per second to be calculated. This is easily accomplished by using the built-in
    `setInterval()` method in JavaScript and setting the intended frame rate manually.
    Since the time a frame will be rendered in will be effectively emulated, we can
    do some simple math to get things in line to what we are already used to. In the
    previous example, we have set the interval duration to *1000/60*, where *60* is
    the intended frames per second value. This calculation is equal to *16.66666666666667*
    which is the millisecond value to sum 60 intervals in a single second. So after
    the `Stats` object is created and the display mode is set with the `setMode()`
    method, you will also need to manually set up the display location on the display.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue to dig deeper into some of these applications as well as overview
    more platforms that can aid in project testing and benchmarking in the upcoming
    chapters. As I mentioned a couple chapters ago, the importance of going over your
    finished project in great detail to test execution time, memory usage, and browser
    performance is extremely important in making sure you can trust that everyone
    can view your content as you have intended in design. Web development lacks the
    benefit of the Flash compiler to automatically optimize our applications prior
    to runtime. The job is up to you to make sure your programs run smooth.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The one thing I probably can't stress enough is how important it is for you
    to go out and explore as many of the different applications and other services
    that you can. The better understanding you have about what is available to you,
    as the web developer, the better you can judge what the right tool for the job
    at hand is. If it hasn't sunk in yet, though similar in many aspects, HTML5 development
    is far more of an open style of development. Without the need to use a specific
    application set, you are free to do and use whatever your heart desires. This
    chapter barely scratches the surface of some of the popular applications developers
    are using today. However, it is my hope that with this general overview of the
    software that was explained, you can start developing your own HTML5 applications
    with the best tool for the job.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, will take a look at some of the popular options for pushing
    JavaScript even further by compiling not only JavaScript to other programming
    languages, but other programming languages to JavaScript.
  prefs: []
  type: TYPE_NORMAL
