- en: Chapter 1. Ajax Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing simple navigation using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tab navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing components using Ext JS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event handling in MochiKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building tab navigation using Dojo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a chart application using YUI library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading dynamic content using jQuery slider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Ajax shopping cart using MooTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Ajax login form using prototype.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to work with the most famous JavaScript libraries
    and frameworks with capabilities of Ajax functionality. These libraries were selected
    by our subjective opinion and we are not trying to say which library/framework
    is better or worse. Each of them has its advantages and disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: Designing simple navigation using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**jQuery** is a development framework that allows us to use JavaScript in our
    HTML document. Now we will build a simple navigation using the basic jQuery features.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can begin, we need to include the latest jQuery library. We can download
    it from the download section at [www.jquery.com](http://www.jquery.com). We will
    save it in our JavaScript folder named `js`, in the root of our HTML document,
    for example, `cookbook`.
  prefs: []
  type: TYPE_NORMAL
- en: All libraries mentioned in this book are also available in an online cache such
    as [http://code.google.com/apis/libraries/](http://code.google.com/apis/libraries).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download the example code fles for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the fles e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we can start coding our `task1.html` page. We'll place it in the `cookbook`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's explain what we have done in the preceding code snippet. The main
    idea of our script is to find each hyperlink`<a>` in the document, prevent its
    default functionality, and display the hyperlink content in our `placeHolder`.
    From the beginning, we started with `doctype` and the main HTML layout. The body
    of the page contains a `navigation` and a `placeholder` element for the dynamic
    content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important part for jQuery functionality is to include our jQuery library.
    Let''s place it before the closing`<body>` tag. This will allow the HTML of a
    page to load first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After loading our HTML page and when the document is ready, we can define our
    JavaScripts scripts in the `$(document).ready()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This can be also shortened to `$():`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The dollar sign `$()` represents an alias to the `jQuery()` factory function.
    Within this function we can use all the CSS selectors like ID, class, or exact
    tag names. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$(''a''):` Selects all hyperlinks in our document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$(''#myID''):` Selects the element with this ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$(''.myID''):` Selects all elements with this class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we are selecting all hyperlinks in the `navigation <div>` and
    defining their own functionality with an event handler for `click` events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And the last step of our example is creating the `title` VAR and HTML string,
    which goes to the `placeHolder:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding example was really simple. But there is a lot more that jQuery
    can offer to us. This includes special selectors, effects, DOM manipulation, or
    Ajax functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can specify our selectors more precisely. For example, we can specify which
    hyperlinks should be affected based on their `href` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'jQuery also covers all possible events (`click`, `blur, focus, dblclick`, and
    so on), visual effects (`hide`, `show, toggle, fadeIn, fadeOut`, and so on), or
    DOM manipulations (`appendTo`, `prependTo`, and so on). It has a full suite of
    AJAX capabilities, which are really easy to use, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: But we will have a better look at more jQuery features in further tasks and
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Ajax Libraries"),*AJAX using jQuery*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Basic Utilities"),*jQuery UI*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Useful Tools Using jQuery"),*Useful tools
    using jQuery Creating tab navigation*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating tab navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**jQuery UI** is built from the core interaction plugins of jQuery. As a high-level
    framework, it makes creating effects and animation easy for every developer. Now
    we will build a tab navigation using jQuery UI.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we need to include the jQuery library from [www.jquery.com](http://www.jquery.com),
    if we haven't done it in the preceding recipe. Then, we can download jQuery UI
    library from [www.jqueryui.com/download](http://www.jqueryui.com/download). On
    this page, we can download specific modules or the whole library. We can select
    the theme we like or create our own one with advanced theme settings. For now,
    we will select the whole library with the `ui-lightness` theme.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are ready for coding. Let's start with the HTML part. This part will
    define a `navigation` element with three tabs and one accordion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When the HTML is ready, we can continue with CSS and JavaScript CSS styles
    in the`<head>` tag, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add JavaScript before closing the`<body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Our result looks like the following:![How to do it...](graphics/3081_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The downloaded jQuery UI contains the whole CSS content of the selected theme
    (jquery-ui.custom.css). All we need to do is to include it in the`<head>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After CSS, we include jQuery and the jQuery UI library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The JavaScript part is really simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It is important to fit the required HTML structure. Each hyperlink is targeting
    the HTML content in selected`<div>` tags. To create a relation between them we
    will use `#id` in each hyperlink and the ID of the selected`<div>` tag (for example,
    `tabs-1)`.
  prefs: []
  type: TYPE_NORMAL
- en: There is an exception in the third tab, which loads the requested data via Ajax.
    In this case, we do not define any target area, as it will be created automatically.
    As you can see, using the Ajax in jQuery UI is really easy and comfortable.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'jQuery UI offers us a lot of options. We can use just a default functionality
    as was presented in the preceding code snippet or some additional functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Content via Ajax: | `$( "#navigation" ).tabs({ajaxOptions: {} })`; |'
  prefs: []
  type: TYPE_TB
- en: '| Open on mouseover: | `$( "#navigation" ).tabs({event: "mouseover"})`; |'
  prefs: []
  type: TYPE_TB
- en: '| Collapse content: | `$( "#navigation" ).tabs({collapsible: true})`; |'
  prefs: []
  type: TYPE_TB
- en: '| Sortable: | `$( "navigation" ).tabs().find( ".ui-tabs-nav" ).sortable({ axis:
    "x" })`; |'
  prefs: []
  type: TYPE_TB
- en: '| Cookie persistence: | `$( "#navigation" ).tabs({cookie: { expires: 1 }})`;
    |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Useful Tools Using jQuery"),*Useful tools
    using jQuery Designing components*'
  prefs: []
  type: TYPE_NORMAL
- en: Designing components using Ext JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ext JS** is a JavaScript framework that offers a lot of cross-browser user
    interface widgets. The core of Ext JS is build-on component design, which can
    be easily extended to meet our needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can download the latest version of Ext JS framework from [www.sencha.com](http://www.sencha.com),
    Ext JS section. Now, we are ready to build a classic Ext JS layout with two columns
    and one accordion. We can also prepare a simple HTML file `ajax/center-content.html`
    to test the Ajax functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we will include mandatory files like CSS and Ext JS library files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will continue with the `onReady` function, which will run our script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Our layout with an accordion navigation is ready:![How to do it...](graphics/3081_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ext JS is built for developers, to make their lives easier. As you can see
    in the source, we have built a layout with a simple JavaScript object. We have
    a "Viewport" with two items. One is positioned to the left (region: **West)**
    and the second to the right (region: **East)**. We don''t have to take care of
    the CSS in this case. Everything is handled directly by Ext JS through our variables
    like `width, margins, cmargins`, and so on. The `layout` property is really powerful.
    The inner layout on the **West** side is an accordion with the items **Navigation**
    and **Settings**. In the center column, we can see content loaded via Ajax, using
    the `autoLoad` method.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The possible options for layout are: Absolute, Anchor, Card, Column, Fit, Table,
    Vbox, and Hbox.'
  prefs: []
  type: TYPE_NORMAL
- en: Event handling in MochiKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next lightweight library in this chapter is **MochiKit**. In this task we
    will build a script for listing the `onkeydown` and `onkeypress` events. After
    each event we will display which key was pressed with its key code and key string.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All mandatory files, documents, and demos are available on [www.mochikit.com](http://www.mochikit.com).
    We need to download the whole MochiKit library and save it in our `js` folder.
    Be careful, `MochiKit.js` is just the main file that includes all necessary sub-modules
    from MochiKit (such as, `base.js, signal.js, DOM.js`, and so on). The landing
    page for Ajax requests will be `ajax/actions.php:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the MochiKit framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the JavaScript functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Our result is:![How to do it...](graphics/3081_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `connect()` function connects a signal (Mochikit.Signal API Reference) to
    a slot. In our case, we are connecting our document to the `onkeydown` and `onkeypress`
    handlers to call a `function(e)`. Parameter `e` represents our event object, when
    the `key()` object reference returns key code and string.
  prefs: []
  type: TYPE_NORMAL
- en: '`replaceChildNodes(node[, childNode[,...]])` is a function of Mochikit.DOM
    API Reference, which removes all children from the given DOM element and then
    appends the given `childNode` to it.'
  prefs: []
  type: TYPE_NORMAL
- en: After each `onkeydown` and `onkeypress` event we are sending an Ajax call using
    the `doSimpleXMLHttpRequest()` function. In our example, the request from our
    page looks like `ajax/actions.php?action=onkeydown&key=87`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any object with connected slots can be disconnected by the `disconnect()` or
    `disconnectAll()` functions. In the case that we want to use `connect()` just
    once, we can use the `connectOnce()` function and this will disconnect the signal
    handler automatically once it has fired.
  prefs: []
  type: TYPE_NORMAL
- en: MochiKit allows us to make the most of existing browser-generated events, but
    some of them are not natively supported by all browsers. MochiKit is able to synthesize
    these events, which include `onmouseenter, onmouseleave`, and `onmousewheel`.
  prefs: []
  type: TYPE_NORMAL
- en: Building a tab navigation using Dojo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will have a look at Dojo JavaScript Library. We will build a simple tab
    navigation using the basic functionality of the `Dojo Toolkit` (dojoToolKit).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to include the Dojo Toolkit from websites such as Google CDN ([http://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js](http://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js)
    ) or AOL CDN ( [http://o.aolcdn.com/dojo/1.5/dojo/dojo.xd.js.](http://o.aolcdn.com/dojo/1.5/dojo/dojo.xd.js)
    )
  prefs: []
  type: TYPE_NORMAL
- en: If you want to download the whole Dojo SDK you can find it at [www.dojotoolkit.org/download](http://www.dojotoolkit.org/download).
  prefs: []
  type: TYPE_NORMAL
- en: The landing page for Ajax requests will be `ajax/content1.html:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will include styles from the `claro` theme (included in `dojoToolKit)` in
    the`<head>` tag of our document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We will define our HTML code in the body of our document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When the HTML and CSS is ready, we will include `DojoToolkit` with required
    modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding JavaScript functionality gives us the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When the preceding code snippet is ready and saved, our result will be a simple
    tab navigation with three tabs.![How to do it...](graphics/3081_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see in the source, we are using the Dijit-Dojo UI component system.
    **Dijit** is included in Dojo SDK and includes UI components with four supported
    themes , `(nihilo soria, tundra,and claro)`. We can set which theme we want to
    use by selecting a class within our`<body>` tag. In the preceding example we have
    `class="claro`".
  prefs: []
  type: TYPE_NORMAL
- en: We need to provide the `djConfig` attribute with `parseOnLoad:true` when we
    include the `dojoToolKit` script. Without this, Dojo won't be able to find the
    page elements that should be converted to Dijit widgets.
  prefs: []
  type: TYPE_NORMAL
- en: When we want to use a specific widget, we need to call the required class for
    the widget (`dojo.require("dijit.layout.TabContainer")`) and provide its `dojoType`
    attribute (`dojoType="dijit.layout.TabContainer"`). As an example of using Ajax
    in Dojo, we use the `dojo.xhrGet()` function to get the content of `ajax/content1.html`
    each time we click on `showMe` div.
  prefs: []
  type: TYPE_NORMAL
- en: Building a chart application using YUI library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this task we will use a UI library developed by Yahoo! to build a chart.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The YUI library is available for download on Yahoo!'s developer website ([http://developer.yahoo.com/yui/3](http://developer.yahoo.com/yui/3)
    ). After we save it in our `js` folder, we are ready to start programming.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have to start by including the YUI library in the`<head>` tag of our document
    along with styles for the placeholder of our chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We will place our HTML in the`<body>` tag to mark where our chart will be placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Our JavaScript is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The results after saving and opening our HTML document are as follows:![How
    to do it...](graphics/3081_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YUI Charts are defined in the `Chart` object. For the "document ready" function
    we will use the `(function(){...})()` syntax. We need to specify that we want
    to use `YUI() 'charts'`.
  prefs: []
  type: TYPE_NORMAL
- en: The main part is creating a `Y.Chart` object. We can define how this chart will
    be rendered, how our gridlines will look, where to display our chart, and which
    data to display. We will define axes with the `myAxes` object, which handles the
    legend on the sides. Our data are stored in the `myDataValues` object.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many possibilities and ways to style our charts. We can split the
    chart to the smallest parts and set each property. For example, rotation of the
    label or margin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'YUI also covers an Ajax functionality. This is how a simple Ajax call will
    look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We created the `callAjax()` function, which is triggered by clicking on the
    `Call Ajax` hyperlink. The Ajax call is provided by `YAHOO.util.Connect.asyngRequest()`.
    We defined the HTTP method (GET), requested URL `ajax/content.html`, and `callback`
    functionality with the `success` method, which displays response text in the `'content'
    <div>`.
  prefs: []
  type: TYPE_NORMAL
- en: Loading dynamic content using jQuery slider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this task, we will learn how to load the content of the page dynamically
    using jQuery slider.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we will use the jQuery UI library as well. We can either include
    the jQuery UI library from [http://jqueryui.com/download](http://jqueryui.com/download)
    or from some CDN. Then we will create a folder for our little project, let's say
    `packt1`. There will be more folders in our `packt1` folder; these are `ajax`
    folders for our HTML files loaded via Ajax, CSS for our styles, and `js` for our
    JavaScript libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The folder structure will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since everything is set, we are ready to start.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with basic HTML layout and content. This part already includes
    a link to our CSS given from the jQuery UI library. We can save it as `index.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will add JavaScript libraries and their functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Our `index.html` page is ready and we can create files that are going be loaded
    in our page via Ajax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first page will be ajax/content1.html. This page will contain a slider with
    extra functionality, which will be described later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The second page will be `ajax/content2.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'And the last file in our Ajax folder will be items.html:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, as shown in the following screenshot, we have a multi-functional page with
    four tabs. Three of them are loaded via Ajax and one of them contains a slider.
    This slider has an extra functionality and every change loads a selected number
    of items.![How to do it...](graphics/3081_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the beginning, we started with a simple tab layout with four tabs, using
    the jQuery UI library. One of them (#tabs-1) was included directly in the `index.html`
    file. The jQuery UI library allows us to define `ajaxOptions`, so that we can
    load our content via Ajax. The navigation where we find the required content is
    preceeded by the `href` attribute of each hyperlink. If this target does not exist,
    the `error` method is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: We wanted to have a functional slider on our second tab (named **Books)**. To
    make it work, we can't initialize it in the `$(document).ready()` function, because
    its HTML content hasn't been created yet. We will add slider initialization only
    when we need it in the `success` method.
  prefs: []
  type: TYPE_NORMAL
- en: After each change of slider the `load()` function is triggered. This function
    loads the content of the given target via Ajax. In our case, we use a more specific
    selector with the exact ID of the object, which is displayed in our result box.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this task we were using only the basic function `load()`, but jQuery offers
    more Ajax methods, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `$.ajax` | Performs an Ajax request |'
  prefs: []
  type: TYPE_TB
- en: '| `jQuery.post()` | Loads data from the server using HTTP POST request |'
  prefs: []
  type: TYPE_TB
- en: '| `jQuery.get()` | Loads data from the server using HTTP GET request |'
  prefs: []
  type: TYPE_TB
- en: '| `jQuery.getJSON()` | Loads JSON data from the server using HTTP GET request
    |'
  prefs: []
  type: TYPE_TB
- en: '| `jQuery.getScript()` | Loads and executes a JavaScript file from the server
    using HTTP GET request |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Useful Tools Using jQuery"),*Useful tools
    using jQuery*'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Ajax shopping cart using MooTools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This task will show us how to use Ajax with MooTools JavaScript framework. We
    will build a shopping cart with a drag-and-drop functionality. After each UI interpretation
    to add a new item to the shopping cart, we will send an HTTP POST request to the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**MooTools** is available for download at [https://mootools.net/download](http://https://mootools.net/download)
    or in Google''s CDN. For communication between the server and client we will create
    a new file in our `ajax` folder, for example, `addItem.php:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: After creating this dummy PHP file, we are ready to proceed to the programming
    part of this task.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will begin, as we usually do, with HTML layout to include MooTools library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In this task we have to provide our own CSS styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'When the look of our UI fits our expectations, we can start JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Once we save our code, our shopping cart is ready. The result is as follows:![How
    to do it...](graphics/3081_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$(document).ready` function is performed by binding a `domready` event
    to the `window` object. For each item, we are add a `mousedown` event, which contains
    the whole procedure of adding each item in the cart, using the `Drag` object and
    `clone()` function.
  prefs: []
  type: TYPE_NORMAL
- en: To communicate with the server we use the `Request.HTML` method and send it
    with the `HTTP post` method with `post` variable `type`. If the variable `type`
    is equal to the string `shirt`, it means a new item was added to the cart and
    the information box result was updated to `'New Item was added successfully'`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Class Request` represents the main class, which deals with an `XMLHttpRequest:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the preceding template is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In the core of the MooTools library, the `Request` class was extended to `Request.HTML`
    and `Request.JSON`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Request.HTML` is an extended `Request` class specially made for receiving
    HTML data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the `post` or `get` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As the most effective practice of communication between client and server, we
    can use `Request.JSON` to receive and transmit JavaScript objects in `JSON` format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Building an Ajax login form using prototype.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last JavaScript framework in this chapter is `prototype.js`. In this task,
    we will make a simple login form with Ajax functionality. We will have a look
    at the most frequently used practices for `prototype.js` with Ajax.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can download `prototype.js` from [http://www.prototypejs.org/download](http://www.prototypejs.org/download).
    Then, just save it in the `js` folder. To finish this task we will need to have
    the Apache Server running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's create our dummy `.php` file, `login.php:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Then, we can continue with our HTML layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'When the HTML is set, we will define our JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see in the source, we `observe` a new `click` event on the button
    element with ID `submit`, which is the `submit` button in our login form. The
    `login()` function is triggered by the `click` event. The default behavior of
    the `submit` button was replaced by `Event.stop(event)`, and so triggering the
    HTTP request was disabled. An Ajax request was created instead. `Ajax.Request`
    is the basic class for using Ajax in `prototype.js`. We are using the `post` method
    with two parameters (username and password). If the request was successful and
    the response text from `login.php` was `proceed` we were successfully logged in.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`prototype.js` extends the `Ajax.Request` object to a few more, as discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ajax.Updater:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ajax.Updater is an extension of the `Ajax.Request` object, which performs an
    Ajax request and updates the container, based on response text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '**Ajax.PeriodicalUpdater:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the case that we need to update our content at regular intervals, we can
    use periodical updater:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Frequency represents the periodicity (in number of seconds) of updating the
    content. In the preceding code snippet, our content will be updated every 3 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ajax.Responders:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ajax.Responders` represents a repository of global listeners that monitor
    all Ajax activity on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: With responders we can easily track how many Ajax requests are active on our
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
