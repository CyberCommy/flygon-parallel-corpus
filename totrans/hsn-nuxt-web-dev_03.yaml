- en: Getting Started with Nuxt
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will guide you through the process of installing a Nuxt project
    from scratch or with the Nuxt scaffolding tool. Installing Nuxt is the first thing
    you should do when developing Nuxt apps. We'll use the Nuxt scaffolding tool for
    all of our example apps throughout this book as it generates essential project
    folders and files (which we will explore in this chapter) for us automatically;
    but of course, you can do it from scratch for small app development. We will go
    through the directory structure and the use and purpose of each directory. If
    you are installing your Nuxt project from scratch, you'll still need to know the
    directory structure and the official directories that Nuxt will read automatically
    from your project. You'll also learn how to configure Nuxt to suit the needs of
    your app specifically, even though Nuxt is already configured to cover most practical
    cases by default. So, we will guide you through the nuts and bolts of the configuration.
    Also, we will cover asset serving in Nuxt apps, particularly for serving images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nuxt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the directory structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding custom configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding asset serving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You should be familiar with the following terms:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript ES6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side and client-side development basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application program interface (API)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The supported operating systems are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 or above with PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS with a terminal (Bash or Oh My Zsh)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux systems (such as Ubuntu) with a terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The suggested cross-platform softwares are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js: [https://nodejs.org/](https://nodejs.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node Package Manager (npm): [https://www.npmjs.com/](https://www.npmjs.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Nuxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to get started with Nuxt easily. The easiest way is by using
    the Nuxt scaffolding tool, `create-nuxt-app`, which installs all the Nuxt dependencies
    and default directories automatically for you. The other way is to start from
    scratch by using a `package.json` file only. Let's discover how you can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Using create-nuxt-app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`create-nuxt-app` is a scaffolding tool created by the Nuxt team that you can
    use to install your project quickly. What you need to do is use `npx` to run `create-nuxt-app`
    on your favorite terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'npx is shipped by default since npm 5.2.0, but you can make sure you have it
    installed by checking its version on your terminal, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'During the process of installing the Nuxt project, you will be asked some questions
    to integrate with Nuxt, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose a programming language:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose a package manager:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose a UI framework:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose a testing framework:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create your first Nuxt app, called `first-nuxt`, using npx. So, choose
    a local directory on your machine, open a terminal on that directory, and run `npx
    create-nuxt-app first-nuxt`. When you come across the questions like the previously
    mentioned ones in the installation process, choose `JavaScript` for the programming
    language, Npm for the package manager, and `None` for the UI framework and the testing
    framework. Then, skip the rest of the questions (just don''t pick any options)
    so that we can add them at a later stage when we need to. You should have a list
    of questions similar to the following, with the same options we have suggested,
    on your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should choose `Universal (SSR / SSG)` for the question about the rendering
    mode. We will cover the option for single-page applications (SPAs) in [Chapter
    15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml), *Creating an SPA with Nuxt*.
    We will use SSR for all of our example apps throughout this book, except the examples
    in [Chapter 15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml), *Creating an SPA
    with Nuxt*. We will also use `npm` as our package manager in this book as well,
    so make sure you pick this option. Once the installation is completed, we can
    get it started with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The app is now running on `localhost:3000`. You should see a default index page
    generated by Nuxt on your screen when you run that address in your favorite browser.
    It is easy peasy to install a Nuxt project using the scaffolding tool, isn't it?
    But sometimes you may not need a full stack installation like this; you may just
    need a "barebones" installation. If so, let's find out how you can install Nuxt
    from scratch in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source files for this simple app in `/nuxt-packt/chapter-2/scaffolding/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from scratch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t want to use the Nuxt scaffolding tool, you can use a `package.json`
    file and `npm` to install a Nuxt app for you. Let''s find out how with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `package.json` file in your root project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Nuxt in the project via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `/pages/` directory in your root project, and then create an `index.vue`
    page in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch the project with npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The app is now running on `localhost:3000`. You should see the index page you
    created with the `Hello world!` message on your screen when you run that address
    in your favorite browser.
  prefs: []
  type: TYPE_NORMAL
- en: However, whether you are going for the "barebones" or full stack option, you
    should understand the default directories that Nuxt requires for running your
    app. So, let's find out what these directories are in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this simple app in `/nuxt-packt/chapter-2/scratch/` in our GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have installed a Nuxt project successfully using the `create-nuxt-app` scaffolding
    tool, you should get the following default directories and files in your project
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through each of them and understand what they are intended for in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The assets directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/assets/` directory is used to contain the assets of your project, such
    as images, fonts, and Less, Stylus, or Sass files, that will be compiled by webpack.
    For example, you may have a Less file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'webpack will compile the preceding code into the following CSS for your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We will discuss the benefits of serving images in this directory later in this
    chapter, and we will use this directory often in this book when generating static
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: The static directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/static/` directory is used to contain files that you don''t want to be
    compiled by webpack or cannot be compiled, such as favicon files. If you don''t
    want to serve your assets, such as images, fonts, and styles, in the `/assets/` directory,
    you can keep them in the `/static/` directory instead. All files in this directory
    are mapped to the server root directly, so they are accessible under the root
    URL directly. For example, `/static/1.jpg` is mapped as `/1.jpg`, so you can access
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We will discuss the difference in serving images between the `/assets/` and
    `/static/` directories later in this chapter. Note that you get a `favicon.ico`
    file by default in this directory when you use the Nuxt scaffolding tool, but
    you can create your favicon file to replace it.
  prefs: []
  type: TYPE_NORMAL
- en: The pages directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/pages/` directory is used to contain the views and the routes of the
    app. Nuxt will read and convert all the `.vue` files inside this directory and
    generate the app router automatically for you. For example, take the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Nuxt will take the preceding filenames without the `.vue` extension and create
    the following routes for your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you install Nuxt via `create-nuxt-app`, you will get an `index.vue` file
    created automatically for you, and you can see this page at `localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at this directory in more detail in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*.
  prefs: []
  type: TYPE_NORMAL
- en: The layouts directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/layouts/` directory is used to contain the layouts of your app. You get
    a layout called `default.vue` by default when you use the Nuxt scaffolding tool.
    You can modify this default layout or add new ones to this directory.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at this directory in more detail in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*.
  prefs: []
  type: TYPE_NORMAL
- en: The components directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/components/` directory is used to contain Vue components. You get a component
    called `Logo.vue` by default when you use the Nuxt scaffolding tool. The obvious
    and important difference between the `.vue` files in this directory and those
    in the `/pages/` directory is that you cannot use the `asyncData` method for the
    components in this directory; however, you can use the `fetch` method to set in
    them if you need to. You should keep small and reusable components in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at this directory in more detail in [Chapter 5](099c1dc8-8dfa-46f8-bfbd-bfa036eefbb7.xhtml),
    *Adding Vue Components*.
  prefs: []
  type: TYPE_NORMAL
- en: The plugins directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/plugins/` directory is used to contain JavaScript functions, such as
    global functions that you want to run before the root Vue instance is instantiated.
    For example, you may want to create a new `axios` instance that sends API requests
    specifically to [https://jsonplaceholder.typicode.com](https://jsonplaceholder.typicode.com)
    only, and you may want to make this instance available globally without importing
    `axios` and creating a fresh instance each time. You can create a plugin that
    injects and plugs into the Nuxt context, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can use this `axios` instance on any page by calling `$axiosTypicode`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We will look at this directory in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml),
    *Writing Plugins and Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `axios` is an HTTP client that we will use often throughout this book.
    You will need to install it in your project directory before importing it in the
    preceding plugin file. For more information about this Node.js package, please
    visit  [https://github.com/axios/axios](https://github.com/axios/axios).
  prefs: []
  type: TYPE_NORMAL
- en: The store directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/store/` directory is used to contain the Vuex store files. You don't need
    to install Vuex in Nuxt because it already comes with Nuxt. It is disabled by
    default and you just have to add an `index.js` file to this directory to enable
    it. For example, if you want to have a property called `auth` that can be accessed
    from anywhere throughout your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will have that property stored in the `state` variable in the `index.js` file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We will look at this directory in more detail in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml),
    *Adding a Vuex Store*.
  prefs: []
  type: TYPE_NORMAL
- en: The middleware directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/middleware/` directory is used to contain middleware files that are JavaScript
    functions that run before rendering a page or a group of pages. For example, you
    may want to have a secret page that only can be accessed when the user is authenticated.
    You can use the Vuex store to store the authenticated data and create a middleware
    to throw a `403` error if the `auth` property is empty in the `state` store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We will look at this directory in more detail in [Chapter 11](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml),
    *Writing Route Middlewares and Server Middlewares*.
  prefs: []
  type: TYPE_NORMAL
- en: The package.json file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `package.json` file is used to contain the dependencies and scripts of
    the Nuxt app. For example, you get the following default scripts and dependencies
    in this file if you are using the Nuxt scaffolding tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We will work on this file a lot in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml),
    *Adding a Server-Side Framework*, and in [Chapter 14](34aaa294-2c3b-464e-8e96-5eb6d1eaff48.xhtml),
    *Using Linters, Formatters, and Deployment Commands*.
  prefs: []
  type: TYPE_NORMAL
- en: The nuxt.config.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `nuxt.config.js` file is used to contain the custom configuration that
    applied to your app specifically. For example, you get these custom meta tags,
    title, and link by default for your HTML `<head>` block when you use the Nuxt
    scaffolding tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We can modify the preceding custom head block. You will learn how to do so in
    [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml), *Adding Views, Routes,
    and Transitions*. Besides `head`, there are other key properties for making the
    custom configuration, which we will cover in the upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: The aliases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Nuxt, the `~` or `@` aliases are used to associate with the `srcDir` property,
    and the `~~` or `@@` aliaes are used to associate with the `rootDir` property.
    For example, if you want to link an image to the `/assets/` directory, you can
    use the `~` alias, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, if you want to link the image to the `/static/` directory, you
    can use the `~` alias, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you also can link your assets in the `/static/` directory without
    these aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The value of `srcDir` is the same as the value of `rootDir`, by default, which
    is `process.cwd()`. We will cover these two options in the next section and you
    will learn how to change their default values. So, let's explore how you can fiddle
    with custom configuration in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding custom configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can configure your Nuxt app to suit your project by adding a `nuxt.config.js`
    file (we will call it a **Nuxt config file** in this book) in the project''s root
    directory. You get this file by default if you use the Nuxt scaffolding tool.
    You should get the following options (or properties) when you open this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Most of them are empty, except `mode`, `target`, `head`, and `components`. You
    can customize Nuxt to suit your project specifically through these options. Let's
    go through each of them, and then the other options, to see what you can use them
    for.
  prefs: []
  type: TYPE_NORMAL
- en: The mode option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mode` option is used to define the "nature" of your app – whether it is
    universal or an SPA. Its default value is *universal*. If you are developing an
    SPA using Nuxt, then change this value to `spa`. We will focus on the universal
    mode in the upcoming chapters of this book, except [Chapter 15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml),
    *Creating an SPA with Nuxt*.
  prefs: []
  type: TYPE_NORMAL
- en: The target option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `target` option is used to set the deployment target of your app – whether
    it is deployed as a server-side rendering app or a static-generated app. Its default
    value is `server` for server-side rendering deployment. Our deployment target
    for most of the example apps in this book is server-side rendering. We will target
    static-generated deployments as well in a few chapters, especially the final chapter – [Chapter
    18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating a Nuxt App with CMS
    and GraphQL*.
  prefs: []
  type: TYPE_NORMAL
- en: The head option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `head` option is used to define all default meta tags in the `<head>` block
    of our app. You get the following custom `head` configuration in the Nuxt config
    file if you use the Nuxt scaffolding tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can modify the preceding configuration or add more custom configuration
    – for example, add some JavaScript and CSS libraries that are required for your
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We will cover this option in more detail in [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml), *Adding
    UI Frameworks*, and in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml), *Adding
    Views, Routes, and Transitions*. Note that jQuery is a core dependency of Foundation
    (Zurb), which we will explore in [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml), *Adding
    UI Frameworks*. So, it is currently required that you install jQuery in your project
    to use Foundation. This may become optional in future releases.
  prefs: []
  type: TYPE_NORMAL
- en: The css option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `css` option is used to add global CSS files. These can be `.css`, `.less`,
    or `.scss` files. They also can be the modules and libraries loaded from the Node.js `/node_modules/` directory
    in your project directly. For example, take the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding configuration, we load the CSS file from the jQuery UI module
    that is installed in the `/node_modules/` directory, as well as the Less and Sass
    files that are stored in the `/assets/` directory. Note that if you are writing
    styles using `.less` and `.scss` files, you need to install the Less and Sass
    modules with their webpack loaders, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We will use this option more in [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml), *Adding
    UI Frameworks*, and in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit), *Adding
    Views, Routes, and Transitions*.
  prefs: []
  type: TYPE_NORMAL
- en: The plugins option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `plugins` option is used to add JavaScript plugins that run before the
    root Vue instance. For example, take the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We often use this option with the `/plugins/` directory, which we covered in
    the previous section. We will work on this option a lot in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: The components option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `components` option is used to set whether the components in the `/components/` directory
    should be auto-imported. This option is very useful if you have tons of components
    to be imported into a layout or a page. You don't have to import them manually
    if you set this option to `true`. Its default value is `false`. We set this option
    to `true` for all apps in this book.
  prefs: []
  type: TYPE_NORMAL
- en: For more information and (advanced) usage of this option, please visit [https://github.com/nuxt/components](https://github.com/nuxt/components).
  prefs: []
  type: TYPE_NORMAL
- en: The buildModules option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `buildModules` option is used to register built-only modules – modules that
    are required only for development and build time in your app. In this book, note
    that we will only leverage some modules from the Nuxt community and create the
    custom ones that are needed during the Node.js runtime in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules*. But for more information about the `buildModules` option
    and the built-only modules for build-time only, please visit [https://nuxtjs.org/guide/modules#build-only-modules](https://nuxtjs.org/guide/modules#build-only-modules).
  prefs: []
  type: TYPE_NORMAL
- en: The modules option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `modules` option is used to add Nuxt modules to your project. For example,
    take the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We also can create inline modules directly with this option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Nuxt modules are essentially JavaScript functions, just like plugins. We will
    discuss the difference between them in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit), *Writing
    Plugins and Modules*. Just like the `plugins` option, which is used often with
    the `/plugins/` directory, the `modules` option is often used with the `/modules/` directory.
    We will work on this option often in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit), *Writing
    Plugins and Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: The build option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `build` option is used to customize the webpack configuration for building
    your Nuxt app the way you prefer. For example, you may want to install jQuery globally in
    your project so that you don''t have to use `import` whenever you need it. You
    can automatically load jQuery by using webpack''s `ProvidePlugin` function, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We will use this `build` option again in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit), *Adding
    Views, Routes, and Transitions*, in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules,* and in [Chapter 14](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=37&action=edit), *Using
    Linters, Formatters, and Deployment Commands*.
  prefs: []
  type: TYPE_NORMAL
- en: For more details and examples of things that you can do with this option for
    your Nuxt app, visit [https://nuxtjs.org/api/configuration-build](https://nuxtjs.org/api/configuration-build).
    For more information about webpack's `ProvidePlugin` function, visit [https://webpack.js.org/plugins/provide-plugin/](https://webpack.js.org/plugins/provide-plugin/).
    If you are new to webpack, we encourage you to visit and learn about it from [https://webpack.js.org/guides/](https://webpack.js.org/guides/).
  prefs: []
  type: TYPE_NORMAL
- en: The following sections outline some of the additional options that you can use
    to customize your Nuxt app further and more specifically. Let's explore some of
    them that can be useful in your projects. Some of them are used often in this
    book. So, let's get to them!
  prefs: []
  type: TYPE_NORMAL
- en: The dev option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `dev` option is used to define the `development` or `production` mode of
    your app. It is not added to the Nuxt config file, but you can add it manually
    when you need to. It only takes a Boolean type and its default is set to `true`.
    It is always forced to be `true` with the `nuxt` command and always forced to
    be `false` with the `nuxt build`, `nuxt start`, and `nuxt generate` commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, technically you *can''t* customize it, but you can use this option in
    a Nuxt module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get either `true` or `false`, depending on which Nuxt command you
    use. We will cover this module in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit),
    *Writing Plugins and Modules*. Alternatively, you can use this option when you
    are importing Nuxt as a package in a server-side framework, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `new Builder(nuxt).build()` line will be run when the `dev` option is `true`.
    We will get to the server-side framework in [Chapter 8](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=31&action=edit),
    *Adding a Server-Side Framework*.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an example app for this option in `/chapter-2/configuration/dev/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The rootDir option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rootDir` option is used to define the workspace of your Nuxt app. For
    example, say you have your project in the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the default value of the `rootDir` option for your project is `/var/www/html/my-project/`.
    However, you can change it by using the Nuxt command in your `package.json` file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the workspace of your Nuxt app is in `/var/www/html/my-project/app/` and
    your app structure has become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note that now, the Nuxt config file must be put inside the `/app/` directory.
    We will cover the Nuxt commands in [Chapter 14](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=37&action=edit),
    *Using Linters, Formatters, and Deployment Commands*.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an example app for this option in `/chapter-2/configuration/rooDir/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The srcDir option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `srcDir` option is used to define the source directory of your Nuxt app.
    The default value of `srcDir` is the value of `rootDir`. You can change it as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your app structure has become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note that the Nuxt config file is outside the `/src/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an example app for this option in `/chapter-2/configuration/srcDir/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The server option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `server` option is used to configure the server connection variables of
    our Nuxt app. It has the following default  server connection details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You can change them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now, your app is running at `0.0.0.0:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an example app for this option in `/chapter-2/configuration/server/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The env option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `env` option is used to set environment variables for the client side and
    the server side of your Nuxt app. The default for this option is an empty object, `{}`.
    This option is useful when you use `axios` in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can the `env` property in the `axios` plugin, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the `baseURL` option is set to `localhost:3000`, or whatever `BASE_URL`
    is if it is defined. We can set `BASE_URL` in `package.json`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to install `cross-env` for the preceding example to work on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We will get to plugins in [Chapter 6](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=29&action=edit),
    *Writing Plugins and Modules*. We will use this `env` option often in this book
    when creating cross-domain apps.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an example app for this option in `/chapter-2/configuration/env/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The router option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `router` option is used to overwrite the default Nuxt configuration on
    the Vue router. The default Vue router configuration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You can change this configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Now, your app is running at `localhost:3000/app/`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about this property and the rest of its configuration,
    visit [https://nuxtjs.org/api/configuration-router](https://nuxtjs.org/api/configuration-router).
  prefs: []
  type: TYPE_NORMAL
- en: You can find an example app for this option in `/chapter-2/configuration/router/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The dir option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `dir` option is used to define custom directories in our Nuxt app. The
    default directories are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You can change them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use the preceding custom directories as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You can find an example app for this option in `/chapter-2/configuration/dir/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The loading option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `loading` option is used to customize the default loading component in
    your Nuxt app. If you don''t want to use this default loading component, you can
    set it to `false`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: We will cover this option in more detail in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*.
  prefs: []
  type: TYPE_NORMAL
- en: The pageTransition and layoutTransition options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pageTransition` and `layoutTransition` options are used to customize the
    default properties of the page and layout transitions in your Nuxt app. The default
    properties for the page transition are set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The default properties for the **layout** transition are set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'You can change them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: We will cover these options in more detail in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*.
  prefs: []
  type: TYPE_NORMAL
- en: The generate option
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `generate` option is used to tell Nuxt how to generate dynamic routes for
    a static web app. Dynamic routes are routes that are created by using an underscore
    in Nuxt. We will cover this type of route in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*. We use the `generate` option with dynamic
    routes that *cannot be detected automatically by the Nuxt crawler* if we want
    to export our Nuxt app as a static web app or as an SPA, instead of using Nuxt
    as a universal app (SSR). For example, you may have the following dynamic routes
    (pagination) in your app, if the scrawler fails to detect them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can use this `generate` option to generate and transform the content
    of each of these routes into an HTML file for you, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We will show you how to use this option to generate routes, if they cannot be
    detected by the crawler in [Chapter 15](450e252f-a94b-4f7f-9762-533a150f5d19.xhtml), *Creating
    a Nuxt SPA*, and in [Chapter 18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating
    a Nuxt App with CMS and GraphQL*.
  prefs: []
  type: TYPE_NORMAL
- en: For more information and more advanced usage of this `generate` option, please
    visit [https://nuxtjs.org/api/configuration-generate](https://nuxtjs.org/api/configuration-generate).
  prefs: []
  type: TYPE_NORMAL
- en: We will cover and discover other configuration options in the upcoming chapters
    as we go along. However, these are the basic custom configuration options you
    should know about at this point. Now, let's explore asset serving with webpack
    further in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding asset serving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nuxt uses the `vue-loader`, `file-loader`, and `url-loader` webpack loaders to
    serve the assets in your app. Firstly, Nuxt will use `vue-loader` to process the `<template>`
    and `<style>` blocks with `css-loader` and `vue-template-compiler` to compile
    elements such as `<img src="...">`, `background-image: URL(...)`, and CSS `@import` in
    these blocks intomodule dependencies. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The image element and the assets in the preceding `<template>` and `<style>`
    block will be compiled and translated into the following code and module dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Note that from Nuxt 2.0, the `~/` alias will not be correctly resolved in your
    styles, so use `~assets` or the `@/` alias instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the preceding compilation and translation, Nuxt then will use `file-loader`
    to resolve the `import/require` module dependencies into a URL and emit (copy
    and paste) the assets into the output directory – or, use `url-loader` to transform
    the assets into Base64 URIs if the asset is under 1 KB. However, if the asset
    is larger than the 1 KB threshold, it will fall back to `file-loader`. That means
    any files below 1 KB will be inlined as a Base64 data URL by `url-loader`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This can give you more control over the number of HTTP requests from your app
    to the server. Inlined assets cost you fewer HTTP requests, while any file beyond
    1 KB will be copied and pasted into the out destination and named with a version
    hash for better caching. For example, the images in the preceding `<template>`
    and `<style>` blocks are emitted as follows (via `npm run build`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the image on the front side of your browser, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the default configuration for these two webpack loaders (`url-loader` and `file-loader`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: You can customize this default configuration as we did in the previous topic
    using the `build` option for webpack configuration.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about `file-loader` and `url-loader`, please visit [https://webpack.js.org/loaders/file-loader/](https://webpack.js.org/loaders/file-loader/)
    and [https://webpack.js.org/loaders/url-loader/](https://webpack.js.org/loaders/url-loader/).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about `vue-loader` and `vue-template-compiler`, please
    visit [https://vue-loader.vuejs.org/](https://vue-loader.vuejs.org/) and [https://www.npmjs.com/package/vue-template-compiler](https://www.npmjs.com/package/vue-template-compiler).
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to webpack, please visit [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/).
    Also, visit [https://webpack.js.org/guides/asset-management/](https://webpack.js.org/guides/asset-management/)
    for its asset management guide. In a nutshell, webpack is a static module bundler
    for JavaScript apps. The main purpose of it is to bundle JavaScript files, but
    it also can be used to transform assets such as HTML, CSS, images, and fonts.
    If you don't want to serve your assets in the way that webpack does for you, you
    can also use the `/static/` directory for static assets, just as we mentioned
    before in the previous section, *Understanding Directory Structure*. However,
    there are benefits to serving assets using webpack. Let's find out what they are
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: webpack assets versus static assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the benefits of using webpack for asset serving is that it optimizes
    them for production, whether they are images, fonts, or preprocessed styles such
    as Less, Sass, or Stylus. webpack can transform Less, Sass, and Stylus into generic
    CSS, while a static folder is just a place where you can put all of your static
    assets that will *never* be touched by webpack. In Nuxt, if you don't want to
    use the webpack assets from the `/assets/` directory for your project, you can
    use the `/static/` directory instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use the static image from the `/static/` directory, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Another good example is the favicon file in the Nuxt config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if you use the `~` alias to link your assets in the `/static/` directory,
    webpack *will* process these assets, just like those in the `/assets/` directory,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: We will work on the `/assets/` directory a lot for asset serving in [Chapter
    3](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=26&action=edit),
    *Adding UI Frameworks*, and in [Chapter 4](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=27&action=edit),
    *Adding Views, Routes, and Transitions*, as well as in [Chapter 5](https://cdp.packtpub.com/hands_on_web_development_with_nuxt_js_2_0/wp-admin/post.php?post=28&action=edit),
    *Adding Vue Components*, to serve assets dynamically. Right now, let's summarize
    what you have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an example app for serving assets and files from these two directories
    in `/chapter-2/assets/` in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install Nuxt with `create-nuxt-app`, and
    how to install it from scratch, and about the default directories installed by
    the Nuxt scaffolding tool. You also learned how to use the `nuxt.config.js` file
    to customize your app. Lastly, you learned to understand how assets work in Nuxt
    and the difference between using webpack and the `/static/` folder for assets
    serving.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapter, you will learn how to install custom UI frameworks,
    libraries, and tools, such as Zurb Foundation, Motion UI, jQuery UI, and Less
    CSS for your app. You will write some basic code to style your index page and
    add some animations to it. You will also start using some of the directories we
    have just covered in this chapter, such as the `/assets/`, `/plugins/`, and `/pages/` directories,
    to develop your Nuxt app.
  prefs: []
  type: TYPE_NORMAL
