- en: Chapter 8. Bypassing Firewalls and Avoiding Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The type and scope of the penetration test will determine the need for being
    stealthy during a penetration test. The reasons to avoid detection while testing
    are varied; one of the benefits would include testing the equipment that is supposedly
    protecting the network, another could be that your client would like to know just
    how long it would take the Information Technology team to respond to a targeted
    attack on the environment. Not only will you need to be wary of the administrators
    and other observers on the target network, you will also need to understand the
    automated methods of detection such as web application, network, and host-based
    intrusion detection systems that are in place to avoid triggering alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When presented with the most opportune target, take the time to validate that
    it is not some sort of honeypot that has been set up to trigger alerts when abnormal
    traffic or activity is detected! No sense in walking into a trap set by a clever
    administrator. Note that if you do find a system like this it is still very important
    to ensure it is set up properly and not inadvertently allowing access to critical
    internal assets due to a configuration error!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will review the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Pentesting firewalled environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sliding in under the IDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up shop internally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing network traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using standard credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up compromised systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the examples in this chapter a bit of lab preparation will
    be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughout this book there has been a strong focus on being able to emulate
    a target network. This is critical to being able to learn and practice the latest
    and greatest techniques as the excellent minds in the security research field
    continue to surprise us with new vulnerabilities and possible attack vectors.
    This book cannot cover every possible method of testing a network, but building
    the labs is an attempt at adding long lasting value that will hopefully lead to
    a lifetime of the "hacker mentality". If you continue to build out your personal
    lab and increase the difficulty of the practice challenges that you set for yourself
    you will quickly become comfortable with testing any sort of environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'BackTrack, pfSense, and Ubuntu virtual machines should be configured in the
    following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Lab preparation](img/7744OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Certain configuration changes need to occur:'
  prefs: []
  type: TYPE_NORMAL
- en: BackTrack guest machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This machine will need to be connected to the `192.168.75.0/24` subnet. In the
    Oracle VM VirtualBox Manager console highlight the BackTrack instance and select
    the **Settings** option from the top navigation bar. Ensure that only one network
    adapter is enabled. The adapter should use the Vlan1 internal network option.
  prefs: []
  type: TYPE_NORMAL
- en: '![BackTrack guest machine](img/7744OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As previously described in [Chapter 3](ch03.html "Chapter 3. Enumeration: Choosing
    Your Targets Wisely"), *Enumeration: Choosing Your Targets Wisely* we can assign
    the IP address (`192.168.75.10` in this case) to an Ethernet adapter (eth0) from
    within BackTrack by typing the following command into a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As the pfSense machine will need to be our router as well, we need to set it
    up as the default gateway. This can be accomplished as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Ubuntu guest machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Ubuntu machine will be used as the target. It needs to be configured to
    connect to VLAN2, which is a new internal network we have not used before. To
    create an internal network you will need to manually type VLAN2 into the network
    configuration screen in the Oracle VM VirtualBox Manager. Your settings should
    be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ubuntu guest machine](img/7744OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: pfSense guest machine configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuring our firewall is a bit more work. It needs to be able to route restrictive
    traffic from the VLAN1 network to the VLAN2 subnet. There are several configuration
    changes we will need to make to ensure this works properly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pfSense offers the option to reset to factory defaults from the configurations
    menu. Be aware that the adapters will have to be reconfigured if this option is
    chosen. This is not difficult, but all previous settings will be lost. Be sure
    to make a copy/snapshot of your pfSense machine if concerned with losing the previous
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: pfSense network setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our firewall guest machine will use two network adapters. One will be used
    for the VLAN1 segment and the other for the VLAN2 segment. VLAN1 will be treated
    as an untrusted wide area network for the examples within this chapter. Network
    Adapter 1 should resemble the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![pfSense network setup](img/7744OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Network Adapter 2 should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![pfSense network setup](img/7744OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WAN IP configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The remaining networking setup will need to be performed from within the guest
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Boot up your pfSense virtual instance. There may be an additional delay as pfSense
    attempts to configure the WAN adapter. Allow it to fully load until you see the
    following menu:![WAN IP configuration](img/7744OS_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The WAN and LAN interfaces will need to be configured properly. Select option
    **2) Set interface(s) IP address**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select option 1 — WAN.![WAN IP configuration](img/7744OS_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked to configure the WAN interface via DHCP type *n* for no.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IP for the WAN adapter should be `192.168.75.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subnet bit count should be set to 24\. Type `24` and press *Enter*.![WAN IP
    configuration](img/7744OS_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter* to return to the configuration menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: LAN IP configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can set up the LAN IP information from the configuration menu as well. One
    benefit of configuring the LAN here is that we can have a DHCP server configured
    for VLAN2 at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Select option `2` from the configuration menu to start the LAN IP Configuration
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the LAN interface (Option `2)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted to enter the IP address type `192.168.101.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bit count should be set to `24`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked if you would like a DHCP server to be enabled on LAN choose *y* for
    yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DHCP Client IP range start will be `192.168.101.100`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DHCP Client IP range stop will be `192.168.101.110`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter*.![LAN IP configuration](img/7744OS_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Enter* again to return to the configuration menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your LAN and WAN IP ranges should match the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LAN IP configuration](img/7744OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Firewall configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pfSense can be configured using its intuitive web interface. Boot up the Ubuntu
    machine, open a terminal and perform a `sudo dhclient` to pick up an address from
    the pfSense DHCP server on VLAN2 (192.168.101.0/24). In a web browser on the Ubuntu
    machine type `http://192.168.101.1/` to access the configuration panel. If you
    have reset to factory defaults you will need to step through the wizard to get
    to the standard console.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default username and password combination for pfSense is: `admin/pfsense`.'
  prefs: []
  type: TYPE_NORMAL
- en: To view the current firewall rules choose **Firewall | Rules** and review the
    current configuration. By default the WAN interface should be blocked from connecting
    internally as there are not preestablished rules that allow any traffic through.
  prefs: []
  type: TYPE_NORMAL
- en: '![Firewall configuration](img/7744OS_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For testing purpose, we will enable ports 80, 443, 21, and allow ICMP. Add
    the rules as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **add a new rule** button displayed in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following rule settings to enable ICMP pass-through:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Action: Pass'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interface: WAN'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Protocol: ICMP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All others: Defaults'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Save** button at the bottom of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply Changes** button at the top of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Interface** | **WAN** navigation menu to enter the WAN interface configuration
    menu and uncheck **Block private networks**. Apply the changes and return to **Firewall**
    | **Rules**.![Firewall configuration](img/7744OS_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **add new rule** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the following rule settings to enable HTTP pass-through.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Action: Pass'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interface: WAN'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Protocol: TCP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Destination port range: HTTP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continue adding ports until the configuration matches the following:![Firewall
    configuration](img/7744OS_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point any machine connected to VLAN1 can communicate through the open
    ports as well as ping machines on the VLAN2 segment as can be seen in the following
    screenshot (this system running the scan is at `192.168.75.10):`
  prefs: []
  type: TYPE_NORMAL
- en: '![Firewall configuration](img/7744OS_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stealth scanning through the firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this day and age, the most common security mechanism in place will be some
    sort of firewall. Firewalls are a great security mechanism when used in conjunction
    with other security controls; however, they must be properly maintained and monitored
    to be truly effective. There are several mechanisms that can be used to attempt
    to bypass these devices.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the ports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to know where you are being blocked when scanning. When testing
    through a firewall it may become difficult to prepare a stealthy attack if you
    do not have all of the information. Remember that tools such as Firewalker or
    Hping can assist with determining where the block occurs and if the port is truly
    available or just closed. Although this may seem trivial, knowing if there is
    a firewall in the first place is fairly important as well.
  prefs: []
  type: TYPE_NORMAL
- en: Traceroute to find out if there is a firewall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes we can use traceroute to see the path to the target system. Let''s
    take a look at a open traceroute from VLAN2 to VLAN1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at this result we can see that the first hop goes through our gateway
    at `192.168.101.1` before being routed to the host. Now we will try the reverse
    from the BackTrack machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Something is blocking us from receiving the path information (it's the pfSense
    firewall configuration). This technique is not always useful, but definitely good
    to know about.
  prefs: []
  type: TYPE_NORMAL
- en: Finding out if the firewall is blocking certain ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a firewall; now what? The next step is to determine which ports are
    being blocked by the firewall, or more importantly which are open.
  prefs: []
  type: TYPE_NORMAL
- en: Hping
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Hping2 and Hping3 are included as part of the BackTrack 5 distribution. It
    can be accessed via the GUI navigation bar **Applications** | **BackTrack** |
    **Information Gathering** | **Network Analysis** | **Identify Live Hosts** | **Hping2**.
    It can also be invoked at the command line by simply typing: `hping2`. Hping2
    is a powerful tool that can be used for various security testing tasks. The following
    syntax can be used to find open ports while remaining fully in control of your
    scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command allowed us to perform a `SYN` scan starting at port 1 and incrementing
    for 80 steps.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*CTRL + Z* is used to manually increment ports. Start low and work your way
    up manually. Start an Hping2 scan and give it a try!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the firewall configuration it may also be possible to send spoofed
    packets. During a test it is beneficial to ensure that the configuration does
    not allow for this behavior to occur. Hping is perfectly suited for this task.
    The following is an example of how you may test if the firewall allows this traffic
    to pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command will spoof 10 packets from `192.168.101.101` to port 80 on `192.168.101.100`.
    This is the basis for an idle scan and if successful would allow you to `hping`
    the `192.168.101.101` machine to look for an increase in the IP sequence number.
    In this case we could enable monitoring on the pfSense machine to emulate what
    this traffic looks like to a network administrator reviewing the logs.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge yourself to create and monitor different packets and uses of Hping
    so that you can gain a good understanding of the traffic flow. The best means
    of remaining undetected while testing is to fully understand the technology that
    is being used.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the logs generated from a successful scan and keep in mind that
    due to the amount of traffic involved even secured networks will sometimes only
    log and trigger events based on denied traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Logging per rule will need to be enabled on the firewall to see allowed traffic.
    Not logging permitted traffic is fairly standard practice as it reduces the firewall
    log size. Educate your clients that proactively monitoring allowed traffic can
    also be beneficial when attempting to truly secure a network.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hping](img/7744OS_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The granular control of `hping2` in combination with the scripting capabilities
    of `hping3` makes the Hping tool an invaluable addition to every pentesters toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further information and tutorials about how to effectively use Hping2 and Hping3
    can be found at the Hping wiki: [http://wiki.hping.org/](http://wiki.hping.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap firewalk script
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'One of the easiest methods to test open ports on a firewall is to simply use
    the firewalking script for Nmap. To test the open firewall ports you will need
    a host behind the firewall as the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The command sequence is straightforward and familiar: we invoke `nmap`, use
    the script option, and choose the firewalk script. We then provide the input that
    firewalk needs by performing a traceroute to `192.168.101.100` which we know is
    behind our target firewall.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nmap firewalk script](img/7744OS_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although we were able to determine which ports on the firewall were open (21,
    80, and 443), if you take a look at the firewall denies it quickly becomes apparent
    that this is not a quiet test and should only be used when stealth is not needed.
    What this boils down to is that stealth requires patience and a well made plan
    of action. It may be easier to manually verify if there are any common ports open
    on the firewall and then try to scan using one of the well-known ports.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To effectively emulate proper firewalking or port probing with Hping the network
    would need to have a gateway behind the firewall. This can be accomplished in
    a lab when replicating a production environment but is beyond the scope of this
    chapter. The commands remain the same; the information gained can increase dramatically.
    These tools use TTL to determine if a port is open or not and as our gateway is
    on the same machine as our firewall and router the results are varied and obscured.
  prefs: []
  type: TYPE_NORMAL
- en: '![Nmap firewalk script](img/7744OS_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All in all, idle scans remain the best method of determining what is behind
    a properly locked down firewall. The flavor of the moment is `SYN Cache Idle`
    scanning and a great paper about this subject titled *Idle Port Scanning and Non-interference
    Analysis of Network Protocol Stacks Using Model Checking* written by Roya Ensafi,
    Jong Chun Park, Deepak Kapur, and Jedidiah R. Crandall, University of New Mexico
    can be found at : [http://www.usenix.org/events/sec10/tech/](http://www.usenix.org/events/sec10/tech/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now you see me, now you don't — Avoiding IDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a secured environment you can count on running into IDS and IPS. Properly
    configured and used as part of a true defense in depth model increases their effectiveness
    tremendously. This means that the IDS will need to be properly updated, monitored,
    and used in the proper locations. A penetration tester will be expected to verify
    that the IDS's are working properly in conjunction with all other security controls
    to properly protect the environment.
  prefs: []
  type: TYPE_NORMAL
- en: The primary method of bypassing any IDS is to avoid signatures that are created
    to look for specific patterns. These signatures must be fine-tuned to find only
    positively malicious behavior and should not be so restrictive that alerts are
    triggered for normal traffic patterns. Over the years, the maturity level of these
    signatures has increased significantly, but a penetration tester or knowledgeable
    attacker will be able to use various means to bypass even the most carefully crafted
    signatures. In this section, we review some of the methods that have been used
    by attackers in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: Canonicalization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Canonicalization refers to the act of substituting various inputs for the canonical
    name of a file or path. This practice can be as simple as substituting hexadecimal
    representations ASCII text values. Here is an example of an equivalent string:'
  prefs: []
  type: TYPE_NORMAL
- en: '**String A in Hex:** "54:68:69:73:20:69:73:20:61:20:73:74:72:69:6e:67"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String A in text:** "This is a string"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String A in ASCII:** "084 104 105 115 032 105 115 032 097 032 115 116 114
    105 110 103"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By taking advantage of the fact there are sometimes literally thousands of
    combinations possible for a single URL. To put this into perspective, let''s take
    a look at the address we can use to get from our browser to our local Ubuntu Apache
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Luckily, this address confuses our Apache server and we receive the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Canonicalization](img/7744OS_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous request attempted to load the local page at `127.0.0.1`. Let''s
    see what occurs when we try to load the remote pfSense administration console
    in the same manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are warned by the web server hosting the pfSense administrative console
    that a potential DNS Rebind attack occurred:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Canonicalization](img/7744OS_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try something else that actually works properly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the console, `ping` one of the addresses we listed above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the IP address resolved properly and we receive our replies as
    expected. This very same concept is key when trying to bypass an IDS rule. If
    the type of IDS can be determined, then it should be possible to get the signatures.
    When reviewing these signatures you would look for opportunities to obscure the
    URLs, filenames, or other path information enough that it is able to bypass the
    existing ruleset.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try this out with commonly found websites. Many web servers will properly interpret
    these URLs and serve the page. This can be interesting when used in combination
    with social engineering campaigns as well. Obscuring a URL in a phishing e-mail
    will lead to more clicks from users who are not properly trained.
  prefs: []
  type: TYPE_NORMAL
- en: Timing is everything
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In previous chapters we have already reviewed that timing can be critical when
    performing a network scan on a secured environment. Using Nmap we can adjust the
    number of packets that are sent in a given timeframe. IDS signatures look for
    patterns, and sending packets out to many machines in a short timeframe is a definite
    pattern.
  prefs: []
  type: TYPE_NORMAL
- en: When attempting to bypass these mechanisms it is important to understand the
    logic behind the devices and how they work. If your traffic does not match what
    is normally seen on a network there is good possibility that you will be blocked
    before there is a chance to gain much information. This can be frustrating at
    best and lead to a failed assessment at worst. Take your time and plan out the
    stages needed for a successful test. It is better to start off slow and determine
    which type of security mechanisms are in place than to rush in and hit every possible
    port in the world and get your testing IP ranges auto-banned.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap and many other tools have the granularity and ability to restrict the timing
    of your scans. It may even be advisable to begin with some manual controlled network
    enumeration of specific ports that are suspected to be open rather than starting
    with an automated scan.
  prefs: []
  type: TYPE_NORMAL
- en: Blending in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Launching attacks internally can be both satisfying and rewarding. You will
    no longer be restricted by the protected outer shell of the network and can traverse
    at will. Be careful that the tools used do not give you away.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By understanding what an administrator would see under certain conditions a
    penetration tester is more likely to perform well thought-out work that is in
    line with the final goal of the test as described in the rules of engagement contract.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have a connection from a BackTrack machine to a Kioptrix level 1 machine.
    Take a look at the strange traffic being logged by the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Blending in](img/7744OS_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if we were to quickly log into the system and set up or escalate privilege
    of a user account to allow us SSH capability we could merge with the existing
    traffic on the network. Let''s take a look at the difference when we are logged
    into SSH now while running the `tree` command in the SSH session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'While this command is passing back the entire directory structure of the Linux
    box we see the following in the firewall logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Blending in](img/7744OS_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that there are no entries for the SSH traffic. It is minimal compared to
    the previous port 139 traffic. With proper scripting the work that is done via
    post exploitation modules can be emulated from within an SSH connection as well,
    and this traffic is completely encrypted and likely to be used by various administrators
    throughout the network being tested.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at traffic patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network sniffing can be a huge time saver. It is more difficult to use remote
    Windows machines to perform this task for you as the network card needs to be
    in promiscuous mode, but it can be done. Ideally, you will find a Unix or Linux
    host that can be turned into a listening station with little to no effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we look at a compromised Linux host on the `192.168.101.0/24` subnet.
    Our attacking machine resides on `192.168.75.0/24` and cannot see the same traffic
    that the Linux machine does. We will use `tcpdump` which is readily available
    to many Linux distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here we invoke `tcpdump` on the remote Kioptrix machine we have SSH'd into using
    the games account we set up during the post exploitation chapter. We use the `-i`
    option to specify that we would like to use `eth0` as our listening adapter. We
    then tell the adapter to only capture the next `100` packets. The `-n` switch
    is used to avoid DNS lookups and will display IP numbers rather than hostnames.
    The output from this command will provide us with unfiltered packet information
    that is primarily related to our SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is more interesting is to see what else is traversing that segment. Using
    a simple filter for `icmp` for instance we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at traffic patterns](img/7744OS_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looking at the preceding screenshot we can determine that there are additional
    units on this subnet. The great part about using `tcpdump` in this manner is that
    we are not interfering with traffic and simply sifting through information as
    it passes on the wire.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up compromised hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When dealing with a small network it is easy to underestimate the time and effort
    it can take to clean up your compromised hosts. This task is critical in both
    avoiding detection and in leaving the network in pristine condition once your
    testing has been completed. The last thing anyone wants is to overlook a compromised
    host that has a meterpreter backdoor installed and waiting for the next person
    to come along and take advantage of! The key is to take meticulous notes and keep
    accurate record of not only what was done while testing, but also if the things
    that were done could possibly persist after testing.
  prefs: []
  type: TYPE_NORMAL
- en: Think about what we did in the post exploitation chapter; just how easy do you
    think it would be to forget that we enabled the games account to be used for SSH
    login and with root privilege and a weak password at that! It seems the only thing
    worse would be to accidently send the wrong report to a client and give away someone's
    confidential information. It may seem that people would never do either of these
    things, but there is a small chance that either could happen if proper planning
    and organization is not used. When dealing with one, two, or even five machines
    going back and cleaning up may not be a big concern or worry. What happens when
    you have 1000 machines on 40 different subnets though?
  prefs: []
  type: TYPE_NORMAL
- en: Using a checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have not scripted the full exploitation and post-exploitation process
    then make sure you are keeping a checklist for all actions that must be undone.
    This is above and beyond creating notes and logging commands for your final report.
    We are talking about the guide that will be used to ensure that nothing is left
    to chance and ALL changes are reversed properly something as small as adding a
    temporary file to a world writable directory so that you could test your blind
    SQL injection. If you cannot remove the file yourself, have something ready for
    the administrator to remind them to remove the files for you. The job of a penetration
    tester is to assist in verifying the security of an environment, not to make it
    more vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: When to clean up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is never too early to begin the cleanup process. Not only will this assist
    in remaining undetected, but it also ensures that a systematic approach is used
    throughout the entire penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to have 300 open shells to the same subnet. Pick a target that
    allows you to set up a proper pivot and then remove the other shells from your
    list. The fewer machines you have to touch, the easier the cleanup will be. You
    will need the additional time for reporting and verifying results anyhow!
  prefs: []
  type: TYPE_NORMAL
- en: Local log files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is critical to have a good understanding of where the log files are stored,
    what they capture, and how they report the data back to the administrator. Take
    the time to learn about the various log files for at least the most widely used
    operating systems such as popular Linux distributions and Windows Servers. If
    attempting to avoid detection, simply erasing the logs will probably not help
    achieve the desired result. It would be akin to taking someone's ice cream cone,
    eating the ice cream and returning the cone back to the freezer. Someone is going
    to notice. Instead use techniques that allow you to edit portions of the log files
    or escalate privilege to an account that is not monitored. Many of the tasks needed
    to enumerate an internal network do not require administrative privileges; maybe
    it would be better to use a restricted account for those activities in hopes that
    only admin actions are being logged and monitored?
  prefs: []
  type: TYPE_NORMAL
- en: Administrators that actually review logs are not going to look for the standard
    traffic. They will be looking for anomalies. In order to avoid detection your
    traffic and actions must be able to merge with those of an average user.
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous evasion techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The level of detection avoidance that can be accomplished varies from network
    to network. When performing the test keep in mind that in this day and age, resources
    are usually very limited and administrators are overworked and underappreciated.
    Focus on bypassing the automated detection methodologies and you are unlikely
    to be found by an active and eager admin unless your traffic and behavior patterns
    are drastically different from those of the average power user. When sniffing
    traffic and looking at network connections and activity you should be able to
    get an idea of what is considered normal traffic on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Divide and conquer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When performing scans it may be a good idea to use multiple sources to originate
    the scan from. This is more likely to be possible in large networks after a few
    people have clicked the links to your social engineering campaign page. Once you
    have several machines under your control it is not advisable to scan from a single
    machine. Use the tools to break the scans into chunks and to reduce the scan times.
    Take advantage of idle scans, especially when there are network enabled printers
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding out (on controlled units)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If any of the systems you have control of start to be cleaned, reimaged, or
    otherwise remediated before the actual penetration test has been completed, slow
    down or at minimum cease all aggressive testing until it can be determined who
    or what is taking control of remediating the systems. There may be a third party
    involved in which case it will become extremely important that your traffic and
    efforts are not confused with those of the third party, especially if that person
    or group turns out to be malicious in nature and are trying to ensure they do
    not lose control of "their" owned systems to a rival group or person. In a perfect
    world this would not be the case and instead there is just a very good security
    and administrative group taking care of business and eliminating threats as they
    occur.
  prefs: []
  type: TYPE_NORMAL
- en: File integrity monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One security measure that we did not discuss often in this book is the usage
    of File Integrity Monitoring. Proper usage of this control can be devastating
    to an attacker and penetration tester alike. It is very simple for an administrator
    to use these tools to let them know when key files or directories have changed.
    Keep this in mind when running into those wide open systems that are just waiting
    to be completely pillaged. One improper change and the administrator and possibly
    security group will go into overdrive and start to look for the smallest anomalies
    on the network. This will guarantee that your job just got much more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: FIM can usually be avoided by sticking to non-intrusive means of post exploitation
    and enumeration. Some directories and files, particularly those dealing with databases
    or temporary files, will not be scanned for changes due to the high rate of false
    positives. Ensure that any files you modify or drop are in those directories,
    and stay away from attempts at changing key system files. (Log files may be included
    in this!) Once again, think like an administrator and avoid any action that could
    easily be scripted to alert.
  prefs: []
  type: TYPE_NORMAL
- en: Using common network management tools to do the deed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Last but not least: Use the tools at hand to perform enumeration and further
    exploitation. If the targeted system has a compiler installed, use it to compile
    your own network scanner instead of going to some random website from the machine
    and downloading one. Windows machines in particular have a broad range of Net
    commands and shell commands that make many enumeration and pillaging tasks a breeze.
    Use these tools to their fullest extent when performing your testing and you will
    probably not be detected by the administrators.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up firewall rules in pfSense and monitor
    our traffic so that we can learn what type of activity is loud and which type
    is not. We also discussed how an IDS works and how we can take advantage of that
    knowledge to avoid detection when performing our scans, starting social engineering
    campaigns, or simply assessing a web application.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed traffic patterns and how attempting to match the traffic will assist
    in avoiding detection; after all, if all of the information looks the same how
    can anyone determine what is legitimate and what is not.
  prefs: []
  type: TYPE_NORMAL
- en: Also discussed were various strategies of how detection avoidance may be possible
    if testing in a strategic and well thought-out manner. In closing, the mindset
    necessary to effectively and efficiently avoid detection was touched upon as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at data collection tools and reporting.
    This is an important aspect of penetration testing and as such should not be overlooked.
    We take a look at generating a final report as well as providing a quick overview
    of effectively using tools such as vim, nano, NoteCase, and Dradis to keep track
    of your testing efforts.
  prefs: []
  type: TYPE_NORMAL
