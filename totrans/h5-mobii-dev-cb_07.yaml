- en: Chapter 7. Mobile Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote debugging with Opera Dragonfly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote debugging with weinre
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Firebug on mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote debugging with JS Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Mobile Safari debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although debugging can take a significant amount of time, it is an important
    aspect of web development, both for desktop and mobile. In this chapter, we will
    go through some of the mobile debugging tools used to make frontend debugging
    easier, faster, and make web development more productive.
  prefs: []
  type: TYPE_NORMAL
- en: Remote debugging with Opera Dragonfly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browser: Opera Mobile'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile debugging is different from desktop debugging due to the relatively smaller
    mobile screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you are on a WiFi network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest version of Opera desktop browser at [http://www.opera.com/](http://www.opera.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Opera Mobile on your mobile device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing, Opera is at version 11.50\. Some of these instructions
    may change by the time you read the book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up Opera on your desktop, and from the drop-down menu, choose **Page**
    | **Developer Tools** | **Opera Dragonfly**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a debugger tool appear at the bottom of the page. Click on **Remote
    debug configuration**, as shown in the following screenshot:![How to do it...](img/1963_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we click on the **Remote debug configuration** button, there will be a
    pop-up panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the panel, you can see a text field to specify a port number and an **Apply**
    button. The default number should be unused and should work fine. Click on **Apply:**![How
    to do it...](img/1963_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now fire up your desktop console and type in `ipconfig` as the command. The
    IPv4 address is your IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Opera Mobile on a mobile device, type `opera:debug` in the URL address
    bar, and we will arrive at a page as follows:![How to do it...](img/1963_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the IP address you got from the desktop console, and click on **Connect**.
    Now the mobile browser should be connected to Dragonfly:![How to do it...](img/1963_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a new tab on Opera Mobile, visit Yahoo.com, now switch to desktop, and
    click on **Select the debugging context**, which is the fourth button at the upper-right
    corner. Select **Yahoo!** from the drop-down to start inspecting the page!
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Remote debugging with weinre*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Remote debugging with JS Console*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote debugging with weinre
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS, Android, Blackberry, webOS'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how you can debug Opera mobile pages remotely.
    In this recipe, we will see how we can debug remotely in other mobile devices.
    **Weinre** is a **Web Inspector Remote**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The supported OS include:'
  prefs: []
  type: TYPE_NORMAL
- en: Android 2.2 Browser application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android 2.2 w/PhoneGap 0.9.2iOS 4.2.x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile Safari application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlackBerry v6.x simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: webOS 2.x (unspecified version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we must download weinre from the official website; there are two versions
    available, one for PC and one for Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/phonegap/weinre/archives/master](http://github.com/phonegap/weinre/archives/master)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, get your IP address by running `ipconfig` in your console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an HTML document and name it `ch07r01.html`. Replace `192.168.1.11`
    with your own IP address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, locate the downloaded `weinre.jar` file. In my case, the path is `C:\xampp\htdocs\dev\weinre.jar`.
    Second, get the IP address, in my case, `http://192.168.1.11`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now fire up your console and type the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To test if it works, visit the URL address `http://192.168.1.11:8081/`, a page
    close to the following screenshot should appear:![How to do it...](img/1963_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now use your mobile device to access the sample page created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, back on the desktop, click on **Debug client user interface**. Do not open
    a tab, but open in a new window.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Elements**, and now you can inspect the elements (as shown in the
    following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Firebug on mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: Many people use Firebug on Firefox and Chrome, but Firebug Lite can be used
    on any browser that supports JavaScript. In this recipe, we will see how to use
    Firebug to debug.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch07r02.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code in HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Render it in a mobile browser:![How to do it...](img/1963_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firebug Lite is a JavaScript version of Firebug. The following line of code
    will load Firebug Lite script hosted on the Firebug site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can also download the script and add it as a local version.
  prefs: []
  type: TYPE_NORMAL
- en: You can access HTML, CSS, and JavaScript, and view the DOM. The console can
    be used for JavaScript input.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four distribution channels for Firebug Lite:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stable channel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug channel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Beta channel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer channel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The one we have been using is the stable channel. Other channels are explained
    under the *There's more* section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the live and local version, you can also add the bookmarklet. It
    may not work on all browsers. Here is how it can be done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the links on the right-hand side of the page: [http://getfirebug.com/firebuglite](http://getfirebug.com/firebuglite)![There''s
    more...](img/1963_07_23.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This adds the hash `#javascript:(function..`. to the end of the URL in the mobile
    browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bookmark the page on Safari.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the bookmark's name to be the name of the bookmarklet, Firebug Lite, Firebug
    Lite debug or Firebug Lite beta.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you save the bookmark, open the bookmark menu, select **Firebug Lite**
    and click on **Edit**. Delete the URL and the `#`, so only the part that starts
    with `javascript:(function` remains.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if you open any web page and tap on **Firebug Lite bookmark**, a Firebug
    console will appear at the bottom-right corner of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debug channel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The debug channel uses the same version as the stable channel, but with different
    pre-configurations to make it easier to debug Firebug Lite itself.
  prefs: []
  type: TYPE_NORMAL
- en: Beta channel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The beta channel is where the new features and fixes are polished. It should
    be considerably stable (no known regression), but it may contain some bugs and
    some features may be incomplete.
  prefs: []
  type: TYPE_NORMAL
- en: Developer channel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The developer channel is where the ideas get created and tested. Once it is
    tied directly to our code repository, you'll get the most recent code possible
    and will receive updates much more frequently than other channels. One thing to
    be aware of, however, is that the developer channel can be very unstable at times
    and the initial load can be slower.
  prefs: []
  type: TYPE_NORMAL
- en: Remote JavaScript debugging with JS Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: If you only look for remote JavaScript debugging, *Remy Sharp* has an awesome
    tool named JavaScript Console. It is really productive for mobile debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Visit [http://jsconsole.com/](http://jsconsole.com/) and you will see a page
    as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1963_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter `:listen` on the site, and you should see the following info messages
    returning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating connection …**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connected to "65C1F9F1-6A57-46C0-96BB-35C5B515331F"**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will be followed by a line of JavaScript looking like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/1963_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create an HTML page and name it `ch07r04.html`. Enter the following code to
    the document, replace the`<script>...</script>` with your own script that you
    got from jsconsole.com:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now if we render the page on a mobile device, we will see the desktop screen
    web page has log messages appearing:![How to do it...](img/1963_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following loop, we use `console.log` to output a string of messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Any calls to `console.log` from your web app will display the result in the
    jsconsole session that is listening to your key. Equally, if you run a command
    in the jsconsole session, the code will be injected in to your web app and the
    result returned to jsconsole.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The entire JavaScript Console web app is open source; if you want to learn
    more about how it was made, visit: [https://github.com/remy/jsconsole](http://github.com/remy/jsconsole).'
  prefs: []
  type: TYPE_NORMAL
- en: JS Console iOS app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JS Console for iOS, also made by *Remy Sharp*, is a JavaScript console to test
    and inspect the results of your JavaScript without the need to be online or in
    a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Simple iOS simulator example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This video made by *Remy Sharp* shows how remote debugging JavaScript is done
    in iOS using jsconsole.com. It shows how to receive logs and send arbitrary commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.youtube.com/watch?v=Y219Ziuipvc&feature=player_embedded](http://www.youtube.com/watch?v=Y219Ziuipvc&feature=player_embedded)'
  prefs: []
  type: TYPE_NORMAL
- en: Remote debugging JavaScript on any device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the following video, *Remy Sharp* recorded a walk through of how to use
    jsconsole.com to remotely debug any browser on any device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.youtube.com/watch?v=DSH392Gxaho&feature=player_embedded](http://www.youtube.com/watch?v=DSH392Gxaho&feature=player_embedded)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Mobile Safari debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS'
  prefs: []
  type: TYPE_NORMAL
- en: On iOS mobile Safari, there is a built-in debugger for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have an iPhone to hand and navigate to the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find and open the **Settings** application:![How to do it...](img/1963_07_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Safari:**![How to do it...](img/1963_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to find the **Developer** option at the bottom:![How to do it...](img/1963_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, the **Debug Console** is **OFF:**![How to do it...](img/1963_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can switch the **Debug Console** to **ON:**![How to do it...](img/1963_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Safari, look for the debug console's summary info at the top of the page,
    just below the URL bar:![How to do it...](img/1963_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Touch the summary info to view a detailed report for the errors on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s create an HTML document and name it `ch07r05.html`. Enter the following
    code to the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When rendering it, we can see:![How to do it...](img/1963_07_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you click on **Debug Console**, it will bring you to the message screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1963_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following script is used to create the debug message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
