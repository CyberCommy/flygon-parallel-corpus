- en: Chapter 14. Final Automatization and Processes Optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last chapter, we will discuss a final automatization of repeatable processes
    during the creation of CSS code. There are a lot of processes that can be automatized,
    but awareness of whether it can be done and knowledge of the tools to be used
    is essential. In this chapter, we will focus on tools and how to implement automatizations
    in the Gulp task runner.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Images on retina and mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to recognize unused CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to minify the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make a screenshots from the list of pages for quicker overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the basics of Jade templating and append its compilation into Gulp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gulp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this book, I introduced Gulp as a starter for SASS. But
    using Gulp just to compile SASS can be a waste of time. In this chapter, we will
    add more tasks to Gulp, which can be used as a frontend developer and which will
    help you to optimize your code.
  prefs: []
  type: TYPE_NORMAL
- en: Jade as your templating engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Writing HTML files can be problematic in the case of bigger projects. The maintenance
    of repeatable elements of a page, such as main navigation footer sidebars, can
    be a problem when you need to work with, for example, 10 files. Each time you
    want to change something in the footer, you will need to update 10 files. The
    situation becomes more complicated when a project has 50 templates. You can start
    using, for example, PHP or any language that includes files with repeatable parts
    of code or use one of the template languages. There are multiple templating systems.
    Some of the well-known and trendy ones are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Handlebars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jade
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s focus on Jade. Why? Because of the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Mixins support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Master templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partialization of files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indented syntax (similar to SASS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using Jade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jade is installed by node package manager. You can install it with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to compile some file, you just need to invoke the HTML file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For more information, I recommend you to check the official documentation of
    the Jade templating system at [http://jade-lang.com/](http://jade-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Basics of Jade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is good to have a theoretical introduction, but let''s try to describe this
    part of the code into Jade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In Jade, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that you don''t need to think about the standard HTML problem "is
    my tag closed?" Indentations are keeping track of the opening and closing of tags.
    Each text that you want to append into a tag appears after a space after the tag
    description (name and attributes). Let''s take a look at this part of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This part of code will be compiled to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, in Jade, an attribute (`href`) appeared after element name
    (`a`), which is described in brackets. Let''s take the next part of the HTML code
    that we will translate to Jade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This part of the code will be repeating on all pages because it contains the
    `head` tag of our HTML. In Jade, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here you can see how to append more attributes to the HTML element. In the `link`
    element, each attribute in brackets is separated with commas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part of the code is related to the DOM elements with classes and IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In Jade, the code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that you don''t need to describe this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a short form in Jade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The same situation with classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use a short form too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This short method makes Jade easy to understand because it is based on selectors
    used in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins in Jade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mixins in Jade are very useful, especially when you have some repeatable elements
    on the web page. This can be, for example, some small element like `a` with `href`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'All we need to do now to invoke it is just add it in your template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And in your compiled file, you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Include and extend functions in Jade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned before, we can keep parts of code in separate files. The easiest
    way to do it is the `include` method. Let''s imagine that we have defined the
    main `nav` in the file `navigation.jade` and we want to append its content in
    our template. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File name is: `navigation.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `template.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When you compile `template.jade`, you will get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a great moment to use a master layout that can be extended. This can
    be done with code manipulation. The first manipulation has to be made in the master
    template—define a block that will be swapped in our HTML file. The second needs
    to be done in the file that will represent a final HTML file—point master template
    which will be extended. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File name is: `master.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `index.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Jade in gulp.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create or add Jade tasks in `gulpfile.js`, you need to install a specific
    package with `npm`: `gulp-jade`. To do so, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you need to define a new task in `gulpfile.js` and add a watcher for templates,
    which will be stored in the `src/jade` directory. Here''s a listing of the extended
    `gulpfile.js` from the first chapter of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How will it behave? Every time you change any of the files in the folder `src/jade`,
    compiled files will land in the `dist` folder. Of course, this structure can be
    changed if you wish; this is just sample of usage. Feel free to change it!
  prefs: []
  type: TYPE_NORMAL
- en: UnCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How many times have you faced a situation where some classes/selectors are
    not used in HTML but are described in CSS code? This happens every time your project
    is changed or redesigned. For example, your task is to remove some section and
    add a few more lines in the HTML code. So you will add some CSS code and then
    remove some of it. But are you sure that the CSS code doesn''t contain unused
    CSS portions of code? UnCSS will help you to finish this task. To install it,
    you need to execute this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the flags used in the `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Flag | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-g` | Global installation |'
  prefs: []
  type: TYPE_TB
- en: '| `--save` | Local installationThese packages will appear in `package.json`
    in the section `dependencies`.These packages are needed to run your app in production.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--save-dev` | Local installationThese packages will appear in `package.json`
    in the section `devDependencies`.These packages are needed for development and
    testing processes. |'
  prefs: []
  type: TYPE_TB
- en: Integrating UnCSS in Gulp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to install `gulp-uncss` through `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to add new tasks in `gulpfile.js`. We will need to create a test
    stage in our project, which will be stored in the `test` directory. You need these
    new tasks to make a process based on `uncss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the `uncss` task, you need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Compile Jade files to the `test` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove old CSS files from the `test` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile SASS files to the `test` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the `uncss` task and save the document with only the used part of CSS in
    the `test/uncss` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we need to test it live. We will prepare a short testing environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the structure of the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File name is: `main.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `navigation.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `footer.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `index.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `about.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `contact.jade`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `main.sass`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s check whether the process was good for us. This is the file compiled
    from SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This file is checked by `uncss`, which looked into all the templates (`index.html`,
    `about.html`, and `contact.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Our new command built with Gulp removed all unnecessary CSS declarations.
  prefs: []
  type: TYPE_NORMAL
- en: Minifying CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Minification is a process that should be done mainly for production code. It''s
    going to be hard to work on minified files during the development process, so
    we need to minify our code for production code only. It is possible to enable
    minification in SASS or Compass compilation by adding a proper flag (`--compressed`).
    We will additionally use an external tool for this, to minify the code after the
    `uncss` process. What we need to do now is to install `gulp-clean-css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, minify the result of the `uncss` process. We will create a `prod` directory
    in which we will store our final version of the project. Now let''s import `gulp-clean-css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the sections needed in `gulpfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Final automatizer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we have to gather all our previously created tasks into one file. The core
    of the `gulp` project is two files: `package.json`, which gathers all project
    dependencies, and `gulpfile`, in which you can store all tasks. Here are the tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File name is: `package.json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'File name is: `gulpfile.json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the basics of the Jade templating system. We saw
    how to append it to the frontend developer's workflow. Based on the templating
    system, you can now include UnCSS to your process and remove unnecessary code
    from the CSS file. Then we minified the final result and created a production
    code.
  prefs: []
  type: TYPE_NORMAL
- en: You can treat this automatizer as a starter for your projects and you can adjust
    it for your projects. You can also add new features and work on its evolution.
  prefs: []
  type: TYPE_NORMAL
