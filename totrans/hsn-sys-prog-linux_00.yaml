- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Linux OS and its embedded and server applications are critical components
    of today''s key software infrastructure in a decentralized and networked universe.
    Industry demand for proficient Linux developers is ever-increasing. This book
    aims to give you two things: a solid theoretical base, and practical, industry-relevant
    information—illustrated by code—covering the Linux system programming domain.
    This book delves into the art and science of Linux system programming, including
    system architecture, virtual memory, process memory and management, signaling,
    timers, multithreading, scheduling, and file I/O.'
  prefs: []
  type: TYPE_NORMAL
- en: This book attempts to go beyond the use API X to do Y approach; it takes pains
    to explain the concepts and theory required to understand the programming interfaces,
    the design decisions, and trade-offs made by experienced developers when using
    them and the rationale behind them. Troubleshooting tips and industry best practices
    round out the book's coverage. By the end of this book, you will have the conceptual
    knowledge, as well as the hands-on experience, needed for working with Linux system
    programming interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Hands-On System Programming with Linux* is for Linux professionals: system
    engineers, programmers, and testers (QA). It''s also for students; anyone, really,
    who wants to go beyond using an API set to understand the theoretical underpinnings
    and concepts behind the powerful Linux system programming APIs. You should be
    familiar with Linux at the user level, including aspects such as logging in, using
    the shell via the command-line interface, and using tools such as find, grep,
    and sort. A working knowledge of the C programming language is required. No prior
    experience with Linux systems programming is assumed.'
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](c17af8c2-a426-4ab6-aabb-aa1374e56cc4.xhtml), *Linux System Architecture*,
    covers the key basics: the Unix design philosophy and the Linux system architecture.
    Along the way, other important aspects—CPU privilege levels, the processor ABI,
    and what system calls really are—are dealt with.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](976fc2af-8bb4-4060-96cd-3b921682ed75.xhtml), *Virtual Memory*,
    dives into clearing up common misconceptions about what virtual memory really
    is and why it is key to modern OS design; the layout of the process virtual address
    space is covered too.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](4161d1ed-20ea-4fa5-8947-646055d956cb.xhtml), *Resource Limits,* delves
    into the topic of per-process resource limits and the APIs governing their usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](0b4868f7-a8d0-4ced-831f-20af9929de9f.xhtml), *Dynamic Memory Allocation*,
    initially covers the basics of the popular malloc family of APIs, then dives into
    more advanced aspects, such as the program break, how malloc really behaves, demand
    paging, memory locking and protection, and using the alloca function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](066d0c5c-5b82-4a63-bb4c-ca2503e32ea4.xhtml), *Linux Memory Issues, *introduces
    you to the (unfortunately) prevalent memory defects that end up in our projects
    due to a lack of understanding of the correct design and use of memory APIs. Defects
    such as undefined behavior (in general), overflow and underflow bugs, leakage,
    and others are covered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](406956b7-38f0-40c1-a76b-366ab36db17b.xhtml), *Debugging Tools for
    Memory Issues, *shows how to leverage existing tools, including the compiler itself,
    Valgrind, and AddressSanitizer, which is used to detect the memory issues you
    will have seen in the previous chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](7b84d41f-dfff-439b-a751-46880cfe4651.xhtml), *Process Credentials, *is
    the first of two chapters focused on having you think about and understand security
    and privilege from a system perspective. Here, you''ll learn about the traditional
    security model – a set of process credentials – as well as the APIs for manipulating
    them. Importantly, the concepts of setuid-root processes and their security repercussions
    are delved into.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](b4538277-87f0-46f1-83fa-632fa470bfd7.xhtml), *Process Capabilities*,
    introduces you to the modern POSIX capabilities model and how security can benefit
    when application developers learn to use and leverage this model instead of the
    traditional model (seen in the previous chapter). What capabilities are, how to
    embed them, and practical design for security is also looked into.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](3b2340aa-4ab7-46e3-93c0-7f7c210f834b.xhtml), *Process Execution, *is
    the first of four chapters dealing with the broad area of process management (execution,
    creation, and signaling).In this particular chapter, you''ll learn how the (rather
    unusual) Unix exec axiom behaves and how to use the API set (the exec family)
    to exploit it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](607ad988-406d-4736-90a4-3a318672ab6e.xhtml), *Process Creation,*
    delves into how exactly the `fork(2)` system call behaves and should be used;
    we depict this via our seven rules of fork. The Unix fork-exec-waitsemantic is
    described (diving into the wait APIs as well), orphan and zombie processes are
    also covered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](99fafa09-8972-4d9f-b241-46caf9de98f3.xhtml), *Signaling – Part
    I*, deals with the important topic of signals on the Linux platform: the what,
    the why, and the how. We cover the powerful `sigaction(2)` system call here, along
    with topics such as reentrant and signal-async safety, sigaction flags, signal
    stacks, and others.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](657b6be0-ebc8-40dd-81b6-4741b04602b1.xhtml), *Signaling – Part
    II*, continues our coverage of signaling, what with itbeing a large topic. We
    take you through the correct way to write a signal handler for the well-known
    and fatal segfault, working with real-time signals, delivering signal to processes,
    performing IPC with signals,  and alternate means to handle signals.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](1f621f72-e067-42db-b2eb-b82e20161dec.xhtml), *Timers, *teaches
    you about the important (and signal-related) topic of how to set up and handle
    timers in real-world Linux applications. We first cover the traditional timer
    APIs and quickly move onto the modern POSIX interval timers and how to use them
    to this end. Two interesting, small projects are presented and walked through.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](586f3099-3953-4816-8688-490c9cf2bfd7.xhtml), *Multithreading with
    Pthreads Part I –  Essentials, *is the first of a trilogy on multithreading with
    the pthreads framework on Linux. Here, we introduce you to what exactly a thread
    is, how it differs from a process, and the motivation (in terms of design and
    performance) for using threads. The chapter then guides you through the essentials
    of writing a pthreads application on Linux ,covering thread creation, termination,
    joining, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](5e7e9c60-48d8-41bd-adef-31bbfd598c78.xhtml), *Multithreading with
    Pthreads Part II – Synchronization, *is a chapter dedicated to the really important
    topic of synchronization and race prevention. You will first understand the issue
    at hand, then delve into the key topics of atomicity, locking, deadlock prevention,
    and others. Next, the chapter teaches you how to use pthreads synchronization
    APIs with respect to the mutex lock and condition variables.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](4df10c19-b400-4805-8e6e-51a8f43dcfa4.xhtml), *Multithreading with
    Pthreads Part III, *completes our work on multithreading; we shed light on the
    key topics of thread safety, thread cancellation and cleanup, and handling signals
    in a multithreaded app. We round off the chapter with a discussion on the pros
    and cons of multithreading and address some FAQs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](36229bac-c402-4d2f-b876-d1eb4aba8051.xhtml), *CPU Scheduling on
    Linux, *introduces you to scheduling-related topics that the system programmer
    should be aware of. We cover the Linux process/thread state machine, the notion
    of real time and the three (minimal) POSIX  CPU scheduling policies that the Linux
    OS brings to the table. Exploiting the available APIs, you''ll learn how to write
    a soft real-time app on Linux. We finish the chapter with a brief look at the
    (interesting!) fact that Linux *can *be patched to work as an RTOS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18](cf0e96e2-0e5d-4fb2-abc2-742bc93b61d0.xhtml), *Advanced File I/O, *is
    completely focused on the more advanced ways of performing IO on Linux in order
    to gain maximum performance (as IO is often the bottleneck). You are briefly shown
    how the Linux IO stack is architected (the page cache being critical), and the
    APIs that give advice to the OS on file access patterns. Writing IO code for performance,
    as you''ll learn, involves the use of technologies such as SG-I/O, memory mapping,
    DIO, and AIO.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19](b6b41870-c02e-4379-af86-b5e501799c31.xhtml), *Troubleshooting
    and Best Practices, *is a critical summation of the key points to do with troubleshooting
    on Linux. You''ll be briefed upon the use of powerful tools, such as perf and
    tracing tools. Then, very importantly, the chapter attempts to summarize key points
    on software engineering in general and programming on Linux in particular, looking
    at industry best practices. We feel these are critical takeaways for any programmer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A](https://www.packtpub.com/sites/default/files/downloads/File_IO_Essentials.pdf),
    File I/O Essentials, introduces you to performing efficient file I/O on the Linux
    platform, via both the streaming (stdio library layer) API set as well as the
    underlying system calls. Along the way, important information on buffering and
    its effects on performance are covered.'
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter refer to: [https://www.packtpub.com/sites/default/files/downloads/File_IO_Essentials.pdf](https://www.packtpub.com/sites/default/files/downloads/File_IO_Essentials.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix B](https://www.packtpub.com/sites/default/files/downloads/Daemon_Processes.pdf),
    Daemon Processes, introduces you, in a succinct fashion, to the world of the daemon
    process on Linux. You''ll be shown how to write a traditional SysV-style daemon
    process. There is also a brief note on what is involved in constructing a modern,
    new-style daemon process.'
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter refer to: [https://www.packtpub.com/sites/default/files/downloads/Daemon_Processes.pdf](https://www.packtpub.com/sites/default/files/downloads/Daemon_Processes.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, this book is targeted at both Linux software professionals—be
    they developers, programmers, architects, or QA staff members—as well as serious
    students looking to expand their knowledge and skills with the key topics of system
    programming on the Linux OS.
  prefs: []
  type: TYPE_NORMAL
- en: We assume that you are familiar with using a Linux system via the command-line
    interface, the shell. We also assume that you are familiar with programming in
    the C language, know how to use the editor and the compiler, and are familiar
    with the basics of the Makefile. We do *not *assume that you have any prior knowledge
    of the topics covered in the book.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book—and we are very clear on this point—you must not
    just read the material, but must also actively work on, try out, and modify the
    code examples provided, and try and finish the assignments as well! Why? Simple: doing is
    what really teaches you and internalizes a topic; making mistakes and fixing them
    being an essential part of the learning process. We always advocate an empirical
    approach—don't take anything at face value. Experiment, try it out for yourself,
    and see.
  prefs: []
  type: TYPE_NORMAL
- en: To this end, we urge you to clone this book's GitHub repository (see the following
    section for instructions), browse through the files, and try them out. Using a
    **Virtual Machine** (**VM**) for experimentation is (quite obviously) definitely
    recommended (we have tested the code on both Ubuntu 18.04 LTS and Fedora 27/28).
    A listing of mandatory and optional software packages to install on the system
    is also provided within the book's GitHub repository; please read through and
    install all required utilities to get the best experience.
  prefs: []
  type: TYPE_NORMAL
- en: Last, but definitely not least, each chapter has a *Further reading *section,
    where additional online links and books (in some cases) are mentioned; we urge
    you to browse through these. You will find the *Further reading *material for
    each chapter available on the book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-on-System-Programming-with-Linux](https://github.com/PacktPublishing/Hands-on-System-Programming-with-Linux).
    We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out.
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781788998475_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781788998475_ColorImages.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Let''s check these out via the source code of our `membugs.c` program."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select C as the language via the drop-down."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `customercare@packtpub.com` and mention the book
    title in the subject of your message. If you have questions about any aspect of
    this book, please email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
