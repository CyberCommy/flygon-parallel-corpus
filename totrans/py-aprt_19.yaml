- en: Appendix B – Packaging and distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packaging and distributing your Python code can be a complex and sometimes confusing
    task, especially if your projects have lots of dependencies or involve components
    more exotic than straight Python code. However, for many cases it’s very straightforward
    to make your code accessible to others in a standard way, and we’ll see how to
    do that using the standard `distutils` module in this section. The main advantage
    of `distutils` is that it’s included in the Python Standard Library. For much
    beyond the simplest packaging requirements you’ll probably want to look at `setuptools`
    instead, which has capabilities beyond those of `distutils`, but which is correspondingly
    more confusing.
  prefs: []
  type: TYPE_NORMAL
- en: The `distutils` module allows you to write a simple Python script which knows
    how to install your Python modules into any Python installation, including one
    hosted in a virtual environment. By convention this script is called `setup.py`
    and it exists at the top level of your project structure. This script can then
    be executed to perform the actual installation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a package with `distutils`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s see a simple example of `distutils`. We’ll create a basic `setup.py` installation
    script for the `palindrome` module we wrote in the Chapter 11.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we want to do is to create a directory to hold our project.
    Let’s call this `palindrome`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s put a copy of our `palindrome.py` in this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally let’s create the `setup.py` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first line in the file imports the functionality we need from the `distutils.core`
    module, namely the `setup()` function. This function does all of the work of installing
    our code, so we need to tell it about the code we’re installing. We do this, of
    course, with the arguments we pass to the function.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we tell `setup()` is the name of this project. We’ve chosen
    `palindrome` in this case, but you can choose any name you like. In general, though,
    it’s simplest to just keep the name the same as your project name.
  prefs: []
  type: TYPE_NORMAL
- en: The next argument we pass to `setup()` is the version. Again, this can be any
    string you want. Python doesn’t rely on the version to follow any rules.
  prefs: []
  type: TYPE_NORMAL
- en: The next argument, `py_modules`, is probably the most interesting. We use this
    to specify the Python modules we want to install. Each entry in this list is the
    name of the module without the `.py` extension. `setup()` will look for a matching
    `.py` file and install it. So, in our example, we’ve asked `setup()` to install
    `palindrome.py` which, of course, is a file in our project.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the arguments we’re using here are fairly self-explanatory and are
    there mostly to help people to use your module correctly and to know who to contact
    if they have problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start using our `setup.py`, we first need to create a virtual environment
    into which we’ll install our module. In your `palindrome` directory, create a
    virtual environment called `palindrome_env`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When this completes, activate the new environment. On Linux or macOS, source
    the activate script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'or on Windows call the script directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Installing with `distutils`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we’ve got our `setup.py`, we can use it to do a number of interesting
    things. The first, and perhaps most obvious, thing we can do is install our module
    into our virtual environment! We do this by passing the `install` argument to
    `setup.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When invoked `setup()` prints out a few lines to tell you about its progress.
    The most important line for us is where is actually copies `palindrome.py` into
    the installation folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `site-packages` directory of a Python installation is where third-party
    packages such as ours are normally installed. So it looks like the installation
    worked properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s verify this by running Python and seeing that our module can be imported.
    Note that we want to change directories before we do this, otherwise when we import
    `palindrome` Python will load the source file in our current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here we use the `__file__` attribute on the module to see where it was imported
    from, and we see that we’re importing it from our virtual environment’s `site-packages`,
    which is exactly what we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t forget to switch back to your source directory after exiting the Python
    REPL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Packaging with `distutils`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another useful feature of `setup()` is that it can create various types of
    “distribution” formats. It will take all of the modules you’ve specified and bundle
    them up into packages that are easy to distribute to others. You can do this with
    the `sdist` command (which is shorthand for ‘source distribution’):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look, we’ll see that this command created a new directory, `dist`, which
    contains the newly generated distribution file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'and if we unzip that file we’ll see that it contains our project’s source code,
    including the `setup.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So now you can send this zip file to anyone who wants to use your code, and
    they can use the `setup.py` to install it into their system. Very convenient!
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the `sdist` command can produce distributions of various types. To
    see the available options, you can use the `--help-formats` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This section really just touches on the very basics of `distutils`. You can
    find out more about how to use `distutils` by passing `--help` to `setup.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For many simple projects you’ll find that what we’ve just covered is almost
    all you need to know.
  prefs: []
  type: TYPE_NORMAL
