- en: Continuous Profiling and Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to install and configure profiling and monitoring
    tools that will help you easily optimize PHP code in a **continuous integration**
    (**CI**) and a **continuous deployment** (**CD**) environment.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by installing and configuring a basic `Blackfire.io` setup in
    order to easily and automatically profile code when committing it to a repository.
    We will also learn how to install a TICK Stack in order to continuously monitor
    our code's performance after its deployment on a live production server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, in this chapter, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the `Blackfire.io` agent, client and PHP extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the `Blackfire.io` client with Google Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the `Blackfire.io` client with a known CI tool like Travis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring a complete TICK Stack with Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Blackfire.io?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated on the official Blackfire website ([https://blackfire.io](https://blackfire.io)),
    *Blackfire empowers all developers and IT/Ops to continuously verify and improve
    their app's performance, throughout its life cycle, by getting the right information
    at the right moment. It is, therefore, a performance management solution that
    allows you to automatically profile your code and set performance standards through
    assertions throughout your application's life cycle, especially in the development
    phase*. `Blackfire.io` is a tool that makes what Fabien Potencier calls *performance
    as a feature* possible, by making performance tests a part of the development
    cycle from the very beginning of a project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Blackfire.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing and configuring `Blackfire.io` means setting up three components:
    the agent, the client and the PHP Probe. In the context of this book, we will
    be installing `Blackfire.io` inside our Linux for PHP container. To get more information
    on installing `Blackfire.io` on another operating system, please see the following
    instructions: [https://blackfire.io/docs/up-and-running/installation](https://blackfire.io/docs/up-and-running/installation).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by installing the Blackfire agent. On the container''s command-line
    interface, enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the download is completed, you should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/65c9d459-6f78-4931-b408-136785016f85.png)Blackfire agent download
    is done'
  prefs: []
  type: TYPE_NORMAL
- en: 'If so, please continue by typing these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will copy a basic agent configuration file to our `etc` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the content of the file we just copied. It is a basic configuration
    file, as suggested by the Blackfire team:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create an empty file that will be used as the agent''s socket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will register our agent with the Blackfire service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you will have entered the last command, you will have to supply your Blackfire
    server credentials. These can be found in your Blackfire account at: [https://blackfire.io/account#server](https://blackfire.io/account#server).
    Once you have entered your credentials, you can start the agent by entering the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After starting the agent, you should see the agent''s PID number. This tells
    you that the agent is listening on the default UNIX socket that we created previously.
    In this example, the agent has a PID number of eight (8):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e7dcf06d-e85a-4ffc-8f14-27769d0ba0dc.png)Blackfire agent process
    ID number is displayed'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the agent is installed and configured, you can install the Blackfire client.
    We will install and configure the client by issuing the following commands. Let''s
    start by downloading the binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After the download is done, you should see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/81e2991b-5479-46af-8597-b0842fd7c96d.png)Blackfire client download
    is done'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now proceed to configure the client. Enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering the final command, you will have to supply your Blackfire client
    credentials. These can also be found in your Blackfire account at the following
    URL: [https://blackfire.io/account#client](https://blackfire.io/account#client).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step in order to run `Blackfire.io` on our server is to install the
    Blackfire Probe as a PHP extension. In order to do this, please start by downloading
    the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the download is completed, you should get this confirmation message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbbc8f29-df0d-45ed-b35a-b66504dc1821.png)Blackfire probe download
    is done'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then copy the shared library file into your PHP extensions directory.
    If you are not sure of this directory''s location, you can issue the following
    command before moving the library file into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the extension's directory is `/usr/lib/php/extensions/no-debug-non-zts-20160303`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now configure the extension in the `PHP.INI` file. When activating
    the Blackfire Probe, it is recommended that you deactivate other debugging and
    profiling extensions such as xdebug. Please run the following commands (alternatively,
    you can copy and paste the `PHP.INI` file that is included in our repository and
    already contains these modifications):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Please complete the extension''s installation and configuration by restarting
    PHP-FPM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s profile our first script from the command line. You can now run the
    client by entering the following command on the container''s CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the profile is completed, you will obtain a URL and some profile statistics.
    If you browse to the URL, you will see the profile''s call graph and get more
    detailed information on the profiled script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/61a6dd68-99c9-46e6-8447-9012886ceadb.png)The Blackfire client returns
    a preliminary profiling report and a URL to view the script’s call graph'
  prefs: []
  type: TYPE_NORMAL
- en: 'You also have the option of installing the client as a browser plugin. In this
    example, we will be using the Blackfire Companion, a Google Chrome extension.
    To install the extension, visit the following URL with Chrome and click on the
    install button: [https://blackfire.io/docs/integrations/chrome](https://blackfire.io/docs/integrations/chrome).
    Once done, it will be possible to profile the resources on the server by browsing
    to the page and clicking on the Blackfire Companion''s icon in the toolbar and
    then, on the Profile button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6f6c1807-4dee-4cea-bf6e-0f5525a9485c.png)Blackfire Companion for
    Chrome allows you to profile a PHP script directly from the browser'
  prefs: []
  type: TYPE_NORMAL
- en: Profiling manually with Blackfire.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by profiling manually two PHP scripts in order to better understand
    how useful and powerful the Blackfire tools can be. We will use the following
    script, which can be found in our repository (`chap2pre.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The script essentially lists all files contained in our repository (the directory
    and its subdirectories) and calculates the size of each file. Also, it gives an
    aggregate result of the sizes of each directory. Please browse to the following
    URL with Chrome to see the script''s output and launch a profile using the Blackfire
    Companion: `http://localhost:8181/chap2pre.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/171e5bab-1f71-40f1-9f7b-125aa6bd05f3.png)Clicking on the Blackfire
    icon in the upper-right toolbar will allow you to launch a profiling session'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on the Profile button and waiting a few seconds, you should
    then have the option of clicking the View Call Graph button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f7030d4d-e30b-437b-820e-6c5d3e56b125.png)You can click on the ‘View
    call graph’ button to view the script’s call graph'
  prefs: []
  type: TYPE_NORMAL
- en: 'The results should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/55a58fb4-3274-4c85-bd77-17660c01d532.png)The script took 14.3 ms
    to complete its execution and five processes were created using the ''popen''
    function'
  prefs: []
  type: TYPE_NORMAL
- en: The result shows us that this script has a real time (wall time[1]) of 14.3
    ms and that the only functions with important exclusive times are `stream_get_contents`
    and `popen`. This is logical, as the script has to deal with disk access and possibly
    a lot of I/O latency. What is less logical is that the script seems to be creating
    five sub-processes in order to get a simple file listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if we scroll down, we notice that `SplInfo::getFilename` is called sixty-seven
    times, which is almost twice the number of files in the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6be50866-01b2-444c-8ac4-7ff1716958e1.png)The SplFileInfo::getFilename
    function was called 67 times'
  prefs: []
  type: TYPE_NORMAL
- en: 'The information obtained from the profiler allows us to quickly identify which
    parts of our code base should become code review candidates and what to look for
    when reviewing them. A quick look at our code shows us that we are calling `popen`
    on every directory iteration, rather than only once at the beginning. A simple
    fix would be to replace these two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines of code could then be inserted in their place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The final adjustment would be to replace all calls to `SplInfo::getFilename()`
    with a variable containing the result of the function call. The modified script
    would then look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try profiling the new script (`chap2post.php`) in order to measure our
    improvements. Again, please browse to the following URL with Chrome to see the
    script''s output and launch a profile using the Blackfire Companion: `http://localhost:8181/chap2post.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The results should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/da3260d9-14de-48b4-b1ec-735d990cd3d2.png)Now, the script takes only
    4.26 ms to complete its execution and only one process was created using the ''popen''
    function'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result shows us that this script now has a wall time of 4.26 ms and that
    the function `popen` is only creating one sub-process. Also, if we scroll down,
    we now notice that `SplInfo::getFilename` is only called thirty-three times which
    is two times less than before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4bcc5dee-e4c1-47c0-b10e-3387d621b989.png)Now, the SplFileInfo::getFilename
    function gets called only 33 times'
  prefs: []
  type: TYPE_NORMAL
- en: These are significant improvements, especially if this script is to be called
    thousands of times per minute on different directory structures. A good way to
    make sure that these improvements are not lost in future iterations of our application's
    development cycle would be to automate the profiler through performance tests.
    We will now give a quick example of how to automate performance testing with `Blackfire.io`.
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing with Blackfire.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start, please note that this feature is available only to premium
    and enterprise users and that, therefore, it requires a paid subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to automate performance testing, we will start by creating a very
    simple `blackfire.yml` file in our repository. This file will contain our tests.
    A test should be composed of a name, a regular expression and a set of assertions.
    It is always preferable to avoid creating volatile time tests as these make for
    very brittle tests that might yield very different results from one profiling
    session to the next. Examples of strong performance tests would be to check CPU
    or memory consumption, number of SQL queries or testing results by profile comparisons.
    In our case, we will create a very basic and volatile time test just for the sake
    of giving a short and simple example. Here is the content of our `.blackfire.yml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step would be to integrate this performance test with a continuous
    integration tool. To select the tool of your choice, please consult the documentation
    at the following URL: [https://blackfire.io/docs/integrations/index](https://blackfire.io/docs/integrations/index).'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we will integrate with *Travis CI*. To do so, we must create two
    files. One will include our credentials and must be encrypted (`.blackfire.travis.ini.enc`).
    The other will include our Travis instructions (`.travis.yml`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the content of our `.blackfire.travis.ini` file before encryption (replace
    the credentials with your own):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This file must then be encrypted before being committed to your repository.
    To do so, please issue the following commands inside the Linux for PHP container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the content of our `.travis.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Once committed, this configuration will ensure that the performance tests will
    run on each git push to your Github repository. Thus, performance becomes a feature
    and is continuously tested like any other of your application's features. The
    next step is to monitor your code's performance after deployment on a production
    server. Let's discover some of the available tools in order to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring performance with the TICK Stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TICK Stack was developed by InfluxData (*InfluxDB*) and is made of a series
    of integrated components that allow you to easily process time-series data generated
    by different services through time. TICK is an acronym that is composed of the
    first letters of each main product of the monitoring suite. T is for Telegraf,
    which collects the information we wish to obtain on our production server. I is
    for InfluxDB, which is a time-series database that contains the information collected
    by Telegraf or by any other application which is configured to do so. C is for
    Chronograf, a graph tool that allows us to easily understand the collected data.
    Finally, K is for Kapacitor, an alert automation tool.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring infrastructure performance is not only important to determine if
    applications and scripts are running as expected, but also allows for development
    of more advanced algorithms such as failure prediction and unexpected behavior
    pattern recognition, thus making it possible to automate many aspects of performance
    monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, there are many other great performance monitoring tools, like Prometheus
    and Graphite, but we decided to use the TICK stack instead, because we are more
    interested in doing event logging than doing pure metrics. For more information
    on what the TICK stack is, how it works internally and what it is used for, please
    read this very informative article by Gianluca Arbezzano published on the Codeship
    website: [https://blog.codeship.com/infrastructure-monitoring-with-tick-stack/](https://blog.codeship.com/infrastructure-monitoring-with-tick-stack/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, in order to see how useful our `Blackfire.io` supported analysis was and
    how much more efficient our code has become, we will run the two scripts again
    but, this time, while using copies of the official TICK Docker images so that
    we may monitor any improvement in the Web server's overall performance once the
    optimized PHP script is deployed on it. We will also be replacing Chronograf with
    Grafana, a highly customizable graph tool, and we will not be setting up Kapacitor,
    since configuring alerts is slightly beyond the scope of our current objectives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by activating `mod_status` on our Apache server. From our Linux
    for PHP''s CLI, enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once you have done this, you should be able to see the server's status report
    by browsing with Chrome to the following URL: `http://localhost:8181/server-status?auto`.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to launch the TICK suite. Please open two new Terminal windows
    in order to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first Terminal window, type this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the second newly opened Terminal window, get the IP addresses of our
    two containers by issuing this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result of this command on my computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ce8758b7-ec84-4df8-88cd-455cec441844.png)The IP addresses of the
    two containers'
  prefs: []
  type: TYPE_NORMAL
- en: Please retain these two addresses as they will be needed to configure Telegraf
    and Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: We will now generate a sample configuration file for Telegraf with a simple
    command (this step is optional, as a sample file is already included in this book's
    repository).
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, change the directory to our project''s working directory (Git repository)
    and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, open the new file with your favorite editor and uncomment the following
    lines in the `inputs.apache` section. Do not forget to enter our Linux *for PHP*
    container''s IP address on the `urls` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8c183a7-d96c-49b5-8d1b-1120d6acac48.png)Configuring Telegraf in
    order to have it monitor the Apache server running in the other container'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Terminal window, we can now launch Telegraf with this command (please
    make sure that you are in our project''s working directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second newly spawned Terminal window, launch Grafana with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With Chrome, browse to `http://localhost:3000/login`. You will see Grafana''s
    login page. Please authenticate with the User admin using the Password admin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/56f9895a-06a5-4188-8875-ac3e1220d599.png)The Grafana login page
    is displayed'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add a new data source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2a0326db-90f7-4ce5-b350-936ee3e6acfd.png)Connecting Grafana to a
    data source'
  prefs: []
  type: TYPE_NORMAL
- en: 'Please choose a name for the InfluxDB data source. Select InfluxDB as the type.
    Enter the URL for the InfluxDB container instance, which includes the IP address
    that you obtained in one of our previous steps, followed by the default port number
    for InfluxDB, which is 8086\. You can select direct access. The database''s name
    is telegraf and the database''s user and password are root:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/efe9ed1a-b23c-411e-bff9-69b844c5a244.png)Configuring Grafana''s
    data source'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, click the Add button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/01c2e253-e68f-4b92-9070-5da430a891c8.png)Adding the data source'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the data source has been added, let''s add a couple of dashboards
    that we will import from the Grafana website. Start by clicking Import under the
    Dashboards menu entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aaa308c4-dd9a-4ba5-9a9d-0891eac34f73.png)Click on the import menu
    item to begin importing dashboards'
  prefs: []
  type: TYPE_NORMAL
- en: 'The two dashboards that we will add are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Telegraf Host Metrics ([https://grafana.com/dashboards/1443](https://grafana.com/dashboards/1443)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/f33d00fa-ffd4-457c-8190-0a263d1a5105.png)The homepage of the Telegraf
    Host Metrics dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache Overview ([https://grafana.com/dashboards/331](https://grafana.com/dashboards/331)):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/2356dfeb-5bca-458a-aba8-8bd40c185f83.png)The homepage of the Apache
    Overview dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the import screen, simply enter the number of the dashboard and click Load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5f6f1fe5-7540-4412-a155-4989ae0098a7.png)Loading the Telegraf Host
    Metrics dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, confirm the name of the new dashboard and select our Local InfluxDB connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/96777062-1a40-4a25-aba2-3e1101f5239d.png)Connecting the Telegraf
    Host Metrics dashboard to the InfluxDB data source'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see the new dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d04fec9b-f9c4-4ddb-9df5-8d6c708a9156.png)The Telegraf Host Metrics
    dashboard is displayed'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now repeat the final two steps in order to import the Apache Overview
    dashboard. After clicking on the Import button under the Dashboards menu entry,
    enter the dashboard''s identifier (`331`) and click the Load button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e0c0faa6-3265-4e1d-ae5a-2afac962ffdc.png)Loading the Apache Overview
    dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, confirm the name and select our Local InfluxDB data source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a207e4f0-7695-4895-856e-3a6d5a821eec.png)Connecting the Apache Overview
    dashboard to the InfluxDB data source'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see the second dashboard in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bf9d26a3-d85b-4964-a48c-3a462ffb0c93.png)The Apache Overview dashboard
    is displayed'
  prefs: []
  type: TYPE_NORMAL
- en: All TICK suite dashboards allow for more advanced configuration and customization
    of graphs. It would therefore be possible to collect a custom set of time-series
    data points through the execution of custom cron scripts for example, and then
    configure the dashboards to display this data as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of our current example, the TICK suite is now installed and configured.
    Thus, we can begin testing and monitoring the PHP script that was optimized using
    `Blackfire.io` in the first part of this chapter in order to measure the changes
    in its performance. We will start by deploying, benchmarking and monitoring the
    old version. On the Linux for PHP''s CLI, enter the following command in order
    to benchmark the old version of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The benchmark test should yield something similar to the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/845dd1b4-a034-4c57-bfe1-6dd3fda39694.png)The results of the performance
    benchmark of the original script are displayed'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, after waiting approximately ten minutes, start benchmarking the new version
    of the script by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result of this latest benchmark on my computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/23505778-9583-41ba-be5d-b6a440b2c7f0.png)The results of the performance
    benchmark of the optimized script are displayed'
  prefs: []
  type: TYPE_NORMAL
- en: The results already reveal to us a considerable improvement in performance.
    Indeed, the new script allows for more than three times the number of transactions
    per second and more than three times fewer failed transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s have a look at what data our TICK Stack collected concerning the
    performance of these two versions of our PHP script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/148e9e94-8227-4989-8ddb-1de83c5f8a0b.png)The gain in performance
    is clearly seen in the monitoring graphs'
  prefs: []
  type: TYPE_NORMAL
- en: The graphs in our Grafana dashboard clearly show a performance boost of the
    same order of magnitude as the benchmark results themselves. The benchmark test
    launched after 08:00 against the new version of our script clearly generated two
    times less load on the server, caused two times less input (I/O) and was more
    than three times faster in general than the old version that was benchmarked previously
    around 7:40. Therefore, our `Blackfire.io` optimizations have, without a doubt,
    made the new version of our PHP script more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to install and configure a basic `Blackfire.io`
    setup in order to easily and automatically profile code when committing it to
    a repository. We have also explored how to install a TICK Stack in order to continuously
    monitor our code's performance after its deployment on a live production server.
    Thus, we have seen how to install and configure profiling and monitoring tools
    that help us easily optimize PHP code in a **continuous integration** (**CI**)
    and a **continuous deployment** (**CD**) environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how better understanding PHP data structures
    and using simplified functions can help an application's global performance along
    its critical execution path. We will start by analyzing a project's critical path
    and, then, fine-tune certain of its data structures and functions.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] For further explanations on these performance testing terms, please go
    to this URL: [https://blackfire.io/docs/reference-guide/time](https://blackfire.io/docs/reference-guide/time).'
  prefs: []
  type: TYPE_NORMAL
