- en: Privilege Escalation and Maintaining Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we exploited a target machine using the vulnerabilities
    found during the vulnerabilities-scanning process. However, the level of access
    you have when you exploit a system is dependent on the service you exploit. For
    example, if you exploit a vulnerability in a web application, you'll  most likely
    have the same level of access of the account that runs that service; say, `www` data.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll escalate our access to the system and then implement
    ways to maintain our access to the compromised system, should we lose connection
    or need to return to it.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require Kali Linux, Metasploitable 2, and Nmap to be installed
    on our system.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege-escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Privilege-escalation can be defined as the process of exploiting a vulnerability
    to gain elevated access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of privilege-escalation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertical privilege-escalation**: In this type, a user with a lower privilege
    is able to access the application functions designed for the user with the highest
    privilege, for example, a content-management system where a user is able to access
    the system administrator functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal privilege-escalation**: This happens when a normal user is able
    to access functions designed for other normal users. For example, in an internet-banking
    application, user A is able to access the menu of user B.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the privilege-escalation vectors that can be used to gain
    unauthorized access to the target:'
  prefs: []
  type: TYPE_NORMAL
- en: Local exploits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting a misconfiguration, such as a home directory, that is accessible,
    and that contains an SSH private key allowing access to other machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting weak passwords on the target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing network traffic to capture credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spoofing network packets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to use a local exploit to escalate our privilege.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, we will use the following virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable 2 as our victim machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux as our attacking machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, we will identify the open network services available on the victim machine.
    For this, we utilize the Nmap port scanner with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We configure Nmap to scan for all of the ports (from port `1` to port `65,535`)
    using the `-p-` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the brief result of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9ea1e22-cd82-4f17-91ba-00d2755f769e.png)'
  prefs: []
  type: TYPE_IMG
- en: After doing some research on the internet, we found that the `distccd` service
    has a vulnerability that may allow a malicious user to execute arbitrary commands.
    The `distccd` service is used to scale large compiler jobs across a farm of similarly-configured
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we search in Metasploit to find whether it has the exploit for this vulnerable
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b32f523-f400-407a-98d6-1bcd59fca582.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that Metasploit has the exploit for
    the vulnerable `distccd` service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to exploit the service, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad666f84-d41f-4b46-80db-b0fe1bbb7533.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are able to exploit the service and issue an operating system command to
    find our privilege: `daemon`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to explore the system to get more information about it. Now,
    let''s see the kernel version used by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The kernel version used is `2.6.24-16-server`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We searched the `exploit-db` database and found an exploit ([http://www.exploit-db.com/exploits/8572/](http://www.exploit-db.com/exploits/8572/))
    that will allow us to escalate our privilege to `root`. We then conduct a search
    of the Kali Linux exploit using the term `udev`, which matches the exploit in
    the `exploit-db` webpage, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This command produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/961435be-2b38-4812-8b1e-6fb23e698d2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to get this exploit from our attacking machine to the compromised
    machine. We can do this using the compromised machine''s `wget` command. First,
    we transfer the exploit to the folder on our machine where the compromised machine
    will look for the file. Use the command line to copy the exploit by typing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make sure the `apache2` server is running by typing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can download the exploit from our attacking machine using the `wget` command
    on the compromised machine, which looks for the file in the attacking machine''s
    `/var/www/html folder`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47166511-3a04-48ac-9b53-244b474e98ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After successfully downloading the exploit, we compile it on the victim machine
    using the following `gcc` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our exploit is ready to be used. From the source code, we found that this
    exploit needs the **Process Identifier** (**PID**) of the `udevd netlink` socket
    as the argument. We can get this value by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result of this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6cf2b1a-be4f-45fd-af44-e5ebfaee662e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also get the `udev` service PID, `1`, by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command-line screenshot is the result of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/161d8c29-c038-4bbe-9f59-81a642284182.png)'
  prefs: []
  type: TYPE_IMG
- en: In a real penetration-testing engagement, you may want to set up a test machine
    that has the same kernel version as the target to test the exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'From our information-gathering on the victim machine, we know that this machine
    has Netcat installed. We will use Netcat to connect back to our machine once the
    exploit runs in order to give us root access to the victim machine. Based on the
    exploit source code information, we need to save our payload in a file called
    `run`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to start the Netcat listener on our attacking machine by issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The one thing left to do is to run the exploit with the required argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In our attacking machine, we can see the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f178e1ca-9f8c-46dc-86da-db2de856fa83.png)'
  prefs: []
  type: TYPE_IMG
- en: After issuing the `whoami` command, we can see that we have successfully escalated
    our privilege to root.
  prefs: []
  type: TYPE_NORMAL
- en: Password-attack tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passwords are currently used as the main method to authenticate a user to the
    system. After a user submits the correct username and password, the system will
    allow a user to log in and access its functionality based on the authorization
    given to that username.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three factors can be used to categorize authentication types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Something you know**: This is usually called the first factor of authentication.
    A password is categorized in this type. In theory, this factor should only be
    known by the authorized person. In reality, this factor can easily be leaked or
    captured; therefore it is not advisable to use this method to authenticate users
    to a sensitive system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something you have**: This is usually called the second factor of authentication,
    examples of this factor include security tokens and cards. After you prove to
    the system that you have the authentication factor, you are allowed to log in.
    The drawback of this factor is that it is prone to the cloning process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Something you are**: This is usually called the third factor of authentication,
    examples include biometric and retina scans. This factor is the most secure one,
    but already there are several published attacks against this factor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To have more security, people usually use more than one factor. The most common
    combination is to use the first and second factors of authentication. As this
    combination uses two factors of authentication, it is usually called a two-factor
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, based on our penetration-testing experiences, password-based
    authentication is still widely used. As a penetration tester, you should check
    for password security during your penetration testing engagement.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to how the password attack is done, this process can be differentiated
    into the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Offline attack**: In this method, the attacker gets the hash file from the
    target machine and copies it to the attacker''s machine. The attacker then uses
    the password cracking tool to crack the password. The advantage of using this
    method is that the attacker doesn''t need to worry about the password-blocking
    mechanism available in the target machine because the process is done locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Online attack**: In this method, the attacker tries to log into the remote
    machine by guessing the credentials. This technique may trigger the remote machine
    to block the attacker machine after several failed attempts to guess the password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offline attack tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tools in this category are used for offline password attacks. Usually, these
    tools are used to do vertical privilege-escalation because you may need a privileged
    account to get the password files.
  prefs: []
  type: TYPE_NORMAL
- en: Why do you need other credentials when you already have a privilege credential?
    When doing penetration testing on a system, you may find that the privileged account
    may not have the configuration to run the application. If this is the case, you
    can't test it. However, after you log in as a regular user, you are able to run
    the application correctly. This is one of the reasons you need to get other credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Another case is where, after you have exploited a SQL injection vulnerability,
    you are able to dump a database and find that the credentials are stored using
    hashing. To help you get information from the hash, you can use the tools in this
    category.
  prefs: []
  type: TYPE_NORMAL
- en: John the Ripper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: John the Ripper ([http://www.openwall.com/john/](http://www.openwall.com/john/))
    is a tool that can be used to crack the password hash. Currently, it can crack
    more than 40 password hash types, such as DES, MD5, LM, NT, crypt, NETLM, and
    NETNTLM. One of the reasons to use John instead of the other password-cracking
    tools described in this chapter is that John is able to work with the DES and
    crypt encryption algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the John tool, use the console to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will display the John usage instructions on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'John supports the following four password-cracking modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wordlist mode**: In this mode, you only need to supply the wordlist file
    and the password file to be cracked. A wordlist file is a text file containing
    the possible passwords. There is only one word on each line. You can also use
    a rule to instruct John to modify the words contained in the wordlist according
    to the rule. To use wordlist, just use the `--wordlist=<wordlist_name>` option.
    You can create your own wordlist or you can obtain one from other people. There
    are many sites that provide wordlists. For example, there is the wordlist from
    the Openwall Project, which can be downloaded from [http://download.openwall.net/pub/wordlists/](http://download.openwall.net/pub/wordlists/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single-crack mode**: This mode has been suggested by the author of John and
    is to be tried first. In this mode, John will use the login names, Full Name field,
    and user''s home directory as the password candidates. These password candidates
    are then used to crack the password of the account they were taken from or to
    crack the password hash with the same salt. As a result, it is much faster than
    the wordlist mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incremental mode**: In this mode, John will try all of the possible character
    combinations as the password. Although it is the most powerful cracking method,
    if you don''t set the termination condition, the process will take a very long
    time. Examples of termination conditions are setting a short password limit and
    using a small character set. To use this mode, you need to assign the incremental
    mode in the configuration file of John. The predefined modes are All, Alnum, Alpha,
    Digits, and Lanman or you can define your own mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External mode**: With this mode, you can use the external cracking mode used
    by John. You need to create a configuration file section called `[List.External:MODE]`,
    where `MODE` is the name you assign. This section should contain functions programmed
    in a subset the of the C programming language. Later, John will compile and use
    this mode. You can read more about this mode at [http://www.openwall.com/john/doc/EXTERNAL.shtml](http://www.openwall.com/john/doc/EXTERNAL.shtml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't give the cracking mode as an argument to John in the command line,
    it will use the default order. First, it will use the single-crack mode, then
    the wordlist mode, and after that it will use the incremental mode.
  prefs: []
  type: TYPE_NORMAL
- en: Before you can use John, you need to obtain the password files. In the Unix
    world, most systems use the `shadow` and `passwd` files. You may need to log in
    as root to be able to read the shadow file.
  prefs: []
  type: TYPE_NORMAL
- en: After you get the password files, you need to combine these files so that John
    can use them. To help you, John provides you with a tool called `unshadow`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the command to combine the shadow and `passwd` files. For
    this, I use the `/etc/shadow` and `/etc/passwd` files from the Metasploitable
    2 virtual machine and put them in a directory called `pwd` with the names `etc-shadow`
    and `etc-passwd`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a snippet of the `pass` file content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To crack the password file, just give the following command, where `pass` is
    the password list file you have just generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If John managed to crack the passwords, it will store those passwords in the
    `john.pot` file. To see the passwords, you can issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, John cracks the passwords quickly, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/372cbf42-bdaf-4c7e-82cf-b14ff7de696a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table is the list of cracked passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Username** | **Password** |'
  prefs: []
  type: TYPE_TB
- en: '| `postgres` | `postgres` |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | `user` |'
  prefs: []
  type: TYPE_TB
- en: '| `msfadmin` | `msfadmin` |'
  prefs: []
  type: TYPE_TB
- en: '| `service` | `service` |'
  prefs: []
  type: TYPE_TB
- en: '| `klog` | `123456789` |'
  prefs: []
  type: TYPE_TB
- en: '| `sys` | `batman` |'
  prefs: []
  type: TYPE_TB
- en: Of the seven passwords listed in the `pass` file, John managed to crack six
    passwords. Only the password of `root` cannot be cracked instantly.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to crack the Windows password, first you need to extract the Windows
    password hashes (LM and/or NTLM) in the `pwdump` output format from the Windows
    system and SAM files. You can consult [http://www.openwall.com/passwords/microsoft-windows-nt-2000-xp-2003-vista-7#pwdump](http://www.openwall.com/passwords/microsoft-windows-nt-2000-xp-2003-vista-7#pwdump) to
    see several of these utilities. One of them is `samdump2`, provided in Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'To crack the Windows hash obtained from `samdump2` using a `password.lst` wordlist,
    you can use the following command and the obtained output is displayed on the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/848debf5-9e90-4090-8a16-b8fc522b8db3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `password.lst` file content is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, give the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snippet of the password obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/327cffc1-76a7-43de-8faf-4787367f5fe2.png)'
  prefs: []
  type: TYPE_IMG
- en: John was able to obtain the administrator password of a Windows machine, but
    was unable to crack the password for the `tedi` user.
  prefs: []
  type: TYPE_NORMAL
- en: If a GUI is more your thing, there's a graphical interface for John and it's called
    Johnny.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Johnny, open a console and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You will then see the Johnny window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the result of cracking the same Metasploitable
    2 hashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df46faad-5ffa-40d1-a802-578749d62715.png)'
  prefs: []
  type: TYPE_IMG
- en: Ophcrack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ophcrack is a rainbow tables-based password cracker that can be used to crack
    the Windows LM and NTLM password hashes. It comes as a command-line and graphical-user
    interface program. Just like the RainbowCrack tool, Ophcrack is based on the time-memory
    tradeoff method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the `ophcrack` command line, use the console to execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will display the Ophcrack usage instructions and example on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Ophcrack GUI, use the console to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This will display the Ophcrack GUI page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can use Ophcrack, you need to grab the rainbow tables from the Ophcrack
    site ([http://ophcrack.sourceforge.net/tables.php](http://ophcrack.sourceforge.net/tables.php)).
    Currently, there are three tables that can be downloaded for free:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Small XP table**: This comes as a 308 MB compressed file. It has a 99.9 percent
    success rate and contains the character set of numeric, small, and capital letters.
    You can download it from [http://downloads.sourceforge.net/ophcrack/tables_xp_free_small.zip](http://downloads.sourceforge.net/ophcrack/tables_xp_free_small.zip).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast XP table**: This has the same success rate and character set as the
    small XP tables, but it is faster compared to the small XP tables. You can get
    it from [http://downloads.sourceforge.net/ophcrack/tables_xp_free_fast.zip](http://downloads.sourceforge.net/ophcrack/tables_xp_free_fast.zip).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vista table**: This has a 99.9 percent success rate and is currently based
    on the dictionary words with variations. It is a 461 MB compressed file. You can
    get it from [http://downloads.sourceforge.net/ophcrack/tables_vista_free.zip](http://downloads.sourceforge.net/ophcrack/tables_vista_free.zip).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an example, we use the `xp_free_fast` tables, and I have extracted and put
    the files in the `xp_free_small` directory. The Windows XP password hash file
    is stored in the `test-sam` file in the `pwdump` format.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used the following command to crack the Windows password hashes obtained
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output shows the cracking process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the results of `ophrack`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can see that Ophcrack is able to obtain all of the passwords for the corresponding
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Another tool to look at is RainbowCrack. In Kali, RainbowCrack comes with three
    tools: `rtgen`, `rtsort`, and `rcrack`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the RainbowCrack or OphCrack tools, you will need rainbow tables. You
    can get some free tables at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.freerainbowtables.com/en/tables/](http://www.freerainbowtables.com/en/tables/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://rainbowtables.shmoo.com/](http://rainbowtables.shmoo.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ophcrack.sourceforge.net/tables.php](http://ophcrack.sourceforge.net/tables.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: samdump2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To extract password hashes from the Windows 2K/NT/XP/Vista SAM database registry
    file, you can use `samdump2` ([http://sourceforge.net/projects/ophcrack/files/samdump2/](https://sourceforge.net/projects/ophcrack/files/samdump2/)).
    With `samdump2`, you don't need to give the **System Key** (**SysKey**) first
    to get the password hash. SysKey is a key used to encrypt the hashes in the **Security
    Accounts Manager** (**SAM**) file. It was introduced and enabled in Windows NT
    Service Pack 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start `samdump2`, use the console to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This will display simple usage instructions on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to get the Windows password hash:'
  prefs: []
  type: TYPE_NORMAL
- en: The first method is by using the `samdump2` program utilizing the Windows `system`
    and SAM files. These are located in the `c:%windows%system32config` directory.
    This folder is locked for all accounts if Windows is running. To overcome this
    problem, you need to boot up a Linux Live CD, such as Kali Linux, and mount the
    disk partition containing the Windows system. After this, you can copy the system
    and SAM files to your Kali machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second method is by using the `pwdump` program and its related variant tools
    from the Windows machine to get the password hash file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third method is by using the hashdump command from the meterpreter script
    as shown in the previous chapter. To be able to use this method, you need to exploit
    the system and upload the meterpreter script first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our exercise, we are going to dump the Windows XP SP3 password hash. We
    assume that you already have the system and SAM files and have stored them on
    your home directory as system and `sam`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is used to dump the password hash using `samdump2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is saved to the `test-sam` file. The following is the `test-sam` file
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You can then supply the `test-sam` file to the password crackers, such as John
    or Ophcrack.
  prefs: []
  type: TYPE_NORMAL
- en: Online attack tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed several tools that can be used to crack
    passwords in the offline mode. In this section, we will discuss some password
    attacking tools that must be used while you are connected to the target machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the tools that can be used for the following purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating wordlists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the password hash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online password attack tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two tools are used to generate wordlists from the information gathered
    in the target website, while the other one is used to search the password hash
    in the online password hash service database.
  prefs: []
  type: TYPE_NORMAL
- en: The online password attack tool will try to log into the remote service, just
    like a user login, using the credentials provided. The tool will try to log in
    many times until the correct credentials are found.
  prefs: []
  type: TYPE_NORMAL
- en: The drawback of this technique is that, because you connect directly to the
    target server, your action may be noticed and blocked. Also, because the tool
    utilizes the login process, it will take longer to run compared to the offline
    attack tools.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the tool is slow and may trigger a blocking mechanism, network services
    such as SSH, Telnet, and FTP usually can't be cracked using offline password-cracking
    tools. You may want to be very careful when doing an online password attack; in
    particular, when you brute-force an **Active Directory** (**AD**) server, you
    may block all of the user accounts. You need to check the password and lockout
    policy first, and then try only one password for all accounts, so you do not end
    up blocking accounts.
  prefs: []
  type: TYPE_NORMAL
- en: CeWL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Custom Word List** (**CeWL**) ([http://www.digininja.org/projects/cewl.php](http://www.digininja.org/projects/cewl.php))
    generator is a tool that will spider a target **Uniform Resource Locator** (**URL**)
    and create a unique list of the words found on that URL. This list can then be
    used by password-cracking tools such as John the Ripper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are several useful options in CeWL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`depth N` or `-d N`: This sets the spider depth to `N`; the default value is `2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_word_length N` or `-m N`: This is the minimum word length; the default
    length is `3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verbose or -v`: This gives a verbose output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`write or -w`: This is to write output to a file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you get a problem running CeWL in Kali with an error message, `Error: zip/zip
    gem not installed`, use `gem install zip/zip` to install the required gem. To
    fix this problem, just follow the suggestions to install `zip gem`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to create a custom wordlist from a target website. In this case,
    we will use the built-in website in Metasploitable. To create the wordlist, the
    following is the `cewl` command to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: After some time, the result will be created. In Kali, the output is stored in
    the root directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the abridged content of the `target.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra is a tool that can be used to guess or crack the login username and password.
    It supports numerous network protocols, such as HTTP, FTP, POP3, and SMB. It works
    by using the username and password provided and tries to log into the network
    service in parallel; by default, it will log in using 16 connections to the same
    host.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Hydra, use the console to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This will display the Hydra usage instructions on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our exercise, we will brute-force the password for a VNC server located
    at `172.16.43.156` and use the passwords contained in the `password.lst` file.
    The command to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result of this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/403cd67e-0ad1-410b-9c20-35e7c3011c19.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that Hydra was able to find the VNC
    passwords. The passwords used on the target server are `password01` and `password`.
  prefs: []
  type: TYPE_NORMAL
- en: To verify whether the passwords obtained by Hydra are correct, just run `vncviewer`
    to the remote machine and use the passwords found.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the result of running `vncviewer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9d2711d-d351-4bc9-a0ca-8769d3a6609c.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that we are able to log into the VNC
    server using the cracked passwords, and we got the VNC root credential. Fantastic!
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides using the Hydra command line, you can also use the Hydra GUI by executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result of running the Hydra GTK to attack
    an SSH service on the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce3c4146-e8fb-4d34-9006-78af331c6b12.png)'
  prefs: []
  type: TYPE_IMG
- en: Mimikatz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mimikatz is a post-exploitation tool written to give pentesters the ability
    to maintain access and compromise credentials once a foothold has been obtained.
    While a standalone program, it has been made part of the Metasploit Framework.
    Mimikatz allows for the gathering of credentials in a compromised system without
    having to leave the Metasploit framework. Once system level access has been obtained,
    Mimikatz can be started within a meterpreter shell using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Mimikatz is loaded, type in the following to obtain a list of the different
    commands available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c51fddac-4092-48fe-8092-40764353d289.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two ways that Mimikatz can be used with Metasploit. The first is
    with the full range of Mimikatz features. These start with `mimikatz_command`.
    For example, if we wanted to dump the hashes from the compromised system, type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd453913-956f-4485-82a6-441ee628dac3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another feature is the ability to search for credentials on the compromised
    machine. Here we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows how Mimikatz was able to obtain the `Administrator` password
    for the compromised system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/898e252c-3c17-42a1-8e0b-1833db497b2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit also contains several commands that utilize Mimikatz to perform
    post-exploitation activities. Much like the hash `dump` command, the following
    command will dump the hashes from the compromised system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78855f2b-5240-4ebf-8ed9-39c43bcfc221.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another Metasploit command that leverages Mimikatz is the `Kerberos` command,
    which will obtain cleartext credentials on the compromised machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The command then produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1ca0847-37ae-4df6-9cea-829c72ffb5b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Maintaining access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After escalating the privilege to the target machines, the next step we should
    take is to create a mechanism to maintain our access to the target machines. So,
    in the future, if the vulnerability you exploited gets patched or turned off,
    you can still access the system. You may need to consult with your customer about
    this, before you do it on your customers' systems. In addition, it is critical
    during penetration testing that you ensure all backdoors that are placed are properly
    documented so that they can be removed after the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at some of the tools that can help us maintain our
    access on the target machines. The tools are categorized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Operating system backdoors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tunneling tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web backdoors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating-system backdoors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In simple terms, a backdoor is a method that allows us to maintain access to
    a target machine, without using normal authentication processes and remaining
    undetected. In this section, we will discuss several tools that can be used as
    backdoors to the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Cymothoa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cymothoa** is a backdoor tool that allows you to inject its shellcode into
    an existing process. The reason for this is to disguise it as a regular process.
    The backdoor should be able to coexist with the injected process in order to not
    arouse the suspicion of the administrator. Injecting shellcode into the process
    also has another advantage; if the target system has security tools that only
    monitor the integrity of executable files but do not perform checks of the memory,
    the process''s backdoor will not be detected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run Cymothoa, just type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You will see the Cymothoa helper page. The mandatory options are the **Process
    ID** (**PID**), `-p`, to be injected and the shellcode number, `-s`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine the PID, you can use the `ps` command in the target machine. You
    can determine the shellcode number by using the `-S` (list available shellcode)
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/788bb596-84bb-4923-88f6-da957a063948.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have compromised the target, you can copy the Cymothoa binary file
    to the target machine to generate the backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: After the Cymothoa binary file is available in the target machine, you need
    to find out the process you want to inject and the shellcode type.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list the running process in a Linux system, we can use the `ps` command
    with the `-aux` options. The following screenshot displays the result of running
    that command. There are several columns available in the output, but for this
    purpose, we only need the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`USER` (the first column)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PID` (the second column)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COMMAND` (the eleventh  column)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8796c99d-334c-4e5c-ae36-5be189131ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this exercise, we will inject into the `2765` (`udevd`) PID and we will
    use payload number `1`. We need to set the port number for the payload using the `-y` option [port
    number `4444`]. The following is the Cymothoa command for this scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result of this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b628fca-ba34-4dbf-8a66-b9e23e78a142.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to log into our backdoor (port `4444`) from another machine by issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Here, `172.31.99.244` is the IP address of the target server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/326cb464-6131-4344-9903-18ad5f0389f2.png)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully connected to our backdoor in the remote machine and we
    were able to issue several commands to the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the backdoor being attached to a running process, you should be aware
    that this backdoor will not be available after the process is killed or when the
    remote machine has been rebooted. For this purpose, you need a persistent backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: The Meterpreter backdoor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Metasploit meterpreter has the `metsvc` backdoor, which will allow you to
    get the meterpreter shell at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that the `metsvc` backdoor doesn't have authentication, so anyone who
    can access the backdoor's port will be able to use it.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will use a Windows XP operating system as the victim machine,
    whose IP address is `192.168.2.21`; our attacking machine has the IP address of `192.168.2.22`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the `metsvc` backdoor, you first need to exploit the system and get
    the meterpreter shell. After this, migrate the process using the meterpreter''s
    migrate command to other processes such as `explorer.exe (2)`, so you still have
    access to the system even though the victim closed your `payload (1)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6bbeb7b-9637-4e6d-bf0c-5ebb6f69a646.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To install the `metsvc` service, we just need to type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result of that command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e4d9f20-1776-466f-99aa-af126cede739.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's go to the victim machine. The backdoor is available at `C:Documents
    and SettingsAdministratorLocal SettingsTempPvtgZxEAL`.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the `metsvc` EXE and DLL files there. Now, let's restart the victim
    machine to see whether the backdoor will work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the attacking machine, we start the multihandler with the `metsvc` payload
    using the following options, which are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c96383e6-e320-41ac-bfbf-b6b83cb9a81b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After all the options have been set, just type `execute` to run the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef3c4727-2d7d-45a5-9b05-f9414916cf8f.png)'
  prefs: []
  type: TYPE_IMG
- en: The attack was executed successfully; we now have the meterpreter session again.
    You can do anything with the meterpreter session.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove the `metsvc` service from the victim machine, you can run the following
    command from the meterpreter shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: After that, remove the `metsvc` files from the victim machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we attempted to escalate the current access level and compromise
    other accounts on the system with the help of many tools. In the next chapter,
    we will attack web applications and websites in order to exploit poorly-configured
    security checkpoints to gain access to the network and systems in the backend,
    enabling the exfil of data.
  prefs: []
  type: TYPE_NORMAL
