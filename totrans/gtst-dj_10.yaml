- en: Chapter 10. The Authentication Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The authentication module saves a lot of time in creating space for users.
    The following are the main advantages of this module:'
  prefs: []
  type: TYPE_NORMAL
- en: The main actions related to users are simplified (connection, account activation,
    and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this system ensures a certain level of security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access restrictions to pages can be done very easily
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's such a useful module that we have already used it without noticing. Indeed,
    access to the administration module is performed by the authentication module.
    The user we created during the generation of our database was the first user of
    the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter greatly alters the application we wrote earlier. At the end of
    this chapter, we will have:'
  prefs: []
  type: TYPE_NORMAL
- en: Modified our UserProfile model to make it compatible with the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified the addition of developer and supervisor pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the restriction of access to connected users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the authentication module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to use the authentication module by making
    our application compatible with the module.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Django application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is normally nothing special to do for the administration module to work
    in our `TasksManager` application. Indeed, by default, the module is enabled and
    allows us to use the administration module. However, it is possible to work on
    a site where the web Django authentication module has been disabled. We will check
    whether the module is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `INSTALLED_APPS` section of the `settings.py` file, we have to check
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Editing the UserProfile model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The authentication module has its own User model. This is also the reason why
    we have created a `UserProfile` model and not just User. It is a model that already
    contains some fields, such as nickname and password. To use the administration
    module, you have to use the User model on the `Python33/Lib/site-package/django/contrib/auth/models.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify the `UserProfile` model in the `models.py` file that will become
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We must also add the following line in `models.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this new model, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: Created a `OneToOneField` relationship with the user model we imported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleted the fields that didn't exist in the user model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `OneToOne` relation means that for each recorded `UserProfile` model, there
    will be a record of the User model. In doing all this, we deeply modify the database.
    Given these changes and because the password is stored as a hash, we will not
    perform the migration with South.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to keep all the data and do a migration with South, but we should
    develop a specific code to save the information of the `UserProfile` model to
    the User model. The code should also generate a hash for the password, but it
    would be long and it is not the subject of the book. To reset South, we must do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `TasksManager/migrations` folder and all the files contained in this
    folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the `database.db` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use the migration system, we have to use the following commands already
    used in the chapter about models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After the deletion of the database, we must remove the initial data in `create_developer.py`.
    We must also delete the URL `developer_detail` and the following line in `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The pages that allow you to add a developer and supervisor no longer work because
    they are not compatible with our recent changes. We will change these pages to
    integrate our style changes. The view contained in the `create_supervisor.py`
    file will contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `create_supervisor.html` template remains the same, as we are using a Django
    form.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change the `page()` method in the `create_developer.py` file to make
    it compatible with the authentication module (you can refer to downloadable Packt
    code files for further help):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also modify `developer_list.html` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Login and logout pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you can create users, you must create a login page to allow the user
    to authenticate. We must add the following URL in the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You must then create the `connection.py` view with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You must then create the `connection.html` template with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the user logs in, Django will save his/her data connection in session variables.
    This example has allowed us to verify that the audit login and password was transparent
    to the user. Indeed, the `authenticate()` and `login()` methods allow the developer
    to save a lot of time. Django also provides convenient shortcuts for the developer
    such as the `user.is_authenticated` attribute that checks if the user is logged
    in. Users prefer when a logout link is present on the website, especially when
    connecting from a public computer. We will now create the logout page.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create the `logout.py` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we imported the `logout()` function of the authentication
    module and used it with the request object. This function will remove the user
    identifier of the request object, and delete flushes their session data.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user logs out, he/she needs to know that the site was actually disconnected.
    Let''s create the following template in the `logout.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Restricting access to the connected members
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developers implement an authentication system, it's usually to limit access
    to anonymous users. In this section, we'll see two ways to control access to our
    web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting access to views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The authentication module provides simple ways to prevent anonymous users from
    accessing some pages. Indeed, there is a very convenient decorator to restrict
    access to a view. This decorator is called `login_required`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example that follows, we will use the designer to limit access to the
    `page()` view from the `create_developer` module in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must import the decorator with the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will add the decorator just before the declaration of the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With the addition of these two lines, the page that lets you add a developer
    is only available to the logged-in users. If you try to access the page without
    being connected, you will realize that it is not very practical because the obtained
    page is a 404 error. To improve this, simply tell Django what the connection URL
    is by adding the following line in the `settings.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With this line, if the user tries to access a protected page, he/she will be
    redirected to the login page. You may have noticed that if you're not logged in
    and you click the **Create a developer** link, the URL contains a parameter named
    next. The following is the screen capture of the URL:![Restricting access to views](img/00027.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This parameter contains the URL that the user tried to consult. The authentication
    module redirects the user to the page when he/she connects. To do this, we will
    modify the `connection.py` file we created. We add the line that imports the `render()`
    function to import the `redirect()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To redirect the user after they log in, we must add two lines after the line
    that contains the code login (request, user). There are two lines to be added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This system is very useful when the user session has expired and he/she wants
    to see a specific page.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting access to URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The system that we have seen does not simply limit access to pages generated
    by CBVs. For this, we will use the same decorator, but this time in the `urls.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add the following line to import the decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to change the line that corresponds to the URL named `create_project`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The use of the `login_required` decorator is very simple and allows the developer
    to not waste too much time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we modified our application to make it compatible with the
    authentication module. We created pages that allow the user to log in and log
    out. We then learned how to restrict access to some pages for the logged in users.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will improve the usability of the application with the
    addition of AJAX requests. We will learn the basics of jQuery and then learn how
    to use it to make an asynchronous request to the server. Also, we will learn how
    to handle the response from the server.
  prefs: []
  type: TYPE_NORMAL
