- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer games are a vast medium with dozens of genres that have developed over
    the past three to four decades. Games are bigger and more immersive than ever,
    and gamers' expectations have never been higher. While linear games, ones that
    have a set story and fixed progression, are still commonplace, more and more dynamic
    and open-ended games are being developed.
  prefs: []
  type: TYPE_NORMAL
- en: Advances in computer hardware and video game technologies are giving a much
    more literal meaning to the phrase "game world". Game maps are constantly increasing
    in size and flexibility, and it's thanks to technologies such as procedural generation
    that it's possible. Two gamers who buy the same game may have very different experiences
    as content is generated on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we're going to introduce ourselves to procedural generation, learning
    the skills needed to generate content on the fly to create dynamic and unpredictable
    game systems and mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Provided with this book is a game template for a rogue-like C++ game. When we
    get the project compiled and set up in [Chapter 2](ch02.html "Chapter 2. Project
    Setup and Breakdown"), *Project Setup and Breakdown*, you'll see that it's currently
    just an empty shell. However, as we work our way through the book, you'll be introduced
    to the concepts behind procedurally generated content through real-world examples.
    We will then implement these examples in the empty project.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. An Introduction to Procedural Generation"),
    *An Introduction to Procedural Generation*, introduces us to the vast topic that
    it procedural generation. I''ve always felt a crucial part of really learning
    something is understanding why it''s done the way it is. Its great knowing how
    something is done, but knowing its origin and why it''s the way it is creates
    a much more complete picture and a deeper understanding. In this chapter, we''ll
    go right back to the birth of procedural generation and its journey into modern
    computer games.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Project Setup and Breakdown"), *Project Setup
    and Breakdown*, explains how to set up the provided rogue-like game project in
    your chosen IDE with detailed instructions for both Visual Studio and Code::Blocks.
    It''s written in C++/SFML, and we''ll be extending it throughout this book. We''ll
    also cover common issues that you may face and run the project for the first time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Using RNG with C++ Data Types"), *Using RNG
    with C++ Data Types*, explores random number generation (RNG), including the problems
    surrounding it and how we can use it with C++ data types to achieve random results
    during runtime. RNG lies at the heart of procedural generation and is how we emulate
    computers acting randomly and achieve dynamic results with our algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Procedurally Populating Game Environments"),
    *Procedurally Populating Environments*, helps us develop our level further by
    spawning items and enemies in random locations around the map. Procedurally generated
    environments is a staple in procedurally generated games, and spawning game objects
    at random locations is a big step toward achieving this.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Creating Unique and Randomized Game Objects"),
    *Creating Unique, Randomized Objects*, explores ways in which we can create unique
    and randomized game objects. Certain items will be procedurally generated during
    runtime, which means that there will be a vast number of possible combinations.
    We''ll cover the skills and techniques that were used to achieve this in the earlier
    chapters. We''ll pull it all together and build a procedural system!'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Procedurally Generating Art"), *Procedurally
    Generating Art*, steps up our procedural efforts by moving away from the simple
    setting up of member variables randomly to the creation of procedural art and
    graphics. We''ll procedurally create textures for our enemies and alter the level
    sprites to give each floor of our dungeon a unique feel.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Procedurally Modifying Audio"), *Procedurally
    Modifying Audio*, looks at the nearest cousin of art, audio, using similar techniques
    to create variance in our sounds. We''ll also use SFML''s audio functions to create
    specialized 3D sound, bringing more depth to our levels.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Procedural Behavior and Mechanics"), *Procedural
    Behavior and Mechanics*, uses everything that we''ve learned so far to create
    complex procedural behavior and mechanics in the form of pathfinding and unique
    level goals. We''ll give our enemies the intelligence to traverse levels and chase
    the player. We''ll also create unique level goals with unique rewards for the
    player to carry out.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Procedural Dungeon Generation"), *Procedural
    Dungeon Generation*, finishes our work on the game project. We''re going to implement
    what is perhaps the most icon feature of roguelike games: procedurally generated
    levels. All the way through the book, we''ve been working with the same fixed
    level. So, it''s about time we started generating them procedurally! We''ll also
    create some variance between levels and implement the goal generator that we created
    in the previous chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Component-Based Architecture"), *Component-Based
    Architecture*, takes a look at component-based design, since our work on our template
    project is now complete. Procedural generation is all about flexibility. So, it
    makes sense that we''d want to work with the most flexible architecture that we
    can. Component-based architecture can achieve this, and having a good understanding
    of this design approach will help you progress and build larger systems in the
    future.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Epilogue"), *Epilogue*, takes a retrospective
    look at the project and the topics that we covered as we finish our procedural
    journey. For each area of procedural generation that we''ve used, we''ll also
    identify some jumping-off points should you wish to explore the topic in depth.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the course of writing this book, I used Visual Studio Community 2015
    for Windows Desktop. It's a great IDE with all the tools that we need to create
    a C++ game for Windows. It's available for free from Microsoft, so I highly recommend
    that you download it and use it throughout the course of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry if you've never used it before; we'll cover the project setup in
    detail so that you'll become accustomed to the parts of the IDE that we'll be
    using. I'll also provide the setup instructions for Code::Blocks. If you opt not
    to use an IDE, you'll need access to a C++ compiler so that you can run the project
    that we'll be working on in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at those who have knowledge of game development in C++ and
    are looking to incorporating procedural generation into their games. It will assume
    a fairly solid understanding of the fundamentals of programming, such as data
    types, return types, method calls, and so on. An understanding of the concepts
    behind game development is also assumed as we won't be looking at the underlying
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: A game template is provided, and we'll use SFML to extend it throughout the
    course of the book. No prior experience with SFML is assumed. After completing
    the book, you will have a solid understanding of what procedurally generated content
    is, how it is used in games, and the collection of practical skills that will
    be applied to a real game.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "
    We called `std::srand()` and set a new seed, but each time we run the program,
    we''re setting the same seed again "'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: " In Code::Blocks, add the following to the project''s **Build Options**
    and **Search Directories** tab."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Extra Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the end of each chapter, there are a number of review questions and further
    exercises that can be completed. While not crucial to the book, it's advised that
    you complete them so that you can gauge your understanding of the topics covered
    and gain more experience.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the color images of this book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also provide you with a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from [http://www.packtpub.com/sites/default/files/downloads/6713OT_ColoredImages.pdf](http://www.packtpub.com/sites/default/files/downloads/6713OT_ColoredImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
