- en: Chapter 10. CSS Charting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With just a simple Google search, we discover that there are plenty of amazing
    charting libraries around, such as **Google Chart Tools** ([https://developers.google.com/chart/](https://developers.google.com/chart/)),
    **Highcharts** ([http://www.highcharts.com/](http://www.highcharts.com/)), and
    **gRaphael** ([http://g.raphaeljs.com/](http://g.raphaeljs.com/)), to name a few.
    What we might not know is that there are some CSS techniques that allow us to
    create fully functional charts without using JavaScript libraries. In this chapter,
    we''ll explore some of these techniques, here are the topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a cross-browser, flexible box layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling and displaying `data-*` attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing advanced gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding more chart series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating the chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a bar chart, we need to set up an array of `div` elements all aligned
    to their bottom and then control their height properties. Then, we need to find
    a clever way to display each bar's label and, optionally, each bar's value.
  prefs: []
  type: TYPE_NORMAL
- en: To create the `div` array, we could simply use a `div` container with `position:relative`
    containing a `div` element for each bar absolutely positioned with `bottom:0`.
    The problem with this technique is that we have to define the size of each bar
    in the CSS. We would also need to know in advance the number of bars of the chart
    we're styling, making our CSS less adaptable with different charts or dynamic
    modification of the chart that we're styling.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, we need to find a CSS structure that can equally subdivide
    the container's space between the children elements. We've already used the flexible
    box layout display mode in past chapters, however, we've typically used it for
    centering elements both horizontally and vertically. To solve our bar graph positioning
    issue is when the flexible box layout proves to be invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define an `index.html` file with a structure to develop our project,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can recognize three distinct components of this structure. First of
    all the `div` element with a `data-bar-chart` attribute; this is the container
    of the whole chart; it also holds all the bars. Then, we have the `div` elements
    with the `data-bar` attribute; each of them keeps the necessary space for the
    real bar chart within the container and hold the corresponding bar label in the
    `data-label` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the `div` elements with the `.` `value` class represent the actual bar
    of the chart; the height of the bar is expressed with the `data-value-percentage`
    attribute, which ranges from `0%` to `100%`. We decided to go for a normalized
    value because this keeps our chart CSS implementation more generic and not fixed
    on this particular instance. To express the real value of each bar, we have defined
    another attribute, `data-value-label`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, we need to set up, as usual, our development environment, so
    we need to create some folders in the root folder of our project, namely, `css`,
    `img`, `js`, and `scss`. We'll use Sass and Compass for this project, so we need
    to install them (if this has not already been done) by first installing Ruby ([http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/))
    and then executing `gem install compass` (or `sudo gem install compass`) from
    the command-line terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we need to create a `config.rb` file in the root folder of the project,
    which can be done by copying the same file from the previous project.
  prefs: []
  type: TYPE_NORMAL
- en: 'When everything has been set up, we can create an `application.scss` file under
    the `scss` folder containing only the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We then can enter `compass watch .` from the command-line terminal and verify
    the presence of a corresponding `css/application.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: Subdividing the space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because we don''t want to develop a CSS bar chart implementation that only
    works for this specific HTML code, we have to distinguish between properties related
    to this chart from ones that are more generic and re-usable. For this reason,
    the main element has a class called `this_bar_chart`. We can use this class specifically
    for this chart, for example, to define `width` and `height` for this chart, thus
    we can write the following in `application.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Good! We now need to implement the flexible box layout to subdivide the spaces
    of elements with the `data-bar-chart` attribute equally between all the `data-bar`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'A minor complication is that there are currently two distinct flexbox syntaxes
    (as we saw in [Chapter 9](ch09.html "Chapter 9. Creating an Intro"), *Creating
    an Intro*), and browser support for both syntaxes is incomplete. To work around
    this complication, we will implement both. We need to set the container''s `display`
    property to either `box` (old syntax) or `flex` (new syntax) and then set a property
    `box-flex: 1` (old syntax) or `flex: 1` (new syntax) for each `data-bar` element.'
  prefs: []
  type: TYPE_NORMAL
- en: By specifying that each `data-bar` element has the same flex grow factor, all
    of these elements will synchronize to fill the container space at the same speed,
    resulting in the same width for each element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to add to `application.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try our project in a browser (Chrome, Firefox, Internet Explorer 10),
    we''ll notice how the container space gets equally subdivided between all the
    children, whatever the number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Subdividing the space](img/3264OT_10_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Internet Explorer 8 and 9 support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internet Explorer versions prior to Version 10 do not support flexbox in any
    of its forms. We can easily find a way around this problem by using a polyfill
    library (which we have already introduced in [Chapter 4](ch04.html "Chapter 4. Zooming
    User Interface"), *Zooming User Interface*) named flexie.js ([http://flexiejs.com/](http://flexiejs.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: To add flexie, we need to first download jQuery ([http://jquery.com/](http://jquery.com/)),
    then Selectivzr ([http://selectivizr.com/](http://selectivizr.com/)), and finally
    flexie itself. All of these three files must be placed within the `js` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can place these three files within a conditional comment, ensuring
    that only Internet Explorer 8 and 9 need to perform these additional HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating bar labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good! We can now remove the temporary border properties and move on to the next
    step, creating bar labels.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, our bar labels are contained within the `data-bar` element as
    values of the `data-label` attribute, so we have to use an `:after` or `:before`
    pseudo selector in conjunction with a `content` property to be able to print them.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to reserve some space for those labels, because, at the moment,
    all of the container's height is occupied by the bars of the chart to be created.
  prefs: []
  type: TYPE_NORMAL
- en: We can achieve this by adding `padding-bottom` to the container (along with
    a `box-sizing` property to keep the original container height, where supported)
    and then placing the bar label outside and below each `data-bar` element, using
    absolute positioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the small chunk of CSS code we can implement to achieve this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We used the `top:100%` property to move the `:before` selector's content outside
    the containing element without specifying a precise height value, by doing this,
    we keep our CSS chart instructions as generic as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reloading the project in the browser now shows the labels correctly placed
    at the bottom of the container, within its padding space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating bar labels](img/3264OT_10_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before moving on, we need to remember to remove the temporary properties that
    we defined during this step.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each bar contains a `.value` element, this element needs to be styled to respond
    to the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Its height must conform to its `data-value-percentage` value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must be aligned on the bottom of its parent `data-bar` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must show somewhere the value of its `data-value-label` value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must have some sort of margin between itself and the next chart bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with these last two points. First, we can use absolute positioning
    to place the `.value` element at the bottom of its parent and at a chosen distance
    from its parent's right and left borders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the required CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The required behavior regarding the height of the bar can be achieved by looping
    from `0` to `100` and printing a CSS rule that sets the `height` property according
    to the current loop index as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can use the same trick that we implemented with the chart labels
    to print each bar value, only this time, we need to place the text just over each
    colored bar. We also have to remember that, as with labels, we need to save some
    space for this text in case the bar''s `height` property is set to `100%`; therefore,
    we need to add a top padding (using the `padding-top` property) to the container,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Before showcasing the project, we need to provide at least one color for the
    chart bars, this is another temporary property because we're going to replace
    it when we introduce chart series later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After a reload in our favorite browser, our project looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the bars](img/3264OT_10_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Beautifying the chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it's time to remove the temporary properties and beautify the chart a bit.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways by which we can further beautify what we've done so far
    and make it look even better. First of all, we can use a custom font for both
    labels and bar values; next, we can add rounded corners and shadows. Finally,
    we can use gradients.
  prefs: []
  type: TYPE_NORMAL
- en: On the subject of gradients, we can implement a technique similar to the one
    we used in [Chapter 2](ch02.html "Chapter 2. Shiny Buttons"), *Shiny Buttons*,
    where we used gradients to handle highlights and shadows, setting the `background-color`
    property to the color of the bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving forward, we will choose a custom font, set some inset shadows, specify
    a `border-radius` property, and then define a gradient that goes from transparent
    to a solid color; here''s the required CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We have to specify `-ms-linear-gradient` explicitly because Compass doesn't
    handle the `-ms-` experimental prefix for this kind of property. This behavior
    by Compass is in fact correct, because Microsoft stated that most of the latest
    CSS3 properties work unprefixed on the new Internet Explorer ([http://blogs.msdn.com/b/ie/archive/2012/06/06/moving-the-stable-web-forward-in-ie10-release-preview.aspx](http://blogs.msdn.com/b/ie/archive/2012/06/06/moving-the-stable-web-forward-in-ie10-release-preview.aspx)),
    but at the time of writing, the current version of Internet Explorer 10 still
    requires the `-ms-` prefix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can test out the project by simply adding a temporary `background-color`
    property to the `.value` element, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Beautifying the chart](img/3264OT_10_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Results may vary on browsers that don't support the properties we've used to
    beautify the project. However, since the `background-color` property is set to
    the main color, key information from the chart is still available.
  prefs: []
  type: TYPE_NORMAL
- en: Chart lines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also use background properties to draw the horizontal lines that usually
    mark and divide the background of a bar chart into steps, each representing 20
    percent of the total height.
  prefs: []
  type: TYPE_NORMAL
- en: 'To proceed, we need to create a linear gradient that is mostly transparent,
    except for its very first pixel, and then we have to set the size of this background
    to 20 percent and repeat it; here''s the required CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart lines](img/3264OT_10_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is not exactly what we were expecting; the last line is slightly higher
    up than the bottom of the bar. This is probably because the browser finds it difficult
    to align a repeating gradient when the container size is not a perfect multiplier
    of the number of times we want the background to fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try a different approach using a single gradient describing five small
    gray bands; here''s the CSS code that replaces the previous one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Although the code appears less elegant, the results are far better than the
    previous attempt.
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart lines](img/3264OT_10_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our current solution is not entirely perfect because we are forced to specify
    the size of the gray bands using percentages, and this may lead to thick bands
    when the size of the chart increases too much. All things considered, this is
    the best solution so far, so let's stick with it.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can remove the temporary CSS `background-color` property and move to
    the next chart enhancement, the series.
  prefs: []
  type: TYPE_NORMAL
- en: Chart series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our markup, all the `.value` elements have another class, `.series1`; this
    is because we want our chart to support multiple series, so let''s add to our
    markup a new `.series2` set of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We can assume that each chart series comes with a checkbox and a bunch of elements,
    all with the same `.seriesx` class, where `x` is a number between `1` and `4`
    (we don't support more than 4 series for each chart).
  prefs: []
  type: TYPE_NORMAL
- en: 'With this assumption, we can set up a Sass `@for` loop between `1` and `4`
    to accomplish the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Set `background-color` for the series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide the series if the corresponding checkbox is not checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To dynamically create different colors for each series, we can rely on the **hsl**
    coordinate system (**hue saturation lightness**) because by simply changing the
    hue component, we can obtain colors that keep the same saturation and lightness,
    resulting in a more pleasant composition.
  prefs: []
  type: TYPE_NORMAL
- en: To hide the series, we have to create a rather complex CSS rule that basically
    says that, if the checkbox with a class—say `series1`—is checked, get all the
    elements within the `data-bar-chart` series with the same series class (`series1`
    in this case) and set their `opacity` properties to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the corresponding CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart series](img/3264OT_10_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding some animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used `opacity` to hide the series in response to the checkbox uncheck
    so that we can add a `transition` directive and fade in and out the series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Internet Explorer 8 and 9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Surprisingly, even Internet Explorer 8 understands and applies the complex rule
    that we defined before. The credit for this achievement goes to Selectivzr, a
    library we included with flexie and that has the ability to enable some CSS3 selectors
    from IE6 to IE8\. The only problem is that these browsers don't support the `opacity`
    property, so we have to detect this and switch back to the better supported `display:none`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: We can use a custom Modernizr build to accomplish this task, so let's download
    it from the official website ([http://modernizr.com/download](http://modernizr.com/download))
    taking care to select the **opacity** checkbox from the **CSS3** column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, after having renamed the file to just `modernizr.js`, we can include
    it in the HTML file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to add another rule within the series'' loop that uses `display:none`
    instead of `opacity: 0` if the class `no-opacity` is present on the `html` element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the new loop, including the `.no-opacity` selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Rotating the chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By taking advantage of the CSS `transform` property, we can easily transform
    this chart from a vertical bar chart to a horizontal one. This process, however,
    cannot be defined generically, as we did for bars and series, because it is closely
    dependent upon the chart size; so, we'll use the `.this_bar_chart` selector.
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish this, we'll change the `width` and `height` properties of the
    chart (we'll set them both to `500px` to better handle the sub-sequential rotation),
    rotate the whole chart by `90` degrees, and then rotate back the text elements
    in order to keep them readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rotating the chart](img/3264OT_10_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, neither does this last implementation work, nor is it easily obtainable,
    in browsers where CSS `transform` properties are not supported.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pie charts using only CSS and HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion of this chapter, I want to introduce to you a very smart technique
    I learned from Patrick Denny (Head Noggin of Atomic Noggin Enterprises) for creating
    pie charts out of nothing but HTML and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core of the technique focuses on how to obtain a slice of the chart of
    the desired size; this is achieved using the `clip` and `border-radius` properties
    on an HTML structure like this (we can create a new `pie.html` file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: First of all, we create a circle using a `.slice` selector and the `border-radius`
    property; we cut the circle in half.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we cut off the other half of the circle by using the `clip` property,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using the `clip` property on `.hold`, we cut off the other half of the
    circle with the `width` and `height` properties set to `200px`. The last step
    is easy, we can show a slice of the pie of a chosen size by rotating `.slice`
    by the correspondent angle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating pie charts using only CSS and HTML](img/3264OT_10_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By stacking some of these HTML structures one on top of the other, a fully-functional
    and pure CSS pie chart can be obtained.
  prefs: []
  type: TYPE_NORMAL
- en: A more detailed procedure is described on Patrick's blog at [http://atomicnoggin.ca/blog/2010/02/20/pure-css3-pie-charts/.](http://atomicnoggin.ca/blog/2010/02/20/pure-css3-pie-charts/.).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've used resources and techniques introduced earlier in the
    book to build a rather complex visual graph. This project shows how CSS can be
    used to develop components that otherwise would require JavaScript or additional
    technologies such as Flash or Silverlight.
  prefs: []
  type: TYPE_NORMAL
