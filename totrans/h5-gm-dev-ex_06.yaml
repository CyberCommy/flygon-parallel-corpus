- en: Chapter 6. Adding Sound Effects to your Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed several techniques of drawing game objects visually. In this
    chapter, we will focus on using the `audio` tag that is introduced in the HTML5
    specification. We can add sound effects, background music, and control the audio
    through the JavaScript API. In addition, we will build a music game in this chapter.
    It is a game that requires players to hit the correct string at the right time
    to produce the music.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a sound effect to the play button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a mini piano musical game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking the music game and the play button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding keyboard-driven to the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a keyboard-driven music game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completing the musical game with level data recording and the game over event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the final result we will create through this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Sound Effects to your Games](img/1260_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a sound effect to the play button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We had several mouse interactions in the Untangle game examples in previous
    chapters. Now imagine that we want to have sound effects with the mouse interaction.
    This requires us to instruct the game about the audio file to be used. We will
    use the `audio` tag to create a sound effect on a button.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Adding sound effects to the play button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with the code example available in the code bundle. We will have
    the folder structure similar to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action Adding sound effects to the play button](img/1260_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `index.htm` file contains the basic structure of the HTML. Now let''s add
    the following code to the body section of the `index.htm` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The HTML file accomplishes with a stylesheet. The file can be found in the code
    bundle named `audiogame.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will add a sound effect to the button in the JavaScript file. Add
    the following JavaScript in the `html5games.audio.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `index.htm` file in a browser. There, you should see a **PLAY** button
    on a yellow background, as shown in the following screenshot. Try to move the
    mouse on the button and click on it. You should be able to hear a sound when you
    hover over the button and another sound when you click on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Adding sound effects to the play button](img/1260_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a basic HTML5 game layout with a play button placed in the middle
    of the page. The JavaScript file handles the mouse hover and clicks of the button
    and plays corresponding sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an audio element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest way to use the `audio` tag is by providing a source file. The following
    code snippet shows how we can define an audio element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Showing the fallback content in the audio tag**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `audio` tag is newly introduced in the HTML5 specification. We can put
    the fallback content inside the `audio` tag, such as Flash movie to play the audio.
    The following link from HTML5 Rocks shows a quick guide on using the `audio` tag
    with Flash fallback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.html5rocks.com/tutorials/audio/quick/](http://www.html5rocks.com/tutorials/audio/quick/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides setting the source file of the `audio` tag, we can have additional
    controls by using several attributes. The following table shows the attributes
    we can set to the audio element:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Arguments | Definition | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `src` | Defines the source file of the audio element | When we use the `src`
    attribute in the `audio` tag, it specifies one source file of the audio file.
    For example, we load a sound effect `Ogg` file in the following code:<audio src=''sound.ogg''>If
    we want to specify multiple files with different formats, then we use the `source`
    tag inside the audio element. The following code specifies the `audio` tag with
    different formats to support different web browsers:<audio><source src=''sound.ogg''><source
    src=''sound.mp3''><source src=''sound.wav''></audio> |'
  prefs: []
  type: TYPE_TB
- en: '| Arguments | Definition | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| `autoplay` | Specifies that the audio plays automatically once it is loaded
    | Autoplay is used as a standalone attribute. This means that there is no difference
    in the following two lines of code:<audio src=''file.ogg'' autoplay><audio src=''file.ogg
    autoplay="autoplay"> |'
  prefs: []
  type: TYPE_TB
- en: '| `loop` | Specifies that the audio plays from beginning again after playback
    finishes | This is also used as a standalone attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| `preload` | Specifies that the audio source is loaded once the page is loaded
    | The `preload` attribute takes either of the following values:`preload="auto"``preload="metadata"``preload="none"`When
    the preload is used as a standalone attribute, it acts as setting it to `auto`
    and the browser will preload the audio.When it is set as `metadata`, the browser
    will not preload the content of the audio. However, it will load the meta data
    of the audio such as the duration and size.When it is set to `none`, the browser
    will not preload the audio at all. The content and metadata is loaded once it
    is played. |'
  prefs: []
  type: TYPE_TB
- en: '| `controls` | Shows the playback control of the audio | The `controls` attribute
    is a standalone attribute. It instructs the browser to show a playback control
    in the audio position. |'
  prefs: []
  type: TYPE_TB
- en: 'The following screenshot shows the Chrome displaying controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining an audio element](img/1260_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Playing a sound
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can get the reference of the audio element by calling the `getElementById`
    function. Then, we play it by calling the `play` function. The following code
    plays the `buttonactive` audio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `play` function plays the audio from the elapsed time, which is stored
    in the `currentTime` property. The default value of `currentTime` is zero. The
    following code plays the audio from 3.5 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Pausing a sound
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the play button, we can also pause the playback of an audio element
    by using the `pause` function. The following code pauses the `buttonactive` audio
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is no `stop` function to stop the audio element. Instead, we can pause
    the audio and reset the `currentTime` property of the element to zero. The following
    code shows how we can stop an audio element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<script>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`document.getElementById("buttonactive").pause()`;'
  prefs: []
  type: TYPE_NORMAL
- en: '`document.getElementById("buttonactive").currentTime = 0`;'
  prefs: []
  type: TYPE_NORMAL
- en: '`</script>`'
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the sound volume
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also set the volume of the audio element. The volume must range between
    0 and 1\. We can set the volume to 0 to mute it, and set it to 1 for the maximum
    volume. The following code snippet sets the volume of the `buttonactive` audio
    to 30%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using the jQuery hover event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'jQuery provides a `hover` function to define the behavior when we mouse over
    and mouse out a DOM element. Here is how we use the `hover` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '| Arguments | Discussion |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `function1` | The function is executed when the mouse moves in. |'
  prefs: []
  type: TYPE_TB
- en: '| `function2` | This is optional. The function is executed when the mouse moves
    out. When this function is not provided, the move out behavior is the same as
    function1. |'
  prefs: []
  type: TYPE_TB
- en: 'In the following code, we play the mouse over sound effect when moving the
    mouse in and pause the sound during mouse out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Ogg format audio to support Mozilla Firefox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use an MP3 format and the **Ogg** format file when we define the source of
    the audio element. The Ogg is a free and open source media container format which
    is supported in Mozilla Firefox. We will use a free audio convertor to convert
    our MP3 files into an Ogg file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Wikipedia contains a detailed explanation on the Ogg format at the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Ogg](http://en.wikipedia.org/wiki/Ogg)'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Converting an MP3 sound to Ogg format with Audacity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ogg is an open source standard that is free to use. There are many music players
    and convertors supporting it. We will use free software named **Audacity** to
    convert our MP3 files to the Ogg format:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the following URL to download Audacity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://audacity.sourceforge.net/download/](http://audacity.sourceforge.net/download/)'
  prefs: []
  type: TYPE_NORMAL
- en: Install Audacity by following the instructions of the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `button_over.mp3` in Audacity. The following screenshot shows Audacity
    with the MP3 file opened, waiting for us to start the conversion:![Time for action
    Converting an MP3 sound to Ogg format with Audacity](img/1260_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **File** | **Export As Ogg Vorbis** to open the export dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing this book, Audacity 1.3 beta was released and the export
    layout changed. Click on **File** | **Export …** and choose the Ogg format in
    the export dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Save the Ogg format file in the working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just converted an MP3 format sound effect into the Ogg format in order to
    make the audio work in browsers that do not support an MP3 format.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting different web browsers with different audio formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table shows the audio formats supported by the latest popular
    web browsers at the time of writing this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Browser | Ogg | MP3 | WAV |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox 3.6+ | Yes | - | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Safari 5+ | - | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Chrome | Yes | Yes | - |'
  prefs: []
  type: TYPE_TB
- en: '| Opera 10.5+ | Yes | - | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Explorer 9 | - | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: Pop quiz Using the audio tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How can we stop an audio element playing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Use the `stop` function
  prefs: []
  type: TYPE_NORMAL
- en: b. Use the `pause` function and reset the `currentTime` to 0
  prefs: []
  type: TYPE_NORMAL
- en: c. Reset the `currentTime` to 0
  prefs: []
  type: TYPE_NORMAL
- en: How can we put fallback content to display in browsers that do not support `audio`
    tags?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a mini piano musical game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine now we are not only playing a sound effect, but also playing a full
    song with the `audio` tag. Along with the song playing, there are some music dots
    moving downwards as a visualization of the music.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Creating a basic background to the music game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will draw a few paths in canvas as the background of the music playback.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue working with our example and draw the background. Open the
    `index.htm` file in a text editor and add the following highlighted code that
    defines the game scene with two canvases set up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We added a game scene in the HTML file. We want to make it on top of the menu
    scene, so we style the game scene to have `absolute` position by adding the following
    to `audiogame.css:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It is time for the background drawing code. Open the `html5games.audio.js` JavaScript
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the jQuery `ready` function, we call a `drawBackground` function to draw
    the background as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `drawBackground` function to the end of the JavaScript file.
    The code draws three black lines and one grey line in the `game-background-canvas`
    canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When we open the `index.htm` file in a browser, we will see four lines with
    a background, as shown in the following screenshot. Do not worry that the play
    button is hidden for now, we will show it again later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Creating a basic background to the music game](img/1260_06_22acopy.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created a canvas where we draw the music game background. In this music
    game example, we introduced the basic scene management in HTML5 games.
  prefs: []
  type: TYPE_NORMAL
- en: Creating scenes in HTML5 games
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating **scenes** in HTML5 is similar to creating **layers** like we did
    in the last chapter. It is a DOM element that contains several children. All the
    children elements are positioned in absolute. We have two scenes in our example
    now. The following code snippet shows a possible scene structure in an entire
    game with a game over scene, credit scene, and leaderboard scene included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows that the scenes are placed at the same place
    in a web page. It is very similar to the layers structure. The difference is that
    we will control the scene by showing and hiding each scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating scenes in HTML5 games](img/1260_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing the music play back
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have ever played the Dance Dance Revolution, Guitar Hero, or the Tap
    Tap Revenge game, then you may be familiar with the music dots moving downwards
    or upwards and the player hitting the music dots when it moves to the right place.
    The following screenshot demonstrates the Tap Tap Revenge game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Visualizing the music play back](img/1260_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will play a song in the `audio` tag with similar music visualization in the
    canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Creating the playback visualization in the music game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a song with both a melody part and a base part. Copy the `minuet_in_g.ogg,
    minuet_in_g.mp3, minuet_in_g_melody.ogg`, and `minuet_in_g_melody.mp3` files from
    the downloaded files or from the code bundle in the `media` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add the `audio` tag with the song as a source file. Open the `index.htm`
    file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The music visualization is mainly done in JavaScript. Open the `html5games.audio.js`
    JavaScript file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `MusicNote` object type to represent the music data and a `Dot` object
    type to represent the visual dot of the music note in the canvas as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need several game variables to store the `MusicNote` instances, the
    `Dot` instance, and other information. The level data is a sequence of time and
    the appearing line that is separated by a semi-colon. The level data represents
    the time and line at which the music note should appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The level data is stored in a string format. We have the following function
    to extract the string in the `MusicNote` object instances and store in an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code in the starting of the jQuery `ready` function. It references
    the `melody` and `base` audio tags and loads the dot image for later use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code in the end of the jQuery `ready` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following two functions in the JavaScript file. The `startGame` function
    sets the starting time and executes the `playMusic` function with a delay. The
    latter function plays both the melody and base audios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `gameloop` function to JavaScript. The `gameloop` function
    creates new dots at the top of the game and moves the existing notes down:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all files and open the `index.htm` file in web a browser. The following
    screenshot shows the music playing with the music dots appearing on the top and
    moving downwards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Creating the playback visualization in the music game](img/1260_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just built a fully functional music game and this is the basic playback function.
    It plays the song with both the melody and the base part with some music dots
    moving downwards.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right song for the music game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have to be careful of the copyright issue when choosing a song for the music
    game. It usually requires paying a usage fee or making an agreement with the song
    copyright owner to use a song with copyright. It is fine if you are building a
    commercial music game that is going to be a hit in the game industry and the earnings
    can overcome the copyright usage expense. However, as a book example here, we
    are going to use a copyright-free song. That is why we use the classical song
    Minute in G which is free public domain.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and extracting the song level data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The level data shown in the *Time for action* section is just a portion of
    the entire level data. It is a very long string storing music note information,
    including the time and the line. It is stored in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Each music dot data contains the time to show up and which line it shows. This
    data is separated by a comma. Every piece of music dot data is separated by a
    semi-colon. The following code extracts the level string into a `MusicNote` object
    by splitting the semi-colon and the comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The level data string is recorded by the keyboard and we are going to discuss
    the recording later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The level data contains only several music notes here. In the code bundle, there
    is the whole level data of the complete song.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an optional second parameter for the JavaScript `parseInt` function.
    It defines the radix of the number to parse. By default, it uses decimal but `parseInt`
    will parse the string as octal when the string begins with zero. For example,
    `parseInt("010")` return result 8 instead of 10\. If we want the decimal number,
    then we can use `parseInt("010",10)` to specify the radix.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the elapsed time of the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we know the elapsed time of an audio element by accessing the `currentTime`
    property, we want to get the time from the starting of the game.
  prefs: []
  type: TYPE_NORMAL
- en: We can get the elapsed time by storing the current computer time when starting
    the game and subtracting the current time value to get the elapsed time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the current computer time by using the `Date` object. The following
    code snippet shows how we use `startingTime` to get the elapsed time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the preceding code snippet running in console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the elapsed time of the game](img/1260_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating music dots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `gameloop` function, we check all the `MusicNote` instances and see
    whether it is time to create the visual dot of that music note. The following
    code shows the logic we used to create the visual music dot. Basically, we get
    the elapsed time of the game and compare it with the current time of each music
    note. If the time difference between the note''s current time and elapsed time
    is within 30 ms, then we create the visual dot instance and let the `gameloop`
    function draw it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Moving the music dots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a time difference between the game start and music start. The game
    starts several seconds before the song starts playing. It is because we need to
    show the music dots and move it down before the music starts.
  prefs: []
  type: TYPE_NORMAL
- en: The music dots should match the song when the dots are in the grey line. The
    music dots appear from the top of the game and move down towards the grey line.
    We delay the music play to wait as the dots move from top to bottom. It is around
    3.55 seconds in this example, so we delay the music playing by 3.55 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the dot is created, it is placed at a given distance. We decrease all
    dots'' distance by 2.5 every time the `gameloop` function executes. The distance
    is stored in each `dot` object representing how far away it is from the grey line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The y position of the dot is calculated by the grey line subtracting the distance
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the distance between the grey line and each
    dot. When the distance is zero, it is exactly on the grey line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving the music dots](img/1260_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Linking the play button to the music game scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a game scene now playing our song. However, it covers the menu scene
    we made with a play button inside. Imagine now we open the game with the play
    button being displayed, then we click on the button and the game scene slides
    in and starts playing the music.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Animating the scene transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will hide the game scene by default and show it after the play button is
    clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we have to modify the stylesheet. Open the `audiogame.css` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following highlighted overflow property to `#game`. It helps to clip
    the game into a 768x440px mask:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add the following highlighted code to style the game scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will move on to the JavaScript part. Open the `html5games.audio.js`
    JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `startGame` function calling in the jQuery ready function. We will
    call it when the play button is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the play button click handler, we add the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all files and open the `index.htm` in a browser. There should be a slide-in
    animation to show the music playback scene when we click on the play button. The
    following screenshot sequence shows the slide-in animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action Animating the scene transition](img/1260_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a transition between the menu scene and the game scene.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a slide-in effect in CSS3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The game scene slides in from the top when the play button is clicked. This
    scene transition effect is done by moving the game scene by CSS3 transition. The
    game scene position is initially placed with a negative top value. We then change
    the top position from negative value to zero with a transition, so it animates
    from the top to the correct position.
  prefs: []
  type: TYPE_NORMAL
- en: Another important thing to make the sliding effect work is to set the overflow
    of the parent DIV of the scenes to hidden. Without the hidden overflow, the game
    scene is visible even with a negative top position. Therefore, it is important
    to set the parent DIV of the scenes to the hidden overflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the slide-in transition of the game scene.
    The `#game` DIV is the parent of both menu scene and game scene. The game scene
    moves from the top when we add the `.show-scene` class which sets the top value
    to 0 with transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a slide-in effect in CSS3](img/1260_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Have a go hero Creating different scene transition effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We made a slide-in effect to the scene transition when showing the game. By
    using JavaScript and CSS3, we can make many different scene transition effects
    creatively. Try making your own transition effect to the game, such as fading
    in, pushing in from the right, or even flipping with a 3D rotation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a keyboard-driven mini piano musical game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can click on the **play** button. The music game slides in and plays
    the song with music notes dropping down. Our next step is adding interaction to
    the music notes. Therefore, we will add keyboard events to control the three lines
    to hit the music notes.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Creating a mini piano musical game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to show an indication when pressing the keyboard. Open the `index.htm`
    file and add the following highlighted HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we may want to inform visitors that they can play the game by pressing
    the **J, K**, and **L** keys. Modify the footer content as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will move on to the stylesheet. The stylesheet is included in the code
    bundle with a folder named `audio_game_scene_transition`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will add the keyboard event in the JavaScript part. Open the `html5games.audio.js`
    JavaScript file and add the following code inside the jQuery ready function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now save all files and open the game in a browser. Try pressing the **J, K**,
    and **L** keys. The three hit line indicator should appear and fade out when the
    key is pressed. If the music dot passes by the grey line when hitting the right
    key, then it disappears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Creating a mini piano musical game](img/1260_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added keyboard interaction to our music game. There is a glow animation
    when hitting the keys. The music dot will disappear when the right key is pressed
    at the right moment.
  prefs: []
  type: TYPE_NORMAL
- en: Hitting the three music lines by key down
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the **J, K**, and **L** keys to hit the three music lines in the game.
    The **J** key controls the left line, the **K** key controls the middle line,
    and the **L** key controls the right one.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also an indication showing that we just hit the music line. This is
    done by placing the following image at the intersection of the grey line and music
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hitting the three music lines by key down](img/1260_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can control the showing and hiding of the hit indication graphics
    with the following jQuery code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**J, K**, and **L** keys control the music line 1 to 3\. As J, K, and L have
    the key code 74, 75, and 76 respectively, we know which line number it is by subtracting
    the key code by 73.'
  prefs: []
  type: TYPE_NORMAL
- en: Determining music dot hits on key down
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The distance is close to zero if the dot is almost on the grey horizontal line.
    This helps us in determining if the dots hit the grey line. By checking both the
    key down event and the dot distance, we can determine if we successfully hit a
    music dot. The following code snippet shows that we consider the dot is hit when
    the distance is within 20 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: With determination, we remove the music dots when we hit them. The missed dots
    will still pass through the grey line and move towards the bottom. This creates
    a basic game play where the player has to eliminate all the music dots by hitting
    them correctly at the right moment when the song is playing.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an element in an array with the given index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We remove the music dot data from an array when it is hit (and thus it will
    not be drawn anymore). To remove an element in an array, we use the `splice` function.
    The following line of code removes one element from an array at the given index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `splice` function is a little tricky to use. This is because it allows us
    to add or remove elements in an array. Then, it returns removed elements as another
    array. It sounds complicated. Therefore, we will perform some experiments.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Removing music dots with the splice function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will open the JavaScript console in a web browser to perform a few tests
    on the `splice` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the JavaScript console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input the following commands to the console line by line. That is, pressing
    **Enter** on each command line. These commands create an array and manipulate
    it with the `splice` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We should get a result similar to the one shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Removing music dots with the splice function](img/image031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created an array and tried adding and removing elements by using the
    `splice` function. Please note that the splice array returns another array with
    the removed elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we use the `splice` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows how we use the arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument | Definition | Discussion |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `index` | Specifies the index of an element to be added or removed in the
    array | The index starts from 0\. 0 means the first element, 1 means the second
    one, and so on. We can also use negative indexes, such as -1 which means the last
    element, -2 which means the second last element, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `length` | Specifies how many elements we want to remove | Putting 0 means
    we do not remove any element. |'
  prefs: []
  type: TYPE_TB
- en: '| `element1, element2` … `elementN` | The new elements to be added into the
    array; this is optional | This is optional. Putting a list of elements here means
    we add the elements at the given index. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following Mozilla Developer Network link discusses different usages of
    the `splice` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice](http://https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice)'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In similar commercial music games, there are some words showing when the player
    hits or misses a music dot. How can we add this feature to our game?
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional features to the mini piano game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created basic interaction to the game. We can go further to make the
    game better, by adding melody volume feedback to make the performance playing
    realistic, and counting the success rate of the performance.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the music volume according to the player
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine now we are in a performance playing the music. We hit the music dots
    to play the melody. If we miss any of them, then we fail to perform it well and
    the melody disappears.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Removing missed melody notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will store some gameplay statistics and use it to adjust the melody volume.
    We will continue with our JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the following variables in the variable declaration region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setupLevelData` function, we get the total amount of dots with the
    highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to not only remove a dot but also keep track of the result when we
    hit it by using a keyboard. Add the following code inside the keyboard handler
    in the jQuery ready function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `gameloop` function, we calculate all missed dots and store the result.
    Then, we can use these statistics to get the successful rate of the game. Add
    the following code to the `gameloop` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'At last, we adjust the melody volume by using the successful rate. Put the
    following code after the code we just added in the `gameloop` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Save all files and test our game in a browser. When the player continues to
    play the game well, the melody keeps playing. When the player misses several music
    dots, the melody disappears and only the base plays.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used the player performance as a feedback on the melody volume. It gives
    a feeling that we are really performing the music. When we perform poorly, the
    melody volume is low and the song sounds poor too.
  prefs: []
  type: TYPE_NORMAL
- en: Removing dots from the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to remove the dots either after it drops under the bottom bound or when
    they are being hit by the player. The game loop displays all the dots in the dot
    list on the game canvas. We can remove the dot graphic by removing its data from
    the array of dots.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following `splice` function to remove an entry in the array at the
    target index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Storing the success count in the last five results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our game, we need to store the success count in the last five results to
    calculate the success rate. We can do this by using a counter representing this.
    When a dot is successfully hit, the counter increases by one, but when the player
    fails on hitting a dot, the counter decreases by 1.
  prefs: []
  type: TYPE_NORMAL
- en: The counter is then representing the successful counts within the last several
    results if we limit the counter to have a range, such as 0 to 5 in our example.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We discussed how to display the game progress in the Untangle game in the last
    chapter. Can we apply a similar technique in the music game? We have the player's
    success percentage during game play. How about displaying it as a percentage bar
    on the top of the game?
  prefs: []
  type: TYPE_NORMAL
- en: Recording music notes as level data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The game relies on the level data to play. The playback visualization will not
    work if there is no level data. We also cannot play it if the playback visualization
    is not working. So how can we record that level data?
  prefs: []
  type: TYPE_NORMAL
- en: Imagine now the music is playing without any music dots appearing in the game.
    We listen to the music carefully and press the **J, K, L** keys when the music
    plays. After the music ends, we print out all the keys and time we pressed. This
    data will then be used back in the playback visualization of the music.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Adding functionality to record the music level data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a variable to toggle between the recording mode and normal
    playing mode. Open the `html5games.audio.js` file and add the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add the following highlighted code in the `keydown` event handler.
    This code stores all our pressed keys in an array and prints them out to the console
    when the semi-colon key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we want to make sure that the `setupLevelData` and the `gameloop`
    functions are not executed during the recording mode. These functions are for
    playing mode only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the `index.htm` in a browser. After clicking on the **play** button,
    the game starts and the music plays without the music notes. Try pressing the
    **J, K**, and **L** keys following the music beat. After finishing the music,
    press the semi-colon to print the level data in the console. The following screenshot
    shows the console displaying the level data string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Adding functionality to record the music level data](img/1260_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added a recording feature to our game. We can now record our music notes.
    We can toggle the record mode and playing mode by setting the `audiogame.isRecordMode`
    variable to true and false.
  prefs: []
  type: TYPE_NORMAL
- en: 'On every key press, we get the elapsed time of the melody and create a `MusicNote`
    instance with the time and line number. The following code shows how we record
    the pressed keys. The `currentTime` is cut to two decimal digits before saving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We also capture the semi-colon key to print out all the recorded `MusicNote`
    data into a string. The string follows the `time,line;time,line`; format, so we
    can directly copy the printed string and paste it as level data to play.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `toFixed` function formats the number with the given number of trailing
    decimals. In our example, we used it to get the current time with `3` trailing
    decimals.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the audio event on playback completes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can play the game now, but there is no indication on game over. Imagine now,
    we want to know how well we played when the game completes. We will capture the
    melody-ending signal and display the successful rate of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action Indicating a game over event in the console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `html5games.audio.js` JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the jQuery ready function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following event handler function to the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'It is time to save all files and play the game in a web browser. When the game
    is over, we should see that the successful rate is printed in the console as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action Indicating a game over event in the console](img/1260_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just listened to the `ended` event of the audio element and handled it with
    a handler function.
  prefs: []
  type: TYPE_NORMAL
- en: Handling audio events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many other events in the audio element. The following table lists
    a few commonly used audio events:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Discussion |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ended` | Sent when the audio element finishes a playback |'
  prefs: []
  type: TYPE_TB
- en: '| `play` | Sent when the audio element plays or resumes |'
  prefs: []
  type: TYPE_TB
- en: '| `pause` | Sent when the audio element pauses |'
  prefs: []
  type: TYPE_TB
- en: '| `progress` | Sent periodically when the audio element is downloading |'
  prefs: []
  type: TYPE_TB
- en: '| `timeupdate` | Sent when the `currentTime` property changes |'
  prefs: []
  type: TYPE_TB
- en: 'Here we just listed a few commonly used events; you can reference the complete
    audio event list in the Mozilla Developer Center at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Media_events](http://https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Media_events)'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our music game, we print out the successful rate in the console when the
    game is over. How about adding a game over scene to our game and showing it at
    the end of the game? It would be good to use animation transition when showing
    a game over scene too.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned a lot in this chapter about using the HTML5 audio element and built
    a music game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the audio tag to the HTML. There are different attributes we can set
    to define how the audio tag behaves and loads different format sources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the audio playback and volume by using the JavaScript API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding sound effects on mouse hover and active with the help of jQuery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a music game in canvas with keyboard inputs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling audio events; the audio element sends several events when its state
    changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also discussed managing scenes and animating the transition.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned about adding music and sound effects in our HTML5 games. Now
    we are ready to build a more complete game by adding a leaderboard to store game
    scores in the next chapter.
  prefs: []
  type: TYPE_NORMAL
