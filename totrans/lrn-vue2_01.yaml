- en: Chapter 1. Going Shopping with Vue.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。使用Vue.js去购物
- en: '*"Vue.js is a JavaScript framework for building astonishing web applications.
    Vue.js is a JavaScript library for creating web interfaces. Vue.js is a tool that
    leverages the use of MVVM architecture."*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Vue.js是一个用于构建惊人的Web应用程序的JavaScript框架。Vue.js是一个用于创建Web界面的JavaScript库。Vue.js是一种利用MVVM架构的工具。"*'
- en: Simplified JavaScript Jargon suggests that Vue.js is a JavaScript library for
    creating user interfaces (Views) based on underlying data models ( [http://jargon.js.org/_glossary/VUEJS.md](http://jargon.js.org/_glossary/VUEJS.md)
    ).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 简化的JavaScript术语建议Vue.js是一个基于底层数据模型创建用户界面（视图）的JavaScript库（[http://jargon.js.org/_glossary/VUEJS.md](http://jargon.js.org/_glossary/VUEJS.md)）。
- en: The official Vue.js website ( [https://vuejs.org/](https://vuejs.org/) ) just
    some months ago stated that Vue.js were reactive components for modern web interfaces.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Vue.js网站（[https://vuejs.org/](https://vuejs.org/)）在几个月前表示，Vue.js是用于现代Web界面的反应式组件。
- en: '![Going Shopping with Vue.js](../Images/image00216.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用Vue.js去购物](../Images/image00216.jpeg)'
- en: 'Now it states that Vue.js is a progressive JavaScript framework:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它说明了Vue.js是一个渐进式的JavaScript框架：
- en: '![Going Shopping with Vue.js](../Images/image00217.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![使用Vue.js去购物](../Images/image00217.jpeg)'
- en: So what is Vue.js after all? Framework? Tool? Library? Should it be used for
    building full-stack web applications or just for adding some special functionality?
    Should I switch from my favorite framework to it? If yes, why? Can I use it alongside
    other tools in my project? What advantages it might bring?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Vue.js到底是什么？框架？工具？库？它应该用于构建全栈Web应用程序，还是仅用于添加一些特殊功能？我应该从我喜欢的框架转到它吗？如果是的话，为什么？我可以在我的项目中同时使用它和其他工具吗？它可能带来什么优势？
- en: In this chapter, we will try to find the answers to all these questions. We
    will slightly touch Vue.js and use it within some small and simple examples.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试找到所有这些问题的答案。我们将稍微涉及Vue.js，并在一些小而简单的示例中使用它。
- en: 'More specifically, we will do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将做以下事情：
- en: Learn what Vue.js is, its important parts, and its history
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Vue.js是什么，它的重要部分和历史
- en: Learn what projects use Vue.js
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解哪些项目使用了Vue.js
- en: Build a simple shopping list using Vue.js and compare the implementation to
    the jQuery implementation of the same application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue.js构建一个简单的购物清单，并将其实现与相同应用程序的jQuery实现进行比较
- en: Build a simple Pomodoro timer using Vue.js
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue.js构建一个简单的番茄工作法计时器
- en: Enjoy a small and simple exercise
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 享受一个小而简单的练习
- en: Buzzwords
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流行词
- en: 'There will be lots of buzzwords, abbreviations, and other hipster combinations
    of letters in this book. Please do not be afraid of them. I can tell you more
    but, for the most part of things you need to do using Vue.js or any other framework,
    you do not need to know them all by heart! But, in any case, let us leave the
    thesaurus here so that you become confused with terminology at any point of the
    book, you can come back here and have a look:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中将会有很多流行词、缩写和其他时髦的字母组合。请不要害怕它们。我可以告诉你更多，但是，对于使用Vue.js或任何其他框架需要做的大部分事情，你不需要全部都牢记在心！但是，无论如何，让我们把词汇表放在这里，这样你在书的任何地方都会对术语感到困惑，你可以回到这里看一看：
- en: '**Application state**: This is a global centralized state of the application.
    The data in this state is initialized when the application is started. This data
    can be accessed by any application''s component; however, it cannot be changed
    easily by them. Each item of the state has an attached mutation that can be dispatched
    on special events occurring inside the application''s components.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用状态**：这是应用程序的全局集中状态。当应用程序启动时，此状态中的数据被初始化。任何应用程序组件都可以访问此数据；但是，它们不能轻易地更改它。状态的每个项目都有一个附加的变异，可以在应用程序组件内发生的特殊事件上分派。'
- en: '**Bootstrap**: This is a project that provides a set of styles and JavaScript
    tools for developing a responsive and nice application without having to think
    a lot about CSS.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap：这是一个项目，提供了一组样式和JavaScript工具，用于开发响应式和美观的应用程序，而无需过多考虑CSS。
- en: '**Content Distribution Network** (**CDN**): This is a special server whose
    aim is to deliver data to the users with high availability and high performance.
    People and companies who develop frameworks like to distribute them via CDNs because
    they allow them just to point out the CDN''s URL in the installation instructions.
    Vue.js is hosted in npmcdn ( [https://npmcdn.com/](https://npmcdn.com/) ), which
    is a reliable and global network for the things that are published to the npm.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容分发网络（CDN）：这是一个特殊的服务器，其目的是以高可用性和高性能向用户传递数据。开发框架的人和公司喜欢通过CDN分发它们，因为它们只需在安装说明中指出CDN的URL。Vue.js托管在npmcdn（[https://npmcdn.com/](https://npmcdn.com/)），这是一个可靠的全球网络，用于发布到npm的内容。
- en: '**Components**: These are the pieces of the application with their own data
    and View that can be reused through the application, acting as a brick from which
    the house is being built.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件：这些是应用程序的部分，具有自己的数据和视图，可以在整个应用程序中重复使用，就像建造房子的砖块一样。
- en: '**Cascading Style Sheets** (**CSS**): This is a set of styles to apply to the
    HTML document to make it nice and beautiful.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层叠样式表（CSS）：这是一组样式，应用于HTML文档，使其变得美观漂亮。
- en: '**Declarative Views**: These are the Views that provide a way of direct data
    binding between plain JavaScript data models and the representation.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式视图：这些是提供了一种直接数据绑定的视图，可以在普通的JavaScript数据模型和表示之间进行绑定。
- en: '**Directives**: These are special HTML elements attributes in Vue.js that allow
    data binding in different ways.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令：这是Vue.js中的特殊HTML元素属性，允许以不同的方式进行数据绑定。
- en: '**Document Object Model** (**DOM**): This is a convention for representing
    nodes in markup languages such as HTML, XML, and XHTML. The nodes of the documents
    are organized into a DOM tree. When someone says interacting with DOM, it is just
    their fancy way of saying interacting with HTML elements.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）：这是一种表示标记语言节点的约定，例如HTML、XML和XHTML。文档的节点被组织成DOM树。当有人说与DOM交互时，这只是他们花哨地说与HTML元素交互。
- en: '**npm**: This is a package manager for JavaScript and allows searching, installing,
    and managing JavaScript packages.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm：这是JavaScript的包管理器，允许搜索、安装和管理JavaScript包。
- en: '**Markdown**: This is a human-friendly syntax that allows web writers to write
    their text without worrying about styles and HTML tags. Markdown files have a `.md`
    extension.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Markdown：这是一种人性化的语法，允许网络作者编写文本而不必担心样式和HTML标记。Markdown文件的扩展名为`.md`。
- en: '**Model View ViewModel** (**MVVM**): This is an architectural pattern whose
    central point is a ViewModel that acts as a bridge between the View and the data
    model, allowing the data flow between them.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型视图视图模型（MVVM）：这是一种架构模式，其核心是视图模型，充当视图和数据模型之间的桥梁，允许它们之间的数据流动。
- en: '**Model View Controller** (**MVC**): This is an architectural pattern. It allows
    separating Views from Models and from the way that information flows from Views
    to Models, and vice versa.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型视图控制器（MVC）：这是一种架构模式。它允许将视图与模型分离，以及信息从视图流向模型，反之亦然。
- en: '**One-way data binding**: This is the type of data binding where the changes
    in the data model are automatically propagated to the View layer, but not vice
    versa.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单向数据绑定：这是一种数据绑定类型，其中数据模型中的更改会自动传播到视图层，但反之则不会。
- en: '**Rapid prototyping**: In the Web, this is a technique of easily and rapidly
    building the mockups of the user interface, including some basic user interaction.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速原型制作：在Web中，这是一种轻松快速地构建用户界面模型的技术，包括一些基本的用户交互。
- en: '**Reactivity**: In the Web, this is actually the immediate propagation of any
    changes of data to the View layer.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应性：在Web中，这实际上是数据的任何更改立即传播到视图层。
- en: '**Two-way data binding**: This is the type of data binding where the changes
    in the data model are automatically propagated to the View layer, and the changes
    that happen in the View layer are immediately reflected in the data model.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向数据绑定：这是一种数据绑定类型，其中数据模型的更改会自动传播到视图层，而视图层中发生的更改会立即反映在数据模型中。
- en: '**User interface** (**UI**): This is a set of visual components that allow
    the user to communicate with the application.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面（UI）：这是一组视觉组件，允许用户与应用程序进行交互。
- en: '**Vuex**: This is an architecture for Vue applications and allows simple management
    of the application state.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vuex：这是Vue应用程序的架构，允许简单地管理应用程序状态。
- en: Vue.js history
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js历史
- en: When, Evan You, Vue.js creator ( [http://evanyou.me/](http://evanyou.me/) ),
    was working at Google Creative Labs on one of the projects, they needed to fast
    prototype a rather big UI interface. Writing a lot of repeated HTML was clearly
    time- and resource-consuming, and that's why Evan started looking for some already
    existing tool for this purpose. To his surprise, he discovered that there was
    no tool, library, or framework that could fit exactly into the purpose of rapid
    prototyping! At that time, Angular was widely used, React.js was just starting,
    and frameworks such as Backbone.js were used for large-scale applications with
    MVC architecture. For the kind of project that needed something really flexible
    and lightweight just for quick UI prototyping, neither of these complex frameworks
    were adequate.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当Vue.js的创始人Evan You（[http://evanyou.me/](http://evanyou.me/)）在Google创意实验室的一个项目上工作时，他们需要快速原型制作一个相当大的UI界面。编写大量重复的HTML显然是耗时和耗资源的，这就是为什么Evan开始寻找已经存在的工具来实现这个目的。令他惊讶的是，他发现没有工具、库或框架能够完全符合快速原型制作的目的！那时，Angular被广泛使用，React.js刚刚开始，Backbone.js等框架被用于具有MVC架构的大型应用程序。对于需要非常灵活和轻量级的快速UI原型制作的项目来说，这些复杂的框架都不太合适。
- en: When you realize that something cool does not exist and you are able to create
    it—*just do it*!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你意识到某个酷炫的东西不存在，而你又能够创造它时——*就去做吧*！
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Vue.js was born as a tool for rapid prototyping. Now it can be used to build
    complex scalable reactive web applications.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js诞生于快速原型制作工具。现在它可以用来构建复杂可扩展的响应式Web应用程序。
- en: That was what Evan did. That is how he came to the idea of creating a library
    that would help in rapid prototyping by offering an easy and flexible way of reactive
    data binding and reusable components.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Evan所做的。这就是他想到创建一个库的想法，通过提供一种简单灵活的响应式数据绑定和可重用组件的方式来帮助快速原型制作。
- en: Like every good library, Vue.js has been growing and evolving, thus providing
    more features than it was promising from the beginning. Currently, it provides
    an easy way of attaching and creating plugins, writing and using mixins, and overall
    adding custom behavior. Vue can be used in such a flexible way and is so nonopinionated
    of the application structuring that it definitely can be considered as a framework
    capable of supporting the end-to-end building of complex web applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 像每个优秀的库一样，Vue.js一直在不断成长和发展，因此提供了比最初承诺的更多功能。目前，它提供了一种简单的附加和创建插件、编写和使用混合物的方法，以及总体添加自定义行为。Vue可以以如此灵活的方式使用，并且对应用程序结构没有明确的意见，以至于它绝对可以被视为一个能够支持端到端构建复杂Web应用程序的框架。
- en: The most important thing about Vue.js
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js allows you to simply bind your data models to the representation layer.
    It also allows you to easily reuse components throughout the application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to create special models or collections and to register events
    object in there. You don't need to follow some special syntax. You don't need
    to install any of never-ending dependencies.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Your models are plain JavaScript objects. They are being bound to whatever you
    want in your Views (text, input text, classes, attributes, and so on), and it
    just works.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: You can simply add the `vue.js` file into your project and use it. Alternatively,
    you can use `vue-cli` with Webpack and Browserify family, which not only bootstraps
    the whole project but also supports hot reloading and provides developer tools.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: You can separate the View layer from styles and JavaScript logic or you can
    put it alltogether into the same Vue file and build your components' structure
    and logic in the same place. There is plugin support for all modern and commonly
    used IDEs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: You can use whatever preprocessors you want, and you can use ES2015\. You can
    use it alongside your favorite framework you have been developing in, or you can
    use it itself. You can use it just to add a small functionality, or you can use
    the whole Vue ecosystem to build complex applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check how it compares to other frameworks, such as Angular or
    React, then please visit  [http://vuejs.org/guide/comparison.html](http://vuejs.org/guide/comparison.html)
    .
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check out all the amazing things about Vue.js, then you are more
    than welcome to visit  [https://github.com/vuejs/awesome-vue](https://github.com/vuejs/awesome-vue)
    .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Let's go shopping!
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I don''t know how but I can feel that your weekend is close and that you are
    starting to think about going shopping to buy the needed groceries for the next
    week. Unless you are a genius who is able to maintain the whole list in your head
    or you are a modest person who does not need so much, you probably make a shopping
    list before going shopping. Maybe you even use some app for that. Now, I ask you:
    why not use your own app? How do you feel about creating and designing it? Let''s
    do that! Let''s create our own shopping list application. Let''s start by creating
    a rapid prototype for it. It''s a really easy task—build an interactive prototype
    for the shopping list.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: It should show the list and allow us to add and remove the items. Actually,
    it's very similar to a ToDo list. Let's start doing it using classic HTML + CSS
    + JS + jQuery approach. We will also use the Bootstrap framework ( [http://getbootstrap.com/](http://getbootstrap.com/)
    ) to make things a little bit more beautiful without having to write extensive
    CSS code. (Yes, because our book is not about CSS and because making things with
    Bootstrap is so crazily easy!)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a shopping list using jQuery
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Probably, your code will end up looking as something like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the CSS code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the JavaScript/jQuery code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**`Downloading the example code`** Detailed steps to download the code bundle
    are mentioned in the [Preface](part0010.xhtml#aid-9H5K1 "Preface") of this book.
    The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Learning-Vue.js-2](https://github.com/PacktPublishing/Learning-Vue.js-2).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the page in a browser, you will probably see something like the
    following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing a shopping list using jQuery](../Images/image00218.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Shopping list implementation using the HTML + CSS + jQuery approach
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at JSFiddle at [https://jsfiddle.net/chudaol/u5pcnLw9/2/](https://jsfiddle.net/chudaol/u5pcnLw9/2/)
    .
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it is a very basic piece of HTML code that contains an unordered
    list of elements, where each element is presented with a checkbox and a text—an
    input for the user text and the **`Add!`** button. Each time the **`Add!`** button
    is clicked, the content of the text input is transformed into a list entry and
    appended to the list. When the checkbox of any item is clicked, the state of an
    entry is toggled from to **`to buy`** (unchecked) to **`bought`** (checked).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Let's also add a feature that allows us to change the title of the list (it
    might become useful if we end up implementing multiple shopping lists in the application).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we will end up with some extra markup and some more jQuery event listeners
    and handlers:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check JSFiddle at [https://jsfiddle.net/chudaol/47u38fvh/3/](https://jsfiddle.net/chudaol/47u38fvh/3/)
    .
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a shopping list using Vue.js
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This was a very simple example. Let''s try to implement it step-by-step using
    Vue.js. There are plenty of ways of including `vue.js` into your project, but
    in this chapter, we will include it just by adding the JavaScript Vue file from
    the **CDN**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, let's start by rendering a list of elements.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the HTML file and add the following markup:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now add the following JavaScript code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open it in the browser. You will see that the list is rendered:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing a shopping list using Vue.js](../Images/image00219.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: Shopping list implemented using Vue.js
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Let's analyze this example. The Vue application code starts with the new `Vue`
    keyword. How do we bind the piece of markup to the application data? We pass to
    the `Vue` instance the DOM element that must be bound to it. Any other markup
    in the page will not be affected and will not recognize Vue's magic.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our markup is wrapped into the `#app` element and is passed
    as a first argument in the map of `Vue` options. The `data` argument contains
    the objects that are being used inside the markup using double curly brackets
    (`{{}}`) . You will probably find this annotation very easy to understand if you
    are familiar with templating preprocessors (for example, handlebars; for more
    information, visit [http://handlebarsjs.com/](http://handlebarsjs.com/) ).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: So what?—you're probably exclaiming. What are you going to teach me? How to
    use templating preprocessors? Thank you very much, but I would be better off having
    some beers and watching football.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Stop, dear reader, don't go, just grab your beer and let's continue our example.
    You'll see that it'll be lots of fun!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing data binding using developer tools
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see data binding in action. Open your browser''s developer tools, find
    your JavaScript code, and add a breakpoint at the start of the script. Now analyze
    how the data objects look before and after the Vue application is initialized.
    You see, it changed a lot. Now the `data` object is prepared to the reactive data
    binding:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data binding using developer tools](../Images/image00220.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: The data object before and after the Vue object initialization
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if we change the `title` property of the `data` object from the developer
    tools console (we can do it because our `data` is a global object), it will be
    reflected automatically in the title on the page:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data binding using developer tools](../Images/image00221.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'Data binding: changing object properties affects the View immediately'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Bringing user input to the data with two-way binding
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, in our example, we were able to bring the data from the plain JavaScript
    data model to the page. We provided it a sort of a flight from the application
    code to the page. Don't you think that it would be nice if we could offer a two-way
    flight to our data?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Let's see now how we can achieve two-way data binding and how we can change
    the value of a `data` property from the page.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Copy the HTML markup for the title, change the input from the first jQuery example,
    and add the attribute `v-model="title"` to the `input` element.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Have you already heard about directives in Vue.js? Congratulations, you''ve
    just used one! Actually, the `v-model` attribute is a directive of Vue.js that
    provides two-way data binding. You can read more about it at the official Vue
    page: [http://vuejs.org/api/#v-model](http://vuejs.org/api/#v-model) .'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the HTML code for our shopping list application code looks like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And that's it!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page now and modify the input. You''ll see the title automatically
    being updated as you type:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Bringing user input to the data with two-way binding](../Images/image00222.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'Data binding: changing the text bound to the model''s property affects the
    text bound to the same property immediately'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: So, everything is nice; however, this example just grabs the two item elements
    and renders them as list items. We want it to render the list of items independently
    of the list size.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the list of items using the v-for directive
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, we need some mechanism to iterate through the `items` array and to render
    each item in our `<ul>` element.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, Vue.js provides us with a nice directive for iterating through
    iterative JavaScript data structures. It is called `v-for`. We will use it in
    the list item `<li>` element. Modify the markup of the list so that it looks like
    the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will learn other nice directives such as `v-if`, `v-else`, `v-show`, `v-on`,
    `v-bind`, and so on in this book, so keep reading.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page and have a look. The page remains the same. Now, try to push
    an item into the array of `items` from the developer tools console. Try to pop
    them as well. You will not be surprised to see that the `items` array manipulations
    are immediately reflected on the page:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering the list of items using the v-for directive](../Images/image00223.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: 'Data binding: changing an array affects lists based on it immediately'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: So, now we have a list of items that is rendered on a page with just one line
    of the markup. However, we still need these items to have a checkbox that allows
    us to check the already bought items or uncheck them when needed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Check and uncheck shopping list items
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To achieve this behavior, let's slightly modify our `items` array by changing
    our string items and transforming them into the objects with two properties, `text`
    and `checked` (to reflect the state), and let's modify the markup to add a checkbox
    to each item.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'So our JavaScript code for the data declaration will look like the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And our list markup will look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Refresh the page and check that the `checked` property of the `items` checkbox,
    and the removed class of each list item, `<li>`, is bound to the `checked` Boolean
    state of the items. Play around and try to click checkboxes to see what happens.
    Isn't it nice that just with two directives we are able to propagate the state
    of the items and change the class of the corresponding `<li>` HTML element?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Adding new shopping list items using the v-on directive
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So now we just need a small addition to our code to be able to actually add
    shopping list items. To achieve that, we will add one more object to our data
    and call it `newItem`. We'll also add a small method that pushes new item to the
    `items` array. And we'll call this method from the markup page using the `v:on`
    directive used on the HTML input element that will be used for the new item and
    on the button used to click to add a new item.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'So our JavaScript code will look like the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We added a new property to the `data` object called `newItem`. Then we added
    a new section called `methods` to our Vue initialization `options` object and
    added the `addItem` method to this section. All the data properties are accessible
    in the `methods` section via the `this` keyword. Thus, in this method, we just
    get `this.newItem` and push it into the  `this.items` array. Now we must bind
    the call to this method to some user action. As it has already been mentioned,
    we will use the `v-on` directive and apply it to the `enter` keyup on the new
    item input and to the **`Add!`** button click.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'So add the following markup before our list of items:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `v-on` directive attaches an event listener to the elements. The shortcut
    is the `@` sign. So, instead of writing `v-on:keyup="addItem"`, you can write
    `@keyup="addItem"`. You can read more about the `v-on` directive on the official
    documentation site at [http://vuejs.org/api/#v-on](http://vuejs.org/api/#v-on)
    .
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s finalize. The whole code now looks like the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is the JavaScript code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s a link to JSFiddle: [https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)
    .'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue.js in an existing project
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I can feel now that you have seen how easy is to bind the properties of the
    model to the presentation layer and you are already starting to think about how
    it can be used in your existing project. But then you think: hell, no, I need
    to install some things, run `npm install`, change the project''s structure, add
    directives, and change the code.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'And here I can tell you: no! No installs, no npms, just grab the `vue.js` file,
    insert it into your HTML page, and use it. That''s all, no structure changes,
    no architectural decisions, no discussions. Just use it. I will show you how we
    used it at EdEra ( [https://www.ed-era.com](https://www.ed-era.com) ) to include
    a small "check yourself" functionality at the end of a GitBook chapter.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: EdEra is a Ukraine-based online educational project whose aim is to transform
    the whole educational system into something modern, online, interactive, and fun.
    Actually, I am a co-founder and the chief technical officer of this young nice
    project, being responsible for the whole technical part of the thing. So, in EdEra,
    we have some online courses built on top of the open EdX platform ( [https://open.edx.org/](https://open.edx.org/)
    ) and some interactive educational books built on top of the great GitBook framework
    ( [http://www.gitbook.org](http://www.gitbook.org) ). Basically, GitBook is a
    platform based on top of the Node.js technology stack. It allows someone with
    basic knowledge of the markdown language and basic Git commands to write books
    and host them in the GitBook servers. EdEra's books can be found at [http://ed-era.com/books](http://ed-era.com/books) (beware,
    they are all in Ukrainian).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what we have done in our books using Vue.js.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'At some point, I decided to include a small quiz at the end of the chapter
    about personal pronouns in the book that teaches English. Thus, I''ve included
    the `vue.js` JavaScript file, edited the corresponding `.md` file, and included
    the following HTML code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then I added a custom JavaScript file, where I''ve included the following code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can check this code at this GitHub page: [https://github.com/chudaol/ed-era-book-english](https://github.com/chudaol/ed-era-book-english)
    . Here''s a code of a page written in markdown with inserted HTML: [https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md](https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md)
    . And here''s a JavaScript code: [https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js](https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js)
    . You can even clone the repository and try it locally using `gitbook-cli` ( [https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md](https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md)
    ).'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at this code. You have probably already detected the parts
    that you have already seen and even tried:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'The `data` object contains two properties:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `string` property text
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Boolean` property correct
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `checkText` method just grabs the `text` property, compares it with the
    correct text, and assigns the value to the correct value
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `v-on` directive calls the `checkText` method on keyup
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `v-bind` directive binds the class `correct` to the `correct` property
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how the code looks in my IDE:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Vue.js in an existing project](../Images/image00224.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: Using Vue in a markdown-driven project
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'And next is what it looks like in the browser:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Vue.js in an existing project](../Images/image00225.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
- en: Vue.js in action inside the GitBook page
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Vue.js in an existing project](../Images/image00226.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
- en: Vue.js in action inside the GitBook page
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Check it out at [http://english.ed-era.com/2/osobovi_zaimenniki.html](http://english.ed-era.com/2/osobovi_zaimenniki.html)
    .
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Amazing, right? Pretty simple, pretty reactive!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js 2.0!
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing, Vue.js 2.0 was announced ( [https://vuejs.org/2016/04/27/announcing-2.0/](https://vuejs.org/2016/04/27/announcing-2.0/)
    ). Check the following links in this regard:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html](http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/](https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second version of Vue.js has some considerable differences comparing to
    its predecessor, starting from the way that data binding is being handled and
    moving to its API. It uses lightweight virtual DOM implementation for rendering,
    supports server-side rendering, and is faster and leaner.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Vue 2.0 was in an early alpha stage. Do not worry, though.
    All the examples that we will cover in this book are based on the latest stable
    version of Vue 2.0 and are fully compatible with the both the versions.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Projects using Vue.js
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Probably, at this time, you are wondering what projects are out there that are
    built on top of Vue.js, or use it as a part of their codebase. There are a lot
    of nice open source, experimental, and enterprise projects using it. The complete
    and constantly updated list of these projects can be found at [https://github.com/vuejs/awesome-vue#projects-using-vuejs](https://github.com/vuejs/awesome-vue#projects-using-vuejs)
    .
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at some of them.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Grammarly
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Grammarly ( [https://www.grammarly.com/](https://www.grammarly.com/) ) is a
    service that helps you write English correctly. It has several apps, one of them
    is a simple Chrome extension that just checks any text input that you fill in.
    Another one is an online editor that you can use to check big chunks of text.
    This editor is built using Vue.js! The following is a screenshot of this text
    being edited in the online editor of Grammarly:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![Grammarly](../Images/image00227.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'Grammarly: a project that is built on top of Vue.js'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Optimizely
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Optimizely ( [https://www.optimizely.com/](https://www.optimizely.com/) ) is
    a service that helps you test, optimize, and personalize your websites. I''ve
    used the Packt site to create an Optimizely experiment and to check out Vue.js
    in action in this resource. It looks like the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizely](../Images/image00228.jpeg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: 'Optimizely: a project that is built on top of Vue.js'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Hovering around with the mouse gives us the possibility of opening a context
    menu that allows different manipulations with the page data, including the simplest
    one, text editing. Let''s try this one:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizely](../Images/image00229.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: Using Optimizely and watching Vue.js in action
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'The text box is opened. When I type in it, the text in the title is reactively
    changed. We saw and implemented it using Vue.js:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizely](../Images/image00230.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: Using Optimizely and watching Vue.js in action
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: FilterBlend
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FilterBlend ( [https://github.com/ilyashubin/FilterBlend](https://github.com/ilyashubin/FilterBlend)
    ) is an open source playground for the CSS background-blend-mode and filter properties.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: You can load your images and combine blending with filters.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to give FilterBlend a try, you can install it locally:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the repository:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Enter the `FilterBlend` directory:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Install the dependencies:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the project:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Open your browser on `localhost:8000` and play around. You can see that once
    you change something in the menu on the right, it is immediately propagated to
    the images on the left side. All this functionality is achieved using Vue.js.
    Check the code on GitHub.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![FilterBlend](../Images/image00231.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: 'FilterBlend: a project built on top of Vue.js'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: PushSilver
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PushSilver ( [https://pushsilver.com](https://pushsilver.com) ) is a nice and
    simple service for busy people to create simple invoices. It allows creating invoices,
    sending and resending them to the clients, and keeping tracking of them. It was
    created by a developer doing freelance consultancy and being tired of having to
    create invoices each time for each small project. This tool works well and it
    was built using Vue.js:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![PushSilver](../Images/image00232.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: 'PushSilver: invoice managing application built on top of Vue.js'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![PushSilver](../Images/image00233.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: 'PushSilver: invoice managing application built on top of Vue.js'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Book roadmap
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book, like most part of technical books, is organized in such a way that
    you do not need to read it from beginning to end. You can choose the parts that
    interest you the most and skip the rest.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is organized as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: If you are reading this, there's no need to specify what is going on in the
    first chapter.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2](part0027.xhtml#aid-PNV61 "Chapter 2. Fundamentals – Installing
    and Using"), *Fundamentals - Installing and Using,* is pretty theoretical and
    will explain what''s going on behind the scenes of Vue.js and its main parts.
    So, if you are not into theory and want to put your hands into coding, you are
    free to skip this part. In this part, we will also go through the installation
    and setup process.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the third to the eighth chapter, we''ll explore the main features of Vue.js
    while building the application:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Components – Understanding
    and Using"), *Components - Understanding and Using*, we will introduce Vue components
    and apply this knowledge to our application.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 4](part0046.xhtml#aid-1BRPS1 "Chapter 4. Reactivity – Binding Data
    to Your Application"), *Reactivity - Binding Data to Your Application*, we will
    use all the data binding mechanisms provided by Vue.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 5](part0052.xhtml#aid-1HIT82 "Chapter 5. Vuex – Managing State in
    Your Application"), *Vuex - Managing State in Your Application*, we will introduce
    the Vuex state management system and explain how to use it in our applications.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 6](part0061.xhtml#aid-1Q5IA1 "Chapter 6. Plugins – Building Your
    House with Your Own Bricks"), *Plugins - Building Your House with Your Own Bricks*,
    we will learn how to create and use plugins for Vue applications to enrich their
    functionality.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 7](part0065.xhtml#aid-1TVKI1 "Chapter 7. Testing – Time to Test
    What We Have Done So Far!"), *Testing - Time to Test What We Have Done so Far!*,
    we will cover and explore custom directives of Vue.js and create some in our application.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 8](part0073.xhtml#aid-25JP21 "Chapter 8. Deploying – Time to Go
    Live!"), *Deploying - Time to Go Live!*, we will learn how to test and deploy
    JavaScript application written in Vue.js.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 9](part0078.xhtml#aid-2ACBS1 "Chapter 9. What Is Next?"), *What
    Is Next?*, we'll summarize what we've learned and see what we can do next.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's manage time!
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point of time, I already know that you are so, so, so enthusiastic with
    this book that you want to read it to the end without stopping. But this is not
    right. We should manage our time and give us some time to work and some time to
    rest. Let's create a small application that implements a Pomodoro technique timer
    so that it can help us in our working time management.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Pomodoro** technique is a time management technique named after the kitchen
    tomato timer (in fact, Pomodoro means tomato in Italian). This technique consists
    of breaking down the working time into small intervals separated by short breaks.
    Read more about the Pomodoro technique on the official site: [http://pomodorotechnique.com/](http://pomodorotechnique.com/)
    .'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Thus, our goal is very simple. We just have to create a very simple time counter
    that will decrement untill the end of the working interval and then restart and
    decrement till the end of the resting time and so on.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Let's do that!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'We will introduce two Vue data variables, `minute` and `second`, which will
    be displayed on our page. The main method on each second will decrement `second`;
    it will decrement `minute` when `second` becomes `0`; and when both `minute` and
    `second` variables come to `0`, the application should toggle between working
    and resting interval:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'Our JavaScript code will look like the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In our HTML code, let''s create two placeholders for `minute` and `second`,
    and a start button for our Pomodoro timer:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, we are using Bootstrap for the styling, so our Pomodoro timer looks
    like the following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s manage time!](../Images/image00234.jpeg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: Countdown timer built with Vue.js
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Pomodoro is nice, but it has some problems:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we don't know which state is being toggled. We don't know if we
    should work or rest. Let's introduce a title that will change each time the Pomodoro
    state is changed.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another problem is inconsistent display of minutes and seconds numbers. For
    example, for 24 minutes and 5 seconds, we would like to see 24:05 and not 24:5\.
    Let's fix it introducing computed values in our application data and displaying
    them instead of normal values.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yet another problem is that our start button can be clicked over and over again,
    which creates a timer each time it's clicked. Try to click it several times and
    see how crazy your timer goes. Let's fix it by introducing start, pause, and stop
    buttons, apply application states to them, and disable buttons to the state accordingly.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggle the title by using computed properties
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by fixing the first problem by creating computed property title
    and using it in our markup.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Computed properties** are the properties inside the `data` object that allow
    us to avoid blowing up the template with some extra logic. You can find more information
    about computed properties on the official documentation site: [http://vuejs.org/guide/computed.html](http://vuejs.org/guide/computed.html)
    .'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `computed` section in the Vue `options` object and add the property
    `title` there:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And now just use the following property as it was a normal Vue `data` property
    in your markup:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And voilà! Now we have a title that changes each time the Pomodoro state is
    being toggled:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![Toggle the title by using computed properties](../Images/image00235.jpeg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: Automatic change of the title based on the state of the timer
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Nice, isn't it?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Left-pad time values using computed properties
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s apply the same logic for left padding our `minute` and `second`
    numbers. Let''s add two computed properties, `min` and `sec`, in our `computed`
    section in the `data` options and apply the simple algorithm to pad the numbers
    with `0` on the left. Of course, we could use a famous left-pad project ( [https://github.com/stevemao/left-pad](https://github.com/stevemao/left-pad)
    ), but to keep things simple and not to break the whole Internet ( [http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)
    ), let''s apply a simple logic of our own:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And let''s use these properties instead of `minute` and `second` in our HTML
    code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Refresh a page and check how beautiful our numbers are now:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '![Left-pad time values using computed properties](../Images/image00236.jpeg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
- en: Left padding using computed properties in Vue.js
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Keep state with start, pause, and stop buttons
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, to fix the third problem, let''s introduce three application states, `started`,
    `paused`, and `stopped`, and let''s have three methods that would allow us to
    permute over these states. We already have the method that starts the application,
    so we just add the logic there to change the state to `started`. We also add two
    additional methods, `pause` and `stop`, which would pause the timer and change
    to the corresponding application state:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And, let''s add two buttons to our HTML code and add the `click` listeners
    that call the corresponding methods:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now our application looks nice and allows us to start, pause, and stop the
    timer:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![Keep state with start, pause, and stop buttons](../Images/image00237.jpeg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: Toggling start, stop, and pause buttons according to the application state
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Check what the whole code looks like in JSFiddle at  [https://jsfiddle.net/chudaol/b6vmtzq1/1/](https://jsfiddle.net/chudaol/b6vmtzq1/1/).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'After so much work and so many of new terms and knowledge, you certainly deserve
    a kitten! I also love kittens, so here you have a random kitten from the awesome
    site [http://thecatapi.com/](http://thecatapi.com/) :'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '![Keep state with start, pause, and stop buttons](../Images/image00238.jpeg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
- en: Exercise
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, I would like to propose a small exercise. The Pomodoro
    timer that we built earlier in the chapters is, without any doubt, great, but
    it still lacks some nice features. A really nice thing that it could provide would
    be showing random kittens from    [http://thecatapi.com/](http://thecatapi.com/)
    during resting time. Can you implement this? Of course you can! But please do
    not confuse resting with working time! I am almost sure that your project manager
    will not like it much if you stare at kittens instead of working.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this exercise can be found in [Appendix](part0083.xhtml#aid-2F4UM1
    "Chapter 10. Solutions to Exercises"),* Solutions to Exercises*.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am very glad that you have reached this point, this means that you already
    know what Vue.js is, and if someone asks you whether it is a tool, a library,
    or a framework, you certainly will find an answer. You also know how to start
    an application using Vue.js and you know how to use Vue's features in an already
    existing project. You played around with some really nice projects that are written
    in Vue.js and you started developing some of your own! Now you do not just go
    shopping, now you go shopping with a shopping list created by you using Vue.js!
    Now you don't need to steal your tomato timer from the kitchen to use it as a
    Pomodoro timer while working; you can use your own digital Pomodoro timer made
    with Vue.js. And, last but not the least, now you can insert random kittens in
    your JavaScript application also using Vue.js.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the behind the scenes of Vue, how and why
    does it work, and the architectural patterns it uses. Each of the concepts will
    be wrapped up with an example to demonstrate it. Then we will be ready to put
    our hands deep into the code and to improve our applications taking them to the
    state of awesomeness.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
