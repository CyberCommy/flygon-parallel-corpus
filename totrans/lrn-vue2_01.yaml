- en: Chapter 1. Going Shopping with Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Vue.js is a JavaScript framework for building astonishing web applications.
    Vue.js is a JavaScript library for creating web interfaces. Vue.js is a tool that
    leverages the use of MVVM architecture."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simplified JavaScript Jargon suggests that Vue.js is a JavaScript library for
    creating user interfaces (Views) based on underlying data models ( [http://jargon.js.org/_glossary/VUEJS.md](http://jargon.js.org/_glossary/VUEJS.md)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: The official Vue.js website ( [https://vuejs.org/](https://vuejs.org/) ) just
    some months ago stated that Vue.js were reactive components for modern web interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '![Going Shopping with Vue.js](../Images/image00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now it states that Vue.js is a progressive JavaScript framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Going Shopping with Vue.js](../Images/image00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So what is Vue.js after all? Framework? Tool? Library? Should it be used for
    building full-stack web applications or just for adding some special functionality?
    Should I switch from my favorite framework to it? If yes, why? Can I use it alongside
    other tools in my project? What advantages it might bring?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will try to find the answers to all these questions. We
    will slightly touch Vue.js and use it within some small and simple examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn what Vue.js is, its important parts, and its history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn what projects use Vue.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a simple shopping list using Vue.js and compare the implementation to
    the jQuery implementation of the same application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a simple Pomodoro timer using Vue.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enjoy a small and simple exercise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buzzwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There will be lots of buzzwords, abbreviations, and other hipster combinations
    of letters in this book. Please do not be afraid of them. I can tell you more
    but, for the most part of things you need to do using Vue.js or any other framework,
    you do not need to know them all by heart! But, in any case, let us leave the
    thesaurus here so that you become confused with terminology at any point of the
    book, you can come back here and have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application state**: This is a global centralized state of the application.
    The data in this state is initialized when the application is started. This data
    can be accessed by any application''s component; however, it cannot be changed
    easily by them. Each item of the state has an attached mutation that can be dispatched
    on special events occurring inside the application''s components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bootstrap**: This is a project that provides a set of styles and JavaScript
    tools for developing a responsive and nice application without having to think
    a lot about CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content Distribution Network** (**CDN**): This is a special server whose
    aim is to deliver data to the users with high availability and high performance.
    People and companies who develop frameworks like to distribute them via CDNs because
    they allow them just to point out the CDN''s URL in the installation instructions.
    Vue.js is hosted in npmcdn ( [https://npmcdn.com/](https://npmcdn.com/) ), which
    is a reliable and global network for the things that are published to the npm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Components**: These are the pieces of the application with their own data
    and View that can be reused through the application, acting as a brick from which
    the house is being built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cascading Style Sheets** (**CSS**): This is a set of styles to apply to the
    HTML document to make it nice and beautiful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Declarative Views**: These are the Views that provide a way of direct data
    binding between plain JavaScript data models and the representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directives**: These are special HTML elements attributes in Vue.js that allow
    data binding in different ways.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document Object Model** (**DOM**): This is a convention for representing
    nodes in markup languages such as HTML, XML, and XHTML. The nodes of the documents
    are organized into a DOM tree. When someone says interacting with DOM, it is just
    their fancy way of saying interacting with HTML elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**npm**: This is a package manager for JavaScript and allows searching, installing,
    and managing JavaScript packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Markdown**: This is a human-friendly syntax that allows web writers to write
    their text without worrying about styles and HTML tags. Markdown files have a `.md`
    extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model View ViewModel** (**MVVM**): This is an architectural pattern whose
    central point is a ViewModel that acts as a bridge between the View and the data
    model, allowing the data flow between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model View Controller** (**MVC**): This is an architectural pattern. It allows
    separating Views from Models and from the way that information flows from Views
    to Models, and vice versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**One-way data binding**: This is the type of data binding where the changes
    in the data model are automatically propagated to the View layer, but not vice
    versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rapid prototyping**: In the Web, this is a technique of easily and rapidly
    building the mockups of the user interface, including some basic user interaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reactivity**: In the Web, this is actually the immediate propagation of any
    changes of data to the View layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two-way data binding**: This is the type of data binding where the changes
    in the data model are automatically propagated to the View layer, and the changes
    that happen in the View layer are immediately reflected in the data model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User interface** (**UI**): This is a set of visual components that allow
    the user to communicate with the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vuex**: This is an architecture for Vue applications and allows simple management
    of the application state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue.js history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When, Evan You, Vue.js creator ( [http://evanyou.me/](http://evanyou.me/) ),
    was working at Google Creative Labs on one of the projects, they needed to fast
    prototype a rather big UI interface. Writing a lot of repeated HTML was clearly
    time- and resource-consuming, and that's why Evan started looking for some already
    existing tool for this purpose. To his surprise, he discovered that there was
    no tool, library, or framework that could fit exactly into the purpose of rapid
    prototyping! At that time, Angular was widely used, React.js was just starting,
    and frameworks such as Backbone.js were used for large-scale applications with
    MVC architecture. For the kind of project that needed something really flexible
    and lightweight just for quick UI prototyping, neither of these complex frameworks
    were adequate.
  prefs: []
  type: TYPE_NORMAL
- en: When you realize that something cool does not exist and you are able to create
    it—*just do it*!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vue.js was born as a tool for rapid prototyping. Now it can be used to build
    complex scalable reactive web applications.
  prefs: []
  type: TYPE_NORMAL
- en: That was what Evan did. That is how he came to the idea of creating a library
    that would help in rapid prototyping by offering an easy and flexible way of reactive
    data binding and reusable components.
  prefs: []
  type: TYPE_NORMAL
- en: Like every good library, Vue.js has been growing and evolving, thus providing
    more features than it was promising from the beginning. Currently, it provides
    an easy way of attaching and creating plugins, writing and using mixins, and overall
    adding custom behavior. Vue can be used in such a flexible way and is so nonopinionated
    of the application structuring that it definitely can be considered as a framework
    capable of supporting the end-to-end building of complex web applications.
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing about Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js allows you to simply bind your data models to the representation layer.
    It also allows you to easily reuse components throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to create special models or collections and to register events
    object in there. You don't need to follow some special syntax. You don't need
    to install any of never-ending dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Your models are plain JavaScript objects. They are being bound to whatever you
    want in your Views (text, input text, classes, attributes, and so on), and it
    just works.
  prefs: []
  type: TYPE_NORMAL
- en: You can simply add the `vue.js` file into your project and use it. Alternatively,
    you can use `vue-cli` with Webpack and Browserify family, which not only bootstraps
    the whole project but also supports hot reloading and provides developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: You can separate the View layer from styles and JavaScript logic or you can
    put it alltogether into the same Vue file and build your components' structure
    and logic in the same place. There is plugin support for all modern and commonly
    used IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: You can use whatever preprocessors you want, and you can use ES2015\. You can
    use it alongside your favorite framework you have been developing in, or you can
    use it itself. You can use it just to add a small functionality, or you can use
    the whole Vue ecosystem to build complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check how it compares to other frameworks, such as Angular or
    React, then please visit  [http://vuejs.org/guide/comparison.html](http://vuejs.org/guide/comparison.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check out all the amazing things about Vue.js, then you are more
    than welcome to visit  [https://github.com/vuejs/awesome-vue](https://github.com/vuejs/awesome-vue)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Let's go shopping!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I don''t know how but I can feel that your weekend is close and that you are
    starting to think about going shopping to buy the needed groceries for the next
    week. Unless you are a genius who is able to maintain the whole list in your head
    or you are a modest person who does not need so much, you probably make a shopping
    list before going shopping. Maybe you even use some app for that. Now, I ask you:
    why not use your own app? How do you feel about creating and designing it? Let''s
    do that! Let''s create our own shopping list application. Let''s start by creating
    a rapid prototype for it. It''s a really easy task—build an interactive prototype
    for the shopping list.'
  prefs: []
  type: TYPE_NORMAL
- en: It should show the list and allow us to add and remove the items. Actually,
    it's very similar to a ToDo list. Let's start doing it using classic HTML + CSS
    + JS + jQuery approach. We will also use the Bootstrap framework ( [http://getbootstrap.com/](http://getbootstrap.com/)
    ) to make things a little bit more beautiful without having to write extensive
    CSS code. (Yes, because our book is not about CSS and because making things with
    Bootstrap is so crazily easy!)
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a shopping list using jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Probably, your code will end up looking as something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the JavaScript/jQuery code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**`Downloading the example code`** Detailed steps to download the code bundle
    are mentioned in the [Preface](part0010.xhtml#aid-9H5K1 "Preface") of this book.
    The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Learning-Vue.js-2](https://github.com/PacktPublishing/Learning-Vue.js-2).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the page in a browser, you will probably see something like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing a shopping list using jQuery](../Images/image00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Shopping list implementation using the HTML + CSS + jQuery approach
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at JSFiddle at [https://jsfiddle.net/chudaol/u5pcnLw9/2/](https://jsfiddle.net/chudaol/u5pcnLw9/2/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it is a very basic piece of HTML code that contains an unordered
    list of elements, where each element is presented with a checkbox and a text—an
    input for the user text and the **`Add!`** button. Each time the **`Add!`** button
    is clicked, the content of the text input is transformed into a list entry and
    appended to the list. When the checkbox of any item is clicked, the state of an
    entry is toggled from to **`to buy`** (unchecked) to **`bought`** (checked).
  prefs: []
  type: TYPE_NORMAL
- en: Let's also add a feature that allows us to change the title of the list (it
    might become useful if we end up implementing multiple shopping lists in the application).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we will end up with some extra markup and some more jQuery event listeners
    and handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Check JSFiddle at [https://jsfiddle.net/chudaol/47u38fvh/3/](https://jsfiddle.net/chudaol/47u38fvh/3/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a shopping list using Vue.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This was a very simple example. Let''s try to implement it step-by-step using
    Vue.js. There are plenty of ways of including `vue.js` into your project, but
    in this chapter, we will include it just by adding the JavaScript Vue file from
    the **CDN**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: So, let's start by rendering a list of elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the HTML file and add the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open it in the browser. You will see that the list is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing a shopping list using Vue.js](../Images/image00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Shopping list implemented using Vue.js
  prefs: []
  type: TYPE_NORMAL
- en: Let's analyze this example. The Vue application code starts with the new `Vue`
    keyword. How do we bind the piece of markup to the application data? We pass to
    the `Vue` instance the DOM element that must be bound to it. Any other markup
    in the page will not be affected and will not recognize Vue's magic.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our markup is wrapped into the `#app` element and is passed
    as a first argument in the map of `Vue` options. The `data` argument contains
    the objects that are being used inside the markup using double curly brackets
    (`{{}}`) . You will probably find this annotation very easy to understand if you
    are familiar with templating preprocessors (for example, handlebars; for more
    information, visit [http://handlebarsjs.com/](http://handlebarsjs.com/) ).
  prefs: []
  type: TYPE_NORMAL
- en: So what?—you're probably exclaiming. What are you going to teach me? How to
    use templating preprocessors? Thank you very much, but I would be better off having
    some beers and watching football.
  prefs: []
  type: TYPE_NORMAL
- en: Stop, dear reader, don't go, just grab your beer and let's continue our example.
    You'll see that it'll be lots of fun!
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing data binding using developer tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see data binding in action. Open your browser''s developer tools, find
    your JavaScript code, and add a breakpoint at the start of the script. Now analyze
    how the data objects look before and after the Vue application is initialized.
    You see, it changed a lot. Now the `data` object is prepared to the reactive data
    binding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data binding using developer tools](../Images/image00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The data object before and after the Vue object initialization
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if we change the `title` property of the `data` object from the developer
    tools console (we can do it because our `data` is a global object), it will be
    reflected automatically in the title on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing data binding using developer tools](../Images/image00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Data binding: changing object properties affects the View immediately'
  prefs: []
  type: TYPE_NORMAL
- en: Bringing user input to the data with two-way binding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, in our example, we were able to bring the data from the plain JavaScript
    data model to the page. We provided it a sort of a flight from the application
    code to the page. Don't you think that it would be nice if we could offer a two-way
    flight to our data?
  prefs: []
  type: TYPE_NORMAL
- en: Let's see now how we can achieve two-way data binding and how we can change
    the value of a `data` property from the page.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the HTML markup for the title, change the input from the first jQuery example,
    and add the attribute `v-model="title"` to the `input` element.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Have you already heard about directives in Vue.js? Congratulations, you''ve
    just used one! Actually, the `v-model` attribute is a directive of Vue.js that
    provides two-way data binding. You can read more about it at the official Vue
    page: [http://vuejs.org/api/#v-model](http://vuejs.org/api/#v-model) .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the HTML code for our shopping list application code looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And that's it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page now and modify the input. You''ll see the title automatically
    being updated as you type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bringing user input to the data with two-way binding](../Images/image00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Data binding: changing the text bound to the model''s property affects the
    text bound to the same property immediately'
  prefs: []
  type: TYPE_NORMAL
- en: So, everything is nice; however, this example just grabs the two item elements
    and renders them as list items. We want it to render the list of items independently
    of the list size.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the list of items using the v-for directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, we need some mechanism to iterate through the `items` array and to render
    each item in our `<ul>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, Vue.js provides us with a nice directive for iterating through
    iterative JavaScript data structures. It is called `v-for`. We will use it in
    the list item `<li>` element. Modify the markup of the list so that it looks like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will learn other nice directives such as `v-if`, `v-else`, `v-show`, `v-on`,
    `v-bind`, and so on in this book, so keep reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page and have a look. The page remains the same. Now, try to push
    an item into the array of `items` from the developer tools console. Try to pop
    them as well. You will not be surprised to see that the `items` array manipulations
    are immediately reflected on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering the list of items using the v-for directive](../Images/image00223.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Data binding: changing an array affects lists based on it immediately'
  prefs: []
  type: TYPE_NORMAL
- en: So, now we have a list of items that is rendered on a page with just one line
    of the markup. However, we still need these items to have a checkbox that allows
    us to check the already bought items or uncheck them when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Check and uncheck shopping list items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To achieve this behavior, let's slightly modify our `items` array by changing
    our string items and transforming them into the objects with two properties, `text`
    and `checked` (to reflect the state), and let's modify the markup to add a checkbox
    to each item.
  prefs: []
  type: TYPE_NORMAL
- en: 'So our JavaScript code for the data declaration will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And our list markup will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Refresh the page and check that the `checked` property of the `items` checkbox,
    and the removed class of each list item, `<li>`, is bound to the `checked` Boolean
    state of the items. Play around and try to click checkboxes to see what happens.
    Isn't it nice that just with two directives we are able to propagate the state
    of the items and change the class of the corresponding `<li>` HTML element?
  prefs: []
  type: TYPE_NORMAL
- en: Adding new shopping list items using the v-on directive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So now we just need a small addition to our code to be able to actually add
    shopping list items. To achieve that, we will add one more object to our data
    and call it `newItem`. We'll also add a small method that pushes new item to the
    `items` array. And we'll call this method from the markup page using the `v:on`
    directive used on the HTML input element that will be used for the new item and
    on the button used to click to add a new item.
  prefs: []
  type: TYPE_NORMAL
- en: 'So our JavaScript code will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We added a new property to the `data` object called `newItem`. Then we added
    a new section called `methods` to our Vue initialization `options` object and
    added the `addItem` method to this section. All the data properties are accessible
    in the `methods` section via the `this` keyword. Thus, in this method, we just
    get `this.newItem` and push it into the  `this.items` array. Now we must bind
    the call to this method to some user action. As it has already been mentioned,
    we will use the `v-on` directive and apply it to the `enter` keyup on the new
    item input and to the **`Add!`** button click.
  prefs: []
  type: TYPE_NORMAL
- en: 'So add the following markup before our list of items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `v-on` directive attaches an event listener to the elements. The shortcut
    is the `@` sign. So, instead of writing `v-on:keyup="addItem"`, you can write
    `@keyup="addItem"`. You can read more about the `v-on` directive on the official
    documentation site at [http://vuejs.org/api/#v-on](http://vuejs.org/api/#v-on)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s finalize. The whole code now looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a link to JSFiddle: [https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Using Vue.js in an existing project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I can feel now that you have seen how easy is to bind the properties of the
    model to the presentation layer and you are already starting to think about how
    it can be used in your existing project. But then you think: hell, no, I need
    to install some things, run `npm install`, change the project''s structure, add
    directives, and change the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And here I can tell you: no! No installs, no npms, just grab the `vue.js` file,
    insert it into your HTML page, and use it. That''s all, no structure changes,
    no architectural decisions, no discussions. Just use it. I will show you how we
    used it at EdEra ( [https://www.ed-era.com](https://www.ed-era.com) ) to include
    a small "check yourself" functionality at the end of a GitBook chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: EdEra is a Ukraine-based online educational project whose aim is to transform
    the whole educational system into something modern, online, interactive, and fun.
    Actually, I am a co-founder and the chief technical officer of this young nice
    project, being responsible for the whole technical part of the thing. So, in EdEra,
    we have some online courses built on top of the open EdX platform ( [https://open.edx.org/](https://open.edx.org/)
    ) and some interactive educational books built on top of the great GitBook framework
    ( [http://www.gitbook.org](http://www.gitbook.org) ). Basically, GitBook is a
    platform based on top of the Node.js technology stack. It allows someone with
    basic knowledge of the markdown language and basic Git commands to write books
    and host them in the GitBook servers. EdEra's books can be found at [http://ed-era.com/books](http://ed-era.com/books) (beware,
    they are all in Ukrainian).
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what we have done in our books using Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'At some point, I decided to include a small quiz at the end of the chapter
    about personal pronouns in the book that teaches English. Thus, I''ve included
    the `vue.js` JavaScript file, edited the corresponding `.md` file, and included
    the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then I added a custom JavaScript file, where I''ve included the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can check this code at this GitHub page: [https://github.com/chudaol/ed-era-book-english](https://github.com/chudaol/ed-era-book-english)
    . Here''s a code of a page written in markdown with inserted HTML: [https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md](https://github.com/chudaol/ed-era-book-english/blob/master/2/osobovi_zaimenniki.md)
    . And here''s a JavaScript code: [https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js](https://github.com/chudaol/ed-era-book-english/blob/master/custom/js/quiz-vue.js)
    . You can even clone the repository and try it locally using `gitbook-cli` ( [https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md](https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md)
    ).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at this code. You have probably already detected the parts
    that you have already seen and even tried:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `data` object contains two properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `string` property text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Boolean` property correct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `checkText` method just grabs the `text` property, compares it with the
    correct text, and assigns the value to the correct value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `v-on` directive calls the `checkText` method on keyup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `v-bind` directive binds the class `correct` to the `correct` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how the code looks in my IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Vue.js in an existing project](../Images/image00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using Vue in a markdown-driven project
  prefs: []
  type: TYPE_NORMAL
- en: 'And next is what it looks like in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Vue.js in an existing project](../Images/image00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Vue.js in action inside the GitBook page
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Vue.js in an existing project](../Images/image00226.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Vue.js in action inside the GitBook page
  prefs: []
  type: TYPE_NORMAL
- en: Check it out at [http://english.ed-era.com/2/osobovi_zaimenniki.html](http://english.ed-era.com/2/osobovi_zaimenniki.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Amazing, right? Pretty simple, pretty reactive!
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js 2.0!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of writing, Vue.js 2.0 was announced ( [https://vuejs.org/2016/04/27/announcing-2.0/](https://vuejs.org/2016/04/27/announcing-2.0/)
    ). Check the following links in this regard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html](http://www.infoworld.com/article/3063615/javascript/vuejs-lead-our-javascript-framework-is-faster-than-react.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/](https://www.reddit.com/r/vuejs/comments/4gq2r1/announcing_vuejs_20/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second version of Vue.js has some considerable differences comparing to
    its predecessor, starting from the way that data binding is being handled and
    moving to its API. It uses lightweight virtual DOM implementation for rendering,
    supports server-side rendering, and is faster and leaner.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Vue 2.0 was in an early alpha stage. Do not worry, though.
    All the examples that we will cover in this book are based on the latest stable
    version of Vue 2.0 and are fully compatible with the both the versions.
  prefs: []
  type: TYPE_NORMAL
- en: Projects using Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Probably, at this time, you are wondering what projects are out there that are
    built on top of Vue.js, or use it as a part of their codebase. There are a lot
    of nice open source, experimental, and enterprise projects using it. The complete
    and constantly updated list of these projects can be found at [https://github.com/vuejs/awesome-vue#projects-using-vuejs](https://github.com/vuejs/awesome-vue#projects-using-vuejs)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Grammarly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Grammarly ( [https://www.grammarly.com/](https://www.grammarly.com/) ) is a
    service that helps you write English correctly. It has several apps, one of them
    is a simple Chrome extension that just checks any text input that you fill in.
    Another one is an online editor that you can use to check big chunks of text.
    This editor is built using Vue.js! The following is a screenshot of this text
    being edited in the online editor of Grammarly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Grammarly](../Images/image00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Grammarly: a project that is built on top of Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizely
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Optimizely ( [https://www.optimizely.com/](https://www.optimizely.com/) ) is
    a service that helps you test, optimize, and personalize your websites. I''ve
    used the Packt site to create an Optimizely experiment and to check out Vue.js
    in action in this resource. It looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizely](../Images/image00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Optimizely: a project that is built on top of Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hovering around with the mouse gives us the possibility of opening a context
    menu that allows different manipulations with the page data, including the simplest
    one, text editing. Let''s try this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizely](../Images/image00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using Optimizely and watching Vue.js in action
  prefs: []
  type: TYPE_NORMAL
- en: 'The text box is opened. When I type in it, the text in the title is reactively
    changed. We saw and implemented it using Vue.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizely](../Images/image00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using Optimizely and watching Vue.js in action
  prefs: []
  type: TYPE_NORMAL
- en: FilterBlend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FilterBlend ( [https://github.com/ilyashubin/FilterBlend](https://github.com/ilyashubin/FilterBlend)
    ) is an open source playground for the CSS background-blend-mode and filter properties.
  prefs: []
  type: TYPE_NORMAL
- en: You can load your images and combine blending with filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to give FilterBlend a try, you can install it locally:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the `FilterBlend` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Open your browser on `localhost:8000` and play around. You can see that once
    you change something in the menu on the right, it is immediately propagated to
    the images on the left side. All this functionality is achieved using Vue.js.
    Check the code on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '![FilterBlend](../Images/image00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'FilterBlend: a project built on top of Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: PushSilver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PushSilver ( [https://pushsilver.com](https://pushsilver.com) ) is a nice and
    simple service for busy people to create simple invoices. It allows creating invoices,
    sending and resending them to the clients, and keeping tracking of them. It was
    created by a developer doing freelance consultancy and being tired of having to
    create invoices each time for each small project. This tool works well and it
    was built using Vue.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PushSilver](../Images/image00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'PushSilver: invoice managing application built on top of Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: '![PushSilver](../Images/image00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'PushSilver: invoice managing application built on top of Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: Book roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book, like most part of technical books, is organized in such a way that
    you do not need to read it from beginning to end. You can choose the parts that
    interest you the most and skip the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is organized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are reading this, there's no need to specify what is going on in the
    first chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2](part0027.xhtml#aid-PNV61 "Chapter 2. Fundamentals – Installing
    and Using"), *Fundamentals - Installing and Using,* is pretty theoretical and
    will explain what''s going on behind the scenes of Vue.js and its main parts.
    So, if you are not into theory and want to put your hands into coding, you are
    free to skip this part. In this part, we will also go through the installation
    and setup process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the third to the eighth chapter, we''ll explore the main features of Vue.js
    while building the application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Components – Understanding
    and Using"), *Components - Understanding and Using*, we will introduce Vue components
    and apply this knowledge to our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 4](part0046.xhtml#aid-1BRPS1 "Chapter 4. Reactivity – Binding Data
    to Your Application"), *Reactivity - Binding Data to Your Application*, we will
    use all the data binding mechanisms provided by Vue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 5](part0052.xhtml#aid-1HIT82 "Chapter 5. Vuex – Managing State in
    Your Application"), *Vuex - Managing State in Your Application*, we will introduce
    the Vuex state management system and explain how to use it in our applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 6](part0061.xhtml#aid-1Q5IA1 "Chapter 6. Plugins – Building Your
    House with Your Own Bricks"), *Plugins - Building Your House with Your Own Bricks*,
    we will learn how to create and use plugins for Vue applications to enrich their
    functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 7](part0065.xhtml#aid-1TVKI1 "Chapter 7. Testing – Time to Test
    What We Have Done So Far!"), *Testing - Time to Test What We Have Done so Far!*,
    we will cover and explore custom directives of Vue.js and create some in our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 8](part0073.xhtml#aid-25JP21 "Chapter 8. Deploying – Time to Go
    Live!"), *Deploying - Time to Go Live!*, we will learn how to test and deploy
    JavaScript application written in Vue.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 9](part0078.xhtml#aid-2ACBS1 "Chapter 9. What Is Next?"), *What
    Is Next?*, we'll summarize what we've learned and see what we can do next.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's manage time!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point of time, I already know that you are so, so, so enthusiastic with
    this book that you want to read it to the end without stopping. But this is not
    right. We should manage our time and give us some time to work and some time to
    rest. Let's create a small application that implements a Pomodoro technique timer
    so that it can help us in our working time management.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Pomodoro** technique is a time management technique named after the kitchen
    tomato timer (in fact, Pomodoro means tomato in Italian). This technique consists
    of breaking down the working time into small intervals separated by short breaks.
    Read more about the Pomodoro technique on the official site: [http://pomodorotechnique.com/](http://pomodorotechnique.com/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, our goal is very simple. We just have to create a very simple time counter
    that will decrement untill the end of the working interval and then restart and
    decrement till the end of the resting time and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's do that!
  prefs: []
  type: TYPE_NORMAL
- en: 'We will introduce two Vue data variables, `minute` and `second`, which will
    be displayed on our page. The main method on each second will decrement `second`;
    it will decrement `minute` when `second` becomes `0`; and when both `minute` and
    `second` variables come to `0`, the application should toggle between working
    and resting interval:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our JavaScript code will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In our HTML code, let''s create two placeholders for `minute` and `second`,
    and a start button for our Pomodoro timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we are using Bootstrap for the styling, so our Pomodoro timer looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s manage time!](../Images/image00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Countdown timer built with Vue.js
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Pomodoro is nice, but it has some problems:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we don't know which state is being toggled. We don't know if we
    should work or rest. Let's introduce a title that will change each time the Pomodoro
    state is changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another problem is inconsistent display of minutes and seconds numbers. For
    example, for 24 minutes and 5 seconds, we would like to see 24:05 and not 24:5\.
    Let's fix it introducing computed values in our application data and displaying
    them instead of normal values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yet another problem is that our start button can be clicked over and over again,
    which creates a timer each time it's clicked. Try to click it several times and
    see how crazy your timer goes. Let's fix it by introducing start, pause, and stop
    buttons, apply application states to them, and disable buttons to the state accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggle the title by using computed properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by fixing the first problem by creating computed property title
    and using it in our markup.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Computed properties** are the properties inside the `data` object that allow
    us to avoid blowing up the template with some extra logic. You can find more information
    about computed properties on the official documentation site: [http://vuejs.org/guide/computed.html](http://vuejs.org/guide/computed.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `computed` section in the Vue `options` object and add the property
    `title` there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And now just use the following property as it was a normal Vue `data` property
    in your markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And voilà! Now we have a title that changes each time the Pomodoro state is
    being toggled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toggle the title by using computed properties](../Images/image00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Automatic change of the title based on the state of the timer
  prefs: []
  type: TYPE_NORMAL
- en: Nice, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Left-pad time values using computed properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s apply the same logic for left padding our `minute` and `second`
    numbers. Let''s add two computed properties, `min` and `sec`, in our `computed`
    section in the `data` options and apply the simple algorithm to pad the numbers
    with `0` on the left. Of course, we could use a famous left-pad project ( [https://github.com/stevemao/left-pad](https://github.com/stevemao/left-pad)
    ), but to keep things simple and not to break the whole Internet ( [http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/](http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/)
    ), let''s apply a simple logic of our own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s use these properties instead of `minute` and `second` in our HTML
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh a page and check how beautiful our numbers are now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Left-pad time values using computed properties](../Images/image00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Left padding using computed properties in Vue.js
  prefs: []
  type: TYPE_NORMAL
- en: Keep state with start, pause, and stop buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, to fix the third problem, let''s introduce three application states, `started`,
    `paused`, and `stopped`, and let''s have three methods that would allow us to
    permute over these states. We already have the method that starts the application,
    so we just add the logic there to change the state to `started`. We also add two
    additional methods, `pause` and `stop`, which would pause the timer and change
    to the corresponding application state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And, let''s add two buttons to our HTML code and add the `click` listeners
    that call the corresponding methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our application looks nice and allows us to start, pause, and stop the
    timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keep state with start, pause, and stop buttons](../Images/image00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Toggling start, stop, and pause buttons according to the application state
  prefs: []
  type: TYPE_NORMAL
- en: Check what the whole code looks like in JSFiddle at  [https://jsfiddle.net/chudaol/b6vmtzq1/1/](https://jsfiddle.net/chudaol/b6vmtzq1/1/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After so much work and so many of new terms and knowledge, you certainly deserve
    a kitten! I also love kittens, so here you have a random kitten from the awesome
    site [http://thecatapi.com/](http://thecatapi.com/) :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keep state with start, pause, and stop buttons](../Images/image00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, I would like to propose a small exercise. The Pomodoro
    timer that we built earlier in the chapters is, without any doubt, great, but
    it still lacks some nice features. A really nice thing that it could provide would
    be showing random kittens from    [http://thecatapi.com/](http://thecatapi.com/)
    during resting time. Can you implement this? Of course you can! But please do
    not confuse resting with working time! I am almost sure that your project manager
    will not like it much if you stare at kittens instead of working.
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this exercise can be found in [Appendix](part0083.xhtml#aid-2F4UM1
    "Chapter 10. Solutions to Exercises"),* Solutions to Exercises*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am very glad that you have reached this point, this means that you already
    know what Vue.js is, and if someone asks you whether it is a tool, a library,
    or a framework, you certainly will find an answer. You also know how to start
    an application using Vue.js and you know how to use Vue's features in an already
    existing project. You played around with some really nice projects that are written
    in Vue.js and you started developing some of your own! Now you do not just go
    shopping, now you go shopping with a shopping list created by you using Vue.js!
    Now you don't need to steal your tomato timer from the kitchen to use it as a
    Pomodoro timer while working; you can use your own digital Pomodoro timer made
    with Vue.js. And, last but not the least, now you can insert random kittens in
    your JavaScript application also using Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the behind the scenes of Vue, how and why
    does it work, and the architectural patterns it uses. Each of the concepts will
    be wrapped up with an example to demonstrate it. Then we will be ready to put
    our hands deep into the code and to improve our applications taking them to the
    state of awesomeness.
  prefs: []
  type: TYPE_NORMAL
