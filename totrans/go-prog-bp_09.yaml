- en: Appendix A. Good Practices for a Stable Go Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Go code is a fun and enjoyable experience where compile-time errors—rather
    than being a pain—actually guide you to write robust, high-quality code. However,
    every now and again, you will encounter environmental issues that start to get
    in the way and break your flow. While you can usually resolve these issues after
    some searching and a little tweaking, setting up your development environment
    correctly goes a long way in reducing problems, allowing you to focus on building
    useful applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to install Go from scratch on a new machine and
    discuss some of the environmental options we have and the impact they might have
    in the future. We will also consider how collaboration might influence some of
    our decisions, as well as what impact open sourcing our packages might have.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we are going to:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the Go source code and build it natively on your development machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn what the `GOPATH` environment variable is for, and discuss a sensible
    approach to its use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the Go tools and how to use them to keep the quality of our code
    high
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use a tool to automatically manage our imports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think about "on save" operations for our `.go` files, and how we can integrate
    the Go tools as part of our daily development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go is an open source project written originally in C, which means we can compile
    our own version from the code easily; this remains the best option for installing
    Go for a variety of reasons. It allows us to navigate through the source if we
    need to look something up later, either in the standard library Go code, or in
    the C code of the tools. It also allows us to easily update to newer versions
    of Go or experiment with release candidates as they come out, just by pulling
    a different tag or branch from the code repository and building again. Of course,
    we can also easily roll back to earlier versions if we need to, and even fix bugs
    and generate pull requests to send to the Go core team for them to consider contributions
    to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A continually updated resource for installing Go from its source on a variety
    of platforms can be found online at [http://golang.org/doc/install/source](http://golang.org/doc/install/source)
    or by searching for `Install Golang from source` . This chapter will cover the
    same things, but if you encounter problems, the Internet is going to be your best
    friend in helping resolve issues.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the C tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the Go tool chain is written in C, we will actually be compiling C code
    when we build our Go installation. This may seem a little counter-intuitive; a
    programming language was written using a different programming language, but of
    course, Go didn't exist when the Go core team started writing Go, but C did. It
    is more accurate to say that the tools used to build and link Go programs are
    written in C. Either way, for now, we need to be able to compile the C source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the first ever Gophercon in Denver, Colorado in 2014, Rob Pike and the team
    expressed that one of their goals would be to replace the C tool chain with programs
    written in Go— so that the entire stack becomes Go. At the time of writing, this
    hasn't happened yet, so we will need the C tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine whether you need to install the C tools or not, open a terminal
    and try to use the `gcc` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you receive a `command not found` error or similar, you will likely have
    to install the C tools. If, however, you see the output from `gcc` giving you
    version information (that's what the `-v` flag was for), you can likely skip this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing C tools differs for various platforms and could change over time,
    so this section should be treated only as a rough guide to help you get the tools
    you need.
  prefs: []
  type: TYPE_NORMAL
- en: The tools on a Mac running OS X are shipped with Xcode, which is available in
    App Store for free. Once you install Xcode, you open **Preferences** and navigate
    to the **Downloads** section. From there, you find the command-line tools that
    include the C tools you will need to build Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu and Debian systems, you can use `apt-get` to install the tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For RedHat and Centos 6 systems, you can use `yum` to install the tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For Windows, the MinGW project offers a Windows installer that will install
    the tools for you. Navigate to [http://www.mingw.org/](http://www.mingw.org/)
    and follow the instructions there to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have successfully installed the tools and ensured the appropriate
    binaries are included in your `PATH` environment variable, you should be able
    to see some sensible output when running `gcc -v` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding snippet is the output on an Apple Mac computer, and the most important
    thing to look for is the lack of the `command not found` error.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and building Go from the source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Go source code is hosted at Google Code in a Mercurial repository, so we
    will use the `hg` command to clone it in preparation for building.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not have the `hg` command, you can get Mercurial from the download
    page at [http://mercurial.selenic.com/downloads](http://mercurial.selenic.com/downloads)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In a terminal, to install Go, navigate to a suitable location such as `/opt`
    on Unix systems, or `C:\` on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the latest release of Go by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After a while, the latest Go source code will download into a new `go` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `go/src` folder that was just created and run the `all` script,
    which will build an instance of Go from the source code. On Unix systems this
    is `all.bash` , on Windows it's `all.bat` .
  prefs: []
  type: TYPE_NORMAL
- en: Once all the build steps are complete, you should notice that all the tests
    have successfully passed.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go is now installed, but in order to use the tools we must ensure it is properly
    configured. To make calling the tools easier, we need to add our `go/bin` path
    to the `PATH` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Unix systems, you should add export `PATH=$PATH:/opt/go/bin` (make sure it
    is the path you chose when downloading the source) to your `.bashrc` file.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, open **System Properties** (try right-clicking on **My Computer**
    ) and under **Advanced** , click on the **Environment Variables** button and use
    the UI to ensure the `PATH` variable contains the path to your `go/bin` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal (you may need to restart it for your changes to take effect),
    you can make sure this worked by printing the value of the `PATH` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure the value printed contains the correct path to your `go/bin` folder,
    for example, on my machine it prints as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The colons (semicolons on Windows) between the paths indicate that the `PATH`
    variable is actually a list of folders rather than just one folder. This indicates
    that each folder included will be searched when you enter commands in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can make sure the Go build we just made runs successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the `go` command (that can be found in your `go/bin` location) like
    this will print out the current version for us. For example, for Go 1.3, you should
    see something similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Getting GOPATH right
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`GOPATH` is another environment variable to a folder (like `PATH` in the previous
    section) that is used to specify the location for Go source code and compiled
    binary packages. Using the `import` command in your Go programs will cause the
    compiler to look in the `GOPATH` location to find the packages you are referring
    to. When using `go get` and other commands, projects are downloaded into the `GOPATH`
    folder.'
  prefs: []
  type: TYPE_NORMAL
- en: While the `GOPATH` location can contain a list of colon-separated folders such
    as `PATH` , and you can even have a different value for `GOPATH` depending on
    which project you are working in, it is strongly recommended that you use a single
    `GOPATH` location for everything, and this is what we will assume you will do
    for the projects in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder called `go` , this time in your `Users` folder somewhere,
    perhaps in a `Work` subfolder. This will be our `GOPATH` target and is where all
    the third-party code and binaries will end up, as well as where we will write
    our Go programs and packages. Using the same technique you used when setting the
    `PATH` environment variable in the previous section, set the `GOPATH` variable
    to the new `go` folder. Let''s open a terminal and use one of the newly installed
    commands to get a third-party package for us to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Getting the `powerwalk` library from `Stretchr` will actually cause the following
    folder structure to be created; `$GOPATH/src/github.com/stretchr/powerwalk` .
    You can see that the path segments are important in how Go organizes things, which
    helps namespace projects and keeps them unique. For example, if you created your
    own package called `powerwalk` , you wouldn't keep it in the GitHub repository
    of `Stretchr` , so the path would be different.
  prefs: []
  type: TYPE_NORMAL
- en: When we create projects in this book, you should consider a sensible `GOPATH`
    root for them. For example, I used `github.com/matryer/goblueprints` , and if
    you were to `go get` that, you would actually get a complete copy of all the source
    code for this book in your `GOPATH` folder!
  prefs: []
  type: TYPE_NORMAL
- en: Go tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An early decision made by the Go core team was that all Go code should look
    familiar and obvious to everybody who speaks Go rather than each code base requiring
    additional learning in order for new programmers to understand it or work on it.
    This is an especially sensible approach when you consider open source projects,
    some of which have hundreds of contributors coming and going all the time.
  prefs: []
  type: TYPE_NORMAL
- en: There is a range of tools that can assist us in achieving the high standards
    set by the Go core team, and we will see some of the tools in action in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `GOPATH` location, create a new folder called `tooling` and create
    a new `main.go` file containing the following code verbatim:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The tight spaces and lack of indentation are deliberate as we are going to look
    at a very cool utility that comes with Go.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, navigate to your new folder and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At Gophercon 2014 in Denver, Colorado, most people learned that rather than
    pronouncing this little triad as "format" or "f, m, t" it is actually pronounced
    as a word. Try saying it to yourself now: "fhumt"; it seems that computer programmers
    aren''t weird enough without speaking an alien language to each other too!'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that this little tool has actually tweaked our code file to
    ensure that the layout (or format) of our program matches Go standards. The new
    version is much easier to read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `go fmt` command cares about indentation, code blocks, unnecessary whitespace,
    unnecessary extra line feeds, and more. Formatting your code in this way is a
    great practice to ensure that your Go code looks like all other Go code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we are going to vet our program to make sure we haven''t made any mistakes
    or decisions that might be confusing to our users; we can do this automatically
    with another great tool that we get for free:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for our little program points out an obvious and glaring mistake:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We are calling `return` at the top of our function and then trying to do other
    things afterwards. The `go vet` tool has noticed this and points out that we have
    unreachable code in our file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you get an error running any Go tools, it usually means you have to get
    the command before you can use it. However, in the case of the vet tool, you just
    have to open a terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It isn't just silly mistakes like this that `go vet` will catch, it will also
    look for subtler aspects of your program that will guide you towards writing the
    best Go code you can. For an up-to-date list of what the vet tool will report
    on, check out the documentation at [https://godoc.org/code.google.com/p/go.tools/cmd/vet](https://godoc.org/code.google.com/p/go.tools/cmd/vet)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'The final tool we will play with is called `goimports` , and was written by
    Brad Fitzpatrick to automatically fix (add or remove) `import` statements for
    Go files. It is an error in Go to import a package and not use it, and obviously
    trying to use a package without importing it won''t work either. The `goimports`
    tool will automatically rewrite our `import` statement based on the contents of
    our code file. First, let''s install `goimports` with the familiar command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Update your program to import some packages that we are not going to use and
    remove the `fmt` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When we try to run our program by calling `go run main.go` , we will see that
    we get some errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'These errors are telling us that we have imported packages that we are not
    using and missing the `fmt` package, and that in order to continue we need to
    make corrections. This is where `goimports` comes in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We are calling the `goimports` command with the `-w` write flag, which will
    save us the task of making corrections to all files ending with `.go` .
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at your `main.go` file now and notice that the `net/http` and `sync`
    packages have been removed and the `fmt` package has been put back in.
  prefs: []
  type: TYPE_NORMAL
- en: You could argue that switching to a terminal to run these commands takes more
    time than just doing it manually, and you would probably be right in most cases,
    which is why it is highly recommended that you integrate the Go tools with your
    text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up, building, and running tests on save
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the Go core team has provided us with such great tools as `fmt` , `vet`
    , `test` , and `goimports` , we are going to look at a development practice that
    has proven to be extremely useful. Whenever we save a `.go` file, we want to perform
    the following tasks automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `goimports` and `fmt` to fix our imports and format the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vet the code for any faux pas and tell us immediately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempt to build the current package and output any build errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the build is successful, run the tests for the package and output any failures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because Go code compiles so quickly (Rob Pike once actually said that it doesn't
    build quickly, but it's just not slow like everything else), we can comfortably
    build entire packages every time we save a file. The same is true for running
    tests, to help us if we are developing in a TDD style, and the experience is great.
    Every time we make changes to our code, we can immediately see if we have broken
    something or had an unexpected impact on some other part of our project. We'll
    never see package import errors again, because our `import` statement will have
    been fixed for us, and our code will be correctly formatted right in front of
    our eyes.
  prefs: []
  type: TYPE_NORMAL
- en: Some editors will likely not support running code in response to specific events,
    such as saving a file, which leaves you with two options; you can either switch
    to a better editor or write your own script file that runs in response to filesystem
    changes. The latter solution is out of scope for this book, instead we will focus
    on how to implement this functionality in a popular text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sublime Text 3 is an excellent editor for writing Go code that runs on OS X,
    Linux, and Windows, and has an extremely powerful expansion model, which makes
    it easy to customize and extend. You can download Sublime Text from [http://www.sublimetext.com/](http://www.sublimetext.com/)
    and trial-use it for free before deciding if you want to buy it or not.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to **DisposaBoy** (see [https://github.com/DisposaBoy](https://github.com/DisposaBoy)
    ), there is already a Sublime expansion package for Go, which actually gives us
    a wealth of features and power that a lot of Go programmers actually miss out
    on. We are going to install this `GoSublime` package and then build upon it to
    add our desired on-save functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can install `GoSublime` , we need to install Package Control into
    Sublime Text. Head over to [https://sublime.wbond.net/](https://sublime.wbond.net/)
    and click on the **Installation** link for instructions on how to install Package
    Control. At the time of writing, it's simply a case of copying the single, albeit
    long, line command, and pasting it into the Sublime console which can be opened
    by navigating to **View** | **Show Console** from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that is complete, press *shift* + *command* + *P* and type `Package Control:
    Install Package` and press *return* when you have selected the option. After a
    short delay (where Package Control is updating its listings), a box will appear
    allowing you to search for and install GoSublime just by typing it in, selecting
    it, and pressing *return* . All being well, GoSublime will be installed and writing
    Go code has just become an order of magnitude easier.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have GoSublime installed, you can open a short help file containing
    the details of the package by pressing *command* + *.* , *command* + *2* (the
    *command* key and period at the same time, followed by the *command* key and number
    *2* ).
  prefs: []
  type: TYPE_NORMAL
- en: Tyler Bunnell is another popular name in the Go open source community (see [https://github.com/tylerb](https://github.com/tylerb)
    ) and we are going to use his customizations to implement our on-save functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *command* + *.* , *command* + *5* to open the GoSublime settings and
    add the following entry to the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that the settings file is actually a JSON object, so be sure to add the
    `on_save` property without corrupting the file. For example, if you have properties
    before and after, ensure the appropriate commas are in place.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding setting will tell Sublime Text to build the code looking for errors,
    install test dependencies, run tests, and vet the code whenever we save the file.
    Save the settings file (don't close it just yet), and let's see this in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Choose File** | **Open…** from the menu and select a folder to
    open—for now let''s open our `tooling` folder. The simple user interface of Sublime
    Text makes it clear that we only have one file in our project right now, `main.go`
    . Click on the file, add some extra linefeeds, and add and remove some indenting.
    Then navigate to **File** | **Save** from the menu, or press *command* + *S* .
    Notice that the code is immediately cleaned up, and provided you haven''t removed
    the oddly placed `return` statement from `main.go` , you will notice that the
    console has appeared, and it is reporting the issue thanks to `go vet` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Holding down *command* + *shift* and double-clicking on the unreachable code
    line in the console will open the file and jump the cursor to the right line in
    question. You can see how helpful this feature is going to be as you continue
    to write Go code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add an unwanted import to the file, you will notice that on using `on_save`
    you are told about the problem, but it wasn''t automatically fixed. That''s because
    we have another tweak to make. In the same settings file as you added the `on_save`
    property to, add the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This tells GoSublime to use the `goimports` command instead of `go fmt` . Save
    this file again and head back to `main.go` . Add `net/http` to the imports again,
    remove `fmt` import, and save the file. Notice that the unused package was removed
    and `fmt` was again put back.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, we installed our own build of Go from the source code, which
    means we can easily use the `hg` command to keep our installation up to date,
    or to test our beta features before they are released. It's also nice to have
    the entire Go language code for us to browse on those lonely nights by the fire.
  prefs: []
  type: TYPE_NORMAL
- en: You learned about the `GOPATH` environment variable, and discovered a common
    practice of keeping one value for all projects. This approach dramatically simplifies
    working on Go projects, where otherwise you would likely continue to encounter
    tricky failures.
  prefs: []
  type: TYPE_NORMAL
- en: We discovered how the Go toolset can really help us to produce high quality,
    community-standards-compliant code that any other programmer could pick up and
    work on with little to no additional learning. And more importantly, we looked
    at how automating the use of these tools means we can truly get down to the business
    of writing applications and solving problems, which is all that developers really
    want to do.
  prefs: []
  type: TYPE_NORMAL
- en: 读累了记得休息一会哦~
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**公众号：古德猫宁李**'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书单分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书友学习交流
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 电子书打包资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 学习资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
