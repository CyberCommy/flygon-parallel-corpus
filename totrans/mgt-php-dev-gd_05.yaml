- en: Chapter 5. Backend Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we added all the frontend functionality for the gift
    registry. Now customers are able to create registries and add products to the
    customer registries, and in general have full control over their own registries.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to build all the functionalities that store owners
    need to manage and control the registries through the backend of Magento.
  prefs: []
  type: TYPE_NORMAL
- en: Magento backend can be considered in many senses a separate application from
    the frontend of Magento; it uses a completely separate theme, style, and a different
    base controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our gift registry, we want to allow store owners to see all customer registries,
    modify the information, and add and remove items. In this chapter, we will cover
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending the Adminhtml with configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the grid widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the form widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access and permissions with Access Control Lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the Adminhtml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Mage_Adminhtml` is a single module that provides all the backend functionalities
    for Magento through the usage of configuration. As we learned before, Magento
    uses scopes for defining the configuration. In the previous chapter, we used the
    frontend scope to set up the configuration for our custom module.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify the backend, we need to create a new scope in our configuration file
    called `admin`. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `config.xml` file, which can be found at the location `app/code/loca/Mdg/Giftregistry/etc/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code is very similar to the one we used before to specify our frontend
    route; however, by declaring the route this way we are breaking an unwritten Magento
    design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep things consistent on the backend, all new modules should extend
    the main admin route.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of defining the route with the previous code, we are creating a completely
    new admin route. Normally, you don't want to do this for the Magento backend unless
    you are creating a new route that requires admin access but not the rest of the
    Magento backend. A callback URL for an admin action would be a good example of
    something like this.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is a very easy way to share route names among Magento modules.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sharing route names was introduced in Magento 1.3 but to this day, we still
    see extensions that don't use this pattern properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update our code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `config.xml` file, which can be found at the location `app/code/loca/Mdg/Giftregistry/etc/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the routes configuration with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After making this change, we can properly access our admin controllers through
    the admin namespace; for example, `http://magento.localhost.com/giftregistry/index`
    would now be `http://magento.localhost.com/admin/giftregistry/index`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step will be to create a new controller that we can use to manage
    the customer registries. We will call this controller `GiftregistryController.php`.
    Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your module controllers folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called `Adminhtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the file called `GiftregistryController.php` at the location `app/code/loca/Mdg/Giftregistry/controllers/Adminhtml/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice something important: this new controller extends `Mage_Adminhtml_Controller_Action`
    instead of `Mage_Core_Controller_Front_Action`, which we had been using so far.
    The reason for this is that the `Adminhtml` controller has additional validation
    to prevent non-admin users to access their actions.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are placing our controller inside a new subfolder inside the
    `controllers/` directory; by using this subdirectory, we are keeping the frontend
    and backend controllers organized. This is a widely accepted Magento standard
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let's leave this blank controller alone, and let's extend the Magento
    backend navigation and add some extra tabs to the customer edit page.
  prefs: []
  type: TYPE_NORMAL
- en: Back to the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have seen so far, most of the time Magento is controlled by XML configuration
    files and the backend layout is no different. We need to create a new `adminhtml`
    layout file. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the design folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new folder called `adminhtml` and inside it create the following folder
    structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adminhtml/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--default/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`----default/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`------template/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`------layout/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `layout` folder let's create a new layout file called `giftregistry.xml`
    at the location `app/code/design/adminhtml/default/default/layout/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into the layout file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add the new layout file into the `config.xml` module. Perform
    the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `etc/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file, which can be found at the location `app/code/loca/Mdg/Giftregistry/etc/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into the `config.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What we are doing inside the layout is creating a new container block and declaring
    a new tab that contains this block.
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly test our changes so far by logging in to the Magento backend and
    opening a customer information by going into **Customer Manager** located at **Customers**
    | **Manage Customers**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should get the following error in the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Back to the configuration](graphics/3060OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because we are trying to add a block that has not been declared yet;
    to fix this, we need to create a new block class. Perform the following steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the blocks folder and create a new block class following the directory
    structure called `Giftregistry.php` at the location `app/code/loca/Mdg/Giftregistry/Block/Adminhtml/Customer/Edit/Tab/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There are a couple of interesting things happening with this block class. For
    starters, we are extending a different block class, `Mage_Adminhtml_Block_Template`,
    and implementing a new interface, `Mage_Adminhtml_Block_Widget_Tab_Interface`.
    This is done in order to access all the features and functionalities of the Magento
    backend.
  prefs: []
  type: TYPE_NORMAL
- en: We are also setting the block template inside the construct function of our
    class; also under the `getCustomerId`, we are making use of the Magento global
    variables to get the current customer.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step will be to create the corresponding template file for this block,
    otherwise we would get an error on the block initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Create a template file called `main.phtml` at the location `app/code/design/adminhtml/default/default/template/mdg/giftregistry/customer/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For now, we are just adding placeholder content to the template so that we can
    actually see our tabs in action; now, if we go to the customer section in the
    backend, we should see that a new tab is available, and clicking on that tab will
    display our placeholder content.
  prefs: []
  type: TYPE_NORMAL
- en: By now, we have modified the backend and added a **Customers** tab to the customer
    section just by changing a configuration and adding some simple blocks and a template
    file. But so far, this hasn't been particularly useful, so we need a way of displaying
    all the customer gift registries under the **Gift registry** tab.
  prefs: []
  type: TYPE_NORMAL
- en: The grid widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of having to write our own grid blocks from scratch, we can reuse the
    ones that have been already provided by the Magento `Adminhtml` module.
  prefs: []
  type: TYPE_NORMAL
- en: The block that we will be extending is called grid widget; the grid widget is
    a special type of block designed to render a collection of Magento objects in
    a particular table grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'A grid widget is normally rendered inside a Grid container; the combination
    of both elements allow not only to display our data in a grid form but also adds
    search, filtering, sorting, and mass action capabilities. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the block `Adminhtml/` folder and create a folder called `Giftregistry/`
    at the location `app/code/loca/Mdg/Giftregistry/Block/Adminhtml/Customer/Edit/Tab/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class called `List.php` inside that folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into the `Giftregistry/List.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the class we just created, there are only three functions involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__construct()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_prepareCollection()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_prepareColumns()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the `__construct` function, we are specifying a few important options about
    our grid class. We are setting the `gridId`; the default sort to be by `eventDate`,
    and we are enabling pagination and filtering.
  prefs: []
  type: TYPE_NORMAL
- en: The `__prepareCollection()` function loads a collection of registries filtered
    by current `customerId`. This function can be used to do more complex operations
    in our collection too; for example, joining a secondary table to get more information
    about the customer or another related record.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, by using the `__prepareColumns()` function, we are telling Magento
    which columns and attributes for our data collection should be shown and how we
    can render them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created a functional grid block, we would need to do some
    changes to our layout XML file in order to display it. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `giftregistry.xml` file, which can be found at the location `app/design/adminhtml/default/default/layout/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What we did was to add the grid block as part of our main block, but if we go
    to the customer edit page and click on the **Gift registry** tab, we are still
    seeing the old placeholder text and the grid is not displaying.
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid widget](graphics/3060OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because we haven''t made the necessary changes to our `main.phtml`
    template file. In order to display children blocks, we specifically need to tell
    the templating system to load any or a specific child; for now, we will just load
    our specific grid block. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.phtml` template file, which can be found at the location `app/design/adminhtml/default/default/template/customer/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the template code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `getChildHtml()` function is responsible for rendering all the child blocks.
  prefs: []
  type: TYPE_NORMAL
- en: The function `getChildHtml()` can be called with a specific child block name
    or without parameters; when called without parameters, it will load all the available
    children blocks.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of our extension, we are only interested in instantiating a particular
    child block, so we will be passing the block name as the function parameter. Now,
    if we refresh the page, we should see our grid block loaded with all the gift
    registries available for that particular customer.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the registries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, this is handy if we want to manage the registries for a specific customer,
    but it does not really help us if we want to manage all the registries available
    in a store. For that, we need to create a grid that loads all the available gift
    registries.
  prefs: []
  type: TYPE_NORMAL
- en: Since we already created a gift registry controller for the backend, we can
    use the index action to display all the available registries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to modify the Magento backend navigation to
    show a link to our new controller index action. Again, we can achieve this by
    using XML. In this particular case, we are going to create a new XML file called
    `adminhtml.xml`. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your module `etc` folder, which can be found at the location `app/code/local/Mdg/Giftregistry/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `adminhtml.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code in that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the standard is to have this configuration added inside `adminhtml.xml`,
    you will likely encounter extensions where this standard is not followed. This
    configuration can be located inside `config.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration code is creating a new main-level menu and a new child-level
    option under it; we are also specifying which action the menu should be mapped
    to, in this case, the index action of our gift registry controller.
  prefs: []
  type: TYPE_NORMAL
- en: If we refresh the backend now, we should see a new **Gift registry** menu added
    to the top-level navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions and the ACL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we need to restrict access to certain features of our module or even
    the whole module based on the admin rule. Magento allows us to do this by using
    a power feature called **ACL** or **Access Control List**. Each role in the Magento
    backend can have different permissions and different ACLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step of enabling ACLs with our custom module is to define which resources
    should be restricted by the ACL; not so surprisingly, this is controlled by the
    configuration XML files. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `adminhtml.xml` configuration file, which can be found at the location
    `app/code/local/Mdg/Giftregistry/etc/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code after the menu path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the Magento backend, if we navigate to **System** | **Permissions**
    | **Roles**, select the **Administrators** role, and try to set **Roles Resources**
    at the bottom of the list; we can see the new ACL resources we created, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Permissions and the ACL](graphics/3060OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By doing this, we gain granular control over which operations each user has
    access to.
  prefs: []
  type: TYPE_NORMAL
- en: If we click on the **Manage Registries** menu, we should get a blank page; since
    we haven't created the corresponding grid block, layouts, and templates, we should
    see a completely blank page.
  prefs: []
  type: TYPE_NORMAL
- en: So let's start by creating the blocks that we will need for our new grid; the
    way we will create our gift registry grid will be slightly different from what
    we did for our **Customers** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a grid container block and a grid block. The grid container
    is used to hold the grid header, the buttons, and the grid content, while the
    grid block is only in charge of rendering the grid with pagination, filtering,
    and mass actions. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your block `Adminhtml` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new block called `Registries.php` at the location `app/code/local/Mdg/Giftregistry/Block/Adminhtml/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: One important thing we are setting up in the `construct` function inside our
    grid container is the usage of protected values of `_controller` and `_blockGroup`
    by the Magento grid container to identify the corresponding grid block.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to clarify that `$this->_controller` is not the actual controller
    name but the block class name and `$this->_blockGroup` is actually the module
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue with creating the grid block, which as we learned previously
    has three main functions: `_construct`, `_prepareCollection()`, and `_prepareColumns()`.
    But in this case, we will add a new function called `_prepareMassActions()`, which
    allows us to modify selected sets of records without having to edit each individually.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your block `Adminhtml` folder and create a new folder called `Registries`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the `Model` folder create a new block called `Grid.php` at the location
    `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to `Grid.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This grid code is very similar to what we had created before for the **Customers**
    tab, with the exception that this time we are not specifically filtering by a
    customer record, and we are also creating a grid container block instead of implementing
    a custom block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in order to show the grid in our controller action we need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `giftregistry.xml` file, which can be found at the location `app/code/design/adminhtml/default/default/layout/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Since we are using a grid container, we only need to specify the grid container
    block, and Magento will take care of loading the matching grid container.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to specify or create a template file for the grid or the grid
    container as both blocks automatically load the base templates from the `adminhtml/base/default`
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can check our newly added gift registry by navigating to **Gift Registry**
    | **Manage Registries** in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: '![Permissions and the ACL](graphics/3060OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating in bulk with Massactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When creating our base grid block, we defined a function called `_prepareMassactions()`,
    which provides an easy way of manipulating multiple records from the grid. In
    our case, for now, let''s just implement a mass delete action. Perform the following
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the registry grid block `Grid.php`, which can be found at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `_prepareMassaction()` function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The way mass actions work is by passing a series of selected IDs to our specified
    controller action; in this case, the `massDelete()` action will add code to iterate
    through the registry collection and delete each of the specified registries. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `GiftregistryController.php` file, which can be found at the location
    `app/code/local/Mdg/Giftregistry/controllers/Adminhtml/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the blank `massDelete()` action with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Challenge**: Add two new mass actions to change the status of the registries
    to enable or disable respectively. To see the answer with the complete code and
    full breakdown, visit [http://www.magedevguide.com/](http://www.magedevguide.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we also want to be able to edit the records listed in our grid. For
    that, we need to add a new function to our registries grid class; this function
    is called `getRowUrl()`, and it is used to specify the action to be taken when
    clicking on a grid row; in our particular case, we want to map that function to
    the `editAction()`. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Grid.php` file, which can be found at the location `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following function to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The form widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been working with the gift registry grid, but right now we aren't
    able to do much more than just getting the list of all the available registries
    or deleting registries in bulk. We need a way of getting the details of a specific
    registry; we can map this to the edit controller action.
  prefs: []
  type: TYPE_NORMAL
- en: The `edit` action will display the registry-specific details and will also allow
    us to modify the details and status of a registry. We will need to create a few
    blocks and templates for this action.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to view and edit the registry information, we need to implement a
    form widget block. Form widgets work in a similar fashion as the grid widget blocks
    and need to have a form block and a form container block that extends the `Mage_Adminhtml_Block_Widget_Form_Container`
    class. In order to create the form container, let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registries` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new class file called `Edit.php` at the location `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the class file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the grid widget, the form container widget will automatically identify
    and load the matching form block.
  prefs: []
  type: TYPE_NORMAL
- en: One additional protected attribute that is being declared in the form container
    is the mode attribute; this protected attribute is used by the container to specify
    the location of the form block.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find the code responsible for creating the form block inside the `Mage_Adminhtml_Block_Widget_Form_Container`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have created the form container block, we can proceed to create
    the matching form block. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registries` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called `Edit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `Form.php` at the location `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Edit/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We also need to modify our layout file and tell Magento to load our form container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following code to the layout file `giftregistry.xml`, which can be
    found at the location `app/code/design/adminhtml/default/default/layout/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check out our progress at this point by going into the Magento backend
    and clicking on one of our example registries. We should see the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The form widget](graphics/3060OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But there seems to be an issue. None of the data is loaded; we just have an
    empty form, so we have to modify our controller `editAction()` in order to load
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by modifying `editAction()` inside our `GiftregistryController.php`
    file, which can be found at the location `app/code/local/Mdg/Giftregistry/controllers/Adminhtml/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'What we are doing inside our `editAction()` is to check for a registry with
    the same ID, and if it exists, we will load that registry entity and make it available
    to our form. Previously, when adding the form code to the file `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Edit/Form.php`,
    we included the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can test our changes by reloading the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading the data](graphics/3060OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Saving the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have created the form for editing a registry, we need to create
    the corresponding action to process and save the data posted by the form. We can
    use the save form action to handle this. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `GiftregistryController.php` class, which can be found at the location
    `app/code/local/Mdg/Giftregistry/controllers/Adminhtml/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the blank `saveAction()` function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down what this code is doing step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: We check if the request has valid post data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We check that both the `$data` and `$id` variables are set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If both variables are set, we load a new registry entity and set the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we try to save the registry entity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing we do is to check that the data posted is not empty and that
    we are getting a registry ID as part of the parameters; we also check if the registry
    ID is a valid instance of the registry entity.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to modify and extend the Magento backend to
    our specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas, the frontend extends the functionality that the customers and users
    can use; extending the backend allows us to control this custom functionality
    and how customers interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: Grids and forms are important parts of the Magento backend, and by using them
    properly, we can add a lot of functionality without having to write a lot of code
    or reinvent the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to use the permissions and Magento ACL to control and
    restrict the permissions of our custom extension after extension, as well as Magento
    in general.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deep into the Magento API, and we will learn
    how to extend it to manipulate our registry data using several methods such as
    SOAP, XML-RPC, and REST.
  prefs: []
  type: TYPE_NORMAL
