- en: Expression-Bodied Lambdas and Expression-Bodied Members
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about expression-bodied members and then Lambda
    expressions that are defined by blocks of code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a box and a Find Max button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up a project, and we will set up a box, read three values from this box,
    and then find the maximum value. We'll also do some other things such as learning
    how to convert from an array of one data type to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by typing `Enter Values:` under the line beginning with `<form
    id=...`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go to Toolbox, grab a `Textbox` control, and put that after Enter Values:.
    You can delete the `<div>` lines as you don''t need them. Be sure to insert a
    `<br>` tag at the end of the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next stage, you''ll insert a `Button` control; so get one from the Toolbox
    and drop it below this line. Change the text on the button to say Find Max. Again,
    end the line with a `<br>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Your HTML file for this project should look like *Figure 7.2.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b6d180a-8f91-4861-a83e-1442af457118.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2.1: The HTML file for this project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go to the Design view. All that we now have is a box and a button, as shown
    in *Figure 7.2.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/108d4d44-a08c-4f88-95ee-c5448e9bbc3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2.2: Our simple interface in the Design view'
  prefs: []
  type: TYPE_NORMAL
- en: Next, double-click on the Find Max button to go to the `Default.aspx.cs` file,
    and delete everything. The code in this chapter will be somewhat sophisticated
    and perhaps a little more challenging than that of previous chapters, but it's
    the best way to grow and move forward. I will go through the construction of the
    code line by line. By now, you should be able to see what it takes to begin to
    program well and how much you have to know.
  prefs: []
  type: TYPE_NORMAL
- en: Making the delegate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enter `using System` as usual at the very top of the file. Next, to make a
    delegate, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this line, you have a `delegate` class. It returns a `double` and accepts
    two `double` data types. So, it encapsulates functions that have that kind of
    signature.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage, you''ll enter the following within curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This line inherits from `Page` as usual.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an expression-bodied member
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, we will begin by defining an expression member, so enter
    the following between a set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This line shows a new way of creating functions. That's what this is essentially.
    Instead of putting curly braces within the line, you can now just put something
    such as a Lambda expression, `=>` in this case. Then the thing to be converted
    to a `double` data type will be the `s` string. It's also more streamlined; it
    looks a little more modern, like an expression-bodied member, like a function.
    Remember that functions are members of classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the next stage, we''ll define the Button click event below this line.
    If you go back to the Design view and double-click the button, it''ll stick in
    the following line automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter the following between a set of curly braces beneath the preceding
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Converting an array of strings into an array of doubles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let''s convert that array of strings into an array of doubles using a
    different approach; to do this, enter the following below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `ConvertAll` method. It's not so easy to use. You need to have an
    array on which you'll operate. So, in this case, the array is called `vals`, and
    then there needs to be something called a *converter object* (note that the popup
    shows `Converter<TInput, TOutput> converter>`). To make a converter, you enter
    `new Converter`, and then, in this case, you will transform an array of strings
    into an array of doubles. So, string is the one you're converting from, and double
    is the type to which you are converting. This new converter really just wraps
    a function call, so after that you enter `(FromStringToDouble)`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding line will accomplish the conversion of the array from one data
    type to another. Remember, ultimately, it'll grab each value and hit it with `Convert.ToDouble(s)`
    from the line near the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, `CompareValues` is a delegate type—it's like a data type—and we'll name
    it `compareValues`, and then you define a new Lambda `(xin, yin)=>`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an expression-bodied lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you''ll define the body of the Lambda. Because this lambda will do several
    things, you can enclose the body of it within a set of curly braces as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So, this line assigns the values from the parameters above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next enter the following directly below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, if `x` is greater than `y`, then return `x`; otherwise, return `y`. This
    is an expression-bodied Lambda, and you close it at the end with a semicolon after
    the closed curly brace, like this `};`. As you can see, this Lambda expression
    spans multiple lines. So, you can again inline code just as with the preceding
    line, using the `double FromStringToDouble(string s) => Convert.ToDouble(s);`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage of the process, we will compare values. To do this, enter
    the following after the closed curly brace/semicolon beneath the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, `CompareValuesInList` is a function that you can create. Then you'll pass
    in `compareValues`. In other words, when this line says `compareValues`, the entire
    `CompareValues` block from above will be passed into the body of the function.
    You've never done this before. You're passing around entire blocks of code! Next,
    you enter `doubleVals[0]` to get the first value, and then you can copy (*Ctrl*
    + *C*) and repeat this for the other ones at index 1 as `doubleVals[1]` and at
    index 2 as `doubleVals[2]` because there are three of them.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in the next stage, enter the following underneath the closed curly brace
    after the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After `CompareValuesInList`, you'll specify the parameters. So, the first one
    will be `CompareValues`. This indicates that a delegate can also be used as a
    type for a parameter. We'll give it the name `compFirstTwo`. Then, you do the
    `double first`, `double second`, and `double third` parameter. So, there are the
    three values to be passed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following within a set of curly braces beneath the preceding
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What this line is saying is that, if `third` is greater than the result of comparing
    the first two `compFirstTwo(first, second)` parameter—(remember, this expression
    will run first, and then will return a value comparing the first two—), then it
    returns the third; otherwise, it will run `compFirstTwo` again and return the
    bigger of those two.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What you have here is very sophisticated code. Now crank it up in your browser,
    and take a look at the results. Enter some values, say `1`,`5`, and `-3`, and
    click on the Find Max button. The result is 5, as you can see in *Figure 7.2.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/840e5c4b-651f-436b-be02-a641e4e8e3aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2.3: Preliminary results of running the program with pure integer
    values'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter something such as `1.01`, `1.02`, and `0.9999`, and click on the
    Find Max button. The result is 1.02, as you can see in *Figure 7.2.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/380146ea-ff4a-4d24-9c54-5f3cc5151db4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2.4: Results of running the program with extended decimal values'
  prefs: []
  type: TYPE_NORMAL
- en: So, the program is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, to review, because there''s a lot of code here, we did the following
    in this program:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we declared a delegate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we declared an expression-bodied member, which, in this context of this
    code, is a function that's defined essentially with a Lambda.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we made an array of values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we created a line to convert the values from a `string` type to a `double`
    type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we made an expression-bodied Lambda.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we built a function called `CompareValuesInList` that takes that Lambda
    as an argument and then also looks at the other values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, `CompareValuesInList` is where the magic really happens, because it
    says that, if the `third` value is bigger than either of the two first compared,
    then you return the `third` value. However, if it's not, then simply return the
    one that is the bigger of the first two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I know this doesn't seem like an easy thing to do. I know this because I've
    done this before. You must absolutely add this level of coding, however. Type
    it, run it, and process it; then you will develop your understanding quickly enough.
    These are the fundamentals of making some of this stuff useful.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about expression-bodied members and then Lambda
    expressions, which are defined by blocks of code. You made a delegate, defined
    an expression-bodied member, converted an array of strings into an array of doubles,
    created an expression-bodied lambda, and built the code to compare values and
    specified parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about anonymous functions.
  prefs: []
  type: TYPE_NORMAL
