- en: Creating Custom Application Components and Layouts
  prefs: 
  - PREF_H1
  type: TYPE_NORMAL
- en: To start the development of our application, we will need to create the custom
    components and inputs that will be used by the entire application. These components
    will be created with a stateless approach.
  prefs: []
  type: TYPE_NORMAL
- en: We will develop the `UsernameInput` component, the `PasswordInput` component,
    the `EmailInput` component, and the `AvatarInput` component. We will also develop
    the base layout for the application pages and the chat layout, which will wrap
    the chat page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom inputs for the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the application layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js **and **Quasar Framework**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention, Windows users! You need to install an `npm` package called `windows-build-tools`
    to be able to install the required packages. To do it, open PowerShell as an administrator
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Quasar Framework, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating custom inputs for the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an application requires the creation of lots of forms. All of those
    forms require inputs, and those inputs are likely to be repeated in the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create custom input forms that we will use in our application
    in almost every form.
  prefs: []
  type: TYPE_NORMAL
- en: The process of creating custom input forms helps the developer in terms of saving
    time for debugging, reusability of the code, and future improvements for the code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The last recipe project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our custom components, we will continue with the project that was created
    in [Chapter 3](6748f2ed-6fa0-4925-8a71-199269fae4ae.xhtml)*, Setting Up Our Chat
    App - AWS Amplify Environment and GraphQL*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For better reusability of the code, we will create separate components that
    will handle the customs forms on the application. In this case, we will create
    six components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UsernameInput`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PasswordInput`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NameInput`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmailInput`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvatarInput`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvatarDisplay`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's start.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UsernameInput component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UsernameInput` will be responsible for handling the checking and validation
    of usernames, so we don''t need to re-write all the rules on each page where we
    need to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<script>` section of the `UsernameInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `UsernameInput.vue` in the `src/components` folder,
    and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `export default` JavaScript object with the `name` and `props` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `name` property, define it as `"UsernameInput"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `props` property, define it as a JavaScript object and add a new property
    called `value`, which will also be a JavaScript object with the `type`, `default`, and `required` properties. The `type` property
    needs to be defined as `String`, `default` as `''''`, and `required` as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<template>` section of the `UsernameInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `<template>` section, create a `QInput` component. Create two dynamic attributes, `value` and `rules`.
    Now, `value` will be bound to the `value` property, and the `rules` attribute
    will receive an array. The first item of the array is a function that will be executed
    to validate the input, and the second item is the message when there is an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `outlined` and the `lazy-rules` attributes as `true`, and define the `label` attribute
    as `"Your Username"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, create event listeners for the events by creating a `v-on` directive
    with the `$listeners` Vue API as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing all the steps, your final code should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e6398356-c190-45f1-96fa-26d3c7d632a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a PasswordInput component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`PasswordInput` will be a component that has a special logic to toggle the
    visibility of the password by clicking on a button. We will wrap this logic within
    this component, so we don''t need to port it over each time we use this component.'
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the `PasswordInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `PasswordInput.vue` in the `components` folder, and
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an export default JavaScript object with three properties, `name`, `props`, and `data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `name` property, define the value as `"PasswordInput"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `props` property, add two properties, `value`, and `label`, both being
    JavaScript objects. Each should have three properties inside: `type`, `default`, and `required`. Set `value.type` as `String`, `value.default` as `**''''**`,
    and `value.required` as `false`. Then, set `label.type` as `String`, `label.default` as
    `''Your Password''`, and `label.required` as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `data` property, add a JavaScript object as a returned value,
    with the `isPwd` value set to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now we will create the `<template>` section of `PasswordInput`. Follow these
    instructions to achieve the correct input component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `<template>` section, create a `QInput` component, and add the `value`, `label`,
    and `rules` attributes as variables. `value` will be bound to the `value` property, `label` to
    the `label` property, and `rules` will receive an array of functions that will
    be executed to check for the basic validation of the form's input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `type` attribute, define it is as a variable and set it as a ternary
    verification of `isPwd`, changing between `"password"` and `"text"`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `outlined` and `lazy-rules` attributes as `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `hint` variable attribute and define it as a ternary operator, where
    it will check for the length of the current value if a minimum value size is matched;
    otherwise, it will display a message to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create event listeners for the events by creating a `v-on` directive with
    the `$listeners` Vue API as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `QInput` template, we will add a children component that will take
    place on a named slot, `v-slot:append`, which will hold a `QIcon` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `QIcon` component, define the `name` attribute to be reactive to the `isPwd` variable,
    so it will be `'visibility_off'` when `isPwd` is set to `true`, or `'visibility'` when `isPwd` is
    set to `false`. Define the `class` attribute as `"cursor-pointer"` so the mouse
    has the appearance of an actual mouse with `"hover hand icon"`, and on the `@click` event
    listener, we will set `isPwd` as the opposite of the current `isPwd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing all the steps, your final code should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6f0729d-0592-4f9b-b117-2ebad5254985.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the NameInput component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of all the components we are creating here, the `NameInput` component is the
    most simple, with almost no changes to the behavior of the `QInput` component
    and just the addition of the validation rules and some personalization.
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the `NameInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an export default JavaScript object with two properties, `name` and `props`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `name` property, define the value as `''NameInput''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `props` property, add a property, `value`, as a JavaScript object, with
    three properties inside: `type`, `default`, and `required`. Set `value.type` as `String`, `value.default` as `**''''**`,
    and `value.required` as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<template>` section of the `NameInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `<template>` section, create a `QInput` component, and add the `value` and `rules` attributes
    as variables. `value` will be bound to the `value` property, and `rules` will
    receive an array of functions that will be executed to check for basic validation
    of the input of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `outlined` and `lazy-rules` attributes as `true`, and define the `label` attribute
    as `"Your Name"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, create event listeners for the events by creating a `v-on` directive
    with the `"$listeners"` Vue API as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing all the steps, your final code should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/43ecd588-f672-498b-9372-34fc3df16edf.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the EmailInput Component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `EmailInput` component, we need to take special care regarding the processing
    of the rules validation, because we need to check whether the email that is being
    typed is a valid email address.
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the `EmailInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an export default JavaScript object with three properties: `name`, `props`, and `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `name` property, define the value as `''EmailInput''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `props` property, add a property, `value`, as a JavaScript object, with
    three properties inside: `type`, `default` and `required`. Set the `value.type` as `String`, `value.default` as `**''**`,
    and `value.required` as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `methods` property, we need to add a new method called `validateEmail`,
    which receives an argument called `email`. This method will test the received
    argument through a regular expression to check whether it''s a valid expression
    and return the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<template>` section of the `EmailInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `<template>` section, create a `QInput` component, and add as variables
    the `value` and `rules` attributes.`value` will be bound to the `value` property
    and `rules` will receive an array of functions that will be executed to check
    for basic validation of the input of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `outlined` and `lazy-rules` attributes as `true`, define the `label` attribute
    as `"Your E-Mail"`, and the `type` attribute as `"email"`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, create event listeners for the events by creating a `v-on` directive
    with the `"$listeners"` Vue API as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing all the steps, your final code should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/20533ea7-b331-4aac-b6d5-2b4f2d0d8743.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the AvatarInput component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the `AvatarInput` component, we need to add the logic to use the driver
    of the AWS-Amplify Storage API. By doing this, we can upload files directly through
    the component, and make the logic and component more reusable through the application.
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the `AvatarInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `uid` from the `quasar` package and `uploadFile` from `''src/driver/bucket''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an export default JavaScript object with four properties, `name`, `props`, `data`, and `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `name` property, define the value as `"AvatarInput"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `props` property, add a property, `value`, as a JavaScript object, with
    three properties inside - `type`, `default`, and `required`. Set `value.type` as `Object`, `value.default` as
    a factory function returning a JavaScript object, and `value.required` as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `data` property, we need to add six new properties: `file`, `type`, `name`, `s3file`, `photoUrl`,
    and `canUpload`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `file` property will be an array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`, `name`, and `photoUrl` will be strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `canUpload` property will be a Boolean defined to `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s3file` will be a JavaScript object with three properties, `key`, `bucket`,
    and `region`, all of them being strings:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `methods` property, we need to add a new method called `uploadFile`.
    This method will check whether it can start the upload process, then call the `uploadFile` function,
    passing `this.file`, `this.name`, and `this.type` as parameters. After we receive
    the response from the upload function, we will use the result to define `this.s3File` and `$emit` and
    the event `''input''` with it. Finally, we will define `this.canUpload` as `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a method called `getFile` that receives `$event` as an argument. In
    the function, we will define `this.type` as `$event.type`, `this.name` as a concatenation
    of a `uid` generator function, and the name of the file. Then, we will create
    a listener for the `FileReader` instance that will set `that.photoURL` as a result
    of the reading, and `that.canUpload` as `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now it''s time to create the `<template>` section of the `AvatarInput` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `QFile` component, with the `v-model` directive bound to the `file` data
    property. Define the `outlined` and `bottom-slots` attributes as `true`, and set
    the `label` attribute as `"Your Avatar"`. For the `class` attribute, set it as `"q-pr-md"`,
    and finally set the `@input` event listener to target the `getFile` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QFile` component, we will add a direct child that will take place
    on a named slot, `v-slot:before`, and will only be shown if there is any `photoUrl` in
    the data property. In this slot, we will add a `QAvatar` component with a child
    of an `HTML img` tag, with the `src` attribute bound to the `photoUrl` data property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After the slot we created, we need to create another slot, now placed under
    the `v-slot:after` named slot, with a `QBtn` component inside of it. `QBtn` will
    have the following attributes: `round`, `dense`, `flat`, `icon` defined as `"cloud_upload"`,
    and the `@click` event listener bounded to the `uploadFile` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a28e22e8-4f2a-4a9e-aef7-9680c4f9e122.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the avatar mixin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here we will create a simple mixin that will be used in the new conversation
    component and the contact page to display the user avatar, or the first letter
    of the username if there is no avatar defined:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `mixins` on the `src` folder and then create a file
    called `getAvatar.js`, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `getFile` function from the `driver/bucket` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Export a `default` JavaScript object with the `methods` property. Inside the `methods` property,
    create a new function called `getAvatar`. This function will receive two arguments, `object` and `name`.
    For this function, we will check whether the object is `null` and whether there
    is a name to show the initial letter of. If the JavaScript object has properties
    in it, we will return the result of the `getFile` function, passing the `key` property
    as the argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Creating the AvatarDisplay component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`AvatarDisplay` will be responsible for handling the checking and validation
    of usernames, so we don''t need to re-write all the rules on each page where we
    need to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<script>` section of the `AvatarDisplay` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `AvatarDisplay.vue` in the `components` folder, and
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `export default` JavaScript object with the following properties: `name`,
    `props`, `mixins`, `beforeMount`, `data`, `watch`, `computed`, and `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `name` property, define it as `"AvatarDisplay"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `props` property, define it as a JavaScript object and add three new
    properties called `avatarObject`, `name`, and `tag`. The `avatarObject` property will
    be a JavaScript object with properties `type`, `default`, and `required`. The `name` and
    `tag` properties need to be defined as `String`, `default` as `''''`, and `required` as `false`.
    For the `tag` property, we will set the default property to `''q-img''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `mixins` property, we will add to the array the imported `getAvatar`
    mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `data`, return Javascript object, we will create a property called
    `src`, with the default value as `''''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then for the `computed` property, create a new property called components,
    returning a ternary operator, checking whether the `tag` property is equal to
    `''q-img''`, and returning the imported `QImg` component from Quasar; if not,
    it returns the `''img''` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, create a new method called `updateSrc`. In this
    method, we will define `src` as the result of the `getAvatar` method. We pass
    as arguments of the function the `avatarObject` and `name` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `beforeMount` life cycle hook, we will call the `updateSrc` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for the `watch` property, create two properties, `avatarObject` and
    `name`. For the `avatarObject` property, define it as a Javascript object with
    two properties, `handler` and `deep`. In the `deep` property, define it as `true`,
    and on the `handler` property, define it as a function, calling the `updateSrc`
    method. Then on the `name` property, create a `handler` property defined as a
    function, calling the `updateSrc` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<template>` section of the `AvatarDisplay` component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `<template>` section, create a `component` element. Create two dynamic attributes, `src` and `is`.
    Now, `src` will be bound to the data `src`, and the `is` attribute will be bound
    to the `componentIs` computed property. Finally, create a `spinner-color` attribute and
    define it as `'primary'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After completing all the steps, your final code should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to create custom components for our application,
    by wrapping components from Quasar Framework and adding custom logic on top of
    it.
  prefs: []
  type: TYPE_NORMAL
- en: This technique allows the development of unique components that can be reused
    in an application without the need to rewrite the logic to get it working.
  prefs: []
  type: TYPE_NORMAL
- en: For `Usernameinput` and `Nameinput`, we made a wrapper around the `QInput` component,
    adding validation rules and texts for easier development and reusability of the
    component, without adding more logic to it.
  prefs: []
  type: TYPE_NORMAL
- en: In the `PasswordInput` component, we added logic to control the visibility of
    the password, which changes the type of the input, and customized the `QInput` component
    to have a special button to trigger the visibility control.
  prefs: []
  type: TYPE_NORMAL
- en: For `EmailInput`, we needed to create a custom validation rule based on a regular
    expression that checks whether the typed email was a valid email and makes it
    possible to prevent the user from typing invalid emails by accident.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in `AvatarInput`, using the `QFile` component, we made a custom input
    that automatically uploads the file to AWS Amplify Storage when the file is read
    by the browser and returns the file URL to the application after the file is uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about the Quasar input component at [https://quasar.dev/vue-components/input](https://quasar.dev/vue-components/input).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about the Quasar file picker component at [https://quasar.dev/vue-components/file-picker](https://quasar.dev/vue-components/file-picker).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the application layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our application, we will use a structure for `vue-router` that has a parent
    route, based on a layout component, and the final route, which is the page that
    we are trying to access.
  prefs: []
  type: TYPE_NORMAL
- en: This model improves the development of our application, as we can create responsibilities
    divided into parents and children on `vue-router`.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create custom layouts that will wrap our
    pages in the `vue-router` parent-child structure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites for this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The last recipe project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start our application custom layouts, we will continue with the project that
    was created in the *Creating custom inputs for the application *recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With our components ready, we can start the creation of the layouts that will
    be used for the user to sign in or sign up to the chat application or edit their
    information, and the Chat layout that will be used on the chat messages pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the base layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our application, we will use a technique of a base layout. It will be like
    a wrapper for all the contents of the application. This layout will be applied
    where there are no custom changes in the execution of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we will create the `<script>` section of the base layout:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `Base.vue` in the `layouts ` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `export default` instance with a JavaScript object, with the `name` property defined
    as `''BaseLayout''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<template>` section of the base layout:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `QLayout` component with the `view` attribute defined as `"hHh Lpr
    lff"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QLayout` component, we need to add a `QHeader` component with an `elevated` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `QHeader` component, we will add a `QToolbar` component with a `QToolbarTitle` component
    as a child element, with a text as a slot place holder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `QHeader` component, create a `QPageContainer` component with a `RouterView` component
    as a direct child:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Creating the chat layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the authenticated pages of our application, we will use a different page
    layout that will have buttons for the user to log out, manage their users, and
    navigate through the application.
  prefs: []
  type: TYPE_NORMAL
- en: The single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s create the `<script>` section of the chat layout:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `Chat.vue` in the `layouts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `singOut` function from `src/driver/auth.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` instance with a JavaScript object, including two
    properties: one property called `name` defined as `''ChatLayout''` and another
    property called `methods`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, add a new asynchronous function called `logOff`;
    in this function, we will execute the `singOut` function and reload the browser
    after it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we will create the `<template>` section of the chat layout:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `QLayout` component with the `view` attribute defined as `"hHh Lpr
    lff"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `QLayout` component, we need to add a `QHeader` component with an `elevated` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To the `QHeader` component, we will add a `QToolbar` component with a `QToolbarTitle` component
    as a child element, with a text as a slot place holder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `QToolbar` component, before the `QToolbarTitle` component, we will
    add a `QBtn` component with the `dense`, `flat`, and `round` attributes defined
    as `true`. In the `icon` attribute, we will add a ternary expression with a validation
    of `$route.meta.goBack`, to check whether it''s present, to show a *back* icon
    or a *person* icon. Finally, for the `to` attribute, we will do the same, but
    the values will be `$route.meta.goBack` or a JavaScript object, with the `name` property as `Edit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `QToolbarTitle` component, we will add a `QBtn` component with the `dense`, `flat`,
    and `round` attributes defined as `true`. For the `icon` attribute, we will define
    it as `exit_to_app`, and for the `@click` directive, we will pass the `logOff` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `QHeader` component, create a `QPageContainer` component with a `RouterView` component
    as a direct child:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to create the layouts that we are going to use
    in our application. Those layouts are a wrapper for the pages that our application
    will have, making it easy to add common items such as menus, header items, and
    footers items when needed, without the need to edit each page file.
  prefs: []
  type: TYPE_NORMAL
- en: For both of the layouts created, we used common `QLayout`, `QHeader`, and `QToolbarTitle` components.
    Those components create the structure for the page with a layout container, header
    container, and a custom header toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, for the chat layout, we added two buttons to the header menu: a button
    that could be either a back button or a menu, depending on the parameter that
    was present in the route, and a sign-off button that the user could use to log
    off from the application.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about the Quasar Framework `QLayout` component at [https://quasar.dev/layout/layout](https://quasar.dev/layout/layout).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about the Quasar Framework `QHeader` component at [https://quasar.dev/layout/header-and-footer](https://quasar.dev/layout/header-and-footer).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about the Quasar Framework `QPage` component at [https://quasar.dev/layout/page](https://quasar.dev/layout/page).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about the Quasar Framework `QBtn` component at [https://quasar.dev/vue-components/button](https://quasar.dev/vue-components/button).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
