- en: '1: Containers from 30,000 feet'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Containers are definitely a *thing*.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we’ll get into things like; why do we have containers, what
    do they do for us, and where can we use them.
  prefs: []
  type: TYPE_NORMAL
- en: The bad old days
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Applications run businesses. If applications break, businesses break. Sometimes
    they even go bust. These statements get truer every day!
  prefs: []
  type: TYPE_NORMAL
- en: Most applications run on servers. And in the past, we could only run one application
    per server. The open-systems world of Windows and Linux just didn’t have the technologies
    to safely and securely run multiple applications on the same server.
  prefs: []
  type: TYPE_NORMAL
- en: So, the story usually went something like this… Every time the business needed
    a new application, IT would go out and buy a new server. And most of the time
    nobody knew the performance requirements of the new application! This meant IT
    had to make guesses when choosing the model and size of servers to buy.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, IT did the only thing it could do — it bought big fast servers
    with lots of resiliency. After all, the last thing anyone wanted, including the
    business, was under-powered servers. Under-powered servers might be unable to
    execute transactions, which might result in lost customers and lost revenue. So,
    IT usually bought big. This resulted in huge numbers of servers operating as low
    as 5-10% of their potential capacity. **A tragic waste of company capital and
    resources!**
  prefs: []
  type: TYPE_NORMAL
- en: Hello VMware!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Amid all of this, VMware, Inc. gave the world a gift — the virtual machine (VM).
    And almost overnight, the world changed into a much better place! We finally had
    a technology that would let us safely and securely run multiple business applications
    on a single server. Cue wild celebrations!
  prefs: []
  type: TYPE_NORMAL
- en: This was a game changer! IT no longer needed to procure a brand new oversized
    server every time the business asked for a new application. More often than not,
    they could run new apps on existing servers that were sitting around with spare
    capacity.
  prefs: []
  type: TYPE_NORMAL
- en: All of a sudden, we could squeeze massive amounts of value out of existing corporate
    assets, such as servers, resulting in a lot more bang for the company’s buck ($).
  prefs: []
  type: TYPE_NORMAL
- en: VMwarts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: But… and there’s always a *but!* As great as VMs are, they’re far from perfect!
  prefs: []
  type: TYPE_NORMAL
- en: The fact that every VM requires its own dedicated OS is a major flaw. Every
    OS consumes CPU, RAM and storage that could otherwise be used to power more applications.
    Every OS needs patching and monitoring. And in some cases, every OS requires a
    license. All of this is a waste of op-ex and cap-ex.
  prefs: []
  type: TYPE_NORMAL
- en: The VM model has other challenges too. VMs are slow to boot, and portability
    isn’t great — migrating and moving VM workloads between hypervisors and cloud
    platforms is harder than it needs to be.
  prefs: []
  type: TYPE_NORMAL
- en: Hello Containers!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a long time, the big web-scale players, like Google, have been using container
    technologies to address the shortcomings of the VM model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the container model, the container is roughly analogous to the VM. The major
    difference is that every container does not require its own full-blown OS. In
    fact, all containers on a single host share a single OS. This frees up huge amounts
    of system resources such as CPU, RAM, and storage. It also reduces potential licensing
    costs and reduces the overhead of OS patching and other maintenance. Net result:
    savings on the cap-ex and op-ex fronts.'
  prefs: []
  type: TYPE_NORMAL
- en: Containers are also fast to start and ultra-portable. Moving container workloads
    from your laptop, to the cloud, and then to VMs or bare metal in your data center,
    is a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: Linux containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modern containers started in the Linux world, and are the product of an immense
    amount of work from a wide variety of people, over a long period of time. Just
    as one example, Google LLC has contributed many container-related technologies
    to the Linux kernel. Without these, and other contributions, we wouldn’t have
    modern containers today.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the major technologies that enabled the massive growth of containers
    in recent years include; **kernel namespaces**, **control groups**, **union filesystems**,
    and of course **Docker**. To re-emphasize what was said earlier — the modern container
    ecosystem is deeply indebted to the many individuals and organizations that laid
    the strong foundations that we currently build on. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: Despite all of this, containers remained complex and outside of the reach of
    most organizations. It wasn’t until Docker came along that containers were effectively
    democratized and accessible to the masses.
  prefs: []
  type: TYPE_NORMAL
- en: '* There are many operating system virtualization technologies similar to containers
    that pre-date Docker and modern containers. Some even date back to System/360
    on the Mainframe. BSD Jails and Solaris Zones are some other well-known examples
    of Unix-type container technologies. However, in this book we are restricting
    our conversation and comments to *modern containers* that have been made popular
    by Docker.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hello Docker!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll talk about Docker in a bit more detail in the next chapter. But for now,
    it’s enough to say that Docker was the magic that made Linux containers usable
    for mere mortals. Put another way, Docker, Inc. made containers simple!
  prefs: []
  type: TYPE_NORMAL
- en: Windows containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Over the past few years, Microsoft Corp. has worked extremely hard to bring
    Docker and container technologies to the Windows platform.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Windows containers are available on the Windows 10 and
    Windows Server 2016 platforms. In achieving this, Microsoft has worked closely
    with Docker, Inc. and the community.
  prefs: []
  type: TYPE_NORMAL
- en: The core Windows kernel technologies required to implement containers are collectively
    referred to as *Windows Containers*. The user-space tooling to work with these
    *Windows Containers* is Docker. This makes the Docker experience on Windows almost
    exactly the same as Docker on Linux. This way developers and sysadmins familiar
    with the Docker toolset from the Linux platform will feel at home using Windows
    containers.
  prefs: []
  type: TYPE_NORMAL
- en: '**This revision of the book includes Linux and Windows examples for many of
    the lab exercises cited throughout the book.**'
  prefs: []
  type: TYPE_NORMAL
- en: Windows containers vs Linux containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s vital to understand that a running container shares the kernel of the host
    machine it is running on. This means that a containerized app designed to run
    on a host with a Windows kernel will not run on a Linux host. This means that
    you can think of it like this at a high level — Windows containers require a Windows
    Host, and Linux containers require a Linux host. However, it’s not that simple…
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, it is possible to run Linux containers on Windows machines.
    For example, *Docker for Windows* (a product offering from Docker, Inc. designed
    for Windows 10) can switch modes between *Windows containers* and *Linux containers*.
    This is an area that is developing fast and you should consult the Docker documentation
    for the latest.
  prefs: []
  type: TYPE_NORMAL
- en: What about Mac containers?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is currently no such thing as Mac containers.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can run Linux containers on your Mac using *Docker for Mac*. This
    works by seamlessly running your containers inside of a lightweight Linux VM on
    your Mac. It’s extremely popular with developers, who can easily develop and test
    their Linux containers on their Mac.
  prefs: []
  type: TYPE_NORMAL
- en: What about Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kubernetes is an open-source project out of Google that has quickly emerged
    as the leading orchestrator of containerized apps. That’s just a fancy way of
    saying *Kubernetes is an important piece of software that helps us deploy our
    containerized apps and keep them running*.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Kubernetes uses Docker as its default container runtime
    — the piece of Kubernetes that starts and stops containers, as well as pulls images
    etc. However, Kubernetes has a pluggable container runtime interface called the
    CRI. This makes it easy to swap-out Docker for a different container runtime.
    In the future, Docker might be replaced by `containerd` as the default container
    runtime in Kubernetes. More on `containerd` later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing to know about Kubernetes, at this stage, is that it’s a
    higher-level platform than Docker, and it currently uses Docker for its low-level
    container-related operations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/figure1-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Check out my Kubernetes book and my **Getting Started with Kubernetes** [video
    training course](https://app.pluralsight.com/library/courses/getting-started-kubernetes/)
    for more info on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We used to live in a world where every time the business wanted a new application,
    we had to buy a brand-new server for it. Then VMware came along and enabled IT
    departments to drive more value out of new and existing company IT assets. But
    as good as VMware and the VM model is, it’s not perfect. Following the success
    of VMware and hypervisors came a newer more efficient and lightweight virtualization
    technology called containers. But containers were initially hard to implement
    and were only found in the data centers of web giants that had Linux kernel engineers
    on staff. Then along came Docker Inc. and suddenly container virtualization technologies
    were available to the masses.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of Docker… let’s go find who, what, and why Docker is!
  prefs: []
  type: TYPE_NORMAL
