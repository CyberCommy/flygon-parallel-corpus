- en: Task Bug Logging ASP .NET Core MVC App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at using MongoDB with ASP.NET Core MVC
    by creating a task/bug logging application. A personal task manager is useful,
    and logging bugs is especially handy when you can't attend to them immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MongoDB on your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A first look at using MongoDB Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core MVC application and integrating MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might be wondering why we would choose MongoDB. The question you need to
    ask is, how much effort do you want to go through to create a simple application?
  prefs: []
  type: TYPE_NORMAL
- en: What are the benefits of using MongoDB?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To answer this question, let's have a look at the benefits of using MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Faster development with MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This might become clearer during your development process, but let''s just
    say that one part of the development process I dislike is having to create data
    tables for the various forms and fields. Have you ever had to create a table to
    store address field information? That''s right, you need to add something similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Address1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: City
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Country
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This table can obviously get very large. It depends on what exactly you need
    to store. With MongoDB, you only need to pass it the address array. MongoDB takes
    care of the rest. No more mucking around with creating table statements.
  prefs: []
  type: TYPE_NORMAL
- en: Career–enhancing skillset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More and more career sites are listing MongoDB as a sought-after skillset. It
    is more frequently used in companies, and new developers are expected to have
    some experience with MongoDB. A quick search on LinkedIn's jobs portal for the
    MongoDB keyword returned 7,800 jobs in the US alone. Having MongoDB experience
    is a great career booster, especially if you are used to using SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB is ranked well in the industry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further prove my point, MongoDB is ranked fifth overall on the website DB-Engines
    ([https://db-engines.com/en/ranking](https://db-engines.com/en/ranking)) and ranked
    first under the category of Document Stores ([https://db-engines.com/en/ranking/document+store](https://db-engines.com/en/ranking/document+store)).
  prefs: []
  type: TYPE_NORMAL
- en: These stats were correct at the time of writing. In fact, MongoDB is showing
    an increase in rankings consistently year on year.
  prefs: []
  type: TYPE_NORMAL
- en: It is clear that MongoDB is here to stay, and more importantly, that the community
    loves MongoDB. This is very important, because it creates a healthy community
    of developers that share knowledge and articles on MongoDB. Broad adoption of
    MongoDB furthers the   development of the technology.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MongoDB on your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Head on over to [https://www.mongodb.com/download-center#community](https://www.mongodb.com/download-center#community)
    and download the latest version of MongoDB Community Server for Windows. The installer
    then gives you the option to install MongoDB Compass.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also download Compass as a separate installer from the preceding link
    or by navigating directly to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mongodb.com/download-center?jmp=nav#compass](https://www.mongodb.com/download-center?jmp=nav#compass).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2058a67-525c-4618-8692-0858423adc51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the web page for MongoDB Compass, at [https://docs.mongodb.com/compass/master/](https://docs.mongodb.com/compass/master/),
    the description of MongoDB Compass is quite clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '"MongoDB Compass is designed to allow users to easily analyze and understand
    the contents of their data collections within MongoDB and perform queries, without
    requiring knowledge of MongoDB query syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Compass provides users with a graphical view of their MongoDB schema
    by randomly sampling a subset of documents from the collection. Sampling documents
    minimizes performance impact on the database and can produce results quickly."
  prefs: []
  type: TYPE_NORMAL
- en: If this is your first time working with MongoDB, I suggest that you install
    MongoDB Compass and play around with it a bit.
  prefs: []
  type: TYPE_NORMAL
- en: After installing MongoDB, you will find it under `C:\ProgramFiles\MongoDB`.
    What I now like to do is keep the full installation path on an environmental variable.
    This makes it easier to access from PowerShell or the Command Prompt. The full
    installation path to the `bin` folder is `C:\Program\FilesMongoDBServer3.6bin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set it up, we perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the System Properties screen and click on the Environment Variables
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the System variables group, select the Path variable and click on the
    Edit button. Add the full installation path to the Path system variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to go and create a folder on the hard drive to store the MongoDB
    database. You can create this folder anywhere, but wherever you do create it,
    you need to use it in the next step. I created my MongoDB database folder at the
    following path: `D:\MongoTask`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to work with MongoDB, you must start the MongoDB server first. It
    doesn''t matter if this is on a remote machine or on your local machine. Open
    PowerShell and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: On running the preceding command, press Enter. You have now started the MongoDB
    server. Next, start MongoDB Compass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see that you don''t have any databases yet. Click on the CREATE DATABASE
    button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6e9c5b2-40fc-492a-bb6b-c2fbdb7dfe49.png)'
  prefs: []
  type: TYPE_IMG
- en: The Create Database window opens up where you can specify a database name under Database
    Name and a collection name under Collection Name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To finish, click on the CEATE DATABASE button at the bottom of the screen,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa9a7a71-3c48-455b-a3c1-d82bf147e79c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see that a new database called `TaskLogger` has been created and if
    you expand the `TaskLogger` database node, you will see the TaskItem document
    listed, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1151c45-1839-4ab0-8384-061d3e43158b.png)'
  prefs: []
  type: TYPE_IMG
- en: We will not be focusing too much on MongoDB Compass in this chapter. For now,
    I wanted to show you that there is a way to visually manage MongoDB databases
    by using MongoDB Compass. You can go ahead and delete the TaskItem document that
    you just created. You will see, how the application created a document for you
    automatically when you insert data into your MongoDB database for the first time later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting your ASP.NET Core MVC application to MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When talking about using MongoDB in your application, one wonders how easy
    it will be to add this functionality to a new ASP.NET Core MVC application. The
    process is really easy. To start off, create a new ASP.NET Core Web application
    and name it `BugTracker`:'
  prefs: []
  type: TYPE_NORMAL
- en: On the New ASP.NET Core Web Application - BugTracker screen, make sure that
    you have selected ASP.NET Core 2.0 from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Web Application (Model-View-Controller).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the Enable Docker Support option. Finally, click on the OK button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your new ASP.NET Core MVC application will be created with the basics, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5f8fef9-5bac-4bba-bfff-0e7836698341.png)'
  prefs: []
  type: TYPE_IMG
- en: Enabling Docker support for your application can easily be done at creation
    time. You can also enable Docker support for existing applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I will take a look at Docker in a later chapter and how to make your application
    work with Docker. For now, our application does not need Docker support. Leave
    it unchecked and create your application as you would normally.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the NuGet package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Seeing as this chapter is all about MongoDB, we need to add this to our project.
    The best way to do this, is by adding the NuGet package. We can do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on your project and select Manage NuGet Packages... from the context
    menu, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0afe2b1b-7b07-46fc-85b6-dfad02aab8aa.png)'
  prefs: []
  type: TYPE_IMG
- en: On the NuGet screen, you will select the Browse tab and enter `Mongodb.Driver`
    as the search term.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the MongoDB.Driver by MongoDB option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Install button to add the latest stable package to your project.
    This is depicted in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42c747f8-e3a4-47fe-83b2-cf6706877531.png)'
  prefs: []
  type: TYPE_IMG
- en: You can view the progress in the Output window of Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After MongoDB has been added to your project, you will see that MongoDB.Driver
    (2.5.0) is added under the NuGet dependencies of your project, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/373bfb37-72fc-4375-9935-fea10482b517.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Expand the `Controllers` folder. You will see that by default, Visual Studio
    has created a `HomeController.cs` file. The code in that file should be something
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We want to be able to connect to MongoDB from here, so let's create some code
    to connect to the Mongo client.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to add a `using` statement to your class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`using MongoDB.Driver;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to connect to MongoDB are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a constructor by typing the snippet short code `ctor` and tabbing twice,
    or by typing in the code explicitly. Your constructor needs to create a new instance
    of `MongoClient`. When you have done this, your code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For `MongoClient` to work, we need to give it a connection string to the MongoDB
    instance we created. Open the `appsettings.json` file in the Solution ''Bug Tracker''
    pane, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/04e1852e-af64-4842-b6a5-cc23b490dca1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you open your `appsettings.json` file, it should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the file and add the MongoDB connection details, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We now want to create a `Settings.cs` file in the `Models` folder, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89ad457a-5767-4615-83c8-723e5e77eabc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `Settings.cs` file and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to open the `Startup.cs` file and modify the `ConfigureServices`
    method as follows to register the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Go back to the `HomeController.cs` file and modify the constructor to pass
    the connection string to `MongoClient`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, I want to test my code to see that it is actually accessing
    my MongoDB instance. To do this, modify your code to return the cluster description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your ASP.NET Core MVC application and see the information output in the
    browser, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e9435f8-0664-4f2f-afbc-49856662cf2d.png)'
  prefs: []
  type: TYPE_IMG
- en: This is all well and good, but let's look at how to separate the logic of adding
    the database connection into a class of its own.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MongoDbRepository class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a `MongoDbRepository` class, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder called `Data` in your solution. Inside that folder, create
    a new class called `MongoDBRepository`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9b98d23d-ef88-47ce-8300-b4a97979aaf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside this class, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If the code looks familiar, it's because it's the same code that we wrote in
    the `HomeController.cs` class, only this time, it has a bit of error handling
    and it's in its own class. This means that we also need to modify the `HomeController`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the code in the constructor of the `HomeController` as well as in the
    `Index` action. Your code needs to look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Running your application again, you will see the same information displayed
    earlier in the browser, so output to the browser window again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The only difference is that the code is now separated properly and makes it
    easy to reuse. Therefore, if any changes happen further on down the line, it only
    gets updated here.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing data to MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will have a look at how to read a list of work items from
    the MongoDB database and also how to insert a new work item into the database.
    I call them work items, because a work item can be a task or a bug. This can be
    done by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Models folder, create a new class called `WorkItem`, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e40dd635-6092-48ce-bbe6-1ebdd4aecfb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the following code to the `WorkItem` class. You will notice that `Id` is
    of type `ObjectId`. This represents the unique identifier in the MondoDB document
    that gets created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to ensure that you add the following `using` statement to your `WorkItem`
    class `using MongoDB.Bson;`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up the `MongoDBRepository` class and add the following property
    to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are using C# 6 at least, we can further simplify the `WorkItem` property
    by changing it to an **Expression Bodied Property**. To do this, change the code
    to look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If this looks a bit confusing, have a look at the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e5ea5b8d-a7ab-4ba7-b8d3-4b659c5d3e88.png)'
  prefs: []
  type: TYPE_IMG
- en: The curly braces, `get`, and `return` statements are replaced by the `=>` lambda
    operator. The object being returned (in this case, the collection of `WorkItem`
    objects) goes after the lambda operator. This results in the **Expression Bodied
    Property**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the interfaces and Work ItemService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we need to create an interface. To do this, we need to perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder in your solution called Interfaces and add an interface
    called `IWorkItemService` to the Interfaces folder, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf94d147-351b-4b07-b4e5-7f07278d10be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following code to the `IWorkItemService` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In your `Data` folder, add another class called `WorkItemService` and make it
    implement the `IWorkItemService` interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to add the `using` statement to reference your interface. In my example,
    this is the `using BugTracker.Interfaces;` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that Visual Studio prompts you to implement the interface.
    To do this, click on the lightbulb tip and click on Implement interface from the
    context menu, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/213bdf35-7625-4317-9da5-d869f222271e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have done this, your `WorkItemService` class will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add a constructor and complete the `GetAllWorkItems` method so that your
    class looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You now need to open up your `Startup.cs` file and edit the `ConfigureServices`
    method to add the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `ConfigureServices` method will now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'What you have done is registered the `IWorkItemService` interface into the
    Dependency Injection framework. For more on dependency injection, see the following
    article at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we start our application, we want to see a list of work items. Therefore,
    we need to create a view for `HomeController` to display a list of work items
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Views folder, expand the Home subfolder and delete the `Index.cshtml`
    file if there is one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click the Home folder and navigate to Add | View from the context
    menu. The Add MVC View window will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the view as `Index` and select List as the Template. From the dropdown
    for Model class, select WorkItem (BugTracker.Models).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave the rest of the settings as they are and click on the Add button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7266ff9d-5940-404f-a7c1-d6e211246be2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the view has been added, your Solution Explorer will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ca01f37-10d1-4b96-90d3-662e151187ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Taking a closer look at the view, you will notice that it uses `IEnumerable<BugTracker.Models.WorkItem>`
    as the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This allows us to iterate the collection of the `WorkItem` objects returned
    and output them in the list. Also note that `ViewData["Title"]` has been updated
    from `Index` to `Work Item Listings`.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the HomeController
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last thing we need to do before we can run our application is to modify
    the `HomeController` class to work with the `IWorkItemService`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the constructor and the `Index` action as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We are getting all the work items in the MongoDB database and passing them to
    the view for the model to work with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you have started the MongoDB server by using the `mongod -dbpath
    <path>` command format, as explained earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are done, run your application, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d21b20a-0bdc-4111-8591-b0b5738ef98d.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, there are no work items in the database, so we see this empty
    list in the browser. Next, we will add the code to insert work items into our
    MongoDB database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding work items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add work items by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add work items, let''s start off by adding a class to our Models folder
    called `AddWorkItem`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ffb9df0-c730-4d32-9669-db8f462acfa1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Modify the code in the class to essentially look like the `WorkItem` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a new folder under the Views folder called `AddWorkItem`. Right-click
    the `AddWorkItem` folder and select Add and then click on View in the context
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Add MVC View window will be displayed. Call the view `AddItem` and select
    Create for Template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dropdown for Model class, select AddWorkItem (BugTracker.Models).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave the rest of the settings as is and click on the Add button, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af962b1f-a9e3-47ae-9aba-20d27290b348.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `AddItem.cshtml` file and have a look at the form action. Ensure that
    it is set to `CreateWorkItem`. The following code snippet shows what the code
    should look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `Views` folder should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1281dbd3-9bd8-4ece-a456-46445fd8acd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to make a small change to our `IWorkItemService` interface. Modify
    the code in the interface to look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We have just specified that the classes that implement the `IWorkItemService`
    interface must have a method called `InsertWorkItem` that takes a parameter of
    the `WorkItem` type. This means that we need to swing by  `WorkItemService` and
    add a method called `InsertWorkItem`. Our code in the `WorkItemService` imterface
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the `InsertWorkItem` method to add a single object of the `WorkItem`
    type to our MongoDB database. Change the code to look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to modify our `WorkItem` class slightly. Add two constructors
    to the class, one that takes an `AddWorkItem` object as parameter and another
    that takes no parameters at all:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The reason we have added a second constructor that takes no parameters is so
    that MongoDB can deserialize `WorkItem`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to read up more regarding the reason we add a parameterless constructor
    for deserialization, take a look at the following URL: [https://stackoverflow.com/questions/267724/why-xml-serializable-class-need-a-parameterless-constructor](https://stackoverflow.com/questions/267724/why-xml-serializable-class-need-a-parameterless-constructor).
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to add another controller to our project. Right-click the Controllers
    folder, and add a new controller called `AddWorkItemController`. Feel free to
    add this as an empty controller. We will add the code in next ourselves:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d48a7da2-27c7-42bd-ac09-012a3f22f18a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the AddWorkItemController controller, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that the `HttpPost` action is called `CreateWorkItem`. This
    is the reason that the `AddItem.cshtml` file had a form action called `CreateWorkItem`.
    It tells the view what action to call on the controller when the Create button
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting to the list of work items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another interesting thing to note is that after we call the `InsertWorkItem`
    method on the `WorkItemService`, we redirect the view to the `Index` action on
    the `HomeController`. As we already know, this we know will take us to the list
    of work items:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Speaking of `HomeController`, modify the code there to add another action called
    `AddWorkItem` that calls the `AddItem` action on the `AddWorkItemController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's modify the `Index.cshtml` view slightly. To make the list on the
    Index view more intuitive, modify the `Index.cshtml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `if` statement to allow for the addition of new work items from the list
    if the list is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `ActionLink` to call the `AddWorkItem` action on the `HomeController`
    when clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, wrap the Create New `asp-action` in the following `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We will be looking at this later on.
  prefs: []
  type: TYPE_NORMAL
- en: To take a look at the logic of the application at this point, we will see that
    the `HomeController``Index `action lists the work items. When we click on the
    Add your first Work item link, we call the `AddWorkItem` action on the `HomeController`.
  prefs: []
  type: TYPE_NORMAL
- en: The `AddWorkItem` action on the `HomeController` in turn calls the `AddItem`
    action on the `AddWorkItemController`. This simply returns the `AddItem` view
    where we enter the work item details and click on the Create button.
  prefs: []
  type: TYPE_NORMAL
- en: The Create button in turn does an `HttpPost`, and because the form action on
    the `AddItem` view points to the `CreateWorkItem` action on the `AddWorkItemController`
    class, we insert the work item into our MongoDB database and redirect back to
    the list of work items by performing a `RedirectToAction` call to the `Index`
    action on the `HomeController`.
  prefs: []
  type: TYPE_NORMAL
- en: Now at this point, if you are thinking that it this a long-winded way to redirect
    back to the `HomeController` just to redirect to the `AddItem` action on the `AddWorkItemController`,
    then you're 100% correct. I will show you a quick way to redirect directly to
    the `AddItem` action on the `AddWorkItemController` when the user clicks on the
    link to create a new work item. For now, just stick with me. I'm trying to show
    you how we can interact with controllers and actions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, run your application again.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8ea9353-3b96-4109-a95a-835ffcb90cae.png)'
  prefs: []
  type: TYPE_IMG
- en: You will see that a link in the list allows you to add your first work item.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the link that redirects back to the `AddWorkItem` action on the `HomeController`.
    To run it, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the link and you will see the output, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20e97ab4-49a6-4a65-b97a-93566fee6be8.png)'
  prefs: []
  type: TYPE_IMG
- en: This will take you to the view to add a new work item. Enter in some information
    into the fields and click on the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0c002c6-dc56-4a86-a511-3cc163e337c0.png)'
  prefs: []
  type: TYPE_IMG
- en: The Create button calls the `CreateWorkItem` action on the `AddWorkItemController`
    and redirects back to the work item list on the `Index` action of the `HomeController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd47eb65-9e94-497e-829a-e3c566be2891.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the Create New link is now displayed at the top of the list.
    Let''s modify the Index.cshtml view to make that link redirect directly to the
    `AddItem` action on the `AddWorkItemController` class. Change the Razor as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You can see that we can specify the route that the application must take to
    get to the correct action. In this instance, we are saying that we must call the
    `AddItem` action on the `AddWorkItemController` class when the Create New link
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Run your application again and click on the Create New link. You will see that
    you are redirected to the input form that we added the work item to earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The default styling of the views doesn't look too shabby, but they are definitely
    not the most beautiful designs out there. This, at least, gives you as a developer
    the ability to go back and style the screens with CSS, to "prettify" them according
    to your needs. For now, the dull screens are 100% functional and good enough for
    our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Open MongoDB Compass and you will see that there is a workitem document in there.
    View that document and you will see the information that we just added from our
    ASP.NET Core MVC application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a35ffc6-26e6-444f-8c91-5f0190f7a1fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we had a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MongoDB on your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MongoDB Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core MVC application connected to MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We saw that MongoDB Compass gives developers a nice graphical view of their
    MongoDB data. Developers therefore don't need to know any MongoDB query syntax.
    If, however, you would like to take a look at the query syntax, head on over to, `https://docs.mongodb.com/manual/tutorial/query-documents/`.
  prefs: []
  type: TYPE_NORMAL
- en: There is still so much that you can learn when it comes to MongoDB and ASP.NET
    Core MVC. A single chapter is hardly enough to cover it all. What is certain though
    is that MongoDB is very powerful while remaining extremely simple to use in your
    applications. MongoDB is well-documented and there is a thriving community out
    there that can assist and guide you along the way.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at SignalR and how to create a real-time
    chat application.
  prefs: []
  type: TYPE_NORMAL
