- en: Web Application Scanning with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we had an overview of how Metasploit can be used to
    launch deceptive client-side attacks. In this chapter, you will learn various
    features of the Metasploit Framework that can be used to discover vulnerabilities
    within web applications. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a vulnerable web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web application vulnerability scanning with WMAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit auxiliary modules for web application enumeration and scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a vulnerable application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start exploring various web application scanning features offered
    by the Metasploit Framework, we need to set up a test application environment
    in which we can fire our tests. As discussed in the initial chapters, *Metasploitable
    2* is a Linux distribution that is deliberately made vulnerable. It also contains
    web applications that are intentionally made vulnerable, and we can leverage this
    to practice using Metasploit's web scanning modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to get the vulnerable test application up and running, simply boot
    into `metasploitable 2`; Linux and access it remotely from any of the web browsers,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2257bed3-cc62-46d1-a14d-4488912ffc65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two different vulnerable applications that run by default on the
    metasploitable 2 distribution, Mutillidae and **Damn Vulnerable Web Application**
    (**DVWA**). The vulnerable application can be opened for further tests, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1554dfaf-ef84-4a60-b2dd-918205226acf.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Web application scanning using WMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WMAP is a powerful web application vulnerability scanner available in Kali
    Linux. It is integrated into the Metasploit Framework in the form of a plugin.
    In order to use WMAP, we first need to load and initiate the plugin within the
    Metasploit framework, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/696e9e17-1793-4d66-8be4-4e7286f99a1c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the `wmap` plugin is loaded into the Metasploit Framework, the next step
    is to create a new site or workspace for our scan. Once the site has been created,
    we need to add the target URL to be scanned, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e8073bf-3952-4d47-8876-eb00b0b5f1a2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have created a new site and defined our target, we need to check
    which WMAP modules would be applicable against our target. For example, if our
    target is not SSL-enabled, then there''s no point in running SSL-related tests
    against this. This can be done using the `wmap_run -t` command, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ceff14a2-3635-45b5-9a56-3c2dfce6fed6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have enumerated the modules that are applicable for the test against
    our vulnerable application, we can proceed with the actual test execution. This
    can be done by using the `wmap_run -e` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b668b474-7699-4a2d-981a-31b490e12ed8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon successful execution of the tests on our target application, the vulnerabilities
    (if any have been found) are stored on Metasploit''s internal database. The vulnerabilities
    can then be listed using the `wmap_vulns -l` command, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cde1f4fd-8c23-4bae-976a-7b0feeeaf2e2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Metasploit Auxiliaries for Web Application enumeration and scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already seen some of the auxiliary modules within the Metasploit Framework
    for enumerating HTTP services in Chapter 4, *Information Gathering with Metasploit*.
    Next, we''ll explore some additional auxiliary modules that can be effectively
    used for enumeration and scanning web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cert**: This module can be used to enumerate whether the certificate on the
    target web application is active or expired. Its auxiliary module name is `auxiliary/scanner/http/cert`,
    the use of which is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7a7f4c2d-0540-4327-92c9-b8246254c8fe.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters to be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOSTS:** IP address or IP range of the target to be scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also possible to run the module simultaneously on multiple targets by
    specifying a file containing a list of target IP addresses, for example, set RHOSTS
    `/root/targets.lst`.
  prefs: []
  type: TYPE_NORMAL
- en: '`dir_scanner`: This module checks for the presence of various directories on
    the target web server. These directories can reveal some interesting information
    such as configuration files and database backups. Its auxiliary module name is
    `auxiliary/scanner/http/dir_scanner` that is used as seen in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/439145d9-c2af-4738-b13e-f37a5ce72d40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters to be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOSTS**: IP address or IP range of the target to be scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enum_wayback`: [http://www.archive.org](http://www.archive.org) stores all
    the historical versions and data of any given website. It is like a time machine
    that can show you how a particular website looked years ago. This can be useful
    for target enumeration. The `enum_wayback` module queries [http://www.archive.org](http://www.archive.org),
    to fetch the historical versions of the target website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its auxiliary module name is `auxiliary/scanner/http/enum_wayback` that is
    used as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eac308d0-8420-4e7c-9768-a89c3f995f2f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters to be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOSTS**: Target domain name whose archive is to be queried for'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files_dir`: This module searches the target for the presence of any files
    that might have been left on the web server unknowingly. These files include source
    code, backup files, configuration files, archives, and password files. Its auxiliary
    module name is `auxiliary/scanner/http/files_dir`, and the following screenshot
    shows how to use it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b1ad24dd-ad33-4ae8-98be-d7141345cf3e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters to be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOSTS**: IP address or IP range of the target to be scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http_login`: This module tries to brute force the HTTP-based authentication
    if enabled on the target system. It uses the default username and password dictionaries
    available within the Metasploit Framework. Its auxiliary module name is `auxiliary/scanner/http/http_login`,
    and the following screenshot shows how to use it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d9b8234d-a8c7-4d43-9057-7fcbd6a0099a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters to be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOSTS**: IP address or IP range of the target to be scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`**:** This module checks whether various `HTTP` methods such as `TRACE`
    and `HEAD` are enabled on the target web server. These methods are often not required
    and can be used by the attacker to plot an attack vector. Its auxiliary module
    name is `auxiliary/scanner/http/options`, and the following screenshot shows how
    to use it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/19e3d025-9143-40ed-abbe-fbdf8fb88cac.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters to be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOSTS**: IP address or IP range of the target to be scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http_version`**:** This module enumerates the target and returns the exact
    version of the web server and underlying operating system. The version information
    can then be used to launch specific attacks. Its auxiliary module name is `auxiliary/scanner/http/http_version`,
    and the following screenshot shows how to use it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f30527d8-9968-482a-b66c-184d94039659.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The parameters to be configured are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RHOSTS**: IP address or IP range of the target to be scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored various features of the Metasploit Framework that
    can be used for web application security scanning. Moving ahead to the next chapter,
    you will learn various techniques that can be used to hide our payloads from antivirus
    programs and clear our tracks after compromising the system.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Find and exploit vulnerabilities in the following vulnerable applications:'
  prefs: []
  type: TYPE_NORMAL
- en: DVWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutillidae
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Webgoat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
