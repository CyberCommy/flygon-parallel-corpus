- en: Connection Between Delegates and Lambda Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll take a look at the connection between delegates and Lambda
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Show Results button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open up a project and, inside the <html>, put in a single button that says
    Show Results. To do this, go to Toolbox and grab a `Button` control. Drag and
    drop it below the line beginning with `<form id=...`. You can delete the `<div>`
    lines as you don''t need them. Be sure to insert a `<br>` tag at the end of the
    line with the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I'll do a hodgepodge of things just to show you different concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Design view, and double-click on the Show Results button. This takes
    us into `Default.aspx.cs`. Delete the `Page_Load` block. Your initial code screen
    for this project should look like *Figure 6.1.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3e4308a-8be4-4a24-bef4-e473f2ba9749.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1.1: The initial Default.aspx.cs code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding delegates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first stage, you have to add delegates. While you could put these into
    a separate file, for our purposes let''s just place them here. So, enter the following
    above the line beginning with `public partial class...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember, delegates are function or method wrappers, actually. Then, directly
    below this line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can see here that we have two delegates. One returns a `Boolean` data type,
    and the other one returns a `double` data type.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, inside the event handler for `Button1_Click`, we''ll make two variables:
    `x` (which we set to `10`), and `y`, which equals `25`. So, enter the following
    between the set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Making objects of the delegate type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, the next thing that we will do is to enter the following below the preceding
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you begin to enter `Compare`, notice from the popup that once you have a
    delegate (`Compare`), essentially, you can make objects of that kind; then, type
    `comp`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining lambda expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, to define a lambda expression, you put `= (a,b)`, as shown. Then this will
    be mapped to the operations that follow; so you think of `=>` as the mapping symbol
    or mapping operator. It'll be mapped to the `(a==b)` operation. So, `comp`, in
    other words, will allow us to check whether the two values are the same, and that
    happens in the stage right where `a` and `b` are compared. Basically, `(a, b)`
    are the parameters, and the expression that is evaluated is whether `a` is equal
    to `b`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To invoke this, note that you type `comp` and then pass in the `x` and `y` values.
    Then, to show that you can operate on this further, once you get a result from
    it, you can convert it, say, to a string version, and then all to lowercase, as
    shown in the preceding code line.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, this is *function chaining*, so it goes from left to right as it executes.
    In other words, first `comp` runs, then `ToString` and lastly `ToLower`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that, at runtime, when you pass in the `x` and `y` values when `comp(x,
    y)` is called, basically, it is `(a==b)` that will be hit; the comparison will
    be made, and the value will be sent back.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can also do the `Multiply` delegate, so enter the following below
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `(a,b)` can be used and reused and so on. Remember that `(a,b)`
    here are parameters, and you can use them and reuse them. They're local within
    each of the lines where they appear. So, then you can use it in another one. Then,
    you say again that `(a,b)` maps to an operation of `(a*b)`. Close this with a
    semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to invoke this multiplication delegate (Lambda expression that it represents),
    copy (*Ctrl* + *C*) the `sampLabel.Text` line from above and paste it (*Ctrl*
    + *V*) down below, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we say `{x}*{y}` instead and then, `+=` to append, and delete `are equal`,
    and replace `comp` with `mult` as the name of our object. You don't need `toString`
    for it to work, and since it'll give back a number, you don't need `ToLower` either.
  prefs: []
  type: TYPE_NORMAL
- en: Operating an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in the next stage, another thing that you can do is operate an array.
    For example, you can make an array of doubles. We''ll call it `dubsArray`, and
    this will be a new `double` array. To do this, enter the following on the next
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Working with actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will talk about actions, so enter the following as the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `Action` is a delegate. So, if you right-click on `Action` and select
    Go To Definition, you'll see `public delegate void Action()`. If you expand it,
    it says, Encapsulates a method that has no parameters and does not return a value.
    This is the essential definition of an action in .NET.
  prefs: []
  type: TYPE_NORMAL
- en: You can extend an `Action` delegate, however. They can be generic. For example,
    if you type `Action<double>` and right-click on it and select Go To Definition
    again, this particular form does take a parameter. If you expand it, the Parameters
    section says, The parameter of the method that this delegate encapsulates. Further,
    the *Summary* section says, Encapsulates a method that has a single parameter
    and does not return a value. So, again, there's no need to guess. Right-click
    and select Go To Definition or hover your mouse over it. It tells you what you
    need to know. In our case, it will actually be `showDouble` as seen in the preceding
    line. Now, another lambda can be used to define this; so you insert `(a)` there
    as a single parameter, then, enter the mapping symbol `=>`, and then, `sampLabel.text`.
    You want to append this to the existing text, so type `+=`, and then, you say,
    `<br>`, and then show the square of `a`, type `+ (a * a)` and close with a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: Now remember from the definition of `Actions`, they do not return a value, right?
    In fact, if we type `Action<double>,` and look at the pop-up tip, if you go through
    the entire list up through T16, it says, Encapsulates a method that has 16 parameters
    and does not return a value, as shown in *Figure 6.1.2:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/290730d1-917b-43a2-a32e-80470a439338.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1.2\. None of the actions return a value after typing Action<double>,
  prefs: []
  type: TYPE_NORMAL
- en: So, none of them return a value. This is a basic feature of `Actions` as they
    are defined here, but remember that ultimately it's just a delegate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, for example, to make use of these `Actions`, one thing that you can do
    is to enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next stage, enter the following between a set of curly braces below
    this line to invoke the actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These are the basics of working with delegates and Lambda expressions. The two
    delegates at the top of the file are the heart of our program, followed by `Compare`
    and `Multiply`, which are the delegate types being used down below, and then the
    Lambda expressions, which are parameter expressions, such as `(a, b) => (a ==
    b)`, `(a, b) => (a * b)`, and `(a) => sampLabel.Text += "<br>" + (a * a)`, which
    are defined using those delegates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, take a look at this in your browser. Click on the Show Results button.
    It says, 10 and 25 are equal is false and 10*25 is 250, and then the squares are
    printed. These are the basic results, and everything looks as it''s supposed to
    look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9925cc6d-8d67-430e-b075-7fa7c6f5fcd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1.3\. The results of running our program
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review purposes, the complete version of the `Default.aspx.cs` file for
    this chapter, including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the connection between delegates and lambda expressions.
    You added delegates, set up the project variables, made objects of the delegate
    type, operated an array, and worked with `Actions`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about expression-bodied members and then
    lambda expressions defined by blocks of code.
  prefs: []
  type: TYPE_NORMAL
