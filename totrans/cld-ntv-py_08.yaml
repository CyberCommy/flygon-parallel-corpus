- en: Securing the Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will mainly discuss how to secure your application from
    external threats that could cause data loss, which, in turn, affects the overall
    business.
  prefs: []
  type: TYPE_NORMAL
- en: Web application security is always a concern for any business unit. Therefore,
    we not only look at the traditional application logic and data-related security
    issues, but at the protocol and platform concerns as well. Developers have become
    more responsible for ensuring compliance with the best practices regarding web
    application security.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping this in mind, this book is intended for application developers, system
    administrators, as well as DevOps professionals who want to keep their application
    secure, whether it is at the application level or platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Network security versus application security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of application authorization using different methods, such as
    OAuth, client authentication, and others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Word on developing security-enabled web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network security versus application security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today's scenario, web application security depends upon two primary surfaces--the
    web application itself and the platform on which it is deployed. You can separate
    these two surfaces, as any web application cannot be deployed with a platform.
  prefs: []
  type: TYPE_NORMAL
- en: The web application stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is very important to understand the distinction between a platform and an
    application because of the impact it has on security. A typical web application
    would have an architecture similar to the one depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Most web applications depend on web servers, such as Apache/HTTP server, Rails,
    nginx, and others, which actually handle the incoming request based on the type
    of application. These web servers keep track of the incoming traffic; they also
    validate the request and respond to it accordingly, considering all user authentication
    is validated. In our case, Flask acts as the web server for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Application - security alternatives in the platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described earlier, every web application needs to be deployed on some kind
    of a platform before it can be exposed to the outside world. An application platform
    provides the protocol support application, which is needed to communicate over
    a network. TCP, and, to a large extent, HTTP, are all handled at the application
    level.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the network stack of software architecture, there are two distinct layers,
    which include protocols ripe for web application attacks, in the application platform.
    These layers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see these layers in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Transport protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **Open Systems Interconnection** model (**OSI** model), the transport
    layer is commonly referred to as layer 4\. Web applications use TCP protocols
    as their transport protocol because of their reliability.
  prefs: []
  type: TYPE_NORMAL
- en: In **TCP** (**Transport Control Protocol**), each packet is closely monitored,
    and error recovery mechanisms are inbuilt, which is very useful in case of a communication
    failure. These mechanisms are exploited to attack web applications.
  prefs: []
  type: TYPE_NORMAL
- en: The most common attack is the **SYN flood** attack, which is a TCP request for
    acknowledgment attack. The SYN flood attack severely affects the application by
    using an idle session to establish a connection with the application server, and
    keeps on requesting until the server runs out of resources, and is no longer able
    to handle more requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to avoid such kinds of attacks, system administrators (developers
    have no control here) should set up a configuration related to timeout and idle
    behaviors after considering the impact on the customers. Another example of such
    kinds of attacks is the **Smurf attack** (please refer to this link for more details:
    [https://en.wikipedia.org/wiki/Smurf_attack](https://en.wikipedia.org/wiki/Smurf_attack)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure transport protocols**'
  prefs: []
  type: TYPE_NORMAL
- en: In the OSI network model, we also have some protocols on layer 5, which can
    make your network more secure and reliable--SSL/TLS. However, this layer also
    has some vulnerabilities (for example, Heartbleed, 2014 in SSL and man-in-the-middle
    renegotiation attack, 2009 in TLS).
  prefs: []
  type: TYPE_NORMAL
- en: Application protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In layer 7 (the topmost layer) of the OSI network model, the actual application
    resides in and uses the HTTP protocol for communication, which is where most of
    the application attacks occur.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP** (**Hypertext Transfer Protocol**) has mainly these two components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata**: HTTP headers contain the metadata, which is important for both,
    the application as well as the platform. Some examples of headers are cookies,
    content-type, status, connection, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Behavior**: This defines the behavior between the client and the server.
    There is a well-defined flow of how messages should be exchanged between an HTTP
    client (such as a browser) and the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main problem here is that an application, generally, doesn't have an inbuilt
    capability to identify suspicious behavior.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a client accesses the web application over a network, which may
    be attacked by consumption-based **denial-of-service** (**DoS**) attacks. In this
    attack, the client purposefully receives the data at a slower rate than the normal
    indicates which they are capable of in an attempt to maintain an open connection
    longer. Due to this, the web server's queue starts filling, and consumes more
    resources. If all the resources are used up with sufficient open connections,
    it is highly possible that the server may get unresponsive.
  prefs: []
  type: TYPE_NORMAL
- en: Application - security threats in application logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we look at the different methods that authenticate users, and
    make sure that our application is accessed by a genuine entity.
  prefs: []
  type: TYPE_NORMAL
- en: Web application security alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to secure our application from outside threats, there are a couple
    of alternative methods, which are described here. Usually, our application doesn''t
    have any intelligence to identify suspicious activities. Hence, some of the important
    security measures are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP-based Auth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth/OpenID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP-based Auth**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple **username** and **password** are hashed and sent to the web server
    by the client, like the one we have set up for our web application, as depicted
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This preceding screenshot image is of the UI that we created in [Chapter 6](part0122.html#3KB4K0-4022ecb0f8ea4b719ffb742bf2a6a072),
    *Creating UIs to Scale with Flux*. It is authenticated by the backend service
    (microservices) and user database, which is stored in the MongoDB database server.
    Also, in case of validating the user to log in to the home page, user data is
    read from the MongoDB collections, and then the user is authenticated to proceed
    further into the application. The following is the code snippet for the API that
    is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is one of the ways of setting up security at the application level so that
    application data can be made secure.
  prefs: []
  type: TYPE_NORMAL
- en: '**OAuth/OpenID**'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth is an open standard for authorization, and is very common among websites
    that allow users to authenticate using third-party credentials, which is, generally,
    the email ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listed next are the few key features that make OAuth better than other security
    measures:'
  prefs: []
  type: TYPE_NORMAL
- en: It has nothing related to any **OS** (**operating system**) or installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's simple and easy to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is more reliable and provides high performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is designed, specifically, for distributed systems, which need a centralized
    authentication method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a free-to-use, open source-based identity provider server software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides support for cloud-based identity providers such as Google, Auth0,
    LinkedIn, and others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also called **SSO** (**single signed-on** or token-based authentication)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setting up admin account**'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth doesn't work without a service to grant a **JWT** (**JSON Web Token**,
    a URL-safe JSON format for expressing claims that can be transferred between parties).
    You can learn more about JWT at [https://jwt.io/introduction/](https://jwt.io/introduction/).
  prefs: []
  type: TYPE_NORMAL
- en: An identity provider is responsible for authenticating a user for a web application
    that depends on authorization provided from a third party.
  prefs: []
  type: TYPE_NORMAL
- en: You can use any identity provider based on your preference, as features would
    be similar between them, but they will be variant in terms of functionality. For
    the scope of this chapter, I will show you how to authenticate using Google web
    apps (which is a developer API from Google) and Auth0 third-party applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting up using an Auth0 account**'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will set up an account in the Google developer tools for
    authentication, and in a third-party free application called **Auth0** ([auth0.com](http://auth0.com)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s kickstart the account setup in Auth0 ([auth0.com](http://auth0.com)),
    where the only requirement is an email ID to get registered or to sign up. Refer
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are registered/signed up for the Auth0 account, you will see the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This preceding screen is the dashboard where we can see the login activity as
    the user who logged in to the application. It also showcases the login attempts
    by the user, and keeps a log of the user's activity. In short, the dashboard gives
    you an insight into your application's user activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to add a new client for our application, so click on the +NEW CLIENT
    button to create it. The following screen will appear once you click on the +NEW
    CLIENT button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is self explanatory--you need to provide a user-defined
    name for the client (generally, the name should be related to the app). Also,
    you need to select the category of your application. Coming back to our case,
    I have given the name as `My App`, and selected the second option, that is, Single
    Page Web Applications, as we are using the technologies mentioned under it. Alternatively,
    you can also select Regular Web Applications--it works just fine. These categories
    are used for distinction between the kinds of applications we are writing, because
    it is highly possible we might be developing hundreds of applications under one
    account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the CREATE button to proceed with the creation of the client. Once
    it is created, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the section seen in the preceding screenshot, we have a lot of settings
    that are auto-generated, and we need them to be integrated with our web application.
    A few of the sections are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client ID**: This is a unique ID assigned to a particular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain**: This is similar to the authentication server, which will be called
    at application login'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client Secret**: This is a secret key, which should be kept safe and not
    be shared with anyone, as it could cause a security breach'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client Type**: This defines the type of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allowed Callback URLs**: This specifies the allowed callback URLs after user
    authentication, such as `http://localhost:5000/callback`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allowed Logout URLs**: This defines the URLs that will be allowed to be hit
    at the time of user logout, such as `http://localhost:5000/logout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token Endpoint Authentication Method**: This defines the method of authentication,
    which could be none, or post, or basic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other features of an Auth0 account that could be useful to manage your application
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SSO Integrations**: In this section, you can set up an SSO login with a couple
    of other third-party applications such as Slack, Salesforce, Zoom, and so on:![](img/00094.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connections**: This defines the type of authentication you want to define
    for your application, such as Database (username-password database), Social (integration
    with the existing account from social media websites such as Google, LinkedIn,
    and so on), Enterprise (for enterprise apps such as AD, Google Apps, and others),
    or Passwordless (by sms, email, and so on). By default, the username-password
    authentication is enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APIs**: In this section, you can manage the **Auth0 Management API** for
    your application, and test it, as described in the following screenshot:![](img/00095.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs**: This section keeps a track of your activity on the Auth0 account,
    which is very useful to debug as well as to identify suspicious activity at the
    time of threats. Refer to the following screenshot to find out more about Logs:![](img/00096.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the most important features of an Auth0 account that could help you
    manage your web application security in an efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: Now, our Auth0 admin account is set up, and is ready to get integrated with
    our web application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting up a Google API account**'
  prefs: []
  type: TYPE_NORMAL
- en: Google APIs use the OAuth 2.0 protocol for authentication and authorization.
    Google supports common OAuth 2.0 scenarios, such as those for web server, installed,
    and client-side applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To kickstart, log in to the Google API Console ([https://console.developers.google.com](https://console.developers.google.com))
    with your Google account to get the OAuth client credentials such as Client ID,
    Client Secret, and others. You will need these credentials to integrate with your
    application. You will see the following screen once you have logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screen showcases the Google library API offerings for their different
    Google products. Now, click on Credentials in the panel on the left-hand side
    to navigate to the next screen, as seen in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, click on Create credentials, and then on the OAuth client ID option to
    initiate the generation of client credentials from the API manager.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to feed some information about our application; you must remember
    these details that we have provided at the time of OAuth account as well. Once
    you are ready, and have filled the mandatory fields, click on Create to generate
    the credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the client ID is created, you will see the following screen, which will
    have the information related to the client ID (Credentials):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Remember, NEVER share the client ID details with anyone. In case you do, then
    reset it immediately. Now our Google API account is ready to be integrated with
    our web application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Integration of a web application with an Auth0 account**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to integrate the Auth0 account with our application, we need to create
    a new route for our callback. This route will set up the session after user authentication
    from the Auth0 account. So, let''s add the following code to the `app.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, I have used client credentials that we
    got from the Auth0 account console. These are the credentials we generated at
    the time of client creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add the route/dashboard to which the user is redirected after being
    authenticated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This preceding route simply calls `index.html`, and passes the session details
    to `index.html` as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have to modify our `index.html` to trigger authentication via Auth0\.
    There are two ways of triggering. The first one is to make the Auth0 domain as
    the landing page, which means that as soon as they hit the URL ([`http://localhost:5000`](http://localhost:5000)),
    the users will be redirected to the landing page for the Auth0 account. The other
    way is to trigger it manually by providing a button to trigger it.
  prefs: []
  type: TYPE_NORMAL
- en: For the scope of this chapter, we will be using a manual trigger, where the
    Auth0 account can be used as an alternative to log in to the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following code to `login.html`. This code will make a button
    appear on the login page, and if you click on that button, it will trigger the
    Auth0 user signup page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There is one more thing we need to take care of before we test our application--how
    to make our application aware of the session details.
  prefs: []
  type: TYPE_NORMAL
- en: As our `index.html` takes the session values and showcases them on our home
    page as well, it is used to manage the tweets from the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, update the body tag of `index.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is needed to show the user''s full name on the user interface.
    Next, you need to update the `localStorage` session details as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We are almost done now. I hope you remember that we have set up authentication
    checks when you tweet for a particular user in our microservices APIs. We need
    to remove those checks, because in this case, we are using Auth0 for authentication
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Awesome! Run your application, and see if you can see a screen like the following
    one at [`http://localhost:5000/`](http://localhost:5000/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, click on the Login using Auth0 button to get the Auth0 login/signup panel
    as shown in the next screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the required details, and click on Sign up now, and it will get registered
    in the Auth0 account. Remember, in this case, you don''t see any way to log in
    via email directly, because we are using username-password authentication. If
    you want to sign up via email directly, then you need to enable the google-OAuth2
    way extension in the social connection section. Once you enable it, you will be
    able to see your sign up page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have signed up successfully, you will be redirected to the home page,
    where you can tweet. If you see the following screen, that means it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'An important thing to notice here is that for each signup, a user is created
    in your Auth0 account with User Details, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! Now your application is integrated with the Auth0 account, and you
    can keep track of a user who makes use of your application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Integrating your Google API with the web application**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Integrating your Google API with your web application is quite similar to what
    we have seen in Auth0 integration. You need to follow the steps listed next for
    the integration of the Google API:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gathering OAuth credentials**: As discussed in the Google API client setup,
    we have already generated client credentials. We need to capture details such
    as Client ID, Client Secret, and others.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Obtaining an access token from the Google authorization server**: Before
    your application user can log in and access private data, it needs to generate
    an authentication token provided by Google, which acts as an authenticator for
    the user. A single access token can grant varying degrees of access to multiple
    APIs. A scope parameter contains the information about the extent to which the
    user will have access, that is, from which of the APIs the user can view data.
    Requesting of token depends on the way your application has been developed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Saving a token to the API**: Once a token is received by the application,
    it sends that token across to the Google API HTTP authorization headers. As mentioned
    earlier, this token is authorized to perform actions on a certain set of APIs
    based on the scope parameter defined.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Refreshing a token**: It is best practice to refresh a token after a certain
    period of time to avoid any security breach.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Token Expiration**: It is good practice to write for token expiration after
    a certain period of time, which makes the application secure; it is highly recommended.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we are developing an application based on Python, you can follow the
    docs URL, which has information about the implementation of Google-API-token-based
    authentication at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.google.com/api-client-library/python/guide/aaa_oauth](https://developers.google.com/api-client-library/python/guide/aaa_oauth).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user is authenticated, and starts using the application, you can monitor
    the user login activities on the API Manager ([https://console.developers.google.com/apis/](https://console.developers.google.com/apis/)),
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up authentication using Google is slightly difficult, and needs supervision.
    That's why, developers go with tools like Auth0, which can provide integration
    with Google directly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows authentication**'
  prefs: []
  type: TYPE_NORMAL
- en: Historically, this option has been preferred for applications being used for
    intranet and enterprise sites even if they are deployed on internal or private
    clouds. However, this is not suitable for the cloud native security option for
    a number of reasons.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Windows authentication, go to the link [https://en.wikipedia.org/wiki/Integrated_Windows_Authentication](https://en.wikipedia.org/wiki/Integrated_Windows_Authentication).
    We have showcased these security methods for your understanding, but our authentication
    method remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: A word on developing security-enabled web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With an increase in web applications on the **World Wide Web** (**WWW**), the
    concerns over application security have increased as well. Now, the first question
    that arises in our mind is why we need security-enabled applications--the answer
    to this is quite obvious. But what are its essential principles? Following are
    the principles that we should keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: A hacker can easily exploit your application if he gets familiar with the language
    in which the application got created. That's why, we enable techniques such as
    CORS to secure our code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the application and its data should be given to very limited people
    in your organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A way of authentication, authorization secures your application from both, the
    WWW as well as within your private network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these factors, or as I would say, principles, drive us to create security-enabled
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we kickstarted by defining security on different application
    stacks, and how we can implement or integrate different application security measures
    with our application, based on your preference and application requirement.
  prefs: []
  type: TYPE_NORMAL
- en: So far we've talked about application building. But from now on, we will focus
    entirely on building a platform for moving our application from the development
    stage to production using DevOps tools. So, things are going to get more interesting.
    Stay tuned for further chapters.
  prefs: []
  type: TYPE_NORMAL
