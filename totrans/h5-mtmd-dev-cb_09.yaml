- en: Chapter 9. Data Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing browsers for data storage support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using browser developer tools to monitor web storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting and getting session storage variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting and getting a local storage variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting local storage strings to numbers using `parseInt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a web SQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a web SQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a cache manifest and using sites offline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the current location using the Geolocation API and `geo.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduces a new way to store information without using cookies. This
    gives designers and developers more flexibility in how dynamic content is processed
    and displayed. We will begin with testing browsers for support of the three main
    data storage methods, and end by creating an HTML5 page that uses local storage
    to store and access a video. Although each of these recipes build on each other,
    you do not have to complete them in the order they are presented. The example
    files from this chapter are available for download at [http://www.packtpub.com/support?nid=7940](http://www.packtpub.com/support?nid=7940).
  prefs: []
  type: TYPE_NORMAL
- en: Testing browsers for data storage support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing how to test quickly whether a browser supports a data storage method
    you want to use will make developing pages and applications easier. In this recipe,
    we will create a script that queries a browser's DOM to test for support of different
    data storage methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need access to a modern browser such as Firefox 3.6, or the latest
    versions of a popular browser such as Google Chrome, Opera, Safari, or Internet
    Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we are going to create a simple html page. Open an HTML editing program
    or a text editor, and enter the starting code for a basic HTML5 page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The look of the test page now needs to be styled. We will use `<style>` tags
    within the `<head>` tags HTML page, but you could also place them in a separate
    CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Type a closing `head` tag, then create a `body` tag as shown below. Notice the
    big difference is we are calling a `RunTest()` function to activate when the page
    loads.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Create a paragraph tag with descriptive text similar to what is show below.
    Close the tag, and create an `<h3>` header tag to contain the result heading.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, type each storage method followed by a span tag that is styled by the
    class value. Type the ID of the storage method and the text "not supported". Close
    the span tag and add a break tag to separate the results onto individual lines
    in the browser window. The results'' display area should look like the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We are almost done creating our test page. Create a paragraph explaining the
    purpose of the test. Finish the content area off with a `<footer>` tag to contain
    the script block we will be adding next. The descriptive text should look like
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add `script` tags so that the browser will process a small test
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a case statement that includes a block of code for each
    data storage method we are going to test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `data-storage-support-test.html`, and open it in your browser
    window. You should see a result similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML5 test page we created used a small snippet of JavaScript code to query
    the browser to see if it supported specific storage methods. We began by writing
    a standard HTML5 page with the appropriate `<html>, <head>`, and other document
    tags. If you need a refresher on them, they are covered in the earlier chapters
    of this book. Next, we set up the opening block of a JavaScript code snippet using
    the simplified `<script>` tag. The HTML5 JavaScript API is covered in more detail
    elsewhere in this book. We created a function named `RunTest()` to contain the
    variables and code. Two variables were then created. The variable supp was given
    the value of an empty string. This would contain the final support result for
    each storage method. We're looping through the properties of the window object.
    During each iteration the current property is temporarily stored in the `mydata`
    variable. This allows us to test the property against the three cases.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we use a switch statement to test the `mydata` variable against the particular
    properties in which we are interested. Because we are only testing a single value
    at a time, and the list is short, this is a good way to test for support of each
    storage method. The body of the `switch` statement contained three cases, one
    for each storage method. Each case contains an expression that must be evaluated.
    If the storage method is supported, the final action of each case is to change
    the value of the result text in the main body of the document from "not supported"
    to "supported" if the expression evaluates as true. If the case does not evaluate
    as true, then the text displayed in the result section of the page will remain
    unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the code we controlled the presentation of the results using
    CSS styles. A container to display the box was created using a div tag named results,
    and a background color, font colors, and weight were specified. This was the last
    block of code for the head section of the html page.
  prefs: []
  type: TYPE_NORMAL
- en: The body section of the page was then created. The test was set to activate
    when page loaded in the browser using the `onload` command. The opening text and
    title for the result box were written, and the display text for each result was
    tied to a unique ID. The closing tags were then entered to complete the page.
    After saving the page, the results were then displayed on the screen when the
    test page was viewed in the browser window. The browser used in the screenshot
    was Firefox 3.6.13\. The results we saw mirrored the current support Firefox offers
    in versions 3.6 and 4.0.3 for storage methods. This helped us determine that we
    could expect Firefox visitors to view and use any features easily on a web page
    that depended on local storage and session storage methods. They would be unable
    to take advantage of any features dependent upon WebSQL.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing sites and online applications has never been easier. There are many
    tools and services available that can be used to test on different platforms and
    across browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download multiple browsers on smart devices, such as the iPod Touch
    or iPad, enabling you to test the responsiveness of your rich media content on
    mobile devices and different browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe browser lab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adobe CS5 is not required to try Adobe BrowserLab, an online cross-browser testing
    tool that is integrated with Adobe CS5 products. Visit [https://browserlab.adobe.com](https://browserlab.adobe.com)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Free cross-browser and OS testing with BrowserShots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An alternative for those on a budget and with time to spare is [BrowserShots.org](http://BrowserShots.org).
    This site enables visitors to enter the URL of their website and then select from
    an enormous list of browsers and operating systems. It can take a few minutes
    for the results to appear using the free version of the service.
  prefs: []
  type: TYPE_NORMAL
- en: Using browser developer tools to monitor web storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web storage can be challenging to test. Using developer tools in browsers, such
    as Safari or Firefox addons such as Firebug, make it easier to diagnose issues
    and track the values of variables. In this recipe, we will use the native developer
    tools in the Google Chrome browser to explore the key/value pairs stored in the
    local storage area of a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a recent version of the Google Chrome browser and one of the local
    storage code files for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open one of the local storage exercise files from this chapter in a Google Chrome
    browser window.
  prefs: []
  type: TYPE_NORMAL
- en: Click **View**, select **Developer** from the **View** menu, and then choose
    **Developer tools** from the **Developer** fly-out menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the **Developer** window appears over the current page, select the **Resources**
    tab, click **Local Storage** in the navigation area of the Google Chrome Developer
    Tools window, and then the submenu within it. You should see a result similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Local Storage section under the Resources tab of the Google Developer tools
    window gives us access to local storage areas for each page. It displays keys
    and their corresponding values on the right side of the screen. If you right-click
    on an object you will have the option to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We loaded a page that we knew used local storage to test how the Google Developer
    tools window available in the Google Chrome browser would display key/value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: When we navigated down the left menu of the developer tools we could choose
    from different web storage methods and other resources.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many free plugins and native browser tools of which developers can
    take advantage.
  prefs: []
  type: TYPE_NORMAL
- en: Use a Firebug addon even if you don't use Firefox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Firefox users have long enjoyed debugging and browsing websites and other online
    applications using the Firebug addon ([http://getfirebug.com/downloads](http://getfirebug.com/downloads)).
    Users of Opera, Google Chrome, Safari, and IE 6+ can use Firebug Lite ([http://getfirebug.com/firebuglite](http://getfirebug.com/firebuglite))
    and experience similar functionality with a lightweight bookmarklet they can easily
    add to their browser.
  prefs: []
  type: TYPE_NORMAL
- en: Safari developer tools are native to the Safari browser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the Safari browser open, click **Safari**, select **Preferences**, and
    click on the **Advanced** tab. Click the checkbox next to "Show **develop menu
    in menu bar"** to begin using the native developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: Setting and getting a session storage variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Session storage and local storage both share the web storage API. In this recipe,
    we will define two session storage variables, and then display them on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need an up-to-date browser that supports session storage. Safari and
    Google Chrome respond best if you are testing your files locally on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create the head area of an HTML5 page and an opening `body`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Add a `section` and an `article` tag. Give the article tag an ID of "aboutyou".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create two session storage variables using the `setItem` method
    as show in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will display the session storage variables we just set on the screen
    using the `getElementByID` and `getItem` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The results should display on the HTML page in the browser similarly to how
    they are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We set two session variables to unique values in this example. Session storage
    uses key/value pairs, so each variable must be set with a value when created.
    By default, these values are strings.
  prefs: []
  type: TYPE_NORMAL
- en: We defined a session variable for the person's nickname by typing `sessionStorage.setItem('`
    then added a name for our variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We named the variable `"nickname"` and gave it the value of "Jumpin Joseph":
    `''nickname'', ''Jumpin Joseph'')`;.'
  prefs: []
  type: TYPE_NORMAL
- en: When we created a second session variable to contain the variable named `"interest"`
    and its value, we used the same syntax format as we did when setting the first
    session variable.
  prefs: []
  type: TYPE_NORMAL
- en: Although normally these variables would be populated with values from a form,
    we focused on using the correct syntax in the example. The `sessionStorage` keyword
    identified the type of storage method. We followed that with a period which attached
    the action `setItem` to the keyword. The variable `nickname` was then declared
    and given a value of `Jumpin Joseph`. What this will tell the browser when it
    is used is to create a new session storage variable named "nickname" and store
    the value of "Jumpin `Joseph"` inside it. We then created a second session storage
    variable just because we could. We will use a form to pull variable values in
    the local storage example in this chapter to give a full lifecycle view of storage
    method creation, usage, and destruction.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Session storage gives us a more powerful way to provide short-term client side
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: One browser, one session
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Session storage is best used for situations that do not benefit from visitors
    using multiple tabs of their browser to navigate a site, and where the need for
    storage is temporary. While the data storage area of the HTML5 specification is
    still evolving, and the security does not have a long track record for use by
    financial institutions or other websites where information must be highly secure,
    there are still many useful ways to take advantage of session storage.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting and getting a local storage variable recipe*.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting and getting a local storage variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although session storage is temporary, and lasts only as long as a browser session
    is active. Local storage persists even after a browser is closed. In this recipe,
    we will create a story-writing application using the HTML5 `contenteditable` attribute
    and local storage.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should be using a recently updated browser. This recipe works best in Google
    Chrome and Safari but also functions fine in Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First create a basic HTML5 page, and then add a script tag between the opening
    and closing `head` tags. The script should link to the 1.5.2 minimized jQuery
    library at [http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js](http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js).
    Your code should now look similar to the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add CSS styles to set the `background-color` and text `color`
    of the article tag as well as the `font-family`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Close the `head` tag and create opening tags for the `body` and `header` elements.
    Add an `h1` tag to display `Storywriter` as the page title, and close the `header`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Create opening tags for the `section` and `article` elements. Add an id of "mypage"
    to the `article` element, and set the `contenteditable` attribute to "true".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a paragraph tag which contains the placeholder text `type something`,
    and then close the paragraph, `article`, and `section` tags. Add descriptive instructional
    text between two `em` tags. What you just entered should look like the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Create a `script` tag, and then declare the jQuery function by typing `$(function(){`.
  prefs: []
  type: TYPE_NORMAL
- en: Invoke the `document.getElementById` method with an argument string of "mypage",
    assigning it to the variable 'edit'.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to add an event handler triggered by the blur event on the 'edit'
    element. Type `$(edit).blur(function(){` , and then type `localStorage.setItem('storyData",
    this.innerHTML);})`; to complete the function.
  prefs: []
  type: TYPE_NORMAL
- en: Now that local storage can store strings with `setItem`, we can use `getItem`
    to push the stored string content back onto the page by typing `if ( localStorage.getItem('storyData')
    ) { edit.innerHTML = localStorage.getItem('storyData'); } })`;
  prefs: []
  type: TYPE_NORMAL
- en: 'The script code block should now look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the body and HTML tags, and save the file. Open it in a browser window.
    You should now be able to begin typing your own story and see the entered text
    display on the page, even if you close the browser and reopen it again later.
    It should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we set the `article` tag's `contenteditable` attribute to `true`, we told
    the browser to allow users to enter text. Most HTML5 elements can have a `contenteditable`
    attribute declared and then set to `true` or `false`. We then captured the content
    as it was entered using `document.getElementById` using the id `mypage`. The `getElementById`
    jQuery method searches the document for a specific ID name listed in its argument.
    We then added an event handler on the `blur` event to smooth the look of the text
    being entered. We also stored the text at the same time using the local storage
    method `setItem` and the variable `storyData`. Finally, we used the `getItem`
    local storage method to check if `storyData` existed, and if it did, to load it
    into an editable HTML element with `edit.innerHTML` and `getItem`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier chapters in this book on HTML5 elements, and PACKT jQuery books.
  prefs: []
  type: TYPE_NORMAL
- en: Converting local storage strings to numbers using parseInt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take a string value from local storage and convert it
    into an integer so we can perform a mathematic operation on it by using `parseInt`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using Modernizr ([http://www.modernizr.com](http://www.modernizr.com))
    to detect if local storage is available, hosting it locally in a subfolder named
    "js". You will also need at least one recently updated browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the beginnings of a new html page up to the title tag as shown in the
    code block below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Next, add styles to specify the font-family, the text color of the `h1` and
    `h2` tag, and a background-color and height for the `h2` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an IE HTML5 shiv, hosted by Google, and a link to a local Modernizr JavaScript
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform a check to see if local storage is supported by the browser with some
    help from the Modernizr script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Create a function named `storemyradius()`, declare a variable named `myradiusToSave`,
    and assign it `document.getElementById('myradius').value`; to pass the value entered
    by the visitor into the text field when they click save.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `if` statement to check if `myradiusToSave` is null. Below that, create
    a local storage `setItem` method with a key of "myradius" and a value of "myradiusToSave".
    Place a function call to `displaymyradius()`; before the closing bracket of the
    `if` statement and the `storemyradius` function as shown in the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function named `displaymyradius`, which accepts no arguments, and
    then add a variable named `myradius`. Assign to it the JavaScript function `parseInt`
    containing a local storage `getItem` method with an argument of "myradius" and
    a radix of 10\. The function should look like the following code block so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the same function, create an if statement that will check to see that the
    `myradius` variable is not null and is greater than zero. Create the variable
    `diameter`, and assign as its value the result of multiplying `2` times the value
    in `myradius`. Use `document.getElementById` and `innerHTML` to display the value
    of the diameter variable along with the message "The `diameter of the circle is"`
    between the h2 tags in the body of the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function named `clearmyradius` that accepts no arguments, and then
    create an `if` statement that checks if the local storage `getItem` method contains
    a value that is not null. Between the `if` statement brackets, place the local
    storage `removeItem` method with an argument string of "myradius" and a call to
    the local storage `clear` method. Close the script and head tags. The code we
    just wrote should look similar to the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create opening body, section, `hgroup` and `h1` tags, and type `"localStorage
    Number Conversion"` before the closing `h1` tag. Create an `h2` tag and assign
    it an ID of `"yayanswer"`. Close the `hgroup` tag, and then add a label tag for
    the `myradius` text field. Type `"Enter the radius of the circle:"` as the label
    text. Create an input form field tag with an ID of `"myradius"` and a `maxlength`
    of `"4"`. Create two input buttons, one with an `onclick` value that calls the
    function `storemyradius()`; and another with an `onclick` value that calls the
    function `clearmyradius();.` Close the section, body, and html tags, and save
    the page. The final block of code should look like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the finished HTML page should look in a Google Chrome browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The text field displayed in the HTML page accepts what the visitor types and
    passes it as a value to the `storemyradius()` function. We declared a variable
    named `myradiusToSave` and assigned it `document.getElementById('myradius').value`;
    which stored the value contained in `myradius`. It in turn will pass the value
    entered in the text field "myradius" to the `setItem` method of local storage.
    Before the value can be passed to local storage we needed to verify that `myradiusToSave`
    actually contained a value that was not null. If it is not null, then there is
    data to save to local storage. The value was then saved to local storage, using
    `setItem` as a part of a key/value pair. To use the `myradius` value as a number,
    we needed to convert it back from a string to an integer. This was done by calling
    the `parseInt` JavaScript function. Next, we created a variable named `diameter`
    to hold the result of our diameter formula, which is 2 multiplied by the value
    of the radius. Finally, we returned the result to the screen using the `getElementbyId`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: The other option we had on the page was to clear the value of the local storage
    variable. While we could have just used the `removeItem` method, using the clear
    method as well insured that there were no other local storage variables lurking
    around. A refresh of the page with Google Developer Tools open verified that the
    local storage area was empty.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently by default `localStorage` stores all data as strings. We just practiced
    converting `localStorage` variables into integers, but they can also be converted
    into objects such as arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and retrieving arrays in localStorage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There will be many times when you will want to use arrays with `localStorage`
    to save progress in a game or retain user data or messages. You can use the JSON
    library by Douglas Crockford to streamline the storing and retrieving of arrays.
    Visit [https://github.com/douglascrockford/JSON-js](http://https://github.com/douglascrockford/JSON-js)
    to download code and learn more about JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML5 page, and add script tags between two footer tags. Declare
    a new variable array named "horsedef", and assign it the following key/value pairs
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, set a new item named "describehorse" in local storage, while also using
    `JSON` to turn our array `horsedef` into a string as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieve the values from local storage using JSON parse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the page, and open a browser window. You should see an alert box showing
    the key/value pairs in the `horsedef` array that were passed to `describehorse`
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Storing and retrieving arrays in localStorage](img/1048_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Beware of cross-site callbacks when using JSON. It is usually best to download
    and use a file off your own server. Always download your copy of JSON directly
    from the source. Don't fall for imitations like JSONP.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Web SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will create a web SQL database and give it attributes that
    define its version, name, size, and description.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to be using a current browser that supports web SQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new HTML5 file, and place opening and closing script tags between
    two footer tags. Declare a variable named `db`, then assign `openDatabase()` to
    it. Give `openDatabase` the following arguments: `''mymotodb'', ''1.0'', ''Motocross
    Rider List DB'', 2 * 1024 * 1024`, and then close the declaration. The code should
    look like the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All web SQL databases use the `openDatabase` method to assign values to a database.
    The first argument "mymotodb" was the name of the database. The next and required
    argument was the version number. The number here must match whenever the user
    attempts to use the web SQL database. Next, we defined the description of the
    database, then the estimated size. Once all the arguments are defined for the
    requested `openDatabase` method, the database is created and a first (and invisible)
    transaction takes place — the creation of the database itself.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browser implementation of specifications such as Web SQL databases has been
    very unpredictable and so has the support of such specifications themselves within
    the web development community.
  prefs: []
  type: TYPE_NORMAL
- en: Web SQL may be replaced by SQLite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Web SQL database specification itself is no longer being maintained by the
    W3C, but it works reasonably well in most browsers. It is possible within the
    next year or so that enough major stakeholders will agree on how to implement
    a different client-side database solution such as SQLite, but such things can
    be difficult to predict. Keep an eye on the specification at [http://www.w3.org/TR/webdatabase/](http://www.w3.org/TR/webdatabase/)
    for updates on current options for using client-side databases.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Web SQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will take the database we created in the previous recipe
    and add tables and data to it then display the results on an HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a current browser and an HTML5 page with basic tags for the head
    area and body area.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On a basic HTML5 page, add an `h1` tag to display a page heading, and then
    create a `div` tag with an ID of "status" to hold our results as shown in the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Begin the script as shown in the previous recipe to create the database if
    you have not already. Create a new variable named info, and then create a new
    transaction that contains a function that accepts an argument. Using the passed
    argument, create a table named RIDERS with a unique id and a row named `ridername`.
    The code should look similar to the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add data into the table rows, with a number for the unique id and a text string
    for each name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform a query to pull data from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new variable and `for` loop to cycle through results and print them
    to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Close the script and the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we open the page we just created in a browser, we’ll see the information
    we used the database to display. This is because the query and loop work together
    to look through the database and display the appropriate information.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security and database transactions in HTML5 can be poorly executed. Care should
    be taken to safeguard any pages that accept SQL queries in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Save script code in a separate file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To keep things simple in this recipe, we did not stash the SQL query code and
    JavaScript in a separate file. This could be done by saving the code in a subfolder
    such as `../js/myCode.js`. Beware using web SQL, Indexed DB or any other type
    of browser-based query APIs for secure information.
  prefs: []
  type: TYPE_NORMAL
- en: Guard against SQL injection on production servers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Anytime there is an editable field, some bot is likely going to come along and
    try to perform a SQL Injection attack. Basic precautions can be taken by using
    "?" within transaction requests. The following code shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packt books on SQL, any Packt HTML5 books that also cover client-side databases.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a cache manifest for offline storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will create a cache manifest file to enable us to store an
    HTML5 page offline and still view the images and video displayed on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need an HTML5 page, such as the one provided in the code files of this
    recipe, and access to upload files to a server, and then view them on a computer,
    smart phone, or other web-enabled device with a browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create the Cache Manifest file. This should be created in a
    simple text editor. It should contain all the files and supporting code a user
    will need to access while offline. The first thing listed is the current file
    type (CACHE MANIFEST). The version number of the manifest should also be included.
    Notice we add paths to all the files we want the users to have access to in the
    following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a manifest attribute to the `index.html` page between the opening `DOCTYPE`
    tag and `head` tags as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a `.htaccess` file to create the correct mime type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The page should display similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a cache manifest gives a browser a checklist to use when loading a
    page offline. While the idea behind storing a page offline is that it should not
    need to update frequently, using a version number allows the author to push updates
    to the user the next time they connect to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Not all browsers or systems can properly interpret the manifest file type, so
    including an `.htaccess` file ensures that the cache manifest is recognized correctly.
  prefs: []
  type: TYPE_NORMAL
- en: You can exclude files that you feel are not crucial to lower the size of the
    offline page and reduce load time.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the current location using geolocation and geo.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the geolocation specification and `geo.js` to display
    the current location of an active user on a map, and show their current latitude
    and longitude.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit [http://code.google.com/p/geo-location-javascript/](http://code.google.com/p/geo-location-javascript/)
    to download the latest version of `geo.js`, or grab the link URL from the wiki
    (http://code.google.com/p/geo-location-javascript/wiki/JavaScriptAPI) to link
    to it directly online.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create HTML5 opening page tags:<head></head>.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the meta tag, we will set the name attribute to "viewport", and define
    the following values for the content attribute: `width = device-width; initial-scale=1.0;
    maximum-scale=1.0; user-scalable=no`;'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, declare a script tag with the src attribute of: [http://code.google.com/apis/gears/gears_init.js](http://code.google.com/apis/gears/gears_init.js)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, call the `geo.js` script: `src="img/geo.js"`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code block should look like the following so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a script tag for the Google Maps API: `<script type="text/javascript" src="img/js?sensor=false"></script>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a function to initialize the map named `initialize_map()`,
    and then create an array named `myOptions` to store the map attributes. The attributes
    are based on the Google Maps API. They should look similar to the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Add a new map to the page named map using the method `google.maps.Map()`, which
    takes the `document.getElementById` element as an argument, which in turn is being
    passed the id "map_canvas". The other method accepted by `google.maps.Map` is
    `myOptions`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Create the `initialize()` function, and add an `if` statement to check if the
    `geo_position_js.init()` function is active. Enter a new status for the div with
    the id of "current" using `document.getElementById` and `innerHTML`. Type "Receiving…"
    for the status text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Add helper message text to display if we are not able to fetch the location
    or if for whatever reason the browser does not support fetching the current position,
    as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Create a new variable named `infowindow` to display the `google.maps InfoWindow`,
    a bubble that will display when a marker is clicked. Give it a text string of
    "yes" to display. Create a new marker tied to the current position of the user,
    along with title text for the marker that will display on mouse or pointer hover.
    Add an event listener to detect when the marker is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Style the page to control the font-family, padding, and the look of the title
    and current divs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Create an `onLoad` command in the body tag that initializes both `initialize_map()`;
    and the `initialize()`; function on page load. Create a new `div` to display the
    page title and a second `div` with an id of "current" to display the current status
    of the location fetching process. Finally, create a `div` with an id of `map_canvas`
    to contain the map once it displays, and set the width and height of the `div`
    using an inline style. Close the tags and save the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Open up the page in a browser window, and you should see a result similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using `geo.js` simplifies using geolocation for multiple devices. It provides
    prepared error messages and follows the W3C implementation standards, as well
    as the ability to "fall back" to tools such as Google Gears. First, we had to
    create a script with variables to contain arrays of map display and processing
    options, instantiate a new map object, and draw a marker to pin the current location
    of the user onto the screen. Hovering over the pin displayed a bubble window with
    title text. This same text could contain a link to pull and show driving directions,
    reviews, or notes. When the page was loaded, the map options creation function
    `map_initialize()`, and the main action triggering function `initialize()` was
    called. A temporary status message was displayed while the current location of
    the user was determined with the help of `geo.js`, and the map was drawn.
  prefs: []
  type: TYPE_NORMAL
