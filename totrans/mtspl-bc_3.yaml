- en: Exploitation and Gaining Access
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the [Chapter 2](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790), *Identifying
    and Scanning Targets*, we had a precise look at scanning multiple services in
    a network while fingerprinting their exact version numbers. We had to find the
    exact version numbers of the services running so that we could exploit the vulnerabilities
    residing in a particular version of the software. In this chapter, we will make
    use of the strategies learned in the [Chapter 2](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790),
    *Identifying and Scanning Targets,* to successfully gain access to some systems
    by taking advantage of their vulnerabilities. We will learn how to do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Exploit applications using Metasploit
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test servers for successful exploitation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack mobile platforms with Metasploit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use browser-based attacks for client-side testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and modify existing exploit modules in Metasploit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let us get started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the practice environment
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter and the following ones, we will primarily practice
    on Metasploitable 2 and Metasploitable 3 (intentionally vulnerable operating systems).
    Additionally, for the exercises which are not covered in Metasploitable distributions,
    we will use our customized environment:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Please follow the instructions to set up Metasploitable 2 at [https://community.rapid7.com/thread/2007](https://community.rapid7.com/thread/2007)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To set up Metasploitable 3, refer to [https://github.com/rapid7/metasploitable3](https://github.com/rapid7/metasploitable3)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the excellent video tutorials to set up Metasploitable 3 at [https://www.youtube.com/playlist?list=PLZOToVAK85MpnjpcVtNMwmCxMZRFaY6mT](https://www.youtube.com/playlist?list=PLZOToVAK85MpnjpcVtNMwmCxMZRFaY6mT)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting applications with Metasploit
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider yourself performing a penetration test on a class B range IP network.
    Let''s first add a new `workspace` for our test and switch to it, as shown in
    the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: We added a new `workspace` by issuing the `workspace` command followed by the
    `-a` switch followed by the name of our new workspace. We switched our `workspace`
    to the one we just created by issuing the `workspace` command again followed by
    the name of the workspace, which, in our case is `ClassBNetwork`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout [Chapter 2](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790),
    *Identifying and Scanning Targets*, we used the tcp portscan auxiliary module
    heavily. Let''s use it again and see what surprises we have on this network:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00171.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'Nothing fancy! We merely have two open ports, that is, port `80` and port `22`.
    Let''s verify the information found in the scan by issuing the `hosts` command
    and the `services` command, as shown in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00174.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: We can see that the information captured in the scan now resides in Metasploit's
    database. However, we did not find much in the scan. Let's run a more accurate
    scan in the next section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Using db_nmap in Metasploit
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nmap is one of the most popular network scanners and is most widely used in
    penetration testing and vulnerability assessments. The beauty of Metasploit is
    that it combines the power of Nmap by integrating and storing results in its database.
    Let''s run a basic stealth scan on the target by providing the `-sS` switch. Additionally,
    we have used the `-p-` switch to tell Nmap to scan for all 65,535 ports on the
    target, and the `--open` switch to list all the open ports only (this eliminates
    filtered and closed ports), as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'We can see providing the preceding command runs a thorough scan on the target.
    Let''s analyze the output generated from the scan as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: 'We can see a number of ports open on the target. We can consider them as an
    entry point to the system if we find any of them vulnerable. However, as discussed
    earlier, to exploit these services, we will need to figure out the software and
    its exact version number. `db_nmap` can provide us with the version of software
    running by initiating a service scan. We can perform a service scan similarly
    by adding the `-sV` switch to the previous scan command and rerunning the scan:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: 'Awesome! We have fingerprinted almost 80% of the open ports with their exact
    version numbers. We can see we have many attractive services running on the target.
    Let''s verify whether all the information we gathered from the scan has successfully
    been migrated to Metasploit by issuing the `services` command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'Yup! Metasploit has logged everything. Let''s target some web server software
    such as Apache Tomcat/Coyote JSP Engine 1.1 running on port `8022`. However, before
    firing any exploit, we should always check what application is running on the
    server by manually browsing to the port through a web browser, as shown in the
    following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Surprise! We have Desktop Central 9 running on the server on port `8022`. However,
    Desktop Central 9 is known to have multiple vulnerabilities and its login system
    can be brute-forced as well. We can now consider this application as a potential
    door we need to blow off to gain complete access to the system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting Desktop Central 9 with Metasploit
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw in the previous section that we discovered ManageEngine''s Desktop Central
    9 software running on port `8022` of the server. Let''s find a matching module
    in Metasploit to check whether we have any exploit module or an auxiliary module
    that can help us break into the application, as shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00202.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: Plenty of modules listed! Let's use the simplest one first, which is `auxiliary/scanner/http/manageengine_desktop_central_login`.
    This auxiliary module allows us to brute force credentials for Desktop Central.
    Let's put it to use by issuing a `use` command followed by `auxiliary/scanner/http/manageengine_desktop_central_login`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, let''s also check which options we need to set for this module
    to work flawlessly, as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00212.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: We will apparently need to set `RHOSTS` to the IP address of the target. Breaking
    into an application would be much more fun if we had an admin account which would
    not only provide us with the access but also grant us privileges to perform various
    operations. Therefore, let's set the USERNAME to `admin`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Brute-force techniques are time-consuming. Hence, we can increase the number
    of threads by setting THREADS to `20`. We also need a list of passwords to be
    tried. We can quickly generate one using the CEWL application in Kali Linux. CEWL
    can quickly crawl through pages of the website to build potential keywords which
    may be the password of the application. Say we have a site called `nipunjaswal.com`.
    CEWL will pull off all the keywords from the site to build a potential wordlist
    with keywords such as Nipun, Metasploit, Exploits, nipunjaswal, and so on. The
    success of CEWL has been found way higher than the traditional brute force attacks
    in all my previous penetration tests. So, let us launch CEWL and build a target
    list as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00221.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: 'We can see CEWL has generated a file called `pass.txt` since we provided the
    name of the file to write to using the `-w` switch. Let''s set `pass_file` with
    the path of the file generated by CEWL, as shown in the following screenshot,
    and run the module:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'Within a fraction of a second, we got the correct username and password combination,
    which is admin: admin. Let''s verify it by manually logging into the application
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Yeah! We have successfully logged into the application. However, we must take
    a note that we have just managed application-level access and not system-level
    access. Moreover, it can't be called a hack since we ran a brute-force attack.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们已成功登录应用程序。但是，我们必须注意，我们只是管理了应用程序级别的访问，而不是系统级别的访问。此外，这不能被称为黑客行为，因为我们进行了暴力破解攻击。
- en: CEWL is more effective on custom web applications, as administrators often tend
    to use words they encounter everyday while setting up new systems.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: CEWL在自定义Web应用程序上更有效，因为管理员在设置新系统时经常倾向于使用他们每天遇到的单词。
- en: 'To achieve system-level access, let''s dig into Metasploit again for modules.
    Interestingly, we have an exploit module which is `exploit/windows/http/manageengine_connectionid_write`.
    Let''s use the module to gain complete access to the system:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现系统级别的访问，让我们再次深入Metasploit寻找模块。有趣的是，我们有一个利用模块，即`exploit/windows/http/manageengine_connectionid_write`。让我们使用该模块来完全访问系统：
- en: '![](img/00008.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: 'Let''s set the `RHOST` and `RPORT` to `172.28.128.3` and `8022` respectively
    and issue the `exploit` command. By default, Metasploit would take reverse meterpreter
    payload, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`RHOST`和`RPORT`分别设置为`172.28.128.3`和`8022`，然后发出`exploit`命令。默认情况下，Metasploit将采用反向meterpreter载荷，如下面的屏幕截图所示：
- en: '![](img/00002.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00002.jpeg)'
- en: 'We have the meterpreter prompt, which means we have successfully gained access
    to the target system. Not sure how and what happened in the background? You can
    always read the description of the exploit and the vulnerability it targets by
    issuing an `info` command on the module, which will populate details and description
    as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有了meterpreter提示，这意味着我们已成功访问了目标系统。不确定背景中发生了什么？您可以通过在模块上发出`info`命令来阅读利用和它所针对的漏洞的描述，这将填充以下详细信息和描述：
- en: '![](img/00003.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00003.jpeg)'
- en: 'We can see that the exploitation occurs due to the application not checking
    for user-controlled input and causes a remote code execution. Let''s perform some
    basic post-exploitation on the compromised system since we will cover advanced
    post-exploitation in [Chapter 4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790),
    *Post-Exploitation with Metasploit*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到利用是由于应用程序未检查用户控制的输入而导致远程代码执行。让我们对受损系统进行一些基本的后期利用，因为我们将在[第4章](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790)中涵盖高级后期利用，*使用Metasploit进行后期利用*：
- en: '![](img/00004.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00004.jpeg)'
- en: Issuing a `getuid` command fetches the current username. We can see that we
    have NT AUTHORITY\LOCAL SERVICE, which is a highly ranked privilege. The `getpid`
    command fetches the process ID of the process we have been sitting inside. Issuing
    a `sysinfo` command generates general system information such as the name of the
    system, OS type, arch, system language, domain, logged-on users, and type of meterepreter
    as well. The `idletime` command will display the time the user has been idle.
    You can always look for various other commands by issuing a `?` at the meterpreter
    console.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 发出`getuid`命令获取当前用户名。我们可以看到我们有NT AUTHORITY\LOCAL SERVICE，这是一个高级别的特权。`getpid`命令获取我们一直坐在其中的进程的进程ID。发出`sysinfo`命令会生成一般的系统信息，比如系统名称、操作系统类型、架构、系统语言、域、已登录用户和meterpreter类型。`idletime`命令将显示用户空闲的时间。您可以通过在meterpreter控制台上发出`?`来查找各种其他命令。
- en: Refer to the usage of meterpreter commands at [https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/](https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参考meterpreter命令的用法[https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/](https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/)。
- en: Testing the security of a GlassFish web server with Metasploit
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit测试GlassFish Web服务器的安全性
- en: 'GlassFish is yet another open source application server. GlassFish is highly
    Java-driven and has been accepted widely in the industry. In my experience of
    penetration testing, I have come across GlassFish-driven web servers several times
    but quite rarely, say 1 out of 10 times. However, more and more businesses are
    moving onto GlassFish technology; we must keep up. In our scan, we found a GlassFish
    server running on port `8080` with its servlet running on port `4848`. Let''s
    dig into Metasploit again to search any modules for a GlassFish web server:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish是另一个开源应用服务器。GlassFish高度依赖Java，在行业中被广泛接受。在我的渗透测试经验中，我几次遇到了基于GlassFish的Web服务器，但相当少见，比如10次中有1次。然而，越来越多的企业正在转向GlassFish技术；我们必须跟上。在我们的扫描中，我们发现一个运行在端口`8080`上的GlassFish服务器，其servlet运行在端口`4848`上。让我们再次深入Metasploit，搜索GlassFish
    Web服务器的任何模块：
- en: '![](img/00005.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: 'Searching the module, we will find various modules related to GlassFish. Let''s
    take a similar approach to the one we took for the previous module and start brute
    forcing to check for authentication weaknesses. We can achieve this using the
    `auxiliary/scanner/http/glassfish_login` module, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索模块，我们将找到与GlassFish相关的各种模块。让我们采取与之前模块相似的方法，并开始暴力破解以检查认证漏洞。我们可以使用`auxiliary/scanner/http/glassfish_login`模块来实现这一点，如下面的屏幕截图所示：
- en: '![](img/00056.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.jpeg)'
- en: 'Let''s set the `RHOST`, desired username to break into, the password file (which
    is `fasttrack.txt` listed in the `/usr/share/wordlists` directory in Kali Linux),
    the number of threads (to increase the speed of the attack), and `STOP_ON_SUCCESS`
    to `true` so that, once the password is found, the brute-forcing should stop testing
    for more credentials. Let''s see what happens when we run this module:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`RHOST`、要破解的用户名、密码文件（在Kali Linux的`/usr/share/wordlists`目录中列出的`fasttrack.txt`），线程数（以增加攻击速度），以及`STOP_ON_SUCCESS`设置为`true`，这样一旦找到密码，暴力破解就应该停止测试更多的凭据。让我们看看当我们运行这个模块时会发生什么：
- en: '![](img/00031.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: 'We successfully obtained the credentials. We can now log in to the application
    to verify whether the credentials work and can maneuver around the application
    as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功获取了凭据。我们现在可以登录应用程序，验证凭据是否有效，并可以在应用程序中进行操作：
- en: '![](img/00010.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: 'Cool! At this point, you might be wondering whether we will now search for
    an exploit in Metasploit and use it to exploit to system-level access, right?
    Wrong! Why? Remember the version of GlassFish running on the server? It is GlassFish
    4.0, which is not known to have any highly critical vulnerabilities at this point
    in time. So, what next? Should we leave our access restricted to application level?
    Alternatively, we could try something out of the box. When we made a search on
    `glassfish` in Metasploit, we came across another module, `exploit/multi/http/glassfish_deployer`;
    can we take advantage of that? Yes! What we will do is to create a malicious `.war`
    package and deploy it on the GlassFish server, which causes remote code execution.
    Since we already have credentials to the application, it should be a piece of
    cake. Let''s see:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！此时，你可能会想知道我们是否现在会在Metasploit中搜索一个利用并使用它来获取系统级访问权限，对吗？错！为什么？还记得服务器上运行的GlassFish版本吗？它是GlassFish
    4.0，在这个时候没有已知的高度关键的漏洞。那接下来呢？我们应该将我们的访问权限限制在应用程序级别吗？或者，我们可以尝试一些与众不同的东西。当我们在Metasploit中搜索`glassfish`时，我们发现了另一个模块，`exploit/multi/http/glassfish_deployer`；我们可以利用它吗？可以！我们将创建一个恶意的`.war`包，并部署到GlassFish服务器上，从而实现远程代码执行。因为我们已经有了应用程序的凭据，这应该很容易。让我们看看：
- en: '![](img/00118.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00118.jpeg)'
- en: 'Let''s set all the necessary parameters, such as `RHOST`, `PASSWORD` (which
    we found in the previously demonstrated module), and `USERNAME` (if other than
    admin), and run the module as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置所有必要的参数，比如`RHOST`，`PASSWORD`（我们在之前演示的模块中找到的），以及`USERNAME`（如果不是admin），并按照以下方式运行模块：
- en: '![](img/00095.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.jpeg)'
- en: 'We should be seeing a remote shell popping up, right? Let''s see:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到一个远程shell弹出来了，对吗？让我们看看：
- en: '![](img/00166.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00166.jpeg)'
- en: 'Alas! The exploit got aborted due to failure since we do not have access to
    `http://172.28.128.3:4848`, and we failed to authenticate. What could be the reason?
    The reason is that port `4848` is running an HTTPS version of the application
    and we were trying to connect to the HTTP one. Let''s set `SSL` to `true`, as
    shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 唉！由于我们无法访问`http://172.28.128.3:4848`，我们的利用被中止了，我们未能进行身份验证。原因是端口`4848`正在运行应用程序的HTTPS版本，而我们试图连接的是HTTP版本。让我们将`SSL`设置为`true`，如下图所示：
- en: '![](img/00015.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: 'Great! We managed to connect to the application successfully. However, our
    exploit still failed since it cannot automatically select the target. Let''s see
    what all the supported targets for the module are, using the `show targets` command
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们成功连接到了应用程序。然而，我们的利用仍然失败，因为它无法自动选择目标。让我们看看模块支持的所有目标，使用`show targets`命令如下：
- en: '![](img/00116.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: 'Since we know that GlassFish is a Java-driven application, let''s set the target
    as Java by issuing the `set target 1` command. Additionally, since we changed
    the target, we need to set a compatible payload. Let''s issue the `show payloads`
    command to populate all the matching payloads which can be used on the target.
    However, the best payloads are meterpreter ones since they provide a lot of flexibility
    with various support and functions all together:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道GlassFish是一个基于Java的应用程序，让我们通过发出`set target 1`命令将目标设置为Java。另外，由于我们改变了目标，我们需要设置一个兼容的载荷。让我们发出`show
    payloads`命令来列出所有可以在目标上使用的匹配载荷。然而，最好的载荷是meterpreter载荷，因为它们提供了各种支持和功能的灵活性：
- en: '![](img/00018.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: 'We can see that since we set the target as Java, we have Java-based meterpreter
    payloads which will help us gain access to the target. Let''s set the `java/meterpreter/reverse_tcp
    payload` and run the module:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，由于我们将目标设置为Java，我们有基于Java的meterpreter载荷，这将帮助我们获得对目标的访问权限。让我们设置`java/meterpreter/reverse_tcp`载荷并运行模块：
- en: '![](img/00019.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: 'We can see that we gained access to the target. However, for some reason, the
    connection died. The connection died notification is a standard error while dealing
    with different types of payloads. Dead sessions can occur for many reasons, such
    as detection by an antivirus, an unstable connection, or an unstable application.
    Let''s try a generic shell-based payload such as `java/shell/reverse_tcp` and
    rerun the module:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们已经获得了对目标的访问权限。然而，由于某种原因，连接中断了。连接中断通知是处理不同类型的载荷时的标准错误。连接中断可能由许多原因引起，比如被杀毒软件检测到、不稳定的连接或不稳定的应用程序。让我们尝试一个通用的基于shell的载荷，比如`java/shell/reverse_tcp`，并重新运行模块：
- en: '![](img/00128.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: 'Finally, we have made it to the server. We are now dropped into a command shell
    at the target server and can potentially do anything we require to fill our post-exploitation
    demands. Let''s run some basic system commands such as `dir`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们成功进入了服务器。我们现在被放置在目标服务器的命令shell中，可以潜在地做任何我们需要满足后期利用需求的事情。让我们运行一些基本的系统命令，比如`dir`：
- en: '![](img/00130.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: 'Let us try reading some interesting files with the type command, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用`type`命令读取一些有趣的文件，如下所示：
- en: '![](img/00134.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00134.jpeg)'
- en: We will look at privilege escalation and more on post-exploitation in [Chapter
    4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790), *Post-Exploitation
    with Metasploit*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790)中详细讨论权限提升和后期利用，*使用Metasploit进行后期利用*。
- en: Exploiting FTP services with Metasploit
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Metasploit利用FTP服务
- en: 'Let''s assume that we have another system in the network. Let''s perform a
    quick `nmap` scan in Metasploit and figure out the number of open ports and services
    running on them as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在网络中有另一个系统。让我们在Metasploit中执行快速的`nmap`扫描，并找出开放端口的数量以及运行在这些端口上的服务，如下所示：
- en: '![](img/00140.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: 'There are plenty of services running on the target. We can see we have vsftpd
    2.3.4 running on port 21 of the target, which has a popular backdoor vulnerability.
    Let''s quickly search and load the exploit module in Metasploit:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 目标上有很多服务在运行。我们可以看到我们的目标端口21上运行着vsftpd 2.3.4，它有一个流行的后门漏洞。让我们快速搜索并在Metasploit中加载利用模块：
- en: '![](img/00145.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00145.jpeg)'
- en: 'Let''s set `RHOST` and `payload` for the module as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为模块设置`RHOST`和`payload`如下：
- en: '![](img/00153.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00153.jpeg)'
- en: 'We can see that when issuing the `show payloads` command, we cannot see too
    many payloads. We just have a single payload that provides us with the shell access
    to the target and, as soon as we run the `exploit` command, the backdoor in vsftpd
    2.3.4 triggers and we are given access to the system. Issuing a standard command
    such as whoami will display the current user, which in our case is root. We do
    not need to escalate privileges on this system. However, a better control of access
    would be very desirable. So let''s improve the situation by gaining meterpreter-level
    access to the target. To achieve a meterpreter shell, we will first create a Linux
    meterpreter shell binary backdoor and host it on our server. Then, we will download
    the binary backdoor to the victim''s system, provide all the necessary permissions,
    and run the backdoor with the help of the shell access which we have already gained.
    However, for the backdoor to work, we will need to set up a listener on our system
    which will listen for the incoming meterpreter shell from the backdoor execution
    on the target. Let''s get started:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当发出`show payloads`命令时，我们可以看到并不会看到太多有效载荷。我们只有一个有效载荷，可以为我们提供对目标的shell访问，并且一旦我们运行`exploit`命令，vsftpd
    2.3.4中的后门就会触发，我们就可以访问系统。发出一个标准命令，比如whoami，会显示当前用户，我们的情况下是root。我们不需要在这个系统上提升权限。但是，更好地控制访问权限将是非常可取的。因此，让我们通过获得对目标的meterpreter级别访问来改善情况。为了获得meterpreter
    shell，我们将首先创建一个Linux meterpreter shell二进制后门，并将其托管在我们的服务器上。然后，我们将下载二进制后门到受害者的系统上，提供所有必要的权限，并利用我们已经获得的shell访问运行后门。但是，为了使后门起作用，我们需要在我们的系统上设置一个监听器，该监听器将监听来自目标上后门执行的meterpreter
    shell的传入连接。让我们开始吧：
- en: '![](img/00159.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00159.jpeg)'
- en: We quickly spawn a separate terminal and use `msfvenom` to generate a backdoor
    of type `linux/x86/meterpreter/reverse_tcp` using a `-p` switch and providing
    options such as `LHOST` and `LPORT` which denote our IP address to which the backdoor
    will connect and the port number. Also, we will provide the format of the backdoor
    with a `-f` switch as `.elf` (the default Linux format) and save it as `backdoor.elf`
    file on our system.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迅速生成一个后门，类型为`linux/x86/meterpreter/reverse_tcp`，使用`-p`开关并提供选项，如`LHOST`和`LPORT`，表示后门将连接到的IP地址和端口号。此外，我们将使用`-f`开关提供后门的格式为`.elf`（默认的Linux格式），并将其保存为`backdoor.elf`文件在我们的系统上。
- en: 'Next, we need to move the generated file to our `/var/www/html/` directory
    and also start the Apache server so that any request asking for the file download
    receives the backdoor file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将生成的文件移动到我们的`/var/www/html/`目录，并启动Apache服务器，以便任何请求文件下载的请求都会收到后门文件：
- en: '![](img/00273.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00273.jpeg)'
- en: 'We are now all set to download the file at the victim''s end using our shell:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好使用我们的shell在受害者端下载文件：
- en: '![](img/00168.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00168.jpeg)'
- en: 'We have successfully downloaded the file at the target''s end. Let''s fire
    up a handler so that once the backdoor is executed, it''s handled correctly by
    our system. To start a handler, we can spawn a new Metasploit instance in a separate
    terminal and can use the `exploit/multi/handler` module as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功在目标端下载了文件。让我们启动一个处理程序，这样一旦执行后门，它就会被我们的系统正确处理。要启动处理程序，我们可以在单独的终端中生成一个新的Metasploit实例，并使用`exploit/multi/handler`模块，如下所示：
- en: '![](img/00036.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpeg)'
- en: 'Next, we need to set up the same payload we used to generate the backdoor,
    as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置与生成后门时相同的有效载荷，如下面的屏幕截图所示：
- en: '![](img/00037.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00037.jpeg)'
- en: 'Let''s now set up basic options such as `LHOST` and `LPORT`, as shown in the
    following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们设置基本选项，如`LHOST`和`LPORT`，如下面的屏幕截图所示：
- en: '![](img/00039.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: 'We can start the handler in the background using the `exploit -j` command as
    shown in the preceding screenshot. Meanwhile, starting a handler in the background
    will allow multiple victims to connect with the handler. Next, we just need to
    provide necessary permissions to the backdoor file at the target system and execute
    it, as demonstrated in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`exploit -j`命令在后台启动处理程序，如前面的屏幕截图所示。同时，在后台启动处理程序将允许多个受害者连接到处理程序。接下来，我们只需要在目标系统上为后门文件提供必要的权限并执行它，如下面的屏幕截图所示：
- en: '![](img/00040.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00040.jpeg)'
- en: 'Let''s see what happens when we run the backdoor file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看运行后门文件时会发生什么：
- en: '![](img/00042.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: We can see that as soon as we ran the executable, we got a meterpreter shell
    at the handler. We can now interact with the session and can perform post-exploitation
    with ease.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，一旦我们运行了可执行文件，我们就在处理程序中得到了一个meterpreter shell。我们现在可以与会话交互，并可以轻松进行后期利用。
- en: Exploiting browsers for fun and profit
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用浏览器进行娱乐和利润
- en: Web browsers are used primarily for surfing the Web. However, an outdated web
    browser can lead to the compromise of the entire system. Clients may never use
    the preinstalled web browser and choose the one based on their preference. However,
    the default preinstalled web browser can still lead to various attacks on the
    system. Exploiting a browser by finding vulnerabilities in the browser components
    is known as browser-based exploitation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Web浏览器主要用于浏览网络。但是，过时的Web浏览器可能导致整个系统被攻破。客户端可能永远不会使用预安装的Web浏览器，并选择基于其偏好的浏览器。但是，默认预安装的Web浏览器仍然可能导致系统受到各种攻击。通过查找浏览器组件中的漏洞来利用浏览器被称为基于浏览器的利用。
- en: For more information on Firefox vulnerabilities, refer to [http://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452](http://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Firefox漏洞的更多信息，请参阅[http://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452](http://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452)。
- en: For Internet Explorer vulnerabilities, refer to [http://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26](http://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: The browser autopwn attack
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers browser autopwn, an automated attack module that tests various
    browsers for weaknesses and exploits them. To understand the inner workings of
    this module, let us discuss the technology behind the attack.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: The technology behind a browser autopwn attack
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Autopwn** refers to the automatic exploitation of the target. The autopwn
    module sets up most of the browser-based exploits in the listening mode by automatically
    configuring them one after the other. Then, it waits for an incoming connection
    and launches a set of matching exploits, depending upon the victim''s browser.
    Therefore, irrespective of the browser a victim is using, if there are vulnerabilities
    in the browser, the autopwn script attacks it automatically with the matching
    exploit modules.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Let us understand the workings of this attack vector in detail using the
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'following diagram:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: In the preceding scenario, an exploit server running the `browser_autopwn` module
    is up and running with a number of browser-based exploits with their corresponding
    handlers. As soon as the victim's browser connects to the exploit server, the
    exploit server base checks for the type of browser and tests it against the matching
    exploits. In the preceding diagram, we have Internet Explorer as the victim's
    browser. Therefore, exploits matching the Internet Explorer launch at the victim's
    browser. Successful exploits make a connection back to the handler, and the attacker
    gains shell or meterpreter access to the target.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Attacking browsers with Metasploit browser_autopwn
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To conduct a browser exploitation attack, we will use the `browser_autopwn`
    module in Metasploit, as shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: 'We can see we loaded the `browser_autopwn` module residing at `auxiliary/server/browser_autpown`
    successfully in Metasploit. To launch the attack, we need to specify `LHOST`,
    `URIPATH`, and `SRVPORT`. `SRVPORT` is the port on which our exploit server base
    will run. It is recommended to use port `80` or `443` since the addition of port
    numbers to the URL catches many eyes, and it looks fishy. `URIPATH` is the directory
    path for the various exploits and should be kept in the `root` directory by specifying
    `URIPATH` as `/`. Let us set all the required parameters and launch the module,
    as shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: 'Launching the `browser_autopwn` module will set up browser exploits into listening
    mode waiting for the incoming connections, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: 'Any target connecting on port `80` of our system will get an arsenal of exploits
    thrown at it, based on the browser. Let us analyze how a victim connects to our
    malicious exploit server:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: 'We can see that as soon as a victim connects to our IP address, the `browser_autopwn`
    module responds with various exploits until it gains meterpreter access, as shown
    in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: As we can see, the `browser_autopwn` module allows us to test and actively exploit
    the victim's browser for numerous vulnerabilities. However, client-side exploits
    may cause service interruptions. It is a good idea to acquire a prior permission
    before conducting a client-side exploitation test. In the upcoming section, we
    will see how a module such as a `browser_autopwn` can be deadly against numerous
    targets.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Attacking Android with Metasploit
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android platform can be attacked either by creating a simple APK file or
    by injecting the payload into an actual APK. We will cover the first one. Let
    us get started by generating an APK file with `msfvenom` as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: 'On generating the APK file, all we need to do is to either convince the victim
    (perform social engineering) to install the APK or physically gain access to the
    phone. Let us see what happens on the phone as soon as a victim downloads the
    malicious APK:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 生成APK文件后，我们所需要做的就是说服受害者（进行社会工程）安装APK，或者物理上获取手机的访问权限。让我们看看受害者下载恶意APK后手机上会发生什么：
- en: '![](img/00112.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: 'Once the download is complete, the user installs the file as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，用户按以下方式安装文件：
- en: '![](img/00059.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'Most people never notice what permissions an app asks for. Hence, an attacker
    gains full access to the phone and steals personal data. The preceding section
    lists the required permissions an application needs to operate correctly. Once
    the installation happens successfully, the attacker gains meterpreter access to
    the target phone as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人从不注意应用程序请求的权限。因此，攻击者可以完全访问手机并窃取个人数据。前面的部分列出了应用程序正常运行所需的权限。一旦安装成功，攻击者就可以获得对目标手机的meterpreter访问权限，如下所示：
- en: '![](img/00158.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00158.jpeg)'
- en: 'Whooaaa! We got the meterpreter access easily. Post-exploitation is widely
    covered in [Chapter 4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790),
    *Post-Exploitation with Metasploit*. However, let us see some of the basic functionalities
    as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 哇哦！我们轻松获得了meterpreter访问权限。在[第4章](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790)中广泛涵盖了后渗透，*使用Metasploit进行后渗透*。然而，让我们看一些基本功能，如下所示：
- en: '![](img/00253.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00253.jpeg)'
- en: 'We can see that running the `check_root` command states that the device is
    rooted. Let us see some other functions:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到运行`check_root`命令显示设备已被root。让我们看看其他一些功能：
- en: '![](img/00200.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00200.jpeg)'
- en: 'We can use the `send_sms` command to send an SMS to any number from the exploited
    phone. Let us see whether the message was delivered or not:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`send_sms`命令从被攻击手机向任何号码发送短信。让我们看看消息是否已传递：
- en: '![](img/00065.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: 'Bingo! The message was delivered successfully. Meanwhile, let us see what system
    we broke into using the `sysinfo` command as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！消息已成功传递。与此同时，让我们使用`sysinfo`命令查看我们已经破解的系统：
- en: '![](img/00254.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00254.jpeg)'
- en: 'Let''s `geolocate` the mobile phone as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下方式`geolocate`手机：
- en: '![](img/00274.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00274.jpeg)'
- en: 'Browsing the Google Maps link, we can get the exact location of the cell phone
    as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览Google地图链接，我们可以得到手机的精确位置，如下所示：
- en: '![](img/00027.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: 'Let us take some pictures with the exploited phone''s camera as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用被攻击手机的相机拍一些照片，如下所示：
- en: '![](img/00078.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: 'We can see we got the picture from the camera. Let us view the image as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们从相机中得到了图片。让我们查看图片，如下所示：
- en: '![](img/00071.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: Client-side exploitation is fun. However, it is tough to conduct since we require
    actions and help from the victim to execute a file, visit a link, or install an
    APK. However, in the situations where no direct attack is possible, client-side
    attacks are the ones that are the most useful.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端利用很有趣。但是，由于我们需要受害者执行文件、访问链接或安装APK，因此很难进行。然而，在无法直接攻击的情况下，客户端攻击是最有用的攻击之一。
- en: Converting exploits to Metasploit
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将漏洞转换为Metasploit
- en: 'In the upcoming example, we will see how we can import an exploit written in
    Python to Metasploit. The publicly available exploit can be downloaded from [https://www.exploit-db.com/exploits/31255/](https://www.exploit-db.com/exploits/31255/).
    Let us analyze the exploit as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将看到如何将用Python编写的漏洞导入到Metasploit中。可以从[https://www.exploit-db.com/exploits/31255/](https://www.exploit-db.com/exploits/31255/)下载公开可用的漏洞。让我们分析漏洞，如下所示：
- en: '[PRE0]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This straightforward exploit logs into the PCMAN FTP 2.0 software on port `21`
    using anonymous credentials and exploits the software using the `CWD` command.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的漏洞利用使用匿名凭据登录到端口`21`上的PCMAN FTP 2.0软件，并使用`CWD`命令利用软件。
- en: For more information on building exploits, importing them into Metasploit, and
    bypassing modern software protections, refer to *Chapters 2-4* of *Mastering Metasploit
    First and Second Edition*, by *Nipun Jaswal.*
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 有关构建漏洞、将其导入Metasploit以及绕过现代软件保护的更多信息，请参阅*Nipun Jaswal*的*Mastering Metasploit第一版和第二版*的*第2-4章*。
- en: 'The entire process from the exploit listed earlier can be broken down into
    the following set of points:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面列出的漏洞整个过程可以分解为以下一系列步骤：
- en: Store username, password, and host in the `fuser`, `pass`, and `host` variables.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户名、密码和主机存储在`fuser`、`pass`和`host`变量中。
- en: Assign the variable `junk` with `2008 A` characters. Here, `2008` is the offset
    to overwrite EIP.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量`junk`赋值为`2008 A`个字符。这里，`2008`是覆盖EIP的偏移量。
- en: Assign the JMP ESP address to the `espaddress` variable. Here, `espaddress 0x71ab9372`
    is the target return address.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将JMP ESP地址分配给`espaddress`变量。这里，`espaddress 0x71ab9372`是目标返回地址。
- en: Store 10 NOPs into the variable `nops`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将10个NOP存储在变量`nops`中。
- en: Store the payload for executing the calculator in the variable `shellcode`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用于执行计算器的有效载荷存储在变量`shellcode`中。
- en: Concatenate `junk`, `espaddress`, `nops`, and `shellcode` and store it in the
    `sploit` variable.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`junk`、`espaddress`、`nops`和`shellcode`连接起来，并存储在`sploit`变量中。
- en: Set up a socket using `s.socket(s.AF_INET,s.SOCK_STREAM)` and connect to the
    host using connect((`host`,`21`)) on `port 21`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`s.socket(s.AF_INET,s.SOCK_STREAM)`建立套接字，并使用`connect((host,21))`连接到主机的`port
    21`。
- en: Supply the `fuser` and `fpass` using `USER` and `PASS` to make a successful
    login to the target.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`USER`和`PASS`提供`fuser`和`fpass`以成功登录到目标。
- en: Issue the `CWD` command followed by the `sploit` variable. This will cause the
    return address on the stack to be overwritten, giving us control of EIP and, ultimately, executing
    the calculator application.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发出`CWD`命令，然后是`sploit`变量。这将导致堆栈上的返回地址被覆盖，使我们控制EIP，并最终执行计算器应用程序。
- en: Find out more about the anatomy behind stack overflow exploits at [https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/](https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于栈溢出利用背后的解剖学，访问[https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/](https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/)。
- en: 'Let us try executing the exploit and analyzing the results as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试执行利用并分析结果如下：
- en: '![](img/00137.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: The original exploit takes a username, password, and host from the command line.
    However, we modified the mechanism with fixed, hardcoded values.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的利用从命令行获取用户名、密码和主机。但是，我们修改了机制，使用了固定的硬编码值。
- en: 'As soon as we execute the exploit, the following screen shows up:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们执行了利用，以下屏幕就会出现：
- en: '![](img/00163.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00163.jpeg)'
- en: We can see the calculator application popping up, which states that the exploit
    is working correctly.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到计算器应用程序弹出，说明利用正在正确工作。
- en: Gathering the essentials
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集必要的信息
- en: 'Let us find out what important values we need to grasp from the preceding exploit
    to generate an equivalent module in Metasploit through the following table:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出我们需要从前面的利用中掌握的重要值，以通过以下表格在Metasploit中生成等效模块：
- en: '| **Serial number** | **Variables** | **Values** |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: 1 | 序列号 | 变量 | 值 |
- en: '| 1 | Offset value | `2008` |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: 1 | 偏移值 | `2008` |
- en: '| 2 | Target return / jump address / value found from executable modules using
    `JMP ESP` search | `0x71AB9372` |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: 2 | 目标返回/跳转地址/使用`JMP ESP`搜索找到的可执行模块的值 | `0x71AB9372` |
- en: '| 3 | Target port | `21` |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: 3 | 目标端口 | `21` |
- en: '| 4 | Number of leading NOP bytes to the shellcode to remove irregularities
    | `10` |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: 4 | 前导NOP字节的数量，以删除shellcode的不规则性 | `10` |
- en: '| 5 | Logic | The `CWD` command followed by junk data of 2008 bytes, followed
    by arbitrary return address, NOPs, and shellcode |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: 5 | 逻辑 | `CWD`命令，后跟2008字节的junk数据，后跟任意返回地址、NOP和shellcode |
- en: We have all the information required to build a Metasploit module. In the next
    section, we will see how Metasploit aids FTP processes and how easy it is to create
    an exploit module in Metasploit.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有构建Metasploit模块所需的所有信息。在下一节中，我们将看到Metasploit如何辅助FTP进程以及在Metasploit中创建利用模块有多么容易。
- en: Generating a Metasploit module
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成一个Metasploit模块
- en: The best way to start building a Metasploit module is to copy an existing similar
    module and to make changes to it. However, the `Mona.py` script can also generate
    Metasploit specific modules on the fly. We will look at producing quick exploits
    using the `Mona.py` script in the last sections of the book.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 构建Metasploit模块的最佳方法是复制现有的类似模块并对其进行更改。但是，`Mona.py`脚本也可以即时生成特定于Metasploit的模块。我们将在本书的最后部分看看如何使用`Mona.py`脚本生成快速利用。
- en: 'Let us now see the equivalent code of the exploit in Metasploit as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看在Metasploit中利用的等效代码：
- en: '[PRE1]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We started by including all the required libraries and the `ftp.rb` library
    from the `/lib/msf/core/exploit` directory. Next, we assign all the necessary
    information in the `initialize` section. Gathering the essentials from the exploit,
    we assign `Ret` with the return address and Offset as `2008`. We also declare
    the value for the `FTPPASS` option as `anonymous`. Let us look at the next section
    of code, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先包括了所有必需的库和`/lib/msf/core/exploit`目录中的`ftp.rb`库。接下来，在`initialize`部分中分配所有必要的信息。从利用中收集必要的信息，我们将`Ret`分配为返回地址，偏移为`2008`。我们还将`FTPPASS`选项的值声明为`anonymous`。让我们看看下面的代码部分：
- en: '[PRE2]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `connect_login` method will connect to the target and try logging into the
    software using the credentials we supplied. But wait! When did we supply the credentials?
    The `FTPUSER` and `FTPPASS` options for the module are enabled automatically by
    including the `FTP` library. The default value for `FTPUSER` is `anonymous`. However,
    for `FTPPASS`, we supplied the value as `anonymous` in the `register_options`
    already.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`connect_login`方法将连接到目标并尝试使用我们提供的凭据登录软件。但是等等！我们什么时候提供了凭据？通过包含`FTP`库，模块的`FTPUSER`和`FTPPASS`选项会自动启用。`FTPUSER`的默认值是`anonymous`。但是，对于`FTPPASS`，我们已经在`register_options`中提供了值为`anonymous`。'
- en: Next, we use `rand_text_alpha` to generate `junk` of `2008` using the value
    of offset from the targets field, and store it in the sploit variable. We also
    store the value of `Ret` from the targets field in little endian format using
    the pack (`V`) function in the `sploit` variable. Concatenating NOPs using the
    `make_nop` function, followed by the shellcode to the `sploit` variable, our input
    data is ready to be supplied.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`rand_text_alpha`生成`2008`的`junk`，使用目标字段中的偏移值，并将其存储在sploit变量中。我们还使用`pack（'V'）`函数将目标字段中的`Ret`值以小端格式存储在`sploit`变量中。使用`make_nop`函数连接NOP，然后连接shellcode到`sploit`变量，我们的输入数据已准备好供应。
- en: 'Next, we simply send off the data in the `sploit` variable to the target in
    the `CWD` command, using a `send_cmd` function from the `FTP` library. So, how
    is Metasploit different? Let us see through the following points:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们简单地将`sploit`变量中的数据发送到`CWD`命令的目标，使用`FTP`库中的`send_cmd`函数。那么，Metasploit有什么不同呢？让我们通过以下几点来看看：
- en: We didn't need to create junk data because the `rand_text_aplha` function did
    it for us.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要创建junk数据，因为`rand_text_aplha`函数已经为我们做了。
- en: We didn't need to provide the `Ret` address in little endian format because
    the pack(`V`) function helped us in transforming it.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要以小端格式提供`Ret`地址，因为`pack（'V'）`函数帮助我们转换它。
- en: We didn't need to generate NOPs manually as `make_nops` did it for us.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要手动生成NOP，因为`make_nops`为我们做了。
- en: We did not need to supply any hardcoded payload since we can decide and change
    the payload at runtime. The switching mechanism of the payload saves time by eliminating
    manual changes to the shellcode.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要提供任何硬编码的有效负载，因为我们可以在运行时决定和更改有效负载。有效负载的切换机制通过消除对shellcode的手动更改来节省时间。
- en: We simply leveraged the `FTP` library to create and connect the socket.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们只是利用了`FTP`库来创建和连接套接字。
- en: Most importantly, we didn't need to connect and log in using manual commands
    because Metasploit did it for us using a single method, that is, `connect_login`.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting the target application with Metasploit
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw how beneficial the use of Metasploit is over existing exploits. Let
    us exploit the application and analyze the results:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
- en: 'We know that the `FTPPASS` and `FTPUSER` already have their values set as `anonymous`.
    Let us supply `RHOST` and `payload` type to exploit the target machine as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00214.jpeg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: We can see our exploit executed successfully. However, if you aren't familiar
    with any programming language, you might have found this exercise tough. Refer
    to all the links and references highlighted at various sections of the chapter
    to gain insight and master every technique used in exploitation.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Summary and exercises
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, you learned a lot in this chapter, and you will have to research a lot
    before moving onto the next chapters. We covered various types of applications
    in this chapter and successfully managed to exploit them as well. We saw how `db_nmap`
    stores result in the database, which helps us segregate the data. We saw how vulnerable
    applications such as Desktop Central 9 could be exploited. We also covered applications
    that were tough to exploit, and gaining access to their credentials led to obtaining
    system-level access. We saw how we could exploit an FTP service and gain better
    control with extended features. Next, we saw how vulnerable browsers and malicious
    Android applications could lead to the compromise of the system using client-side
    exploitation. Finally, we looked at how we can convert an exploit to a Metasploit-compatible
    one.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: This chapter was a fast-paced chapter; for you to keep up at speed, you must
    research and hone your skills on exploit research, various types of overflow vulnerabilities,
    and how to exploit more services from Metasploitable and other **capture the fla**g
    (**CTF**) style operating systems.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'You can perform the following hands-on exercises for this chapter:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The FTP service from Metasploitable 3 does not seem to have any critical vulnerabilities.
    Still, try breaking into the application.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of Elasticsearch on port 9200 is vulnerable. Try gaining access
    to the system.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit the vulnerable proftpd version from Metasploitable 2.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct drive-by attacks using browser autopwn (you should practice in a virtualized
    environment; someone could send you to prison for this, if it were performed in
    a real-world scenario).
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try injecting legit APK files with meterpreter and gain remote access to the
    phone. You can try this exercise on virtual devices using Android studio.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the referenced tutorials from the Converting exploits to Metasploit section
    and try building/importing an exploit to Metasploit.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790), *Post-Exploitation
    with Metasploit*, we will cover post-exploitation. We will look at various advanced
    features which we can perform on the compromised machine. Until then, ciao! Happy
    learning.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
