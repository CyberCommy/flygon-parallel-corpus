- en: Exploitation and Gaining Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the [Chapter 2](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790), *Identifying
    and Scanning Targets*, we had a precise look at scanning multiple services in
    a network while fingerprinting their exact version numbers. We had to find the
    exact version numbers of the services running so that we could exploit the vulnerabilities
    residing in a particular version of the software. In this chapter, we will make
    use of the strategies learned in the [Chapter 2](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790),
    *Identifying and Scanning Targets,* to successfully gain access to some systems
    by taking advantage of their vulnerabilities. We will learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploit applications using Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test servers for successful exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attack mobile platforms with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use browser-based attacks for client-side testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build and modify existing exploit modules in Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let us get started.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the practice environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter and the following ones, we will primarily practice
    on Metasploitable 2 and Metasploitable 3 (intentionally vulnerable operating systems).
    Additionally, for the exercises which are not covered in Metasploitable distributions,
    we will use our customized environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Please follow the instructions to set up Metasploitable 2 at [https://community.rapid7.com/thread/2007](https://community.rapid7.com/thread/2007)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To set up Metasploitable 3, refer to [https://github.com/rapid7/metasploitable3](https://github.com/rapid7/metasploitable3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the excellent video tutorials to set up Metasploitable 3 at [https://www.youtube.com/playlist?list=PLZOToVAK85MpnjpcVtNMwmCxMZRFaY6mT](https://www.youtube.com/playlist?list=PLZOToVAK85MpnjpcVtNMwmCxMZRFaY6mT)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting applications with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider yourself performing a penetration test on a class B range IP network.
    Let''s first add a new `workspace` for our test and switch to it, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We added a new `workspace` by issuing the `workspace` command followed by the
    `-a` switch followed by the name of our new workspace. We switched our `workspace`
    to the one we just created by issuing the `workspace` command again followed by
    the name of the workspace, which, in our case is `ClassBNetwork`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout [Chapter 2](part0033.html#VF2I0-a731d733dba14ccabae643b74e2c8790),
    *Identifying and Scanning Targets*, we used the tcp portscan auxiliary module
    heavily. Let''s use it again and see what surprises we have on this network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Nothing fancy! We merely have two open ports, that is, port `80` and port `22`.
    Let''s verify the information found in the scan by issuing the `hosts` command
    and the `services` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the information captured in the scan now resides in Metasploit's
    database. However, we did not find much in the scan. Let's run a more accurate
    scan in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using db_nmap in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nmap is one of the most popular network scanners and is most widely used in
    penetration testing and vulnerability assessments. The beauty of Metasploit is
    that it combines the power of Nmap by integrating and storing results in its database.
    Let''s run a basic stealth scan on the target by providing the `-sS` switch. Additionally,
    we have used the `-p-` switch to tell Nmap to scan for all 65,535 ports on the
    target, and the `--open` switch to list all the open ports only (this eliminates
    filtered and closed ports), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see providing the preceding command runs a thorough scan on the target.
    Let''s analyze the output generated from the scan as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see a number of ports open on the target. We can consider them as an
    entry point to the system if we find any of them vulnerable. However, as discussed
    earlier, to exploit these services, we will need to figure out the software and
    its exact version number. `db_nmap` can provide us with the version of software
    running by initiating a service scan. We can perform a service scan similarly
    by adding the `-sV` switch to the previous scan command and rerunning the scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome! We have fingerprinted almost 80% of the open ports with their exact
    version numbers. We can see we have many attractive services running on the target.
    Let''s verify whether all the information we gathered from the scan has successfully
    been migrated to Metasploit by issuing the `services` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yup! Metasploit has logged everything. Let''s target some web server software
    such as Apache Tomcat/Coyote JSP Engine 1.1 running on port `8022`. However, before
    firing any exploit, we should always check what application is running on the
    server by manually browsing to the port through a web browser, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Surprise! We have Desktop Central 9 running on the server on port `8022`. However,
    Desktop Central 9 is known to have multiple vulnerabilities and its login system
    can be brute-forced as well. We can now consider this application as a potential
    door we need to blow off to gain complete access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting Desktop Central 9 with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw in the previous section that we discovered ManageEngine''s Desktop Central
    9 software running on port `8022` of the server. Let''s find a matching module
    in Metasploit to check whether we have any exploit module or an auxiliary module
    that can help us break into the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Plenty of modules listed! Let's use the simplest one first, which is `auxiliary/scanner/http/manageengine_desktop_central_login`.
    This auxiliary module allows us to brute force credentials for Desktop Central.
    Let's put it to use by issuing a `use` command followed by `auxiliary/scanner/http/manageengine_desktop_central_login`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, let''s also check which options we need to set for this module
    to work flawlessly, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will apparently need to set `RHOSTS` to the IP address of the target. Breaking
    into an application would be much more fun if we had an admin account which would
    not only provide us with the access but also grant us privileges to perform various
    operations. Therefore, let's set the USERNAME to `admin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Brute-force techniques are time-consuming. Hence, we can increase the number
    of threads by setting THREADS to `20`. We also need a list of passwords to be
    tried. We can quickly generate one using the CEWL application in Kali Linux. CEWL
    can quickly crawl through pages of the website to build potential keywords which
    may be the password of the application. Say we have a site called `nipunjaswal.com`.
    CEWL will pull off all the keywords from the site to build a potential wordlist
    with keywords such as Nipun, Metasploit, Exploits, nipunjaswal, and so on. The
    success of CEWL has been found way higher than the traditional brute force attacks
    in all my previous penetration tests. So, let us launch CEWL and build a target
    list as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see CEWL has generated a file called `pass.txt` since we provided the
    name of the file to write to using the `-w` switch. Let''s set `pass_file` with
    the path of the file generated by CEWL, as shown in the following screenshot,
    and run the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Within a fraction of a second, we got the correct username and password combination,
    which is admin: admin. Let''s verify it by manually logging into the application
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Yeah! We have successfully logged into the application. However, we must take
    a note that we have just managed application-level access and not system-level
    access. Moreover, it can't be called a hack since we ran a brute-force attack.
  prefs: []
  type: TYPE_NORMAL
- en: CEWL is more effective on custom web applications, as administrators often tend
    to use words they encounter everyday while setting up new systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve system-level access, let''s dig into Metasploit again for modules.
    Interestingly, we have an exploit module which is `exploit/windows/http/manageengine_connectionid_write`.
    Let''s use the module to gain complete access to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set the `RHOST` and `RPORT` to `172.28.128.3` and `8022` respectively
    and issue the `exploit` command. By default, Metasploit would take reverse meterpreter
    payload, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the meterpreter prompt, which means we have successfully gained access
    to the target system. Not sure how and what happened in the background? You can
    always read the description of the exploit and the vulnerability it targets by
    issuing an `info` command on the module, which will populate details and description
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the exploitation occurs due to the application not checking
    for user-controlled input and causes a remote code execution. Let''s perform some
    basic post-exploitation on the compromised system since we will cover advanced
    post-exploitation in [Chapter 4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790),
    *Post-Exploitation with Metasploit*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Issuing a `getuid` command fetches the current username. We can see that we
    have NT AUTHORITY\LOCAL SERVICE, which is a highly ranked privilege. The `getpid`
    command fetches the process ID of the process we have been sitting inside. Issuing
    a `sysinfo` command generates general system information such as the name of the
    system, OS type, arch, system language, domain, logged-on users, and type of meterepreter
    as well. The `idletime` command will display the time the user has been idle.
    You can always look for various other commands by issuing a `?` at the meterpreter
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the usage of meterpreter commands at [https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/](https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/).
  prefs: []
  type: TYPE_NORMAL
- en: Testing the security of a GlassFish web server with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GlassFish is yet another open source application server. GlassFish is highly
    Java-driven and has been accepted widely in the industry. In my experience of
    penetration testing, I have come across GlassFish-driven web servers several times
    but quite rarely, say 1 out of 10 times. However, more and more businesses are
    moving onto GlassFish technology; we must keep up. In our scan, we found a GlassFish
    server running on port `8080` with its servlet running on port `4848`. Let''s
    dig into Metasploit again to search any modules for a GlassFish web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Searching the module, we will find various modules related to GlassFish. Let''s
    take a similar approach to the one we took for the previous module and start brute
    forcing to check for authentication weaknesses. We can achieve this using the
    `auxiliary/scanner/http/glassfish_login` module, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set the `RHOST`, desired username to break into, the password file (which
    is `fasttrack.txt` listed in the `/usr/share/wordlists` directory in Kali Linux),
    the number of threads (to increase the speed of the attack), and `STOP_ON_SUCCESS`
    to `true` so that, once the password is found, the brute-forcing should stop testing
    for more credentials. Let''s see what happens when we run this module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We successfully obtained the credentials. We can now log in to the application
    to verify whether the credentials work and can maneuver around the application
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Cool! At this point, you might be wondering whether we will now search for
    an exploit in Metasploit and use it to exploit to system-level access, right?
    Wrong! Why? Remember the version of GlassFish running on the server? It is GlassFish
    4.0, which is not known to have any highly critical vulnerabilities at this point
    in time. So, what next? Should we leave our access restricted to application level?
    Alternatively, we could try something out of the box. When we made a search on
    `glassfish` in Metasploit, we came across another module, `exploit/multi/http/glassfish_deployer`;
    can we take advantage of that? Yes! What we will do is to create a malicious `.war`
    package and deploy it on the GlassFish server, which causes remote code execution.
    Since we already have credentials to the application, it should be a piece of
    cake. Let''s see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set all the necessary parameters, such as `RHOST`, `PASSWORD` (which
    we found in the previously demonstrated module), and `USERNAME` (if other than
    admin), and run the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We should be seeing a remote shell popping up, right? Let''s see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alas! The exploit got aborted due to failure since we do not have access to
    `http://172.28.128.3:4848`, and we failed to authenticate. What could be the reason?
    The reason is that port `4848` is running an HTTPS version of the application
    and we were trying to connect to the HTTP one. Let''s set `SSL` to `true`, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great! We managed to connect to the application successfully. However, our
    exploit still failed since it cannot automatically select the target. Let''s see
    what all the supported targets for the module are, using the `show targets` command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we know that GlassFish is a Java-driven application, let''s set the target
    as Java by issuing the `set target 1` command. Additionally, since we changed
    the target, we need to set a compatible payload. Let''s issue the `show payloads`
    command to populate all the matching payloads which can be used on the target.
    However, the best payloads are meterpreter ones since they provide a lot of flexibility
    with various support and functions all together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that since we set the target as Java, we have Java-based meterpreter
    payloads which will help us gain access to the target. Let''s set the `java/meterpreter/reverse_tcp
    payload` and run the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we gained access to the target. However, for some reason, the
    connection died. The connection died notification is a standard error while dealing
    with different types of payloads. Dead sessions can occur for many reasons, such
    as detection by an antivirus, an unstable connection, or an unstable application.
    Let''s try a generic shell-based payload such as `java/shell/reverse_tcp` and
    rerun the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we have made it to the server. We are now dropped into a command shell
    at the target server and can potentially do anything we require to fill our post-exploitation
    demands. Let''s run some basic system commands such as `dir`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us try reading some interesting files with the type command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will look at privilege escalation and more on post-exploitation in [Chapter
    4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790), *Post-Exploitation
    with Metasploit*.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting FTP services with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that we have another system in the network. Let''s perform a
    quick `nmap` scan in Metasploit and figure out the number of open ports and services
    running on them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are plenty of services running on the target. We can see we have vsftpd
    2.3.4 running on port 21 of the target, which has a popular backdoor vulnerability.
    Let''s quickly search and load the exploit module in Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set `RHOST` and `payload` for the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that when issuing the `show payloads` command, we cannot see too
    many payloads. We just have a single payload that provides us with the shell access
    to the target and, as soon as we run the `exploit` command, the backdoor in vsftpd
    2.3.4 triggers and we are given access to the system. Issuing a standard command
    such as whoami will display the current user, which in our case is root. We do
    not need to escalate privileges on this system. However, a better control of access
    would be very desirable. So let''s improve the situation by gaining meterpreter-level
    access to the target. To achieve a meterpreter shell, we will first create a Linux
    meterpreter shell binary backdoor and host it on our server. Then, we will download
    the binary backdoor to the victim''s system, provide all the necessary permissions,
    and run the backdoor with the help of the shell access which we have already gained.
    However, for the backdoor to work, we will need to set up a listener on our system
    which will listen for the incoming meterpreter shell from the backdoor execution
    on the target. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We quickly spawn a separate terminal and use `msfvenom` to generate a backdoor
    of type `linux/x86/meterpreter/reverse_tcp` using a `-p` switch and providing
    options such as `LHOST` and `LPORT` which denote our IP address to which the backdoor
    will connect and the port number. Also, we will provide the format of the backdoor
    with a `-f` switch as `.elf` (the default Linux format) and save it as `backdoor.elf`
    file on our system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to move the generated file to our `/var/www/html/` directory
    and also start the Apache server so that any request asking for the file download
    receives the backdoor file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now all set to download the file at the victim''s end using our shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have successfully downloaded the file at the target''s end. Let''s fire
    up a handler so that once the backdoor is executed, it''s handled correctly by
    our system. To start a handler, we can spawn a new Metasploit instance in a separate
    terminal and can use the `exploit/multi/handler` module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to set up the same payload we used to generate the backdoor,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now set up basic options such as `LHOST` and `LPORT`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can start the handler in the background using the `exploit -j` command as
    shown in the preceding screenshot. Meanwhile, starting a handler in the background
    will allow multiple victims to connect with the handler. Next, we just need to
    provide necessary permissions to the backdoor file at the target system and execute
    it, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what happens when we run the backdoor file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that as soon as we ran the executable, we got a meterpreter shell
    at the handler. We can now interact with the session and can perform post-exploitation
    with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting browsers for fun and profit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web browsers are used primarily for surfing the Web. However, an outdated web
    browser can lead to the compromise of the entire system. Clients may never use
    the preinstalled web browser and choose the one based on their preference. However,
    the default preinstalled web browser can still lead to various attacks on the
    system. Exploiting a browser by finding vulnerabilities in the browser components
    is known as browser-based exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Firefox vulnerabilities, refer to [http://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452](http://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452).
  prefs: []
  type: TYPE_NORMAL
- en: For Internet Explorer vulnerabilities, refer to [http://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26](http://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26).
  prefs: []
  type: TYPE_NORMAL
- en: The browser autopwn attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers browser autopwn, an automated attack module that tests various
    browsers for weaknesses and exploits them. To understand the inner workings of
    this module, let us discuss the technology behind the attack.
  prefs: []
  type: TYPE_NORMAL
- en: The technology behind a browser autopwn attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Autopwn** refers to the automatic exploitation of the target. The autopwn
    module sets up most of the browser-based exploits in the listening mode by automatically
    configuring them one after the other. Then, it waits for an incoming connection
    and launches a set of matching exploits, depending upon the victim''s browser.
    Therefore, irrespective of the browser a victim is using, if there are vulnerabilities
    in the browser, the autopwn script attacks it automatically with the matching
    exploit modules.'
  prefs: []
  type: TYPE_NORMAL
- en: Let us understand the workings of this attack vector in detail using the
  prefs: []
  type: TYPE_NORMAL
- en: 'following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding scenario, an exploit server running the `browser_autopwn` module
    is up and running with a number of browser-based exploits with their corresponding
    handlers. As soon as the victim's browser connects to the exploit server, the
    exploit server base checks for the type of browser and tests it against the matching
    exploits. In the preceding diagram, we have Internet Explorer as the victim's
    browser. Therefore, exploits matching the Internet Explorer launch at the victim's
    browser. Successful exploits make a connection back to the handler, and the attacker
    gains shell or meterpreter access to the target.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking browsers with Metasploit browser_autopwn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To conduct a browser exploitation attack, we will use the `browser_autopwn`
    module in Metasploit, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we loaded the `browser_autopwn` module residing at `auxiliary/server/browser_autpown`
    successfully in Metasploit. To launch the attack, we need to specify `LHOST`,
    `URIPATH`, and `SRVPORT`. `SRVPORT` is the port on which our exploit server base
    will run. It is recommended to use port `80` or `443` since the addition of port
    numbers to the URL catches many eyes, and it looks fishy. `URIPATH` is the directory
    path for the various exploits and should be kept in the `root` directory by specifying
    `URIPATH` as `/`. Let us set all the required parameters and launch the module,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Launching the `browser_autopwn` module will set up browser exploits into listening
    mode waiting for the incoming connections, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Any target connecting on port `80` of our system will get an arsenal of exploits
    thrown at it, based on the browser. Let us analyze how a victim connects to our
    malicious exploit server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that as soon as a victim connects to our IP address, the `browser_autopwn`
    module responds with various exploits until it gains meterpreter access, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the `browser_autopwn` module allows us to test and actively exploit
    the victim's browser for numerous vulnerabilities. However, client-side exploits
    may cause service interruptions. It is a good idea to acquire a prior permission
    before conducting a client-side exploitation test. In the upcoming section, we
    will see how a module such as a `browser_autopwn` can be deadly against numerous
    targets.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking Android with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android platform can be attacked either by creating a simple APK file or
    by injecting the payload into an actual APK. We will cover the first one. Let
    us get started by generating an APK file with `msfvenom` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On generating the APK file, all we need to do is to either convince the victim
    (perform social engineering) to install the APK or physically gain access to the
    phone. Let us see what happens on the phone as soon as a victim downloads the
    malicious APK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the download is complete, the user installs the file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Most people never notice what permissions an app asks for. Hence, an attacker
    gains full access to the phone and steals personal data. The preceding section
    lists the required permissions an application needs to operate correctly. Once
    the installation happens successfully, the attacker gains meterpreter access to
    the target phone as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Whooaaa! We got the meterpreter access easily. Post-exploitation is widely
    covered in [Chapter 4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790),
    *Post-Exploitation with Metasploit*. However, let us see some of the basic functionalities
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that running the `check_root` command states that the device is
    rooted. Let us see some other functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the `send_sms` command to send an SMS to any number from the exploited
    phone. Let us see whether the message was delivered or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! The message was delivered successfully. Meanwhile, let us see what system
    we broke into using the `sysinfo` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s `geolocate` the mobile phone as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Browsing the Google Maps link, we can get the exact location of the cell phone
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us take some pictures with the exploited phone''s camera as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we got the picture from the camera. Let us view the image as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Client-side exploitation is fun. However, it is tough to conduct since we require
    actions and help from the victim to execute a file, visit a link, or install an
    APK. However, in the situations where no direct attack is possible, client-side
    attacks are the ones that are the most useful.
  prefs: []
  type: TYPE_NORMAL
- en: Converting exploits to Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the upcoming example, we will see how we can import an exploit written in
    Python to Metasploit. The publicly available exploit can be downloaded from [https://www.exploit-db.com/exploits/31255/](https://www.exploit-db.com/exploits/31255/).
    Let us analyze the exploit as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This straightforward exploit logs into the PCMAN FTP 2.0 software on port `21`
    using anonymous credentials and exploits the software using the `CWD` command.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on building exploits, importing them into Metasploit, and
    bypassing modern software protections, refer to *Chapters 2-4* of *Mastering Metasploit
    First and Second Edition*, by *Nipun Jaswal.*
  prefs: []
  type: TYPE_NORMAL
- en: 'The entire process from the exploit listed earlier can be broken down into
    the following set of points:'
  prefs: []
  type: TYPE_NORMAL
- en: Store username, password, and host in the `fuser`, `pass`, and `host` variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the variable `junk` with `2008 A` characters. Here, `2008` is the offset
    to overwrite EIP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the JMP ESP address to the `espaddress` variable. Here, `espaddress 0x71ab9372`
    is the target return address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store 10 NOPs into the variable `nops`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store the payload for executing the calculator in the variable `shellcode`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Concatenate `junk`, `espaddress`, `nops`, and `shellcode` and store it in the
    `sploit` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a socket using `s.socket(s.AF_INET,s.SOCK_STREAM)` and connect to the
    host using connect((`host`,`21`)) on `port 21`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supply the `fuser` and `fpass` using `USER` and `PASS` to make a successful
    login to the target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Issue the `CWD` command followed by the `sploit` variable. This will cause the
    return address on the stack to be overwritten, giving us control of EIP and, ultimately, executing
    the calculator application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find out more about the anatomy behind stack overflow exploits at [https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/](https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try executing the exploit and analyzing the results as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The original exploit takes a username, password, and host from the command line.
    However, we modified the mechanism with fixed, hardcoded values.
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as we execute the exploit, the following screen shows up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the calculator application popping up, which states that the exploit
    is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering the essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us find out what important values we need to grasp from the preceding exploit
    to generate an equivalent module in Metasploit through the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Serial number** | **Variables** | **Values** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Offset value | `2008` |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Target return / jump address / value found from executable modules using
    `JMP ESP` search | `0x71AB9372` |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Target port | `21` |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Number of leading NOP bytes to the shellcode to remove irregularities
    | `10` |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Logic | The `CWD` command followed by junk data of 2008 bytes, followed
    by arbitrary return address, NOPs, and shellcode |'
  prefs: []
  type: TYPE_TB
- en: We have all the information required to build a Metasploit module. In the next
    section, we will see how Metasploit aids FTP processes and how easy it is to create
    an exploit module in Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Metasploit module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to start building a Metasploit module is to copy an existing similar
    module and to make changes to it. However, the `Mona.py` script can also generate
    Metasploit specific modules on the fly. We will look at producing quick exploits
    using the `Mona.py` script in the last sections of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now see the equivalent code of the exploit in Metasploit as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We started by including all the required libraries and the `ftp.rb` library
    from the `/lib/msf/core/exploit` directory. Next, we assign all the necessary
    information in the `initialize` section. Gathering the essentials from the exploit,
    we assign `Ret` with the return address and Offset as `2008`. We also declare
    the value for the `FTPPASS` option as `anonymous`. Let us look at the next section
    of code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `connect_login` method will connect to the target and try logging into the
    software using the credentials we supplied. But wait! When did we supply the credentials?
    The `FTPUSER` and `FTPPASS` options for the module are enabled automatically by
    including the `FTP` library. The default value for `FTPUSER` is `anonymous`. However,
    for `FTPPASS`, we supplied the value as `anonymous` in the `register_options`
    already.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we use `rand_text_alpha` to generate `junk` of `2008` using the value
    of offset from the targets field, and store it in the sploit variable. We also
    store the value of `Ret` from the targets field in little endian format using
    the pack (`V`) function in the `sploit` variable. Concatenating NOPs using the
    `make_nop` function, followed by the shellcode to the `sploit` variable, our input
    data is ready to be supplied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we simply send off the data in the `sploit` variable to the target in
    the `CWD` command, using a `send_cmd` function from the `FTP` library. So, how
    is Metasploit different? Let us see through the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: We didn't need to create junk data because the `rand_text_aplha` function did
    it for us.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We didn't need to provide the `Ret` address in little endian format because
    the pack(`V`) function helped us in transforming it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We didn't need to generate NOPs manually as `make_nops` did it for us.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We did not need to supply any hardcoded payload since we can decide and change
    the payload at runtime. The switching mechanism of the payload saves time by eliminating
    manual changes to the shellcode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We simply leveraged the `FTP` library to create and connect the socket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most importantly, we didn't need to connect and log in using manual commands
    because Metasploit did it for us using a single method, that is, `connect_login`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting the target application with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw how beneficial the use of Metasploit is over existing exploits. Let
    us exploit the application and analyze the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We know that the `FTPPASS` and `FTPUSER` already have their values set as `anonymous`.
    Let us supply `RHOST` and `payload` type to exploit the target machine as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see our exploit executed successfully. However, if you aren't familiar
    with any programming language, you might have found this exercise tough. Refer
    to all the links and references highlighted at various sections of the chapter
    to gain insight and master every technique used in exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, you learned a lot in this chapter, and you will have to research a lot
    before moving onto the next chapters. We covered various types of applications
    in this chapter and successfully managed to exploit them as well. We saw how `db_nmap`
    stores result in the database, which helps us segregate the data. We saw how vulnerable
    applications such as Desktop Central 9 could be exploited. We also covered applications
    that were tough to exploit, and gaining access to their credentials led to obtaining
    system-level access. We saw how we could exploit an FTP service and gain better
    control with extended features. Next, we saw how vulnerable browsers and malicious
    Android applications could lead to the compromise of the system using client-side
    exploitation. Finally, we looked at how we can convert an exploit to a Metasploit-compatible
    one.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter was a fast-paced chapter; for you to keep up at speed, you must
    research and hone your skills on exploit research, various types of overflow vulnerabilities,
    and how to exploit more services from Metasploitable and other **capture the fla**g
    (**CTF**) style operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can perform the following hands-on exercises for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The FTP service from Metasploitable 3 does not seem to have any critical vulnerabilities.
    Still, try breaking into the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of Elasticsearch on port 9200 is vulnerable. Try gaining access
    to the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit the vulnerable proftpd version from Metasploitable 2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct drive-by attacks using browser autopwn (you should practice in a virtualized
    environment; someone could send you to prison for this, if it were performed in
    a real-world scenario).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try injecting legit APK files with meterpreter and gain remote access to the
    phone. You can try this exercise on virtual devices using Android studio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the referenced tutorials from the Converting exploits to Metasploit section
    and try building/importing an exploit to Metasploit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 4](part0066.html#1UU540-a731d733dba14ccabae643b74e2c8790), *Post-Exploitation
    with Metasploit*, we will cover post-exploitation. We will look at various advanced
    features which we can perform on the compromised machine. Until then, ciao! Happy
    learning.
  prefs: []
  type: TYPE_NORMAL
