- en: Chapter 2. Working with Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will show how variables are used in a Linux system and in scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Using variables in scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating parameters using conditional statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison operators for strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using variables in scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A variable is simply a placeholder for some value. The value can change; however,
    the variable name will always be the same. Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This assigns the value `1` to variable `a`. Here''s another one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To display what a variable contains use the `echo` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the `$` preceding the variable name. This is required in order to show
    the contents of the variable.
  prefs: []
  type: TYPE_NORMAL
- en: If at anytime, you aren't seeing the results you expect first check for the
    `$`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example using the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: All variables in a Bash script are considered to be strings. This is different
    than in a programming language such as C, where everything is strongly typed.
    In the preceding example, `a` and `b` are strings even though they appear to be
    integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a short script to get us started:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output when run on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 1](img/B07040_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since all of the variables are strings I could have also done this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is important to quote strings when they contain blank spaces such as variables
    `d` and `e` here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have found if I quote all the strings in my programs, but not the numbers,
    it is easier to keep track of how I am using the variable (that is, as a string
    or a number).
  prefs: []
  type: TYPE_NORMAL
- en: Validating parameters using conditional statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables can be tested and compared against other variables when using a variable
    as a number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of some of the operators that can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-eq` | This stands for equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `-ne` | This stands for not equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `-gt` | This stands for greater than |'
  prefs: []
  type: TYPE_TB
- en: '| `-lt` | This stands for less than |'
  prefs: []
  type: TYPE_TB
- en: '| `-ge` | This stands for greater than or equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `-le` | This stands for less than or equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `!` | This stands for the negation operator |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s take a look at this in our next example script:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 2](img/B07040_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To help understand this chapter run the script on your system. Try changing
    the values of the variables to see how it affects the output.
  prefs: []
  type: TYPE_NORMAL
- en: We saw the negation operator in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Shell Scripting"), *Getting Started with Shell Scripting* when we were looking
    at files. As a reminder, it negates the expression. You could also say it does
    the opposite of what the original statement means.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When this script is run it will display `Clause 1`. Now consider this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Because of the negation operator it will now display `Clause 2`. Try it on your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Comparison operators for strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The comparison for strings are different than for numbers. Here is a partial
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `=` | This stands for equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `!=` | This stands for not equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `>` | This stands for greater than |'
  prefs: []
  type: TYPE_TB
- en: '| `<` | This stands for less than |'
  prefs: []
  type: TYPE_TB
- en: 'Now let''s take a look at *Script 3*:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output from my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 3](img/B07040_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lets go through this line by line:'
  prefs: []
  type: TYPE_NORMAL
- en: Lines `7`-`14` set up the variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `16` displays their values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `18` checks for equality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `24` uses the not equal operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lines up to `50` are self-explanatory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `44` needs some clarification. In order to avoid a syntax error the `>`
    and `<` operators must be escaped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is accomplished by using the backslash (or escape) `\` character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `50` shows how double brackets can be used to handle the greater than operator.
    As you can see in line `58` it works for the less than operator as well. My preference
    will be to use double brackets when needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `62` shows how to check to see if a string is `not null`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And Line `66` shows how to check to see if a string is `null`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at this script carefully to make sure it is clear to you. Also notice
    that `str7` is shown to be `null`, but we didn't actually declare a `str7`. That
    is okay to do in a script, it will not generate an error. However, as a general
    rule of programming it is a good idea to declare all variables before they are
    used. Your code will be easier to understand and debug by you and others.
  prefs: []
  type: TYPE_NORMAL
- en: A scenario that comes up often in programming is when there are multiple conditions
    to test. For example, if something is true and something else is true take this
    action. This is accomplished by using the logical operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is *Script 4* to show how logical operators are used:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 4](img/B07040_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Run this script on your system using several different parameters. On each attempt,
    try to determine what the output will be and then run it. Do this as many times
    as it takes until you can get it right every time. Understanding this concept
    now will be very helpful as we get into more complicated scripts later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look *Script 5* to see how math can be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 5](img/B07040_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the variables are set up as before. The `let` command is used
    to perform math. Note the `$` prefix is not used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Also note the shorthand way of doing some operations. For example, say you
    want to increment the var `num1` by `1`. You could do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could use the shorthand notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Run this script and change some of the values to get a feel for how the math
    operations work. We will go over this in much more detail in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far we have only talked about variables that are local to a script. There
    are also system wide environment variables (env vars) which play a very important
    part of any Linux system. Here are a few, some of which the reader may already
    be aware of:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Variable | Role |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `HOME` | user''s home directory |'
  prefs: []
  type: TYPE_TB
- en: '| `PATH` | directories which are searched for commands |'
  prefs: []
  type: TYPE_TB
- en: '| `PS1` | command line prompt |'
  prefs: []
  type: TYPE_TB
- en: '| `HOSTNAME` | hostname of the machine |'
  prefs: []
  type: TYPE_TB
- en: '| `SHELL` | shell that is being used |'
  prefs: []
  type: TYPE_TB
- en: '| `USER` | user of this session |'
  prefs: []
  type: TYPE_TB
- en: '| `EDITOR` | text editor to use for `crontab` and other programs |'
  prefs: []
  type: TYPE_TB
- en: '| `HISTSIZE` | number of commands that will be shown by the history command
    |'
  prefs: []
  type: TYPE_TB
- en: '| `TERM` | type of command line terminal that is being used |'
  prefs: []
  type: TYPE_TB
- en: Most of these are self-explanatory, however, I will mention a few.
  prefs: []
  type: TYPE_NORMAL
- en: The `PS1` environment variable controls what the shell prompt displays as part
    of the command line. The default setting is usually something like `[guest1@big1
    ~]$`, which is not as useful as it could be. At a minimum, a good prompt shows
    at least the hostname and current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, as I work on this chapter the prompt on my system looks just like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`big1` is the hostname of my system and `~/LinuxScriptingBook/chapters/chap2`
    is the current directory. Recall that the tilde `~` stands for the user''s `home`
    directory; so in my case this expands out to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `"$"` means I am running under a guest account.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this, my `PS1` env var is defined in `/home/guest1/.bashrc` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `"\h"` shows the hostname and the `\w` shows the current directory. This
    is a very useful prompt and I have been using it for many years. Here''s how to
    show the username as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The prompt would now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you change the `PS1` variable in your `.bashrc` file, make certain you do
    it after any other lines that are already in the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here is what my original `.bashrc` contains under my `guest1`
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Put your `PS1` definition after these lines.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you log into a lot of different machines on a daily basis, there is a `PS1`
    trick I have found that is very useful. This will be shown in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that it looks as though I did not always use a good `PS1`
    variable for the examples in this book. It was edited out during book creation
    to save space.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `EDITOR` variable can be very useful. This tells the system which text
    editor to use for things such as editing the user''s `crontab` (`crontab -e`).
    If not set, it defaults to the vi editor. It can be changed by putting it in the
    user''s `.bashrc` file. Here is what mine looks like for the root account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When I run `crontab -l` (or `-e`), my personally written text editor comes up
    instead of vi. Very handy!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we''ll take a look at *Script 6*, that shows some of the variables on
    my system under my `guest1` account:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 6](img/B07040_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also create and use your own env vars. This is a really powerful feature
    of a Linux system. Here are some examples that I use in my `/root/.bashrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`BIN`: This is the directory of my executables and scripts under root'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOWN`: This is the download directory for email attachments, etc'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DESK`: This is the download directory for screenshots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JAVAPATH`: This is the directory to use when I am writing Java apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KW_WORKDIR`: This is where my editor puts its working files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`L1` and `L2`: This is the IP addresses to my laptops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LBCUR`: This is the current directory I am working in for this book'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be sure to export your variables so that they can be accessed by other terminals.
    Also remember to source your `.bashrc` when you make a change. On my system the
    command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget the period at the beginning of the command!
  prefs: []
  type: TYPE_NORMAL
- en: I will show in a later chapter how these env vars can be paired with aliases.
    For example, the `bin` command on my system is an alias that changes the current
    directory to the `/lewis/bin64` directory. This is one of the most powerful features
    in a Linux system, however, I am always surprised that I do not see it used more
    often.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last type of variable we will cover in this chapter is called an array.
    Suppose you want to write a script that contains all of the IP addresses of the
    machines in your lab. You could do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: That will work and in fact I do something similar to that in my home office/lab.
    However, suppose you have a whole lot of machines. Using arrays can make your
    life a lot simpler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at *Script 7*:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 7](img/B07040_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Run this script on your system and try experimenting with it. If you have never
    seen or used an array before, don't let them scare you; you will get familiar
    with them soon enough. This is another area where it's easy to forget the `${
    array variable here }` syntax so if the script doesn't do what you want (or generates
    an error) check that first.
  prefs: []
  type: TYPE_NORMAL
- en: We will talk about arrays again in much more detail when we cover loops in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we covered how to declare and use both environment and local
    variables. We talked about how math is performed and how to work with arrays.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered using variables in scripts. *Script 1* showed how to assign
    a variable and display its value. *Script 2* showed how to deal with numeric variables
    and *Script 3* showed how to compare strings. *Script 4* showed logical operators
    and *Script 5* showed how math can be performed. *Script 6* showed how environment
    variables are used and *Script 7* showed how to use arrays.
  prefs: []
  type: TYPE_NORMAL
