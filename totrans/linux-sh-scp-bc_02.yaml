- en: Chapter 2. Working with Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will show how variables are used in a Linux system and in scripts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Using variables in scripts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating parameters using conditional statements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison operators for strings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using variables in scripts
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A variable is simply a placeholder for some value. The value can change; however,
    the variable name will always be the same. Here is a simple example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This assigns the value `1` to variable `a`. Here''s another one:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To display what a variable contains use the `echo` statement:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the `$` preceding the variable name. This is required in order to show
    the contents of the variable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: If at anytime, you aren't seeing the results you expect first check for the
    `$`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example using the command line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All variables in a Bash script are considered to be strings. This is different
    than in a programming language such as C, where everything is strongly typed.
    In the preceding example, `a` and `b` are strings even though they appear to be
    integers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a short script to get us started:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 1
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here is the output when run on my system:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 1](img/B07040_02_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Since all of the variables are strings I could have also done this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is important to quote strings when they contain blank spaces such as variables
    `d` and `e` here.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have found if I quote all the strings in my programs, but not the numbers,
    it is easier to keep track of how I am using the variable (that is, as a string
    or a number).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Validating parameters using conditional statements
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables can be tested and compared against other variables when using a variable
    as a number.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of some of the operators that can be used:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| `-eq` | This stands for equal to |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| `-ne` | This stands for not equal to |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| `-gt` | This stands for greater than |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| `-lt` | This stands for less than |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| `-ge` | This stands for greater than or equal to |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| `-le` | This stands for less than or equal to |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| `!` | This stands for the negation operator |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: 'Let''s take a look at this in our next example script:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 2
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And the output is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 2](img/B07040_02_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: To help understand this chapter run the script on your system. Try changing
    the values of the variables to see how it affects the output.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: We saw the negation operator in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Shell Scripting"), *Getting Started with Shell Scripting* when we were looking
    at files. As a reminder, it negates the expression. You could also say it does
    the opposite of what the original statement means.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When this script is run it will display `Clause 1`. Now consider this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Because of the negation operator it will now display `Clause 2`. Try it on your
    system.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Comparison operators for strings
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The comparison for strings are different than for numbers. Here is a partial
    list:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Explanation |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: '| `=` | This stands for equal to |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| `!=` | This stands for not equal to |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| `>` | This stands for greater than |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| `<` | This stands for less than |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: 'Now let''s take a look at *Script 3*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 3
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s the output from my system:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 3](img/B07040_02_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'Lets go through this line by line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Lines `7`-`14` set up the variables
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `16` displays their values
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `18` checks for equality
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `24` uses the not equal operator
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lines up to `50` are self-explanatory
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `44` needs some clarification. In order to avoid a syntax error the `>`
    and `<` operators must be escaped
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is accomplished by using the backslash (or escape) `\` character
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `50` shows how double brackets can be used to handle the greater than operator.
    As you can see in line `58` it works for the less than operator as well. My preference
    will be to use double brackets when needed.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `62` shows how to check to see if a string is `not null`.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第62行显示了如何检查一个字符串是否为`not null`。
- en: And Line `66` shows how to check to see if a string is `null`.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第66行显示了如何检查一个字符串是否为`null`。
- en: Take a look at this script carefully to make sure it is clear to you. Also notice
    that `str7` is shown to be `null`, but we didn't actually declare a `str7`. That
    is okay to do in a script, it will not generate an error. However, as a general
    rule of programming it is a good idea to declare all variables before they are
    used. Your code will be easier to understand and debug by you and others.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看这个脚本，确保你能够清楚地理解它。还要注意`str7`被显示为`null`，但实际上我们并没有声明`str7`。在脚本中这样做是可以的，不会产生错误。然而，作为编程的一般规则，最好在使用变量之前声明所有变量。这样你和其他人都能更容易理解和调试你的代码。
- en: A scenario that comes up often in programming is when there are multiple conditions
    to test. For example, if something is true and something else is true take this
    action. This is accomplished by using the logical operators.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中经常出现的一种情况是有多个条件需要测试。例如，如果某件事是真的，而另一件事也是真的，就采取这个行动。这是通过使用逻辑运算符来实现的。
- en: 'Here is *Script 4* to show how logical operators are used:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是*脚本4*，展示了逻辑运算符的使用：
- en: Chapter 2 - Script 4
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2章 - 脚本4
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s the output on my system:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的系统上的输出：
- en: '![Chapter 2 - Script 4](img/B07040_02_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![第2章 - 脚本4](img/B07040_02_04.jpg)'
- en: Run this script on your system using several different parameters. On each attempt,
    try to determine what the output will be and then run it. Do this as many times
    as it takes until you can get it right every time. Understanding this concept
    now will be very helpful as we get into more complicated scripts later.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上使用不同的参数运行这个脚本。在每次尝试时，尝试确定输出是什么，然后运行它。直到你每次都能做对为止，重复这个过程。现在理解这个概念将对我们在后面处理更复杂的脚本时非常有帮助。
- en: 'Now let''s look *Script 5* to see how math can be performed:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下*脚本5*，看看如何执行数学运算：
- en: Chapter 2 - Script 5
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2章 - 脚本5
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And here is the output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Chapter 2 - Script 5](img/B07040_02_05.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![第2章 - 脚本5](img/B07040_02_05.jpg)'
- en: 'As you can see, the variables are set up as before. The `let` command is used
    to perform math. Note the `$` prefix is not used:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，变量和以前一样设置。使用`let`命令执行数学运算。注意没有使用`$`前缀：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Also note the shorthand way of doing some operations. For example, say you
    want to increment the var `num1` by `1`. You could do this as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意一些操作的简写方式。例如，假设你想将变量`num1`增加`1`。你可以这样做：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alternatively, you could use the shorthand notation:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用简写表示法：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run this script and change some of the values to get a feel for how the math
    operations work. We will go over this in much more detail in a later chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个脚本，并改变一些值，以了解数学运算的工作原理。我们将在后面的章节中更详细地讨论这个问题。
- en: Environment variables
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: 'So far we have only talked about variables that are local to a script. There
    are also system wide environment variables (env vars) which play a very important
    part of any Linux system. Here are a few, some of which the reader may already
    be aware of:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只谈到了脚本中局部的变量。还有一些系统范围的环境变量（env vars），它们在任何Linux系统中都扮演着非常重要的角色。以下是一些，读者可能已经知道其中一些：
- en: '| Variable | Role |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 角色 |'
- en: '| --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `HOME` | user''s home directory |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `HOME` | 用户的主目录 |'
- en: '| `PATH` | directories which are searched for commands |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `PATH` | 用于搜索命令的目录 |'
- en: '| `PS1` | command line prompt |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `PS1` | 命令行提示符 |'
- en: '| `HOSTNAME` | hostname of the machine |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `HOSTNAME` | 主机名 |'
- en: '| `SHELL` | shell that is being used |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `SHELL` | 正在使用的shell |'
- en: '| `USER` | user of this session |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `USER` | 本次会话的用户 |'
- en: '| `EDITOR` | text editor to use for `crontab` and other programs |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `EDITOR` | 用于`crontab`和其他程序的文本编辑器 |'
- en: '| `HISTSIZE` | number of commands that will be shown by the history command
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `HISTSIZE` | 历史命令中将显示的命令数 |'
- en: '| `TERM` | type of command line terminal that is being used |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `TERM` | 正在使用的命令行终端的类型 |'
- en: Most of these are self-explanatory, however, I will mention a few.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这些大多是不言自明的，但我会提到一些。
- en: The `PS1` environment variable controls what the shell prompt displays as part
    of the command line. The default setting is usually something like `[guest1@big1
    ~]$`, which is not as useful as it could be. At a minimum, a good prompt shows
    at least the hostname and current directory.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`PS1`环境变量控制shell提示作为命令行的一部分显示的内容。默认设置通常是类似`[guest1@big1 ~]$`的东西，这并不像它本来可以做的那样有用。至少，一个好的提示至少显示主机名和当前目录。'
- en: 'For example, as I work on this chapter the prompt on my system looks just like
    this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我在这一章上工作时，我的系统提示看起来就像这样：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`big1` is the hostname of my system and `~/LinuxScriptingBook/chapters/chap2`
    is the current directory. Recall that the tilde `~` stands for the user''s `home`
    directory; so in my case this expands out to:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`big1`是我的系统的主机名，`~/LinuxScriptingBook/chapters/chap2`是当前目录。记住波浪号`~`代表用户的`home`目录；所以在我的情况下，这会扩展到：'
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `"$"` means I am running under a guest account.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`"$"`表示我是在一个访客账户下运行。'
- en: 'To enable this, my `PS1` env var is defined in `/home/guest1/.bashrc` as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用这个功能，我的`PS1`环境变量在`/home/guest1/.bashrc`中定义如下：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `"\h"` shows the hostname and the `\w` shows the current directory. This
    is a very useful prompt and I have been using it for many years. Here''s how to
    show the username as well:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`"\h"`显示主机名，`\w`显示当前目录。这是一个非常有用的提示，我已经使用了很多年。这是如何显示用户名的方法：'
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The prompt would now look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在提示看起来是这样的：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you change the `PS1` variable in your `.bashrc` file, make certain you do
    it after any other lines that are already in the file.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`.bashrc`文件中更改`PS1`变量，请确保在文件中已经存在的任何其他行之后这样做。
- en: 'For example, here is what my original `.bashrc` contains under my `guest1`
    account:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是我的`guest1`账户下原始`.bashrc`文件的内容：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Put your `PS1` definition after these lines.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些行之后放置你的`PS1`定义。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you log into a lot of different machines on a daily basis, there is a `PS1`
    trick I have found that is very useful. This will be shown in a later chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that it looks as though I did not always use a good `PS1`
    variable for the examples in this book. It was edited out during book creation
    to save space.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'The `EDITOR` variable can be very useful. This tells the system which text
    editor to use for things such as editing the user''s `crontab` (`crontab -e`).
    If not set, it defaults to the vi editor. It can be changed by putting it in the
    user''s `.bashrc` file. Here is what mine looks like for the root account:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When I run `crontab -l` (or `-e`), my personally written text editor comes up
    instead of vi. Very handy!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we''ll take a look at *Script 6*, that shows some of the variables on
    my system under my `guest1` account:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 6
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here''s the output:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 6](img/B07040_02_06.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: 'You can also create and use your own env vars. This is a really powerful feature
    of a Linux system. Here are some examples that I use in my `/root/.bashrc` file:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`BIN`: This is the directory of my executables and scripts under root'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOWN`: This is the download directory for email attachments, etc'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DESK`: This is the download directory for screenshots'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JAVAPATH`: This is the directory to use when I am writing Java apps'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KW_WORKDIR`: This is where my editor puts its working files'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`L1` and `L2`: This is the IP addresses to my laptops'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LBCUR`: This is the current directory I am working in for this book'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be sure to export your variables so that they can be accessed by other terminals.
    Also remember to source your `.bashrc` when you make a change. On my system the
    command would be:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget the period at the beginning of the command!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: I will show in a later chapter how these env vars can be paired with aliases.
    For example, the `bin` command on my system is an alias that changes the current
    directory to the `/lewis/bin64` directory. This is one of the most powerful features
    in a Linux system, however, I am always surprised that I do not see it used more
    often.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'The last type of variable we will cover in this chapter is called an array.
    Suppose you want to write a script that contains all of the IP addresses of the
    machines in your lab. You could do something like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That will work and in fact I do something similar to that in my home office/lab.
    However, suppose you have a whole lot of machines. Using arrays can make your
    life a lot simpler.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at *Script 7*:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Script 7
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And here is the output on my system:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 2 - Script 7](img/B07040_02_07.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: Run this script on your system and try experimenting with it. If you have never
    seen or used an array before, don't let them scare you; you will get familiar
    with them soon enough. This is another area where it's easy to forget the `${
    array variable here }` syntax so if the script doesn't do what you want (or generates
    an error) check that first.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: We will talk about arrays again in much more detail when we cover loops in the
    next chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we covered how to declare and use both environment and local
    variables. We talked about how math is performed and how to work with arrays.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: We also covered using variables in scripts. *Script 1* showed how to assign
    a variable and display its value. *Script 2* showed how to deal with numeric variables
    and *Script 3* showed how to compare strings. *Script 4* showed logical operators
    and *Script 5* showed how math can be performed. *Script 6* showed how environment
    variables are used and *Script 7* showed how to use arrays.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
