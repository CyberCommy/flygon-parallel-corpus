- en: '*Chapter 11*:System Security Profiles with OpenSCAP'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SCAP** stands for **Security Content Automation Protocol**, a standardized
    way to check, verify, and report vulnerability assessment and policy assessment.
    Red Hat Enterprise Linux (RHEL) 8 includes the tool **OpenSCAP**, and profiles
    to audit and manage the security in the systems. This helps ensure the systems
    you are managing comply with standard security policies such as the **Payment
    Card Industry Data Security Standard** (**PCI DSS**) or the **Protection Profile
    for General Purpose Operating Systems**, or **Operating System Protection Profile**
    (**OSPP**) for short, as well as discovering vulnerabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: RHEL 8 includes this tool to review security profiles in order to discover possible
    attack vectors (misconfigurations or vulnerabilities) and can obtain guidance
    on how to better harden the system. We will learn how to perform a scan on a system,
    and discover what needs to be changed to prepare it, in order to ensure it is
    completely aligned with the regulatory requirements. We will also learn how this
    tool can be used to improve the security of a system for general use by reviewing
    it and applying the recommended changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To review how to use OpenSCAP, in this chapter we will go through the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with OpenSCAP and discovering system vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenSCAP with security profiles for OSPP and PCI DSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with OpenSCAP and discovering system vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started in OpenSCAP in a practical way by first reviewing the `Security
    Tools` software group, which has some tools that are good to know, and then proceeding
    to run some scans.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our initial step will be to get information on `Security Tools`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This group includes several security tools, such as `aide`, to ensure file integrity
    in the system; `tpm-tools` to manage the `openscap-utils` to review the security
    policies in the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get more information on those tools by using `dnf`. Let''s review the
    one that is more relevant for this chapter, `openscap-utils`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can see in the output of the previous command what the `openscap-utils` package
    is about, with a brief description and a link to the main web page, which includes
    more extensive information.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It would be useful to run the `dnf info` command for each of the tools mentioned
    and visit their web pages. This way you will be able to gain a better understanding
    of the capabilities these tools provide and be able to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now install `openscap-utils`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s install `scap-security-guide`, which includes the RHEL-specific
    SCAP profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With this package comes the SCAP Security Guides, including the one related
    to vulnerabilities for RHEL 8, which is located at `/usr/share/xml/scap/ssg/content/ssg-rhel8-oval.xml`.
    We can now run an initial scan using all the checks included in the profile. Please
    note that this will include 2,323 tests and that this will be done as an exercise
    to learn about possible vulnerabilities and actions to harden a system. So, let''s
    run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A file called `vulnerability.html` will be generated with the output of the
    scan. The results will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Initial results of an OpenSCAP test scan'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Initial results of an OpenSCAP test scan
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check some of the details of the report. In the top-left corner, we
    will find **OVAL Results Generator Information**, with the details of the run,
    and a summary of the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – OpenSCAP test scan summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – OpenSCAP test scan summary
  prefs: []
  type: TYPE_NORMAL
- en: 'In the top-right corner, we can see **OVAL Definition Generator Information**
    with a summary of the definitions used for checks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – OpenSCAP test scan definitions summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – OpenSCAP test scan definitions summary
  prefs: []
  type: TYPE_NORMAL
- en: 'Right below those tokens of information, we can see a basic summary of the
    system, useful if we have a long list of scans and we want to assign this scan
    to the proper system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – OpenSCAP test scan system summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – OpenSCAP test scan system summary
  prefs: []
  type: TYPE_NORMAL
- en: 'Underneath it, we have information on the generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – OpenSCAP test scan generator info'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – OpenSCAP test scan generator info
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally, the results of the checks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – OpenSCAP test scan results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – OpenSCAP test scan results
  prefs: []
  type: TYPE_NORMAL
- en: With this test, we have run a vulnerability scan on our system, obtaining a
    set of results that, depending on the usage of the system, will need to be addressed.
    In many cases, the warnings received do not apply, so we need to review them carefully.
    This kind of exercise shall be done carefully on production systems, taking care
    of having a proper backup and snapshot of the system before proceeding to apply
    changes. It is recommended to run the hardening in test environments while building
    the service before moving it to production when possible.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The *Red Hat Enterprise Linux System Design Guide* for RHEL 8 is a great piece
    of documentation to get started on system security. It is recommended to read
    through it in order to extend the knowledge acquired in this chapter. It's available
    at [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/system_design_guide/index](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/system_design_guide/index).
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn more about the basics. For this scan, we have used the Red Hat security
    advisories **Open Vulnerability Assessment Language** (**OVAL**) feed, as provided
    by system packages. To check, we have run the OpenSCAP tool to review different
    security advisories and vulnerabilities as written in OVAL.
  prefs: []
  type: TYPE_NORMAL
- en: OVAL requires that the analyzed resources are in a certain state to consider
    them correct. It does so in a declarative manner, which means the end state is
    described and reviewed, not how to get to it.
  prefs: []
  type: TYPE_NORMAL
- en: The Red Hat security team generates Red Hat security advisories to address the
    different vulnerabilities that the system may be incurring and releases an OVAL
    definition for each one of them. These are released openly and are available at
    [https://www.redhat.com/security/data/oval/v2/](https://www.redhat.com/security/data/oval/v2/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at one example found in our report:'
  prefs: []
  type: TYPE_NORMAL
- en: '`oval:ssg-accounts_logon_fail_delay:def:1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compliance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[accounts_logon_fail_delay]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ensure that FAIL_DELAY is Configured in /etc/login.defs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can check the manual page for it by running `man login.defs`. In it, we
    will find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the value to establish how long a user will have to wait after a failed
    login attempt. It is intended to avoid brute force attacks on accounts in the
    system. We may take, for example, two approaches to fix it:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `FAIL_DELAY` variable and value to `login.defs`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce access to the system by only allowing login access using SSH keys and
    not passwords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or even better, do both (security in depth). We could continue to review each
    of the entries in the list and understand each of them to complete the hardening
    of the system to avoid as much exposure as possible. This is a task that is usually
    run in coordination with the security teams and is continuously being reviewed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have run our first vulnerability scan, let's see how we can do it
    for compliance in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenSCAP with security profiles for OSPP and PCI DSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several security profiles used for compliance in the industry. Two
    of the most common, which we will review here, are the **Operating System Protection
    Profile** (**OSPP**) and the PCI DSS.
  prefs: []
  type: TYPE_NORMAL
- en: The OSPP standard is heavily used in the public sector, serving general-purpose
    systems and also as the baseline for other more restrictive environments (that
    is, defense accredited systems).
  prefs: []
  type: TYPE_NORMAL
- en: PCI DSS is one of the most widely used standards in the finance sector, which
    also applies to other sectors that want to provide online payments using credit
    cards.
  prefs: []
  type: TYPE_NORMAL
- en: 'RHEL 8 provides references to verify those profiles using OpenSCAP tools. Let''s
    move to the `/usr/share/xml/scap/ssg/content/` directory, where they reside, and
    take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have different types of descriptions that can be used with
    OpenSCAP. We already know OVAL. Let''s check the most important ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extensible Configuration Checklist Description Format (XCCDF)**: XCCDF is
    used to build security checklists. It''s very common for compliance testing and
    scoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common Platform Enumeration (CPE)**: CPE helps identify systems by assigning
    unique identifier names. This way, it can correlate tests and names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Checklist Interactive Language (OCIL)**: OCIL is part of the SCAP standard.
    It is a way to aggregate other checks from different datastores.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DataStream (DS)**: DS is a format that puts together several components into
    a single file. It is used to distribute profiles easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on the different security descriptions and components can
    be found on the OpenSCAP web page by checking the components URL: [https://www.open-scap.org/features/scap-components/](https://www.open-scap.org/features/scap-components/).'
  prefs: []
  type: TYPE_NORMAL
- en: "In this case, we will use the `ssg-rhel8-ds.xml` file. Let's check the information\
    \ \Lrelated to it:"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it includes the profiles for both OSPP and PCI DSS for RHEL
    8\. Let's give them a try.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for OSPP compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the `--profile` option for `oscap` to get information specific to
    the **OSPP** profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see in the information that the OSPP profile comes described as `xccdf`.
    We can now run `oscap`, indicating that we want to use that format with the `xcddf`
    option and that the action we want to take is to evaluate the system with `eval`.
    The command will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will obtain the `ospp-report.html` file with the full report on the OSPP
    rule results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – OpenSCAP OSPP scan results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – OpenSCAP OSPP scan results
  prefs: []
  type: TYPE_NORMAL
- en: 'It will show the points that require modification to be compliant with the
    profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – OpenSCAP OSPP scan results, detail rules that require action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_11_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.8 – OpenSCAP OSPP scan results, detail rules that require action
  prefs: []
  type: TYPE_NORMAL
- en: We can now follow, step by step, the recommendations and fix them in order to
    be fully OSPP compliant. Also, we can use this scan to harden systems that, even
    when they do not need to be OSPP compliant, will be in an exposed network such
    as a DMZ, and we want to have them hardened.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat provides a way to automatically apply all those changes. It is based
    on the automation tool `/usr/share/scap-security-guide/ansible/rhel8-playbook-ospp.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have reviewed the system for OSPP compliance, let's move to the
    next target, PCI DSS compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for PCI DSS compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can follow the same procedure as before, also using the `--profile` option
    for `oscap` to get information specific to the PCI DSS profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run `oscap` with the same options as in the previous section but specifying
    `pci-dss` as the profile. It will generate the proper report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can start reviewing the items in the report and start fixing them.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As in the previous section, Red Hat also provides a way to automatically apply
    all those changes with Ansible. The playbook for PCI DSS is located at `/usr/share/scap-security-guide/ansible/rhel8-playbook-pci-dss.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that changing from one profile to a different one with OpenSCAP
    is very easy and we can scan for as many profiles as available.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By learning the basics of **OpenSCAP**, we are ready to review and harden systems
    to make them compliant with the regulations we need them to run under.
  prefs: []
  type: TYPE_NORMAL
- en: Now if you are requested to comply with any regulatory requisitions, you can
    find the right SCAP profile for it (or build it if it doesn't exist) and ensure
    that your systems are fully compliant.
  prefs: []
  type: TYPE_NORMAL
- en: Also, even when no regulatory requirements apply, the use of OpenSCAP can help
    you find vulnerabilities in the system, or apply a more secure (and restrictive)
    configuration to your systems in order to reduce the risks.
  prefs: []
  type: TYPE_NORMAL
- en: There are ways to extend our knowledge and skills by learning Ansible and being
    able to automatically apply changes to our systems in a way that is easy to scale,
    as well as Red Hat Satellite, which can help run SCAP scans to the whole IT base
    we are managing even when we could be talking about thousands of systems.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our security skills are improving and being consolidated, let's dive
    deeper into more low-level topics such as local storage and filesystems, as described
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
