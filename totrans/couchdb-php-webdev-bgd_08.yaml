- en: Chapter 8. Using Design Documents for Views and Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our application is not dramatically different from what you might do
    if you were using MySQL or some other relational database. But, in this chapter,
    we're really going to turn up the heat on what we can do with CouchDB by using
    it to handle a lot of things that may have been pain points with relational databases
    in the past.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Define design documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about views and how to use them to query data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover the power of MapReduce functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play with CouchDB's `validation` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's not waste time, and move right into talking about design documents.
  prefs: []
  type: TYPE_NORMAL
- en: Design documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Design documents** are one of the special things that CouchDB has in its
    arsenal that you might not expect from a database. On the surface, design documents
    look the same as regular documents. They have the standard fields: `_id` and `_rev`,
    and can be created, read, updated, and deleted. But unlike normal documents, they
    contain application code in the form of JavaScript and have a specific structure.
    This JavaScript can drive validation, display views with `map` and `reduce` functions,
    and a whole lot more. We''ll touch on each of these features and how to use them
    shortly.'
  prefs: []
  type: TYPE_NORMAL
- en: A basic design document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A basic design document might look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`The _id` and `_rev` should look familiar, but unlike other documents so far,
    the `_id` has a readable name: `_design/example`. Design documents are identified
    as such by having `_design` in the name. So, it''s important that you follow this
    format.'
  prefs: []
  type: TYPE_NORMAL
- en: Moving on from `_id` and `_rev`, you'll notice the key views. Views are a big
    part of design documents, so let's talk more about them.
  prefs: []
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Views** are what CouchDB gives us to index, query, and report on our database''s
    documents. If you are reading this book after a MySQL experience, then views will
    be the replacement for the typical SQL `SELECT` statements.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a bit of a background on what views are, you'll notice that
    in the previous design document, we've created a view called `test`.
  prefs: []
  type: TYPE_NORMAL
- en: Map functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inside the `example` key, we''ve placed a function called `map`. Map functions
    are JavaScript functions that consume documents, and then transform them from
    their original structure into a new key/value pair that your application can then
    use. Map functions are critical to understand. So, let''s look at the simplest
    implementation of a `map` function to make sure we''re all on the same page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When the example `map` function is called, CouchDB will attempt to index each
    of the documents in the database and push them through this function in a JSON
    format using the `doc` argument. From there, we are calling a function called
    `emit` which accepts a key and a value, from which the key and value will be saved
    to an array, which will be returned once the indexing is complete.
  prefs: []
  type: TYPE_NORMAL
- en: The key and value of the `emit` function can be whatever field of a document
    that you would like. In this example, we are passing `doc._id` as the key and
    `doc` as the value into the `emit` function. `doc._id`, as you might have guessed,
    is the `_id` field of the document that is being indexed, and `doc` is the entire
    document represented in a JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to use views to play with our data in the next section. To make
    sure that you can completely decipher what views do to our data, make sure that
    you have at least five or six posts created in the `verge` database.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a temporary view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CouchDB provides temporary views for us to use when we are developing or trying
    to test the result of a view. Let's create a temporary view using Futon so that
    we can play with some of our data.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser, and go to Futon (`http://localhost:5984/_utils/`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are logged in to the `admin` account by checking the bottom
    of the right column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go into our `verge` database by clicking on `verge`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the drop-down box, and select **Temporary view...**.![Time for action
    — creating a temporary view](graphics/3586_08_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This form will allow us to play around with views and test them against data
    in real time.![Time for action — creating a temporary view](graphics/3586_08_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s edit the code in the **Map Function** text area, so that it matches
    the example code we looked at earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Click on **Run** to see the results of the `map` function.![Time for action
    — creating a temporary view](graphics/3586_08_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's make sure we're only seeing posts by checking that `doc.type` is equal
    to `post:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Click on **Run** again, and you'll see the same results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just learned how to create a temporary view in CouchDB so that we can test
    the `map` function that we looked at earlier. Using the temporary view interface
    that Futon gives us, we ran our example `map` function and were shown a list of
    key/value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we strengthened our `map` function a bit to make sure that we were
    only looking at documents with `type` equal to `post`. Right now, the change didn't
    do anything to our `map` function, but that would change as soon as we added a
    document with a different type. If you remember, this is because CouchDB stores
    documents in a flat data store; meaning that as we add new document types, we'll
    want to be specific on which ones we deal with. So, by adding the `if` statement
    into our code, we're telling CouchDB to ignore the documents that do not have
    `type` set as `post`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a view for listing posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You might have noticed the warning on the temporary view page that said the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let's heed this warning and create a design document so that we can start to
    build this all into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser to Futon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the temporary view page that we were working with: (`http://localhost:5984/_utils/database.html?verge/_temp_view`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's make our function a bit more useful, and change our key to `doc.user`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Click on **Run** to see the results.![Time for action — creating a view for
    listing posts](graphics/3586_08_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that our view has the code that we want to use in our application, click
    on **Save As...** to save this view and create a design document for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A window will be displayed asking us to give the design document and the view
    a name. Enter `_design/application` as the name for **Design Document** name and
    `posts_by_user` as for **View Name**, then click on **Save**.![Time for action
    — creating a view for listing posts](graphics/3586_08_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a design document from our temporary view so that our application
    could use it. This time, we changed the key from `doc._id` to `doc.user`, to allow
    us to select documents with a specific username, which will be helpful in just
    a few minutes. We then saved this temporary view into a view called, `posts_by_user`,
    and saved it into a new design document called `_design/application`.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Futon's interface to easily check that our design document was created
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser, and go to the `verge` database in Futon (`http://localhost:5984/_utils/database.html?verge`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the view drop-down box, and select **Design documents**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll only see one document here, which is our newly created design document
    called `_design/application`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the document, and you'll see the full design document.![What just happened?](graphics/3586_08_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While we''re at it, let''s quickly look at how you can use Futon to test out
    a design document and its views:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser to Futon, and make sure you are looking at the `verge`
    database (`http://localhost:5984/_utils/database.html?verge`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the view drop-down box, and you'll see the application (the name of
    our design document). Click on the view called `posts_by_user`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll be shown the results of the view, as well as the code that is currently
    associated with it.![What just happened?](graphics/3586_08_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From this page, you can click on the results and see the document details. You
    can even change the code for your view by simply typing the new code in and clicking
    on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: It's been fun playing with these simple views, but let's get a bit deeper into
    how we can actually use these views to query our documents.
  prefs: []
  type: TYPE_NORMAL
- en: Querying map functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a variety of options that we can use in our `map` queries. I will
    touch on the most common ones, but you can find more my looking at CouchDB''s
    wiki: [http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options](http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common query options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`reduce`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startkey`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endkey`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`descending`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_docs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's use some of these options with our `posts_by_user` view to see what kind
    of results we can get.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — querying the posts_by_user view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember that design document is still a document, which means that we can query
    it just as we would query a regular document. The only difference will be that
    we need to use a slightly different URL pattern to hit the correct file.
  prefs: []
  type: TYPE_NORMAL
- en: Open Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use a `curl` statement to query our design document by passing a key of `johndoe`
    (or another user in your database that has a decent amount of posts), then pass
    it through `python mjson.tool` to make it a bit prettier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The terminal will respond with something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used a `curl` statement to query the `posts_by_user` view in our application
    design document. We passed `johndoe` as the key for our view to search with, which
    CouchDB used to return only documents that matched that key. We then used `python
    mjson.tool` so that we could see our output in a friendly manner.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have some more fun and talk through a few quick scenarios to determine
    how we could solve them with the map's `query` options.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if you really wanted to only retrieve the first post that our `map` function
    would return for `johndoe?` You can do this by adding `limit=1` to the end of
    our query string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Your terminal will respond with the following output. Notice that this time
    you are only getting one post in return:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, what if we wanted to see the last post that our map function would return
    for `johndoe?` You can do this by adding `descending=true`, along with `limit=1`,
    to the end of our statement to get the newest one, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Your command-line will return precisely what you are looking for: the last
    post created by `johndoe`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With some of those examples under your belt, it should be clear that we can
    chain and combine our `query` options to retrieve the data in a variety of ways.
    We could play with querying views for a while, but let's move on to trying to
    build the `posts_by_user` view into our application, in order to allow us to show
    a user's posts on their profile.
  prefs: []
  type: TYPE_NORMAL
- en: Using the view in our application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We've done most of the heavy lifting needed to query our database; we just need
    to add a few lines of code to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding support to get_posts_by_user in the post class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open `classes/post.php` in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `public` function called `get_posts_by_user` that will accept `$username`
    as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's create a new instance of `Bones`, so that we can query CouchDB. Let's
    also instantiate an array called `$posts`, which we'll return at the end of this
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's query our view by passing `$username` as the key, and let's use
    a `foreach` function to iterate through all of the results into a holding `$_post`
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's use the data in the `$_post` variable to create and populate
    a new instance of `Post`. Then, let's add `$post` to the `$posts` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a function called `get_posts_by_user` and placed it in our `Post`
    class. This function accepted an argument called `$username`. The `get_posts_by_user`
    function uses the `get_posts_by_user` view to return a list of posts into a generic
    class, from which we iterated through each document, created individual `Post`
    objects, and pushed them into an array. You'll notice that we had to use `$_post->value`
    to get the post document. Remember that this is because our view returns a list
    of keys and values, one for each document, and our entire document lives in the
    `value` field.
  prefs: []
  type: TYPE_NORMAL
- en: In short, this function enabled us to pass in a user's username and retrieve
    an array of posts created by the passed user.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding posts to the user profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have done all of the heavy lifting to get our user''s posts, we
    just have a few more lines of code until we can have them show up in the user
    profile. Let''s start by adding some code in our `index.php` file to accept the
    username from the route, pass it to the `get_posts_by_user` function, and pass
    the data to the profile view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.php`, find `the /user/:username` route, and add the following code
    to pass the returned posts from our `get_posts_by_user` function to a variable
    for our view to access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `views/user/profile.php`, and add the following code right below the **Create
    a new post** text area so that we can display a list of posts on the user profile
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to support some of the new code that we added, let's update our `public/css/master.css`
    file for the profile to look nice and clean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added some code to the `index.php` file so that when users navigate
    to a user's profile, our application will take the username from the route to
    the `get_posts_by_user` function and pass the result of that function into a variable
    called `posts`. Then, in the `views/user/profile.php` page, we looped through
    the posts and used Bootstraps CSS rules to make it look nice. Finally, we added
    a few lines of code to our `master.css` file to make everything look nice.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we also added a (Delete) link next to each post that doesn't
    currently do anything. We'll hook this up later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Fire up our browser, and let's check to make sure that everything is working
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser, and log in as one of your users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **My Profile** to see the user profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see the complete profile with all of the user's posts.![What
    just happened?](graphics/3586_08_040.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test to make sure that our list is working by typing some text into the
    text area and clicking on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your profile was refreshed, and your new post should show up at the top of the
    list.![What just happened?](graphics/3586_08_045.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to pause here, log in as a few different users, and create a ton of
    posts!
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re done, let''s move on to talk about the `map` function''s companion:
    **reduce**.'
  prefs: []
  type: TYPE_NORMAL
- en: Reduce functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Reduce** allows you to process the key/value pairs returned by the `map`
    function, and then break them down into a single value or smaller grouping of
    values. To make things easier for us, CouchDB comes with three built-in `reduce`
    functions called `_count, _sum`, and `_stats`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`_count:` It returns the number of mapped values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_sum:` It returns the sum of the mapped values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_stats:` It returns numerical statistics of the mapped values, including sum,
    count, min, and max'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since `reduce` functions may not be 100 percent straightforward to a new developer,
    let's cut to the chase and use one in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we are going to create a `reduce` function for our `get_posts_by_user`
    view that will display the number of posts each user has created. Have a look
    at our existing design document that shows what the `reduce` function would look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `reduce` function grouped together all of the usernames
    from the `map` function and returned a count of how many times each username occurred
    in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating the reduce function in Futon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a `reduce` function to a view is surprisingly easy to do using Futon.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and go to the `verge` database in Futon (`http://localhost:5984/_utils/database.html?verge`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the view drop-down box, and you'll see the application (the name of
    our design document). You can click on the view called `posts_by_user`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **View Code**, so that you can see the text areas for **Map** and **Reduce**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `_count` into the **Reduce** text area, and click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can verify that your `reduce` function is working properly by clicking on
    the **Reduce** checkbox right below the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a screenshot similar to the following:![Time for action — creating
    the reduce function in Futon](graphics/3586_08_047.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used Futon to update our view to use a `_count reduce` function. We
    then tested the `reduce` function in the same view by clicking on the **Reduce**
    checkbox. You'll notice that our `reduce` function also returned a key/value pair
    with the key equal to the username and the value equal to the count of posts that
    they have created.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding support to our application to consume the reduce function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created the `reduce` function, let's add some code to our application
    to retrieve the value.
  prefs: []
  type: TYPE_NORMAL
- en: Open `classes/post.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've created a `reduce` function, we need to make sure that the `get_posts_by_user`
    function uses the view without using the `reduce` function. We'll do this by adding
    `reduce=false` to the query string. This tells the view not to run the `reduce`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Create a new `public` function called `get_post_count_by_user` that will accept
    `$username` as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a call to our view that mimics our `get_posts_by_user` function. But,
    this time, we'll add `reduce=true` to the query string. Once we get a result from
    the view, traverse through the data to get the value that is located in the value
    of the first returned row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Open `index.php`, and find the `/user/:username` route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add code to pass the value from the `get_post_count_by_user` function to a variable
    that our view can access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Finally, open up the user profile (`views/user/profile.php`) and display the
    $post_count variable at the top of our `post` list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started this section by updating our existing `get_posts_by_user` function
    and told it not to run the `reduce` function, just the `map` function. Then, we
    created a function called `get_post_count_by_user` that accessed our `posts_by_user`
    view. But, this time, we told it to run the `reduce` function by passing `reduce=true`
    in our call. When we received the value from the `reduce` function, we navigated
    into the value of the first row and returned it. We're looking at just one row,
    because we're only passing in one username, meaning that only one value will be
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: We then called `get_post_count_by_user` from the user profile route and passed
    it to the `user/profile.php` view. In the view, we outputted `$post_count` at
    the top of the list of posts.
  prefs: []
  type: TYPE_NORMAL
- en: With that small amount of code, we've added a cool piece of functionality to
    our profile. Let's test it out to see what `$post_count` displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser, and go to John Doe''s user profile by going to: `http://localhost/verge/user/johndoe`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that we are now displaying the number of posts at the top of the `post`
    list.![What just happened?](graphics/3586_08_048.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More with MapReduce
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the `map` and `reduce` functions together is often referred to as **MapReduce**,
    and when used together they can be a powerful method of data analysis. Unfortunately,
    we can't go through a variety of case studies in this book, but I'll include some
    references for further education at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we're going to expose and talk about another really unique
    property of CouchDB — its built-in support for document function. This feature
    allows us to have tighter controls on our data and can safeguard us from some
    nasty problems that can occur with web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that our `verge` database is readable by any user, which hasn't really
    been a problem for us yet. But, what if, for instance, someone found out where
    our database was stored? They could easily create and delete the documents in
    our database in no time.
  prefs: []
  type: TYPE_NORMAL
- en: In order to fully illustrate this problem, let's add a functionality that will
    allow our users to delete their posts. This simple function will illustrate a
    potential security hole, which we will then patch up with CouchDB's `validation`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding support for $_rev to our classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until this point, we've seen the `_rev` key in our CouchDB documents, but
    we haven't had to actually use it in our application. In order for us to take
    any actions on an already existing document, we'll need to pass `_rev`, along
    with `_id`, to ensure that we are acting on the most recent document.
  prefs: []
  type: TYPE_NORMAL
- en: Let's prepare for this by adding a `$_rev` variable to our `base` class.
  prefs: []
  type: TYPE_NORMAL
- en: Open `classes/base.php` in your working directory, and add the `$_rev` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, now anytime we call the `to_json` function, `_rev` will always
    be included, regardless of it being used or not. If we were to send CouchDB a
    `null _rev`, it would throw an error. So, let's add some code to the `to_json`
    function in `classes/base.php` to unset our `_rev` variable if it has no value
    set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added `$_rev` to our `base` class. Up until this point, we haven't really
    had a need to use this value, but it's a requirement when we are dealing with
    existing documents. After adding `$_rev` to the `base` class, we had to retrofit
    our `to_json` function so that it would unset `$_rev` if it didn't have a value
    set.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding support to delete posts in our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have access to the `_rev` variable in our `base` class, let's add
    support so that our application can delete posts from the user profile.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by opening `classes/post.php` and adding a line of code to the `get_posts_by_user`
    function so that we have `_rev` available to us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's create a nice and simple `delete` function in the `classes/post.php`
    file, so we can delete the posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the backend support to delete the posts, let's add a route
    in our `index.php` file that accepts `_id` and `_rev`. With this route, we can
    trigger the deletion of posts from our profile page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's update our `views/user/profile.php` page, so that when users
    click on the `delete` link, they hit our route, and we pass the necessary variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added support for users to delete posts from their profile. We started
    by making sure that we returned `_rev` to our post objects in the `get_posts_by_user`
    function, so that we can pass it when we are attempting to delete a post. Next,
    we created a `delete` function in our `post` class that accepts `$id` and `$rev`
    as attributes and calls Sag's `delete` method. Then, we created a new route called
    `/post/delete` that allows us to pass `_id` and `_rev` to it. In this route, we
    created a new `Post` object to which we set `_id` and `_rev` and then called the
    `delete` function. We then set the `success` variable and refreshed the profile.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we made the `delete` link operational in the user profile by passing
    `$post->_id` and `$post->_rev` to the `/post/delete` route.
  prefs: []
  type: TYPE_NORMAL
- en: Sweet! We can now click on **Delete** next to any post on the site, and it will
    be removed from the database. Let's give it a shot.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and go to `http://localhost/verge`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as any user, and go to their user profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **(Delete)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page will reload, and your post will be magically gone!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This code technically works just as we planned, but if you played around with
    deleting posts for a few minutes, you might have noticed that we have a problem
    here. Right now, any user can delete a post from any profile, meaning that I could
    go to your profile and delete all of your posts. Of course, we can quickly fix
    this problem by hiding the **Delete** button. But, let's take a step back, and
    quickly think about this.
  prefs: []
  type: TYPE_NORMAL
- en: What would happen if someone came across (or guessed) the `_id` and `_rev` of
    a user's posts, and passed it to the `/post/delete` route? The post would be deleted,
    because we don't have any user-level validation to ensure that the person trying
    to delete the document is actually the owner of the document.
  prefs: []
  type: TYPE_NORMAL
- en: Let's fix this problem on a database level first, then we'll work backwards
    and hide the **Delete** button correctly in the interface.
  prefs: []
  type: TYPE_NORMAL
- en: CouchDB's support for validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CouchDB provides validation for documents via a function in the design document
    called `validate_doc_update`. This function can cancel the creation/update/deletion
    of a document if the action doesn''t meet our criteria. Validation functions have
    a defined structure and fit right into a design document as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Let's look at the `validate_doc_update` function and make sure we are clear
    on what is happening here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`newDoc:` It is the document that you are trying to save'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oldDoc:` It is the existing document (if there is an existing one)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`userCtx:` It is the user object and their roles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know what parameters we have at our disposal, let's make a simple
    `validate` function that ensures that only the creator of a document can update
    or delete that document.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding a validate function to ensure that only creators can
    update or delete their documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding `validate` functions can be a bit odd, because unlike views, there isn't
    a nice interface in Futon for us to use. The quickest way to add the `validate_doc_update`
    function is to treat it like a normal field in our document and type the code
    right into the value. It's a bit strange, but it is the quickest way to adjust
    design documents. At the end of the chapter, I'll give you some resources if you
    want to get a bit cleaner with how you manage design documents.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and go to Futon (`http://localhost:5984/_utils/`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are logged in to the `admin` account by checking that the
    bottom right column says **Welcome**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to our `verge` database by clicking on `verge`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on our `_design/application` design document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Field**, and call this field `validate_doc_update`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Value** text area, add the following code (formatting and indents
    don''t matter):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Click on **Save**, and your document will be updated to include the validate
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used Futon to update our `_design/application` design document. We used
    the simple interface to create the `validate_doc_update` function and put our
    validation code in the value. The code might look a bit confusing; let's walk
    through it real quick.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we checked to make sure that the document we''re saving has a user variable
    attached to it using this `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we checked to see if the username on the document matched that of the
    currently logged-in user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If it turns out that the document did have a user tied to it, and the user
    that attempted to save was not the logged-in user, then we throw a forbidden error
    (HTTP response with status code `403)` with details on why the document could
    not be saved with this line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s worth noting that a design document can only have one `validate_doc_update`
    function. So, if you want to carry out different types of validations on different
    documents, then you would have to do something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: There is a lot more we could do with validation functions. In fact, the `_users`
    database, which we use frequently, drives all of the user validation and controls
    using the `validate_doc_update` function.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's test out our `validation` function.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser, and go to `http://localhost/verge`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as a different user than `John Doe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the profile of `John Doe` by going to: `http://localhost/verge/user/johndoe`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try clicking on the `(Delete)` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will display the following message to you:![What just happened?](graphics/3586_08_050.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! CouchDB threw a `403` error for us, because it knew that we weren't logged
    in as `John Doe` and we tried to delete one of his posts. If you wanted to investigate
    further, you could log in as `John Doe` again and verify that you can delete his
    posts when you are logged in as him.
  prefs: []
  type: TYPE_NORMAL
- en: We can feel safe in knowing that no matter what interface a user uses, Sag,
    curl, or even through Futon, CouchDB will ensure that a user must own a document
    in order for them to delete it.
  prefs: []
  type: TYPE_NORMAL
- en: We could add a more graceful error message for this validation error, but it's
    rare that this error will happen, so let's move on for now. Let's just add some
    simple logic to our user profile so users don't have the ability to delete the
    posts of other users.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – hiding the delete buttons when not on the current user's profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hiding the delete buttons from a user is actually very easy for us to do. While
    this method is no replacement for our previous validation function, it's a nice
    and friendly way for us to safeguard against users from accidentally trying to
    delete other's posts.
  prefs: []
  type: TYPE_NORMAL
- en: Open view/user/profile.php in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the loop where our posts are created, and add this code around our delete
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used our simple variable `$is_current_user` to hide the delete button
    from a user when they are looking at someone else's profile and show it when they
    are looking at their own. This is the same technique we used to show and hide
    the text area for creating posts earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If one of your users went to another user's profile now, they wouldn't be able
    to see the option to delete one of their posts. Even if they somehow managed to
    find out the `_id` and `_rev` of a post, and were able to trigger the deletion
    of a post, the `validation` function would stop them dead in their tracks.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We went through a lot in this chapter, but I was only able to touch on a few
    points that would definitely be worth researching more.
  prefs: []
  type: TYPE_NORMAL
- en: Want more examples?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learning advanced techniques for `MapReduce` functions and design documents
    could take up an entire book. In fact, there is an entire book on it! If you want
    to learn more about real use-case scenarios and how to deal with one-to-many and
    many-to-many relationships, then check out a book from *Bradley Holt* called Writing
    and *Querying MapReduce Views in CouchDB.*
  prefs: []
  type: TYPE_NORMAL
- en: Working with design documents in Futon is too hard!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You aren't the only one who thinks that working with design documents in Futon
    is too hard.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few tools that might be worth checking out:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CouchApp** ([http://couchapp.org/](http://couchapp.org/)): It is a utility
    that can enable you to create full-blown JavaScript applications that run inside
    of CouchDB. However, the way it manages design documents can also make your life
    easier when developing PHP applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LoveSeat** ([http://www.russiantequila.com/wordpress/?p=119](http://www.russiantequila.com/wordpress/?p=119)):
    It is a lightweight editor that works under Mono, meaning it will work on any
    operating system. It allows you to very easily manage your documents and design
    documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a deep dive into CouchDB and utilized some of its unique
    characteristics to make our apps simpler. More specifically, we talked about design
    documents and how CouchDB uses them, creating views and a design document using
    Futon. We learned about views, how we can query them with options, such as SQL,
    queried our posts in views with the help of MapReduce, consumed a view in our
    application to dynamically display a list and count of posts for each user, and
    we also learned how to build validation into CouchDB and used it to safeguard
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take our application a few steps further and add
    fun features, such as improving our user experience with JQuery, adding pagination,
    using Gravatars, and more!
  prefs: []
  type: TYPE_NORMAL
