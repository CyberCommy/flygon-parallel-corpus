- en: Chapter 6. Taming Complexity with Annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to create a RESTful API that involved
    receiving a request from the Internet, routing it to the controllers, and processing
    it. In this chapter, you will learn how to use annotations in the DocBlock, a
    way of performing routing that requires even less code and can be a faster and
    more organized way of doing collaborative programming with a team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotations will be demonstrated for:'
  prefs: []
  type: TYPE_NORMAL
- en: Routing of HTTP requests such as GET, POST, and PUT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning a controller into a fully enabled CRUDL resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening to events that are fired from commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding middleware to controllers to limit or filter requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Annotations are great mechanisms used in programming. Annotations are metadata
    that enhance other data. Since this may seem slightly confusing, so we need to
    first understand what the meaning of metadata is. The word **metadata** is a word
    that contains two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**meta**: This is a Greek word that means transcending or encompassing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data**: This is a Latin word that means pieces of information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, metadata serves to enhance or extend the meaning of something.
  prefs: []
  type: TYPE_NORMAL
- en: Annotations in other programming languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will discuss annotations that are used in computer programming. We
    will take a look at several examples from Java, C#, and PHP, and then finally,
    take a look at how annotations are used in Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Annotations in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Annotations were first proposed in Java Version 1.1 and added in Version 1.2\.
    The following is an example of an annotation that is used to override an animal''s
    `speak` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `@` symbol is used to signal the compiler that this annotation,
    `@Override`, is important.
  prefs: []
  type: TYPE_NORMAL
- en: Annotations in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In C#, annotations are called attributes and use square brackets instead of
    the more often used `@` symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Annotations in PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other PHP frameworks use annotations. Symfony makes extensive use of annotations.
    In **Doctrine**, which is Symfony''s ORM and is similar to Laravel''s Eloquent,
    annotations are used to define relationships. Symfony also uses annotations for
    routing. The **Zend Framework** (**ZF**) uses annotations as well. Both the testing
    tools Behat and PHPUnit use annotations. In the following example of Behat, an
    annotation is used to indicate that this method should be executed before the
    test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: DocBlock annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The example of annotation usage shown in the previous Behat example is rather
    interesting, as it places the annotation inside the DocBlock. The DocBlock begins
    with a forward slash and two asterisks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It contains *n* lines beginning with an asterisk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DocBlock ends with a single asterisk and forward slash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This syntax tells the parser that something useful is inside the DocBlock in
    addition to the normal comments.
  prefs: []
  type: TYPE_NORMAL
- en: DocBlock annotations in Laravel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Laravel 5 was being developed, support for routing and event listeners
    via DocBlock annotations was originally added. Its syntax was similar to Symfony
    and Zend.
  prefs: []
  type: TYPE_NORMAL
- en: Symfony
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for Symfony is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Zend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for Zend is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Laravel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for Laravel is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What type of problem does the DocBlock annotation try to solve though?
  prefs: []
  type: TYPE_NORMAL
- en: 'One use of doc-annotations would be to add them to controllers, thus moving
    the control of the routing and middleware to the controller. This would make the
    controller more portable and even framework-agnostic, since the `routes.php` file
    would play a lesser role, if not be totally absent. As shown in the following
    example, the `routes.php` file can grow quite large, and this would lead to complexity
    and even cause the file to be unmanageable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The idea of DocBlock annotations would be to tame this complexity, as the routing
    would be moved to the controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shortly before the release of Laravel 5.0, due to community disapproval, the
    feature was removed. Also, since some developers may not want to use this approach,
    it would be proper to move this package from the core of Laravel and into a package.
    The method to install the package is similar to the way in which the HTML package
    was added. This package is also supported by the Laravel Collective. It is easy
    to add annotations by typing the following composer command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the annotations package, while `composer.json` will show
    the package added in the require section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step would be to create a file named `AnnotationsServiceProvider.php`
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the `AnnotationsServiceProvider.php` file will need to be added to the
    `config/app.php` file. The class, which needs to be added with the namespace,
    should be added to the providers array as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Resource controller using DocBlock annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, to illustrate the use of Laravel's DocBlock annotations, we will examine
    the steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create the accommodations controller as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add the accommodations controller to the list of the annotation
    service provider''s routes to scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add the DocBlock annotation to the controller. In this case, we
    will instruct the parser to use this controller as a resource controller for the
    accommodations route. The code to be added is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the whole controller will be turned into a resource, the DocBlock annotation
    should be inserted before the class definition. The `AccommodationsController`
    class should now be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that double quotes are required here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following syntax, using single quotes, would not be correct and will not
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Single method routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we desire to just add one route to a single method, such as "search for
    accommodation", then an annotation would be added above the single method; however,
    this time, inside the class. To handle the GET HTTP request verb, the code would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The class would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Scanning routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is extremely important. The Laravel application must process the
    annotations. For this chore, Artisan is used to scan the routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is used to scan the routes. The output will be `Routes
    scanned!` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The results of this scan will produce a file named `routes.scanned.php` in the
    `storage/framework` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code writes to `storage/framework/routes.scanned.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `storage/framework/routes.scanned.php` file does not need to be
    put into source code control as it is generated.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a developer has to execute the Artisan route scan command as the controllers
    are being built, the effort to do this could become tedious. As a convenience
    to the developer, there is way to have Laravel automatically scan the controllers
    in the `scanRoutes` array on every request to the framework while in the development
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: In the `AnnotationsServiceProvider.php` file, set the `scanWhenLocal` attribute
    to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: The same is true for `$scanControllers` and `$scanEverything`; these two Boolean
    flags allow the framework to automatically scan the `App\Http\Controllers` directory,
    and any class that is namespaced, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is imperative to remember that this should *only* be used during development
    and on a development machine, since it will add unnecessary overhead to the request
    cycle. An example of how the attributes are set to `true` is shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Enabling these options will slow down the framework, but allow flexibility in
    the development phase.
  prefs: []
  type: TYPE_NORMAL
- en: Additional annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To pass an ID to a route, as is common during the display of a single accommodation,
    the code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This DocBlock annotation would be placed above the function inside the class,
    which is similar to the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: 'To limit the ID to one or more digits, an `@Where` annotation can be used as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Both the annotations are combined together as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To add middleware to the example, which limits the request to only authenticated
    users, the `@Middleware` annotation may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: HTTP verbs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a list of the various HTTP verbs that can use annotations,
    that mirror RESTful standards:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Delete`: This verb deletes a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Get`: This verb displays a resource or resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Options`: This verb displays a list of options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Patch`: This verb modifies an attribute or attributes of a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Post`: This verb creates a new resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Put`: This verb modifies a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other annotations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are additional annotations that also may be used in controllers. The
    annotations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Any`: This responds to any HTTP request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Controller`: This creates a controller for a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Middleware`: This adds middleware to a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Route`: This enables a route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Where`: This limits requests based on certain criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Resource`: This enables a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using annotations in Laravel 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us recall the pathway that was implemented in Laravel, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP request gets routed to a controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command is instantiated inside of the controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An event is fired
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The event is handled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Using annotations in Laravel 5](graphics/B04559_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Laravel's modern command-based pub-sub pathway.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using annotations, this process can be rendered even easier. First, a reservations
    controller will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a route to allow the user to create a new reservation, the POST HTTP
    verb will be used. The `@Post` annotation will listen to requests with the `POST`
    method attached to the `/bookRoom` url. This is used in place of the route that
    would normally be found inside of the `routes.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to limit requests to a valid URL, the domain parameter limits requests
    to a certain URL. Additionally, the auth middleware requires the authentication
    of any request that wishes to reserve a room:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the `ReserveRoom` command should be created. This command will be instantiated
    inside the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Contents of the ReserveRoom Command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to instantiate the `ReserveRoom` command from inside the
    reservation controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will create the RoomWasReserved event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To instantiate the `RoomWasReserved` event from the `ReserveRoom` handler,
    we may take advantage of the `event()` helper method. In this example, the command
    is self-handling, thus it is simple to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the user needs to be sent the details of the room reservation email,
    the next step is to create an e-mail sender handler for the `RoomWasReserved`
    event. To do this, `artisan` is used again to create the handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The methods of the `SendEmail` handler for the `RoomWasReserved` event are
    simply constructor and handler. The job of sending the e-mail would be performed
    inside the handler method. The `@Hears` annotation is added to its DocBlock to
    complete the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Simply add `RoomReservedEmail` to the `scanEvents` array to allow that event
    to be scanned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to import. Artisan is used to scan events for annotations
    and write to the output file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the `storage/framework/events.scanned.php` file, which
    shows the event listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The final view of the scanned annotation files inside the storage directory
    is as follows. Note that they are parallel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Laravel uses `artisan` to cache routes, but not to scan events, so the following
    command produces a cached file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The `route:scan` command must be run before the `route:cache` is run, so it
    is important to execute the two commands in this order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This command writes to: `storage/framework/routes.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Both the files will be created, but only the compiled `routes.php` file is used
    until `php artisan route:scan` is run again.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several principle advantages of using DocBlock annotations for routing
    in Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: Each controller remains independent. The controller is not "tied" to a separate
    route and this makes sharing controllers, and moving them from project to project,
    easier. The `routes.php` file may be viewed as unnecessary for a simple project
    with only a few controllers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers need not worry about `routes.php`. When working with other developers,
    the routes file needs to be kept continually in synchronization. With the DocBlock
    annotations approach, the `routes.php` file is cached and not placed under source
    code control; each developer may simply concentrate on his or her controllers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The route annotation keeps the route together with the controller. When controllers
    and routes are separate, and when a new programmer reads the code for the first
    time, it may not be immediately clear to which routes each controller method is
    attached. By placing the route directly in the DocBlock above the function, it
    is immediately evident.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers that are familiar with, and are used to, using annotations in frameworks,
    such as Symfony and Zend may find using annotations in Laravel to be a very convenient
    way of developing software applications. Also, Java and C# developers using Laravel
    as their first PHP experience will find annotations very convenient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The decision about whether or not to use annotations in a software lies with
    the developer. The decision to remove it from the core of Laravel, as well as
    the HTML forms packages, shows that the framework is becoming more and more flexible,
    having as default only a minimum set of packages. This allows for stability and
    less maintenance for the core developers as Laravel moves towards a **long-term-support**
    (**LTS**) release with Laravel 5.1.
  prefs: []
  type: TYPE_NORMAL
- en: Since the annotations package is part of the Laravel Collective, support for
    this package will be managed by the team, which guarantees that the feature's
    usefulness will be extended and expanded with contributions through to the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the package could be extended to include a template that is automatically
    created with the route annotation that has the same name as the controller. This
    would save yet another step in the process of creating a controller and route—one
    of the most essential yet monotonous tasks in the software development process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about annotations, how they are used in programming
    in general, how they are used in other frameworks, and finally how their use has
    been adopted into the Laravel annotation composer package. We have learned how
    to speed up the development process through the use of annotations and how to
    automate the scanning of annotations. In the next chapter we will learn about
    middleware, which is a mechanism used in the *middle* between the route and the
    application.
  prefs: []
  type: TYPE_NORMAL
