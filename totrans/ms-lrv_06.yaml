- en: Chapter 6. Taming Complexity with Annotations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to create a RESTful API that involved
    receiving a request from the Internet, routing it to the controllers, and processing
    it. In this chapter, you will learn how to use annotations in the DocBlock, a
    way of performing routing that requires even less code and can be a faster and
    more organized way of doing collaborative programming with a team.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Annotations will be demonstrated for:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Routing of HTTP requests such as GET, POST, and PUT
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning a controller into a fully enabled CRUDL resource
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening to events that are fired from commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding middleware to controllers to limit or filter requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Annotations are great mechanisms used in programming. Annotations are metadata
    that enhance other data. Since this may seem slightly confusing, so we need to
    first understand what the meaning of metadata is. The word **metadata** is a word
    that contains two parts:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**meta**: This is a Greek word that means transcending or encompassing.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data**: This is a Latin word that means pieces of information.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, metadata serves to enhance or extend the meaning of something.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Annotations in other programming languages
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will discuss annotations that are used in computer programming. We
    will take a look at several examples from Java, C#, and PHP, and then finally,
    take a look at how annotations are used in Laravel.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Annotations in Java
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Annotations were first proposed in Java Version 1.1 and added in Version 1.2\.
    The following is an example of an annotation that is used to override an animal''s
    `speak` method:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the `@` symbol is used to signal the compiler that this annotation,
    `@Override`, is important.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Annotations in C#
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In C#, annotations are called attributes and use square brackets instead of
    the more often used `@` symbol:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Annotations in PHP
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other PHP frameworks use annotations. Symfony makes extensive use of annotations.
    In **Doctrine**, which is Symfony''s ORM and is similar to Laravel''s Eloquent,
    annotations are used to define relationships. Symfony also uses annotations for
    routing. The **Zend Framework** (**ZF**) uses annotations as well. Both the testing
    tools Behat and PHPUnit use annotations. In the following example of Behat, an
    annotation is used to indicate that this method should be executed before the
    test suite:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: DocBlock annotations
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The example of annotation usage shown in the previous Behat example is rather
    interesting, as it places the annotation inside the DocBlock. The DocBlock begins
    with a forward slash and two asterisks:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It contains *n* lines beginning with an asterisk.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'The DocBlock ends with a single asterisk and forward slash:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This syntax tells the parser that something useful is inside the DocBlock in
    addition to the normal comments.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: DocBlock annotations in Laravel
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Laravel 5 was being developed, support for routing and event listeners
    via DocBlock annotations was originally added. Its syntax was similar to Symfony
    and Zend.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Symfony
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for Symfony is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Zend
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for Zend is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Laravel
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for Laravel is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What type of problem does the DocBlock annotation try to solve though?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'One use of doc-annotations would be to add them to controllers, thus moving
    the control of the routing and middleware to the controller. This would make the
    controller more portable and even framework-agnostic, since the `routes.php` file
    would play a lesser role, if not be totally absent. As shown in the following
    example, the `routes.php` file can grow quite large, and this would lead to complexity
    and even cause the file to be unmanageable:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The idea of DocBlock annotations would be to tame this complexity, as the routing
    would be moved to the controllers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Shortly before the release of Laravel 5.0, due to community disapproval, the
    feature was removed. Also, since some developers may not want to use this approach,
    it would be proper to move this package from the core of Laravel and into a package.
    The method to install the package is similar to the way in which the HTML package
    was added. This package is also supported by the Laravel Collective. It is easy
    to add annotations by typing the following composer command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will install the annotations package, while `composer.json` will show
    the package added in the require section, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The next step would be to create a file named `AnnotationsServiceProvider.php`
    and add the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, the `AnnotationsServiceProvider.php` file will need to be added to the
    `config/app.php` file. The class, which needs to be added with the namespace,
    should be added to the providers array as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Resource controller using DocBlock annotations
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, to illustrate the use of Laravel's DocBlock annotations, we will examine
    the steps.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create the accommodations controller as usual:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we will add the accommodations controller to the list of the annotation
    service provider''s routes to scan:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we will add the DocBlock annotation to the controller. In this case, we
    will instruct the parser to use this controller as a resource controller for the
    accommodations route. The code to be added is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since the whole controller will be turned into a resource, the DocBlock annotation
    should be inserted before the class definition. The `AccommodationsController`
    class should now be as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that double quotes are required here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following syntax, using single quotes, would not be correct and will not
    function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Single method routing
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we desire to just add one route to a single method, such as "search for
    accommodation", then an annotation would be added above the single method; however,
    this time, inside the class. To handle the GET HTTP request verb, the code would
    be as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The class would be as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Scanning routes
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is extremely important. The Laravel application must process the
    annotations. For this chore, Artisan is used to scan the routes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is used to scan the routes. The output will be `Routes
    scanned!` as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The results of this scan will produce a file named `routes.scanned.php` in the
    `storage/framework` directory.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code writes to `storage/framework/routes.scanned.php` file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `storage/framework/routes.scanned.php` file does not need to be
    put into source code control as it is generated.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Automatic scanning
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a developer has to execute the Artisan route scan command as the controllers
    are being built, the effort to do this could become tedious. As a convenience
    to the developer, there is way to have Laravel automatically scan the controllers
    in the `scanRoutes` array on every request to the framework while in the development
    mode.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: In the `AnnotationsServiceProvider.php` file, set the `scanWhenLocal` attribute
    to `true`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: The same is true for `$scanControllers` and `$scanEverything`; these two Boolean
    flags allow the framework to automatically scan the `App\Http\Controllers` directory,
    and any class that is namespaced, respectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'It is imperative to remember that this should *only* be used during development
    and on a development machine, since it will add unnecessary overhead to the request
    cycle. An example of how the attributes are set to `true` is shown in the following
    code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Enabling these options will slow down the framework, but allow flexibility in
    the development phase.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Additional annotations
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To pass an ID to a route, as is common during the display of a single accommodation,
    the code would be as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This DocBlock annotation would be placed above the function inside the class,
    which is similar to the previous example.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'To limit the ID to one or more digits, an `@Where` annotation can be used as
    follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Both the annotations are combined together as shown in the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To add middleware to the example, which limits the request to only authenticated
    users, the `@Middleware` annotation may be used:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: HTTP verbs
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a list of the various HTTP verbs that can use annotations,
    that mirror RESTful standards:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '`@Delete`: This verb deletes a resource.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Get`: This verb displays a resource or resources.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Options`: This verb displays a list of options.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Patch`: This verb modifies an attribute or attributes of a resource.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Post`: This verb creates a new resource.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Put`: This verb modifies a resource.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other annotations
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are additional annotations that also may be used in controllers. The
    annotations are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '`@Any`: This responds to any HTTP request.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Controller`: This creates a controller for a resource.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Middleware`: This adds middleware to a resource.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Route`: This enables a route.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Where`: This limits requests based on certain criteria.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Resource`: This enables a resource.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using annotations in Laravel 5
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us recall the pathway that was implemented in Laravel, as illustrated here:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP request gets routed to a controller
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command is instantiated inside of the controller
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An event is fired
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The event is handled
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Using annotations in Laravel 5](graphics/B04559_06_01.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: Laravel's modern command-based pub-sub pathway.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Using annotations, this process can be rendered even easier. First, a reservations
    controller will be created:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To create a route to allow the user to create a new reservation, the POST HTTP
    verb will be used. The `@Post` annotation will listen to requests with the `POST`
    method attached to the `/bookRoom` url. This is used in place of the route that
    would normally be found inside of the `routes.php` file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we want to limit requests to a valid URL, the domain parameter limits requests
    to a certain URL. Additionally, the auth middleware requires the authentication
    of any request that wishes to reserve a room:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, the `ReserveRoom` command should be created. This command will be instantiated
    inside the controller:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Contents of the ReserveRoom Command are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we will need to instantiate the `ReserveRoom` command from inside the
    reservation controller:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now we will create the RoomWasReserved event:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To instantiate the `RoomWasReserved` event from the `ReserveRoom` handler,
    we may take advantage of the `event()` helper method. In this example, the command
    is self-handling, thus it is simple to do this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Since the user needs to be sent the details of the room reservation email,
    the next step is to create an e-mail sender handler for the `RoomWasReserved`
    event. To do this, `artisan` is used again to create the handler:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The methods of the `SendEmail` handler for the `RoomWasReserved` event are
    simply constructor and handler. The job of sending the e-mail would be performed
    inside the handler method. The `@Hears` annotation is added to its DocBlock to
    complete the process:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Simply add `RoomReservedEmail` to the `scanEvents` array to allow that event
    to be scanned as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The last step is to import. Artisan is used to scan events for annotations
    and write to the output file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here is the output of the `storage/framework/events.scanned.php` file, which
    shows the event listener:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The final view of the scanned annotation files inside the storage directory
    is as follows. Note that they are parallel:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Tip
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Laravel uses `artisan` to cache routes, but not to scan events, so the following
    command produces a cached file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `route:scan` command must be run before the `route:cache` is run, so it
    is important to execute the two commands in this order:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This command writes to: `storage/framework/routes.php`.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Both the files will be created, but only the compiled `routes.php` file is used
    until `php artisan route:scan` is run again.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several principle advantages of using DocBlock annotations for routing
    in Laravel:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel中使用DocBlock注解进行路由有几个主要优势：
- en: Each controller remains independent. The controller is not "tied" to a separate
    route and this makes sharing controllers, and moving them from project to project,
    easier. The `routes.php` file may be viewed as unnecessary for a simple project
    with only a few controllers.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个控制器保持独立。控制器不与单独的路由“绑定”，这使得共享控制器，并将其从一个项目移动到另一个项目变得更容易。对于只有少数控制器的简单项目来说，`routes.php`文件可能被视为不必要。
- en: Developers need not worry about `routes.php`. When working with other developers,
    the routes file needs to be kept continually in synchronization. With the DocBlock
    annotations approach, the `routes.php` file is cached and not placed under source
    code control; each developer may simply concentrate on his or her controllers.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员无需担心`routes.php`。与其他开发人员合作时，路由文件需要保持同步。通过DocBlock注解方法，`routes.php`文件被缓存，不放在源代码控制下；每个开发人员可以专注于自己的控制器。
- en: The route annotation keeps the route together with the controller. When controllers
    and routes are separate, and when a new programmer reads the code for the first
    time, it may not be immediately clear to which routes each controller method is
    attached. By placing the route directly in the DocBlock above the function, it
    is immediately evident.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由注解将路由与控制器保持在一起。当控制器和路由分开时，当新程序员第一次阅读代码时，可能不会立即清楚每个控制器方法附加到哪些路由上。通过直接将路由放在函数上方的DocBlock中，这一点立即变得明显。
- en: Developers that are familiar with, and are used to, using annotations in frameworks,
    such as Symfony and Zend may find using annotations in Laravel to be a very convenient
    way of developing software applications. Also, Java and C# developers using Laravel
    as their first PHP experience will find annotations very convenient.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉并习惯在Symfony和Zend等框架中使用注解的开发人员可能会发现在Laravel中使用注解是开发软件应用的一种非常方便的方式。此外，将Laravel作为首次PHP体验的Java和C#开发人员会发现注解非常方便。
- en: Conclusion
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The decision about whether or not to use annotations in a software lies with
    the developer. The decision to remove it from the core of Laravel, as well as
    the HTML forms packages, shows that the framework is becoming more and more flexible,
    having as default only a minimum set of packages. This allows for stability and
    less maintenance for the core developers as Laravel moves towards a **long-term-support**
    (**LTS**) release with Laravel 5.1.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 是否在软件中使用注解的决定取决于开发人员。从Laravel核心中移除它的决定，以及HTML表单包，表明该框架变得越来越灵活，只有一组最小的包作为默认。这使得在Laravel
    5.1发布长期支持（LTS）版本时，核心开发人员可以更加稳定和减少维护工作。
- en: Since the annotations package is part of the Laravel Collective, support for
    this package will be managed by the team, which guarantees that the feature's
    usefulness will be extended and expanded with contributions through to the repository.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 由于注解包是Laravel Collective的一部分，该团队将负责管理此包的支持，这保证了该功能的实用性将通过对存储库的贡献得到扩展和扩展。
- en: Also, the package could be extended to include a template that is automatically
    created with the route annotation that has the same name as the controller. This
    would save yet another step in the process of creating a controller and route—one
    of the most essential yet monotonous tasks in the software development process.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该包可以扩展以包括一个模板，该模板会自动创建与控制器同名的路由注解。这将在创建控制器和路由的过程中节省另一个步骤，这是软件开发过程中最重要但又单调的任务之一。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about annotations, how they are used in programming
    in general, how they are used in other frameworks, and finally how their use has
    been adopted into the Laravel annotation composer package. We have learned how
    to speed up the development process through the use of annotations and how to
    automate the scanning of annotations. In the next chapter we will learn about
    middleware, which is a mechanism used in the *middle* between the route and the
    application.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了注解的用法，它们在编程中的一般用法，它们在其他框架中的用法，以及它们如何被引入到Laravel注解composer包中。我们学会了如何通过使用注解来加快开发过程，以及如何自动扫描注解。在下一章中，我们将学习中间件，这是一种在路由和应用程序之间使用的机制。
