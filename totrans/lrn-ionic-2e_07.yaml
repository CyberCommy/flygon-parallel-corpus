- en: Building the Riderr App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the knowledge we have gained so far, we will be building an app that helps
    users to book a ride. This app consumes the API exposed by Uber ([https://uber.com/](https://uber.com/)),
    a popular ride-hailing service provider, and integrates the same with an Ionic
    app. In this app, we are going to work on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Uber OAuth 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating REST APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with device features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Google APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally, booking a ride
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main purpose of this chapter is to show how one could use both REST APIs
    as well as device features such as Geolocation and InappBrowser, to build real-world
    apps using Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: App overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The app we are going to build is named Riderr. Riderr helps users to book a
    cab between two points. This app uses the APIs provided by Uber ([https://uber.com/](https://uber.com/))
    to book a ride. In this app, we are not going to integrate all the APIs of Uber.
    We will be implementing a few endpoints that display the user's information as
    well as the user's ride information, and a few endpoints that help us book a ride,
    view the current ride, and cancel a ride.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we will be using Uber's OAuth to authenticate the user so that
    we can display the user's information as well as book a ride on behalf of the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick preview of what the app is going to look like once we are done
    building the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: Neither the book publication company nor I take any responsibility for loss
    of money or account ban from Uber. Please read the API instructions clearly before
    using Uber Production APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: Uber APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to go over the various APIs that we are going
    to consume in the Riderr app. We will also be generating a Client ID, a Client
    Secret, and a Server Token that we are going to use while making the requests.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three authentication mechanisms for accessing the Uber API:'
  prefs: []
  type: TYPE_NORMAL
- en: Server Token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single sign-on (SSO)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For us to make requests on behalf of a user, access the user's personal information,
    and book rides on the user's behalf, we need an OAuth 2.0 access token. Hence
    we will be following the OAuth 2.0 mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to the OAuth 2.0 mechanism, take a look at [http://www.bubblecode.net/en/2016/01/22/understanding-oauth2/](http://www.bubblecode.net/en/2016/01/22/understanding-oauth2/)
    or [https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2).
  prefs: []
  type: TYPE_NORMAL
- en: Registering with Uber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we proceed further, we need to have an Uber account to log in and register
    a new app with Uber. If you don't have an account, you can create one quite easily
    using the Uber app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created an Uber account, navigate to [https://developer.uber.com/dashboard/create](https://developer.uber.com/dashboard/create),
    log in, and fill in the form, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Then click on Create. This will register a new app with Uber and will create
    a Client ID, Client Secret, and Server Token for this app. Next, click on the
    Authorization tab on the same page (where we find the Client ID). Update the Redirect
    URL to `http://localhost/callback`. This is very important. If we don't, Uber
    does not know where to send the user after authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Using a combination of Client ID and Client Secret, we request an Access Token.
    Then, using this access token, we will be accessing Uber resources on behalf of
    a user.
  prefs: []
  type: TYPE_NORMAL
- en: To proceed further, you need to have a decent understanding of OAuth 2.0, as
    we will be implementing the same in our application.
  prefs: []
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this app, we are going to consume the following APIs from Uber:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/authorize`: [https://developer.uber.com/docs/riders/references/api/v2/authorize-get](https://developer.uber.com/docs/riders/references/api/v2/authorize-get). This
    endpoint allows the app to redirect the user to the authorization page. We will
    go deeper into this endpoint when we start working with the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/token`: This endpoint uses the code returned by the `/authorize` endpoint
    and requests the access token. This token is then used to make further requests.
    API Doc: [https://developer.uber.com/docs/riders/references/api/v2/token-post](https://developer.uber.com/docs/riders/references/api/v2/token-post).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/me`: This endpoint returns the user information, taking the access token
    as the input. API Doc: [https://developer.uber.com/docs/riders/references/api/v1.2/me-get](https://developer.uber.com/docs/riders/references/api/v1.2/me-get).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/history`: This endpoint returns the Uber ride history of the user. This endpoint
    requires special permissions (Privileged Scope). But, for our example, since this
    is a development app, we will be using this endpoint with Full Access scope. But
    if you would like to make a production deployment of the app, refer to [https://developer.uber.com/docs/riders/guides/scopes](https://developer.uber.com/docs/riders/guides/scopes)
    for more information. API Doc: [https://developer.uber.com/docs/riders/references/api/v1.2/history-get](https://developer.uber.com/docs/riders/references/api/v1.2/history-get).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/payment-methods`: This endpoint returns the available payment options for
    the user. This endpoint also requires privileged scope. API Doc: [https://developer.uber.com/docs/riders/references/api/v1.2/payment-methods-get](https://developer.uber.com/docs/riders/references/api/v1.2/payment-methods-get).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/products`: This endpoint returns the list of products supported in a given
    location. In the place where I live - Hyderabad, India - Uber offers Uber Pool,
    Uber Go, Uber X, and Uber SUV. These vary from place to place within the city
    as well. In some parts of the city, I have access to Uber Moto as well. Using
    this endpoint, we will fetch the products supported at a given location. API Doc:
    [https://developer.uber.com/docs/riders/references/api/v1.2/products-get](https://developer.uber.com/docs/riders/references/api/v1.2/products-get).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/request/estimate`: Before we request a ride, we need to get a fare estimate
    from Uber. If the user is fine with the fare estimate, we will make the actual
    request. This endpoint accepts the required information and responds with a fare
    object. API Doc: [https://developer.uber.com/docs/riders/references/api/v1.2/requests-estimate-post](https://developer.uber.com/docs/riders/references/api/v1.2/requests-estimate-post).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/requests`: This endpoint accepts the fare id, product id, from location,
    and to location, and books a ride. API Doc: [https://developer.uber.com/docs/riders/references/api/v1.2/requests-post](https://developer.uber.com/docs/riders/references/api/v1.2/requests-post).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/requests/current`: This endpoint will return the details of the current ride
    if any. API Doc: [https://developer.uber.com/docs/riders/references/api/v1.2/requests-current-get](https://developer.uber.com/docs/riders/references/api/v1.2/requests-current-get).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/requests/current`: This endpoint will cancel/delete the current ride. API
    Doc: [https://developer.uber.com/docs/riders/references/api/v1.2/requests-current-delete](https://developer.uber.com/docs/riders/references/api/v1.2/requests-current-delete).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: You can refer to [https://developer.uber.com/docs/riders/introduction](https://developer.uber.com/docs/riders/introduction)
    for other available APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: Building Riderr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an understanding of the list of APIs, we will start working
    with the Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step in this chapter is to scaffold a new Ionic blank app and start
    integrating the Uber API with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder named `chapter7`, open a new command prompt/terminal inside
    the `chapter7` folder, and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will scaffold a new blank project.
  prefs: []
  type: TYPE_NORMAL
- en: Uber API service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to start working with the service layer that interfaces
    with the Uber API. We will be implementing the aforementioned endpoints inside
    the Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: Once the app has been scaffolded, navigate into the `src` folder and create
    a new folder named `services`. Inside the `services` folder, create a file named
    `uber.service.ts`. We will be writing all the Uber integration logic here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `riderr` project inside your favorite text editor and navigate to
    `riderr/src/services/uber.service.ts`. The first thing we are going to do is add
    the required imports. Add the following to the top of the `uber.services.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have included
  prefs: []
  type: TYPE_NORMAL
- en: '`Injectable`: To mark the current class as a provider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoadingController`: To show messages while making network requests; `Http`,
    `Headers`, `Response`, and `RequestOptions` for processing `http` requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InAppBrowser`: To achieve OAuth 2.0 without using a server to get the access
    token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Storage`: For storing the access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Observable`: For better processing of asynchronous requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we will define the class and class level variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: I will be deleting the preceding registered app once I am done with this
    example. So, please make sure you have your own `client_secret` and `client_id`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the `constructor`, we have instantiated `Http`, `Storage`, and `LoadingController`
    classes, we are also fetching the access token stored in memory and saving it
    in-memory for future use.
  prefs: []
  type: TYPE_NORMAL
- en: 'For every single request that we make to the Uber API (except for the authentication
    ones), we need to send the access token as part of the headers. We have the following
    method that will help us with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need a method that returns a Boolean indicating whether the user is
    authenticated and we have a token to make requests to the Uber API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This method will query the storage for the existence of the token. If the token
    exists, the `observer` returns `true`, else `false`. We will be implementing `showLoader()`
    and `hideLoader()` at the end of all the APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user is authenticated, the user is logged in. That means we need to
    have an option where the user logs out. Since the API server is stateless, it
    does not maintain any session information to invalidate. Hence, by clearing the
    token from our storage, we invalidate the session from the client side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to write our first API method that interacts with the Uber
    API. This is the authentication method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There is a lot happening in this method. We are using the Ionic Native's InAppBrowser
    ([https://ionicframework.com/docs/native/in-app-browser/](https://ionicframework.com/docs/native/in-app-browser/))
    plugin to redirect the user to the Authorize endpoint. The Authorize endpoint
    (`https://login.uber.com/oauth/v2/authorize?client_id=${this.client_id}&response_type=code&scope=${this.scopes}&redirect_uri=${this.redirect_uri}`)
    takes the Client ID, scopes, and the redirect URL.
  prefs: []
  type: TYPE_NORMAL
- en: The `redirect_uri` is an important parameter, as the Uber API redirects the
    app to that URL after authentication. And inside our app, we are listening for
    the URL change event via `browser.on('loadstart')`. And we are looking for a URL
    that starts with `http://localhost/callback`. If this URL is matched, we close
    the browser and extract the code from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the code, we need to exchange the same for an Access Token. That
    would be the next part of the `auth()`, to fetch the token from `https://login.uber.com/oauth/v2/token`
    by passing in the `client_secret`, `client_id`, `redirect_uri`, and `code`. Once
    we receive the access token, we save it to the storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: To find out more about storage, refer to [https://ionicframework.com/docs/storage/](https://ionicframework.com/docs/storage/)
    or the *Storage service* section in [*Chapter 4*](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Decorators and Services*.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the access token, we will be making a request to Uber APIs
    to get, post, and delete data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first API method we are going to implement is going to fetch the user''s
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Do notice that I am making the API request to the Uber Sandbox API URL and not
    to the production service. This is always a good idea till you are confident in
    your implementation. The Uber Sandbox API and Uber API have a very similar implementation,
    except the data in the Sandbox environment is not real-time, it follows the same
    rules as the Uber API. When in production, do remember to update the API base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, comes the history API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The headers will be passed to every request that will need an access token to
    process the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, comes the payment methods endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding three endpoints will return the user and user ride information.
    The next endpoint will return the list of products supported at a given location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This method will be used to display the list of products or ride types available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before making the actual ride booking, we need to first get a fare estimate.
    We will be using the `requestRideEstimates()` method for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we get the fare estimate and the user accepts it, we will be initiating
    a booking request using `requestRide()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the status of the booking. In the sandbox environment, no
    ride will be booked. If you are serious about booking an actual ride, you can
    change the API URL and initiate an actual booking. Do remember that an Uber driver
    will actually call you for your ride. And if you cancel the ride, appropriate
    cancellation fees will apply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Neither the book publication company nor I take any responsibility towards
    loss of money or account ban from Uber. Please read the API instructions clearly
    before using Uber Production APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Uber allows only one ride to be booked at a time from an account, we
    can get the current ride using `getCurrentRides()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, to cancel a ride, we will make a delete request using `cancelCurrentRide()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The two utility methods that show and hide the processing loader are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With this, we have added all the required APIs that we are going to use to interact
    with Uber APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the required API services available, we will be creating the
    required views to represent that data.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we scaffold the app, a page named `home` will be created for us. But since,
    in our app, everything starts with the authentication, we will first generate
    a login page. Then we will make that the first page of the app. To generate a
    new page, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to update the page reference in `riderr/src/app/app.module.ts`.
    Update the `@NgModule` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We will generate and add the remaining pages as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: As Ionic keeps evolving, class names, and structures of pages might change.
    But the gist of developing an app in Ionic will remain the same.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will update `app.component.ts` to load the login page as the first
    one. Update `riderr/src/app/app.component.ts` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will update the `LoginPage` component. First, the `login.html` page.
    Update `riderr2/src/pages/login/login.html` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find the `logo.png` here: [https://www.dropbox.com/s/8tdfgizjm24l3nx/logo.png?dl=0](https://www.dropbox.com/s/8tdfgizjm24l3nx/logo.png?dl=0).
    Once downloaded, move the image to the `assets/icon` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, update `riderr/src/pages/login/login.ts` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are including the required dependencies. In the constructor,
    we are checking whether the user is already authenticated using the `isAuthenticated()`
    that we created in the `UberAPI` class. If the user clicks on the Login with Uber
    button, we call the `auth()`, which in turn invokes the `auth()` of the `UberAPI`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is successfully authenticated, we redirect the user to the `home
    page`. Else we don't do anything.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that the user has been successfully authenticated, the user will be
    redirected to the Home page. We are going to make the home page side-menu-based.
    The side menu will have links to navigate to various pages in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will update `riderr/src/pages/home/home.html` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is self-explanatory. To find out more about the menu, refer
    to [https://ionicframework.com/docs/api/components/menu/Menu/](https://ionicframework.com/docs/api/components/menu/Menu/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will update the `HomePage` class. `Update riderr2/src/pages/home/home.ts`
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have imported the required classes. We will be generating the missing
    pages in the next few steps. Do note the `@ViewChild()` decorator. We will be
    going through that and `ionOpened()` and `ionClosed()` when we work with Google
    Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Once the view has been initialized, we check whether the user is authenticated.
    If not, we redirect the user to the login page. `openPage()` sets the root page
    as the selected page from the menu. `logout()` cleans up the token and redirects
    the user to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will create the required pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the page where most of the action happens - the `bookRide` page. Run
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This will generate a new page. Once the page has been created, open `riderr/src/app/app.module.ts`
    and add `BookRidePage` to the `declarations` and `entryComponents` properties
    of `@NgModule()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`BookRidePage` is one of the most complex pages in the entire app. First off,
    we show a Google Map with the user''s current location. We fetch the available
    products for that user at their location and display them.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed further, I need to mention a weird bug that happens when working
    with Google Maps and click events on the map, inside an Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Google Map, we show a marker and an info window with the user''s current
    location. Clicking on the marker or the info window will redirect the user to
    set the destination location to book a ride. For this, we need to listen to the
    click event on the map. This kind of causes a problem when working with click
    events on non-Google Map components such as side menus, alerts, and so on. You
    can read more about the issue here: [https://github.com/driftyco/ionic/issues/9942#issuecomment-280941997](https://github.com/driftyco/ionic/issues/9942#issuecomment-280941997).'
  prefs: []
  type: TYPE_NORMAL
- en: So, to overcome this bug, wherever there is a click interaction other than Google
    Map components, we need to disable the click listener on the Google Map and, once
    we are done, we need to re-enable it.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to the `ionOpened()` and `ionClosed()` in `riderr/src/pages/home/home.ts`,
    we are firing custom events from them whenever the menu is opened or closed. This
    way, we disable the click listener on the map when the menu is opened and enable
    the click listener after the user selects a menu item. In `ionOpened()` and `ionClosed()`,
    we have only fired the events. We will be handling the same in `riderr/src/pages/book-ride/book-ride.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are aware of the issue, we can proceed further. We will first implement
    the menu and the map HTML. Update `riderr/src/pages/book-ride/book-ride.html`
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the header, we have a button to cancel an ongoing ride. We will be populating
    the `isRideinProgress` property on the `BookRidePage` class, that manages the
    page state shown here. The `ion-grid` component displays the list of products
    that are supported for the current user at their location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also notice that we have added `<div #map id="map"></div>`. This will be the
    place where the map appears.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To clean up the UI a bit, we will be adding few styles. Update `riderr/src/pages/book-ride/book-ride.scss`
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Next, we are going to update the `BookRidePage` class. There are quite a few
    methods, so I will be sharing them in parts, in the sequence of execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `riderr/src/pages/book-ride/book-ride.ts`, we will first update the required
    imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `@Component` decorator will be as is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to declare some class-level variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And then define the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the view has been initialized, using the `ngAfterViewInit()` hook, we
    will start fetching the user''s Geolocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: But before we get the Geolocation, we need to request the user to permit us
    to access the location services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also do notice the listeners implemented for the `menu:opened` and `menu:closed`
    events. This is how we disable a click on the map and re-enable it based on the
    state of the side menu. Continuing with our development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the Diagnostic plugin from `@ionic-native`/`diagnostic`, we request runtime
    permissions. This shows a popup asking the user whether the app can access the
    user''s Geolocation. If the user allows the app, we will receive `Diagnostic.permissionStatus.GRANTED`
    status in the success callback. Then, we will try and fetch the user''s coordinates.
    Other cases can be handled gracefully if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`fetCords()` will use the Geolocation Ionic Native plugin to fetch the user''s
    coordinates. Once we receive the location, we will initiate a request to getProducts(),
    passing in the user''s latitude and longitude. In parallel, we check whether there
    are any rides in progress using the getCurrentRides() on the Uber API.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the response arrives, we call `loadMap()` to draw the required map.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be installing all the required Cordova plugins and Ionic Native modules
    after completing the code walk-through:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`loadMap()` takes the Geolocation of the user, creates a marker at the location,
    and pans to that point using the camera API. The marker has a simple info text,
    Select Destination >, which, when clicked, takes the user to a screen to enter
    a destination to book a ride.'
  prefs: []
  type: TYPE_NORMAL
- en: '`infoClick()` and `markerClick()` register a callback to execute `selectDestination()`
    only there is no ride in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: To book a ride, the user should select a product. `productClick()` takes care
    of that by setting a product as a selected product based on the user's selection
    from the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the product is selected and the user''s location is available, we can
    ask the user to enter the destination location so we can check for fare estimates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`selectDestination()` takes care of destination selection as well as getting
    the ride estimates. The first if condition inside `selectDestination()` is to
    make sure that the user has only one ride in progress. The second if condition
    checks whether there is at least one `selectedProduct`. If everything is good,
    we invoke the `AutoCompletePage` as a modal, where the user searches for a place
    using the Google Places Service. Once a place is selected using this service,
    we fetch the Geolocation of the destination. Then pass the required information
    to `requestRideEstimates()` to fetch the estimates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be working with `AutoCompletePage` once we are done with `BookRidePage`.
    When instead of once we get the fares from the `requestRideEstimates()`, we will
    be presenting the same to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`processRideFares()` takes the fare information as input and presents the fare
    to the user. If the user is okay with the fare and time estimate, we place a request
    to Uber to book a ride using `requestRide()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally, if the user wants to cancel the current ride, we provide `cancelRide()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This would be a call to `cancelCurrentRide()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are done with the required logic for `BookRidePage`, we will create
    `AutoCompletePage`. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, we need to add `AutoCompletePage` to `riderr/src/app/app.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Add the `AutoCompletePage` reference to the `declarations` and `entryComponents`
    properties of `@NgModule()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AutoCompletePage` class will consist of the logic needed to work with
    the Google Places Service to search for a place. First, we will work with `auto-complete.html`.
    Open `riderr/src/pages/auto-complete/auto-complete.html` and update it as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a search bar and an `ion-list` to display the search results. Next,
    we will work on `auto-complete.ts`. Open `riderr/src/pages/auto-complete/auto-complete.ts`
    and update it as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using `google.maps.places.AutocompleteService` to fetch the predictions
    as the user searches.
  prefs: []
  type: TYPE_NORMAL
- en: A very important point to note is that the places and Geocoder services are
    not available as an Ionic Native plugin. Hence, we will be using Google Maps JavaScript
    library to get access to the places and Geocoder services. For that, we will be
    installing typings and then Google Maps. We will be installing this at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user finds the place, they will tap on the location and this will trigger
    `chooseItem()`. Inside `chooseItem()`, we will take `place_id` and fetch the geo
    coordinates of the chosen location and pass it back to `modal.onDidDismiss()`
    inside `selectDestination()` in the `BookRidePage` class. Then the flow goes on
    as we have seen in the `BookRidePage` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will implement the `profile`, `history`, and `paymentMethods` endpoints.
    To generate the required pages, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add the same to `riderr/src/app/app.module.ts`. The final version
    of the `app.module.ts` will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now we are going to update the three pages we have scaffolded. Almost everything
    in these pages is quite self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML in `riderr/src/pages/profile/profile.html` will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The required logic will be in `riderr/src/pages/profile/profile.ts` as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will work with `HistoryPage`. The HTML for `riderr/src/pages/history/history.html`
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'And the associated logic would be in `riderr/src/pages/history/history.ts`
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will implement the payment methods. The HTML for the same will
    be in `riderr/src/pages/payment-methods/payment-methods.html` as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'And the required logic in `riderr/src/pages/payment-methods/payment-methods.ts`
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: With this, we complete the required code. Next, we will install the required
    plugins and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following commands to install the Cordova plugins needed for this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'And their Ionic Native modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will be installing the Cordova plugin for Google Maps. But before
    we install that, we need to get an API key. Use the Get A Key button at [https://developers.google.com/maps/documentation/android-api/signup](https://developers.google.com/maps/documentation/android-api/signup)
    to enable the Google Maps API for Android apps and get a key. Go to the following
    page for iOS: [https://developers.google.com/maps/documentation/ios-sdk/get-api-key](https://developers.google.com/maps/documentation/ios-sdk/get-api-key).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the API key, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: Please update the preceding command with your keys.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, for working with the Google Maps Places Service, we need to get an API
    key for accessing the Maps services via JavaScript. Navigate to [https://developers.google.com/maps/documentation/JavaScript/get-api-key](https://developers.google.com/maps/documentation/javascript/get-api-key)
    to get a key for JavaScript. Then open `riderr/src/index.html` and add the following
    reference in the header section of the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, for the TypeScript Compiler not to complain about the use of the variable
    `google` in `riderr/src/pages/auto-complete/auto-complete.ts`, we need to add
    the required typings. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `riderr/tsconfig.json` and add `"typings/*.d.ts"` to the `"include"` array
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to *How to install Typescript* typings for Google Maps: [http://stackoverflow.com/a/40854384/1015046](http://stackoverflow.com/a/40854384/1015046)
    for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to request permission for Internet access and network access.
    Open `riderr/config.xml` and update `<platform name="android"></ platform>` as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'And then add `xmlns:android=http://schemas.android.com/apk/res/android` to
    the widget tag present at the top of the page, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This wraps up the *Installing dependencies* section.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go ahead and test drive the app. First, we need to add the required platform.
    Run `ionic platform add android` or `ionic platform add ios`.
  prefs: []
  type: TYPE_NORMAL
- en: For testing the app, we need an emulator or an actual device.
  prefs: []
  type: TYPE_NORMAL
- en: Once the device/emulator is set up, we can run either the command `ionic run
    android` or `ionic run ios`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the user launches the app. The login screen is presented, which is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the user clicks on LOGIN WITH UBER, we redirect the user to the Uber Auth
    Screen, where the user will log in using their Uber Account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the authentication is successful, the consent screen will be shown with
    the list of permissions requested by the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the user allows the app to access the data, we redirect the user to the
    home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the home page, we provide the consent popup for accessing the user''s location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once approved, we get the Geolocation of the user and, using that, the products.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the screenshot of the completely loaded home screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Menu will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, the user can view their profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'They can view their ride history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'They can also review their payment methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Before the user selects a destination, they need to pick a product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once they have selected the product, they can choose a destination to ride
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we make the fare details and display the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user agrees, we book the ride and display the ride information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Do notice the CANCEL RIDE button at the top-right corner of the app. This will
    cancel the current ride.
  prefs: []
  type: TYPE_NORMAL
- en: Again, as a reminder, we are making calls to the Sandbox API URL. If you want
    to request an actual ride, update `UBERSANDBOXAPIURL` to `UBERAPIURL` in `riderr/src/services/uber.service.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Uber (production) API, when we request a ride, we receive a processing
    response. We can keep polling a couple of times to fetch the current ride information.
    And this is what the response will look like if you make an actual ride request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: You can build your interface accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through building an app with Ionic and integrating
    the same with Uber API as well as device features using Ionic Native. We have
    also used the Google Places Service as a raw JavaScript library and integrated
    it with our Ionic app using typings.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at migrating Ionic 1 apps to Ionic
    2\. This will be applicable if you are moving from Ionic 1 to Ionic 3 as well.
  prefs: []
  type: TYPE_NORMAL
