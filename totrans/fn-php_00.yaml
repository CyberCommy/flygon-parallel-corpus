- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functional programming is a paradigm that is present every year at conferences.
    The JavaScript community is probably one of the first that approached the subject,
    but the topic is now also discussed among the developers using various other languages
    such as Ruby, Python, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: PHP has most of the features that are needed to start using a functional approach
    for development. You have no reason to be left on the side, which is why this
    book proposes to teach you the fundamentals of functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: If you are completely new to functional programming or you want to refresh your
    basics and learn a bit about its history and benefits, I recommend that you start
    with the appendix. It is not the first chapter of the book as the content is not
    directly related to PHP, but it will help you put various topics in context and
    have a better idea of the topics covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Functions as First Class Citizens in PHP"),
    *Functions as First Class Citizen in PHP*, discusses how functional programming,
    as the name suggests, revolves around functions. In this chapter, you will learn
    the about the various way they can be declared and used in PHP.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2.  Pure Functions, Referential Transparency,
    and Immutability"), *Pure Functions, Referential Transparency, and Immutability*,
    covers the three concepts that are the cornerstone of any functional code base.
    You will learn what they are about and how to apply them to our benefit.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3.  Functional Basis in PHP"), *Functional Basis
    in PHP*, discusses how functional programming, like any paradigm, rests upon a
    few core concepts. This chapter will present them in a simple fashion before going
    further.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Composing Functions"), *Composing Functions*,
    describes how functions are often used as a building block using function composition.
    In this chapter, you will learn how to do it in PHP what it is important to keep
    in mind when doing so.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5.  Functors, Applicatives, and Monads"), *Functors,
    Applicatives, and Monads*, starts with easier concepts, such as the functor and
    the applicative, and we will build up our knowledge to finally present the monad
    in a light that should dispel some of the fear floating around this term.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6.  Real-Life Monads"), *Real-life Monads*,
    helps you learn about some real-life usage of the monad abstraction and how it
    can be used to write better code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Functional Techniques and Topics"), *Functional
    Techniques and Topics*, brushes upon topics such as type systems, pattern matching,
    point-free style, and others from the vast field of functional programming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8.  Testing"), *Testing*, teaches you that functional
    programming not only helps with writing code that is easier to understand and
    maintain, but it is also great to facilitate testing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9.  Performance Efficiency"), *Performance Efficiency*,
    lets you know that using functional techniques in PHP has a cost. We will first
    discuss it and then see how it can help in other performance-related topics.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. PHP Frameworks and FP"), *PHP Frameworks
    and FP*, introduces a technique that can be applied to improve your code in any
    project, as there is currently now dedicated framework for functional programming
    in PHP.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Designing a Functional Application"), *Designinga
    Functional Application*, will present you with some advice if you want to develop
    a whole application using the most functional code possible. You will also learn
    about Functional Reactive Programing and the RxPHP library.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Appendix`, *What are We Talking about When We Talk about Functional Programming?*,
    is a presentation and history of functional programming alongwith its benefits
    and a glossary. It’s really the first part of the book you should read, but as
    we don’t approach the subject from the PHP angle, it is presented as an appendix.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have access to a computer with PHP installed. It will be easier
    if you know how to use the command line, but all examples should also work in
    a browser with maybe some small adaptations.
  prefs: []
  type: TYPE_NORMAL
- en: While learning functional programming, I also recommend the usage of a Read-Eval-Print-Loop
    (REPL). I personally used **Boris** when writing this book. You can find it at
    [https://github.com/borisrepl/boris](https://github.com/borisrepl/boris). Another
    great option is **PsySH** ([http://psysh.org](http://psysh.org)).
  prefs: []
  type: TYPE_NORMAL
- en: Although not at all mandatory, a REPL will allow you to quickly test your ideas
    and play around with the various concepts that will be presented in this book
    without having to juggle between your editor and command line.
  prefs: []
  type: TYPE_NORMAL
- en: I also assume you have Composer available and that you know how to use it to
    install new packages; if not, you can find it at [https://getcomposer.org](https://getcomposer.org).
    Multiple libraries will be presented throughout the book and the preferred way
    to install them is using composer.
  prefs: []
  type: TYPE_NORMAL
- en: All the code written in the book was tested on PHP 7.0, which is the de facto
    recommended version. It should, however, also run on any newer version. Running
    most of the examples should also be fine on PHP 5.6 after making some minor adaptations.
    We will use the new scalar type hinting feature introduced in PHP 7.0 throughout
    the book, but if you remove those, the code should be readily compatible with
    lower versions.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book requires no knowledge of functional programming; prior programming
    experience is, however, required. Also, basic concepts from object-oriented programming
    will not be covered in depth.
  prefs: []
  type: TYPE_NORMAL
- en: Deep knowledge of the PHP language is not mandatory, as uncommon syntax will
    be explained. The book should be understandable to someone who hasn't written
    a single line of PHP code, with some effort.
  prefs: []
  type: TYPE_NORMAL
- en: This book can be considered as a beginner book about functional programming
    in PHP, meaning that we will build knowledge incrementally. However, the topic
    being pretty vast and the limited page count, we will move quickly at times. This
    is why I encourage you to play with the variously presented concepts as we learn
    them and take some time at the end of each chapter to make sure you understood
    it correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in the text, database table names, folder names, filenames, file
    extensions, pathnames, dummy URLs, user input, and Twitter handles are shown as
    follows: "The next lines of code read the link and assign it to the `BeautifulSoup`
    function."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Any command-line input or output is written as follows:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '****New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the **Next** button moves you to the next screen."**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warnings or important notes appear in a box like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tips and tricks appear like this.**'
  prefs: []
  type: TYPE_NORMAL
