- en: Applying Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about Angular Dependency Injection. Dependency
    Injection is one of the most striking features in Angular; it allows us to create
    injectables that can be used as shared resources between various components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Dependency Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about provider classes in detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding hierarchical Dependency Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Injectable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning to inject providers into services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning to inject providers inside the components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning to resolve dependencies for a provider class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating examples using the `@Inject`, `provide`, and `useValue` decorators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications without Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Without the Dependency Injection framework, the life of a developer would be
    very tough. Take a look at the following drawbacks of not using Dependency Injection:'
  prefs: []
  type: TYPE_NORMAL
- en: Every time a constructor parameter needs to be passed, we will need to edit
    the constructor definition of the class in all instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will need to create constructors and inject each of the required dependency
    classes individually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at an application without Dependency Injection to understand
    the challenges and shortfalls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet to understand better:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a `class` named `products`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `constructor` method, we instantiated the dependent classes, `warehouse`
    and `category`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that, if the `warehouse` or `category` class constructor definition changes,
    we will need to update manually all the instances of the classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding code is not fully testable and maintainable since as a developer
    our task would be to manually define all the dependencies. That's where Angular
    Dependency Injection comes for our rescue.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Injection - Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dependency Injection**(**DI**) is a coding pattern in which a class receives
    dependencies rather than creating them itself. Some developers and technology
    mavericks also refer to this as a design pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: It's widely used and is often called DI. We will refer to the Dependency Injection
    system as DI in all our sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s why we absolutely need DI:'
  prefs: []
  type: TYPE_NORMAL
- en: DI is a software design pattern in which a class receives its dependencies rather
    than creating the object itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DI creates and delivers objects, which are required dynamically just-in-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can consider the injectables as our application's reusable repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DI allows independent development of dependency modules for remote development
    teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No Angular apps can be completely written without using DI.Now, let''s revisit
    the preceding code we wrote without DI and write it with Angular DI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what is happening in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We have created a `products` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `constructor`, we passed the dependent classes--`warehouse` and `category`--as
    parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now use the instances, `_warehouse` and `_category` throughout the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that we have not created the objects of the dependent classes; instead
    we just receive them through the DI system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't have to worry about the dependencies required by `warehouse` or `category`;
    that will be internally resolved by Angular DI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we know what Angular DI is, let's focus on how it's implemented and
    used in our Angular applications. Before we jump into learning about provider
    classes and more, we should know some of the basic things about the Angular DI
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will, of course, cover these in detail in the next few sections. It''s good
    to have a basic understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Injectable`: This decorator marks a class as available to an injector for
    instantiation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@Inject:` Using the `@Inject` decorator, we can inject the configuration object
    into any constructor that needs it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Provider:` A Provider is a way by which we register our dependencies that
    need to be injected.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's jump into learning about provider classes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding provider classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start using DI in our applications, we will need to understand the concept
    of Providers. Providers configuration in the component decorator tells Angular
    which classes need to be provided to the component.
  prefs: []
  type: TYPE_NORMAL
- en: In the provider configuration, DI takes an array of all the classes i.e injection
    tokens, we want to provide to the component. We can also specify the `class` using
    `useClass` to instantiate for the registered token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a quick look at the syntax for using the providers configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are telling Angular that the preceding component needs
    to be provided by the `MyTax` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the advantages of using the provider classes:'
  prefs: []
  type: TYPE_NORMAL
- en: Providers are maintained per injector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each `provider` provides a single instance of an Injectable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The provider class provides the return value of the method invoked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also explicitly mention the class that should be used from the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the general syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we are explicitly telling Angular to inject the
    `MyTax` provider and use the `MyTax` class using the `useClass` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn more about how the provider classes can be registered and used;
    let''s take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/83f23e5f-5248-4111-8acf-78d7a2cf2e18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s analyze the preceding diagram in detail to learn the key take-away:'
  prefs: []
  type: TYPE_NORMAL
- en: Components shared resources are provided via the provider class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provider classes can be registered into multiple components(one or more)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also register a provider class into other provider classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the preceding diagram, `Component #1` has a dependency on ``Provider Class
    #1``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the preceding diagram, `Component #2` has a dependency on `Provider Class
    #1` and `Provider Class #2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the preceding diagram, `Component #3` has a dependency on `Provider Class
    #2` and `Provider Class #3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By now, we understand how critical DI is for our applications. DI really helps
    in organizing data and is the most suitable design pattern for implementing individual
    independent modules or components.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to keep components developed independently and write more generic
    shared or commonly used functionality in providers or injectables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a quick example of a provider class, which can be injected in
    a component. We create a provider class--the `MyTax.ts` file--and add the following
    code snippet to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a provider class named `MyTax`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `taxValue` variable as number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a `getTaxes` method, which will return a random number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We assigned a value to the `taxValue` variable and returned the value via the
    `getTaxes` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to register this provider class in our component's providers array
    configuration and display the value of `taxValue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to create a `component` class--`calculate-tax.component.ts` and
    add the following lines of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail :'
  prefs: []
  type: TYPE_NORMAL
- en: We imported the recently created provider class--`MyTax`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created and defined the `CalculateTax` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a `taxName` variable and mapped the variable in the template using
    data binding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the constructor, we registered `MyTax` in the providers array of the application
    module, `MyTax`, and Angular DI will create an instance of the provider class
    and assign it to `_myTax`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the instance of the provide class, we called the `getTaxes` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app, and we should see the output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f9a54e14-86e4-487f-ad91-483d138c8b83.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned how to create provider classes and register them
    in components to use them. You can register the same provider class into multiple
    components; this is certainly ideal in cases where we want to share multiple reusable
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about hierarchical DI--when we have multiple
    nested components.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding hierarchical DI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, we covered DI through provider classes and also sharing
    the provider classes between various individual components. In this section, you
    will learn how to use provider classes with DI between hierarchical components.
  prefs: []
  type: TYPE_NORMAL
- en: Angular internally creates an index tree tracing all the components and tree
    structure being created and also maintaining its dependency matrix, which gets
    loaded in real time to provide all the necessary modules, services, and components.
  prefs: []
  type: TYPE_NORMAL
- en: The best part about hierarchical components and DI among the various components
    is that we don't have to worry about how those dependencies are created, or what
    dependencies they need themselves internally.
  prefs: []
  type: TYPE_NORMAL
- en: Overview - Hierarchical components and DI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's an open secret that Angular internally maintains the tree structure of
    components. It also maintains the tree index of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: In any real-world Angular application, we will work with many components and
    services. The components will have a tree structure ranging from a root component
    to child components and inner child components, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: That forms a component tree structure internally. Since our components will
    also have dependencies and injectables, Angular will internally form a dependency
    tree matrix to track and resolve all the dependencies required for a service or
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key things you need to know about hierarchical DI:'
  prefs: []
  type: TYPE_NORMAL
- en: The Angular framework internally creates a hierarchical tree structure for DI
    for components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The provider class needs to be registered into the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can register a provider class to be registered into other provider classes
    as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, you will create injectable services and also use them in
    your components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an injectable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We don't have to create an Angular injector, it's injected by default. Angular
    creates an application-wide injector during the bootstrap process.
  prefs: []
  type: TYPE_NORMAL
- en: We define an injectable using the `@Injectable` decorator and define the methods
    in the class. `@Injectable` makes a class available to an injector for instantiation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is sample code to create an `@Injectable` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We have imported `Injectable` from the Angular core module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the `@Injectable` decorator to tell Angular that the following class
    can be injected and is available to an injector for instantiation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created a class called `ListService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We implemented a method called `getList`, which at this point is just print
    a message in `console.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Registering providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An injector creates dependencies using providers. Providers are required to
    be registered into the consuming services or components. By registering them,
    the provider class allows us to create independent reusable features and functionalities
    by individual team members.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring and registering provider classes also allows to break down functionalities
    into smaller modules, which are easy to maintain and modify. We can register provider
    classes into services and components in different ways. Important points to always
    keep in mind about injectors are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We have to create a provider in our `NgModule`, component constructor, or in
    a directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register the service in the component's constructor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have created a `ListService` service in the preceding section, which has
    a method and can now be registered and used in multiple components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c704df8b-daba-4919-a49d-651c9aac5750.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s analyze the preceding diagram in detail to understand the use case we
    are building:'
  prefs: []
  type: TYPE_NORMAL
- en: We will create an `Injectable` service class, `ListService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create a component, `TestDiComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will need to register `ListService` into `TestDiComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, now let''s jump right into learning how to register a provider in `ngModule`.
    Take a look at the `ngModule` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In shorthand, the preceding code is often written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We have imported the `ListService` service class into the `ngModule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that we registered the `ListService` in providers. Angular will internally
    resolve and create an injector at runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the shorthand notation, we just mention the name of the provider, and Angular
    will map the `provide` property to register and use the value of `useClass`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding section, you learned how to register services in the provider's
    configuration array in `ngModule`.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between registering a provider in AppModule versus registering
    it in a component is the visibility of the service. Services registered in AppModule
    are available throughout the application, and services registered inside a specific
    component will be available only inside the component.
  prefs: []
  type: TYPE_NORMAL
- en: Registering providers inside the component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you will learn how to register a provider in a component and use the injectable
    service class inside a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s quickly generate a component and service using the Angular CLI
    `ng` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the component and the required files. The output of the
    command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/595fdc54-26b2-479d-b3ac-fe37cd602dbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have to generate an Angular service in the same folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/780cb6e8-5539-4bf4-b567-1c59b36c5e47.png)'
  prefs: []
  type: TYPE_IMG
- en: We see that Angular CLI generates a warning message that the service is generated
    but not provided.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have created our component and service separately, but now we need
    to register the providers in our component so that we can use the service.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed to register the providers in our component, let's take a quick
    look at the service code generated by the CLI tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s our `test-di.service.ts` file code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s the default code generated by the scaffolding Angular CLI tool. Let''s
    add a method, which we want to access inside the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s register the service in the providers array in the component `test-di.component.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a component called `TestDiComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We imported the newly created service `TestDiService` into the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We registered the `TestDiService` in the providers to tell Angular to create
    an instance of the service dynamically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Angular DI will create a new `private` instance of the `_testDiService` service
    class that we passed inside the `constructor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the instance of the `_testDiService` service and called the `getAuthors`
    method to get a list of authors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app, and we should see the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/63ce8a23-d436-4a54-83ff-dfa814dd9a42.png)'
  prefs: []
  type: TYPE_IMG
- en: We have made it so far, which is great, as you learned to create an `Injectable`
    service, register the services in the providers array inside the component decorator,
    and use the instance of the service to call methods.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to create multiple components using the same
    shared set of provider classes.
  prefs: []
  type: TYPE_NORMAL
- en: Provider classes with dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our previous sections, we discussed registering a service into components,
    but what if our service itself requires some dependencies? In this section, you
    will learn and implement ways to resolve dependencies required for services.
  prefs: []
  type: TYPE_NORMAL
- en: To understand provider classes with dependencies better, let's understand the
    following use case. We have two services--`CityService` and `TestDiService`, and
    a component, that is, `TestDiComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s visualize the dependency tree for these services and components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/abd05c78-6923-48b8-814d-4686bbcc398d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s analyze the preceding diagram in detail to understand the use case we
    are building:'
  prefs: []
  type: TYPE_NORMAL
- en: We will create an `Injectable` service--`CityService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create an `Injectable` service--`TestDiService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will need to register `CityService` into the `TestDiService` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create a `TestDiComponent`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will need to register `TestDiService` into `TestDiComponent`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will continue to use the previously created service, `TestDiService`, and
    the component--`TestDiComponent`--in this section as well.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create an additional service called `CityService` and save the
    file as `city.service.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the service file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We created and exported a new service called `CityService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We implemented a `getCities` method, which returns a list of cities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating a service, we import the file and register the service as a
    provider in the `app.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Since we have registered the service in the providers array in the `app.module.ts`
    file, it is now available across the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the service in `TestDiService`, we have to import the service and create
    an instance of `CityService` in the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the example mentioned in the preceding section, we used the service to display
    a list of authors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s analyze the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a service called `CityService` and imported the class inside `TestDiService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created an instance of the `CityService` class--`_City` in the constructor
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a method, that is, `getAuthors`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `this` operator, we invoked the `getCities` method of the `CityService`
    class inside the `getCityList` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `getCities` method returns the list of cities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app, and you will see the output of the preceding code as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1db00e73-e31d-4f29-9d67-28beda5274d3.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned and implemented how to resolve dependencies of
    providers classes by registering other provider classes using the `@Injectable`
    decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Using @Inject, provide, and useValue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a quick recap on how things have progressed so far while learning
    DI. We discussed how to write provider classes and Dependency Injection for hierarchical
    components and above all how to write reusable providers using the `@injectable`
    decorator.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how to use `@Inject`, `provide`, and `useValue`
    to share data across different components.
  prefs: []
  type: TYPE_NORMAL
- en: To declare that a service can be injected in a class, we need an `@Injectable`
    decorator. The decorator tells Angular to make the class defined with `@Injectable`
    available to an injector for instantiation into other classes, services, or components
    and that the class should be resolved dynamically through DI. We use them mostly
    to write generic services and create our own repository.
  prefs: []
  type: TYPE_NORMAL
- en: Like we mentioned earlier, even if a service requires dependencies to be injected
    in it, we use the `@Injectable` decorator. We can also register a service into
    another service or any component.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we need to inject the type of constructor parameters, we will use the
    `@inject` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following sample code for `ngModule` in the `app.module.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Quick points to note about the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We imported the service we have created earlier, that is, `ListService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have imported the service, we need to add it to the list of `providers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are explicitly mentioning that we need to register the service name `ListService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `useClass` we will instruct Angular to instantiate and use the `ListService`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we note carefully, we will see that we are mainly dealing with service/provider
    classes. However, what if we need to inject certain variables so that we can share
    the value across different components and services?
  prefs: []
  type: TYPE_NORMAL
- en: Bingo! That's where we can easily use the `@Inject` decorator and create a variable
    or class name, which we can reuse in other components and services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the `ngModule` file now; we have modified it to accommodate
    our variable, which we want to share between various services and components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the providers, we created a new entry, and for `provide`, we applied
    a name, `username`. Remember whatever name you mention here, as we will need to
    use it throughout in other services or components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We provided a value for the `username` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that this value will not be changed or updated; think of it as a constant
    value throughout the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created a value constant provider, let's see how we can use
    it in our components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app.component.ts`, add the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We imported the `component` and `Inject` modules from `@angular/core`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created our component and defined the respective HTML and style sheet for
    the component to HTML and CSS files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `AppComponent` class, we defined a `title` variable and assigned it a
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a constructor of the class and passed an `@inject` decorator to pass
    the name, `username`, which we defined in the `app.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have registered the `username` variable in the provider's array
    configuration, we can use the value of the variable anywhere in the component
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Awesome, now let''s run the app; we should the output shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f3dc9711-d107-4d3f-afe9-5d0faf8c0d35.png)'
  prefs: []
  type: TYPE_IMG
- en: An important thing to note in the following screenshot is the variable value
    flagged in green, `'Sridhar@gmail.com'` which is getting printed in the template.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned to define and use a constant provider using the
    `@Inject` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: You learned to use `@Injectable` for our service class; we can register it as
    a provider and use it in other services or in components.
  prefs: []
  type: TYPE_NORMAL
- en: We can define some constant variables, which can also inject and use the value
    across different components.
  prefs: []
  type: TYPE_NORMAL
- en: You should be now able to create multiple reusable services, provider classes,
    and also constant variables, which can be used to create our application repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed Angular DI as we know it now. DI allows us to
    inject the provider class and injectables into components using providers. We
    learned and implemented provider classes and hierarchical Dependency Injection.
    We also learned to register providers in the `NgModule` or inside components directly.
  prefs: []
  type: TYPE_NORMAL
- en: We focused on how to create and configure Injectors and also how to register
    services in providers inside the component decorator.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explained that a provider class can also have dependencies, which
    internally can be injected again into services or components. In the next chapter,
    you will learn about Angular animations. Angular animations is a core library
    that provides a better user experience by applying motions and transitions to
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn about various transitions and motions, and how to style animations;
    above all, we will create some cool stuff along the way.
  prefs: []
  type: TYPE_NORMAL
