- en: Preparing a Lab Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will set a lab up by using two popular Linux distributions:
    CentOS and Ubuntu. CentOS is a community-driven Linux operating system that targets
    enterprise servers, and it''s known for its compatibility with **Red Hat Enterprise
    Linux** (**RHEL**). Ubuntu is another Linux distribution that is based on the
    famous Debian operating system; it''s currently developed by Canonical Ltd., which
    provides it with commercial support.'
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn how to install both Linux distributions with a free and open
    software called **Cobbler,** which will automatically boot the server with a Linux
    image and customize it using the `kickstart` for CentOS and Anaconda for Debian-based
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Linux operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an automation machine on a hypervisor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Cobbler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the Linux operating system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next sections, we are going to create two Linux machines, CentOS and
    Ubuntu, on different hypervisors. The machines will serve as the automation server
    in our environment.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading CentOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CentOS binaries can be downloaded through multiple methods. You can download
    them directly from multiple FTP servers around the world, or you can download
    them as torrents, from people who seed them. Also, CentOS is available in two
    flavors:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Minimal ISO: Provides the basic server, with essential packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Everything ISO: Provides the server and all available packages from the main
    repositories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, head to the CentOS project link ([https://www.centos.org/](https://www.centos.org/))
    and click on the Get CentOS Now button, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Then, choose the minimal ISO image, and download it from any available download
    site.
  prefs: []
  type: TYPE_NORMAL
- en: CentOS is available for multiple cloud providers, such as Google, Amazon, Azure,
    and Oracle Cloud. You can find all of the cloud images at [https://cloud.centos.org/centos/7/images/](https://cloud.centos.org/centos/7/images/).
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ubuntu is widely known for providing a good desktop experience to end users.
    Canonical (the Ubuntu developers) work with many server vendors to certify Ubuntu
    on different hardware. Canonical also provide a server version for Ubuntu, which
    offers as many features as in 16.04, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Support from Canonical until 2021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to run on all major architectures—x86, x86-64, ARM v7, ARM64, POWER8,
    and IBM s390x (LinuxONE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for ZFS, a next generation volume management filesystem ideal for servers
    and containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LXD Linux container hypervisor enhancements, including QoS and resource controls
    (CPU, memory, block I/O, and storage quota)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation snaps, for simple application installation and release management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First production release of DPDK—line speed kernel networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux 4.4 kernel and `systemd` service manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certification as a guest on AWS, Microsoft Azure, Joyent, IBM, Google Cloud
    Platform, and Rackspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates for Tomcat (v8), PostgreSQL (v9.5), Docker v (1.10), Puppet (v3.8.5),
    QEMU (v2.5), Libvirt (v1.3.1), LXC (v2.0), MySQL (v5.6), and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can download the Ubuntu LTS by browsing to [https://www.ubuntu.com/download/server](https://www.ubuntu.com/download/server) and
    choosing Ubuntu 16.04 LTS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating an automation machine on a hypervisor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After downloading the ISO files, we will create a Linux machine over VMware
    ESXi and KVM hypervisors.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Linux machine over VMware ESXi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the VMware vSphere client to create a virtual machine. Log in to
    one of the available ESXi servers using root credentials. First, you will need
    to upload either the Ubuntu or CentOS ISO to the VMware data store. Then, follow
    these steps to create the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the server name and choose New Virtual Machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose a Custom installation, so that you will have more options during the
    installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00129.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide a name for the VM: AutomationServer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the machine version: 8.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the data store on which the machine will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the guest operating system: either Ubuntu Linux (64-bit) or Red Hat
    version 6/7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00130.gif)'
  prefs: []
  type: TYPE_IMG
- en: The VM specification shouldn't have less than 2 vCPU and 4 GB RAM, in order
    to have efficient performance. Select them in the CPU and Memory tabs respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Network tab, select two interfaces with E1000 adapters. One of these
    interfaces will connect to the internet, and the second interface will manage
    the clients:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00131.gif)'
  prefs: []
  type: TYPE_IMG
- en: Choose the default SCSI controller for the system. In my case, it will be LSI
    logical parallel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a Create a new virtual disk and provide 20 GB as the disk size for the
    VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now the virtual machine is ready, and you can start the Linux OS installation.
    Associate the uploaded image to the CD/DVD drive, and make sure that the Connect
    at power on option is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it starts running, you will be asked to choose a language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Complete the CentOS/Ubuntu installation steps as usual.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Linux machine over KVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `virt-manager` utility, available in KVM, to launch the desktop
    administration for KVM. We will then create a new VM:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will choose the installation method as Local install media (ISO image
    or CDROM):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we will click on Browse and choose the previously downloaded image (CentOS
    or Ubuntu). You will notice that the KVM successfully detects the OS type and
    version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we will choose the machine specifications in terms of CPUs, memory, and
    storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the appropriate storage space for your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final step is to choose a name, and then click on the Customize Configuration
    before install option, in order to add an additional network interface to the
    automation server. Then, click on Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another window is open, which contains all of the specs for the machine. Click
    on Add Hardware, then choose the Network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will add another network interface to communicate with the clients. The
    first network interface is using NAT to connect to the internet through the physical
    wireless NIC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, click on Begin Installation on the main window so that the KVM will
    start allocating the hard disk and attaching the ISO image to the virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it has finished, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Complete the CentOS/Ubuntu installation steps as usual.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Cobbler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cobbler is a piece of open source software, used for unattended network-based
    installation. It leverages multiple tools, such as DHCP, FTP, PXE, and other open
    source tools (we will explain them later), so that you will have a one-stop shop
    for automating the OS installation. The target machine (bare metal or a virtual
    machine) has to support booting from a network on its **network interface card**
    (**NIC**). This function enables the machine to send a DHCP request that hits
    the Cobbler server, which will take care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the project on its GitHub page ([https://github.com/cobbler/cobbler](https://github.com/cobbler/cobbler)).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Cobbler works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cobbler depends on multiple tools to provide the **Preboot eXecution Environment** (**PXE**)
    functionality to clients. First, it depends on the DHCP service that receives
    the DHCP broadcast message from the client upon powering on; then, it replies
    with an IP address, a subnet mask, the next server (TFTP), and finally, the `pxeLinux.0`,
    which is the loader filename that the client is requesting when it initially sends
    the DHCP message to the server.
  prefs: []
  type: TYPE_NORMAL
- en: The second tool is the TFTP server that hosts `pxeLinux.0` and different distribution
    images.
  prefs: []
  type: TYPE_NORMAL
- en: The third tool is the template rendering utility. Cobbler uses `cheetah`, which
    is an open source template engine developed in Python and has its own DSL (domain
    specific language) format. We will use it to generate the `kickstart` files.
  prefs: []
  type: TYPE_NORMAL
- en: Kickstart files are used to automate the installation of Red Hat based distributions,
    like CentOS, Red Hat, and Fedora. It also has limited support for rendering the `Anaconda`
    files used for installing Debian-based systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also additional tools. `reposync` is used to mirror an online repository
    from the internet to a local directory inside of Cobbler, making it available
    to the client. `ipmitools` remotely manages powering different server hardware
    on and off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following topology, Cobbler is hosted on the automation server installed
    previously, and will connect to a couple of servers. We will install Ubuntu and
    Red Hat on them, through Cobbler. The automation server has another interface
    that connects directly to the internet, in order to download some additional packages
    that are required by Cobbler, as we will see in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '| **Server** | **IP Address** |'
  prefs: []
  type: TYPE_TB
- en: '| Automation Server (with cobbler installed) | `10.10.10.130` |'
  prefs: []
  type: TYPE_TB
- en: '| Server1 (CentOS Machine) | IP from range `10.10.10.5`-`10.10.10.10` |'
  prefs: []
  type: TYPE_TB
- en: '| Server 2 (Ubuntu Machine) | IP from range `10.10.10.5`-`10.10.10.10` |'
  prefs: []
  type: TYPE_TB
- en: Installing Cobbler on an automation server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by installing some essential packages, such as `vim`, `tcpudump`
    , `wget`, and `net-tools`, on our automation server (either CentOS or Ubuntu).
    Then, we will install the `cobbler` package from the `epel` repository. Please
    note that these packages are not required for Cobbler, but we will use them to
    understand how Cobbler really works.
  prefs: []
  type: TYPE_NORMAL
- en: 'For CentOS, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For Ubuntu, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to disable the firewall. Cobbler doesn't play well with SELinux
    policies, and it's recommended to disable it, especially if you are unfamiliar
    with them. Also, we will disable `iptables` and `firewalld`, since we are in a
    lab, not production.
  prefs: []
  type: TYPE_NORMAL
- en: 'For CentOS, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For Ubuntu, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, reboot the automation server machine for the changes to take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will install the `cobbler` package. The software is available in the `epel`
    repository (but we need to install it first) in the case of CentOS. Ubuntu doesn't
    have the software available in upstream repositories, so we will download the
    source code and compile it on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'For CentOS, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The current version of Cobbler, at the time of writing this book, is 2.8.2,
    which was released on September 16, 2017\. For Ubuntu, we will clone the latest
    package from the GIT repository and build it from the source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully installing Cobbler on our machine, we will need to customize
    it to change the default settings to adapt to our network environment. We will
    need to change the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose either the `bind` or `dnsmasq` module to manage DNS queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose either the `isc` or `dnsmaasq` module to serve incoming DHCP requests
    from clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the TFTP Cobbler IP address (it will usually be a static address in
    Linux).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide the DHCP range that serves the clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart the services to apply the configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a step-by-step look at the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose `dnsmasq` as the DNS server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Choose `dnsmasq` for managing the DHCP service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the Cobbler IP address as the TFTP server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, enable PXE boot loop prevention by setting the `pxe_just_once` to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the client `dhcp-range` in the `dnsmasq` service template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note the line that says `dhcp-option=66,$next_server`. This means that Cobbler
    will pass `next_server`, previously configured in the settings as the TFTP boot
    server, to any clients requesting an IP address through the DHCP service provided
    by `dnsmasq`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable and restart the services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Provisioning servers through Cobbler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now a few steps away from having our first server up and running through
    Cobbler. Basically, we need to tell Cobbler our clients'' MAC addresses and which
    operating systems they have:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the Linux ISO. Cobbler will automatically analyze the image and create
    a profile for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You may need to mount the Linux ISO image before importing it to a mount point,
    by using `mount -O loop /root/<image_iso>  /mnt/cobbler_images/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run the `cobbler profile report` command to check the created profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the `import` command filled many fields automatically, such
    as `Kickstart`, `RAM`, `operating system`, and the `initrd/kernel` file locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add any additional repositories to the profile (optional):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, edit the profile, and add the created repository to the list of available
    repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a client MAC address and link it to the created profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `--hostname` field corresponds to the local system name and configures the
    client networking using the `--ip-address`, `--subnet`, and `--gateway` options.
    This will make Cobbler generate a `kickstart` file with these options.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to customize the server and add additional packages, configure firewall,
    ntp, and configure partitions and hard disk layout then you can add these settings
    to the `kickstart` file. Cobbler provide sample file under  `/var/lib/cobbler/kickstarts/sample.ks`,
    which you can copy to another folder and provide in the `--kickstart` parameter
    in the previous command.
  prefs: []
  type: TYPE_NORMAL
- en: You can integrate Ansible inside the `kickstart` file by running Ansible in
    pull mode (instead the default push mode). Ansible will download the playbook
    from an online GIT repository (such as GitHub or GitLab) and will execute it after
    that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instruct Cobbler to generate the configuration files required to serve our
    client and to update the internal database with the new information by using the
    following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have started the CentOS client, you will notice that it goes to the
    PXE process and sends a DHCP message over `PXE_Network`. Cobbler will respond
    with an IP address, a `PXELinux0` file, and the required image assigned to that
    MAC address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After Cobbler finishes the CentOS installation, you will see the hostname correctly
    configured in the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can go through the same steps for an Ubuntu machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to prepare a lab environment by installing
    two Linux machines (CentOS and Ubuntu) over a hypervisor. We then explored automation options,
    and sped up server deployment by installing Cobbler.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to send commands from a Python script
    directly to an operating system shell and investigate the output returned.
  prefs: []
  type: TYPE_NORMAL
