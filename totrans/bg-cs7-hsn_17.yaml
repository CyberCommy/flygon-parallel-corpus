- en: Writing Code to Manually Connect to a Table and Retrieve Records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to connect to SQL Server and then display
    the records from a database table, `dbo.People`, in a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a show records button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up a project and, into the <html> page, we place a button below the line
    beginning with `<form id=....`. For this, go to Toolbox, grab a `Button` control,
    and drag it in there. Change the text on the button to say `Show Records`. Remember,
    a *record* is just one row of information and a row, of course, is a line in a
    table, for example, that goes across from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, switch to the Design view, and left double-click the Show Records button.
    This takes us into `Default.aspx.cs` with the event handler. Delete the `Page_Load`
    block. The relevant portion of the starting code for this project should look
    like *Figure 17.2.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a5d7faf-33e9-41e1-90c4-fd5f35a3140d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2.1: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make this work with SQL Server, you have to add a namespace. So, go to the
    top of the file, and; enter the following under `using System`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Making the connection string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, beyond this, we''ll go through the construction of the code line-by-line.
    The first thing that you need is a *connection string*. So, let''s do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open SQL Server Object Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the name of your database, in this case People, and view its
    Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, to get the connection string, make sure that you expand the node called
    General within the Properties pane, and then go to the one that says Connection
    string and double-click on it to select it with its long description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, right-click on the long description and copy it. (It''s difficult to
    construct accurately by hand, so it''s better just to copy it from there). This
    procedure is shown in *Figure 17.2.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75589215-6d3c-4fd8-9e17-9fa08cb4e27a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2.2: Copying the connection string'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following within the set of curly braces beneath the line that
    begins with `protected void Button1_Click...`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, after you enter `string connString =`, you put the `@` symbol to indicate
    that it's a literal string or a verbatim string, which should be interpreted exactly
    as it looks. Then, you put the `""` symbols and paste the long string between
    them. So, within this line of course, you have the `Data Source`, the name of
    the computer, `Initial Catalog` as the database, `Integrated Security` is `True`
    because we set it up that way, and some other pieces of information that aren't
    very important right now.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To connect to SQL Server through the page, we will try the following. First,
    you have to create a command to be issued to SQL Server. To do this, enter the
    following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `Select *` means to select all from `dbo.People`. Remember that we called
    our database `People`; so, this means select everything from the table in the
    `People` database. This is what it''s saying: select everything from that table.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, one more thing. When you deal with low-level resources, especially reading
    hard drives, for example, you have to establish a channel of communication to
    the hard drive. So, because that is the case, type the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, `using` is a nice construct because it allows you to get a resource, use
    the resource, and then it disposes the resource for youâ€”very nicely and very cleanly.
    For example, `SqlConnection` is such a thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you right-click on `SqlConnection` and select Go to Definition from
    the menu, and scroll to the bottom, you will see that there''s a line that says,
    Dispose-protected override void Dispose. Now, if you expand the `protected override
    void Open()` line, it says, Opens a database connection with the property settings
    specified by the system.Data.SqlClient.SqlConnection.ConnectionString, as shown
    in *Figure 17.2.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe3707b8-e2fa-4a15-a430-80de1ceb06cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2.3: Expanded definition for protected override void Open'
  prefs: []
  type: TYPE_NORMAL
- en: If you ever want to know which exceptions could be thrown, everything is listed
    in the definition for `protected override void Open()` and likewise with `protected
    override void Close()`.
  prefs: []
  type: TYPE_NORMAL
- en: The constructors are the first ones listed in the definition. So, let's close
    this now.
  prefs: []
  type: TYPE_NORMAL
- en: Catching exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, because errors could be thrown, we''ll use `try` and `catch`,
    so that we can catch them and display them to the user. Start by entering `try`
    on a line by itself below the open curly brace under the line that begins with
    `using (SqlConnection conn...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, insert a set of curly braces below `try`, and then underneath the closing
    curly brace there, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Displaying errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, if an error is generated, we will display it; so enter the following between
    a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A message that is useful will be displayed if something's wrong with the database
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: Opening the connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s continue with the connection now. First, let''s try to open it. Enter
    the following between a set of curly braces under `try`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This opens a connection. Then you will make a SQL command, so enter the following
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What is required for this is the text of the command. So, we'll select it from
    the preceding line where we wrote `Select * from dbo.People`; so, select everybody,
    and then you say `(command,conn)`, which is the name of the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that in the line that begins with `string commandText...`, the argument
    is the *command* and in the line below that is the *connection*. These are two
    different things.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the SQL Server data reader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in the next stage, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `SqlDataReader` is a class. If you hover your mouse over it, the pop-up
    tooltip tells you exactly what this thing can do. Now, if you right-click on `SqlDataReader`
    and select and Go to Definition, it specifically implements this interface called
    `IDisposable` and all the functions that you can see if you scroll down. Further,
    if you right-click on `IDisposable` and select Go to Definition, there's `void
    Dispose()`, which, on expanding says, Performs application-defined tasks associated
    with freeing, releasing, or resetting unmanaged resources. This means specifically
    low-level disk writing and reading and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you see the `reader` variable in the preceding line, and `sqlComm.ExecuteReader()`,
    which returns an `SqlDataReader` class, as you can see in the tooltip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following within a set of curly braces on the line below this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, why is this legit? Hover your mouse over `Read`, and you see that it returns
    a Boolean and it says, Advances the SqlDataReader to the next record. It returns
    either `true` or `false`, whether there are records left to read or not. So, enter
    the following within a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to put in the `<br>` tag, because multiple items could be returned in
    multiple rows, so you want to stack them vertically.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding line, `0`, `1`, `2` are the indices; `reader[0]`, `reader[1]`,
    and `reader[2]` means `column 1`, `column 2`, and `column 3`. It's the same as
    arrays with an index of `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, crank up this program in your browser. Click on the Show Records button,
    and there you see the recordsâ€”the Ids, the names, and the dates, as shown in *Figure
    17.2.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72ad12e2-df15-415a-84da-33952f0c57d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2.4: The results of running our program'
  prefs: []
  type: TYPE_NORMAL
- en: If you right-click on this screen and select View source, as you can see in
    *Figure 17.2.5* in the highlighted region, it generates a span. Exit out of this
    screen and close the windows that you no longer need.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a40c53c2-24d3-4e7b-b81e-d9e98da8c4b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2.5: If you View source, you can see that it has generated a span'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review purposes, the complete version of the HTML file for this chapter,
    is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete version of the `default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can review the code and note the following, which you learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the connection string, `connString`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, `CommandText`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get `SqlConnection`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open it using `conn.Open()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make a command: `SqlCommand(commandText, conn)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `SqlDataReader` data reader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Read the values: `sampLabel.Text += $"<br>{reader[0]}, {reader[1]}, {reader[2]}";`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are any exceptions you can catch them using `catch (Exception ex)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to connect to the SQL Server and then display
    the records from a database table in a web page. You made a connection string,
    connected to SQL Server, wrote the code to catch exceptions and display errors,
    opened the connection, and worked with the SQL Server `DataReader`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will make a table, write a procedure, and use the procedure
    to insert records into the table.
  prefs: []
  type: TYPE_NORMAL
