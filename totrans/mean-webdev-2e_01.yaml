- en: Chapter 1. Introduction to MEAN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MEAN stack is a powerful, full-stack JavaScript solution that comprises
    four major building blocks: MongoDB as the database, Express as the web server
    framework, Angular as the web client framework, and Node.js as the server platform.
    These building blocks are being developed by different teams, and involve a substantial
    community of developers and advocates pushing forward the development and documentation
    of each component. The main strength of the stack lies in its centralization of
    JavaScript as the main programming language. However, the problem of connecting
    these tools together can lay the foundation for scaling and architecture issues,
    which can dramatically affect your development process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, I will try to present the best practices and known issues of
    building a MEAN application, but before you begin with actual MEAN development,
    you will first need to set up your environment. This chapter will cover a bit
    of a programming overview, but mostly present the proper ways of installing the
    basic perquisites of a MEAN application. By the end of this chapter, you''ll learn
    how to install and configure MongoDB and Node.js on all the common operating systems
    and how to use NPM. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the MEAN stack architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and running MongoDB on Windows, Linux, and Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and running Node.js on Windows, Linux, and Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to npm and how to use it to install Node modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three-tier web application development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most web applications are built in a three-tier architecture that consists
    of three important layers: data, logic, and presentation. In web applications,
    the application structure usually breaks down to database, server, and client,
    while in modern web development, it can also be broken into database, server logic,
    client logic, and client UI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A popular paradigm for implementing this model is the **Model-View-Controller**
    (**MVC**) architectural pattern. In the MVC paradigm, the logic, data, and visualization
    are separated into three types of object, each handling its own tasks. The **View**
    handles the visual part, taking care of user interaction. The **Controller** responds
    to system and user events, commanding the Model and View to change appropriately.
    The **Model** handles data manipulation, responding to requests for information
    or changing its state according to the Controller''s instructions. A simple visual
    representation of the MVC architecture is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Three-tier web application development](img/B05071_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Common MVC architecture communication
  prefs: []
  type: TYPE_NORMAL
- en: In the 25 years of web development, many technology stacks became popular for
    building three-tier web applications. Among those now ubiquitous stacks, you can
    find the LAMP stack, the .NET stack, and a rich variety of other frameworks and
    tools. The main problem with these stacks is that each tier demands a knowledge
    base that usually exceeds the abilities of a single developer, making teams bigger
    than they should be, less productive, and exposed to unexpected risks.
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is an interpreted computer programming language that was built for
    the Web. First implemented by the Netscape Navigator web browser, it became the
    programming language that web browsers use to execute client-side logic. In the
    mid 2000s, the shift from websites to web applications, along with the release
    of faster browsers, gradually created a community of JavaScript developers writing
    more complex applications. These developers started creating libraries and tools
    that shortened development cycles, giving birth to a new generation of even more
    advanced web applications. They, in turn, created a continuous demand for better
    browsers. This cycle went on for a few years, where the vendors kept improving
    their browsers and JavaScript developers kept pushing the boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: The real revolution began in 2008, when Google released its Chrome browser,
    along with its fast JIT-compiling V8 JavaScript engine. Google's V8 engine made
    JavaScript run so much faster that it completely transformed web application development.
    More importantly, the release of the engine's source code allowed developers to
    start reimagining JavaScript outside of the browser. One of the first products
    of this revolution was Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'After looking into other options for a while, programmer Ryan Dahl found that
    V8 engine fit his non-blocking I/O experiment called Node.js. The idea was simple:
    help developers build non-blocking units of code to allow better use of system
    resources and create more responsive applications. The result was a minimal yet
    powerful platform, which utilized JavaScript''s non-blocking nature outside of
    the browser. Node''s elegant module system enabled developers to freely extend
    the platform using third-party modules to achieve almost any functionality. The
    reaction by the online community was a creation of various tools, from modern
    web frameworks to robotics server platforms. However, server-side JavaScript was
    only the beginning.'
  prefs: []
  type: TYPE_NORMAL
- en: When Dwight Merriman and Eliot Horowitz set out to build their scalable hosting
    solution back in 2007, they already had a lot of experience with building web
    applications. However, the platform they built did not succeed as planned, so
    in 2009, they decided to take it apart and open source its components, including
    a V8-based database called MongoDB. Derived from the word "humongous", MongoDB
    was a scalable NoSQL database that used a JSON-like data model with dynamic schemas.
    MongoDB gained a lot of traction right away by giving developers the flexibility
    they needed when dealing with complex data, while providing RDBMS features such
    as advanced queries and easy scaling—features that eventually made MongoDB one
    of the leading NoSQL solutions. JavaScript broke another boundary. However, the
    JavaScript revolutionaries haven't forgotten where it all began. In fact, the
    popularization of modern browsers created a new wave of JavaScript frontend frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Back in 2009, while building their JSON as a platform service, developers Miško
    Hevery and Adam Abrons noticed that the common JavaScript libraries weren't enough.
    The nature of their rich web application raised the need for a more structured
    framework that would reduce grunt work and maintain an organized code base. Abandoning
    the original idea, they decided to focus on the development of their frontend
    framework and open sourced the project, naming it AngularJS. The idea was to bridge
    the gap between JavaScript and HTML, and help popularize single-page application
    development.
  prefs: []
  type: TYPE_NORMAL
- en: The result was a rich web framework, which presented frontend web developers
    with concepts such as two-way data binding, cross-component dependency injection,
    and MVC-based components. Angular, along with other modern frameworks, revolutionized
    web development by transforming the once unmaintainable frontend code base into
    a structured code base that can support more advanced development paradigms such
    as **Test-driven Development** (**TDD**).
  prefs: []
  type: TYPE_NORMAL
- en: The rise of open source collaboration tools, along with the devoted involvement
    of these talented engineers, created one of the richest communities in the world.
    More importantly, these major advancements allowed the development of three-tier
    web applications to be unified under JavaScript as the programming language across
    all three layers—an idea that is commonly referred to as the full-stack JavaScript.
    The MEAN stack is just a single example of this idea.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to ECMAScript 2015
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After years of work, the ES6 specification was released on June 2015\. It presented
    the biggest advancements in JavaScript since ES5 and introduced several features
    into the language that will completely transform the way we JavaScript developers
    write code. It would be ambitious to describe all the improvements made by ES2015\.
    Instead, let's try to work through the basic features we'll use in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modules are now a supported language-level feature. They allow developers to
    wrap their component in a Module pattern, and export and import modules inside
    their code. The implementation is very similar to the CommonJS module implementation
    described in the previous chapters, although ES2015 modules also support asynchronous
    loading. The basic keywords for working with ES2015 modules are `export` and `import`.
    Let''s look at a simple example. Suppose you have a file named `lib.js` that contains
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So, in your `main.js` file, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'However, modules can be much more fun. For instance, let''s say our `lib.js`
    file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In your main file, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'ES2015 modules also support default `export` values. So, for instance, let''s
    say you have file named `doSomething.js` that contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll be able to use it as follows in your `main.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is important to remember that the default import should identify their entities
    using the module name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important thing to remember is that modules export bindings and not
    values. So for instance, let''s say you have a `validator.js` file that looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You also have a `main.js` file that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first output would be `false`, and the second would be `true`. Now that
    we have a basic understanding of modules, let's move to classes.
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The long debate about classes versus prototypes came to a conclusion that classes
    in ES2015 are basically just a syntactic sugar over the prototype-based inheritance.
    Classes are easy-to-use patterns that support instance and static members, constructors,
    and super calls. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the `Car` class extends the `Vehicle` class. Thus, the output
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Arrow functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Arrows are functions shorthand by the `=>` syntax. For people familiar with
    other languages such as C# and Java 8, they might look familiar. However, arrows
    are also very helpful because they share the same lexical `this` as their scope.
    They are mainly used in two forms. One is using an expression body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Another form is using a statement body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of using the shared lexical would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If used as a regular function, `this` would be the `book` object and not the
    `author`.
  prefs: []
  type: TYPE_NORMAL
- en: Let and Const
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Let` and `Const` are new keywords used for symbol declaration. Let is almost
    identical to the `var` keyword, so it''ll behave the same as global and function
    variables. However, `let` behaves differently inside a block. For instance, look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first function will print `i` after the loop, but the second one will throw
    an error, since `i` is defined by `let`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `const` keyword forces single assignment. So, this code will throw an error
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Default, Rest, and Spread
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Default, Rest, and Spread are three new features related to functions parameters.
    The default feature allows you to set a default value to the function parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the value of `y` will be set to `0` if a value is not passed
    or is set to `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Rest feature allows you to pass an array as trailing arguments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The Spread feature turns an array into a call argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Going into modern web development, ES2015 will become a viable part of your
    daily programming sessions. What is shown here is the tip of the iceberg, and
    it is strongly recommended that you continue to investigate it deeper. However,
    for the purposes of this book, it will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MEAN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MEAN is an abbreviation for MongoDB, Express, Angular, and Node.js. The concept
    behind it is to use only JavaScript-driven solutions to cover the different parts
    of your application. The advantages are great and are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A single language is used throughout the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the parts of the application can support and often enforce the use of the
    MVC architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serialization and deserialization of data structures is no longer needed, because
    data marshaling is done using JSON objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, there are still a few important questions that remain unanswered:'
  prefs: []
  type: TYPE_NORMAL
- en: How do you connect all the components together?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js has a huge ecosystem of modules, so which modules should you use?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript is paradigm agnostic, so how can you maintain the MVC application
    structure?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON is a schema-less data structure, so how and when should you model your
    data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you handle user authentication?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should you use the Node.js non-blocking architecture to support real-time
    interactions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you test your MEAN application code base?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering the rise of DevOps and CI, what kind of JavaScript development tools
    can you use to expedite your MEAN application development process?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, I'll try to answer these questions and many more. However, before
    we go any further, you will first need to install the basic prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For MongoDB's stable versions, the official MongoDB website supplies linked
    binaries that provide the easiest way to install MongoDB on Linux, Mac OS X, and
    Windows. Notice that you need to download the right architecture version for your
    operating system. If you use Windows or Linux, ensure that you download either
    the 32-bit or 64-bit version according to your system architecture. Mac users
    are safe to download the 64-bit version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MongoDB versioning scheme works in such a way that only even version numbers
    mark stable releases. So, versions 3.0.x and 3.2x are stable, while 2.9.x and
    3.1.x are unstable releases and should not be used in production. The latest stable
    version of MongoDB is 3.2.x.
  prefs: []
  type: TYPE_NORMAL
- en: When you visit the download page at [http://mongodb.org/downloads](http://mongodb.org/downloads),
    you'll be offered a download of an archive that contains the binaries you need
    to install MongoDB. After downloading and extracting the archive file, you will
    need to locate the `mongod` binary, which is usually located in the `bin` folder.
    The `mongod` process runs the main MongoDB server process, which can be used as
    a standalone server or a single node of a MongoDB replica set. In our case, we
    will use MongoDB as a standalone server. The `mongod` process requires a folder
    to store the database files (the default folder is `/data/db`) and a port to listen
    to (the default port is `27017`). In the following subsections, we'll go over
    the setup steps for each operating system. We'll begin with the common Windows
    installation process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended that you learn more about MongoDB by visiting the official
    documentation at [https://mongodb.org](https://mongodb.org).
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have downloaded the right version, run the `.msi` file. MongoDB should
    be installed in the `C:\Program Files\MongoDB\` folder. While running, MongoDB
    uses a default folder to store its data files. On Windows, the default folder
    location is `C:\data\db`. So, in the command prompt, go to `C:\` and issue the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can tell the mongod service to use an alternative path for the data files,
    using the `--dbpath` command-line flag.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've finished creating the data folders, you'll get two options while
    running the main MongoDB service.
  prefs: []
  type: TYPE_NORMAL
- en: Running MongoDB manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run MongoDB manually, you will need to run the `mongod` binary. So, open
    the command prompt and navigate to the `C:\Program Files\MongoDB\Server\3.2\bin`
    folder. Then, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will run the main MongoDB service that starts listening
    to the default `27017` port. If everything goes well, you should see a console
    output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running MongoDB manually](img/B05071_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the MongoDB server on Windows
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the Windows security level, a security alert dialog, which notifies
    you about the blocking of some service features, will be issued. If this occurs,
    select a private network and click on **Allow Access**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should be aware that the MongoDB service is self-contained, so you can alternatively
    run it from any folder of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Running MongoDB as a Windows service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The more popular approach is running MongoDB automatically after every reboot
    cycle. Before you begin setting up MongoDB as a Windows service, it''s considered
    a good practice to specify a path for the MongoDB log and configuration files.
    Start by creating a folder for these files by running the following command in
    your command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you''ll need to create a configuration file at `C:\Program Files\MongoDB\Server\3.2\mongod.cfg`
    that contains these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have your configuration file in place, open a new command prompt window
    with administrative privileges by right-clicking on the command prompt icon and
    clicking on **Run as administrator**. Notice that if an older version of the MongoDB
    service is already running, you''ll first need to remove it using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the MongoDB service by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the install process will only succeed if your configuration file
    is set correctly. After installing your MongoDB service, you can run it by executing
    the following command in the administrative command prompt window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Be aware that the MongoDB configuration file can be modified to accommodate
    your needs. You can learn more about it by visiting [http://docs.mongodb.org/manual/reference/configuration-options/](http://docs.mongodb.org/manual/reference/configuration-options/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB on Mac OS X and Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you'll learn the different ways of installing MongoDB on Unix-based
    operating systems. Let's begin with the simplest way to install MongoDB, which
    involves downloading MongoDB's precompiled binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB from binaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can download the right version of MongoDB using the download page at [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads).
    Alternatively, you can do this via CURL by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we have downloaded the Mac OS X 64-bit version, so make sure you
    alter the command to fit the version suitable for your machine. After the downloading
    process is over, unpack the file by issuing the following command in your command-line
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, change the name of the extracted folder to a simpler folder name by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'MongoDB uses a default folder to store its files. On Linux and Mac OS X, the
    default location is `/data/db`, so in your command-line tool, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may experience some trouble creating this folder. This is usually a permission
    issue, so use `sudo` or super user when running the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command will create the `data` and `db` folders, because the
    `–p` flag creates parent folders as well. Notice that the default folder is located
    outside your home folder, so make sure you set the folder permission by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have everything prepared, use your command-line tool and go to
    the `bin` folder to run the `mongod` service as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run the main MongoDB service, which will start listening to the default
    `27017` port. If everything goes well, you should see a console output similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing MongoDB from binaries](img/B05071_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the MongoDB server on Mac OS X
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB using a package manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, the easiest way to install MongoDB is using a package manager. The
    downside is that some package managers are falling behind in terms of supporting
    the latest version. Luckily, the team behind MongoDB also maintains the official
    packages for RedHat, Debian, and Ubuntu, as well as a Homebrew package for Mac
    OS X. Note that you'll have to configure your package manager repository to include
    the MongoDB servers to download the official packages.
  prefs: []
  type: TYPE_NORMAL
- en: To install MongoDB on Red Hat Enterprise, CentOS, or Fedora using Yum, follow
    the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/).
  prefs: []
  type: TYPE_NORMAL
- en: To install MongoDB on Ubuntu using APT, follow the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/).
  prefs: []
  type: TYPE_NORMAL
- en: To install MongoDB on Debian using APT, follow the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-debian/).
  prefs: []
  type: TYPE_NORMAL
- en: To install MongoDB on Mac OS X using Homebrew, follow the instructions at [http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/).
  prefs: []
  type: TYPE_NORMAL
- en: Using the MongoDB shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The MongoDB archive file includes the MongoDB shell, which allows to you to
    interact with your server instance using the command line. To start the shell,
    navigate to the MongoDB `bin` folder and run the `mongo` service as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If you successfully installed MongoDB, the shell will automatically connect
    to your local instance, using the test database. You should see a console output
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the MongoDB shell](img/B05071_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the MongoDB shell on Mac OS X
  prefs: []
  type: TYPE_NORMAL
- en: 'To test your database, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create a new article collection and insert a JSON
    object containing a `title` property. To retrieve the article object, execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The console will output a text similar to the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! This means your MongoDB instance is working properly, and you
    have successfully managed to interact with it using the MongoDB shell. In the
    upcoming chapters, you'll learn more about MongoDB and how to use the MongoDB
    shell.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the stable versions, the official Node.js website supplies linked binaries
    that provide the easiest way to install Node.js on Linux, Mac OS X, and Windows.
    Note that you need to download the right architecture version for your operating
    system. If you use Windows or Linux, make sure to download either the 32-bit or
    64-bit version according to your system architecture. Mac users are safe to download
    the 64-bit version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the merge between the Node.js and io.js projects, the version scheme continued
    directly from 0.12.x to 4.x. The team now uses the **Long-term Support** (**LTS**)
    policy. You can read about it at [https://en.wikipedia.org/wiki/Long-term_support](https://en.wikipedia.org/wiki/Long-term_support).
    The latest stable version of Node.js is 6.x.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Node.js on a Windows machine is a simple task that can be easily
    accomplished using the standalone installer. To begin with, navigate to [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    and download the right `.msi` file. Notice there are 32-bit and 64-bit versions,
    so make sure you download the right one for your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading the installer, run it. If you get any security dialog boxes,
    just click on the **Run** button, and the installation wizard should start. You
    will be prompted with an installation screen similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Node.js on Windows](img/B05071_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Node.js Windows installation wizard
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on the **Next** button, the installation should begin. A few
    moments later, you''ll see a confirmation screen similar to the following screenshot,
    telling you that Node.js was successfully installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Node.js on Windows](img/B05071_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Node.js Windows installation confirmation
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js on Mac OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing Node.js on Mac OS X is a simple task that can be easily accomplished
    using the standalone installer. Start by navigating to the [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    page and download the `.pkg` file. After downloading the installer, run it, and
    you will be prompted with an installation screen similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Node.js on Mac OS X](img/B05071_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Node.js Mac OS X installation wizard
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Continue**, and the installation process should begin. The installer
    will ask you to confirm the license agreement and then ask you to select the folder
    destination. Choose the option most suitable for you before clicking on the **Continue**
    button again. The installer will then ask you to confirm the installation information
    and ask you for your user password. A few moments later, you''ll see a confirmation
    screen similar to the following screenshot, telling you that Node.js was successfully
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Node.js on Mac OS X](img/B05071_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Node.js Mac OS X installation confirmation
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Node.js on a Linux machine, you''ll have to use the tarball file
    from the official website. The best way of doing so is to download the latest
    version and then build and install the source code using the `make` command. Start
    by navigating to the [http://nodejs.org/en/download/](http://nodejs.org/en/download/)
    page, and download the suitable `.tar.gz` file. Then, expand the file and install
    Node.js by issuing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If everything goes well, the commands will install Node.js on your machine.
    Note that these commands are for the Node.js 6.9.1 version, so remember to replace
    the version number with the version you downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended that you learn more about Node.js by visiting the official
    documentation at [https://nodejs.org](https://nodejs.org).
  prefs: []
  type: TYPE_NORMAL
- en: Running Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you have successfully installed Node.js, you will be able to start experimenting
    with it using the provided command-line interface (CLI). Go to your command-line
    tool and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the Node.js CLI, which will wait for a JavaScript input. To
    test the installation, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be similar to the one that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This is nice, but you should also try to execute a JavaScript file. Start by
    creating a file named `application.js` that contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To run it, you''ll have to pass the file name as the first argument to the
    Node CLI by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You have just created your first Node.js application. To stop
    the CLI, press *CTRL* + *D* or *CTRL* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js is a platform, which means its features and APIs are kept to a minimum.
    To achieve more complex functionality, it uses a module system that allows you
    to extend the platform. The best way to install, update, and remove Node.js modules
    is using npm. npm is mainly used as:'
  prefs: []
  type: TYPE_NORMAL
- en: A registry of packages for browsing, downloading, and installing third-party
    modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A CLI tool to manage local and global packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conveniently, npm is installed during the Node.js installation process, so let's
    quickly jump in and learn how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Using npm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand how npm works, we will install the Express web framework module,
    which you'll use in the upcoming chapters. npm is a robust package manager, which
    keeps a centralized registry for public modules. To browse the available public
    packages, visit the official website at [https://www.npmjs.com/](https://www.npmjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Most of the packages in the registry are open source and contributed by the
    Node.js community developers. When developing an open source module, the package
    author can decide to publish it to the central registry, allowing other developers
    to download and use it in their projects. In the package configuration file, the
    author will choose a name that will later be used as a unique identifier to download
    that package.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended that you learn more about Node.js by visiting the official
    documentation at [https://docs.npmjs.com](https://docs.npmjs.com).
  prefs: []
  type: TYPE_NORMAL
- en: The installation process of npm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is important to remember that npm has two installation modes: local and
    global. The default local mode is used more often and installs third-party packages
    in a local `node_modules` folder placed inside your application folder. It has
    no effect system-wise and is used to install the packages your application needs,
    without polluting your system with unnecessary global files.'
  prefs: []
  type: TYPE_NORMAL
- en: The global mode is used to install the packages you want Node.js to use globally.
    Usually, these are CLI tools, such as Grunt, that you'll learn about in the upcoming
    chapters. Most of the time, the package author will specifically instruct you
    to install the package globally. Therefore, whenever in doubt, use the local mode.
    The global mode will usually install the packages in the `/usr/local/lib/node_modules`
    folder for Unix-based systems and the `C:\Users\%USERNAME%\AppData\Roaming\npm\node_modules`
    folder for Windows-based systems, making it available to any Node.js application
    running on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a package using npm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once you find the right package, you''ll be able to install it using the `npm
    install` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Installing a module globally is similar to its local counterpart, but you''ll
    have to add the `–g` flag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may find out that your user doesn't have the right permissions to install
    packages globally, so you'll have to use the root user or install it using sudo.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to locally install Express, you''ll need to navigate to your application
    folder and issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will install the latest stable version of the Express
    package in your local `node_modules` folder. Furthermore, npm supports a wide
    range of semantic versioning. So, to install a specific version of a package,
    you can use the `npm install` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, to install the second major version of the Express package, you''ll
    need to issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This will install the latest stable version of Express 2\. Note that this syntax
    enables npm to download and install any minor version of Express 2\. To learn
    more about the supported semantic versioning syntax, it is recommended that you
    visit [https://github.com/npm/node-semver](https://github.com/npm/node-semver).
  prefs: []
  type: TYPE_NORMAL
- en: When a package has dependencies, npm will automatically resolve those dependencies,
    installing the required packages in a `node_modules` folder inside the `package`
    folder. In the preceding example, the Express dependencies will be installed under
    `node_modules/express/node_modules`.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a package using npm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To remove an installed package, you''ll have to navigate to your application
    folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'npm will then look for the package and try to remove it from the local `node_modules`
    folder. To remove a global package, you''ll need to use the `-g` flag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Updating a package using npm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To update a package to its latest version, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'npm will download and install the latest version of this package, even if it
    doesn''t exist yet. To update a global package, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Managing dependencies using the package.json file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Installing a single package is nice, but pretty soon, your application will
    need to use several packages. So, you'll need a better way to manage these dependencies.
    For this purpose, npm allows you to use a configuration file named `package.json`
    in the root folder of your application. In your `package.json` file, you'll be
    able to define various metadata properties of your application, including properties
    such as the name, version, and author of your application. This is also where
    you define your application dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `package.json` file is basically a JSON file that contains the different
    attributes you''ll need to describe your application properties. An application
    using the latest Express and Grunt packages will have a `package.json` file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your application name and version properties are required, so removing these
    properties will prevent npm from working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a package.json file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'While you can manually create a `package.json` file, an easier approach would
    be to use the `npm init` command. To do so, use your command-line tool and issue
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'npm will ask you a few questions about your application and will automatically
    create a new `package.json` file for you. A sample process should look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a package.json file](img/B05071_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using `npm init` on Mac OS X
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating your `package.json` file, you''ll need to modify it and add
    a `dependencies` property. Your final `package.json` file should look like the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding code example, we used the `latest` keyword to tell npm to install
    the latest versions of these packages. However, it is highly recommended that
    you use specific version numbers or range to prevent your application dependencies
    from changing during development cycles. This is because new package versions
    might not be backward compatible with older versions, which will cause major issues
    in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the package.json dependencies
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After creating your `package.json` file, you''ll be able to install your application
    dependencies by navigating to your application''s root folder and using the `npm
    install` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'npm will automatically detect your `package.json` file and install all your
    application dependencies, placing them under a local `node_modules` folder. An
    alternative and sometimes better approach to installing your dependencies is to
    use the following `npm update` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This will install any missing packages and will update all of your existing
    dependencies to their specified version.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the package.json file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Another robust feature of the `npm install` command is the ability to install
    a new package and save the package information as a dependency in your `package.json`
    file. This can be accomplished using the `--save` optional flag when installing
    a specific package. For example, to install the latest version of Express and
    save it as a dependency, you can just use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: npm will install the latest version of Express and will add the Express package
    as a dependency to your `package.json` file. For clarity, in the upcoming chapters,
    we prefer to manually edit the `package.json` file. However, this useful feature
    can come in pretty handy in your daily development cycles.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended that you learn more about npm's vast array of configuration
    options by visiting the official documentation at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install MongoDB and how to connect to your
    local database instance using the MongoDB shell. You also learned how to install
    Node.js and use the Node.js CLI. You learned about npm and discovered how to use
    it to download and install Node.js packages. You also learned how to easily manage
    your application dependencies using the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discuss some Node.js basics, and you'll build your
    first Node.js web application.
  prefs: []
  type: TYPE_NORMAL
