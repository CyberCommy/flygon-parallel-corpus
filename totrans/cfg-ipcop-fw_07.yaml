- en: Chapter 7. Virtual Private Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in earlier chapters, many of the technologies underpinning the
    way in which networking works were designed with considerations quite different
    to those facing IT professionals and computer users today. Among the most salient
    of these are concerns about security.
  prefs: []
  type: TYPE_NORMAL
- en: Remote access, another principal concern among IT Professionals, is the practice
    of allowing employees, contractors, clients, and suppliers to access resources
    and services over a Wide Area Network or the Internet. This practice, since it
    necessarily involves not only connecting a company's internal network to the Internet
    but also allowing traffic from the Internet to gain access to the internal network,
    brings with it inherent security risks. Some of them stem from the ability that
    remote access systems give to an attacker to probe and attack the network, while
    some of them stem from the fact that conventionally, information is passed over
    the Internet in plain text with no form of tamper protection.
  prefs: []
  type: TYPE_NORMAL
- en: The implication of this last concern is that if we use a conventional protocol
    such as HTTP or NFS to access our information or give access to our information
    to others over the Internet, anyone with the right degree of access (i.e. anyone
    with physical or logical access to our network infrastructure—switches, routers,
    hubs, firewalls, anywhere between us and our destination) can intercept, read,
    copy, or alter our information in transit.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than simply open up services such as HTTP servers, mail servers, file
    servers, and terminal services or VNC servers to the Internet, then, it has become
    a growing practice to secure these services behind a **VPN**, or **Virtual Private
    Network**.
  prefs: []
  type: TYPE_NORMAL
- en: What is a VPN?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name implies, a VPN is a *network* that is *virtual*. That is to say,
    unlike the local network at a business or small office that consists of, in some
    cases, many thousands of yards of cabling and many network devices, a *virtual*
    network contains no substance at all—in fact, it exists on top of existing networks.
    It is also private, which means in this case that it is both *encrypted* (so that
    third parties cannot see what we are sending and receiving) and *authenticated*
    (we need to identify ourselves, generally with a password, in order to use it).
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario involving a small company with a small number of sales employees
    who routinely work from different parts of the country (or even the world). The
    sales staff needs to regularly synchronize its sales information with the other
    sales employees, both out of the office and in the office, and it needs to send
    and receive email and access other types of company information. These services
    have, until now, been accessible only behind our firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Virtual Private Network, a sales employee connects a laptop to the wireless
    network in the hotel he or she is staying in, providing internet access using
    the wireless adapter in his or her computer. Once connected to the Internet via
    Wi-Fi, he or she connects to the corporate VPN, and the VPN client software establishes
    a secure connection to the corporate VPN server. A new, virtual, network interface
    appears on the laptop, with an IP address allocated to the sales employee's laptop
    corresponding to the internal segment of the corporate network.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic destined for the internal network can now go via this network interface.
    Traffic through this interface is encapsulated by the VPN client software and
    sent via the encrypted VPN link—where it is un-encapsulated at the other end by
    the VPN server and routed into the internal network. The Head of Sales, at his
    or her desk within the corporate network at head office, can see the sales employee's
    laptop on the network as if it were physically plugged into the network, albeit
    with slightly slower access!
  prefs: []
  type: TYPE_NORMAL
- en: This is a gross oversimplification of, technically, how VPN software actually
    works—but it gives a good general idea of how the process occurs at a high level.
    Network-aware applications (such as an email client, FTP client, or Samba client)
    can access resources on the internal network without being aware of the network
    link by simply making the same connections they have done before—the VPN software
    and drivers handle the encapsulation and un-encapsulation. VPNs are increasingly
    used by companies for scenarios very similar to the one above, using a variety
    of technologies including **IP Security** (**IPSec**), **Layer Two Tunneling Protocol**
    (**L2TP**), **Point To Point Tunneling Protocol** (**PPTP**), SSH, SSL, and several
    proprietary protocols such as that used by the proprietary VPN service Hamachi.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to giving access to another network, some VPN systems recently set
    up, such as that offered by Hamachi or the VPN service that comes as part of the
    Google Wi-Fi service, simply serve to offer some guarantee of privacy when using
    untrusted network connections (particularly wireless network connections in public
    places, which are typically unencrypted and non-secure).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Proprietary Internet-Based VPN Services**'
  prefs: []
  type: TYPE_NORMAL
- en: Hamachi's VPN service ([http://www.hamachi.cc/](http://www.hamachi.cc/)) is
    one example of a growing breed of internet-based VPN services seeking only to
    offer privacy (i.e. the user does not gain access to any *extra* resources not
    available to the Internet at large, unlike our sales employee and his or her corporate
    VPN) to users on untrusted network connections such as Wi-Fi networks.
  prefs: []
  type: TYPE_NORMAL
- en: In such situations, traffic is tunneled to the servers owned by the proprietors
    of the VPN connection, and the *extra* privacy is provided by the assumption that
    these proprietors (such as Hamachi) are less likely to try to intercept your information
    than your fellow users of the untrusted network you are connected via (possibly
    with a policy backing this up).
  prefs: []
  type: TYPE_NORMAL
- en: IPSec
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although many VPN protocols are in common deployment (both PPTP and L2TP being
    in wide deployment due to their use as part of the Windows family of products),
    IPSec is the most independent, standardized solution, and is incorporated into
    most VPN solutions in one form or another.
  prefs: []
  type: TYPE_NORMAL
- en: Most IPSec-capable devices will form tunnels with other such devices, although
    this is not guaranteed—lower-end devices such as SOHO routers in particular with
    such functionality are often extremely hard to configure and troubleshoot, and
    typically have poor support from the manufacturer for the IPSec functionality.
    Although IPSec should be interoperable, it can often save a lot of pain to use
    the same device at both ends! It is also worth noting while on the topic of interoperability
    that IPSec only supports **Main Mode** IPSec, and not **Aggressive Mode** IPSec.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**PPTP and L2TP**'
  prefs: []
  type: TYPE_NORMAL
- en: PPTP was originally designed by Cisco and later licensed by Microsoft as a VPN
    protocol for Windows Dial-Up Networking (in fact, the first VPN protocol supported
    natively in Windows). Traffic is authenticated using **MicroSoft Challenge-Handshake
    Authentication Protocol v2** (**MS-CHAPv2**) or **Extensible Authentication Protocol-Transport
    Layer Security** (**EAP-TLS**) (with certificates), and encrypted using **MPPE**
    (**RSA RC4**). Although PPTP is strengthened by certificates and is significantly
    less complex than IPSec, without certificates it is still weaker than IPSec, and
    suffers from less widescale implementation.
  prefs: []
  type: TYPE_NORMAL
- en: L2TP is an evolutionary progression of both Cisco's **Layer 2 Forwarding** (**L2F**)
    and PPTP. It does not implement authentication or encryption, and so it is generally
    employed in conjunction with IPSec in order to form a VPN. Due to the use of IPSec,
    an L2TP/IPSec VPN is more secure than one using PPTP, and the potential exists
    to use higher-grade encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'IPSec itself has a broader scope than simply being used for VPNs, and is a
    mandatory part of the **Internet Protocol version 6** (**IPv6**) specification.
    It was originally conceived with two deployment scenarios in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tunnel Mode:** IPSec in tunnel mode is designed, as in the previous scenario,
    to *tunnel* traffic from more than one host (or an entire network or networks)
    to another host or set of networks with endpoints being used to encapsulate and
    de-encapsulate traffic before and after it traverses an intermediary network,
    generally the Internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transport Mode:** IPSec in transport mode is designed to secure IP communications
    in general. This deployment, although possible over the Internet, is generally
    deployed to protect LAN segments, either in mission-critical scenarios in which
    communication between particular hosts must be encrypted such as a web and database
    server, or to protect an entire network. Such a system may be employed as part
    of a distributed firewalling policy—by configuring all hosts on a network to talk
    to each other only using IPSec, any unauthorized host connecting to the network
    is unable to directly connect to other hosts, effectively isolating that host
    at a certain layer of the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Such a setup is employed by Microsoft as part of its Server and Domain Isolation
    (see [http://www.microsoft.com/technet/itsolutions/network/sdiso/default.mspx](http://www.microsoft.com/technet/itsolutions/network/sdiso/default.mspx)
    for more information on logical isolation using IPSec, in this case on the Windows
    platform) security best practice, and forms a part of both the **Network Access
    Protection** (**NAP**) and **Network Access Quarantine Control** (**NAQC**) frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, IPSec is a complex topic, and can be employed to do many things.
    For the scope of this chapter, however, all we need to know is that IPSec may
    be used to secure IP traffic, and that in this scenario, IPCop utilizes IPSec
    as part of a VPN system to allow remote clients to appear as if they were virtually
    plugged into the internal network via a secure, encrypted tunnel over the Internet,
    and one or more networks (such as a client''s internal network or a hotel wireless
    network). We may also use IPSec to link two IPCop firewalls (or an IPCop firewall
    and another IPSec-capable router or firewall) in order to form a *virtual* site-to-site
    network. The following links provide excellent starting points to learn more about
    IPSec:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.packtpub.com/openswan/book:](http://www.packtpub.com/openswan/book)
    The Openswan book, written by the developers of Openswan itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.openswan.org/docs/:](http://www.openswan.org/docs/) The Openswan
    documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/IPSec:](http://en.wikipedia.org/wiki/IPSec) Wikipedia
    article on IPSec'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Little More about Deploying IPSec
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A basic understanding of IPSec is important to anyone wishing to adequately
    set up, manage, maintain, or support a network utilizing IPSec as part of a site-to-site
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Even solutions that are less *hands on* than IPCop, such as commercial firewalls
    with site-to-site VPN solutions designed to be simple to deploy, frequently require
    advanced debugging, which in turn requires an in-depth knowledge of the protocols
    they use. Commercial firewalling packages with VPN support such as Microsoft's
    ISA Server, Checkpoint, Borderware, or any firewall appliance from a small VPN
    router all the way through enterprise-grade firewalls are frequently difficult
    to troubleshoot.
  prefs: []
  type: TYPE_NORMAL
- en: Appliances in particular, due to their use in many instances of customized free
    IPSec software, are difficult to troubleshoot because of their similarities to
    other IPSec packages but with modifications made by the OEM vendor. Wikipedia
    at the time of writing lists nine different vendors of IPSec software.
  prefs: []
  type: TYPE_NORMAL
- en: For all of these reasons (and good old fashioned curiosity), you hopefully have
    some idea as to why you might (or might not!) want to learn about IPSec.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set up IPSec in IPCop in two ways: one of these is referred to as IPSec
    with a **Pre-shared key**; a pre-shared key is like a password known to both endpoints
    of the connection. Although simple to set up, this is less secure than the second
    of the two ways, which relies on certificates issued by a Certificate Authority
    (CA).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Pre-Shared Keys versus Certificates**'
  prefs: []
  type: TYPE_NORMAL
- en: A PSK is less secure than certificate because it is an inherently weaker security
    mechanism. A pre-shared key is generally (like passwords) chosen because it is
    memorable to a human, and therefore it is infinitely easier to crack by brute
    force than a certificate, which constitutes a highly random set of characters
    and necessitates knowledge both of the public and private key portions in order
    to cause a breach of security.
  prefs: []
  type: TYPE_NORMAL
- en: Certificates may be issued by a CA such as Verisign, Thawte, or CAcert.org,
    or you may set up your own CA (either solely for the purpose of generating these
    certificates or as part of a larger PKI system) in order to do this. You do not
    have to pay money for this, and it does not have to be a (very) painful experience.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Configuring your own CA**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run Windows Server with Active Directory, you probably already have
    the infrastructure and software in place for a flexible, secure PKI system with
    your own CA. There is excellent guidance on Microsoft TechNet about this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.microsoft.com/windowsserver2003/technologies/pki/default.mspx](http://www.microsoft.com/windowsserver2003/technologies/pki/default.mspx)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using another operating system, or would prefer to separate your
    PKI environment from your Windows infrastructure, onlamp.com has a good primer
    on this at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.onlamp.com/pub/a/onlamp/2003/02/06/linuxhacks.html](http://www.onlamp.com/pub/a/onlamp/2003/02/06/linuxhacks.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Running your own CA, especially if you start to rely on it for tasks such as
    IPSec and file encryption, is an extremely important role in any business, one
    which (if broken) can cause large headaches for productivity, and (if compromised)
    can potentially do a lot of damage. You are very well advised to read up on best
    practice for Certificate Authorities if you do decide to take this step, and heed
    some of the words of wisdom offered by those who are experts in the area.
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft guidance, although Windows-specific, has excellent guidelines
    with regard to CA best practice, and many of the recommendations to do with CA
    location and management, and the use of smartcards and HSMs, apply irrespective
    of the platform and OS you choose to run your CA on. At the very least, if you
    do not have a Windows infrastructure, it is worth seeing how *the other side*
    does it (and if its implementation has any merit) before setting such an infrastructure
    up yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for a Successful VPN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a site-to-site VPN, the IPSec setup process can also be somewhat confusing
    due to the terminology. For this reason, it is particularly important to write
    down all of the information required to set up the VPN before you try to set it
    up. The author would even go so far as to suggest the use of an easy-to-understand
    form such as the one displayed on a following page.
  prefs: []
  type: TYPE_NORMAL
- en: A significant majority of problems with VPN setups (many of which are frustrating
    and take a lot of time) are caused by misconfigurations and non-matching settings.
    Taking a few extra minutes to formulate your deployment plan and clearly marking
    out your settings on a piece of paper will save you valuable time and sanity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our prerequisites are:'
  prefs: []
  type: TYPE_NORMAL
- en: A Reliable Network
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As VPN connections are made over an intermediary network such as the Internet,
    their success and stability rely upon the reliability of the intermediary network.
    VPNs introduce more overhead to the network, and any latency or low bandwidth
    will therefore be (marginally) amplified over the VPN.
  prefs: []
  type: TYPE_NORMAL
- en: Two Endpoints Attached to the Internet Running IPSec Software
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We require IPSec software running on both endpoints in order to make a site-to-site
    VPN work!
  prefs: []
  type: TYPE_NORMAL
- en: Static Red IP Addresses for Both Endpoints or Dynamic DNS Hostnames
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Without these we have no way to establish a connection consistently. Although
    rare, some ISPs allocate addresses in the RFC1918 range to clients—that is to
    say, 192.168.0.0/16, 10.0.0.0/8, and 172.16.0.0/12\. Although it is unlikely that
    you don't, check you have a real IP address first!
  prefs: []
  type: TYPE_NORMAL
- en: Non-Overlapping Internal Address Spaces
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Without non-overlapping address ranges, we cannot route traffic from one site
    to the other.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have understood from the earlier chapter on networking, routes and
    routing are very important in the delivery of data from one network subnet to
    another. When a computer tries to connect to another computer—for instance, to
    connect to an SSH server on 192.0.2.33—the operating system first checks to ascertain
    whether this IP address is local. If our computer has the IP address 192.0.22.99
    with the subnet mask of 255.255.255.0, the computer performs a calculation using
    the IP address and netmask in binary to discover which portion of the IP address
    is the *network* portion, and which is the *host* portion. In this instance, the
    first three octets of the IP address (192, 0, and 22) are the network portion,
    while the fourth (and last) octet is the host portion.
  prefs: []
  type: TYPE_NORMAL
- en: Seeing that the network portion of the 192.0.2.33 address (192.0.2) does not
    match the network portion of the IP address of the computer making the connection
    (192.0.22), the computer cannot connect to the destination directly via a switch
    or hub, and therefore has to pass data to a router to route data either directly
    to the destination or to the destination via one or more routers.
  prefs: []
  type: TYPE_NORMAL
- en: The routing table contains a list of entries with networks corresponding to
    IP addresses through which these subnets are reached. As the client computer must
    connect to *a* router in order to send *any* data to a non-local machine, every
    router IP address listed in the routing table *must* be in the same subnet as
    the IP address assigned to the network card(s) in the client machine. Generally
    speaking, client computers will tend to have only one network card with only one
    (important) route—that of the default router. This is the router to which the
    client computer will pass traffic to if there are no other, higher entries in
    the routing table, and is generally where most traffic goes.
  prefs: []
  type: TYPE_NORMAL
- en: You can display the output of your routing table in most Linux distributions
    using the `ip route list` command, and in Linux and most Unix distributions, the
    `route` command with no parameters. In Windows using the `route print` command
    will display the routing table.
  prefs: []
  type: TYPE_NORMAL
- en: In a VPN configuration, our hosts must know which subnet is at the other end
    of the VPN connection, and which subnet is local. Use of overlapping IP ranges
    will therefore break VPNs—if we have a network using the 192.168.0.1/24 (or 192.168.0.1
    with a subnet mask of 255.255.255.0) address range, and have a VPN configured
    with a network also using the 192.168.0.1/24 address range, our computer or VPN
    router will be unable to route packets from one range to another, as it will not
    know in *which* 192.168.0.1/24 address range the host 192.168.0.22 computer is.
  prefs: []
  type: TYPE_NORMAL
- en: Address space should be planned, and if you anticipate your network ever needing
    access to VPNs or site-to-site VPNs, you should pick a non-default private IP
    address range (such as somewhere in the 10.0.0.0/8, (10.0.0.1 to 10.255.255.255)
    range, or a non-standard 192.168.0.0/16 subnet, (such as 192.168.130.0/24) in
    order to make your life easier further down the line.
  prefs: []
  type: TYPE_NORMAL
- en: Time and Patience
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The *left* and *right* terminology used by IPCop can be slightly confusing—the
    best advice that one can give on this front is to pick one site as *left*, and
    the other as *right*. The form overleaf demonstrates this—one site is clearly
    marked **L** and one **R**. To put this differently, *configure both ends of the
    VPN identically!*
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**IP Addresses**'
  prefs: []
  type: TYPE_NORMAL
- en: These examples use *external* addresses in the 172.16.0.0/12 address range—your
    actual Red *external* addresses, if you configure a VPN operating over the Internet,
    will be *public* addresses assigned by your ISP.
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of this chapter, we will consider the following net-to-net configuration
    between two IPCop firewalls in physically separate locations, Cambridge and Oxford.
    For the purpose of this example, these two hosts are to be considered to be set
    up IPCop firewalls in the Red-Green configuration, with internet connections that
    have fixed IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: '| LEFT HAND SITE |   | Site Name: ____ | Cambridge_______ |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RED (External) IP | ____172.16.12.19 | Gateway (Internal) IP | ___192.168.0.10__
    |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | Internal Network | __192.168.0.0/24_ |'
  prefs: []
  type: TYPE_TB
- en: '| Pre-Shared Key: _____ | "Don''t talk to strangers!" | ______________________________
    | __________ |'
  prefs: []
  type: TYPE_TB
- en: '| RIGHT HAND SITE |   | Site Name: ____ | Oxford_______ |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RED (External) IP | ____172.16.22.19 | Gateway (Internal) IP | __192.168.1.1____
    |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | Internal Network | __192.168.1.0/24_ |'
  prefs: []
  type: TYPE_TB
- en: '| Pre-Shared Key: _____ | £agh@;323lkj$%=sdf9SD-+" | _____________________________
    | ____________ |'
  prefs: []
  type: TYPE_TB
- en: The following page contains a blank version of these forms so that you can,
    if you wish, use these forms for your own environment.
  prefs: []
  type: TYPE_NORMAL
- en: '| LEFT HAND SITE |   | Site Name: ____________________ |   |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RED (External) IP | __________________ | Gateway (Internal) IP __________________
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | Internal Network __________________ |   |'
  prefs: []
  type: TYPE_TB
- en: '| Pre-Shared Key: _______________________________________ |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: 'NOTES:'
  prefs: []
  type: TYPE_NORMAL
- en: '| RIGHT HAND SITE |   | Site Name: ____________________ |   |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RED (External) IP | __________________ | Gateway (Internal) IP __________________
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | Internal Network __________________ |   |'
  prefs: []
  type: TYPE_TB
- en: '| Pre-Shared Key: ____________________________________ |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: 'NOTES:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, on the Cambridge firewall, we configure the global settings with
    the Red IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time and Patience](img/1361_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we add a new VPN and select the **Net-to-Net Virtual Private Network:**
  prefs: []
  type: TYPE_NORMAL
- en: '![Time and Patience](img/1361_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we enter the VPN configuration settings into the dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time and Patience](img/1361_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Additional IPSec Settings**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Perfect Forward Secrecy** (**PFS**) and **Dead Peer Detection** (**DPD**)
    are two additional settings you may wish to consider enabling. Both require support
    at both ends of the VPN tunnel, but respectively improve security and effective
    service provision.'
  prefs: []
  type: TYPE_NORMAL
- en: PFS ensures that in the event that a key used to encrypt data over the VPN is
    broken, data encrypted using other keys is not also at risk—the property of Perfect
    Forward Secrecy in cryptography compartmentalizes data compromise in the event
    that cryptography is ever broken, causing an attacker to have to break *every*
    key used in the lifetime of a session to intercept or decrypt all of the session's
    data, rather than being able to break one key and access all of the session's
    data.
  prefs: []
  type: TYPE_NORMAL
- en: DPD uses **Internet Key Exchange** (**IKE**), to query the IPSec partner to
    ensure that it is still alive. This ensures that your IPSec endpoint accurately
    knows the state of the session, since it will detect faults and close the connection
    (and therefore re-establish the session, if possible) more speedily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add the VPN and verify that it appears in the main **VPN** dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time and Patience](img/1361_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we configure an identical VPN (with appropriate configuration information)
    on the Oxford IPCop host (as the 'right' side), our VPN should be functional.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying Connectivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In recent iterations of IPCop, there is a clear indicator on the VPN page indicating
    the status of the VPN. Our first port of call after that, however, is the network
    status screen, where we should see an **UP** VPN interface of the type *ipsecX*,
    where X is a number (iterating up from 0 for each VPN we configure).
  prefs: []
  type: TYPE_NORMAL
- en: We should also check the routing table using either the `route` command or the
    `netstat` command with the `r` flag (`netstat -nr`) for the presence of routes
    to the subnet on the other side of the VPN tunnel. If all appears good, we can
    try pinging a host within the private subnet on the remote side.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, VPN problems are down to configuration issues, many of which can
    be avoided by paying careful attention to the pre-requisites for a sensible VPN—some
    examples of these are that parameters don't match, subnets overlap, or there is
    a network configuration issue. It is always worth resetting the existing VPN configuration
    before trying afresh, and if in doubt, a second pair of eyes often helps spot
    the mistakes that you've missed.
  prefs: []
  type: TYPE_NORMAL
- en: If you're absolutely positive that your configuration matches, and your networks
    are properly configured, it's possible that you have an interoperability issue.
    Different devices supporting IPSec quite frequently don't work together as expected,
    and sometimes don't work at all. SOHO and embedded devices with modified versions
    of the Openswan IPSec stack quite frequently exhibit very strange behavior when
    talking to *normal* Openswan installations and other IPSec stacks. It is, in fact,
    quite frequent for cheap routers supporting IPSec to only talk to other routers
    with identical model numbers and identical firmware versions, and not even to
    talk to other routers from the same vendor. This is a fairly prickly area, and
    isn't often a lot of fun. If in doubt, an IPSec stack you have control over (such
    as IPCop's), or a well-supported stack (such as the one that you might find on
    a Cisco router under support) is often worth the extra expense or effort.
  prefs: []
  type: TYPE_NORMAL
- en: Although not covered by our setup here, which used static addresses for the
    Red interfaces, the IPCop firewall does allow the use of *dynamic* DNS names (as
    covered in the management chapter) for VPNs. As the VPN configuration page indicates,
    it can take a short period of time for these updates to happen after the IPCop
    machine boots up; so if your system uses dynamic DNS and IPSec, you may want to
    configure the *delay* before bringing up VPNs of 60 seconds (or more) in order
    to prevent the VPN from failing. This is also worth bearing in mind if failures
    consistently happen in the first few minutes of the host being booted up!
  prefs: []
  type: TYPE_NORMAL
- en: Host-to-Net Connections Using Pre-Shared Keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our procedure for host-to-net, or road warrior, connections is very similar
    to that of the net-to-net configuration. We first select the appropriate VPN type
    in the **Add** dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Host-to-Net Connections Using Pre-Shared Keys](img/1361_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we configure the VPN with appropriate parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Host-to-Net Connections Using Pre-Shared Keys](img/1361_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is worth noting that you are restricted to one host-to-net connection with
    a PSK.
  prefs: []
  type: TYPE_NORMAL
- en: Host-to-Net Connections Using Certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Certificate-based VPNs are substantially more complex to configure than Pre-Shared
    Keys, but also increase the level of security offered by the VPN significantly.
  prefs: []
  type: TYPE_NORMAL
- en: A Brief Explanation of Certificates and X.509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this book does *not* explain X.509, certificates, or cryptography
    thoroughly—the information here is designed to give you some idea in what context
    IPSec functions such that you understand what it is doing—but further, to give
    you just enough information to understand what you *don't* know and can read about
    yourself if you consider it important.
  prefs: []
  type: TYPE_NORMAL
- en: These are very complex topics, and are well worth spending hours or even days
    reading about if this is the technology that you use. Wikipedia, which has comprehensive
    articles on almost all of the technical terms mentioned here, while not authoritative,
    generally serves as an excellent pointer in the right direction(s), and frequently
    has excellent content.
  prefs: []
  type: TYPE_NORMAL
- en: Certificates in this context are X.509 certificates, which have their origins
    in X.500, which is a set of standards for directory services, including the protocol,
    **Directory Access Protocol** (**DAP**), the predecessor to LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: Directory services, broadly speaking, are a set of applications and protocols
    used to store information about a network, the services it offers, and its users,
    and commonly include information such as usernames, user profiles, logon information,
    security information, and many other pieces of application-specific information.
  prefs: []
  type: TYPE_NORMAL
- en: The *directory* in a directory service system is a database that is stored,
    generally in a central location on directory servers. The database commonly has
    entries for users, computers, and other objects, with parameters for each object
    such as *username* or *extension number* in the case of a user.
  prefs: []
  type: TYPE_NORMAL
- en: X.509 certificates are similar to entries in a directory in that they store
    a number of parameters inside a single file. The parameters stored within an X.509
    certificate include several mandatory fields such as a serial number, the subject,
    the issuer, and information about the key stored in the certificate, as well as
    having provision for *extensions* used to incorporate additional information into
    the certificate, and functionality into the X.509 PKI system.
  prefs: []
  type: TYPE_NORMAL
- en: The X.509 system uses Certificate Authorities (CA), which issue and manage these
    certificates. There is a hierarchy of such CAs, and CAs usually exist at the top
    of the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open a copy of any modern browser, you have incorporated into the browser
    (or, in Windows, the operating system itself), a certificate store. In Windows
    this can be accessed via Internet Explorer by clicking on **Tools | Internet Options
    | Content | Certificates**, which displays a window similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Brief Explanation of Certificates and X.509](img/1361_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The tabs along the top of the window indicate the *type* of certificate being
    viewed—in this example, the tab selected (which is the default tab) is that of
    **Personal** certificates, which are certificates issued by a Certificate Authority
    to a user or computer. These might be used to send signed email using a standard
    such as **S/MIME**, or to access a VPN using IPSec.
  prefs: []
  type: TYPE_NORMAL
- en: The private key associated with the certificate would in these cases be used
    either to sign the email in order to verify the sender (or possibly sign the email
    in addition to encrypting it to another S/MIME user using their public key) or
    to authenticate to a VPN server.
  prefs: []
  type: TYPE_NORMAL
- en: The right-most tab visible in the previous image is **Trusted Root Certification
    Authorities**.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Brief Explanation of Certificates and X.509](img/1361_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the same way that I can verify a PGP-signed email sent to me if I have the
    public key of the person who sent it (mathematically, I can establish that the
    email was sent by the owner of the corresponding private key in a manner impractical
    to subvert), I can verify that a certificate was signed by one of the private
    keys associated with the *root* certificates displayed in the previous image.
  prefs: []
  type: TYPE_NORMAL
- en: Since distributing keys is hard, signing with a root certificate is important
    because it enables us to put all of our trust in one place. Since we know that
    (in theory) VeriSign issue certificates to people only after having verified that
    they are who they say they are, it stands to reason that if we are presented with
    a secure email certificate for [joebloggs@somecompany.com](http://joebloggs@somecompany.com)
    signed by Verisign's root certificate, the sender of the email is [joebloggs@somecompany.com](http://joebloggs@somecompany.com)
    (assuming that we trust both Verisign and somecompany.com's security).
  prefs: []
  type: TYPE_NORMAL
- en: Within the context of online shopping, email, and many other things, this is
    extremely important! Put briefly, these signatures enable your computer to make
    decisions about how to handle certificates based on who signed the certificates
    and whether we trust them and their certificate-issue process.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS uses X.509 certificates as part of SSL, so when you view a secure website
    (with the URL prefixed by `https://`), your browser either recognises that the
    certificate used by SSL is issued by a root Certificate Authority for that address,
    or that it isn't. In the latter case, the browser will usually pop up an error—this
    might be because the certificate is issued for a slightly different web address
    (for instance, if you visit [https://www.gmail.com](http://https://www.gmail.com),
    which uses the certificate for a different URL), or because the certificate is
    self-signed or signed by a root certificate not in your trusted root certificate
    store (such as CAcert, [www.cacert.org](http://www.cacert.org), or on a device—such
    as smartphone—without a full set of trusted root certificates).
  prefs: []
  type: TYPE_NORMAL
- en: Root certificates are included in products such as browsers at the discretion
    of the company or organisation developing them—one of the many faults of the X.509
    PKI implementation as used on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Back to IPSec; IPSec can use X.509 certificates to authenticate clients in a
    VPN in the same way that HTTPS can. Note that the keys associated with these certificates
    are not actually used to encrypt the content sent over the VPN itself, but rather
    to securely exchange *session* keys, which are then used to encrypt the actual
    data. Perfect Forward Secrecy is one reason for this—use of the same key would
    render the entire VPN open to compromise—but there are also two principle types
    of encryption cipher available for use.
  prefs: []
  type: TYPE_NORMAL
- en: One, commonly used for encrypted email or file encryption, uses public and private
    keys, and is referred to as an **asymmetric** cipher, whereby a public key is
    used to encrypt data, which is then in a format only accessible by the holder
    of the private key. This type of cipher is excellent for use in communications
    like email, as you can distribute your public key at whim, and users can encrypt
    information to you offline, anywhere in the world, and send it to you over an
    untrusted network. Only when you get that information is it decrypted.
  prefs: []
  type: TYPE_NORMAL
- en: The other, **symmetric** ciphers, only use one key—the same key to encrypt and
    decrypt. Due to the mathematics involved, these ciphers are a lot faster to encrypt
    and decrypt, but because of the single key used, less practical—key distribution
    becomes a problem, as in an environment with a large number of people, a very
    large number of keys are required in order to allow everyone to securely communicate
    with everyone else—one key per person, in fact, for every other person in the
    group!
  prefs: []
  type: TYPE_NORMAL
- en: Due to the practicalities of using asymmetric ciphers on a fast stream of data,
    communications such as IPSec and SSH generate symmetric keys (using ciphers such
    as RC4, AES, and blowfish) for transmitting data, and then use asymmetric keys
    (using ciphers such as RSA) to exchange the keys used for this transmission before
    the session is fully established.
  prefs: []
  type: TYPE_NORMAL
- en: Certificates with IPSec in IPCop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Version 1.4.0 of IPCop not only contains support for certificate-based IPSec
    tunnels, but also a built-in CA in order to avoid the hassle of configuring your
    own CA or the expense of buying certificates from a third-party CA!
  prefs: []
  type: TYPE_NORMAL
- en: Our first step in configuring a certificate-based IPSec VPN, therefore, is in
    the VPN **Certificate Authorities** window. By default in IPCop, this will list
    both **Root Certificate** and **Host Certificate** as **Not present**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Certificates with IPSec in IPCop](img/1361_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we are using an existing root CA (or configuring a site-to-site VPN), we
    need to upload certificate files using the **Upload CA Certificate** button, but
    for a road warrior configuration (or prior to uploading the certificate files
    from another firewall), we first need to enter a name for the CA into the **CA
    Name** field, and when this is done, start the process of generating our own root
    CA and host certificate, by clicking on **Generate Root/Host Certificates**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Certificates with IPSec in IPCop](img/1361_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the next page has loaded, we need to fill out the parameters we wish our
    X.509 certificate to have. The parameters we need to fill out are **Organisation
    Name, IPCop Hostname, E-Mail Address, Department, City, State**, and **Country**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Certificates with IPSec in IPCop](img/1361_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These should all be relatively self-explanatory—depending upon your environment,
    you may or may not wish to fill out each field with genuine information. The data
    entered does not matter, but it will be seen by clients issued with root or host
    certificates. When this form is filled out, click on the **Generate** button.
    Since this step involves the generation of certificates, it may (depending upon
    the specification of your IPCop host) take some time. Feel free to make yourself
    a coffee at this point.
  prefs: []
  type: TYPE_NORMAL
- en: '![Certificates with IPSec in IPCop](img/1361_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have completed this step, you should be back at the VPN Configuration
    page, identical but with the notable exception that the **Root Certificate** and
    **Host Certificate** entries in the table should be populated, and will have buttons
    alongside them allowing you to **Download Root Certificate** and **Download Host
    Certificate**.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to download a copy of both host and root certificate files.
    We do this by clicking on the floppy disk icon at the right-hand side of their
    entries in the table displayed previously. Both root and host files should be
    saved to a location on a hard drive or network share, rather than opened or installed
    on the PC on which you're doing the configuration (unless this is the host you're
    performing the configuration on).
  prefs: []
  type: TYPE_NORMAL
- en: '![Certificates with IPSec in IPCop](img/1361_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Site-to-Site VPNs Using Certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have saved both our host and root certificates using this method, we
    perform the same process on the other IPCop host. Once this has been done, we
    import the root and host certificate for each IPCop firewall into the other firewall
    in the **Authentication** screen when we create our site-to-site VPN, picking
    the **Upload a Certificate** option rather than the **Use a Pre-Shared Key** option
    detailed earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once this has been done, both servers will authenticate using certificates rather
    than PSKs, which adds considerable security to our VPN configuration.
  prefs: []
  type: TYPE_NORMAL
- en: VPN Authentication Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the **VPN Authentication** menu, we have four options available to us when
    configuring the VPN, which impact on how we configure our client:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use a Pre-Shared Key:** As mentioned before, we can only have one VPN configuration
    using pre-shared keys, and if we are using this configuration we simply need to
    enter the PSK we have chosen into this field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upload a Certificate Request:** Generally, when acquiring certificates from
    a CA (including CAs such as VeriSign and Equifax), it is a common practice to
    first make a certificate *request* on the system that will have the certificate
    installed. This is an X.509 certificate with a key generated by the originating
    system, but which is not signed by any root CA, and so lacks any trust mechanism.
    By sending this *request* file to a CA (and having the CA process it), we can
    be sent back a signed copy of the same file. This response file must be re-imported
    into the machine that made the request (which has the *private* key portion of
    the key that has been signed), and once it has, is combined to form the complete
    certificate (with public/private key). In a configuration (such as web cluster)
    in which multiple machines use the same, signed, certificate, the final certificate
    should be exported from the originating machine once the certificate response
    has been re-imported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some IPSec software have the capability to generate certificate request files.
    This being the case, we can simply pick the **Upload a Certificate Request** option
    in the Authentication dialog, and once IPCop has processed the request file, download
    the certificate from the VPN page in exactly the same way as the root and host
    certificates. This certificate can be re-imported into the client
  prefs: []
  type: TYPE_NORMAL
- en: '**Upload a Certificate:** If the IPSec peer has a certificate we wish to use,
    such as if we are configuring a site-to-site VPN with another IPSec host, we will
    upload the host and root certificate files in this manner. By uploading our right-hand
    IPCop host''s host and root certificate files into the left-hand IPCop server,
    and uploading the left-hand IPCop host''s host and root certificate files into
    the right-hand IPCop host, we make both firewalls aware of the other, and can
    use certificates for a net-to-net VPN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generate a Certificate:** If the IPSec peer does not handle certificates
    itself and cannot generate certificate requests, we can generate a certificate
    from IPCop. This is slightly less secure than using certificate requests, as while
    using certificate requests at no point is the private key (which is required to
    use the certificate) transmitted over the open (even if a malicious attacker intercepted
    the certificate response from the CA, he or she wouldn''t be able to do a lot
    with it), but if we intend to transfer the certificate over a LAN (or enter a
    strong PKCS12 file password into the generation dialog, which is used to encrypt
    the certificate), then we can mitigate this risk, to an extent. The resulting
    certificate from this process can, as with the certificate response method, be
    downloaded from the VPN page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Clients for VPNs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a complex topic, and varies vastly on different host platforms. The
    IPCop Wiki has instructions for Windows clients, which do not have good built-in
    support for an IPSec VPN.
  prefs: []
  type: TYPE_NORMAL
- en: If we have a VPN configuration using certificates, we will either need to use
    a client that (like IPCop) has its own CA, or create a certificate using IPCop
    as detailed earlier. If our VPN requirements are less complex, or we do not want
    to use certificates, we can use PSKs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Windows Client Configuration**'
  prefs: []
  type: TYPE_NORMAL
- en: For client configuration in Windows 2000/XP see:[http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=OpenVPNHowto](http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=OpenVPNHowto).
  prefs: []
  type: TYPE_NORMAL
- en: Linux users have native support from the same packages used by IPCop itself
    to establish the connection as a server—Linux, BSD, and OSX users should consult
    their operating system documentation for the most appropriate way to configure
    this in their environment, as a comprehensive survey of client operating systems
    is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: The Blue Zone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of version 1.4, IPCop has had support for a Blue zone, a wireless segment
    with more aggressive firewall rules than the Orange or Green zones, and designed
    specifically for an untrusted wireless segment. This could be an open wireless
    network with access to other networks restricted to some clients, a closed wireless
    network with an extra layer of security, or even a wired network—it does not have
    to be wireless.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless security has been the subject of much scrutiny over the last few years.
    From the lack of understanding of what security measures the 802.11 standards
    provide to the initially poor security provided by WEP encryption, wireless security
    is still a sore spot for many IT Departments and manufacturers. Even the improved
    encryption provided by WPA in Pre-Shared Key and Enterprise (with a radius server)
    modes is still not enough to satisfy regulatory requirements and corporate policies
    requiring strong encryption for confidential information.
  prefs: []
  type: TYPE_NORMAL
- en: Better, more secure wireless standards (such as WPA2, the much-anticipated 802.11i)
    promise to use better versions of today's technology, with improved procedures
    and stronger encryption—but they are not here at the moment, and many older devices
    and clients may not support them. For all of these reasons as well as for the
    peace of mind that defense in depth provides, setting up VPN connections and/or
    IPSec over wireless networks is very often a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, such setups have been complex and expensive, but IPCop now offers
    rich, enterprise-grade functionality to even home users.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for a Blue Zone VPN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to have a working Blue zone VPN setup, we need an Ethernet card supported
    by IPCop configured with appropriate IP addressing information (i.e. a non-overlapping
    private subnet) and with a DHCP server configured to allocate information in the
    correct address range (i.e. in the same subnet as the IPCop Blue interface and
    with the Blue interface address as gateway and DNS server).
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The setup for a Blue VPN is identical to a road warrior VPN, with the *Blue*
    interface configured rather than the *Red* interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**IPCop Blue VPN Wiki**'
  prefs: []
  type: TYPE_NORMAL
- en: IPCop has a Wiki page specifically for Blue VPN configuration, which should
    be updated if and when the setup changes; [http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=IPCop140BlueVpnHowto](http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=IPCop140BlueVpnHowto).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered three common configuration scenarios for the IPCop firewall
    and IPSec VPNs. Although we have not covered the entire topic end to end, we have
    hopefully provided enough for you to understand how VPNs work and get your feet
    wet configuring (hopefully successfully) your IPCop hosts for certificate and
    Pre-Shared Key-based VPNs. There are many good books written on IPSec, including
    several volumes on building VPNs with Linux by the publishers of this book (such
    as [http://www.packtpub.com/openswan/book](http://www.packtpub.com/openswan/book),
    written by the developers of Openswan).
  prefs: []
  type: TYPE_NORMAL
- en: IPSec VPNs, although widely supported, are by no means the easiest to configure.
    SSL-based VPNs, using the same encryption technology as HTTPS, such as OpenVPN,
    are quickly becoming popular due to the relative ease of configuration, as well
    as the simpler nature of the protocol; IPSec, even in conjunction with a protocol
    such as L2TP, is complex and often broken by firewalls and Network Address Translation.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVPN, in addition to being simpler to firewall, can also run on any number
    of ports, such as those routinely allowed through firewalls with little or no
    application-layer inspection, such as 443 or 53\. For remote staff finding PPTP
    or IPSec VPNs difficult and erratic to use, therefore, OpenVPN may be worth looking
    at. Unfortunately, this ease of use comes at a price—OpenVPN is as yet not widely
    supported, and although clients exist for Windows and Linux, they aren't in common
    use, and IPCop does not natively support OpenVPN (although there is an add-on
    for OpenVPN).
  prefs: []
  type: TYPE_NORMAL
- en: There are resources available on OpenVPN too, including some from this publisher
    ([http://www.packtpub.com/openvpn/book](http://www.packtpub.com/openvpn/book))
    in addition to countless online howtos on OpenVPN generally, and OpenVPN with
    IPCop ([http://home.arcor.de/u.altinkaynak/howto_openvpn.html](http://home.arcor.de/u.altinkaynak/howto_openvpn.html))
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, with this material and links to external resources, the curious IPCop
    administrator is now armed with the information he or she needs to learn more
    about the subject and possibly pick a subject-specific book to read on the topic!
  prefs: []
  type: TYPE_NORMAL
