- en: Working with Burp Macros and Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating session-handling macros
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting caught in the cookie jar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding great pentester plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new issues via Manual-Scan Issue Extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Active Scan++ Extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers two separate topics that can also be blended together:
    macros and extensions. Burp macros enable penetration testers to automate events,
    such as logins or parameter reads, to overcome potential error situations. Extensions,
    also known as plugins, extend the core functionality found in Burp.'
  prefs: []
  type: TYPE_NORMAL
- en: Software tool requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Broken Web Applications (VM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Mutillidae (`http://<Your_VM_Assigned_IP_Address>/mutillidae`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GetBoo (`http://<Your_VM_Assigned_IP_Address>/getboo`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating session-handling macros
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Burp, the Project options tab allows testers to set up session-handling rules.
    A session-handling rule allows a tester to specify a set of actions Burp will
    take in relation to session tokens or CSRF tokens while making HTTP Requests.
    There is a default session-handling rule in scope for Spider and Scanner. However,
    in this recipe, we will create a new session-handling rule and use a macro to
    help us create an authenticated session from an unauthenticated one while using
    Repeater.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutilliae II application, we will create a new Burp Session-Handling
    rule, with an associated macro, to create an authenticated session from an unauthenticated
    one while using Repeater.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the Login page in Mutillidae. Log into the application as username
    `ed` with password `pentest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Immediately log out of the application by clicking the Logout button and make
    sure the application confirms you are logged out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Proxy HTTP history tab. Look for the logout request you
    just made along with the subsequent, unauthenticated `GET` request. Select the
    unauthenticated request, which is the second `GET`. Right-click and send that
    request to Repeater, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00340.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to Burp Repeater, then click the Go button. On the Render tab of the
    response, ensure you receive the Not Logged In message. We will use this scenario
    to build a session-handling rule to address the unauthenticated session and make
    it an authenticated one, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00341.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch to the Burp Project options tab, then the Sessions tab, and click the
    Add button under the Session Handling Rules section, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00342.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the Add button, a pop-up box appears. Give your new rule a name,
    such as `LogInSessionRule`, and, under Rule Actions, select Run a macro, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00343.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another pop-up box appears, which is the Session handling action editor. In
    the first section, under Select macro, click the Add button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00344.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the Add button, the macro editor appears along with another
    pop-up of the Macro Recorder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00345.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: A bug exists in 1.7.35 that disables Macro Recorder. Therefore, after
    clicking the Add button, if the recorder does not appear, upgrade the Burp version
    to 1.7.36 or higher.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the Macro Recorder, look for the `POST` request where you logged in
    as Ed as well as the following `GET` request. Highlight both of those requests
    within the Macro Recorder window and click OK, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Those two highlighted requests in the previous dialog box now appear inside
    the Macro Editor window. Give the macro a description, such as `LogInMacro`, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00347.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Configure item button to validate that the username and password
    values are correct. Click OK when done, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00348.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click OK to close the Macro Editor. You should see the newly-created macro
    in the Session handling action editor. Click OK to close this dialog window, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00349.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After closing the Session handling action editor, you are returned to the Session
    handling rule editor where you now see the Rule Actions section populated with
    the name of your macro. Click the Scope tab of this window to define which tool
    will use this rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00350.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Scope tab of the Session handling rule editor, uncheck the other boxes,
    leaving only the Repeater checked. Under URL Scope, click the Include all URLs
    radio button. Click OK to close this editor, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00351.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should now see the new session-handling rule listed in the Session Handling
    Rules window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00352.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Return to the Repeater tab where you, previously, were not logged in to the
    application. Click the Go button to reveal that you are now logged in as Ed! This
    means your session-handling rule and associated macro worked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00353.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we saw how an unauthenticated session can be changed to an authenticated
    one by replaying the login process. The creation of macros allows manual steps
    to be scripted and assigned to various tools within the Burp suite.
  prefs: []
  type: TYPE_NORMAL
- en: Burp allows testers to configure session-handling rules to address various conditions
    that the suite of tools may encounter. The rules provide additional actions to
    be taken when those conditions are met. In this recipe, we addressed an unauthenticated
    session by creating a new session-handling rule, which called a macro. We confined
    the scope for this rule to Repeater only for demonstration purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting caught in the cookie jar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While targeting an application, Burp captures all of the cookies it encounters
    while proxying and spidering HTTP traffic against a target site. Burp stores these
    cookies in a cache called the **cookie jar**. This cookie jar is used within the
    default session-handling rule and can be shared among the suite of Burp tools,
    such as Proxy, Intruder, and Spider. Inside the cookie jar, there is a historical
    table of requests. The table details each cookie domain and path. It is possible
    to edit or remove cookies from the cookie jar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will open the Burp Cookie Jar and look inside. Then, using the OWASP GetBoo
    application, we'll identify new cookies added to the Burp Cookie Jar.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shut down and restart Burp so it is clean of any history. Switch to the Burp
    Project options tab, then the Sessions tab. In the Cookie Jar section, click the Open
    cookie jar button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00354.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A new pop-up box appears. Since we have no proxied traffic yet, the cookie
    jar is empty. Let''s target an application and get some cookies captured, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00355.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the OWASP Landing page, click the link to access the GetBoo application,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00356.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click the Login button. At the login screen, type both the username and password
    as `demo`, and then click the Log In button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the Burp Cookie Jar. You now have three cookies available. Each cookie
    has a Domain, Path, Name, and Value identified, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00357.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the last cookie in the list and click the Edit cookie button. Modify
    the value from `nada` to `thisIsMyCookie` and then click OK, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00358.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The value is now changed, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00359.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The default scope for the Burp Cookie Jar is Proxy and Spider. However, you
    may expand the scope to include other tools. Click the checkbox for Repeater,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00360.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, if you create a new session-handling rule and use the default Burp Cookie
    Jar, you will see the new value for that cookie used in the requests.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Burp Cookie Jar is used by session-handling rules for cookie-handling when
    automating requests against a target application. In this recipe, we looked into
    the Cookie Jar, understood its contents, and even modified one of the values of
    a captured cookie. Any subsequent session-handling rules that use the default
    Burp Cookie Jar will see the modified value in the request.
  prefs: []
  type: TYPE_NORMAL
- en: Adding great pentester plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As web-application testers, you will find handy tools to add to your repertoire
    to make your assessments more efficient. The Burp community offers many wonderful
    extensions. In this recipe, we will add a couple of them and explain how they
    can make your assessments better. Retire.js and Software Vulnerability Scanner
    are the two plugins, these two plugins are used with the passive scanner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Both of these plugins require the Burp Professional version.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutilliae II application, we will add two handy extensions that
    will help us find more vulnerabilities in our target.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Switch to the Burp Extender tab. Go to the BApp Store and find two plugins—`Retire.js`
    and `Software Vulnerability Scanner`. Click the Install button for each plugin,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00361.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing the two plugins, go to the Extender tab, then Extensions,
    and then the Burp Extensions section. Make sure both plugins are enabled with
    check marks inside the check boxes. Also, notice the Software Vulnerability Scanner
    has a new tab, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00362.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Return to the Firefox browser and browse to the Mutillidae homepage. Perform
    a lightweight, less-invasive passive scan by right-clicking and selecting Passively
    scan this branch, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00363.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note the additional findings created from the two plugins. The `Vulners` plugin,
    which is the Software Vulnerability Scanner, found numerous CVE issues, and `Retire.js`
    identified five instances of a vulnerable version of jQuery, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00364.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp functionality can be extended through a PortSwigger API to create custom
    extensions, also known as plugins. In this recipe, we installed two plugins that
    assist with identifying older versions of software contained in the application
    with known vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new issues via the Manual-Scan Issues Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though Burp provides a listing of many security vulnerabilities commonly found
    in web applications, occasionally you will identify an issue and need to create
    a custom scan finding. This can be done using the Manual-Scan Issues Extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This plugin requires the Burp Professional edition.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application, we will add the Manual Scan Issues
    Extension, create steps revealing a finding, then use the extension to create
    a custom issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Switch to the Burp Extender tab. Go to the BApp Store and find the plugin labeled
    `Manual Scan Issues`. Click the Install button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00365.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Return to the Firefox browser and browse to the Mutillidae homepage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Proxy | HTTP history tab and find the request you just made
    browsing to the homepage. Click the Response tab. Note the overly verbose Server
    header indicating the web server type and version along with the operating system
    and programming language used. This information can be used by an attacker to
    fingerprint the technology stack and identify vulnerabilities that can be exploited:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00366.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since this is a finding, we need to create a new issue manually to capture
    it for our report. While viewing the Request, right-click and select Add Issue,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00367.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A pop-up dialog box appears. Within the General tab, we can create a new issue
    name of `Information Leakage in Server Response`. Obviously, you may add more
    verbiage around the issue detail, background, and remediation areas, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00368.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we flip to the HTTP Request tab, we can copy and paste into the text area
    the contents of the Request tab found within the message editor, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00369.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If we flip to the HTTP Response tab, we can copy and paste into the text area
    the contents of the Response tab found within the message editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once completed, flip back to the General tab and click the Import Finding button. You
    should see the newly-created scan issue added to the Issues window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00370.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In cases where an issue is not available within the Burp core issue list, a
    tester can create their own issue using the Manual-Scan Issue Extension. In this
    recipe, we created an issue for Information Leakage in Server Responses.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a listing of all issue definitions identified by Burp, go to [https://portswigger.net/kb/issues](https://portswigger.net/kb/issues).
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Active Scan++ Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some extensions assist in finding vulnerabilities with specific payloads, such
    as XML, or help to find hidden issues, such as cache poisoning and DNS rebinding.
    In this recipe, we will add an active scanner extension called **Active Scan++**,
    which assists with identifying these more specialized vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This plugin requires the Burp Professional edition.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application, we will add the Active Scan++ extension,
    and then run an active scan against the target.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Switch to the Burp Extender | BApp Store and select the `Active Scan++` extension.
    Click the Install button to install the extension, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00371.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Return to the Firefox browser and browse to the Mutillidae homepage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Target tab, then the Site map tab, right-click on the `mutillidae`
    folder, and select Actively scan this branch, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00372.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the Active scanning wizard appears, you may leave the default settings
    and click the Next button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00373.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Follow the prompts and click OK to begin the scanning process.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the active scanner completes, browse to the Issues window. Make note
    of any additional issues found by the newly-added extension. You can always tell
    which ones the extension found by looking for the This issue was generated by
    the Burp extension: Active Scan++ message, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00374.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp functionality can be extended beyond core findings with the use of extensions.
    In this recipe, we installed a plugin that extends the Active Scanner functionality
    to assist with identifying additional issues such as Arbitrary Header Injection,
    as seen in this recipe.
  prefs: []
  type: TYPE_NORMAL
