- en: Hello Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt is a mature and powerful framework for delivering sophisticated applications
    across a multitude of platforms. It is widely used in embedded devices including
    TVs, satellite set-top boxes, medical equipment, car dashboards, and much more.
    It also has a rich history in the Linux world, with KDE and Sailfish OS using
    it extensively and many apps in the stores being developed using Qt. It has also
    made great strides in the Mobile arena over the past several years. However, in
    the Microsoft Windows and Apple Mac OS X worlds, the dominance of C#/.NET and
    Objective-C/Cocoa mean that Qt is often overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: This book aims to demonstrate the power and flexibility of the Qt framework
    and show how you can write your application once and deploy it to multiple operating
    system desktops. We will build a complete real-world **line of business** (**LOB**)
    solution from scratch, with distinct library, user interface, and unit test projects.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover building a modern, responsive user interface with QML and wiring
    it up to rich C++ classes. We will control every aspect of our project configuration
    and output with QMake, including platform detection and conditional expressions.
    We will build “self-aware” data entities that can serialize themselves to and
    from JSON. We will persist those data entities in a database and learn how to
    find and update them. We will reach out to the internet and consume an RSS feed.
    Finally, we will produce an installation package so that we can deploy our application
    onto other machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will install and configure the Qt framework and associated
    **Integrated Development Environment** (**IDE**) Qt Creator. We will create a
    simple scratchpad application that we will use throughout the remainder of the
    book to demonstrate various techniques. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Qt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining your installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Creator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scratchpad project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: qmake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Qt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start things off by visiting the Qt website at [https://www.qt.io](https://www.qt.io/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c940d042-dd21-4b22-98cd-da7573f1eab4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The site layout changes fairly frequently, but what you are looking for is
    to download Qt Open Source for Desktop & Mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: From the top-level menu, select Products and then IDE & Tools
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Start for Free
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Desktop & Mobile Applications
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Get your open source package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you continue to use Qt beyond these personal projects, ensure that you read
    the licensing information available on the Qt website ([https://www.qt.io/licensing/](https://www.qt.io/licensing/)).
    Upgrade to the commercial Qt license if the scope of your projects requires it
    or if you want access to the official Qt support and the benefits of a close strategic
    relationship with the Qt company.
  prefs: []
  type: TYPE_NORMAL
- en: 'The site will detect your operating system and suggest a recommended download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bef27df-df7a-4602-8eea-60800d22aa90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On Windows, you will be recommended the online installer `*.exe` file, while
    on Linux you will be offered a `*.run` file, and a `.dmg` file if you are running
    Mac OS X. In all cases, download and launch the installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3f707e8-b55d-47bf-a6f0-28bdd400b734.png)'
  prefs: []
  type: TYPE_IMG
- en: On Linux, once downloaded, you may need to first navigate to the `*.run` file
    and mark it as executable in order to be able to launch it. To do this, right-click
    on the file in the file manager and click on Properties. Click on the Permissions
    tab and tick the box that says Allow executing file as program.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the initial welcome dialog, the first thing you are presented with is
    the option to sign up for or log in with a Qt account. Feel free to create one
    if you wish, but for now we’ll go ahead and Skip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e5c2903-df00-4369-aa2f-5a626363549f.png)'
  prefs: []
  type: TYPE_IMG
- en: You are then asked to select which components you wish to install.
  prefs: []
  type: TYPE_NORMAL
- en: Your first decision is which version(s) of the Qt framework you want. You can
    have multiple versions installed side by side. Let's select the latest and greatest
    (Qt 5.10 at the time of writing) and leave all the older versions unchecked.
  prefs: []
  type: TYPE_NORMAL
- en: Next, expand the selected version and you will see a secondary list of options.
    All the options where the description reads “Qt 5.9.x Prebuilt Components for
    ...” are what is known as a **Kit**. A Kit is essentially a toolset enabling you
    to build your application with a specific compiler/linker and run it on a particular
    target architecture. Each kit comes with Qt framework binaries compiled specifically
    for that particular toolset as well as necessary supporting files. Note that kits
    do not come with the referenced compiler; you will need to install those ahead
    of time. One exception to this on Windows is MinGW (which includes GCC for Windows),
    which you can optionally install via the Tools component list at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, that is exactly what we’ll do, so we select the MinGW 5.3.0 32 bit
    kit and also the MinGW 5.3.0 development environment from the Tools section. On
    my (64-bit) machine, I already have Microsoft Visual Studio 2017 installed, so
    we will also select the MSVC 2017 64-bit kit to help demonstrate some techniques
    later in the book. On Linux, we select GCC 64-bit, while on Mac OS, we select
    macOS 64-bit (which uses the Clang compiler). Note that on Mac OS, you must have
    XCode installed, and it's a good idea to launch XCode at least once to give it
    an opportunity to complete its initialization and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to press pause, go and install whatever other IDEs or compilers you
    want to use, and then come back and pick the kits to match. It doesn’t matter
    too much which you go for—the techniques explained throughout the book are applicable
    regardless of the kit, you may just get slightly different results. Note that
    the available kits you are presented with will differ depending on your operating
    system and chipset; for example, if you are on a 32 bit machine, you won’t be
    offered any 64 bit kits.
  prefs: []
  type: TYPE_NORMAL
- en: Below the kits are some optional Qt APIs (such as Qt Charts), which we won’t
    need for the topics covered in this book, but feel free to add them in if you
    want to explore their functionality. Note that they may have different licensing
    agreements from the core Qt framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of kits and APIs, you will note in the Tools section that Qt Creator
    is installed by default and that is the IDE we will be using throughout this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3fb9cc7-a583-4c20-89f5-b50d4bb5d82f.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you are finished making your selections, click on Next and Update to kick
    off the installation.
  prefs: []
  type: TYPE_NORMAL
- en: It's generally a good idea to leave the installation location as the default
    for consistency across machines, but feel free to install it wherever you want.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining your installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once installed, you can update, add, and remove components (or even the entire
    Qt installation) via the `Maintenance Tool` application that is located in the
    directory you installed Qt to.
  prefs: []
  type: TYPE_NORMAL
- en: Launching this tool provides pretty much the same experience as when we first
    installed Qt. The Add or remove components option is the one you want to add in
    items you may have previously not needed, including kits and even entirely new
    releases of the framework. Unless you actively uncheck them, components already
    installed on your system will not be affected.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While a detailed overview of Qt Creator is beyond the scope of this book (the
    Qt Creator manual is accessible via the Help mode as described here), it’s worth
    having a quick whistle stop tour before we get stuck to our first project, so
    launch the freshly installed application and we’ll take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82d23d25-1147-4106-9889-b59acce6dfcb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the upper left-hand side (1) are the different areas or modes of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome mode is the default when Qt Creator is launched and is the jumping off
    point to create or open projects. There is an extensive set of examples that help
    showcase the various capabilities of the framework as well as a selection of tutorial
    videos.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit mode is where you will be spending the vast majority of your time and is
    used for editing all the various text-based files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design is accessible only when you have a UI file open and is a WYSIWYG editor
    for views. Although useful for UX design and basic layout work, it can get frustrating
    quite quickly and we will do all of our QML work in Edit mode instead. Working
    this way promotes understanding of the QML (as you have to write it) and also
    has the advantage that the editor is not adding code that you don’t want.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug mode is used for debugging applications and is beyond the scope of this
    book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Projects mode is where configuration for the project is managed, including the
    build settings. Changes made here will be reflected in the `*.pro.user` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Help mode takes you to the Qt Creator manual and Qt library reference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressing *F1* while the cursor is on a recognized Qt symbol will automatically
    open context sensitive help for that symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below that, we have the build/run tools (2):'
  prefs: []
  type: TYPE_NORMAL
- en: Kit/Build lets you select your kit and set the build mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run builds and runs the application without debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start Debugging builds and runs the application with a debugger (note that you
    must have a debugger installed and configured in your selected kit for this to
    work)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build Project builds the application without running it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Along the bottom (3), we have a search box and then several output windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Issues displays any warnings or errors. For compiler errors relating to your
    code, double-clicking on the item will navigate you to the relevant source code.
  prefs: []
  type: TYPE_NORMAL
- en: Search Results lets you find occurrences of text within various scopes. *Ctrl *+ *F*
    brings up a quick search, and from there selecting Advanced… also brings up the
    Search Results console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application Output is the console window; all output from application code like
    `std::` cout and Qt’s equivalent `qDebug()` appears here, along with certain messages
    from the Qt framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile Output contains output from the build process, from qmake through to
    compilation and linking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugger Console contains debugging information that we won’t be covering in
    this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General Messages contains other miscellaneous output, the most useful of which
    is from qmake parsing of `*.pro` files, which we will look at later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The search box really is a hidden gem and saves you from clicking through endless
    files and folders trying to find what you are looking for. You can start typing
    the name of a file you are looking for in the box and a filtered list appears
    with all matching files. Simply click on the file you want, and it opens in the
    editor. Not only that, there are a large number of filters you can apply too.
    Click your cursor in the empty search box and it displays a list of available
    filters.  The filter `m`, for example, searches for C++ methods. So, say you remember
    writing a method called `SomeAmazingFunction()` but can't remember where it is,
    just head over to the search box, start typing `m Some`, and it will appear in
    the filtered list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Edit mode, the layout changes slightly and some new panes appear. Initially,
    they will be empty, but once you have a project open, they will resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/022cfbf8-e903-4cfd-8fbc-8f674707d226.png)'
  prefs: []
  type: TYPE_IMG
- en: Next to the navigation bar is the project explorer, which you can use to navigate
    the files and folders of your solution. The lower pane is a list of all of the
    documents you currently have open. The larger area to the right is the editor
    pane where you write your code and edit documents.
  prefs: []
  type: TYPE_NORMAL
- en: Double-clicking on a file in the project explorer will generally open it in
    the editor pane and add it to the open documents list. Clicking on a document
    in the open documents list will activate it in the editor pane, while clicking
    on the small x to the right of the filename closes it.
  prefs: []
  type: TYPE_NORMAL
- en: Panes can be changed to display different information, resized, split, closed,
    and possibly filtered or synchronized with the editor using the buttons in the
    headers. Experiment to get a feel for what they can do.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you would expect with a modern IDE, the look and feel of the chrome and
    the text editor is very customizable. Select Tools > Options… to see what is available.
    I generally edit the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Environment > Interface > Theme > Flat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Text Editor > Fonts & Colors > Color Scheme > My own scheme`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Text Editor > Completion > Surround text selection with brackets > Off`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Text Editor > Completion > Surround text selection with quotes > Off`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C++ > Code Style > Current Settings > Copy… then Edit…`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Edit Code Style > Pointers and References > Bind to Type name > On (other
    options Off)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play around and get things how you like them.
  prefs: []
  type: TYPE_NORMAL
- en: Scratchpad project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate how minimal a Qt project can be and to give us a programming
    sandpit to play around in, we’ll create a simple scratchpad project. For this
    project, we won’t even use the IDE to do it for us, so you can really see how
    projects are built up.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create a root folder to store all of our Qt projects. On Windows,
    I use `c:\projects\qt`, while I use `~/projects/qt` on Linux and Mac OS. Create
    this folder wherever works for you.
  prefs: []
  type: TYPE_NORMAL
- en: Note that file syncing tools (OneDrive, DropBox, and so on) can sometimes cause
    problems with project folders, so keep your project files in a regular unsynchronized
    folder and use version control with a remote repository for backups and sharing.
  prefs: []
  type: TYPE_NORMAL
- en: For the remainder of the book, I will loosely refer to this folder as `<Qt Projects>`
    or similar. We will also tend toward using the Unix style / separator for file
    paths, rather than Windows style back slash `\`. So, for readers using Windows,
    `<Qt Projects>/scratchpad/amazing/code` is equivalent to `c:\projects\qt\scratchpad\amazing\code`.
    Qt tends to favor this convention too.
  prefs: []
  type: TYPE_NORMAL
- en: Equally, the majority of screenshots in the remainder of the book will be from
    Windows, so Linux/Mac users should interpret any references to `c:\projects\qt`
    as `~/projects/qt`.
  prefs: []
  type: TYPE_NORMAL
- en: In our Qt projects folder, create a new folder scratchpad and navigate into
    it. Create a new plain text file called `scratchpad.pro`, remembering to remove
    any `.txt` extension the operating system may want to add for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, simply double-click on the file and it will open in Qt Creator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e9f2d91-6e96-4760-b1d0-0537f9cc23e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, Qt Creator is asking us how we want our project to be configured, namely,
    which kits we want to use when building and running our code. Pick one or more
    available kits and click on Configure Project. You can easily add and remove kits
    later, so don’t worry about which ones you select.
  prefs: []
  type: TYPE_NORMAL
- en: If you switch back to the `filesystem`, you will see that Qt Creator has created
    a new file for us called `scratchpad.pro.user`. This is just an XML file containing
    configuration information. If you delete this file and open the `.pro` file again,
    you will be prompted to configure the project again. As its name suggests, the
    configuration settings are relevant to the local user, so often if you load a
    project created by someone else, you will need to go through the configure project
    step then too.
  prefs: []
  type: TYPE_NORMAL
- en: With the project successfully configured, you will see the project has been
    opened, even with a completely empty `.pro` file. That's about as minimal as a
    project can get!
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the `filesystem`, create the following plain text files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main.cpp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.qml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qml.qrc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will go through each of these files, explain their purpose, and add their
    content soon. In a real-world project, we would of course use the IDE to create
    the files for us. Indeed, that’s exactly what we’ll do when we create our main
    solution files. However, the purpose of doing it this way is to show you that
    when you boil it down, a project is just a bunch of text files. Never be afraid
    to create and edit files manually. A lot of modern IDEs can confuse and overcomplicate
    with menu after menu and never-ending option windows. Qt Creator may miss some
    of the advanced bells and whistles of other IDEs but is refreshingly lean and
    straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: With those files created, double-click on the `scratchpad.pro` file in the Projects
    pane and we’ll start editing our new project.
  prefs: []
  type: TYPE_NORMAL
- en: qmake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our project (`.pro`) files are parsed by a utility called **qmake**, which in
    turn generates `Makefiles` that drive the building of the application. We define
    the type of project output we want, what source files are included as well as
    the dependencies and much more. Much of this is achieved by simply setting variables
    as we will do in our project file now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to `scratchpad.pro`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s run through each of these lines in turn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`TEMPLATE` tells qmake what type of project this is. In our case, it’s an executable
    application that is represented by `app`. Other values we are interested in are
    `lib` for building library binaries and `subdirs` for multi project solutions.
    Note that we set a variable with the `=` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Qt is a modular framework that allows you to pull in only the parts you need.
    The `QT` flag specifies the Qt modules we want to use. The *core* and *gui* modules
    are included by default. Note that we append additional values to a variable that
    expects a list with `+=`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`CONFIG` allows you to add project configuration and compiler options. In this
    case, we are specifying that we want to make use of C++14 features. Note that
    these language feature flags will have no effect if the compiler you are using
    does not support them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`SOURCES` is a list of all the `*.cpp` source files we want to include in the
    project. Here, we add our empty `main.cpp` file, where we will implement our `main()`
    function. We don’t have any yet, but when we do, our header files will be specified
    with a `HEADERS` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`RESOURCES` is a list of all the resource collection files (`*.qrc`) included
    in the project. Resource collection files are used for managing application resources
    such as images and fonts, but most crucially for us, our QML files.'
  prefs: []
  type: TYPE_NORMAL
- en: With the project file updated, save the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you save a change to your `*.pro` files, qmake will parse the file.
    If all is well, you will get a small green bar at the bottom-right of Qt Creator.
    A red bar indicates some kind of issue, usually a syntax error. Any output from
    the process will be written out to the General Messages window to help you diagnose
    and fix the problem. White space is ignored, so don’t worry about matching up
    the blank lines exactly.
  prefs: []
  type: TYPE_NORMAL
- en: To get qmake to take a fresh look at your project and generate new `Makefiles`,
    right-click on your project in the Projects pane and select Run qmake. It may
    be slightly tedious, but it’s a good habit to manually run qmake in this way on
    each of your projects before building and running your application. I’ve found
    that certain types of code changes can “slip under the radar” and leave you scratching
    your head when you run your application and they don’t seem to have had any effect.
    If you ever see your application ignoring the changes you’ve just made, run qmake
    on each of your projects and try again. The same applies if you get spurious linker
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see that our other files have now magically appeared in the Projects
    pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3dcc2a3-3a5b-49db-a081-fb4626bb65b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on `main.cpp` to edit it, and we’ll write our first bit of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: All we are doing here is instantiating a Qt GUI application object and asking
    it to load our `main.qml` file. It’s very short and simple because the Qt framework
    does all the complex low-level work for us. We don’t have to worry about platform
    detection or managing window handles or OpenGL.
  prefs: []
  type: TYPE_NORMAL
- en: Possibly one of the most useful things to learn is that placing the cursor in
    one of the Qt objects and pressing *F1* will open the help for that type. The
    same is true for methods and properties on Qt objects. Poke around in the help
    files to see what `QGuiApplication` and `QQmlApplicationEngine` are all about.
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit the next file in our project—`qml.qrc`—you need to right-click and
    select the editor you want to open it with. The default is Resource Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6bd98fb-9f91-45f0-aa54-13a13af39bf2.png)'
  prefs: []
  type: TYPE_IMG
- en: I am personally not a fan of this editor. I don’t feel it makes editing any
    easier than just writing plain text and isn’t particularly intuitive. Close this
    and instead choose `Open with > Plain Text Editor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in `main.cpp`, we asked Qt to load the `qrc:/main.qml` file. This essentially
    breaks down as “look for the file in a `qrc` file with a prefix of `/` and a name
    of `main.qml`”. Now here in our `qrc` file, we have created a `qresource` element
    with a prefix property of `/`. Inside this element, we have a collection of resources
    (albeit only one of them) that has the name `main.qml`. Think of `qrc` files as
    a portable filesystem. Note that the resource files are located relative to the
    `.qrc` file that references them. In this case, our `main.qml` file is in the
    same folder as our `qml.qrc` file. If it was in a subfolder called `views`, for
    example, then the line in `qml.qrc` would read this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, the string in `main.cpp` would be `qrc:/views/main.qml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once those changes are saved, you will see our empty `main.qml` file appear
    as a child of the `qml.qrc` file in the Projects pane. Double-click on that file
    to edit it, and we will finish off our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will cover QML in detail in [Chapter 2](ed8edd43-9e54-4b4c-907e-349764f26c55.xhtml),
    *Project Structure*, but in brief, this file represents the screen or view presented
    to the user when the application launches.
  prefs: []
  type: TYPE_NORMAL
- en: The import lines are similar to `#include` statements in C++, though rather
    than including a single header file, they import a whole module. In this case,
    we want the base QtQuick module to give us access to all the core QML types and
    also the QtQuick window module to give us access to the `Window` component. Modules
    are versioned and generally, you will want to use the latest version for the release
    of Qt you are using. The current version numbers can be found in the Qt documentation.
    Note that although you get code completion when entering the version numbers,
    the options presented sometimes don’t reflect the latest available versions.
  prefs: []
  type: TYPE_NORMAL
- en: As its name suggests, the `Window` element gives us a top-level window, inside
    which all of our other content will be rendered. We give it a size of 1024 x 765
    pixels, a title of “scratchpad” and a background color of white represented as
    a hex RGB value.
  prefs: []
  type: TYPE_NORMAL
- en: Within that component (QML is a hierarchical markup language), we add a welcome
    message with the `Text` component. We center the text in the screen and set its
    font size and color, but other than that, we’re not concerned with fancy formatting
    or anything at this stage, so that’s as complicated as we’ll make it. Again, we’ll
    cover this in more detail later, so don’t worry if it seems a bit alien.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s it. To build and run our amazing new application, first select the Kit
    and Build configuration you want using the monitor icon at the bottom-left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75cffd4f-352a-47a0-acb8-cce893e02890.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, right-click on the project name in the Projects pane and select Run qmake.
    When that has completed, Run the application using the green play icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/257dd773-1abf-41e5-96f5-53ecb8906aea.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we downloaded, installed, and configured Qt. We’ve taken a
    whirlwind tour of the Qt Creator IDE, played with its options, and seen how to
    edit a variety of files with it. We’ve had a gentle introduction to qmake and
    seen how absurdly simple creating projects can be, demystifying things in the
    process. Finally, we built our debut project up from scratch (weak pun intended)
    and got the obligatory Hello World message on screen.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](ed8edd43-9e54-4b4c-907e-349764f26c55.xhtml), *Project Structure*, we
    will build on these basics and set up our main solution.
  prefs: []
  type: TYPE_NORMAL
