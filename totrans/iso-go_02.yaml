- en: The Isomorphic Go Toolchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we established the many benefits that the isomorphic
    web application architecture provides and the advantages of using the Go programming
    language to build isomorphic web applications. Now, it's time to explore the essential
    ingredients that are needed to make Isomorphic Go web applications possible.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce you to the *Isomorphic Go* toolchain. We
    will examine the key technologies that comprise the toolchain—Go, GopherJS, the
    Isomorphic Go toolkit, and the UX toolkit. Once we have established how to obtain
    and ready these tools, we will install the IGWEB demo—the Isomorphic Go web application
    that we will implement in this book. Later, we will dive into the anatomy of the
    IGWEB demo, examining the project structure and code organization.
  prefs: []
  type: TYPE_NORMAL
- en: We will also introduce you to some helpful and productive techniques that will
    be used throughout the book, such as implementing a custom datastore on the server
    side to serve our web application's data persistence needs and utilizing dependency
    injections to provide commonly used functionality throughout our web application.
    Finally, we will provide a project roadmap for the IGWEB application to map out
    our journey in building an Isomorphic Go web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Isomorphic Go toolchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the IGWEB demo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to the IGWEB demo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project structure and code organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Isomorphic Go toolchain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will guide you through the process of installing and configuring
    the Isomorphic Go toolchain—the set of technologies that allow us to create Isomorphic
    Go web applications. Here are the key technologies that we will be covering:'
  prefs: []
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GopherJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Isomorphic Go toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UX toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will utilize **Go** as the server-side and client-side programming language
    for our web application. Go allows us to create reliable and efficient software
    using a simple and understandable syntax. It's a modern programming language that
    is designed in an age of multicore processors, networked systems, massive computation
    clusters, and the World Wide Web. Since Go is a general purpose programming language,
    it makes for an ideal technology to create isomorphic web applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**GopherJS** allows us to bring Go to the client side by transpiling Go code
    into pure JavaScript code that can run in all major web browsers. GopherJS bindings
    are available for common JavaScript functionality, including the DOM API, XHR,
    built-in JavaScript functions/operators, and the WebSocket API.'
  prefs: []
  type: TYPE_NORMAL
- en: The **Isomorphic Go toolkit** provides us with the technology we need to build
    Isomorphic Go web applications. Using the tools available from this project, we
    can implement the common functionality required in an isomorphic web application,
    such as client-side routing, isomorphic template rendering, and creating isomorphic
    web forms.
  prefs: []
  type: TYPE_NORMAL
- en: The **UX toolkit** provides us with the capability to create reusable components
    in Go, which are known as **cogs**. You can think of them as self-contained user
    interface widgets that promote reusability. Cogs can be implemented as pure Go
    cogs or hybrid cogs that can tap into the existing JavaScript functionality. Cogs
    are registered on the server side, and deployed on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2.1* depicts the technology stack we''ll use as a Venn diagram, clearly
    indicating the environment (or environments) the technology component will reside
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c24101d5-08b4-4f83-848a-44a9e1df48a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: The Isomorphic Go toolchain: Go, GopherJS, the Isomorphic Go toolkit,
    and the UX toolkit'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have identified the key components that comprise our technology
    stack, let's go ahead and install/configure them.
  prefs: []
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are new to Go, it is well worth your time to undertake tour of Go, available
    at [https://tour.golang.org](https://tour.golang.org).
  prefs: []
  type: TYPE_NORMAL
- en: Before you can proceed further, you need to have Go installed on your system.
    In this section, we will provide a high-level overview of installing Go, and setting
    up your Go workspace. If you need further help, you can access the detailed instructions
    to install Go at [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make our way to the Go website, available at [https://golang.org](https://golang.org):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdfe9bb6-f4b6-45b6-a392-a3bee77ce753.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: The Go Website'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Download Go link, shown in *Figure 2.2*, to get to the Downloads
    page ([https://golang.org/dl/](https://golang.org/dl/)), shown in *Figure 2.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6c2a836-5f4d-427c-8eec-068b4964b5a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: The Downloads page on the Go Website'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Go is available for all the major operating systems. We will
    be using a Mac while walking you through the installation and configuration process.
    Information on installing Go for other operating systems can be found in the *Getting
    Started* document available on the Go website, at [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs: []
  type: TYPE_NORMAL
- en: On the Downloads page, click on the link to download the distribution of Go
    for your operating system. I clicked on the link to download the Apple macOS installer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting your system up and running with Go will consist of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Go
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up your Go workspace
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building and running programs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the Download is complete, go ahead and launch the installer. The Go installer
    is shown in *Figure 2.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b97ddd2-2222-446e-a370-c67411f187da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: The Go installer'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the onscreen prompts of the installer, and if the installer asks you
    to make Go available for all users on the system, make sure that you choose to
    install Go for all users of the system. You may also be prompted for your system
    credentials (so that you may install Go for all users on the system). Again, go
    ahead and provide your system credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installer is complete, you should get the following confirmation from
    the Go installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bad5b5a6-fd6d-441c-87a4-8f6bc1efd6cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: The Go installer reports a successful installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installer is done, let''s open up Command Prompt and inspect where
    the installer installed the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: On a macOS system, the Go distribution gets installed to the `/usr/local/go`
    directory, and the binaries that come with the Go distribution are installed in
    the `/usr/local/go/bin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are new to the Go toolchain, you should use the `go help` command to
    get yourself acquainted with the various commands that come with Go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To ascertain the version of Go installed on your system, you can use the `go
    version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should have the latest version of Go installed on your system, and you need
    to have a properly configured Go workspace before you can proceed further.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Go workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've successfully installed Go on your system, you need to have a
    properly configured Go workspace before you can proceed further. We will provide
    a high-level overview on setting up a Go workspace, and if you need further help,
    you may read the detailed instructions on setting up a Go workspace available
    at the Go website: [https://golang.org/doc/code.html](https://golang.org/doc/code.html).
  prefs: []
  type: TYPE_NORMAL
- en: Use your favorite text editor to open up the `.profile` file in your home directory.
    If you are using Linux, you need to open up the `.bashrc` file found in your home
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to add the following lines to the file to add some very important
    environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: My username is `kamesh`, you will have to obviously replace this with your username.
  prefs: []
  type: TYPE_NORMAL
- en: '`$GOROOT` is an environment variable used to specify where the Go distribution
    is installed on the system.'
  prefs: []
  type: TYPE_NORMAL
- en: '`$GOPATH` is an environment variable used to specify the top-level directory
    containing the source code for all our Go projects. This directory is known as
    our Go workspace. I have created my workspace in my home directory in the `go`
    folder: `/Users/kamesh/go`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create our Go workspace along with three important directories
    inside of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `go/src` directory will contain the Go source files. The `go/pkg` directory
    will contain the compiled Go packages. Finally, the `go/bin` directory will contain
    compiled Go binaries.
  prefs: []
  type: TYPE_NORMAL
- en: '`$GOBIN` is an environment variable used to specify the location where Go should
    install compiled binaries. When we run the `go install` command, Go compiles our
    source code and stores the newly created binary in the directory specified by
    `$GOBIN`.'
  prefs: []
  type: TYPE_NORMAL
- en: We include two additional entries to the **`$PATH` **environment variable—the
    `$GOROOT/bin` and `$GOBIN` directories. This tells our shell environment where
    to look to find Go-related binaries. Tacking on `$GOROOT/bin` to the `$PATH` lets
    the shell environment know where binaries for the Go distribution are located.
    Tacking on `$GOBIN` tells the shell environment where the binaries for the Go
    programs we create will exist.
  prefs: []
  type: TYPE_NORMAL
- en: Building and running Go programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a simple "hello world" program to check our Go setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start out by creating a directory for our new program inside the `src` directory
    of our Go workspace, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using your favorite text editor, let''s create a `hellogopher.go` source
    file in the `hellogopher` directory with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To build and run this program in one step, you can issue the `go run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To produce a binary executable file that will exist in the current directory,
    you can issue the `go build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To build a binary executable and automatically move it to your `$GOBIN` directory,
    you can issue the `go install` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After issuing the `go install` command, you simply have to type the following
    command to run it (provided that `$GOBIN` is specified in your `$PATH`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have successfully installed, configured, and verified the
    Go installation. Now it's time to to get the other tools up and running, starting
    with GopherJS.
  prefs: []
  type: TYPE_NORMAL
- en: GopherJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GopherJS is a transpiler that converts Go code into pure JavaScript code. Using
    GopherJS, we can write the front-end code in Go that will work across all major
    web browsers that support JavaScript. This technology allows us to unleash the
    power of Go inside the web browser, and without it, Isomorphic Go would not be
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will show you how to install GopherJS. We will cover GopherJS
    in greater detail in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go
    on the Front-End with GopherJS*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting up and running with GopherJS consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing GopherJS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing essential GopherJS bindings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting familiar with GopherJS on the command line
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing GopherJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install GopherJS by issuing the following `go get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To find out the current version of `gopherjs` installed on your system, use
    the `gopherjs version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The major versions of Go and GopherJS must match on your system. We will be
    using version 1.9.1 of Go and version 1.9-1 of GopherJS in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can type `gopherjs help` to get yourself acquainted with the various commands
    that come with GopherJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Installing essential GopherJS bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve installed GopherJS and confirmed that it is working, we need
    to obtain the following GopherJS bindings, which are required for our front-end
    web application development needs:'
  prefs: []
  type: TYPE_NORMAL
- en: dom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jsbuiltin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xhr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: websocket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dom` package provides us with GopherJS bindings for JavaScript’s DOM APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install the `dom` package by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: jsbuiltin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `jsbuiltin` package provides bindings for common JavaScript operators and
    functions. We can install the `jsbuiltin` package by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: xhr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `xhr` package provides bindings for the `XMLHttpRequest` object. We can
    install the `xhr` package by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: websocket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `websocket` package provides bindings for the web browser''s WebSocket
    API. We can install the `websocket` package by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Getting familiar with GopherJS on the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `gopherjs` command is very similar to the `go` command. For example, to
    transpile a Go program into its JavaScript representation, we issue the `gopherjs
    build` command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To build a GopherJS project and minify the produced JavaScript source file,
    we specify the `-m` flag along with the `gopherjs build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When we perform a build operation, GopherJS will create both a `.js` source
    file and a `.js.map` source file.
  prefs: []
  type: TYPE_NORMAL
- en: The `.js.map` files are called source maps. They help us map a minified JavaScript
    source file back to its unbuilt state. This feature comes in handy when we chase
    down errors using the web browser console.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript source file, generated by GopherJS, can be imported as an external
    JavaScript source file into a web page using the `script` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The Isomorphic Go toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Isomorphic Go toolkit ([http://isomorphicgo.org](http://isomorphicgo.org))
    provides us with the technology needed to implement Isomorphic Go web applications.
    We will be using the `isokit` package, from the Isomorphic Go toolkit, to implement
    an isomorphic web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/316a1087-f70e-41f0-9d18-e8ba031b35ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: The Isomorphic Go website'
  prefs: []
  type: TYPE_NORMAL
- en: Installing isokit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `isokit` package from the Isomorphic Go toolkit provides a common isomorphic
    functionality, which can be used either on the server side or on the client side.
    Some notable benefits that the package provides include isomorphic template rendering,
    client-side application routing, automatic static assets bundling, and the ability
    to create isomorphic web forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install the `isokit` package by issuing the following `go get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The UX toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UX toolkit ([http://uxtoolkit.io](http://uxtoolkit.io)) allows us to implement
    *cogs*, which are reusable components implemented in Go that can be used across
    the web pages that comprise IGWEB. We will cover reusable components in [Chapter
    9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml), *Cogs – Reusable Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the cog package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install the `cog` package by issuing the following `go get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've installed the Isomorphic Go toolchain, it's time to set up the
    IGWEB demo, the isomorphic web application that we'll be building in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the IGWEB demo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can get the source code examples for this book by issuing the following
    `go get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The source code for the completed implementation of the IGWEB demo website resides
    in the `igb/igweb` folder. Source code listings for individual chapters can be
    found inside the `igb/individual` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the application root environment variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The IGWEB demo relies on an application root environment variable, `$IGWEB_APP_ROOT`,
    being defined. This environment variable is used by the web application to declare
    where it resides. By doing so, the web application can determine where other resources,
    such as static assets (images, css, and javascript), are present.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should set up the `$IGWEB_APP_ROOT` environment variable by adding the
    following entry in your bash profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the `$IGWEB_APP_ROOT` environment variable exists in the environment,
    you can use the `echo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Transpiling the client-side application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve set up the `$IGWEB_APP_ROOT` environment variable, we can access
    the `client` directory, where the client-side web application is located:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We issue the following `go get` command to install any additional dependencies
    that may be required for the proper functioning of our client-side application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we issue the `gopherjs build` command to transpile the IGWEB client-side
    web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: After running the command, two files should be generated—`client.js` and `client.js.map`.
    The `client.js` source file is the JavaScript representation of IGWEB's client-side
    Go program. The `client.js.map` file is the source map file that will be used
    in conjunction with `client.js` by the web browser to provide us detailed information
    in the web console, which comes in handy when debugging issues.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've transpiled the code for IGWEB's client-side application, the
    next logical step would be to build and run IGWEB's server-side application. Before
    we can do that, we must install and run a local Redis instance, which is what
    we'll do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redis is a popular NoSQL in-memory database. Since the entire database is present
    in the memory, database queries are blazingly fast. Redis is also known to offer
    support for a robust variety of data types, and it's a multipurpose tool that
    can be used as a database, a memory-cache, or even as a message broker.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will use Redis for IGWEB's data persistence needs. We will
    be running our Redis instance on the default port of 6379.
  prefs: []
  type: TYPE_NORMAL
- en: 'We issue the following commands to download and install Redis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'An alternative to fetching Redis using the `wget` command is to obtain it from
    the Redis Downloads page, as shown in *Figure 2.7,* at [https://redis.io/download](https://redis.io/download):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f96ccb37-2b11-437a-bd38-bfc1cfdae2ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: The Downloads section on the Redis website'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have downloaded and installed Redis, you can start up the server by
    issuing the `redis-server` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In another Terminal window, we can open up the Redis **command-line interface**
    (**CLI**), to connect to the Redis server instance, using the `redis-cli` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can set a `foo` key with the `bar` value using the `set` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get the value for the `foo` key using the `get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can learn more about Redis by visiting the documentation section of the
    Redis website at [https://redis.io/documentation.](https://redis.io/documentation) Going
    through the Redis quick start document available at [https://redis.io/topics/quickstart](https://redis.io/topics/quickstart) is also
    helpful. Now that we've installed our local Redis instance, it's time to build
    and run the IGWEB demo.
  prefs: []
  type: TYPE_NORMAL
- en: Running the IGWEB demo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can run the IGWEB web server instance by first changing the directory to
    the `$IGWEB_APP_ROOT` directory, and then issuing the `go run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You can access the IGWEB website by visiting the `http://localhost:8080/index link`
    from your web browser. You should be able to see the home page of the website,
    as shown in *Figure 2.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e85914c0-73d8-41eb-a9fa-4d7bcf532bff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: The IGWEB Home Page'
  prefs: []
  type: TYPE_NORMAL
- en: The final step of our installation procedure is to load the local Redis instance
    with the sample dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the sample dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sample dataset provided is used to populate data for the Products listing
    and About pages. You can visit the Products listing page in your browser by accessing `http://localhost:8080/products`,
    and you should see the screen shown in *Figure 2.9:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/628a6b67-8ec5-4f25-a637-fdc14036d7ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: The Empty Products section with a message to load the sample dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and click on the link displayed on the web page to load the sample
    dataset. When you click on the link, you should see the screen shown in *Figure
    2.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3620722-69e4-4d0e-8a82-09e758657896.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: The confirmation that the sample dataset has been loaded'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you go back to the Products listing page, you should see the products
    displayed on the page, as shown in *Figure 2.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ae4bf3f-f652-4877-9ae2-fe1bcf497c29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: The Products Section, Populated With Products'
  prefs: []
  type: TYPE_NORMAL
- en: We now have the IGWEB demo up and running!
  prefs: []
  type: TYPE_NORMAL
- en: Each time we want to make a change to our server-side Go application, we need
    to issue a `go build` command and restart the web server instance. Similarly,
    each time we make a change to our client-side Go application, we have to issue
    a `gopherjs build` command. Constantly issuing these commands, while we're deep
    in development, can be tedious and inefficient. The `kick` command provides us
    with a means to be more productive.
  prefs: []
  type: TYPE_NORMAL
- en: Using kick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `kick` command is a lightweight mechanism that provides an *instant kickstart*
    to a Go web server instance. The *instant kickstart* happens when a Go source
    file within the application's project directory (or any of its subdirectories)
    gets changed.
  prefs: []
  type: TYPE_NORMAL
- en: The `kick` command provides us a means to automate our development workflow,
    by recompiling our Go code and restarting the web server, anytime we make a change
    to a Go source file.
  prefs: []
  type: TYPE_NORMAL
- en: The workflow provided by `kick` is similar to developing web applications using
    a dynamic, scripting language such as PHP, where anytime a change is made to the
    PHP source file, the change is instantly reflected when the web page is refreshed
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: What sets `kick` apart from other Go-based solutions in this problem space is
    that it takes both the `go` and `gopherjs` commands into consideration while performing
    the i*nstant kickstart*. It also takes changes made to template files into consideration
    as well, making it a handy tool for isomorphic web application development.
  prefs: []
  type: TYPE_NORMAL
- en: Installing kick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install `kick`, we simply issue the following `go get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Running kick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn how to use `kick`, you can issue the `help` command line flag like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `--appPath` flag specifies the path to the Go application project. The `--gopherjsAppPath`
    flag specifies the path to your GopherJS project. The `--mainSourceFile` flag
    specifies the name of the Go source file that contains the `main` function implementation
    in the Go application project directory. If you're still running IGWEB using the `go
    run` command in the Terminal window, it's time to exit the program and run it
    using `kick` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the IGWEB demo with `kick`, we issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Verify that kick is working
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s open up the About page (`http://localhost:8080/about`) along with the
    web inspector. Take note of the message that says IGWEB Client Application in
    the web console, as shown in *Figure 2.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b32d07a-f409-4f16-9a47-31cbeab0b4ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: The message printed in the web console'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open up the `client.go` source file located in the `client` directory.
    Let''s replace the first line in the `run` function with the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and look at the Terminal window, where you''re running `kick`,
    and you should be able to see the following message appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a confirmation from `kick` that it has detected the change to the file,
    and that it has performed an i*nstant kickStart*. Now, let''s reload the web page,
    and you should be able to see the updated message, as shown in *Figure 2.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bab89060-bee6-4416-bb79-48eba369ce46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: The modified message is printed in the web console'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the IGWEB demo running successfully on your machine using
    `kick`, an introduction to the project is in order.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the IGWEB demo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IGWEB is a fictitious tech startup created by three imaginary gophers who want
    to use Isomorphic Go to build a simple storefront demo on the web. The idea of
    these enterprising gophers is to take common, secondhand products sold at garage/yard
    sales and sell them online instead. This team of gophers have chosen to implement
    the IGWEB demo in Isomorphic Go to not only provide an enhanced user experience
    but also to gain greater search engine discoverability. If you haven't guessed
    already, IGWEB simply stands for *Isomorphic Go web application*.
  prefs: []
  type: TYPE_NORMAL
- en: Building IGWEB from the ground up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to understand the underlying concepts that are involved with building
    an isomorphic web application, we will follow an idiomatic Go approach while creating
    IGWEB. We will make use of the functionality found from packages in the standard
    library as well as from third-party packages.
  prefs: []
  type: TYPE_NORMAL
- en: If you are experienced in developing web applications using a web framework,
    you may be wondering why we are taking this approach. At the time of writing,
    there is no Go-based web framework that provides functionality, out of the box,
    to create a web application that conforms to the isomorphic web application architecture
    that was presented in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, web frameworks often involve following a particular set
    of rules and conventions that may be framework-specific. Our focus is conceptual
    and is not tied to a particular web framework. Therefore, our attention will be
    focused on the underlying concepts involved in the creation of an isomorphic web
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The IGWEB roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the process of building each section and feature of the IGWEB demo website,
    we will learn more about Isomorphic Go. Here's a roadmap of the major sections/features
    of IGWEB along with the corresponding chapter in the book, where we implement
    that particular section or feature.
  prefs: []
  type: TYPE_NORMAL
- en: The home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides containing the image carousel of featured products and the multiple
    live clocks, the IGWEB home page also contains a section with links to standalone
    front-end coding examples.
  prefs: []
  type: TYPE_NORMAL
- en: The standalone examples include various front-end programming examples, an example
    of inline template rendering using GopherJS, and a local storage inspector. These
    examples will be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go
    on the Front-End with GopherJS*. The image carousel and the live clocks will be
    covered in [Chapter 9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml), *Cogs – Reusable
    Components*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Location of the home page: `http://localhost:8080/index`.'
  prefs: []
  type: TYPE_NORMAL
- en: The about page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our team of gophers want to be visible to the world, by being featured on IGWEB's
    About page. In the process of making this happen, we will learn isomorphic template
    rendering and the ability to share templates, template data, and template functions
    across environments.
  prefs: []
  type: TYPE_NORMAL
- en: The About page will be covered in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml),
    *Isomorphic Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Location of the About page: `http://localhost:8080/about`.'
  prefs: []
  type: TYPE_NORMAL
- en: The products page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Products listing page features the available products to be sold on the
    IGWEB website. Each product comes with a product title, an image thumbnail preview,
    the price of the product, and a short description. Clicking on the product image
    will take the user to the product detail page, where the user can learn more about
    that particular product. By implementing the product listing and product detail
    pages, we will learn about end-to-end application routing in Isomorphic Go.
  prefs: []
  type: TYPE_NORMAL
- en: The Products page will be covered in [Chapter 5](8c1d6725-c841-42b2-904d-e34ba3764cc3.xhtml),
    *End-to-End Routing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Location of the Products page: `http://localhost:8080/products`.'
  prefs: []
  type: TYPE_NORMAL
- en: The shopping cart feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each product card displayed in the Products page will contain an Add To Cart
    button. The button will also be available on the product's detail page. We will
    learn how to maintain the state of the shopping cart when performing add and remove
    operations on the shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: The shopping cart feature will be covered in [Chapter 6](5759cf7a-e435-431d-b7ca-24a846d6165a.xhtml),
    *Isomorphic Handoff*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Location: `http://localhost:8080/shopping-cart`.'
  prefs: []
  type: TYPE_NORMAL
- en: The contact page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Contact page will provide the means to contact IGWEB's team of gophers.
    In the process of implementing the contact form, we will understand how to implement
    an isomorphic web form that shares validation logic, across environments. In addition
    to this, we will also learn how the web form can work resiliently, even in situations
    where JavaScript is disabled in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: The Contact page will be covered in [Chapter 7](a9dcc0d7-ecf7-4ad0-b879-0a596ab4594e.xhtml),
    *The Isomorphic Web Form*. The date picker `cog` for the contact form's time sensitivity
    input field will be covered in [Chapter 9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml),
    *Cogs – Reusable Components*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Location of the Contact page: `http://localhost:8080/contact`.'
  prefs: []
  type: TYPE_NORMAL
- en: The live chat feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In situations where greater user interactivity is required, website users can
    engage with a live chat bot. In the process of building the live chat feature,
    we will learn about the real-time web application functionality. The live chat
    feature will be covered in [Chapter 8](38c071ef-d44c-452c-80dd-0b76837cc5e8.xhtml),
    *Real-Time Web Application Functionality*.
  prefs: []
  type: TYPE_NORMAL
- en: The live chat feature can be activated by clicking on the live chat icon located
    at the top-right corner of the web page.
  prefs: []
  type: TYPE_NORMAL
- en: Reusable components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will return to the home page by implementing a variety of reusable components,
    such as a live clock, and an image carousel, which features products that are
    available on IGWEB. We'll also build a date picker `cog` for the Contact page,
    and a time ago cog for the About page. The time ago cog will represent time in
    a human readable format. We'll also take a look at implementing a notify cog,
    which is used to display notification messages to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Reusable components will be covered in [Chapter 9](cbb6c046-c40f-4681-a25d-9b979614b2cf.xhtml),
    *Cogs – Reusable Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Project structure and code organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for the IGWEB project can be found in the `igweb` folder, and it is
    organized into the following folders (listed in alphabetical order):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `bot` folder contains the source files that implement the chat bot for the
    live chat feature.
  prefs: []
  type: TYPE_NORMAL
- en: The `chat` folder contains the server-side code that implements the chat server
    for the live chat feature.
  prefs: []
  type: TYPE_NORMAL
- en: The `client` folder contains the client-side Go program that will be transpiled
    into JavaScript using GopherJS.
  prefs: []
  type: TYPE_NORMAL
- en: The `client/carsdemo` contains a standalone example that demonstrates inline
    template rendering using GopherJS. This example will be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml),
    *Go on the Front-End with GopherJS*.
  prefs: []
  type: TYPE_NORMAL
- en: The `client/chat` folder contains the client-side code that implements the chat
    client.
  prefs: []
  type: TYPE_NORMAL
- en: The `client/common` folder contains the client-side code that implements the
    common functionality used throughout the client-side application.
  prefs: []
  type: TYPE_NORMAL
- en: The `client/gopherjsprimer` contains the standalone GopherJS examples that will
    be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go on
    the Front-End with GopherJS*.
  prefs: []
  type: TYPE_NORMAL
- en: The `client/handlers` folder contains client-side, route/page handlers. These
    handlers are responsible for handling the routes of pages on the client side,
    preventing a full page reload. They are also responsible for handling all client-side
    user interactions that occur for a given web page.
  prefs: []
  type: TYPE_NORMAL
- en: The `client/localstoragedemo` contains an implementation of a local storage
    inspector, which will be covered in [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml),
    *Go on the Front-End with GopherJS*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `client/tests` folder contains end-to-end tests that exercise the client-side
    functionality. This folder consists of these three folders: `client/tests/go`,
    `client/tests/js`, and `client/tests/screenshots`. The `go` subfolder contains
    CasperJS tests, which are automated tests that simulate user interactions with
    the website implemented in Go. Running the `build_casper_tests.sh` bash script,
    found in the `scripts` folder, will transpile each Go source file into its equivalent
    JavaScript representation, which will be stored in the `js` subfolder. Upon running
    the CasperJS tests, screenshots are generated and saved in the `screenshots` subfolder.'
  prefs: []
  type: TYPE_NORMAL
- en: The `common` folder contains the server-side code that implements the common
    functionality used throughout the server-side application.
  prefs: []
  type: TYPE_NORMAL
- en: The `common/datastore` folder contains the server-side code that implements
    a Redis datastore to satisfy the application's data persistence needs.
  prefs: []
  type: TYPE_NORMAL
- en: The `endpoints` folder contains the server-side code for the Rest API endpoints
    that are responsible for servicing XHR calls made from the web client.
  prefs: []
  type: TYPE_NORMAL
- en: The `handlers` folder contains the server-side code for the server-side route
    handler functions responsible for servicing a particular route. The primary responsibility
    of these handler functions is to send a web page response back to the client.
    They are used for the initial web page load, where the web page response is rendered
    on the server-side using the classic web application architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The `scripts` folder contains handy bash shell scripts to be run on the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared` folder contains the isomorphic code that is shared across the server
    and the client. Taking a look into this folder gives us an understanding of all
    the Go code that can be shared across environments.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared/cogs` folder contains reusable components (cogs), which are registered
    on the server side and deployed on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared/forms` folder contains isomorphic web forms.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared/models` folder contains the isomorphic types (structs) that we use
    to model data in our isomorphic web application.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared/templates` folder contains isomorphic templates that can be rendered
    across environments.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared/templatedata` folder contains isomorphic data objects that are to
    be supplied to isomorphic templates at the time of rendering.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared/templatefuncs` folder contains isomorphic template functions that
    can be used across environments.
  prefs: []
  type: TYPE_NORMAL
- en: The `shared/validate` folder contains common, isomorphic validation logic, which
    can be utilized by web forms across environments.
  prefs: []
  type: TYPE_NORMAL
- en: The `static` folder contains all the static assets for the isomorphic web application.
  prefs: []
  type: TYPE_NORMAL
- en: The `static/css` folder contains the CSS stylesheet source files.
  prefs: []
  type: TYPE_NORMAL
- en: The `static/fonts` folder contains the custom fonts used by the web application.
  prefs: []
  type: TYPE_NORMAL
- en: The `static/images` folder contains the images used by the web application.
  prefs: []
  type: TYPE_NORMAL
- en: The `static/js` folder contains the JavaScript source code for the web application.
  prefs: []
  type: TYPE_NORMAL
- en: The `submissions` folder exists for illustration purposes. The folder houses
    the `submissions` package, which contains logic that is to be invoked after a
    web form has successfully cleared the web form validation process.
  prefs: []
  type: TYPE_NORMAL
- en: The `tests` folder contains end-to-end tests that exercise the server-side functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IGWEB''s project codebase can be conceptualized as following the **Model-View-Control** (**MVC**)
    pattern. The MVC pattern is heavily used in the creation of web applications,
    and it is depicted in *Figure 2.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09af5bf1-3a2f-4fe2-9070-96b8a1e7b260.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: The Model View Controller pattern'
  prefs: []
  type: TYPE_NORMAL
- en: There are three primary components in a MVC-based application—the model, the
    view, and the controller. The primary purpose of models are to supply data and
    business rules to the application. Think of the models as the gatekeepers of the
    application's data needs. The models for IGWEB can be found in the `shared/models`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Views are responsible for the output that the user sees. The focus of views
    is on presentation, and the rendering of the models into the user interface, in
    a manner that makes sense to the user. The views in IGWEB exist as the templates
    found in the `shared/templates` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers implement the application logic of the system, and they basically
    tell the application how it should behave. You can conceptualize the controller
    as a broker between the model and the views of an application. The controller
    accepts user input from the view, and it can access or mutate the state of the
    model. The controller may also change what the view is currently presenting. The
    server-side controllers in IGWEB are the route handlers found in the `handlers`
    folder. The client-side controllers in IGWEB are the route/page handlers found
    in the `client/handlers` directory.
  prefs: []
  type: TYPE_NORMAL
- en: As you go through the examples in this book, take note that all folders mentioned
    in a relative manner are relative to the `igweb` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have established how the code for the IGWEB project is organized,
    we can begin our journey to implement the individual sections and features that
    comprise our Isomorphic Go web application.
  prefs: []
  type: TYPE_NORMAL
- en: The custom datastore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A custom datastore has been implemented for the IGWEB demo website. Although
    we will be using Redis as the exclusive database for this book, the truth is,
    you are free to use just about any database your heart desires—as long as you
    create a custom datastore that implements the `Datastore` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the section where we''ve defined the `Datastore` interface in
    the `datastore.go` source file found in the `common/datastore` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We will be going over the individual methods of the `Datastore` interface in
    their respective chapters that deal with the particular sections or features,
    where the method is used. Note that the final method required to implement the
    `Datastore` interface is the `Close` method (shown in bold). The `Close` method
    determines how the datastore closes its connection (or drains its connection pool).
  prefs: []
  type: TYPE_NORMAL
- en: Examining the `RedisDatastore` implementation in the `redis.go` source file,
    found in the `common/datastore` folder, will provide an idea of what goes into
    creating a custom datastore that implements the `Datastore` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving further along in the `datastore.go` source file, we have defined the `NewDatastore` function,
    which is responsible for returning a new datastore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Our datastore solution is flexible since we can swap out the Redis datastore
    with any other database, so long as our new custom datastore implements the `Datastore`
    interface. Notice that we have defined the `REDIS` constant in the constant grouping
    using the `iota` enumerator (shown in bold). Examine the `NewDatastore` function,
    and note that a new `RedisDatastore` instance is returned when the `REDIS` case
    is encountered (shown in bold), inside the `switch` block on the `datastoreType`.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to add support for another database, such as MongoDB, we will simply
    add a new constant entry, `MONGODB`, to the constant grouping. In addition to
    that, we will add an additional `case` statement for the `switch` block in the `NewDatastore` function,
    for MongoDB, which returns a `NewMongoDataStore` instance, providing the connection
    string to the MongoDB instance as an input argument to the function. The `NewMongoDBDatastore`
    function will return an instance of our custom datastore type, `MongoDBDataStore`,
    which will implement the `Datastore` interface.
  prefs: []
  type: TYPE_NORMAL
- en: A great benefit of implementing the custom datastore in this manner is that
    we can prevent littering our web application with database driver-specific calls
    for a particular database. With the custom datastore, our web application becomes
    agnostic to the database and provides us with greater flexibility in handling
    our data access and data storage needs.
  prefs: []
  type: TYPE_NORMAL
- en: The GopherFace web application, from the web programming with Go video series,
    implements a custom datastore for MySQL, MongoDB, and Redis. An example of the
    custom datastore using these databases is available at [https://github.com/EngineerKamesh/gofullstack/tree/master/volume2/section5/gopherfacedb/common/datastore](https://github.com/EngineerKamesh/gofullstack/tree/master/volume2/section5/gopherfacedb/common/datastore).
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The server-side application's primary entry point is the `main` function defined
    in the `igweb.go` source file. The client-side application's primary entry point
    is the `main` function defined in the `client/client.go` source file. In both
    of these primary entry points, we utilize a dependency injection technique to
    share a common functionality throughout the web application. By doing so, we avoid
    having to utilize package-level global variables.
  prefs: []
  type: TYPE_NORMAL
- en: On both the server side, and on the client side, we implement a custom `Env`
    type in the `common` package. You may consider that `Env` stands for the common
    functionality that is to be accessed from the *application environment*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the declaration of the `Env` struct on the server side, found in the
    `common/common.go` source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `DB` field will be used to store the custom datastore object.
  prefs: []
  type: TYPE_NORMAL
- en: The `TemplateSet` field is a pointer to a `TemplateSet` object. A template set
    allows us to render templates in a flexible manner across environments, and we'll
    be going over them in detail in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml),
    *Isomorphic Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: The `Store` field is a pointer to a `sessions.FilesystemStore` object. We will
    be using the `sessions` package from the Gorilla toolkit for session management.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `main` function in the `igweb.go` source file, we will declare a `env` variable,
    an object of the `common.Env` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We assign the DB and TemplateSet fields of the `env` object with a newly created
    `RedisDatastore` instance and a newly created `TemplateSet` instance, respectively
    (the assignments are shown in bold). For illustration purposes, we have omitted some
    code and we have shown a partial code listing here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the Gorilla Mux router for our server-side routing needs. Notice
    that we pass in a reference to the `env` object as an input argument (shown in
    bold) to the `registerRoutes` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We propagate the `env` object to our request handler functions by including
    a reference to the `env` object as an input argument to the route handler function
    that we register for a particular route, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: By calling the Gorilla Mux router's `Handle` method, we have registered the
    `/index` route, and we have associated the `IndexHandler` function from the `handlers`
    package as the function that will service this route. We have supplied the reference
    to the `env` object as the sole input argument to this function (shown in bold).
    At this point, we have successfully propagated the `RedisDatastore` and `TemplateSet`
    instances, and we have made them available to the `IndexHandler` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the source code of the `IndexHandler` function defined in the
    `handlers/index.go` source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the handler logic for the `handler` function is placed into a closure,
    and we have closed over the `env` variable. This allows us to satisfy the requirement
    that the handler function should return a `http.Handler`, and at the same time,
    we can provide access to the `env` object to the handler function.
  prefs: []
  type: TYPE_NORMAL
- en: The benefit of this approach, instead of using package-level global variables,
    is that we can explicitly see that this handler function requires the `env` object
    to properly function by examining the input arguments to the function (shown in
    bold).
  prefs: []
  type: TYPE_NORMAL
- en: 'We follow a similar dependency injection strategy on the client side as well.
    Here''s the declaration of the `Env` type on the client side, found in the `client/common/common.go`
    source file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `Env` type that we have declared on the client side is different from the
    one that we declared on the server side. This is understandable, since there's
    a different set of common functionality that we want to have access to on the
    client side. For example, there is no `RedisDatastore` that lives on the client
    side.
  prefs: []
  type: TYPE_NORMAL
- en: We have declared the `TemplateSet` field in the same manner that we did on the
    server side. Because the `*isokit.TemplateSet` type is isomorphic, it can exist
    on both the server side and the client side.
  prefs: []
  type: TYPE_NORMAL
- en: The `Router` field is a pointer to the client-side `isokit.Router` instance.
  prefs: []
  type: TYPE_NORMAL
- en: The `Window` field is the `Window` object, and the `Document` field is the `Document`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: The `PrimaryContent` field represents the `div` container that we will render
    page content to, on the client side. We will be covering the roles of these fields
    in more detail in [Chapter 4](eec79e85-e888-47e8-851e-d983d5aea55d.xhtml), *Isomorphic
    Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: The `Location` field is for the `Window` object's `Location` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `registerRoutes` function defined in the `client.go` source file,
    we use the `isokit.Router` to handle our client-side routing needs. We propagate
    the `env` object to the client-side handler function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Let's examine the source code of the `IndexHandler` function on the client side,
    defined in the `client/handlers/index.go` source file:</span>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The means by which we have provided access to the `env` object (shown in bold)
    to this handler function is identical to the way that we had done so on the server
    side. The handler logic for the handler function is placed into a closure, and
    we have closed over the `env` variable. This allows us to satisfy the requirement
    that the client-side handler function should return an `isokit.Handler`, and at
    the same time, we can provide the handler function access to the `env` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dependency injection technique that we have utilized here, was inspired
    by the technique illustrated in Alex Edwards'' blog post on organizing database
    access: [http://www.alexedwards.net/blog/organising-database-access](http://www.alexedwards.net/blog/organising-database-access).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we walked you through the process of installing the Isomorphic
    Go toolchain. We introduced you to the IGWEB project, the isomorphic web application
    that we will implement in this book. We also examined the project structure and
    code organization of the IGWEB codebase.
  prefs: []
  type: TYPE_NORMAL
- en: We showed you how to set up the datastore and load the sample dataset into a
    Redis instance. We demonstrated how to use `kick` to perform an *instant kickstart*
    to speed up web application development cycles. We also provided a roadmap for
    the implementation of features and the functionality for the IGWEB project, and
    included the respective chapters where they will be covered. Finally, we demonstrated
    the dependency injection technique to share common functionality throughout the
    web application, both on the server side and on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our tools in place, we need to establish a good understanding
    of using Go in the web browser. In [Chapter 3](0f18d7dd-b081-4090-8b9c-c7a392261b31.xhtml), *Go
    on the Front-End with GopherJS*, we will explore GopherJS in further detail, and
    learn how to perform common DOM operations using GopherJS.
  prefs: []
  type: TYPE_NORMAL
