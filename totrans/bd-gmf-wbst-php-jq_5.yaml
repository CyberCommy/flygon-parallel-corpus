- en: Chapter 5. Activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the heart of any gamified system is the activity. Who the user is and his/her
    motivations are important, but at the end of the day it all boils down to the
    activities that the system allows the user to take. In this chapter we discuss
    the activity. We look at the elements, progression loops, and engagement scenarios
    that our players can and will participate in.
  prefs: []
  type: TYPE_NORMAL
- en: The activity in a gamified system is merely a recipe of game Mechanics. These
    are the principles, rules, and constructs that govern a player's actions in a
    gaming scenario. They outline the player's movements through a system of rewards,
    feedback, and incentives. It is the game Mechanics that make the system enjoyable.
  prefs: []
  type: TYPE_NORMAL
- en: We must be clear, however, that game elements are not games, just as a soccer
    ball is not a game of soccer. It is, however, an element and a key mechanic of
    the game. Its very nature dictates what players can and cannot do in the game.
    If we were to replace a soccer ball with, for example, a baseball, the very fundamental
    nature of the game would change. Hence, Mechanics are the heart of a gamified
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Pyramid of game elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to Dr. Kevin Werbach, author of *For the Win: How Game Thinking Can
    Revolutionize Your Business*, game elements fall into one of the three categories,
    making up what he calls the **Pyramid of Game Elements** as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pyramid of game elements](graphics/8119OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The pyramid of game elements is a way of visually thinking about various game
    elements. **Dynamics** are about the big picture. They represent the progression
    through the system, narratives, and overall constraints that the system puts on
    players. The **Mechanics** of the system are the verbs of the system. They are
    elements that move the players along the progression loops. **Components** are
    the details. These are things that come to our mind when we think of game elements
    such as points, leaderboards, badges. Everything that makes up the gamified experience
    can be categorized in the pyramid of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Gamification toolbox – better than PBLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gamification critics are quick to point out the poor uses of game elements as
    an indication that gamification leaves a lot to be desired. In many cases they
    are correct. PBLs (Points, Badges, and Leaderboards) are quickly becoming the
    staple of a gamified application. Although they are excellent game elements, they
    may or may not make sense in a particular scenario. Excellent game elements will
    never make a poorly designed process fun. More importantly, we shouldn't hope
    that they would. Unfortunately, they are defining the gamification industry.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are myriad of tools (that is, game elements) in the **Gamification
    Toolbox** at our disposal, and only those that encourage the behaviors that we
    target should matter. It's about the quality of the elements versus the quantity
    that will determine the success of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of Game Dynamics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Social interactions**: Relationships generate a sense of team and belonging.
    For example, sharing achievements with friends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emotion**: Frustration and accomplishment are emotions that a gamified environment
    might induce. For example, presenting challenges that are slightly beyond the
    player''s skill level causes a sense of frustration. On the other hand, a player
    feels a sense of accomplishment after mastering a challenge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constraints**: At the heart of all games are rules that force the player
    to make tradeoffs, For example, a player now can access more assets in a game,
    but the time to address a challenge might be shorter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Progression**: A player''s development over time; for example, as a player
    gets better at the game she is given a title. Foursquare users, for example, progress
    to the status of mayor over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Narrative**: An ongoing storyline; for example, the player takes on a persona
    throughout the game, and a story develops around the players and other Mechanics
    of the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some examples of Game Mechanics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rewards**: Players are moved to take certain actions because of intrinsic/extrinsic
    rewards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feedback**: Players need information about how they are progressing in the
    system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Competition**: There is a clear winner and a loser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Challenges**: Tasks in the system that require some level of effort'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some of the more common Game Elements (that is, tools):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Leaderboards**: This tool specifies visual displays of player progression
    and achievement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Levels**: This tool specifies defined steps in player progression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Badges**: This tool specifies visual representations of achievements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Points**: This tool specifies numerical representations of game progression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quests**: This tool specifies predefined challenges with objectives and rewards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social Graphs**: This tool specifies a representation of a player''s social
    network within the game'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Teams**: This tool specifies defined groups of players working together for
    a common goal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Goods**: This tool specifies game assets with perceived or real-money
    value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the right mix of the game elements, like those mentioned in the preceding
    paragraphs, along with data analytics and social media, our goal is to create
    an engaging experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'What might the right mix for our e-learning application look like? Here are
    a few criterion we might consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Points**: We are giving points for target behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Badges**: We are making badges available for reaching certain predefined
    achievements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaderboard**: We present a list of top players (by point value) prominently
    on the home page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feedback**: We give the player his/her current score prominently on each
    screen/view of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Competition**: We present a strong use of competition, allowing players to
    critique and/or defend other players'' viewpoints'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VuPoint application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's turn our attention again to our application code. We will start with the
    user interface aspect of our application. This is the code that handles the user's
    interaction with the application. Since this is a web application, this code will
    run in a web browser. JavaScript has become the de facto language for writing
    code that runs in a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned previously, we need to have a few places to write code. In the
    previous chapter this was mainly in the database. Here we're turning our attention
    to the server (PHP) and client (jQuery).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go any further, let''s create a directory structure for the VuPoint
    application inside the root (`www`) folder of our Wamp Server installation. This
    is what you should have when you''re done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![jQuery](graphics/8119OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: jQuery is a popular open source JavaScript framework that allows us to search
    for (or query) items in browsers using **Document Object Model** (**DOM**) and
    interact with those items. Hence the name jQuery. One of the main advantages of
    jQuery is that it handles a lot of the different browser nuances for us, allowing
    us to focus only on what we want to do rather than how different browsers may
    handle our code. jQuery shields us from that.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a few options for installing jQuery in our application. We can download
    the entire library from [www.jquery.com/downloads](http://www.jquery.com/downloads).
    There is a compressed version that we should use in production environments and
    an uncompressed version for development and debugging purposes. The third option
    is to use a hosted version of the library from a **Content Delivery Network**
    (**CDN**). Here are a few locations you might consider using. It''s really a matter
    of preference and you would rather have a reliable Internet connection from your
    system. If you do not have an Internet connection, you will need to download a
    version of the code on your local machine. This is what we will do, but here are
    some common jQuery CDN sources:'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Microsoft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will download and install the library directly on our system as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![jQuery](graphics/8119OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once downloaded, simply save the `.js` file to the `scripts` directory where
    we will store all of our JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: We can test that jQuery is installed by creating and running a simple page.
    We will create a `.js` file to hold our HelloWorld JavaScript method. Then, we
    will create an `index.html` page in the root of the `Vupoint` folder and execute
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Vupoint.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This code verifies that jQuery is successfully installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Index.html
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output generated by the preceding code is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Index.html](graphics/8119OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know all is working well, we will turn our attention to building
    the framework for our e-learning application.
  prefs: []
  type: TYPE_NORMAL
- en: In most websites there is a default or index page that is presented to the user
    when no other page is specifically called. In our case we will build an `index.php`
    page, which will be in the `root` folder of our application. It will be the first
    page to be called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `index.php` page, however, will not present anything to the user. It will
    serve as more of a driver for our application. It will simply redirect to the
    other individual pages that are the actual user views. Initially we will check
    to see if the user has the `VuPointuser` cookie on their computer. If it is found,
    this means they have an account and can be taken directly to the main view page
    or to the login page. We will add this functionality after we have the account
    creation and login pages in place. Here is the code for our initial `index.php`
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Account Creation Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the actual page that the player will see as shown in the following screenshot.
    He/she gets redirected to it when no `VuPointUser` cookie is found.
  prefs: []
  type: TYPE_NORMAL
- en: '![Account Creation Page](graphics/8119OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code to create this page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the page itself, what actually happens when we click on the
    **Sign Up** button?
  prefs: []
  type: TYPE_NORMAL
- en: 'On the click of the **Sign Up** button we need to do a few things as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Validate the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the passwords that the players entered match.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the player has entered a valid e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add this new account to the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `VuPointUser` cookie to the player's browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the player in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take him/her to the main view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This seems like a lot of things to think about but we will develop and code
    them in a small modular way.
  prefs: []
  type: TYPE_NORMAL
- en: Validate the form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since this is client-side functionality, we will handle this with jQuery. Although
    there are plugins freely available to help us with this validation, we will write
    our own. We start by adding a form validation method to our `vupoint.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few methods we will need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Writing a new account to the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we turn our attention to write a php function that inserts the information
    from the form into our `VuPoint` database. This function accepts the username,
    password, and e-mail address from the form and inserts the player into the database.
    This function is coded as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The Login Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Login Page** is the complimentary page to the account creation page.
    The player will get this page to log into the main view of the site. It is as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Login Page](graphics/8119OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can validate what the user enters using jQuery and JavaScript, just as we
    did with the account creation page as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Main page view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we layout the main page. Once we have the layout structure in place, we
    are ready to fill each module (block) with the code to develop that functionality
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what we should have now compared to our previous sketch mockup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Main page view](graphics/8119OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is our original mockup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Main page view](graphics/8119OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we should have a good idea of what we are trying to develop and
    why.
  prefs: []
  type: TYPE_NORMAL
- en: We have developed the heart of our gamified system. We've outlined the activities
    that our players interact with. We have looked at who he/she is and what his/her
    motivations are. Our elements, progression loops, and the engagement scenarios
    are defined. From the myriad of game Mechanics that are available to us, we have
    narrowed it down to the principles, rules, and constructs that we think our players
    will find fun. In the next chapter we'll dig deeper into this idea of fun.
  prefs: []
  type: TYPE_NORMAL
