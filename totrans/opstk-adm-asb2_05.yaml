- en: Chapter 5. Snapshot Your Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the task of creating instance backups and/or
    snapshots using the native OpenStack capability built into the Compute service
    (Nova). When adopting a true cloud approach, the approach of scaling horizontally
    and disposable resources, you will find great use in leveraging snapshots versus
    traditional backups. Despite that it is good, the best practice is to understand
    both the capabilities and the proper use case for each. We will step through how
    to manually create backups or snapshots first and then transition to creating
    a playbook with roles to fully automate it on a tenant level. We will cover the
    following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining backups and snapshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually creating backups and snapshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring an instance backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding the playbook and roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The review of playbook and role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining backups and snapshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From an OpenStack perspective, there are distinct differences between a backup
    and snapshot of an instance. Those differences could influence the use of each
    of those functions. Keep in mind that with keeping with true cloud behavior, all
    cloud resources are meant to be disposable. You may ask what that statement really
    means. It simply means that any instances or volumes (resources) created to support
    your application functions should be able to be recreated in some sort of automated
    fashion. Instilling the *pets versus cattle* analogy. No longer are the days of
    attempting to bring a sick VM back to life.
  prefs: []
  type: TYPE_NORMAL
- en: Destroy the instance, recreate it, and off you go again. These principles remove
    the want for instance backups. With this said, there will be cases where you may
    want to have a backup of an instance. So, let's first examine the capability of
    taking an instance backup.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenStack Compute service (Nova) functionality of backing up an instance
    behaves just like any traditional backup process. A purpose of taking a backup
    of an instance would be to preserve the instances current state for later possible
    recovery. Just like any other back process; you can determine the type of backup
    and rotation schedule. Some possible `backup` type parameters can be **daily**
    or **weekly**. The rotation schedule would represent the number of backups to
    keep. A working example of the instance `backup` command via the Nova CLI would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In full transparency, the Nova `backup` functionality is not in a fully operational
    state as of the time this book was written. The `backup` command at this point
    in time is just a hook put into Nova to set up for future OpenStack service(s)
    focused solely on data protection. The OpenStack Data Protection service, code
    name **Raksha**, will be responsible for helping automate data protection tasks
    such as backups. Raksha is still under development, and it will appear in an upcoming
    OpenStack release. You can read more about Raksha at [https://wiki.openstack.org/wiki/Raksha](https://wiki.openstack.org/wiki/Raksha).
  prefs: []
  type: TYPE_NORMAL
- en: Now we can move on to talking about snapshots. The Nova functionality of taking
    a snapshot of an instance is similar to a backup, but instead of keeping the backup
    for recovery purposes, it is stored by the image service (Glance) as an image
    template. That image template can then be used to create additional instances
    just like the instance the original snapshot was taken from. It is like making
    a rubber stamp copy of the instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please keep in mind that taking a traditional snapshot of an instance will temporarily
    pause the instance until the process completes. If you are seeking to take a snapshot
    without pausing the instance, please review the *Live Snapshots* capability details
    found at [http://docs.openstack.org/openstack-ops/content/snapshots.html](http://docs.openstack.org/openstack-ops/content/snapshots.html).
  prefs: []
  type: TYPE_NORMAL
- en: I often like the snapshot process to making a golden or gold image of a server
    that would be used to build additional servers. The steps taken would be exactly
    the same. Create the instance with the required OS, install necessary software
    packages, make suggested OS and application security tweaks, certify the applications
    functionality, and then create the snapshot. Having the snapshot capability at
    your fingertips without needing any third-party software is indeed yet another
    powerful tool OpenStack offers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A working example of the instance snapshot command via the OpenStackClient
    CLI would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully, this helped provide clear definitions around the differences between
    instance backups and snapshots. Let us now examine the steps required to manually
    create them using the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For simplicity purposes, we will demonstrate the manual commands using the OpenStack
    CLI only.
  prefs: []
  type: TYPE_NORMAL
- en: Manually creating backups and snapshots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As stated earlier, the Compute service (Nova) handles the task of creating instance
    backups and snapshots. Just like with every OpenStack service, you must authenticate
    first either by sourcing the OpenRC file discussed in [Chapter 1](ch01.html "Chapter 1. Introduction
    to OpenStack"), *Introduction to OpenStack* or by passing authentication parameters
    in-line with the command. The two tasks individually require different parameter
    values to be provided in order to successfully execute the command. See the examples
    given later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an instance `backup` using the OpenRC file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an instance `backup` passing authentication parameters in-line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once the command is executed, no output is written back to the screen. You can
    then execute the `openstack image show` command to confirm the update.
  prefs: []
  type: TYPE_NORMAL
- en: 'A real life working example with an OpenRC file could look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `openstack image list` command would then be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manually creating backups and snapshots](graphics/image_05_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the earlier-mentioned command, you can supply the instance ID or name.
    The example just shown uses the instance name. After sourcing the OpenRC file,
    the `openstack server list` command was executed in order to take note of the
    instance ID or name that you wish to backup. Once you have that information, the
    `nova backup` command can then be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The image service, code name Glance, is responsible for keeping inventory of
    backups, snapshots, and any images manually uploaded by the Cloud operator. To
    view the available inventory, you will have to issue Glance CLI commands and/or
    view them via the **Horizon** dashboard under the **Images** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an instance snapshot using an OpenRC file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an instance snapshot passing authentication parameters in-line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once the command is executed, no output is written back to the screen. You can
    then execute the `openstack image list` command to confirm the update.
  prefs: []
  type: TYPE_NORMAL
- en: 'A real life working example with an OpenRC file could look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `openstack image list` command would then be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manually creating backups and snapshots](graphics/image_05_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have covered how to create the instance backups and snapshots, it
    only felt right to demonstrate how you can then use them. Particularly, I would
    like to focus on using the instance backups, since I noticed a severe lack of
    documentation around this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring an instance backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the instance `backup` functionality is not 100% active from a scheduled
    job/automation perspective, you can still use instance backups to restore an instance
    back to a particular point in time. In order to do this, you would use the `nova
    rebuild` command within the Nova CLI. This command will signal the instance to
    shut down, re-image the instance using the `backup` file referenced and then reboot
    the instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'A working example of the `nova rebuild` command via the Nova CLI would be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `nova rebuild` command also has quite a few optional arguments that can
    be passed with the command. Those optional arguments can do things such as reset
    the admin password or change the name of the instance, for example. I would suggest
    taking a look at the OpenStack CLI documentation, which can be found at [http://docs.openstack.org/cli-reference/content/novaclient_commands.html#novaclient_subcommand_rebuild](http://docs.openstack.org/cli-reference/content/novaclient_commands.html#novaclient_subcommand_rebuild).
  prefs: []
  type: TYPE_NORMAL
- en: Automation considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating this task was pretty straightforward and did not require any new
    framework decisions. All the other automation decisions we reviewed were previously
    carried over.
  prefs: []
  type: TYPE_NORMAL
- en: There was one area worth highlighting that you may too face when automating
    OpenStack tasks using the CLI. The default output of the CLI is **pretty-printed**
    (using the Python **prettytable** module) of which at times is not so pretty when
    you want to sort through the output. Some CLI commands allow specific formatting,
    but in the event the command does not allow it, you have other options. This is
    where the `awk` command becomes your very close ally again. In the next section,
    you will note the specific use of the `awk` command to filter out the values we
    need for the next task within the role.
  prefs: []
  type: TYPE_NORMAL
- en: It feels like we are ready to proceed now with creating our next playbook and
    role.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the playbooks and roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The playbook and role we will now create will allow you to take a snapshot of
    all instances within a single tenant at one time. This distinct task was chosen
    to try to keep the role simple and not to overcomplicate the tasks. You could
    very well also create a role to snapshot or backup all instances in all tenants
    with the removal of just one parameter. Pretty awesome, right? Well, send your
    thank you cards to Ansible for that.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of this chapter, we reviewed the process of how to take instance
    backups and snapshots. It was a simple two-step process. For the purposes of automating
    this task, we have to add an additional step to the process. That step would be
    to get the tenant ID for the tenant we plan to take the snapshot(s) from. So in
    the big picture, there would be three steps. *Step 1* is to record the tenant
    ID in which you wish to take instance snapshot(s) for. *Step 2* is to now list
    all instance IDs from the tenant. Then, finally, *Step 3* is to actually take
    the instance snapshot(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are only creating a role in this example, we can start by the `main.yml`
    file within the role directory named `create-snapshot/tasks`. The beginning contents
    of this file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The first step of pulling the tenant ID is straightforward with the use of the
    `awk` command and pipe ( `|` ) symbol. This approach is something you will see
    in a lot of the OpenStack documentation. It allows you to take the output of one
    command and filter out the parts you want to keep. First, we will execute the
    project list command, that output will then be used with a filter, the filter
    will search for the tenant name provided via the variable named `tenantname`,
    and finally, output the second column value from the original `project list` command.
    That final output will then be registered with the variable named `tenantid`.
    The `tenantname` variable is defined the same way as in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the `shell` module is used here because we are executing commands
    that require shell-specific operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task will now list out all instance IDs from the tenant. The code
    to accomplish this looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This task is very similar to the first one, except the fact that we are using
    the OpenStackClient CLI instead to list the instances and filtering out just IDs
    removing all leading or trailing characters. I found that the `openstack server
    list` command when using Ansible was very specific about how the instance ID/name
    had to be provided. In order to accomplish this, I decided to use one of the `awk`
    command's built-in variables named `NR`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `NR` variable (number of records) within `awk` is intended to supply you
    with the number of records or the line number of the content being filtered. In
    turn, the `NR` variable can be used to focus examination on certain lines as well.
    Here, we use the variable to skip the first three lines of the CLI output. This
    example shows what the normal output would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the playbooks and roles](graphics/image_05_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, here is what the output looks like when adding the `awk` command, `awk
    ''NR > 3 { print $2 }''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the playbooks and roles](graphics/image_05_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, now that we have our list of instances, we can conclude with the last
    task of taking the snapshot(s). The code to do this would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Just as in the previous chapter, defining the `{{item}}` parameter value with
    the module allows us to loop through multiple packages listed here inside the
    `with_items` statement. Also, remember that getting the output after registering
    values into a variable within Ansible requires you to query the `stdout` or `stdout_lines`
    section of the JSON data structure. We then repurposed the tenant name and instance
    ID to name the snapshot for easy future reference. The snapshot name itself can
    be anything you desire, I just felt this naming convention made the most sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last two lines in the preceding code, `register` and `failed_when`, had
    to be added due to the output of the `openstack server image create` command.
    If you wanted to provide an output to confirm the successful execution of the
    task, you can add the `openstack image list` command as an additional task in
    your role and either have the task output printed to the screen or saved in a
    file. An example of printing the output to the screen would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You have now completed your third OpenStack administration role. To support
    this role, we now need to create the variable file that will go along with it.
    The variable file named `main.yml` will be located in the `create-snapshot/vars`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal everyday use.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this role, there was the only variable that was needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This variable is intended to be a single value of one of the tenant names for
    which the instance snapshot(s) will be taken.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our variable file is created, we can move on to creating the master
    playbook file. The file will be named `snapshot-tenant.yml` and saved to the `root`
    directory of the `playbook` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The playbook and role names can be anything you choose. Specific names have
    been provided here in order to allow you to easily follow along and reference
    the completed code found in the GitHub repository. The only warning is whatever
    you decide to name the roles must remain uniform when referenced from within the
    playbook(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the `snapshot-tenant.yml` file would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The summary of this file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: All that is left is to populate our host `inventory` file and the global `variable`
    file. Since we already created these in the previous chapter, there is no need
    to repeat this process. The values defined earlier would remain the same. Here
    is a quick recap of how those files are configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `hosts` file in the `root` directory of the playbook directory is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A global variable file inside the `group_vars/` directory is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Great job in completing your third administration playbook and role! As always,
    we will finish up the chapter with a quick review of the playbook and role just
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing playbooks and roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s jump right into examining the role we created, named `create-snapshot`.
    The completed role and file, named `main.yml`, located in the `create-snapshot/tasks`
    directory, looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding variable file, named `main.yml`, located in the `create-snapshot/vars`
    directory, for this role will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the master playbook file, named `snapshot-tenant.yml`, located in the
    `root` directory of the playbook directory, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Following this we created the `hosts` file, which also is located in the `root`
    directory of the `playbook` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, creating the global variable file, named `util_container`, and saving
    it to the `group_vars/` directory of the playbook would complete the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The complete set of code can again be found in the GitHub repository at [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2).
  prefs: []
  type: TYPE_NORMAL
- en: 'We cannot finish up this chapter without first testing out our work. Assuming
    that you have cloned the preceding GitHub repository, the command to test out
    the playbook from the Deployment node would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you get started creating playbooks and roles with Ansible, you will find
    that you are able to reuse a lot of code for many different purposes. In this
    chapter, we were able to create another role very similar to the previous chapter,
    but include a totally different task very quickly and easily. Always remember
    to design your roles to be the base generic task as much as possible. I sincerely
    cannot emphasize that tip enough. It could be the difference of taking minutes/hours
    versus days to automate something.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we defined and described the difference between instance backups
    and snapshots. We explained the process, how to manually create backups and snapshots
    using the OpenStack CLI. We also reviewed an example of how to use an instance
    `backup`. Then, we finally developed the Ansible playbook and role to automate
    creating snapshot(s) of all instances within a specified tenant. I am very excited
    to move onto the next chapter where we will examine the process of migrating instances
    between Compute nodes. This is surely an administration task you will face while
    managing your OpenStack cloud. It is rather a controversial topic as well because
    many do not either know that this functionality exists within OpenStack or do
    not believe that this function works well. In the next chapter, we will try to
    clear up the unwarranted confusion by demonstrating how to manually migrate instance(s)
    and then take it a step further by automating it. For those of us who are cloud
    operators, the next chapter will be worth its value in gold. You do not want to
    skip the next chapter; it will certainly be worth it. [Chapter 6](ch06.html "Chapter 6. Migrating
    Instances"), *Migrating Instances*, here we come!
  prefs: []
  type: TYPE_NORMAL
