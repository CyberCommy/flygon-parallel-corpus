- en: '*Chapter 9*: Basics of Machine Learning'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **machine learning** (**ML**) field is growing bigger every day, with tons
    of research being done, and various types of smart/intelligent applications being
    built with ML algorithms. The field is gaining more interest and more people are
    fascinated to know how it works and how to make use of it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will try to get a basic understanding of ML why and how
    it works, and also see various forms of its application to real-life situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll look at the following topics to understand the basics
    of ML:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to machine learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why machine learning works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning problems/tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning in JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications of machine learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources to understand machine learning in depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces ML in a simple form, hence it requires no prior knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to machine learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will introduce ML by using a simple analogy that might serve
    as common ground to establish our explanation. We will also see why and how ML
    works.
  prefs: []
  type: TYPE_NORMAL
- en: We will start the section by using an information transfer system as a simple
    analogy for ML.
  prefs: []
  type: TYPE_NORMAL
- en: A simple analogy of a machine learning system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I remember a time I was in a *Twitter* Space involving a discussion about ML
    and some other cool topics. I was told to give a brief introduction to ML for
    those who were interested but didn't fully get the gist.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of people in this Twitter Space were software engineers with no
    previous knowledge of math, statistics, or any topic related to ML, and I came
    across instances where people failed to understand the terminology of the topic
    due to the addition of some technical terms.
  prefs: []
  type: TYPE_NORMAL
- en: This section aims to explain ML by avoiding too many technical terms and finding
    a common ground through which ML can be explained.
  prefs: []
  type: TYPE_NORMAL
- en: Using an information transfer system, such as a phone, information is taken
    from a source then encoded into a digital signal and transferred via a transfer
    channel to the receiver, which decodes the signal into the source input, which
    can be a voice, an image, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the full concept of information transfer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Information transfer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Information transfer
  prefs: []
  type: TYPE_NORMAL
- en: The preceding definition is for an information transfer system whose sender
    and receiver are at different endpoints, but for systems such as a megaphone,
    the input voice is encoded into a digital signal, which is then decoded and amplified
    at the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows a diagram of a megaphone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Simple information transfer system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Simple information transfer system
  prefs: []
  type: TYPE_NORMAL
- en: Using the preceding paragraph, we can establish an overview of ML. In the preceding
    paragraph, we mentioned some specific keywords, which are encoded and decoded.
  prefs: []
  type: TYPE_NORMAL
- en: In an information transfer system, a large body of information – either voice
    or image – is encoded or compressed into a digital signal at the source end and
    then decoded back to the source information at the output end.
  prefs: []
  type: TYPE_NORMAL
- en: The same thing described in the preceding paragraph goes for a ML system – a
    large body of information is encoded or compressed into *Forms of representation*
    (mind the highlighted words) and then decoded into conceptual or intelligent or
    decisional output.
  prefs: []
  type: TYPE_NORMAL
- en: Note the terms *digital signal* and *form of representation* in the two preceding
    paragraphs. In an information transfer system, there is some information theory
    that is responsible for converting any input no matter the form (any type of image,
    any type of sound/voice) into a digital signal.
  prefs: []
  type: TYPE_NORMAL
- en: But in ML, we have some forms of theories and algorithms. These algorithms do
    not just process input information and give an output. First, a sample of information
    is obtained. This information is processed and used to build a form of representation
    that summarizes the whole information and maps it to a decision output.
  prefs: []
  type: TYPE_NORMAL
- en: This form of representation is used to build the final ML system, which takes
    an input source, compares it to the form of representation, and outputs a decoded
    decision (intelligent output) that matches the comparison between the source input
    and the form of representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the conceptual illustration of the two preceding
    paragraphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Conceptual illustration of machine learning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Conceptual illustration of machine learning
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some key things about ML to note from the preceding paragraphs, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we generate a form of representation from a large set of information.
    Also, note that the process of generating a form of representation from a set
    of information is called **Training**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The form of representation generated is then used to create the final ML system,
    and this process is called **Inference**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next sub-section, we will see how this form of representation is generated,
    the whole idea behind generating a form of representation from a large set of
    information, and then using this representation to build the final ML system.
  prefs: []
  type: TYPE_NORMAL
- en: Why machine learning works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During our illustration of training the ML model, we talked about generating
    a form of representation that is used to build our ML system. One thing to note
    is that this information or the data used to generate the form of representation
    is the data representation of our future source of information. Why do we need
    the data representation of our future source of information? In this sub-section,
    we will look into this and see how it helps in creating ML models.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume we are told to carry out research about product interest in a particular
    community. Imagine this community consists of a large number of people and we
    are only able to reach a few people – let's say 50% of the community population.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is that, from the information obtained from 50% of the population,
    we should be able to generalize for the remaining 50% of the population. We assume
    this because a set of people from the same community or population are assumed
    to share quite a number of the same attributes and beliefs. Therefore, if we use
    information obtained from 50% of the individuals of this population to train our
    model, our model should be able to distinguish any information that comes from
    any individual belonging to the same population.
  prefs: []
  type: TYPE_NORMAL
- en: In the worst-case scenario, there might be some outliers in the population –
    folks who don't have the same beliefs as the rest of the people, or the individual
    information we obtained from 50% of the population might not capture the attributes
    of the other 50% of the population. In this case, the model will fail if this
    information is passed into the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding paragraph shows why in ML by default, the more data there is,
    the better the ML model. The following diagram shows a sample distribution (our
    50%-of-individuals information) and the population itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Population distribution'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – Population distribution
  prefs: []
  type: TYPE_NORMAL
- en: From *Figure 9.3*, when we say we are training in ML, we mean the ML algorithm
    is learning the parameters that control and generalize the population from our
    sampled population (this parameter is the form of representation in this case).
    We have two parameters, beta and alpha, and the goal of our training is for the
    model to obtain the best value from these parameters that control the population.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a more concrete example: we want to create an app that assigns a
    particular product to dogs alone. But as you know, we have different breeds of
    dogs and dogs also have some facial features that are similar to those of cats.'
  prefs: []
  type: TYPE_NORMAL
- en: To create the ML model for this app, we sample a number of dog images, but this
    sample does not capture all breeds of dogs. The goal of an ML model is to capture
    the unique attributes/parameters of dogs alone from the data given to it (these
    unique attributes/parameters are the forms of representation).
  prefs: []
  type: TYPE_NORMAL
- en: 'If the model is good, it should be able to tell whether an input image is a
    dog or not. Then how do we measure how good the model is? The following methods
    are used to achieve that:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective functions**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evaluation metrics**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sub-sections, we will see how these methods work.
  prefs: []
  type: TYPE_NORMAL
- en: Objective functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've seen how to sample data from a large population and use that to train
    our model and hope that the model generalizes well. During the course of training,
    we want to measure how close our model is to our goals, and to do that we create
    an objective function. Some call this function by a different name, such as the
    loss function or error rate. The lower the score returned by this function, the
    better our model is.
  prefs: []
  type: TYPE_NORMAL
- en: To classify whether an image is a dog or not, we have our dataset containing
    images of dogs and cats, for example. This dataset also contains labels. Each
    image in the dataset has a label, which informs us whether the image in the dataset
    is a dog image or a cat image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows an example of what the dataset will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Dataset sample'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Dataset sample
  prefs: []
  type: TYPE_NORMAL
- en: During training, each of the images in the data, as shown in *Figure 9.5*, is
    passed as input into the model, and the model predicts the label. The label predicted
    by the model is compared with the labels shown in *Figure 9.4* by the objective
    function. We keep training the model until the model predicts the true label of
    each image in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The model might be able to classify all the images in the dataset properly based
    on the objective function, but that does not mean the model generalizes well,
    that is, the model might be able to classify some dog images correctly during
    training, but when given images are not available in the dataset, as shown in
    *Figure 9.4*, the model misclassifies the images. This leads us to the second
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've trained our model and it is giving us a very low loss score, which is
    good, but we will need to be sure of whether the model has captured the attributes
    for the whole population or just for the sampled population of the dataset used
    for training. What am I saying? It is possible for the model to perform well while
    training but actually be bad if we are to test it on other images containing dogs
    and cats.
  prefs: []
  type: TYPE_NORMAL
- en: To check whether the model is good and has captured attributes unique to each
    population of dogs and cats, we test the model on a set of datasets, which is
    also a sample from the same population as the one used for training. If the model
    is able to give us a better score, then the model is good; if the score is bad
    compared to that from the objective function, then the model is bad. This process
    is called the evaluation process and we use different metrics to measure the performance
    of the model. The metrics are called **Evaluation metrics**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the pipeline of a ML model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Machine learning pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – Machine learning pipeline
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed ML-based information transfer. We saw how an ML
    model works and the basic workflow of an ML model. In the next section, we will
    talk about the grouping of ML tasks into different categories.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning problems/tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ML problems or tasks such as classification problems can be categorized into
    different groups based on how the model learns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will look into two of the most popular categories of ML
    problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Supervised learning**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unsupervised learning**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will look into supervised learning.
  prefs: []
  type: TYPE_NORMAL
- en: Supervised learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this category, the model learns under supervision. By supervision, we mean
    the model knows whether it is doing well based on the provided label. While training,
    we provide the model with a dataset containing a set of labels, which are used
    to correct and improve the model. With this, we can measure how well the model
    performs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following ML problems/tasks belong to this category:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Classification problems**: In this type of problem, the model is made to
    classify an input to a set of discrete categories, such as classifying whether
    the image is a dog or a cat.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression problems**: This involves the model mapping the input to a set
    of continuous values. For example, creating a model to predict the price of a
    house given some features of the house.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows what classification is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Classification problem'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Classification problem
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the illustration of a regression problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Regression problem'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Regression problem
  prefs: []
  type: TYPE_NORMAL
- en: In summary, a supervised learning algorithm is used for problems in which there
    is a label provided with the dataset, where the label is used to measure the performance
    of the model. Sometimes we have data, but we don't have a ground truth that is
    a label to scale how the model performs. This leads us to unsupervised learning.
  prefs: []
  type: TYPE_NORMAL
- en: Unsupervised learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we don't have labels, but we have our data, what can we do? The best thing
    to do is to draw insight from the data.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the population example at the beginning of the section? Let's say we
    sample some set of entities from a population but have no prior knowledge of their
    behavior. The best thing is to study them for some time so we can understand their
    likes and dislikes and find out what makes them unique.
  prefs: []
  type: TYPE_NORMAL
- en: Through this observation, we can group the population into categories based
    on their beliefs, occupation, food tastes, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following ML problems belong to the unsupervised learning category:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clustering problems**: Clustering problems involve revealing some hidden
    attribute in a dataset (our sampled population) and then grouping each entity
    in the population based on this attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association problems**: This involves the discovery association rule in a
    population. It involves knowing whether people that engage in one activity also
    engage in another activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main gist of this is that we want to obtain a hidden insight from this
    dataset as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Unsupervised learning (clustering example)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_09_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Unsupervised learning (clustering example)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked into some categories of ML problems, and we also
    saw a scenario in which each ML problem category is important and the kind of
    tasks they are meant to be used for.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will talk about making ML more accessible.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web is the most accessible platform and JavaScript is the language used
    across the web, hence ML in JavaScript gives us more control and accessibility.
    In the *Why you need Danfo.js* section of [*Chapter 3*](B17076_03_ePub_RK.xhtml#_idTextAnchor066),
    *Getting Started with Danfo.js*, we talked about the importance of bringing ML
    the web. We also talked about how browsers' computational power is increasing
    and how this is a benefit to JavaScript for ML.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I will list some open source tools for ML tasks in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TensorFlow.js** (**tfjs**) ([https://github.com/tensorflow/tfjs](https://github.com/tensorflow/tfjs)):
    A WebGL accelerated JavaScript library for training and deploying ML models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**datacook** ([https://github.com/imgcook/datacook](https://github.com/imgcook/datacook)):
    A JavaScript framework for feature engineering on datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nlp.js** ([https://github.com/axa-group/nlp.js](https://github.com/axa-group/nlp.js)):
    A JavaScript framework for NLP tasks such as sentiment analysis, automatic language
    identity, entity extraction, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural** ([https://github.com/NaturalNode/natural](https://github.com/NaturalNode/natural)):
    Also, NLP, it covers almost all the necessary algorithms for NLP tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipcook** ([https://github.com/alibaba/pipcook](https://github.com/alibaba/pipcook)):
    A machine learning platform for web developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jimp** ([https://github.com/oliver-moran/jimp](https://github.com/oliver-moran/jimp)):
    An image processing library written entirely in JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Brain.js** ([https://github.com/BrainJS/brain.js](https://github.com/BrainJS/brain.js)):
    A GPU accelerated neural network in JavaScript for the browser and Node.js.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding tools are the most popular and have recent updates. By using these
    tools, you can integrate ML into your next web app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look into some applications of ML in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Applications of machine learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ML is transforming software development and is also making things more *automatic*,
    *self-driving*, and *self-operating*. In this section, we will look into some
    examples of ML applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are examples of machine learning applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Machine translation**: ML enables us to build software that easily translates
    a language to another language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Games**: With some advanced ML algorithms, some software is becoming better
    at playing more complicated games such as the game Go and beating world champions
    at what they do best. For example, here''s a video about **AlphaGo**: [https://www.youtube.com/watch?v=WXuK6gekU1Y](https://www.youtube.com/watch?v=WXuK6gekU1Y).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vision**: Machines are getting better at seeing and providing meaning for
    what they see.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a) **Self-driving cars**: ML is helping to create fully self-driving cars.'
  prefs: []
  type: TYPE_NORMAL
- en: 'b) **Tesla demonstration of a self-driving car**: [https://www.youtube.com/watch?v=VG68SKoG7vE](https://www.youtube.com/watch?v=VG68SKoG7vE)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommendation engines**: ML algorithms are improving recommendation engines
    and hooking customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How *Netflix* is using ML for personalized recommendations: [https://netflixtechblog.com/artwork-personalization-c589f074ad76](https://netflixtechblog.com/artwork-personalization-c589f074ad76)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Art**: ML is used to generate artworks, new stories, new paintings, and new
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a) Here is a website that generates images of people that never existed: [https://thispersondoesnotexist.com/](https://thispersondoesnotexist.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'b) A generated art gallery: [https://www.artaigallery.com/](https://www.artaigallery.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'c) Architectural design with ML: [https://span-arch.org/](https://span-arch.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw a few examples of how ML is being used for different
    purposes. In the next section, we will provide some materials to better understand
    ML.
  prefs: []
  type: TYPE_NORMAL
- en: Resources to understand machine learning in depth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will provide resources to better understand ML in depth
    and get better at creating software making use of ML algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are resources that can be used to understand ML:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fastai** ([https://www.fast.ai/](https://www.fast.ai/)): This community provides
    courses, frameworks, and books for ML practitioners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cs231n** ([http://cs231n.stanford.edu/](http://cs231n.stanford.edu/)): This
    course gives the fundamentals of **deep learning** and introduces you to computer
    vision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hugging Face**: Hugging Face provides the best framework for **natural language
    processing** and different transformer models. It also has a course ([https://huggingface.co/course/chapter1](https://huggingface.co/course/chapter1))
    that provides a full detail of transformer models and deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Andrew Ng course**: A ML course on *YouTube* that also provides full ML details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are tons of available materials to learn about ML online. Just follow
    one path and follow it to the end and avoid jumping from one lecture to another.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into ML using the concept of information transfer.
    We then looked into how and why it works. We also talked about the idea of sampling
    from a population to understand the population.
  prefs: []
  type: TYPE_NORMAL
- en: We talked about different categories of ML problems and also discussed some
    tools needed for ML for the web platform, and we also showed some examples of
    real-world applications of ML.
  prefs: []
  type: TYPE_NORMAL
- en: The intention of this chapter was to get the whole idea of ML to aid understanding
    during personal learning.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce **TensorFlow.js**. TensorFlow.js is useful
    when integrating ML into your web apps.
  prefs: []
  type: TYPE_NORMAL
