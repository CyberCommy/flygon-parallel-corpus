- en: Chapter 3. Over Viewing the Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before delving into task-oriented chapters, such as searching and the like,
    it's appropriate to have a look at the general organization of phpMyAdmin's interface.
    We will also see configuration parameters and settings that influence the interface
    as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Over viewing panels and windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The phpMyAdmin interface is composed of various panels and windows, each one
    having a specific function. We will first provide a quick overview of each panel,
    and then take a detailed look later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Login panels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The login panel that appears depends on the authentication type chosen. For
    the `http` type, it will take the form of our browser's HTTP authentication pop-up
    screen. For the `cookie` type, the phpMyAdmin-specific login panel will be displayed
    (covered in [Chapter 2)](ch02.html "Chapter 2. Configuring Authentication and
    Security"). For the external authentication `(signon)`, the login panel is handled
    by the external application itself. By default, a **Server** choice dialog and
    a **Language** selector are present on this panel.
  prefs: []
  type: TYPE_NORMAL
- en: However, if we are using the `config` authentication type, no login panel is
    displayed, and the first displayed interface contains the navigation and the main
    panels.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation and main panels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These panels go together and are displayed during most of our working session
    with phpMyAdmin. The **navigation panel** is our guide through the databases and
    tables. The **main panel** is the working area where the data is managed and results
    appear. Its exact layout depends on the choices made from the navigation panel
    and the sequence of operations performed. For the majority of languages (which
    are written from left to right) the navigation panel is located on the left side
    and the main panel is on the right, but for right-to-left languages such as Hebrew,
    these panels are reversed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation and main panels](img/7782_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Home page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main panel can take the form of the home page. The home page will then contain
    various links related to MySQL operations or phpMyAdmin information, a **Language**
    selector, and possibly the **Theme / Style** selector.
  prefs: []
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the main panel, we can see the `Database` view—where we can take various
    actions about a specific database, or the `Table` view—where we can access many
    functions to manage a table. There is also a `Server` view, useful for both system
    administrator and non-administrator users. All these views have a top menu, which
    takes the form of tabs that lead to different pages used to present information
    regrouped by common functions (table structure, privileges, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Query window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a distinct window that is usually opened from the navigation panel—and
    sometimes from the main panel when editing an SQL query. Its main purpose is to
    facilitate work on queries and display the results on the main panel.
  prefs: []
  type: TYPE_NORMAL
- en: Starting page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we start phpMyAdmin, we will see one of the following panels (depending
    on the authentication type specified in `config.inc.php`, and on whether it has
    more than one server defined in it):'
  prefs: []
  type: TYPE_NORMAL
- en: One of the login panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The navigation and main panels with the home page displayed in the main panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing general settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes settings that have an impact on many panels. These settings
    modify the appearance of titles in windows, of information icons, and how the
    list of tables is sorted. The whole visual style of all pages is controlled by
    the theme system, which is covered in this section as well. This section also
    deals with how to restrict the list of databases seen by users.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring window title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the navigation and main panels are displayed, the window''s title changes
    to reflect which MySQL server, database, and table are active. These directives
    control the following amount of information to be displayed: `$cfg[''TitleDefault''],
    $cfg[''TitleServer''], $cfg[''TitleDatabase'']`, and `$cfg[''TitleTable'']`.'
  prefs: []
  type: TYPE_NORMAL
- en: If no server is selected, `$cfg['TitleDefault']` controls the title. When a
    server is selected (but no database), `$cfg['TitleServer']` controls what is displayed
    in the title bar. Then if a database is selected, `$cfg['TitleDatabase']` enters
    into play. Finally, `$cfg['TitleTable']` is effective if a table is selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'These directives contain format strings that control which piece of information
    is shown. For example, here is the default value of one of these directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The possible format strings and their meaning are described in `Documentation.html`,
    FAQ 6.27.
  prefs: []
  type: TYPE_NORMAL
- en: Natural sort order for database and table names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, computers sort items in lexical order, which gives the following results
    for a list of tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'phpMyAdmin implements **natural sort order** by default, as specified by `$cfg[''NaturalOrder'']`
    being `TRUE`. Thus the database and table lists in navigation and main panels
    are sorted as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating site-specific header and footer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some users may want to display a company logo, a link to their company's helpdesk,
    or other information on the `phpMyAdmin` interface. In the main `phpMyAdmin` directory,
    for this purpose, we can create two scripts`—config.header.inc.php` and `config.footer.inc.php`.
    We can put our own PHP or XHTML code in these scripts, and it will appear either
    at the beginning (for header) or at the end (for footer) of the `cookie` login
    and the main panel pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, creating a `config.footer.inc.php` containing these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using such a sentence in the footer would produce the intended message on all
    pages as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating site-specific header and footer](img/7782_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A theme system is available in phpMyAdmin. The color parameters and the various
    icons are located in a directory structure under the `themes` sub-directory. For
    each available theme, there is a sub-directory named after the theme. It contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`layout.inc.php` for the theme parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`css` directory with the various CSS scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`img` directory containing any icons or other imagery (for example, logos)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen.png`, a screenshot of this theme'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The downloaded kit contains two themes but there are more available at [http://phpmyadmin.net/home_page/themes.php](http://phpmyadmin.net/home_page/themes.php).
    Installing a new theme is just a matter of downloading the corresponding `.zip`
    file and extracting it into the `themes` sub-directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case someone would like to build a custom theme that contains JavaScript
    code, please note that all phpMyAdmin 3.4 pages include the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring themes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `config.inc.php`, the `$cfg['ThemePath']` parameter contains`'./themes'`
    by default, indicating which sub-directory the required structure is located in.
    This could be changed to point to another directory where your company's specific
    phpMyAdmin themes are located.
  prefs: []
  type: TYPE_NORMAL
- en: The default chosen theme is specified in `$cfg['ThemeDefault']`, and is set
    to`'pmahomme'`. If no theme selection is available for users, this theme will
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting themes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the home page, we can offer a theme selector to users. Setting `$cfg[''ThemeManager'']`
    to `TRUE` (the default) shows the selector as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting themes](img/7782_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To help choose a suitable theme, the **Theme / Style** link displays a panel
    containing screenshots of the available themes and a **Get more themes** link.
    We can then click on **take it** under the theme we want. A reference to the chosen
    theme is stored in a cookie and, by default, is applied to all servers we connect
    to.
  prefs: []
  type: TYPE_NORMAL
- en: To make phpMyAdmin remember one theme per MySQL server, we set `$cfg['ThemePerServer']`
    to `TRUE`.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **Language** selector appears on the login panel (if any) and on the home
    page. The default behavior of phpMyAdmin is to use the language defined in our
    browser's preferences, if there is a corresponding language file for this version.
  prefs: []
  type: TYPE_NORMAL
- en: The default language used, in case the program cannot detect one, is defined
    in `config.inc.php` in the `$cfg['DefaultLang']` parameter with`'en'` (English).
    This value can be changed. The possible values for language names are defined
    in the `libraries/select_lang.lib.php` script in the `PMA_langDetails()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Even if the default language is defined, each user (especially on a multi-user
    installation) can choose his/her preferred language from the selector. The user's
    choice will be remembered in a cookie whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also force a single language by setting the `$cfg[''Lang'']` parameter
    with a value, such as`''fr''` (French). Another parameter, `$cfg[''FilterLanguages'']`,
    is available. Suppose we want to shorten the list of available languages to **English**
    and **Français—French**, as those are the ones used exclusively by the users of
    this phpMyAdmin''s instance. This is accomplished by building a regular expression
    indicating which languages we want to display based on the ISO 639 codes of these
    languages. To continue with our example, we would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this expression, the caret (^) means "starting with" and the (|) means "or".
    The expression indicates that we are restricting the list to languages whose corresponding
    ISO codes start with `fr` or `en`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, this parameter is empty, meaning that no filter is applied to the
    list of available languages.
  prefs: []
  type: TYPE_NORMAL
- en: Slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On some pages, you will see a small plus sign followed by a controlling label—either
    **Options** or **Details**. A click on the label opens a slider to reveal a section
    of the interface, which is believed to be less often used in day-to-day work.
    As few people prefer to immediately see the whole interface at the expense of
    screen space, there is a configuration parameter that controls how the sliders
    are initially set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The default value of `closed` means that sliders must be opened by a click on
    the label; you might have guessed that the reverse value is `open`. A third value,
    `disabled`, can be used by slider-allergic users.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the list of databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes it is useful to avoid showing in the navigation panel, all the databases
    a user has access to. phpMyAdmin offers two ways of restriction`—only_db` and
    `hide_db`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify the list of what can be seen, the `only_db` parameter is used. It
    may contain a database name or a list of database names. Only these databases
    will be seen in the navigation panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The database names can contain MySQL wildcard characters such as `_` and `%`.
    These wildcard characters are described at [http://dev.mysql.com/doc/refman/5.1/en/account-names.html](http://dev.mysql.com/doc/refman/5.1/en/account-names.html).
    If an array is used to specify many databases, they will be displayed on the interface
    in the same order they are listed in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another feature of `only_db` is that you can use it not to restrict the list,
    but instead to put emphasis on certain names that will be displayed on top of
    the list. Here, the `myspecial` database name will appear first, followed by all
    other names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also indicate which database names must be hidden with the `hide_db`
    parameter. It contains a regular expression ( [http://en.wikipedia.org/wiki/Regular_expression](http://en.wikipedia.org/wiki/Regular_expression))
    representing what to exclude. If we do not want users to see any database whose
    name begins with`''secret''`, we would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: These parameters apply to all users for this server-specific configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These mechanisms do not replace the MySQL privilege system. Users' rights on
    other databases still apply, but they cannot use phpMyAdmin's navigation panel
    to reach their other databases or tables.
  prefs: []
  type: TYPE_NORMAL
- en: Deactivating Ajax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Certain pages are using **Asynchronous** JavaScript to improve user experience.
    We can deactivate this behavior by setting `$cfg['AjaxEnable']` to `false`; in
    this case, the pages for which a non-Ajax behavior has been programmed, will cease
    using Ajax, performing a full refresh instead. This may be perceived by the user
    as less fluid.
  prefs: []
  type: TYPE_NORMAL
- en: Character sets and collations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **character set** describes how symbols for a specific language or dialect
    are encoded. A **collation** contains rules to compare and sort the characters
    of a character set. The character set used to store our data may be different
    from the one used to display it, leading to data discrepancies. Thus, a need to
    transform the data arises.
  prefs: []
  type: TYPE_NORMAL
- en: Since MySQL 4.1.x, the MySQL server does the character recoding work for us.
    Also, MySQL enables us to indicate the character set and collation for each database,
    each table, and even each field. A default character set for a database applies
    to each of its tables, unless it is overridden at the table level. The same principle
    applies to every column.
  prefs: []
  type: TYPE_NORMAL
- en: Effective character sets and collations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the home page, we can see the **MySQL charset** information and a **MySQL
    connection collation** selector. Here is the **MySQL charset** information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Effective character sets and collations](img/7782_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The character set information (as seen here after **MySQL charset)** is used
    to generate HTML information, which tells the browser what is the page's character
    set.
  prefs: []
  type: TYPE_NORMAL
- en: We can also choose which character set and collation will be used for our connection
    to the MySQL server using the **MySQL connection collation** dialog. This is passed
    to the MySQL server. MySQL then transforms the characters that will be sent to
    our browser into this character set. MySQL also interprets what it receives from
    the browser according to the character set information. Remember that all tables
    and columns have a character set information describing how their data is encoded.
  prefs: []
  type: TYPE_NORMAL
- en: '![Effective character sets and collations](img/7782_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Normally, the default value should work. However, if we are entering some characters
    using a different character set, we can choose the proper character set in this
    dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following parameter defines both the default connection collation and character
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Navigation panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The navigation panel contains the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The logo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server list ( if `$cfg['LeftDisplayServers']` is set to `TRUE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Home** link or icon (takes you back to the phpMyAdmin home page)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Log out** link or icon (if logging out is possible)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A link or icon leading to the **Query window**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Icons to display phpMyAdmin and MySQL documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Reload** link or icon (to refresh just this panel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A table name filter (under certain conditions, see later in the *Table name
    filter* section)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The names of databases and tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `$cfg['MainPageIconic']` is set to `TRUE` (the default), we see the icons.
    However, if it is set to `FALSE`, we see the links.
  prefs: []
  type: TYPE_NORMAL
- en: The navigation panel can be resized by clicking and moving the vertical separation
    line in the preferred direction to reveal more data, in case the database or table
    names are too long for the default navigation panel size.
  prefs: []
  type: TYPE_NORMAL
- en: We can customize the appearance of this panel. Many appearance-related parameters
    are located in `themes/<themename>/layout.inc.php`. The `$cfg['NaviWidth']` parameter
    contains the default width of the navigation panel in pixels. The background color
    is defined in `$cfg['NaviBackground']`. The `$cfg['NaviPointerColor']` parameter
    defines the pointer color. To activate the navigation pointer for any theme being
    used, a master setting, `$cfg['LeftPointerEnable']`, exists in `config.inc.php`.
    Its default value is `TRUE`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the logo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The logo display behavior is controlled by a number of parameters. First, `$cfg['LeftDisplayLogo']`
    has to be set to `TRUE`, to enable any displaying of the logo. It is `true` by
    default. A click on this logo brings the interface to the page listed in the `$cfg['LeftLogoLink']`
    parameter, which is usually the main phpMyAdmin page (default value `main.php)`,
    but can be changed to any URL. Finally, the `$cfg['LeftLogoLinkWindow']` parameter
    indicates in which window the new page appears after a click on the logo. By default,
    it's on the main page (value `main)`. However, it could be on a brand new window
    by using the value `new`.
  prefs: []
  type: TYPE_NORMAL
- en: The logo image itself comes from the `logo_left.png` file, which is located
    in each specific theme directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: Database and table list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following example shows that no database has been chosen yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Database and table list](img/7782_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is also possible to see a **No databases** message instead of the list of
    databases. This means that our current MySQL rights do not allow us to see any
    existing databases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A MySQL server always has at least one database (named **mysql)**, but it may
    be the case that we do not have the rights to see it. Moreover, as MySQL 5.0.2,
    a special database called **information_schema** appears at all times in the database
    list—unless it is hidden via the `$cfg['Servers'][$i]['only_db']` or the `$cfg['Servers'][$i]['hide_db']`
    mechanisms. It contains a set of views describing the metadata visible for the
    logged-in users.
  prefs: []
  type: TYPE_NORMAL
- en: We may have the right to create one, as explained in [Chapter 4](ch04.html "Chapter 4. Creating
    and Browsing Tables").
  prefs: []
  type: TYPE_NORMAL
- en: Light mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The navigation panel can be shown in two ways—the **Light** mode and the **Full**
    mode. The Light mode is used by default, defined by a `TRUE` value in `$cfg[''LeftFrameLight'']`.
    This mode shows a drop-down list of the available databases, and only tables of
    the currently chosen database are displayed. It is more efficient than Full Mode;
    the reason is explained in the *Full Mode* section appearing later in the chapter.
    In the following screenshot, we have chosen the **mysql** database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Light mode](img/7782_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on a database name or selecting it opens the main panel in the `Database`
    view, and clicking on a table name opens the main panel in the `Table` view to
    browse this table. (Refer to the *Main panel* section for details.)
  prefs: []
  type: TYPE_NORMAL
- en: Tree display of database names
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A user might be allowed to work on a single database, for example **marc**.
    Some system administrators offer a more flexible scheme by allowing user **marc**
    to create many databases, provided all have their names starting with **marc**,
    such as **marc_airline** and **marc_car**. In this situation, the navigation panel
    can be set to display a tree of these database names, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tree display of database names](img/7782_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This feature is controlled by the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The default value of `TRUE` in `$cfg[''LeftFrameDBTree'']` ensures that this
    feature is activated. A popular value for the separator is`''_''`. Should we need
    more than one set of characters to act as a separator, we just have to use an
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Table name filter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If a database has too many tables, we might want to display just a subset of
    these, based on a filter text string. In Light mode only, if a database is currently
    selected, a table name filter is displayed just under the current database name,
    provided that the number of tables exceeds the value of `$cfg[''LeftDisplayTableFilterMinimum'']`,
    which is set to `30` by default. As we input a subset of the table names in this
    filter, the list of tables is reduced to match this subset. To try this feature,
    we set the directive''s value to `15` and we input **time** in the filter field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table name filter](img/7782_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Full mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The previous examples were shown in Light mode, but setting the `$cfg[''LeftFrameLight'']`
    parameter to `FALSE` produces a complete layout of our databases and tables using
    collapsible menus (if supported by the browser) as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Full mode](img/7782_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Full mode is not selected by default; it can increase network traffic and
    server load if our current rights give us access to a large number of databases
    and tables. Links must be generated in the navigation panel to enable table access
    and quick access to every table.
  prefs: []
  type: TYPE_NORMAL
- en: Table abridged statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Moving the cursor over a table name displays comments about the table (if any),
    and the number of rows currently within it as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table abridged statistics](img/7782_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Table quick-access icon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It was established that the most common action on a table must be to browse
    it. Therefore, a click on the table name itself opens it in browse mode. The icon
    beside each table name is a quick way to do another action on each table, and
    by default, it brings us to `Structure` view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Table quick-access icon](img/7782_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `$cfg[''LeftDefaultTabTable'']` parameter controls this action. It has
    a default value of`''tbl_structure.php''`, which is the script that shows the
    table''s structure. Other possible values for this parameter are listed in `Documentation.html`.
    If we prefer a setting in which a click on the table name opens it in the **Structure**
    page and a click on the quick-access icon leads to the **Browse** page, we have
    to set these directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Nested display of tables within a database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MySQL's data structure is based on two levels—databases and tables. This does
    not allow subdivisions of tables per project. To work by project, users must rely
    on having multiple databases, but this is not always allowed by their provider.
    To help them with this regard, phpMyAdmin supports a **nested-levels** feature
    based on the naming of the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us say we have access to the **db1** database, and we want to represent
    two projects, **marketing** and **payroll**. Using a special separator (by default
    a double underscore) between the project name and the table name, we create the
    **marketing, payroll__employees** and **payroll__jobs** tables, achieving a visually
    interesting effect as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nested display of tables within a database](img/7782_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This feature is parameterized with `$cfg['LeftFrameTableSeparator']` (set here
    to`'__')` to choose the characters that will mark each level change, and `$cfg['LeftFrameTableLevel']`
    (set here to`'1')` for the number of sub-levels.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The nested-level feature is intended only for improving the navigation panel's
    look. The proper way to reference the tables in MySQL statements stays the same,
    for example, `db1.payroll__jobs`.
  prefs: []
  type: TYPE_NORMAL
- en: A click on the navigation panel on the project name (here **payroll)** opens
    this project in the main panel, showing only those tables associated with that
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Counting the number of tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, `$cfg['Servers'][$i]['CountTables']` is set to `false`, to speed
    up the display by not counting the number of tables per database. If set to `true`,
    this count is displayed in the navigation panel, next to each database name.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing from the server list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we have to manage multiple servers from the same phpMyAdmin window and often
    need to switch between servers, it is useful to always have the list of servers
    in the navigation panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing from the server list](img/7782_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For this, the `$cfg['LeftDisplayServers']` parameter must be set to `TRUE`.
    The list of servers can have two forms—a drop-down list or links. Which form appears
    depends on `$cfg['DisplayServersList']`. By default, this parameter is set to
    `FALSE`, so we see a drop-down list of servers. Setting `$cfg['DisplayServersList']`
    to `TRUE` produces a list of links to all defined servers.
  prefs: []
  type: TYPE_NORMAL
- en: Handling many databases or tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes some techniques to cope with a server holding a huge
    number of databases and tables.
  prefs: []
  type: TYPE_NORMAL
- en: Limits on the interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It would be difficult to work with the interface if we had access to hundreds
    or even thousands of databases, or hundreds of tables in the same database. Two
    parameters, shown here with their default values, establish a limit on the number
    of databases and tables displayed, by adding a page selector and navigation links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect of setting `$cfg[''MaxTableList'']` to a value of `5` can be seen
    on the navigation panel, shown here for a database having more than five tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Limits on the interface](img/7782_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The page selector and navigation links also appear in the main panel.
  prefs: []
  type: TYPE_NORMAL
- en: Improving fetch speed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Three configuration parameters have an effect on the speed of database name
    retrieval and table counting. The first one is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Every time phpMyAdmin needs to obtain the list of databases from the server,
    it uses the command listed in this parameter. The default command `SHOW DATABASES`
    is fine in ordinary situations. However, on servers with many databases, speed
    improvements can be observed by trying other commands such as one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the first example, `#user#` is replaced by the current username.
  prefs: []
  type: TYPE_NORMAL
- en: In extreme situations (thousands of databases), a user who installs his own
    copy of phpMyAdmin should put `false` in this parameter. This would block any
    database names' fetching, and would require to populate the `$cfg['Servers'][$i]['only_db']`
    parameter with this user's database list.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, some users experience speed issues (at least under MySQL 5.1) with
    information retrieval from `INFORMATION_SCHEMA`. Therefore, the `$cfg['Servers'][$i]['DisableIS']`
    directive, with its default value of `TRUE`, disables the usage of `INFORMATION_SCHEMA`
    from a major portion of the phpMyAdmin code. For your server, it may be worth
    setting this to `FALSE` to see if response time improves.
  prefs: []
  type: TYPE_NORMAL
- en: Main panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **main panel** is the principal working area, and all the possible views
    for it are explained in the following sections. Its appearance can be customized.
    The background color is defined in `$cfg['MainBackground']`.
  prefs: []
  type: TYPE_NORMAL
- en: Home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The home page may contain a varying number of links depending on the login mode
    and the user's rights. The **Home** link from the navigation panel is used to
    display this page. It shows the phpMyAdmin and MySQL versions, the MySQL server
    name, and the logged-in user. In order to reveal less information about our web
    server and MySQL server, we could set `$cfg['ShowServerInfo']` to `FALSE`. Another
    setting, `$cfg['ShowPhpInfo']`, can be set to `TRUE` if we want to see the **Show
    PHP Information** link on the home page—by default its value is `FALSE`. In some
    cases, a **No privileges** message may appear here; the reason for this and how
    to fix this condition is covered in [Chapter 4](ch04.html "Chapter 4. Creating
    and Browsing Tables").
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, a normal user is allowed to change his/her password from the
    interface by using the **Change password** link which brings the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Home page](img/7782_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can either choose our new password by typing it twice, or use the **Generate**
    button (only available in JavaScript-enabled browsers); in this case, the new
    password is shown in a clear field for us to take good note of it, and is automatically
    filled into the dialog for changing the password. It is highly recommended to
    generate passwords in this way, as they are most likely more secure than a human-chosen
    password. To disallow the **Change password** link from the home page, we set
    `$cfg['ShowChgPassword']` to `FALSE`. Privileged users have more options on the
    home page. They have more links to manage the server as a whole, for example,
    the **Privileges** link (more on this in [Chapter 19)](ch19.html "Chapter 19. Administrating
    the MySQL Server").
  prefs: []
  type: TYPE_NORMAL
- en: Database view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: phpMyAdmin goes into `Database` view (shown in the following screenshot) every
    time we click on a database name from the navigation panel.
  prefs: []
  type: TYPE_NORMAL
- en: This is where we can see an overview of the database—the existing tables, a
    dialog to create a table, the tabs to the `Database` view pages, and some special
    operations we might do on this database to generate documentation and statistics.
    There is a checkbox beside each table to make global operations on that table
    (covered in [Chapter 9)](ch09.html "Chapter 9. Performing Table and Database Operations").
    The table is chosen by using the checkbox or by clicking anywhere on the row's
    background. We can also see each table's size, provided `$cfg['ShowStats']` is
    set to `TRUE`. This parameter also controls the display of table-specific statistics
    in the `Table` view.
  prefs: []
  type: TYPE_NORMAL
- en: The initial screen that appears here is the database **Structure** page. We
    note here that almost every column header—such as **Table, Records**, and **Size**
    —is a link which can be used to sort the corresponding column (Chapter [Chapter
    4](ch04.html "Chapter 4. Creating and Browsing Tables") covers sorting). While
    sorting by descending table name might not be that useful, sorting by descending
    size is definitely something we should do from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Database view](img/7782_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We might want a different initial page to appear while entering the `Database`
    view. This is controlled by the `$cfg['DefaultTabDatabase']` parameter, and the
    available choices are given in the configuration file as comments.
  prefs: []
  type: TYPE_NORMAL
- en: The number of rows is obtained using a quick method, the `SHOW TABLE STATUS`
    statement, and not by using a `SELECT COUNT(*) FROM TABLENAME`. This quick method
    is usually accurate, except for `InnoDB` tables, which returns an approximate
    number of records. To help get the correct number of records, even for `InnoDB`,
    the `$cfg['MaxExactCount']` parameter is available. If the approximate number
    of records is lower than this parameter's value—by default, 20000—the slower `SELECT
    COUNT(*)` method will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Do not put a value too high for the `MaxExactCount` parameter. You would get
    correct results but only after waiting for a few minutes, if there are many thousands
    of rows in your `InnoDB` table. To examine the number of rows as displayed for
    `InnoDB`, please refer to [Chapter 10](ch10.html "Chapter 10. Benefiting from
    the Relational System"), where we actually have an `InnoDB` table to play with.
  prefs: []
  type: TYPE_NORMAL
- en: A user might be surprised when seeing the term **KiB** in the **Size** and **Overhead**
    columns. phpMyAdmin has adopted the **International Electrotechnical Commission
    (IEC)** binary prefixes (see [http://en.wikipedia.org/wiki/Binary_prefix)](http://en.wikipedia.org/wiki/Binary_prefix)).
    The displayed values are defined in each language file.
  prefs: []
  type: TYPE_NORMAL
- en: Table view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a commonly used view, giving access to all table-specific pages. By
    default, the initial screen is the table''s **Browse** screen, which shows the
    first page of this table''s data. Note that the header for this screen always
    shows the current database and table names. We also see the comments set for the
    table, next to the table name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table view](img/7782_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `$cfg['DefaultTabTable']` parameter defines the initial page on the `Table`
    view. Some users prefer to avoid seeing the first page's data because in production
    they routinely run saved queries or enter the **Search** page (explained in [Chapter
    8)](ch08.html "Chapter 8. Searching Data").
  prefs: []
  type: TYPE_NORMAL
- en: Server view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This view is entered each time we go back to the home page. A privileged user
    will, of course, see more choices in the `Server` view. The `Server` view panel
    was created to group together related server management pages, and enable easy
    navigation between them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Server view](img/7782_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default **Server** page is controlled by the `$cfg['DefaultTabServer']`
    parameter. This parameter defines the initial starting page as well. For multi-user
    installations, it is recommended to keep the default value `(main.php)` , which
    displays the traditional home page. We could choose to display server statistics
    instead by changing this parameter to `server_status.php`, or to see the user's
    list with `server_privileges.php`. Other possible choices are explained in the
    configuration file, and the server administration pages are covered in [Chapter
    19](ch19.html "Chapter 19. Administrating the MySQL Server").
  prefs: []
  type: TYPE_NORMAL
- en: Icons for home page and menu tabs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A configuration parameter, `$cfg[''MainPageIconic'']`, controls the appearance
    of icons at various places of the main panel:'
  prefs: []
  type: TYPE_NORMAL
- en: On the home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At top of page when listing the **Server, Database**, and **Table** information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the menu tabs in `Database, Table`, and `Server` views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the parameter is set to `TRUE`, which is by default, you will see the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Icons for home page and menu tabs](img/7782_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Opening a new phpMyAdmin window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we want to compare data from two tables at once or have other needs
    for more than one phpMyAdmin window. At the bottom of almost every page, a small
    icon is available to open another window in phpMyAdmin with the current panel's
    content. Moreover, this icon can be used to create a browser bookmark that points
    to the current phpMyAdmin page (but we should log in to access the data).
  prefs: []
  type: TYPE_NORMAL
- en: '![Opening a new phpMyAdmin window](img/7782_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: User preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One instance of phpMyAdmin can be installed to serve multiple users; however,
    before version 3.4.0, these users had to be content with the parameter values
    as chosen by the person in charge for this instance.
  prefs: []
  type: TYPE_NORMAL
- en: It's true that some pages on the interface has allowed tweaking specific parameters
    and that some of these were remembered in cookies, for example, the chosen language;
    but this version is the first to offer a global mechanism for adjusting and remembering
    preferences per user.
  prefs: []
  type: TYPE_NORMAL
- en: Even in the case where the instance has only one user, it's more convenient
    to be able to fine-tune preferences from the interface rather than manipulating
    the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing user preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the home page, we click on **More settings**. From any page in `Server`
    view, we click on the **Settings** menu tab. Upon entering the **Settings** panel,
    we see the **Manage your settings** sub-page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing user preferences](img/7782_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This sub-page is where we act globally on our preferences. Other sub-pages such
    as **Features** and **Main frame** are used to change specific preferences—refer
    to the *Changing settings* section.
  prefs: []
  type: TYPE_NORMAL
- en: The **Import** and **Export** dialogs will be covered in the *Possible locations
    for saving preferences* section. The **More settings** dialog reminds us that
    `config.inc.php` is the place to configure all possibilities, for example, specifying
    servers and authentication modes is out of scope for user preferences.
  prefs: []
  type: TYPE_NORMAL
- en: The **Reset** dialog enables us to go back to default values for all user preferences
    in one easy click.
  prefs: []
  type: TYPE_NORMAL
- en: Possible locations for saving preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are three possible places where user preferences can be saved. Each one
    has pros and cons; this section covers these modes.
  prefs: []
  type: TYPE_NORMAL
- en: Saving in phpMyAdmin configuration storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To enable this mode, `$cfg['Servers'][$i]['userconfig']` must be configured
    with the name of the table which holds these preferences, and the table must exist.
    This saving location is most useful because settings are immediately applied to
    the running instance upon login; moreover, it follows the user on whichever browser
    he happens to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this storage is not configured, the settings page greets us with the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your preferences will be saved for current session only. Storing them permanently
    requires phpMyAdmin configuration storage**.'
  prefs: []
  type: TYPE_NORMAL
- en: Saving in a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We always have the possibility of exporting our settings to a file and importing
    them back. The file follows the JSON format (see [http://json.org)](http://json.org)).
    This method can be handy in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: We plan to use these settings on another phpMyAdmin instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to keep a history of our settings; therefore, saving them from time
    to time in several files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving in the browser's local storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recent browsers, for example Firefox 6 and Internet Explorer 9, offer a local
    storage mechanism which is persistent between sessions. The first time we enter
    the **Manage your settings** sub-page, we see the **You have no saved settings!**
    message inside the **Import from browser's storage** dialog. However, after exporting
    settings to browser's local storage, the **Import** section tells us the date
    and time when settings were last saved using this mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, when phpMyAdmin settings are found in the browser''s storage and
    the phpMyAdmin configuration storage is not available, each phpMyAdmin page has
    the following message at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Your browser has phpMyAdmin configuration for this domain. Would you like
    to import it for current session? Yes / No**'
  prefs: []
  type: TYPE_NORMAL
- en: A drawback of using this method is that our settings are only available when
    we are using this browser; moreover, if our browser's settings do not follow us
    when we change workstations, the settings are tied to this specific workstation
    (and apply to any other user running phpMyAdmin on it).
  prefs: []
  type: TYPE_NORMAL
- en: Changing settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Upon entering a sub-page for specific preferences—in this case, the **Main
    frame** sub-page, we see a third level of menus related to this subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing settings](img/7782_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If a preference has been changed from its default value, the checkbox or data
    field has a different background color and a recycle icon is shown next to it,
    to quickly reset this preference to its default value. Quick explanations are
    given for each directive and links point to the documentation and the official
    wiki. As a general advice, we need to save any change we make on a page before
    changing to a different sub-page; however, in this example, we can switch from
    **Startup** to other third-level menus such as **Browse mode** and back without
    losing our changes.
  prefs: []
  type: TYPE_NORMAL
- en: Disallowing specific preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The person in charge of `config.inc.php` has the last word about which settings
    are changeable in the user preferences. To disallow some settings, we use the
    `$cfg[''UserprefsDisallow'']` directive. We place into it an array containing
    the keys in `$cfg` that represent the directives to disallow. As an example, we
    set this directive to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces a warning as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Disallowing specific preferences](img/7782_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Showing developer settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some settings are sensitive and are intended only for the persons developing
    phpMyAdmin. For example, the possibility of displaying all errors, including PHP
    notices, can lead to disclose the full path of the phpMyAdmin instance. Therefore,
    in the **Features** sub-tab, the **Developer** menu is shown only if `$cfg['UserprefsDeveloperTab']`
    is set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Query window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is often convenient to have a distinct window in which we can type and refine
    queries, and which is synchronized with the main panel. This window is called
    the **Query window**. We can open this window by using the small **SQL** icon,
    or the **Query window** link from the navigation panel's icons or links zone.
    This feature only works for a JavaScript-enabled browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Query window** itself has sub-pages, and it appears here over the main
    panel, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Query window](img/7782_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can choose the dimensions (in pixels) of this window with `$cfg['QueryWindowWidth']`
    and `$cfg['QueryWindowHeight']`. [Chapter 11](ch11.html "Chapter 11. Entering
    SQL Statements") explains the Query window in more detail, including the available
    SQL query history features.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covered:'
  prefs: []
  type: TYPE_NORMAL
- en: The language-selection system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of the navigation and main panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contents of the navigation panel, including Light mode and Full mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contents of the main panel, with its various views depending on the context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user preferences feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Query window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next chapter will guide you with simple steps to accomplish with a freshly-installed
    phpMyAdmin—initial table creation, data insertion, and retrieval.
  prefs: []
  type: TYPE_NORMAL
