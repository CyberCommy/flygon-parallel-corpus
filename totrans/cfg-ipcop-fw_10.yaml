- en: Chapter 10. Testing, Auditing, and Hardening IPCop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will examine some common attitudes towards security and
    patch management, and discuss how we may want to treat these topics within the
    context of IPCop. We will also discuss some common security risks, some common
    security and auditing tools and tests, and find out where to go next.
  prefs: []
  type: TYPE_NORMAL
- en: Security and Patch Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is, very loosely, the process of keeping our systems in such a state
    that either they are deemed to be impractical to break into, or in which the vulnerabilities
    and risks entailed in keeping those systems operational are understood, managed,
    and either compensated for or accepted. Contrary to received wisdom (and intuition,
    for some), there is no such thing as a secure system.
  prefs: []
  type: TYPE_NORMAL
- en: There is a well-used aphorism among the security community, "*Security is a
    journey, not a destination*."
  prefs: []
  type: TYPE_NORMAL
- en: The best security consultant, programmer, or IT professional in the world is
    only able to secure a computer system to the extent that the hardware and software
    he or she is working with allows. Even a perfectly set up, textbook deployment
    of a secure software package runs the risk that an application component, operating
    system component, or piece of hardware may have a fault or develop a fault compromising
    the security of the system. A software fault may do any number of things—it may
    allow an intruder to gain information, cause a system to function improperly,
    or even gain control of that system.
  prefs: []
  type: TYPE_NORMAL
- en: A relatively harmless fault providing the attacker solely with information may
    provide him or her with the information needed to further research other flaws
    in the software running on that computer system—leading to further compromise,
    possibly leading to gaining control of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Further more, whatever any vendor, professional, or developer tells you, there
    is *no* solution, be it a shiny new piece of software, a shiny new piece of hardware,
    a decrepit old security guru, or a clever configuration change that will solve
    all of your security problems. They (can) all add up, but *there is no such thing
    as a panacea*.
  prefs: []
  type: TYPE_NORMAL
- en: All that we can hope to do is bear these principles in mind in layering our
    environment such that we do not rely on any one security measure wherever possible,
    and such that damage is limited. Indeed, firewalls similar to IPCop are used in
    larger organizations to segregate different networks and subnets for precisely
    this reason.
  prefs: []
  type: TYPE_NORMAL
- en: The process of keeping our systems as secure as possible has two important components
    that we are concerned with here.
  prefs: []
  type: TYPE_NORMAL
- en: The first, and most basic, is that of keeping the software running on our systems
    up-to-date. A comprehensive firewall strategy, excellent set of permissions, and
    strong set of passwords count for virtually nothing, if the software we are running
    is out of date and therefore has holes in it. While there are probably security
    flaws in most of the software packages we use that have not yet been discovered,
    if we (and the developers of the software) don't know that they're there, the
    chances that an intruder does are reduced as well. If the flaw is known to the
    developers (and worse yet, if it is patched), we should automatically assume that
    any attacker wanting to break into our system knows about it too. An unpatched
    system is significantly harder to secure than a patched system.
  prefs: []
  type: TYPE_NORMAL
- en: The second, and more difficult step, is the process of **system hardening**.
    This may involve any number of steps from changing filing system permissions and
    putting in place a firewall policy, to surrounding our systems with intrusion
    prevention systems, physical security measures (such as locks and CCTV), and even
    taking regular backups (being able to go back in time and check what our system
    looked like is often critically important to analysis of a system we believe may
    be compromised).
  prefs: []
  type: TYPE_NORMAL
- en: Why We Should Be Concerned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For some readers, this topic may seem fairly obvious while for others, used
    to thinking about IT and about computers in general from a different standpoint,
    it may not. It has been the experience of the authors that quite frequently extremely
    competent managers, IT professionals, and computer scientists are quite unaware
    of how computers can be abused, how much damage this abuse can do, and how easy
    these things are to accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: However, disregarding this misunderstanding for a moment, there are many well-meaning
    managers, home users, and IT professionals who do understand that computers can
    be broken into, and are aware that there is more that they can do to secure their
    system. This gives birth to one of the greatest myths in wide circulation, a viewpoint
    that is often held very strongly by people with large clout within organizations
    of every size. This is a *wrong* viewpoint for any organization valuing its ability
    to make money and using computers to do so (that nowadays is practically everyone),
    or any home user using his or her PC for such things as accounting, online banking,
    or online shopping. This fallacy, of "*why would anyone want to do that to us?*"
    is based on the premise that the sole threat to computers is determined attackers
    specifically picking companies based on their identity and as a home user, small
    business, or dull manufacturing company, one is immune.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, viruses, worms, adware, and spyware—four of the most common issues
    being dealt with by security and IT professionals—have nothing to do with companies
    being targeted, and some of the biggest (and most costly) incidents to deal with
    result in loss of image or legal liability as a result of actions carried out
    by intruders, using a company's system as a springboard to break into others.
    Such problems can be devastating for home users whose credit card is stolen, who
    suffer from identity theft, or are legally liable as a result of someone abusing
    their online auction account.
  prefs: []
  type: TYPE_NORMAL
- en: A quick survey of the many, many papers on disaster recovery on the Web brings
    up different versions of the same statistic again and again—that *X% of companies
    experiencing Y days of downtime never recover from* [*a disaster*]. X and Y vary
    from paper to paper, but invariably X is a double-figure number, and Y is a single
    figure. This alone should be reason to keep your systems secure from an intruder
    who could wipe out your data and destroy your ability to do business—whether business
    constitutes running an actual company or simply being able to file your home taxes.
  prefs: []
  type: TYPE_NORMAL
- en: All this assumes that we have no regulatory requirements—exploring standards
    such as ISO 17799 is well outside our scope, and many regulations and standards
    (including ISO 17799) include stipulations regarding business continuity and disaster
    recovery planning.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that you have this book and that you're reading this section of this
    chapter probably means that this text is preaching to the converted, but at least—hopefully—you
    may be armed with some useful points if you ever encounter anyone who hasn't been
    converted yet!
  prefs: []
  type: TYPE_NORMAL
- en: Appliances and How this Affects Our Management of IPCop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have explored the notions of security and disaster recovery briefly,
    we can move on to how this actually affects our ongoing management and securing
    of IPCop. To venture into another common failing within IT, firewalls (alongside
    networked devices such as printers, switches, and routers) are some of the least
    cared for devices out there. A large majority of small and medium businesses simply
    do not perform any routine management on these devices, frequently leaving switches
    and routers that may be exposed to the Internet with software versions running
    on them that may be full of holes for an intruder to exploit! Services such as
    **Simple Network Management Protocol** (**SNMP**), which are shipped on many devices
    with the default community strings (acting similarly to passwords) of public/private,
    frequently allow intruders to take complete control of a device (sometimes more
    powerfully than via the device's web configuration interface) simply and quietly.
  prefs: []
  type: TYPE_NORMAL
- en: Another common preconception fueling this neglect is the assumption that because
    a device isn't a PC and doesn't have a screen, keyboard, or mouse, it isn't a
    computer and doesn't require updating. The broad userbase of the Internet, and
    the number of products designed to operate as routers, firewalls, etc., has not
    helped this.
  prefs: []
  type: TYPE_NORMAL
- en: '*The Appliance*, a computer that is not a computer, has a strong influence
    on this. *Appliances*, broadly, are computers designed to operate without the
    management and updates that *normal*, software-centric servers require. Unfortunately,
    many of these appliances are based on software similar to that for non-appliance
    devices, and although appliances are typically more tightly locked down and secured
    than an equivalent server set up to do the same job, they are not exempt from
    similar security issues.'
  prefs: []
  type: TYPE_NORMAL
- en: Our IPCop system is designed to operate similarly to an appliance. It is entirely
    designed and updated by one set of individuals (the IPCop team), it is running
    on a PC, and it is based on a normal operating system tailored in order to provide
    a very specific function (and exposing little of the operation of the operating
    system)—so to some extent we need to treat it as one. We should (as with any appliance)
    still update our system via the firmware, and must still avoid prying too much
    into the workings of the firewall if we wish it to remain operational (and supportable),
    but an understanding of what goes on under the covers and how it works is very
    beneficial to our securing of IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Firewall Hardening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First and foremost, we need to consider how IPCop looks to the outside world.
    The first step taken by any hacker, penetration tester, IT professional, or analyst
    in assessing the threat that a particular device poses, whether they intend to
    fix it or break in via it, is to profile that device in order to find out some
    of the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: What the device is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What operating system it is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What sort of hardware it may be running on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What services the server is running, and therefore by inference...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What software (services) the server is running in addition to the basic operating
    system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether any of the above (particularly the services) are insecure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a legitimate auditor, manager, and maintainer of IPCop systems, much of this
    is available to us from memory, from our documentation, or by logging into the
    host itself. For an attacker, to whom such information is extremely valuable,
    this is not the case, and so it behooves us to understand how an intruder would
    gather such information, in order to prevent him or her from doing so.
  prefs: []
  type: TYPE_NORMAL
- en: Checking What Exposure Our Firewall Has to Clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most basic tool in assessing what our IPCop box looks like from the outside
    is the port scanner. As we should be aware from earlier in the book, a server
    may open any number of ports in order to allow users to connect to services it
    runs. We should also know that IPCop may have at least one port open to internal
    clients by default—port 445, which is the port HTTPS runs over for configuration
    via the web interface. A port scanner, very simply, attempts to connect to lots
    of different ports, and sees which ports it gets replies from, defining these
    as open (i.e. there's something going on at the other end).
  prefs: []
  type: TYPE_NORMAL
- en: Port scanning is an important exercise to carry out on infrastructure like firewalls
    as part of a security audit or periodic checkup for several reasons. The most
    notable of these is that we may not always know what our servers are running.
    We can get a list of which ports our firewall thinks it has open either by using
    the `netstat` command at a shell, or viewing them via the web interface. If, however,
    we are scanning our server because we believe that a malicious intruder may have
    installed software on our firewall for nefarious purposes, the fact that that
    software has an open port (for instance, to allow the intruder to re-connect and
    gain access through a backdoor) may be hidden from the `netstat` command and certain
    portions of the operating system itself.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the system independently in this situation is one of the few ways to
    detect such activity, and for this reason if you're serious about security, it
    is good to get into the habit of doing it periodically; you can't be too prudent.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Port Scanning via the Internet**'
  prefs: []
  type: TYPE_NORMAL
- en: Many Internet Service Providers have quite strict policies with regard to port
    scanning via their networks, and will treat any such activity as illegitimate,
    even though there is nothing illegal about port scanning your own server (and
    the port scanning of systems that are not your own is considered by many to be
    a legal grey area, although increasingly being treated as criminal activity in
    itself). Many more reasonable ISPs will make the distinction between port scanning
    your own systems, which you (obviously) have consent to do, and the port scanning
    of others. Some, though, are a little more judgmental (some would employ the use
    of the word illiberal!).
  prefs: []
  type: TYPE_NORMAL
- en: Intensively scanning all traffic for this sort of activity traversing an ISP's
    network is very resource intensive, and ISPs will rarely do this to traffic that
    is not destined for their servers (or high-value systems in general) due to the
    expense required. It is, however, worth checking your ISP's terms and conditions
    and Acceptable Usage Policy before you even think about doing so and putting yourself
    at risk of inconvenience or liability! These are almost always available on the
    ISP's website, or on demand from the ISP.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the AUP for BT''s (British Telecom) broadband service (that
    is available at [http://www.abuse-guidance.com/](http://www.abuse-guidance.com/))
    says the following about port scanning:'
  prefs: []
  type: TYPE_NORMAL
- en: '"You *must not run*"port *scanning" software, which accesses remote machines
    or networks, except with the explicit prior permission of the administrator or
    owner of such remote machines or networks. This includes using applications capable
    of scanning the ports of other internet users. […]*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you intend to run a port scanning application, you must provide BT with
    a copy of the written consent received from the target of the scan authorizing
    the activity. This must be supplied to BT prior to the application being run."*'
  prefs: []
  type: TYPE_NORMAL
- en: This is fairly similar, if a little bureaucratic, to the type of AUP most ISPs
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example scan using the scanner Nmap might look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in this scan, there is one port from the default set of 1663 ports
    that Nmap version 3.81 scans that is open—port 22, or the port that SSH runs on.
    Since this is an unfirewalled Linux host, Nmap can also detect uptime for the
    system (using TCP Timestamping, RFC1323, [http://www.faqs.org/rfcs/rfc1323.html](http://www.faqs.org/rfcs/rfc1323.html)).
    We can also guess when the machine was last rebooted, and based on idiosyncrasies
    pertaining to the way in which the machine has responded to a variety of non-standard
    packets sent to it by Nmap during the scanning process, Nmap performs an **OS
    Fingerprint** (requested through the use of the `-O` flag) on the host, with fairly
    good accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is an extremely powerful tool, and one of the most commonly used IT security
    tools on the planet. The (newly rewritten) manual page (man Nmap, or from the
    website — [http://www.insecure.org/nmap/man/](http://www.insecure.org/nmap/man/))
    is not only very informative as to how the tool is to be used, but also as to
    how it works and why.
  prefs: []
  type: TYPE_NORMAL
- en: Other scanners that you might want to try, particularly on a Windows platform
    (in which Nmap is somewhat fiddly to install and is frequently prevented from
    working by service packs and patches) include Superscan ([http://www.foundstone.com/index.htm?subnav=resources/navigation.htm&subcontent=/resources/proddesc/superscan.htm](http://www.foundstone.com/index.htm?subnav=resources/navigation.htm&subcontent=/resources/proddesc/superscan.htm)).
  prefs: []
  type: TYPE_NORMAL
- en: Looking at a default configuration of the IPCop firewall from the internal network
    (i.e. if you port scan your server from the Green zone, or if an employee, child,
    or client connected to a corporate network were to scan the firewall), port 445
    is the only port we will see open.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many port scanners (including Nmap), however, do not scan every port to which
    it is possible to connect on a server as we can see from the preceding scan—Nmap
    scans 1663 *commonly used* ports by default. This is done for two reasons: firstly,
    the less data we send (and receive), the quicker the scan; secondly, the more
    data we send and receive, the more likely the scan is to arise suspicion (or cause
    network problems)—hopefully not a concern for the legitimate user of a tool such
    as Nmap!'
  prefs: []
  type: TYPE_NORMAL
- en: Since it is common to scan only well-known ports, therefore, we have a practical
    example of one piece of hardening that has already been carried out—a change in
    port from 443 to 445 (which is not a common services port). This may be "security
    through obscurity" but it is *not a bad thing—apart* from making any connections
    that are made to this port a lot more obvious (they must necessarily come from
    a deliberate connection attempt rather than accidental browsing or an automated
    worm affecting HTTP servers via HTTPS), it genuinely will reduce the effectiveness
    of (subtle) network reconnaissance on the part of an intruder.
  prefs: []
  type: TYPE_NORMAL
- en: '*Port scanning*, then, enables us to establish *which services are running
    on our firewall* from the internal network.'
  prefs: []
  type: TYPE_NORMAL
- en: What about externally? Well, port scanning is just as valuable here too (if
    not more so).
  prefs: []
  type: TYPE_NORMAL
- en: Port scanning externally allows us to test whether the ports that the Internet
    sees as open on the external interface of our firewall correspond with any port
    forwards or holes that we have opened outside our firewall. For the same reasons
    as port scanning hosts internally, this is an important port of a proactive security
    policy.
  prefs: []
  type: TYPE_NORMAL
- en: Although we can check which ports we are allowing into our network via the IPCop
    GUI, port scanning is another way in which we can verify that our port forwards
    are forwarding to the appropriate place. Ports that we have forwarded to hosts
    inside the network, and which do not show up on a port scan (which are filtered),
    may also be identified in this manner; although we can view which ports are forwarded
    in the web interface, we cannot verify that there is anything to which the ports
    are being forwarded. In a large environment in which we are not aware of all of
    the forwarded ports, this may be one way of identifying unneeded holes (which
    we can remove) in our firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Some websites, such as Sygate's, ([http://scan.sygatetech.com/](http://scan.sygatetech.com/))
    will port scan your host for you automatically (for free) and present you with
    the results via the Web. This is useful if your ISP is restrictive or you don't
    have another computer directly connected to the Internet to scan from!
  prefs: []
  type: TYPE_NORMAL
- en: What is Running on Our Firewall?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to auditing our firewall to see what ports it is listening on, we
    may also routinely audit it in order to identify which processes are running on
    the firewall. There are several packages that can aid us with this.
  prefs: []
  type: TYPE_NORMAL
- en: At the simplest, binutils such as the `ps` command, which lists processes running
    on a system, may be used to ascertain what our system is doing. The `top` command,
    which displays processes in real time and can be used to watch processes on a
    system (such as to monitor unpredictable processes and find out what is causing
    poor performance) may also be used here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ps` command, however, is not ideal for these situations. The prime reason
    for this is: it is very easy for an intruder to replace the `ps` command with
    a version that does not display malicious processes (a collection of tools performing
    tasks such as this for an intruder is commonly referred to as a **rootkit**).
    Another reason for this is that it is fairly time consuming to compare `ps` output,
    and this requires relatively detailed knowledge of processes on a system (and
    many malicious processes may be disguised as legitimate processes even if the
    `ps` output has not been directly altered).'
  prefs: []
  type: TYPE_NORMAL
- en: There are, luckily for us, many other applications we can use to prevent, and
    detect, scenarios in which our system has been tampered with. The first of these,
    and one of the older tools used on Unix and Linux systems, is called tripwire
    ([http://sourceforge.net/projects/tripwire](http://sourceforge.net/projects/tripwire)).
    Tripwire is a Host Intrusion Detection System (HIDS), an application that will
    monitor specific files on a system (such as system binaries like `ps`, and configuration
    files). Tripwire does not monitor in real time, but rather seeks to detect such
    changes after the act. Tripwire can alert us to these events both for security
    purposes and others (such as change management or simply part of the normal IT
    Process).
  prefs: []
  type: TYPE_NORMAL
- en: Tripwire is an open-source tool, and is available as an addon for IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful tool for these scenarios is chkrootkit ([http://www.chkrootkit.org/](http://www.chkrootkit.org/)).
    Like tripwire, chkrootkit inspects files on the system, but chkrootkit is a script
    initiated at user request to scan specifically for files recognized as malicious.
    Although useful to run periodically for verification processes, the old adage
    that prevention is better than cure holds true, and a negative scan by no means
    indicates that a system is clear. As chkrootkit is a script, you can download
    the script using the `wget` command, or upload it to your server using `scp` ([http://www-hep2.fzu.cz/computing/adm/scp.html](http://www-hep2.fzu.cz/computing/adm/scp.html))
    at a command prompt, and run the freshly downloaded copy straight on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SCP**'
  prefs: []
  type: TYPE_NORMAL
- en: SCP, or Secure CoPy, is a subset of the functionality included with the SSH
    server/client that are included with IPCop. Using the `scp` command at a Unix/Linux
    command prompt, or a tool such as WinSCP ([http://winscp.sourceforge.net](http://winscp.sourceforge.net))
    on Windows, you can access the filing system on your IPCop system and manipulate
    the filing system remotely. Although extremely useful, `scp` is easy to manipulate
    for nefarious purposes, and as such, shell access should be carefully guarded
    and protected.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Hardening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By this point, we are aware of two large changes we can make to our operations
    and setup of IPCop, to make it more secure. The first, auditing open ports, allows
    us to cut down the exposure that our firewalls and systems have to the Internet.
    The second, utilizing some form of intrusion detection or after-the-fact scanning
    system such as tripwire and chkrootkit, gives us a higher chance of detecting
    anyone who does happen to break through our defenses.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening our host, however, is a lot more comprehensive a task than simply
    installing a service or running some port scanning software. Maintaining a hardened
    system involves removing any functionality that we don't need as well as making
    well thought-out changes to our system's security. IPCop is already considerably
    hardened in this respect, making it considerably securer than a default Linux
    installation of any of the major distributions. Some of the steps that have been
    made to make IPCop more secure include the following.
  prefs: []
  type: TYPE_NORMAL
- en: Stack-Smashing Protector (Propolice)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Stack-Smashing Protector** (**SSP**) ([http://www.research.ibm.com/trl/projects/security/ssp/](http://www.research.ibm.com/trl/projects/security/ssp/))
    is a patchset for the GCC Compiler, used to create the binary executable files
    that constitute software in IPCop and many other open-source applications, developed
    by Hiroaki Etoh of IBM. SSP helps to protect exploits in computer software that
    manipulate the *stack*, an area to which data is added and removed, such as buffer
    overrun attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: In a **buffer overrun** attack, an attacker may exploit a bug in a piece of
    software to write data to areas of memory that are adjacent to an area of memory
    assigned to that data (such as a heap or a stack). When this situation exists,
    a malicious application may be written in order to allow an attacker to run his
    or her own (malicious) code on a system, generally compromising security.
  prefs: []
  type: TYPE_NORMAL
- en: SSP protects against attacks on the stack by verifying that the stack is not
    altered, and causing any application in which this occurs to **segmentation fault**,
    and exit. All software on IPCop, which is compiled with this feature, therefore,
    is afforded some protection against certain sorts of attack commonly used to exploit
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Service Hardening
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPCop has unnecessary services removed by default—many operating systems, including
    widely deployed versions of Linux and older versions of the Windows operating
    systems, run many services that are unnecessary to normal operations. Common examples
    of these include web servers such as IIS server on Windows and the Apache server
    on Windows or Linux, or processes such as finger, nfs, portmap, telnet, etc.,
    which are not used in the majority of deployments.
  prefs: []
  type: TYPE_NORMAL
- en: As each one of these processes carries a risk of an exploit such as a buffer
    overflow being used to break into the system, each service that is eliminated
    closes another door for a potential intrusion. An intrusion may vary from a worm
    such as the Code Red worm (which exploited a buffer overflow in the IIS web server)
    in 2001 or Slapper worm (which exploited a buffer overflow in the OpenSSL handshake
    process to compromise the Apache web server) in 2002, all of the way through to
    a more precise attack by a malicious intruder.
  prefs: []
  type: TYPE_NORMAL
- en: If we do not need services such as SSH or Squid that are included with IPCop,
    or services installed via addons, then, best practice is not to enable them, and
    preferably to remove them from the system entirely. Although services like SSH
    and Apache, which are commonly exposed to the Internet, carry less risk than services
    less commonly exposed, such as Squid, any service not required should as a matter
    of course be removed.
  prefs: []
  type: TYPE_NORMAL
- en: Logfiles and Monitoring Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of good security management, it is important to retain the capacity
    to notice trends in behavior and usage of information systems, which allow us
    to notice changes proactively. A change in usage of a proxy server, memory usage,
    or CPU load may indicate something innocuous, such as a rise in user activity
    or a need for upgraded hardware, a hardware fault, or even malicious activity.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing a Baseline with Graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important, therefore, to establish a *baseline* for how our server behaves
    in order to be able to identify when a particular piece of behavior is out of
    the ordinary. IPCop aids us greatly here by providing us with graphical tools
    to monitor (and graph) statistics such as proxy connections and CPU usage. It
    is important for the security of your host that you regularly review these and
    account for any major blips or alterations in behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The authors have been aware of several situations in which systems have been
    compromised and used for malicious purposes, and in which traffic monitoring on
    routers upstream from the systems have indicated a rise in traffic. The resulting
    investigation has subsequently uncovered the malicious activity, and resulted
    in the servers being shut down and cleansed.
  prefs: []
  type: TYPE_NORMAL
- en: Logfiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Logfiles are another important part of security management and another frequent
    indication of malicious activity. It is important for administrators to read through
    their logfiles and, again, establish a baseline for events produced by their server.
    Logfiles such as the Apache web server logs and the `/var/log/auth.log` file,
    which stores authentication events, are very significant and often provide invaluable
    information about attempts to break into a system, guess passwords, or gather
    information on a system. This might include attempts to use brute force to discover
    usernames and passwords via an SSH server or an HTTP server such as the IPCop
    management interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Auditing SSH Log Events**'
  prefs: []
  type: TYPE_NORMAL
- en: As a result of malicious worms online, crude brute force attempts to log into
    SSH servers on the default port of 22 are a very common part of life online. Virtually
    any SSH server connected to the Internet will most likely have large numbers of
    log events generated with common system accounts such as root and admin being
    unsuccessfully logged into. These are relatively normal, and make a compelling
    argument for moving SSH to an alternative port (as IPCop does by default) in order
    to be able to distinguish between attempts like these and genuine break in attempts.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of logs from `/var/log/auth.log` caused by a brute force attempt
    on an SSH server might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Logfiles are generally relatively self-explanatory, and in cases where this
    is not true, documentation for the packages in question (such as OpenVPN ([http://www.openvpn.net](http://www.openvpn.net)),
    OpenSSH ([http://www.openssh.com](http://www.openssh.com)), and the Apache web
    server ([http://www.apache.org](http://www.apache.org))) is often extremely good.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and Denial of Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all security risks stem from the compromise of software and credentials.
    Many security risks commonly referred to as **Denial of Service**, or **DoS**,
    attacks, affect the quality of service offered by a computer system, and can be
    just as damaging as a system compromise. If your firewall is down and you cannot
    send email to a customer to confirm a business deal, the loss of revenue could
    be greater than if your firewall were compromised and the intruder knew about
    the deal.
  prefs: []
  type: TYPE_NORMAL
- en: It is extremely important for the security of our systems to ensure that the
    hardware they run on is adequate, and therefore performance monitoring, as mentioned
    during[Chapter 5](ch05.html "Chapter 5. Basic IPCop Usage"), should be carried
    out regularly, and unusual activity, such as high network or CPU usage, should
    be accounted for. Such administration forms an important part of making sure that
    our firewall is not only secured against simple attacks, but is also resilient
    both against DoS attacks and surges in usage.
  prefs: []
  type: TYPE_NORMAL
- en: If one performance counter (or several) appears to be unusually high or has
    recently spiked, there are several things we can do to troubleshoot the problem.
    It is possible, particularly if our hardware is of lower specification (a Pentium
    II or less) and our network is relatively fast (five Mbit or faster) that the
    machine is simply under load—use of the IDS (Snort) or proxy server (Squid) will
    increase the load on the processor and increase memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: CPU and Memory Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we can look at if CPU usage is high is which application is
    using the CPU! Although there isn't much useful diagnostic information for this
    via the web GUI, we can fortunately use the `top` utility to view which processes
    are running on our system, along with statistics such as the percentage of memory
    and CPU time that they are using.
  prefs: []
  type: TYPE_NORMAL
- en: '![CPU and Memory Usage](img/1361_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although it may look a little intimidating, the output from the `top` command
    is fairly logical, and updates dynamically as you are looking at it. The `top`
    output above is from a clean IPCop 1.4.10 system (with no proxy server or IDS
    configured), and most of the processes listed are self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: Processes beginning with the letter `k` are all (in this example) kernel processes.
    `sshd`, unsurprisingly, is the SSH server process (the `d` stands for **Daemon**,
    which in Unix and Linux terminology essentially means server process). The `httpd`
    is what provides us with the HTTP-based GUI; `dnsmasq` is both a DNS and DHCP
    server. `syslogd` keeps system logs, and `mingetty` and `bash` are all processes
    that handle and provide the text-based console.
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, there is very little CPU usage—**99.6% idle**, and **0.4%**
    of actual usage is thanks to `top` alone! We can take it, then, that there are
    no performance-related problems with this system (or that they're so pervasive
    that `top` itself is affected and giving phony output—this would be highly unlikely
    unless the system had been compromised and `top` itself replaced by an attacker).
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we can see that there is **29.7%** CPU usage—there
    is a second root logon (a new `bash` and `sshd` process will appear for each user
    logged on via SSH), responsible for running the `grep` command (which looks for
    a specific piece of text in a file, or large number of files), which is using
    a lot of CPU time (and probably a lot of disk time as well). This is a second
    logon for the purpose of this example, and the `grep` command being run (which
    will consume CPU time and use the disk, but shouldn't break anything) was `grep
    -r * foo`, run from the root of the filing system ( `cd/` at a command line).
  prefs: []
  type: TYPE_NORMAL
- en: '![CPU and Memory Usage](img/1361_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is a good idea to know which processes are running on your system. Although
    many intrusions will involve replacements of binary files such as those that run
    `ps` and `top`, it is often the case that a break in that does not have root (administrator)
    access to the system will have processes running that are visible via `ps` or
    `top`. Invisible processes, or modified versions of binary files such as `ps`
    and `top`, may be detected by applications such as chkrootkit.
  prefs: []
  type: TYPE_NORMAL
- en: If your Squid proxy, HTTP server, or another process was heavily using CPU or
    memory, you might have an issue with it (or potentially, an attacker) requiring
    attention. We can also use the `ps` command to list processes running on the system,
    although the `ps` command included in IPCop is part of the busybox toolkit, which
    is less powerful than the *real* (binutils version) `ps` included with most Linux
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Logged-In Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can view users logged in via SSH using the `w` command as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Logged-In Users](img/1361_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, there are three instances of the `root` user logged in: the
    first, on `tty1`, is logged into the physical terminal on the IPCop host itself,
    while the `pts/0` and `pts/1` terminals are both virtual terminals, accessed via
    SSH. The **WHAT** column indicates which process the user is currently interactively
    running—in the second session, `w` (w will detect itself running while enumerating
    processes running on the system), while both other sessions are at `bash`, which
    is the name of the command line itself (i.e. the other two users are either idle,
    or typing at the command line without having a specific application in the `foreground`).'
  prefs: []
  type: TYPE_NORMAL
- en: Mastery of administration of a Linux system is complex, but there are several
    simple tools that IPCop comes with, such as `top, ps, w, netstat`, and `route`,
    which can show us (respectively) live and snapshotted process information, logged-in
    users, network connections, and the routing table. Knowledge of these and some
    basic understanding of networking and the architecture of the Linux operating
    system will get us a long way in diagnosing problems, analyzing intrusions, and
    resolving performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Other Security Analysis Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many other tools besides those that we have mentioned that help us
    to analyse the state of our firewall and look for security holes. Many smaller
    utilities such as Nmap have a very specific purpose, while some tools are broader
    in scope. Nessus, a security scanner, is worthy of particular attention due to
    the scope of usage that it has. Nessus collates a number of different security
    holes together, and has the ability to look for these holes on one host, or across
    an entire network.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the holes that Nessus will report may be false positives, and Nessus
    may be unsure in these cases whether a particular, insecure, configuration is
    present. Alternatively, the false positive may be an enabled feature that *should*
    be disabled, but is instead in use. Either way, Nessus, while useful, is a tool
    that is worth using with care, particularly on a system such as IPCop, which is
    carefully engineered not to be maintained in quite a normal way.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, on your IPCop system as well as other systems (such as servers,
    workstations, printers, switches, and wireless access points), Nessus is capable
    of picking up a wide variety of security holes and common misconfigurations. Read
    more about Nessus at [http://www.nessus.org/](http://www.nessus.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Where to Go Next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It can seem like you're living in a vacuum, unable to get assistance with issues
    like security, and without enough information to further your understanding of
    the topics. Luckily, this is not the case, and there are many resources online
    with large amounts of information on topics pertaining to security. Some of the
    good examples have been mentioned here.
  prefs: []
  type: TYPE_NORMAL
- en: Full-Disclosure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If there were ever a center for the online security community, you could make
    a very compelling case that it was Full-Disclosure.
  prefs: []
  type: TYPE_NORMAL
- en: Started in response to other, moderated, mailing lists in which information
    was not freely available and censorship was a routine part of online discussions
    about security, the concept of Full-Disclosure promotes the complete availability
    of information, and as the name of the list implies, the mailing list promotes
    these ideals.
  prefs: []
  type: TYPE_NORMAL
- en: In accordance with these principles, then, the list is completely unmoderated
    (apart from rare instances of highly antisocial behavior such as spamming or repeated
    and distasteful offensiveness) and promotes full availability of information about
    security. Full-Disclosure is a busy list populated by people from all walks of
    the security community. More information is available from the Full-Disclosure
    charter at [http://lists.grok.org.uk/full-disclosure-charter.html](http://lists.grok.org.uk/full-disclosure-charter.html).
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although Wikipedia is not generally thought of as a security-specific information
    source, many of the articles on technical topics such as TCP/IP, firewalls, and
    computer security are extremely good, and the computer security article makes
    a great starting place, as it has links to Wikipedia articles and third-party
    resources that are extremely comprehensive (see [http://en.wikipedia.org/wiki/Computer_security](http://en.wikipedia.org/wiki/Computer_security)).
  prefs: []
  type: TYPE_NORMAL
- en: SecurityFocus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although not vendor-neutral (SecurityFocus is owned by AntiVirus vendor Symantec),
    SecurityFocus is a good portal site with many good articles written by knowledgeable
    contributors. SecurityFocus is also the home of many good mailing lists, including
    the well-known Bugtraq (see [http://www.securityfocus.com](http://www.securityfocus.com)).
  prefs: []
  type: TYPE_NORMAL
- en: Literature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many good books about security, on a wide range of topics. Some of
    these are very broad and go out of date very quickly, while some cover extremely
    detailed topics. A very random selection of (relatively) well-regarded books on
    different topics is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Counter Hack Reloaded: A Step-by-Step Guide to Computer Attacks and Effective
    Defenses, ISBN 0-13-148104-5*'
  prefs: []
  type: TYPE_NORMAL
- en: This highly acclaimed book from Ed Skoudis and Tom Liston represents a fairly
    comprehensive overview of computer security, starting out with networking, covering
    operating system security in both Unix and Windows environments, network reconnaissance,
    software flaws, and a variety of attacks and hacking techniques. This is a good,
    serious, approachably technical introduction to security.
  prefs: []
  type: TYPE_NORMAL
- en: '*The Art of Deception: Controlling the Human Element of Security, ISBN 0-47-123712-4*'
  prefs: []
  type: TYPE_NORMAL
- en: This less technical book by Kevin Mitnick covers the topic of Social Engineering,
    the breaking of computer systems by manipulating people. This involves telephone
    calls, masquerading as a staff member, pretending to be from a utility company,
    or even bribery, to gain physical and logical access to computer systems and information
    about them.
  prefs: []
  type: TYPE_NORMAL
- en: '*Hacking Exposed 5th Edition, ISBN 0-07-226081-5*'
  prefs: []
  type: TYPE_NORMAL
- en: This relatively technical book in its fifth edition represents a broad view
    of hacking with relevance to a number of different technologies. Although it has
    a slightly sensational cover and demeanor, and it will not teach you all you need
    to know about hacking or computer security overnight, it does cover some of the
    fundamental topics in security as well as demonstrate, practically, how computers
    are compromised, and is not a bad starter for someone new to security.
  prefs: []
  type: TYPE_NORMAL
- en: '*TCP/IP Illustrated 3 Volume Set, ISBN 0-20-177631-6*'
  prefs: []
  type: TYPE_NORMAL
- en: This classic book by Richard W. Stevens is often touted as *the* book on TCP/IP
    Networking, and is an excellent (if highly technical, at points) primer on how
    TCP/IP works. Along with the IBM redbook mentioned in[Chapter 7](ch07.html "Chapter 7. Virtual
    Private Networks") on networking, this is well worth reading for anyone interested
    in security, as (particularly with respect to firewalls) the understanding of
    how networking works is critical to your understanding of security on networked
    computer systems.
  prefs: []
  type: TYPE_NORMAL
- en: '*Linux Server Security, Second Edition, ISBN 0-59-600670-5*'
  prefs: []
  type: TYPE_NORMAL
- en: This relatively technical book is an excellent primer on—as the name implies—Linux
    server security, from filing system permissions and database security to iptables.
    It is well worth reading for anyone interested in running Linux servers.
  prefs: []
  type: TYPE_NORMAL
- en: '*The Tao of Network Security Monitoring: Beyond Intrusion Detection, ISBN 0-32-124677-2*'
  prefs: []
  type: TYPE_NORMAL
- en: This relatively technical book written by Richard Bejtlich, the founder of a
    security company, covers not only the flaws of traditional intrusion detection,
    but also many skills important to a network, security, or firewall administrator,
    such as the use of `tcpdump` and IDS analysis tools.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More than anything, the most important skill to master in securing (or just
    administering) any computer system is the ability to find what information you
    need when you need it, in as short a space of time as possible. More often than
    not, this information is available online—if you know where to look—and books
    like these often prime you with enough knowledge that you can go off and learn
    about more complex topics yourself. Sites similar to the ones we've mentioned
    before, such as Wikipedia and SecurityFocus, and mailing lists like Full-Disclosure
    and the SecurityFocus mailing lists make excellent starting points and sport a
    very broad selection of users and types of content posted on a daily basis.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you don't become a regular user or poster, it is worth subscribing to
    Full-Disclosure for a month or two if you're even vaguely serious about security!
  prefs: []
  type: TYPE_NORMAL
- en: We have reviewed some common attitudes towards security, reviewed some of the
    security measures IPCop provides, and some security measures we can take, both
    technical and operational, as well as provided some starting points for interested
    readers to learn more about security.
  prefs: []
  type: TYPE_NORMAL
- en: Computer security is an enjoyable, complex, high profile, and somewhat fashionable
    topic, making it highly compelling as a source for further study!
  prefs: []
  type: TYPE_NORMAL
