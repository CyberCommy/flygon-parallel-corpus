- en: Geolocation and Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about the geolocation and mapping capabilities
    of React Native. You'll start learning how to use the geolocation API; then you'll
    move on to using the `MapView` component to plot points of interest and regions.
  prefs: []
  type: TYPE_NORMAL
- en: You'll use the `react-native-maps` package to implement maps. The goal of this
    chapter is to go over what's available in React Native for geolocation and React
    Native Maps for maps.
  prefs: []
  type: TYPE_NORMAL
- en: Where am I?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The geolocation API that web applications use to figure out where the user is
    located can also be used by React Native applications because the same API has
    been polyfilled. Outside of maps, this API is useful for getting precise coordinates
    from the GPS on mobile devices. You can then use this information to display meaningful
    location data to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the data that's returned by the geolocation API is of little
    use on its own; your code has to do the legwork to transform it into something
    useful. For example, latitude and longitude don't mean anything to the user, but
    you can use this data to look up something that is of use to the user. This might
    be as simple as displaying where the user is currently located.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement an example that uses the geolocation API of React Native to
    look up coordinates and then use those coordinates to look up human-readable location
    information from the Google Maps API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The goal of this component is to render the properties returned by the geolocation
    API on the screen, as well as look up the user's specific location, and display
    it. If you take a look at the `componentDidMount()` method, you'll see that this
    is where most of the interesting code is. The `setPosition()` function is used
    as a callback in a couple of places. Its job is to set the state of your component.
  prefs: []
  type: TYPE_NORMAL
- en: First, it sets the `coords` properties. Normally, you wouldn't display this
    data directly, but this is an example that's showing the data that's available
    as part of the geolocation API. Second, it uses the `latitude` and `longitude`
    values to look up the name of where the user is currently, using the Google Maps
    API.
  prefs: []
  type: TYPE_NORMAL
- en: The `setPosition()` callback is used with `getCurrentPosition()`, which is only
    called once when the component is mounted. You're also using `setPosition()` with
    `watchPosition()`, which calls the callback any time the user's position changes.
  prefs: []
  type: TYPE_NORMAL
- en: The iOS emulator and Android Studio let you change locations via menu options.
    You don't have to install your app on a physical device every time you want to
    test changing locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what this screen looks like once the location data has loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4c40c4e8-4e0b-4f0f-b5e5-ff18f58dbd79.png)'
  prefs: []
  type: TYPE_IMG
- en: The address information that was fetched is probably more useful in an application
    than latitude and longitude data. Even better than physical address text is visualizing
    the user's physical location on a map; you'll learn how to do this in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: What's around me?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `MapView` component from `react-native-maps` is the main tool you'll use
    to render maps in your React Native applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement a basic `MapView` component to see what you get out of the
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The two Boolean properties that you''ve passed to `MapView` do a lot of work
    for you. The `showsUserLocation` property will activate the marker on the map,
    which denotes the physical location of the device running this application. The
    `followUserLocation` property tells the map to update the location marker as the
    device moves around. Let''s see the resulting map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/904b6956-4e7c-4939-96ea-ac5d62ab3341.png)'
  prefs: []
  type: TYPE_IMG
- en: The current location of the device is clearly marked on the map. By default,
    points of interest are also rendered on the map. These are things in close proximity
    to the user so that they can see what's around them.
  prefs: []
  type: TYPE_NORMAL
- en: It's generally a good idea to use the `followUserLocation` property whenever
    using `showsUserLocation`. This makes the map zoom to the region where the user
    is located.
  prefs: []
  type: TYPE_NORMAL
- en: Annotating points of interest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you've seen how the `MapView` component can render the user's current
    location and points of interest around the user. The challenge here is that you
    probably want to show points of interest that are relevant to your application,
    instead of the points of interest that are rendered by default.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you'll learn how to render markers for specific locations on
    the map, as well as render regions on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s plot some local breweries! Here''s how you pass annotations to the `MapView`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Annotations are exactly what they sound like; additional information rendered
    on top of the basic map geography. In fact, you get annotations by default when
    you render `MapView` components because they will show points of interest. In
    this example, you''ve opted out of this capability by setting the `showsPointsOfInterest`
    property to `false`. Let''s see where these breweries are located:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/27add99a-756f-4983-aab4-2d4e4832397e.png)'
  prefs: []
  type: TYPE_IMG
- en: The callout is displayed when you press the marker that shows the location of
    the brewery on the map. The `title` and the `description` property values that
    you give to `<MapView.Marker>` are used to render this text.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting overlays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this last section of this chapter, you''ll learn how to render region overlays.
    A point is a single latitude/longitude coordinate. Think of a region as a connect-the-dots
    drawing of several coordinates. Regions can serve many purposes, such as showing
    where we''re more likely to find IPA drinkers versus stout drinkers. Here''s what
    the code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The region data consists of several latitude/longitude coordinates that define
    the shape and location of the region. The rest of this code is mostly about handling
    state when the two text links are pressed. By default, the IPA region is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/020d02e4-fbe2-4f3c-9ae6-9c3874f959f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the `stout` text is pressed, the IPA overlay is removed from the map and
    the stout region is added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f0a99b8a-63de-4988-8042-cc3913a41ecb.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about geolocation and mapping in React Native.
    The geolocation API works the same as its web counterpart. The only reliable way
    to use maps in React Native applications is to install the third-party `react-native-maps`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: You saw the basic configuration `MapView` components, and how it can track the
    user's location, and show relevant points of interest. Then, you saw how to plot
    your own points of interest and regions of interest.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn how to collect user input using React Native
    components that resemble HTML form controls.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The geolocation API found in React Native works the same way as the geolocation
    API found in web browsers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, it's the same API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, the React Native API has its own distinct features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main purpose of the geolocation API in React Native applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To compute distances from one location to another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To find the latitude and longitude coordinates of the devices and use those
    values with other APIs to look up useful information such as addresses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To look up addresses and other information about those addresses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can the `MapView` component show points of interest near the user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, this is enabled by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, you have to manually plot and label everything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, but you have to use the `showsPointsOfInterest` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you plot points on maps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By passing latitude/longitude array data to the `MapView` component as a property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By passing coordinates to the `MapView.Marker` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take look at the following URLs to get more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/geolocation](https://facebook.github.io/react-native/docs/geolocation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/react-community/react-native-maps](https://github.com/react-community/react-native-maps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
