- en: Monitoring the Cloud Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we discussed cloud native application development
    and deploying into a cloud platform for customer usage with higher availability.
    Our work is not finished yet. Infrastructure and application management is altogether
    a separate field or stream which monitors the infrastructure, as well as the application's
    performance, using tools to achieve minimal or zero downtime. In this chapter,
    we will discuss a few of the tools that could help you do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS services, such as CloudWatch, Config, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure services, such as Application Insights, Log Analytics, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the ELK stack for Log Analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source monitoring tools, such as Prometheus and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring on the cloud platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have talked about how to develop the application and deploy it across
    different platforms in order to make it useful for the customer business model.
    However, even after you have developed the application, you will need personnel
    with expertize who will make use of tools to manage your application on the platform,
    which could be a public cloud or on-premise.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will mainly focus on discussing tools or services provided
    by public cloud providers, using those with which we can manage our infrastructure,
    as well as taking care of Application Insights, that is, performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go ahead with discussing tools, here are a few points to consider
    at the time of infrastructure allocation for any application:'
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to perform load testing regularly against a certain set
    of requests. This will help you judge the initial resource requirement for your
    application. A couple of tools that we can mention are Locust ([http://locust.io/](http://locust.io/))
    and JMeter ([https://jmeter.apache.org/](https://jmeter.apache.org/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended to allocate resources with minimal configuration and use tools
    related to auto-scaling that manage your resources based on application usage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There should be minimal manual interference in terms of resource allocation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider all the preceding points. as it is necessary to make sure a monitoring
    mechanism is in place to keep track of resource allocation and application performance.
    Let's discuss the services that are provided by cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: AWS-based services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the services provided by **AWS** (**Amazon Web Services**)
    and their usage in the context of application and infrastructure monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This AWS service keeps track of your AWS resource''s usage and sends you notifications
    based on the Alarm configuration defined. Resources such as AWS billing, Route
    53, ELB, and so on can be tracked. The following screenshot shows one of the alarms
    triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Initially, we have to set up the CloudWatch alarm at [https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#alarm:alarmFilter=ANY](https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#alarm:alarmFilter=ANY).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following screen, where you need to click on the Create
    Alarm button to create your own alarm based on some metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the Create Alarm button. You will get a pop-up wizard asking
    about the metrics that need to be monitored:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot lists all the metrics available, which can be monitored,
    and, for which, an alarm can be set.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screen, we need to check the EC2 metrics. Based on your requirements,
    you can select any metrics, for instance, we will select the NetworkIn metric
    and click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: On the next screen, we need to provide the alarm Name and Description, along
    with Alarm Preview. Also, we need to provide the condition, based on which, the
    alarm will be triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we need to set up the service notification service where notifications
    need to be sent as an email:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have added the details, click on the Create Alarm button to set up
    the alarm.
  prefs: []
  type: TYPE_NORMAL
- en: Now, whenever the NetworkIn metric reaches its threshold, it will send a notification
    over email.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can set up different metrics to monitor resource utilization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to create an alarm is by selecting the Create Alarm button on the
    monitoring section of your resource, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can go through the AWS documentation ([https://aws.amazon.com/documentation/cloudwatch/](https://aws.amazon.com/documentation/cloudwatch/))
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: CloudTrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the most important AWS cloud services which, by default, keeps
    track of any activity on your AWS account, whether it is via console or programmatic.
    We don't need to configure anything in this service. This is needed if your account
    is compromised, or we need to check the resource operations, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot will show a couple of activities related to the account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For more information, you can go through the AWS documentation ([https://aws.amazon.com/documentation/cloudtrail/](https://aws.amazon.com/documentation/cloudtrail/)).
  prefs: []
  type: TYPE_NORMAL
- en: AWS Config service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is another AWS service in which we can check the configuration of the AWS
    resources based on the template rules defined.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this service will need a service role created to access the AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this service, we only need to set up rules based on the template provided.
    The AWS or customer template is used to create checks on the resources that we
    have created as part of our application deployment. In order to add a new rule
    to the service config, go to [https://console.aws.amazon.com/config/home?region=us-east-1#/rules/view](https://console.aws.amazon.com/config/home?region=us-east-1#/rules/view):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screen, we will need to add a new rule, which will evaluate
    all the resources or your specified resource. Click on Add rule to add a new rule,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, select the rule to open the configuration for resource
    monitoring based on resources that need to be tracked.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00223.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is for AWS ec2-instance-in-vpc template config, which
    will help you validate whether or not EC2 is in VPC with the correct config. Here,
    you can specify which VPC needs to be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Save to add a new rule. Once it is evaluated, we will see the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following resource report is shown like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can go through the AWS documentation ([https://aws.amazon.com/documentation/config/](https://aws.amazon.com/documentation/config/))
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the services that are offered by Microsoft Azure, which can
    help you manage your application performance.
  prefs: []
  type: TYPE_NORMAL
- en: Application Insights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This service, offered by Azure, helps you manage application performance, which
    is useful for web developers, helping them detect, triage, and diagnose application
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to set up Application Insights, all you need to know is the application
    and group name in which your infrastructure lies. Now, if you click on the + Sign
    on the left pane, you should see a screen similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00226.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can select Application Insights service, where we need to provide an
    Application Insight name, a group name that needs to be monitored, and the region
    where it needs to be launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it is launched, you will see the following screen, where it will show
    you how to configure your resources with Application Insights. The following are
    some of the metrics described:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Go through the complete reference documentation at [https://docs.microsoft.com/en-us/azure/application-insights/app-insights-profiler](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-profiler),
    which will have complete information on how to configure your Application Insights
    with resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the question that arises is which metrics Application Insights monitors.
    Below are some of the metrics described:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Request rates**, **response time**, **and failure rates**: This gives you
    insights on the type of requests and their response time, which helps with resource
    management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ajax calls**: This will keep track of rates, response time, and failure rates
    for web pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*** Users and sessions details**: This tracks user and session information,
    such as username, login, logout details, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance management**: This tracks CPU, network, and RAM details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host diagnoses**: This is to compute the resources of Azure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exceptions**: This gives you insights on the server and browser exceptions
    reported'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of metrics that you can configure for your system. For more
    information, check out [https://docs.microsoft.com/en-us/azure/application-insights/app-insights-metrics-explorer](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-metrics-explorer).
  prefs: []
  type: TYPE_NORMAL
- en: You can go through the Azure documentation ([https://docs.microsoft.com/en-us/azure/application-insights/](https://docs.microsoft.com/en-us/azure/application-insights/))
    for more information-related Application Insights.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we have been validating and monitoring the applications and their infrastructures
    on cloud platforms. However, a very important question that arises is: What if
    there is an application issue and we have to troubleshoot it? The next section,
    which is about the ELK stack, will help you identify the issue, which could be
    system level or application level.'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to ELK stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ELK stack consists of Elasticsearch, Logstash, and Kibana. All these components
    work together to collect all types of logs that could be system-level logs (that
    is, Syslog, RSYSLOG, and so on) or application-level logs (that is, access logs,
    error logs, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the set up of the ELK stack, you can follow this article, where, along
    with the ELK stack, the Filebeat configuration is used to send logs to Elasticsearch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04](https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04).'
  prefs: []
  type: TYPE_NORMAL
- en: Logstash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logstash needs to be installed on the server from where the logs need to be
    collected and are shipped across to Elasticsearch to create indexes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed Logstash, it is recommended to configure your `logstash.conf`
    file, which is located at `/etc/logstash`, with details such as Logstash log''s
    file rotation (that is `/var/log/logstash/*.stdout`, `*.err`, or `*.log`) or a
    suffix format, such as data format. The following code block is a template for
    your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In order to ship your logs to Elasticsearch, you require three sections in the
    configuration, named INPUT, OUTPUT, and FILTER, which helps them create indexes.
    These sections can either be in a single file or in separate files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Logstash events processing pipeline works as an INPUT-FILTER-OUTPUT section,
    and, each section has its own advantages and usages, some of which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inputs**: This event is needed to get the data from logs files. Some of the
    common inputs are file, which reads file with `tailf`; Syslog, which reads from
    the Syslogs service listening on port `514`; beats, which collects events from
    Filebeat, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filters**: These middle tier devices in Logstash perform certain actions
    on the data based on the defined filters and separate data that meets the criteria.
    Some of them are GROK (structure and parse text based on the defined patter),
    clone (copycat the events by adding or removing fields), and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outputs**: This is the final phase where we pass on the filtered data to
    defined output. There could be multiple output locations where we can pass the
    data for further indexing. Some of the commonly used outputs are Elasticsearch,
    which is very reliable; an easier, convenient platform to save your data, and
    it is much easier to query on it; and graphite, which is an open source tool for
    storing and shows data in the form of graphs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the examples of logs configuration for Syslog:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Input section for Syslog is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Filter section for Syslog is written like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Output section for Syslog is written as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Configuration files to ship logs are usually stored in `/etc/logstash/confd/`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are making separate files for each section, then there is a convention
    for naming files that needs to be followed; for example, an input file should
    be named `10-syslog-input.conf` and a filter file should be named `20-syslog-filter.conf`.
    Similarly, for output, it will be `30-syslog-output.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you want to validate whether your configurations are correct or not,
    you can do so by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For more information on the Logstash configuration, refer to the documentation
    examples at [https://www.elastic.co/guide/en/logstash/current/config-examples.html](https://www.elastic.co/guide/en/logstash/current/config-examples.html).
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elasticsearch ([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch))
    is a Log Analytics tool that helps store and create index out of the bulk of data
    streams based on the configuration with timestamp, which solves the problem of
    developers trying to identify the log related to their issue. Elasticsearch is
    a NoSQL database that is based on the Lucene search engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed Elasticsearch, you can validate the version and cluster
    details by clicking on the following URL: [](http://ip-address) `http://ip-address:9200/`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This proves that Elasticsearch is up and running. Now, if you want to see whether
    logs are being created or not, you can query Elasticsearch using the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://ip-address:9200/_search?pretty`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to see the indexes already created, you can click on the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://ip-address:9200/_cat/indices?v`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00230.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to know more about the Elasticsearch queries, index operations,
    and more, read this article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Kibana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kibana works on the top layer of Elasticsearch, which visualizes the data that
    provides insights on the data received from the environment and helps them make
    required decisions. In short, Kibana is a GUI that is used to search for logs
    from Elasticsearch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed Kibana, the following should appear at `http://ip-address:5601/`,
    which will ask you to create an index and configure your Kibana dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have configured it, the following screen, which shows the logs in
    a format with the timestamp, should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, out of these, we need to create dashboards that will give us the view of
    logs to visualize, which will be in the form of a graph, a pie chart, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: For more information related to the creation of the Kibana dashboard, you can
    go through the Kibana documentation ([https://www.elastic.co/guide/en/kibana/current/dashboard-getting-started.html](https://www.elastic.co/guide/en/kibana/current/dashboard-getting-started.html)).
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to Kibana, some of you might be interested in Grafana ([https://grafana.com/](https://grafana.com/)),
    which is also an analytics and monitoring tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the question arises: how is Grafana different from Kibana? Here is the
    answer to that:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Grafana** | **Kibana** |'
  prefs: []
  type: TYPE_TB
- en: '| The Grafana dashboard focuses on time-series charts based on system metrics
    CPU or RAM. | Kibana is specific to Log Analytics. |'
  prefs: []
  type: TYPE_TB
- en: '| Grafana''s built-in RBA (role-based access) decides the access of dashboard
    for the users. | Kibana doesn''t have control over dashboard access. |'
  prefs: []
  type: TYPE_TB
- en: '| Grafana supports different data sources other than Elasticsearch, such as
    Graphite, InfluxDB, and so on. | Kibana has an integration with the ELK stack,
    which makes it user-friendly. |'
  prefs: []
  type: TYPE_TB
- en: This is about the ELK stack, which gives us insights on the application and
    helps us troubleshoot the application and server issues. In the next section,
    we will discuss an on-premise open source tool called **Prometheus**, which is
    useful for monitoring the activity of different servers.
  prefs: []
  type: TYPE_NORMAL
- en: Open source monitoring tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will mainly discuss the tools that are owned by a third
    party and collect the metrics of the server to troubleshoot application issues.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prometheus ([https://prometheus.io](https://prometheus.io)) is an open source
    monitoring solution that keeps track of your system activity metrics and alerts
    you instantly if there are any actions required from your side. This tool is written
    in **Golang**.
  prefs: []
  type: TYPE_NORMAL
- en: This tool is gaining popularity similar to tools such as Nagios. It collects
    the metrics of the server, but it also provides you with template metrics, such
    as `http_request_duration_microseconds`, based on your requirement, so that you
    can generate a graph out of it using UI to understand it much better and monitor
    it with efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, by default, Prometheus runs on the `9090` port.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Prometheus, follow the instructions provided on the official website
    ([https://prometheus.io/docs/introduction/getting_started/](https://prometheus.io/docs/introduction/getting_started/)).
    Once it is installed and the service is up, try opening `http://ip-address:9090/status`
    to know the status. The following screen shows the build information, that is,
    Version, Revision, and so on, for Prometheus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To know the targets configured with it, use the `http://ip-address:9090/targets`.
    The output will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to generate the graphs, use `http://ip-address:9090/graph` and select
    the metric for which the graph needs to be implemented. The output should be similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, we can request a couple of other metrics that are identified by
    Prometheus, such as a host-up state. The following screenshot shows the host status
    over a certain period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a few components of Prometheus that have a different usage, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AlertManager**: This component will help you set up the alerting for your
    server based on the metrics and define its threshold values. We will need to add
    configuration in the server to set up an alert. Check the documents for AlertManager
    on [https://prometheus.io/docs/alerting/alertmanager/](https://prometheus.io/docs/alerting/alertmanager/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node exporter**: This exporter is useful for the hardware and OS metrics.
    Read more about the different types of exporters at [https://prometheus.io/docs/instrumenting/exporters/](https://prometheus.io/docs/instrumenting/exporters/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pushgateway**: This Pushgateway allows you to run batch jobs to expose your
    metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grafana**: Prometheus has integration with Grafana, which helps dashboards
    to query metrics on Prometheus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has been very interesting in different ways. Starting with tools,
    such as Cloudwatch and Application Insights, which are based on a cloud platforms
    and help you manage your application on cloud platform. Then, it moved toward
    open source tools, which have always been a first choice for developers, as they
    can customize it as per their requirements. We looked at the ELK stack, which
    has always been popular and is frequently used in many organizations in one way
    or another.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have come to the end of this edition of our book, but hopefully, there
    will be another edition, where we will talk about  advanced application development
    and have more testing cases that could be useful for the QA audience as well.
    Enjoy coding!
  prefs: []
  type: TYPE_NORMAL
