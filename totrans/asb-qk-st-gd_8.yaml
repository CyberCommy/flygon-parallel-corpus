- en: Ansible Advanced Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before finishing this book, we wanted to take a brief look at some of the more
    interesting and advanced functionalities of Ansible. These can be handy to further
    enhance your automation. In this chapter, we are going to cover three features:
    Ansible Vault, and its capacity to increase the security of playbooks and roles;
    Ansible Container, to enable full container automation with Ansible; and Ansible
    plugins, with their rich and flexible set of features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Ansible Vault
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure and use Ansible Vault
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of Ansible Container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ansible Container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of Ansible plugins and their features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible Vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to introduce the features, use cases, and best
    practices that are associated with Ansible Vault.
  prefs: []
  type: TYPE_NORMAL
- en: What is Ansible Vault?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible Vault is a tool provided by Ansible that allows its users to encrypt
    secret variables, which can vary from authentication credentials and keys to sensitive
    and personal user information. Ansible Vault creates encrypted files to store
    variables, which can be moved to a secure location if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Vault is integrated transparently into the scripts of Ansible roles
    and playbooks. This means that Vault can encrypt any data structures that are
    located within those scripts. This includes host and group variables, either stored
    in the script or from another location imported using the `include_vars` option. They
    could also be located in the `defaults` or `vars` folder when dealing with an
    Ansible role. Vault can also encrypt task files when there is a need to hide the
    name of a particular variable.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Vault can also be extended to encrypt regular files that are binaries,
    archives, or text files. This feature is used with file management modules such
    as `copy`, `unarchive`, and `script`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible Vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to explore the features of Ansible Vault, we need to make sure we
    have created at least one encrypted file to store our variables in. For this,
    we need to use the `ansible-vault` tool as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A password entry prompt will appear, to ask for the password for the newly created
    Vault file. After typing in the password and confirming it, a new Vault file will
    be created in the specified location. A default text editor will open for us so
    that we can fill in the vault file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible Vault will look for the `EDITOR` environment variable to check which
    system default text editor is to be used when opening vault files. To use a specific
    text editor, we need to change the variable on the fly as follows: `export EDITOR=nano;
    ansible-vault create /home/admin/Vault/vault.yml`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any data that is written in the vault file will be encrypted the moment the
    file gets closed. We can try plotting the content of the text file using the `cat` command–line
    tool as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the tool will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b17d63b4-210d-4464-8be8-cfed1888d951.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Vault files can only be modified properly using the `ansible-vault` command–line
    tool. To do this, we need to use the `edit` option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering the Vault file password chosen during file creation, the default
    text editor should take over to open the file and show its content in clear text
    to allow for easier editing. We can also open the vault file in read-only mode
    using the `view` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Running the `ansible-vault` command–line tool using any option will require
    you to type in the password of the vault file that the action is going to be performed.
    The vault file password can be edited using the `rekey` option: `ansible-vault
    rekey /home/admin/Vault/vault.yml`. We need to type in the original password,
    then the new password, and confirm it.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned earlier, Ansible Vault can encrypt and decrypt files when used
    with file modules. This feature can be used to encrypt files manually and transform
    them into vault files. It is always possible to manually decrypt them later when
    necessary. To perform file encryption, we need to use the `encrypt` option for the `ansible-vault` command–line
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command line will require a password and its confirmation to encrypt and
    secure the newly converted vault file. This file can be used directly in any playbook
    shown in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert the vault file to a normal text file, we use the same command–line
    tool with a different option, `decrypt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After entering the password of the vault file, we should be able to view and
    edit the file using any tool.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices when using Ansible Vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve learned how to create and encrypt vault files, let''s look
    at how to use them properly with Ansible playbooks and roles. To be able to use
    encrypted variables, we need to provide Ansible with the password for the Vault
    file. This can be done simply with an interactive prompt when executing the playbook,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, for a more automated method, you could point to the file where
    the vault password will be stored. This is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The file should be a one-line file containing the password as a string. If
    there is a site vault password, we can always set up a persistent vault password
    file within the Ansible global configuration file by adding the following line
    to the `[defaults]` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: From version 2.3, Ansible has introduced a way to encrypt single vault variables.
    It requires you to use the `encrypt_string` option with the `ansible-vault` command–line
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we are going to use a vault file with a sensitive variable that
    will get called in a playbook. First, we need to make sure the vault file has
    the variable properly defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify the content of the vault file using the `view` option, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e20ed8b-ed16-46fe-8b84-1e466e4da441.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we need to verify that the vault file is included in the playbook and
    the variable is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we execute the playbook while pointing to the location of the vault
    password file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It is a good practice to have a set of two variable files located in the usual
    hosts or group variables folder. You should fill the first file with all the necessary
    variables, and fill the second one only with the variables that are to be encrypted,
    by adding a special prefix to their names. Then, adjust the variables in the first
    file so that they point to the matching prefixed variables in the second file,
    using Jinja2 syntax. Make sure your second file is encrypted using Ansible Vault.
    This method causes less hassle when managing many variables that need to be encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enhance the encryption and decryption speed when using Ansible Vault, it
    is recommended that you have the Python `cryptography` package installed on the
    system. This can be installed easily using Python PyPI: `pip install cryptography`.'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to talk about this very handy feature, which is
    offered by Ansible for its container-focused users.
  prefs: []
  type: TYPE_NORMAL
- en: What is Ansible Container?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible Container is an open source project that helps Ansible users automate
    the building, deployment, and management of their containers. This feature allows
    for better container code management when building compose files and allows you
    to deploy containers on any public or private cloud registries.
  prefs: []
  type: TYPE_NORMAL
- en: With Ansible Container, we can use Ansible features with containers the same
    way as we can with virtual machines and bare-metal hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible Container is not, by default, installed as part of the Ansible original
    installation. We need to install it separately on the container host. To simplify
    the installation, we are going to rely on Python PyPI to install the necessary
    packages. Ansible Container needs a container engine to work, so we need to specify
    one during the install process. The following command line shows how we can install
    Ansible Container with two engines, Docker and Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Ansible Container has a special heavy-lifting container, called the Conductor,
    which is generated during the build process. The Conductor contains all the necessary
    dependencies to build a target container image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ansible command line for managing containers, `ansible-container`, offers
    several functionalities, from development level to testing and production. We
    use the `init` option to create the container folder and initial configuration
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following list of files should be present in the directory in which the
    command line was executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ansible-container` command line also initiates the container building
    process by launching the Conductor container to run the instances and base container
    images that are specified in the `container.yml` file. Then, the Ansible roles
    that are specified in the file are installed in multiple layers of the container.
    All of this is done via the container engine. The full command line should look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also orchestrate a container modification that only updates the container
    image that is affected by the change, without rebuilding all the images, for faster
    development. Before running the following command, we need to make sure that the
    change has been made and saved in the `container.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to upload and build the container images in a cloud registry, we need
    to use the `deploy` option. This option also allows you to generate the Ansible
    code to orchestrate the building of the container images and a production container
    platform when using Kubernetes or Red Hat OpenShift. The full command line should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the files generated by the `init` option, we can identify the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`container.yml`: This is a YAML file that describes the services of the container,
    how to build and run the container, and which repositories to push it to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta.yml`: This contains the necessary information to enable the container
    project to be shared on Ansible Galaxy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-requirements.yml`: This stores the Python dependencies that are used
    by the Conductor container when it is built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirements.yml`: This lists the roles to be used within the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.cfg`: This contains the Ansible configuration to be followed in the
    Conductor container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.dockerignore`: This contains the list of files that are irrelevant to the
    container project. These should be ignored when building and uploading the container
    project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example Ansible container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an example, we are going to create a simple web server. First, we need to
    create our Ansible Container folder and the initial configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we start editing the files that we have created. We start with the `container.yml`
    file and fill it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we fill in the `meta.yml` file in case we need to upload our container
    project to Ansible Galaxy. We need to add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we edit the `requirements.txt` file and add in the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We will leave the `ansible.cfg`, `.dockerignore`, and `ansible-requirements.yml` files
    as they are. We do not have anything to change in these files for this container
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now build our container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Ansible plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to briefly introduce Ansible plugins and talk
    about how we can develop our own.
  prefs: []
  type: TYPE_NORMAL
- en: What are Ansible plugins?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible plugins are pieces of code and functions that add to Ansible's original
    core functionalities. These plugins enable Ansible to control several APIs and
    tools that enable the correct functioning of several modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default installation of Ansible includes several essential plugins, which
    are shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Action plugins:** These are frontend plugins for the modules. They can execute
    actions on the master host before calling the modules themselves.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cache plugins:** These are background plugins that are used to cache host
    facts. This can help with optimizing fact gathering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Callback plugins:** These help the monitoring and log collection tools to
    work with Ansible for optimized monitoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection plugins:** These are responsible for communication with remote
    hosts that support different types of connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory plugins:** These plugins help generate an inventory from specified hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shell plugins:** These are command controllers that are used to check whether
    commands are properly formatted and conform with the target machines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strategy plugins:** These control the execution of Ansible plays and the
    pipelining of tasks and schedules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vars plugins:** These inject variables that are defined in the inventory
    or the group or host variables, but are required for the execution of the task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing Ansible plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible does come with many plugins included in its package, but it is always
    possible to develop our own plugins. This will help extend Ansible's features.
    Ansible does help developers create new plugins by providing base classes that
    host several pre-written methods and functions which can be used with new plugins
    to prevent unnecessary coding. Also, when we have finished writing a plugin, we
    can easily write a simple unit test for it using Ansible's plugin API.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered a few handy features offered by Ansible for
    more advanced uses. We first looked at Ansible Vault, which provides enhanced
    security during infrastructure automation. We then looked at Ansible Container,
    which covers the new trend of building and managing containers. Finally, we looked
    at Ansible plugins and how they allow us to personalize our automation.
  prefs: []
  type: TYPE_NORMAL
- en: With this chapter, we finish our *Ansible QuickStart Guide*. This is not, however,
    the end of the journey; Ansible has a lot more to offer and the best way to truly
    master it is to carry out as many projects as possible. There will always be other
    books, web forums, and blogs to help guide you.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the Ansible documentation website: [https://docs.ansible.com/ansible/latest](https://docs.ansible.com/ansible/latest).'
  prefs: []
  type: TYPE_NORMAL
