- en: Chapter 1. Getting Started with React and Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different ways to build modern web application with JavaScript
    and CSS, including a lot of different tool choices, and a lot of new theory to
    learn. This book introduces you to ReactJS and Bootstrap which you will likely
    come across as you learn about modern web app development. They are both used
    for building fast and scalable user interfaces. React is famously known as a the
    (view) in MVC. When we talk about defining *M* and *C* we need to look somewhere
    else or we can use other frameworks like Redux and Flux to handle the remote data.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to learn code is to write code, so we're going to jump right in.
    To show you just how easy it is to get up and running with Bootstrap and ReactJS,
    we're going to  cover theory and will make a super simple application that will
    allow us to build a form and have it displayed on the page in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can write code in whichever way you feel comfortable. Try to create small
    components/code samples, which will give you more clarity/understanding of any
    technology. Now, let''s see how this book is going to make your life easier when
    it comes to Bootstrap and ReactJS. We are going to cover some theoretical part
    and build two simple, real-time examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Hello World! with ReactJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple static form application with React and Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook has really changed the way we think about frontend UI development with
    the introduction of React. One of the main advantages of this component-based
    approach is that it is easy to understand, as the view is just a function of the
    properties and state.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static form example with React and Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React (sometimes called React.js or ReactJS) is an open-source JavaScript library
    that provides a view for data rendered as HTML. Components have been used typically
    to render React views that contain additional components specified as custom HTML
    tags. React gives you a trivial virtual DOM, powerful views without templates,
    unidirectional data flow, and explicit mutation. It is very methodical in updating
    the HTML document when the data changes; and provides a clean separation of components
    on a modern single-page application.
  prefs: []
  type: TYPE_NORMAL
- en: Observing the following example, we will have a clear idea of normal HTML encapsulation
    and ReactJS custom HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following JavaScript code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following ReactJS code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As your app comes into existence and develops further, it's advantageous to
    ensure that your components are used in the right manner. The React app consists
    of reusable components, which makes code reuse, testing, and separation of concerns
    easy.
  prefs: []
  type: TYPE_NORMAL
- en: React is not only the *V* in MVC, but it also has stateful components (stateful
    components remember everything within `this.state`). It handles mapping from input
    to state changes, and it renders components. In this sense, it does everything
    that an MVC does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at React''s component life cycle and its different levels. We will
    discuss more on this in the forthcoming chapters. Observe the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS](graphics/image_01_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: React isn't an MVC framework; it's a library for building a composable user
    interface and reusable components. React is used at Facebook in its production
    stages and [instagram.com](https://www.instagram.com/?hl=en) is entirely built
    on React.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we start to make an application with ReactJS, we need to do some setup,
    which just involves an HTML page and includes a few files. First, we create a
    directory (folder) called `chapter1`. Open it up in any of your code editors.
    Create a new file called `index.html` directly inside it and add the following
    HTML5 boilerplate code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is a standard HTML page that we can update once we have included the React
    and Bootstrap libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create a couple of folders inside the `chapter1` folder named
    `images`, `css`, and `js` (JavaScript) to make your application manageable. Once
    you have completed the folder structure it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the environment](graphics/image_01_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing ReactJS and Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have finished creating the folder structure, we need to install both
    our frameworks, ReactJS and Bootstrap. It's as simple as including JavaScript
    and CSS files in your page. We can do this via a **Content Delivery Network**
    (**CDN**), such as Google or Microsoft, but we are going to fetch the files manually
    in our application so we don't have to be dependent on the Internet and can work
    offline.
  prefs: []
  type: TYPE_NORMAL
- en: Installing React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we have to go to this URL [https://facebook.github.io/react/](https://facebook.github.io/react/)
    and hit the **Download React v15.1.0** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing React](graphics/image_01_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will give you a ZIP file of the latest version of ReactJS that includes
    ReactJS library files and some sample code for ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we will only need two files in our application: `react.min.js` and
    `react-dom.min.js` from the `build` directory of the extracted folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few steps we need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy `react.min.js` and `react-dom.min.js` to your project directory, the `chapter1/js`
    folder, and open up your `index.html` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you just need to add the following script in your page''s `head` tag section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to include the compiler in our project to build the code because
    right now we are using tools such as npm. We will download the file from the following
    CDN path, [https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js](https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js),
    or you can give the CDN path directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `head` tag section will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what the final structure of your `js` folder will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing React](graphics/image_01_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap is an open source frontend framework maintained by Twitter for developing
    responsive websites and web applications. It includes HTML, CSS, and JavaScript
    code to build user interface components. It's a fast and easy way to develop a
    powerful mobile-first user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap grid system allows you to create responsive 12-column grids, layouts,
    and components. It includes predefined classes for easy layout options (fixed
    width and full width). Bootstrap has a dozen prestyled reusable components and
    custom jQuery plugins, such as button, alerts, dropdown, modal, tooltip tab, pagination,
    carousal, badges, icons, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we need to install Bootstrap. Visit [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)and
    hit on the **Download Bootstrap** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Bootstrap](graphics/image_01_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This includes the compiled and minified version of `css` and `js` for our app;
    we just need the CSS `bootstrap.min.css` and `fonts` folder. This style sheet
    will provide you with the look and feel of all the components, and is responsive
    layout structure for our application. Previous versions of Bootstrap included
    icons as images but, in version 3, icons have been replaced with fonts. We can
    also customize the Bootstrap CSS style sheet as per the component used in your
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the ZIP folder and copy the Bootstrap CSS from the `css` folder to your
    project folder's CSS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now copy the `fonts` folder of Bootstrap into your project root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your `index.html` in your editor and add this `link` tag in your `head`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. Now we can open up `index.html` again, but this time in your browser,
    to see what we are working with. The following is the code that we have written
    so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So now we've got the ReactJS and Bootstrap style sheet from where we've initialized
    our app. Now let's start to write our first Hello World app using `ReactDOM.render()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first argument of the `ReactDOM.render` method is the component we want
    to render and the second is the DOM node to which it should mount (append) to.
    Observe the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In order to translate it to vanilla JavaScript, we use wraps in our React code,
    `<script type"text/babel">`, tag that actually performs the transformation in
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start out by putting one `div` tag in our `body` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the `script` tag with React code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The XML syntax of JavaScript is called JSX. We will explore this in further
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the HTML page in your browser. If you see **Hello, world!** in
    your browser then we are on a good track. Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using React](graphics/image_01_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, you can see it shows **Hello, world!** in your
    browser. That''s great. We have successfully completed our setup and built our
    first Hello World app. Here is the complete code that we have written so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Static form with React and Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have completed our first Hello World app with React and Bootstrap and everything
    looks good and as expected. Now it's time do more and create one static login
    form, applying the Bootstrap look and feel to it. Bootstrap is a great way to
    make your app a responsive grid system for different mobile devices and apply
    the fundamental styles on HTML elements with the inclusion of a few classes and
    divs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The responsive grid system is an easy, flexible, and quick way to make your
    web application responsive and mobile-first, that appropriately scales up to 12
    columns per device and viewport size.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's start to make an HTML structure to follow the Bootstrap grid system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `div` and add a `className .container` for (fixed width) and `.container-fluid`
    for (full width). Use the `className` attribute instead of using `class`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As we know, `class` and `for` are discouraged as XML attribute names. Moreover,
    these are reserved words in many JavaScript libraries so, to have a clear difference
    and identical understanding, instead of using `class` and `for`, we can use `className`
    and `htmlFor`. Create a `div` and add the `className="row"`. The `row` must be
    placed within `.container-fluid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create columns that must be immediate children of a row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`.row` and `.col-xs-4` are predefined classes that are available for quickly
    making grid layouts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `h1` tag for the title of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Grid columns are created by the given specified number of `col-sm-*` of 12
    available columns. For example, if we are using a four column layout, we need
    to specify to `col-sm-3` lead-in equal columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class name** | **Devices** |'
  prefs: []
  type: TYPE_TB
- en: '| `col-sm-*` | Small devices |'
  prefs: []
  type: TYPE_TB
- en: '| `col-md-*` | Medium devices |'
  prefs: []
  type: TYPE_TB
- en: '| `col-lg-*` | Large devices |'
  prefs: []
  type: TYPE_TB
- en: 'We are using the `col-sm-*` prefix to resize our columns for small devices.
    Inside the columns, we need to wrap our form elements `label` and `input` tags
    into a `div` tag with the `form-group` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Forget the style of Bootstrap; we need to add the `form-control` class in our
    input elements. If we need extra padding in our `label` tag then we can add the
    `control-label` class on the `label`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly add the rest of the elements. I am going to add a `password` and
    `submit` button.
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of Bootstrap, form elements were usually wrapped in an
    element with the `form-action` class. However, in Bootstrap 3, we just need to
    use the same `form-group` instead of `form-action`. We will discuss Bootstrap
    classes and responsiveness in more detail in [Chapter 2](ch02.html "Chapter 2. Lets
    Build a Responsive Theme with React-Bootstrap and React"), *Lets Build a Responsive
    Theme with React-Bootstrap and React*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our complete HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create one object inside the `var loginFormHTML` script tag and assign
    this HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will pass this object in the `React.DOM()` method instead of directly passing
    the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Our form is ready. Now let''s see how it looks in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Static form with React and Bootstrap](graphics/image_01_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The compiler is unable to parse our HTML because we have not enclosed one of
    the `div` tags properly. You can see in our HTML that we have not closed the wrapper
    `container-fluid` at the end. Now close the wrapper tag at the end and open the
    file again in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you hand code (write) your HTML code, please double-check your start
    tag and end tag. It should be written/closed properly, otherwise it will break
    your UI/frontend look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML after closing the `div` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can check your page on a browser and you will be able to see the form
    with the look and feel as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Static form with React and Bootstrap](graphics/image_01_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now it''s working fine and looks good. Bootstrap also provides two additional
    classes to make your elements smaller and larger: `input-lg` and `input-sm`. You
    can also check the responsive behavior by resizing the browser. Observe the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Static form with React and Bootstrap](graphics/image_01_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That looks great. Our small static login form application is ready with responsive
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: As this is an introductory chapter, a question might come to your mind of how
    will React be helpful or beneficial?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s your answer:'
  prefs: []
  type: TYPE_NORMAL
- en: Rendering your component is very easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading a component's code would be very easy with help of JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSX will also help you to check your layout as well as checking components plug
    in with each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can test your code easily and it also allows other tools to integrate for
    enhancement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React is a view layer, and you can also use it with other JavaScript frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding points are very high-level and we will see more benefits in detail
    with the upcoming examples in the chapters that follow.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our simple static login form application and Hello World examples are looking
    great and working exactly how they should, so let's recap what we've learned in
    the this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, we saw just how easy it is to get ReactJS and Bootstrap installed
    with the inclusion of JavaScript files and a style sheet. We also looked at how
    the React application is initialized and started building our first form application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Hello World app and form application which we have created demonstrates
    some of React''s and Bootstrap''s basic features such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: ReactDOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browserify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Bootstrap, we worked towards having a responsive grid system for different
    mobile devices and applied the fundamental styles of HTML elements with the inclusion
    of a few classes and divs.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw the framework's new mobile-first responsive design in action without
    cluttering up our markup with unnecessary classes or elements.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Lets Build a Responsive Theme with React-Bootstrap
    and React"), *Lets Build a Responsive Theme with React-Bootstrap and React*, we
    will delve into Bootstrap's features and how to use the grid. We are going to
    explore some more Bootstrap fundamentals and introduce the project we are going
    to build over the course of this book.
  prefs: []
  type: TYPE_NORMAL
