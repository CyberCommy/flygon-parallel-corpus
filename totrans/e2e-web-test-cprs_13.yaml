- en: '*Chapter 10*: Exercise – Navigation and Network Requests'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started on this chapter, it is important for you to understand
    that our focus in this third section of the book will be based on exercises and
    examples that will help you hone your testing skills and build knowledge that
    we may not have been able to cover in the previous chapters of this book. We will
    take a hands-on approach in this section with the goal being to work on as many
    examples and exercises as possible. Before we dive into this chapter, it is critical
    that you have gone through every chapter and are now looking to build upon the
    theoretical knowledge that you gained as we learned how Cypress can be used for
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on exercises and examples that cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing navigation requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing network requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced navigation request configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you've worked through each of these exercises, you will have the confidence
    to become a better tester and to get into more complex testing in areas of navigation
    and network requests.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, it is recommended that you clone the repository that contains
    source code and all the tests that we will write in this chapter from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub repository for this chapter can be found at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found in the `chapter-10` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Inside our GitHub repository, we have a finance test application that we will
    use for our different examples and exercises on Cypress navigation and Cypress
    requests as we go through this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important note: running commands in Windows'
  prefs: []
  type: TYPE_NORMAL
- en: 'NB: The default Windows Command Prompt and PowerShell do not correctly resolve
    the directory locations.'
  prefs: []
  type: TYPE_NORMAL
- en: Kindly follow the Windows commands listed further that work exclusively on Windows
    operating systems suffixed with the word `*windows`.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure the test application is running on your machine, run the following
    commands from the root folder directory of the application on your terminal in
    your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `npm run cypress-init` command will install the dependencies that the application
    requires to run and the `npm run cypress-app` command, on the other hand, will
    just start the application. Optionally, you can reset the application state using
    the `npm run cypress-app-reset` command. Resetting the application removes any
    data that has been added that was not part of the application, taking the application
    state back to when you cloned the repository. We can further run the commands
    in our terminal just as they are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We have two main folders in our `chapter-10` directory, one folder contains
    the application that we will use for our examples and testing exercises while
    the second folder contains our Cypress tests for our test application. To properly
    run our tests, we have to run both our application and the Cypress tests, as the
    tests run on the live application that runs locally on our machines. It is important
    to also note that the application will require us to use port *3000* for the frontend
    application and port *3001* for the backend application.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering the preceding commands will ensure that you will be able to run the
    application, reset the application state, and even install the dependencies for
    your application. Let's now get started with navigation requests.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing navigation requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cypress navigation involves the behavior of navigating to the web pages of an
    application. In a lot of the tests that we have covered in this book, you might
    remember that before the tests, we have the `cy.visit()` command, which contains
    the URL of the page we are navigating to or that is being tested. The `cy.visit()`
    command is an example of a navigation command and assists us in making navigation
    requests in our Cypress frontend tests. In this section, we will cover different
    Cypress navigation commands by using examples and also exercises. By the end of
    this section, we will have a deeper understanding of Cypress navigation commands,
    which will help us build on the navigation knowledge that we already have from
    previous chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: cy.visit()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use `cy.visit()` in Cypress to navigate to a remote page of the application
    under test. By using this command, we can also pass in configuration information
    to the command and configure options such as the method, URL, timeout options,
    and even query parameters; we will dive into the configuration options of this
    command later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In our GitHub repository, in the `chapter-10/cypress-realworld-app` directory,
    we have an application that we will use for our examples and also for our exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Our finance application located in the `chapter-10/cypress-realworld-app` directory
    records transactions. With the application, we can create transactions by either
    requesting or paying users for the transactions that already exist in the application.
    We can see notifications of transactions that have taken place and can also view
    the contacts and the log of the transactions that have taken place.
  prefs: []
  type: TYPE_NORMAL
- en: The application utilizes a JSON database and therefore it is a tad slow when
    loading all the data into our application. In our tests, we have implemented a
    "safety switch" to prevent flaky tests by ensuring that in the `beforeEach` method,
    we wait for all the initial **XHR** (**XMLHttpRequest**) requests to load data
    before we begin our test execution requests. See more information on the `beforeEach`
    method in the following code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our first example, in `navigation.spec.js`, as shown in the following code
    block, we will use the `cy.visit()` command to navigate to the notification page
    of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code block illustrates the usage of the `cy.visit()` command where we visit
    a remote URL to the notifications route (`http://localhost:3000/notifications`),
    then verify that the remote URL we visited is what we expected. In our navigation
    command, we have also added the timeout option, which ensures that, before failing
    the navigation test, Cypress will wait for 30 seconds for the "page load" event
    before it fails the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our test being executed and Cypress waiting
    for all the data that has to be loaded from our JSON database by waiting on the
    XHR requests being received from the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – XHR API requests and responses'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_10.1_B15616.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – XHR API requests and responses
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, we are navigating to the `/signin` page, then after waiting
    for all the resources to be loaded, we are using the Cypress `cy.visit()` command
    to navigate to the `/notifications` page, which is visible on the right side on
    the test application preview. This is further validated by our test assertion,
    which validates that the visited URL contains the name `notifications`. The following
    exercise will help you better understand how to implement tests using the `cy.visit()`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the financial application provided in the GitHub repository and located
    in the root directory in the `cypress-real-world-app` folder, carry out the following
    exercises to test your knowledge on the `cy.visit()` command:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to our test application and navigate to the `http://localhost:3000/bankaccounts`
    URL using the `cy.visit()` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new bank account, and then check whether or not the application redirects
    back to the `/bankaccounts` URL after the new bank account creation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the application and, using the `cy.visit()` command, try to navigate
    to `http://localhost:3000/signin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a successful login event for a test user, verify that the URL redirects
    to the dashboard instead of the `/signin` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The solutions to the exercise can be found in the `chapter-10/integration/navigation/navigation-exercise-solutions`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: This exercise will test your ability to understand the `cy.visit()` command,
    ensuring that, as a Cypress user, you can effectively use the command to navigate
    to different URLs and also pass in parameters and configuration options to the
    command.
  prefs: []
  type: TYPE_NORMAL
- en: cy.go()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Cypress `cy.go()` navigation command enables a user to navigate forward
    or backward in the application under test. While using the `cy.go()` command,
    passing the `'back'` option to the command will lead the browser to navigate to
    the previous page of the browser history while the `'forward'` option will lead
    the browser to navigate to a forward history of the page. We can also use this
    command to click the forward and back button by passing in number options as parameters,
    where the `'-1'` option will navigate the application *back* while passing `'1'`
    will lead to *forward* navigation from the browser history.
  prefs: []
  type: TYPE_NORMAL
- en: By using `cy.go()`, we are able to manipulate the browser's navigation behavior
    by being able to step back to a previous page of a browser's history and also
    stepping forward to the next page of the browser's history.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We are only using `/bankaccounts` in our `cy.visit()` command as we have already
    declared `baseUrl` in our `cypress.json` file. `baseUrl` is the full version of
    the URL that we do not need to repeat every time we are using it in the `cy.visit()`
    and `cy.intercept()` commands. You can view more information in the GitHub repository
    that you cloned when starting this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code block, we will use our finance application to verify
    that we can navigate back to the dashboard after navigating to the `/bankaccounts`
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this test, after navigating to the `/bankaccounts` URL, we then use the Cypress
    inbuilt `cy.go('back')` command to navigate back to the dashboard URL, which we
    then verify that we have successfully navigated back to. The following exercise
    will shed more light on how to use the `cy.go()` command.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercises to test your knowledge on the `cy.go()` command:'
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, on the transactions dashboard, click on the **Friends** tab,
    and then on the **Mine** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Cypress to navigate back to the **Friends** tab using the `cy.go()` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, click on the **New** button located at the top right of the
    application navigation bar and create a new transaction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then navigate back to the dashboard page and back to the new transactions using
    the `cy.go()` Cypress command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The solutions to the exercise can be found in the `chapter-10/integration/navigation/navigation-exercise-solutions`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: This exercise will help in building your skills for testing forward and back
    navigation using the `cy.go()` command. It will also assist in building your confidence
    when working with navigation when testing applications.
  prefs: []
  type: TYPE_NORMAL
- en: cy.reload()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Cypress `cy.reload()` command is responsible for reloading a page. The
    command has only one set of options that can be passed to it, which is either
    to reload the page while clearing the cache or to reload the page with the cache
    being kept in the application memory. When a Boolean value of `true` is passed
    to the `cy.reload()` method, Cypress does not reload the page with the cache;
    instead, it clears the cache and loads new information about the page. The omission
    of the Boolean value leads Cypress to reload the page with the cache enabled.
    In the following code block, we are reloading the dashboard after logging into
    our application; this will refresh the state of our dashboard page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this test, if we had any cached items in our browser, Cypress will reload
    the page and invalidate the cache to ensure that a new state and cache of the
    page is created as our test is being executed. Let's look at the following exercise
    for more scenarios on the use of the `cy.reload()` command.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercise to test your knowledge on the `cy.reload()` command:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Account** menu item where we have the user settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the first and second name of your test user, before clicking on the **Save**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the page and verify that the `cy.reload()` command resets all the settings
    that were not yet saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The solutions to the exercise can be found in the `chapter-10/integration/navigation/navigation-exercise-solutions`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we have learned that the reload command only resets items
    that are temporarily stored in the browser. By using the `cy.reload()` command,
    we have an understanding of how to reset the cached storage of our application
    and how to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Recap – implementing navigation requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how navigation requests work on Cypress by evaluating
    examples and doing exercises. We also explored various navigation commands such
    as `cy.visit()`, `cy.go()`, and `cy.reload()`, which all play a major role when
    executing navigation requests in Cypress. In the next section, we will be looking
    at how we implement network requests using a hands-on approach of exercises and
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing network requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network requests involve the handling of AJAX and XHR requests to the backend
    services. Cypress handles this with its in-built `cy.request()` and `cy.intercept()`
    commands. In this section, we will take a hands-on approach and dive deep into
    how we implement network requests in Cypress using examples and exercises. We
    have previously interacted with network requests in [*Chapter 9*](B15616_09_Final_NM_ePUB.xhtml#_idTextAnchor196),
    *Advanced Uses of Cypress Test Runner*, of this book and this chapter will help
    you build on the theoretical knowledge and concepts that you are already familiar
    with.
  prefs: []
  type: TYPE_NORMAL
- en: cy.request()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Cypress `cy.request()` command is responsible for making HTTP requests
    to API endpoints. This command can be used to execute API requests and receive
    responses without the need to create or import an external library to make and
    handle our API requests and responses. Our Cypress finance application uses a
    backend API that is based on a JSON database. To learn how the `cy.request()`
    command works, we will make requests to the database and check the responses.
    The following code block is a request to fetch all the transactions from our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding test, we are verifying that our backend responds with a `200`
    status code and with the transactions data, which is an array. We will learn more
    about the `cy.request()` command in the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercises to test your knowledge on the `cy.server()` command. The solutions to
    the exercise can be found in the `chapter-10/integration/navigation/network-requests-excercise-solutions`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, using your browser, investigate the XHR requests that are loaded
    by our `cypress-realworld` application when we first log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the observation, write a test that returns data for the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Contacts in the application
  prefs: []
  type: TYPE_NORMAL
- en: Notifications in the application
  prefs: []
  type: TYPE_NORMAL
- en: By doing this exercise, you will have a better understanding of the `cy.request()`
    command and increase your knowledge of how Cypress requests work. Next, we will
    look at Cypress routing.
  prefs: []
  type: TYPE_NORMAL
- en: cy.intercept()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cy.intercept()` command manages the behavior of HTTP requests at the network
    layer of the tests. With the command, we can tell whether XHR requests were made
    and whether the responses to our requests match what we expect. We can even use
    the command to stub responses from routes. With `cy.intercept()`, we can dissect
    responses and ensure that we actually have the correct responses for our application
    under test. The `cy.intercept()` command gives us full access to all the HTTP
    requests of our Cypress tests at all stages.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We have to call `cy.intercept()` before we reference them in our tests so that
    the routes are recorded before we call them in our tests and, from the following
    test, we can observe that behavior in the `beforeEach()` command block. In the
    test that follows, we called the `cy.intercept` command before we started running
    our Cypress test.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code block, found in the `network-request.spec.js` file, we
    are verifying that we have a response of the user information when a correct login
    request is made by the application under test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this code block, we are verifying that the application made a `POST` request
    to the login endpoint and we received a successful status of `200`, which is a
    successful login. The `cy.login()` command navigates to the login page of the
    application. We will interact with the `cy.intercept()` command further in the
    following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercises to test your knowledge on the `cy.intercept()` command. The solutions
    to the exercise can be found in the `chapter-10/integration/navigation/network-requests-exercise-solutions`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the test application and navigate to the account page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Cypress `cy.route()` command to check whether Cypress verifies that
    a user is logged in when changing the user information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Time for a quick recap.
  prefs: []
  type: TYPE_NORMAL
- en: Recap – implementing network requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we explored how Cypress network requests work, and we did this
    by using examples and exercises to understand how `cy.request()` and `cy.intercept()`
    are utilized in Cypress tests. Using the examples and the exercises, we also got
    to expand our knowledge on how we use commands such as `cy.intercept()` to manipulate
    and stub. Now that we know about network requests and can comfortably write tests
    involving Cypress network requests, in the next section, we will dive into the
    advanced configuration of navigation requests.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced navigation request configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigation is one of the most important aspects of properly running tests. By
    using the `cy.visit()`, `cy.go()`, and even `cy.reload()` commands, we have the
    ability to know what shortcuts to take when writing our tests. The navigation
    commands also significantly simplify test workflows. Most of the frontend tests
    require navigation and, therefore, grasping the advanced configuration will not
    only make your life easier but will also lead to a smoother experience while writing
    tests. In this section, we will focus mainly on the Cypress advanced command configuration
    for `cy.visit()` as it is the main navigation command for Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: cy.visit() configuration options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table shows the configuration options for the `cy.visit()` command
    and the default values that are loaded when no options are passed to the option
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/B15616_10_Table_1a.jpg)![](image/B15616_10_Table_1b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `cy.visit()` command accepts different types of parameters and this determines
    the configuration and the options that are passed to it. The following are the
    parameters that the command accepts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuration with only the URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuration with the URL and options as an object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuration with only options as an object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And it's recap time!
  prefs: []
  type: TYPE_NORMAL
- en: Recap – advanced navigation request configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how we can configure the `cy.visit()` command using
    different options and also the different types of parameters that the command
    accepts. We also learned different default options that Cypress provides for us
    when they have none and have been passed with the `options` object, and this makes
    the process of using the `cy.visit()` command easy as we only provide to the command
    the options that we need to override in the test.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how Cypress performs navigation, how requests are
    created, and how Cypress interprets and returns them for our test execution process.
    We took a hands-on approach to learning about the three fundamental Cypress navigation
    commands and also the three commands that Cypress uses for making and interpreting
    requests. The exercises provided a channel for you to get out of your comfort
    zone and do some research on advanced uses of Cypress and how we can integrate
    logic and the knowledge we have garnered in this book to write meaningful tests
    that add value to the applications being tested. Finally, we looked at the advanced
    configuration options of the `cy.visit()` command. I am confident that in this
    chapter, you learned the skills of handling and implementing navigation and network
    requests in tests and also configuring navigation requests.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have practically explored navigation and requests in Cypress using
    a hands-on approach, we will use the same approach in the next chapter to tackle
    stubbing and spying on tests using Cypress.
  prefs: []
  type: TYPE_NORMAL
