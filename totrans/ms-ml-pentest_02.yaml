- en: Phishing Domain Detection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social engineering is one of the most dangerous threats facing every individual
    and modern organization. Phishing is a well-known, computer-based, social engineering
    technique. Attackers use disguised email addresses as a weapon to target large
    companies. With the huge number of phishing emails received every day, companies
    are not able to detect all of them. That is why new techniques and safeguards
    are needed to defend against phishing. This chapter will present the steps required
    to build three different machine learning-based projects to detect phishing attempts,
    using cutting-edge Python machine learning libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: A social engineering overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The steps for social engineering penetration testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Building a real-time phishing attack detector using different machine learning
    models:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing detection with logistic regression
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing detection with decision trees
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spam email detection with **natural language processing** (**NLP**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to use the following Python libraries:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: scikit-learn Python (≥ 2.7 or ≥ 3.3)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy  (≥ 1.8.2)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NLTK
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have not installed them yet, please make sure that they are installed
    before moving forward with this chapter. You can find the code files at [https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/tree/master/Chapter02).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering overview
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social engineering, by definition, is the psychological manipulation of a person
    to get useful and sensitive information from them, which can later be used to
    compromise a system. In other words, criminals use social engineering to gain
    confidential information from people, by taking advantage of human behavior.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Social Engineering Engagement Framework
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Social Engineering Engagement Framework** (**SEEF**) is a framework developed
    by Dominique C. Brack and Alexander Bahmram. It summarizes years of experience
    in information security and defending against social engineering. The stakeholders
    of the framework are organizations, governments, and individuals (personals). Social
    engineering engagement management goes through three steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Pre-engagement process**: Preparing the social engineering operation'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**During-engagement process**: The engagement occurs'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Post-engagement process**:Delivering a report'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are many social engineering techniques used by criminals:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Baiting**: Convincing the victim to reveal information, promising him a reward
    or a gift.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impersonation**: Pretending to be someone else.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dumpster diving**: Collecting valuable information (papers with addresses,
    emails, and so on) from dumpsters.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shoulder surfing**: Spying on other peoples'' machines from behind them,
    while they are typing.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phishing**: This is the most often used technique; it occurs when an attacker,
    masquerading as a trusted entity, dupes a victim into opening an email, instant
    message, or text message.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps of social engineering penetration testing
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Penetration testing simulates a black hat hacker attack in order to evaluate
    the security posture of a company for deploying the required safeguard. Penetration
    testing is a methodological process, and it goes through well-defined steps. There
    are many types of penetration testing:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: White box pentesting
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Black box pentesting
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grey box pentesting
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To perform a social engineering penetration test, you need to follow the following
    steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: Building real-time phishing attack detectors using different machine learning
    models
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next sections, we are going to learn how to build machine learning phishing
    detectors. We will cover the following two methods:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Phishing detection with logistic regression
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing detection with decision trees
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing detection with logistic regression
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to build a phishing detector from scratch with
    a logistic regression algorithm. Logistic regression is a well-known statistical
    technique used to make binomial predictions (two classes).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Like in every machine learning project, we will need data to feed our machine
    learning model. For our model, we are going to use the UCI Machine Learning Repository
    (Phishing Websites Data Set). You can check it out at [https://archive.ics.uci.edu/ml/datasets/Phishing+Websites](https://archive.ics.uci.edu/ml/datasets/Phishing+Websites):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: 'The dataset is provided as an `arff` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'The following is a snapshot from the dataset:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.gif)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: 'For better manipulation, we have organized the dataset into a `csv` file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'As you probably noticed from the attributes, each line of the dataset is represented
    in the following format – *{30 Attributes (having_IP_Address URL_Length, abnormal_URL
    and so on)} + {1 Attribute (Result)}*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: For our model, we are going to import two machine learning libraries, NumPy
    and scikit-learn, which we already installed in [Chapter 1](part0021.html#K0RQ0-49a67f1d6e7843d3b2296f38e3fe05f5), *Introduction
    to Machine Learning in Pentesting*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the Python environment and load the required libraries:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, load the data:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Identify the `inputs` (all of the attributes, except for the last one) and
    the `outputs` (the last attribute):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the previous chapter, we discussed how we need to divide the dataset into
    training data and testing data:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/00055.gif)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'Create the scikit-learn logistic regression classifier:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Train the classifier:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Make predictions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s print out the accuracy of our phishing detector model:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/00056.gif)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: The accuracy of our model is approximately 85%. This is a good accuracy, since
    our model detected 85 phishing URLs out of 100\. But let's try to make an even
    better model with decision trees, using the same data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Phishing detection with decision trees
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build the second model, we are going to use the same machine learning libraries,
    so there is no need to import them again. However, we are going to import the
    decision tree classifier from `sklearn`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the `tree.DecisionTreeClassifier()` scikit-learn classifier:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Train the model:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Compute the predictions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Calculate the accuracy:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, print out the results:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/00057.gif)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: The accuracy of the second model is approximately 90.4%, which is a great result,
    compared to the first model. We have now learned how to build two phishing detectors,
    using two machine learning techniques.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: NLP in-depth overview
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NLP is the art of analyzing and understanding human languages by machines.
    According to many studies, more than 75% of the used data is unstructured. Unstructured
    data does not have a predefined data model or not organized in a predefined manner.
    Emails, tweets, daily messages and even our recorded speeches are forms of unstructured
    data. NLP is a way for machines to analyze, understand, and derive meaning from
    natural language. NLP is widely used in many fields and applications, such as:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Real-time translation
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic summarization
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sentiment analysis
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speech recognition
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build chatbots
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generally, there are two different components of NLP:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '**Natural Language Understanding (NLU)**: This refers to mapping input into
    a useful representation.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural Language Generation (NLG)**: This refers to transforming internal
    representations into useful representations. In other words, it is transforming
    data into written or spoken narrative. Written analysis for business intelligence
    dashboards is one of NLG applications.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every NLP project goes through five steps. To build an NLP project the first
    step is identifying and analyzing the structure of words. This step involves dividing
    the data into paragraphs, sentences, and words. Later we analyze the words in
    the sentences and relationships among them. The third step involves checking the
    text for  meaningfulness. Then, analyzing the meaning of consecutive sentences.
    Finally, we finish the project by the pragmatic analysis.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: Open source NLP libraries
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many open source Python libraries that provide the structures required
    to build real-world NLP applications, such as:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Apache OpenNLP
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GATE NLP library
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stanford NLP
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And, of course, **Natural Language Toolkit** (**NLTK**)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to install many open source machine
    learning Python libraries, including the NLTK. Let's fire up our Linux machine
    and try some hands-on techniques.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Python terminal and import `nltk`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Download a book type, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/00059.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'If you want to list the available resources that we already downloaded in the
    previous chapter, type `l`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.gif)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: 'You can also type:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/00061.gif)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'To get text from a link, it is recommended to use the `urllib` module to crawl
    a website:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As a demonstration, we are going to load a text called `Security.in.Wireless.Ad.Hoc.and.Sensor.Networks`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'We crawled the text file, and used `len` to check its length and `raw[:50]`
    to display some content. As you can see from the screenshot, the text contains
    a lot of symbols that are useless for our projects. To get only what we need,
    we use **tokenization**:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To summarize what we learned in the previous section, we saw how to download
    a web page, tokenize the text, and normalize the words.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Spam detection with NLTK
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to build our spam detector using the NLTK. The principle of
    this type of classifier is simple; we need to detect the words used by spammers.
    We are going to build a spam/non-spam binary classifier using Python and the `nltk`
    library, to detect whether or not an email is spam. First, we need to import the
    library as usual:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We need to load data and feed our model with an emails dataset. To achieve
    that, we can use the dataset delivered by the **Internet CONtent FIltering Group**.
    You can visit the website at [https://labs-repos.iit.demokritos.gr/skel/i-config/](https://labs-repos.iit.demokritos.gr/skel/i-config/):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: 'Basically, the website provides four datasets:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Ling-spam
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PU1
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PU123A
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enron-spam
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our project, we are going to use the Enron-spam dataset:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: 'Let''s download the dataset using the `wget` command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: 'Extract the `tar.gz` file by using the `tar -xzf enron1.tar.gz` command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'Shuffle the `cp spam/* emails && cp ham/* emails` object:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'To shuffle the emails, let''s write a small Python script, `Shuffle.py`, to
    do the job:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Just change the directory variable, and it will shuffle the files:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: 'After preparing the dataset, you should be aware that, as we learned previously,
    we need to `tokenize` the emails:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/00069.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: 'Also, we need to perform another step, called lemmatizing. Lemmatizing connects
    words that have different forms, like hacker/hackers and is/are. We need to import
    `WordNetLemmatizer`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a sentence for the demonstration, and print out the result of the lemmatizer:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/00070.gif)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: 'Then, we need to remove `stopwords`, such as `of`, `is`, `the`, and so on:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To process the email, a function called `Process` must be created, to `lemmatize`
    and `tokenize` our dataset:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The second step is feature extraction, by reading the emails'' words:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Extract the features:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s define training the model Python function:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As a classification algorithm, we are going to use `NaiveBayesClassifier`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, we define the evaluation Python function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](img/00071.gif)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to detect phishing attempts by building three different
    projects from scratch. First, we discovered how to develop a phishing detector
    using two different machine learning techniques, thanks to cutting-edge Python
    machine learning libraries. The third project was a spam filter, based on NLP
    and Naive Bayes classification. In the next chapter, we will build various projects
    to detect malware, using different techniques and Python machine learning libraries.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过从头开始构建三个不同的项目来检测网络钓鱼尝试。首先，我们发现如何利用两种不同的机器学习技术开发网络钓鱼检测器，这要归功于尖端的Python机器学习库。第三个项目是一个基于NLP和朴素贝叶斯分类的垃圾邮件过滤器。在下一章中，我们将使用不同的技术和Python机器学习库构建各种项目来检测恶意软件。
- en: Questions
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: We hope it was easy to go through this chapter. Now, as usual, it is practice
    time. Your job is to try building your own spam detection system. We will guide
    you through the questions.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您能轻松地阅读完本章。现在，像往常一样，是练习时间了。您的任务是尝试构建自己的垃圾邮件检测系统。我们将通过问题来指导您。
- en: 'In this chapter''s GitHub repository, you will find a dataset collected from
    research done by Androutsopoulos, J. Koutsias, K.V. Chandrinos, George Paliouras,
    and C.D. Spyropoulos: *An Evaluation of Naive Bayesian Anti-Spam Filtering*. *Proceedings
    of the workshop on Machine Learning in the New Information Age, G. Potamias, V.
    Moustakis and **M. van Someren (eds.), 11th European Conference on Machine Learning,
    Barcelona, Spain, pp. 9-17, 2000*.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的GitHub存储库中，您将找到由Androutsopoulos、J. Koutsias、K.V. Chandrinos、George Paliouras和C.D.
    Spyropoulos进行的研究收集的数据集：*朴素贝叶斯反垃圾邮件过滤的评估*。*机器学习在新信息时代的研讨会论文集，G. Potamias，V. Moustakis和M.
    van Someren（编辑），第11届欧洲机器学习大会，西班牙巴塞罗那，第9-17页，2000年*。
- en: 'You can now prepare the data:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以准备数据了：
- en: 'The following are some text-cleaning tasks to perform:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些要执行的文本清理任务：
- en: Clean your texts of stopwords, digits, and punctuation marks.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理文本中的停用词、数字和标点符号。
- en: Perform lemmatization.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行词形还原。
- en: Create a word dictionary, including their frequencies.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单词字典，包括它们的频率。
- en: In email texts, you will notice that the first line is the subject of the email
    and the third line is the body of the email (we only need the email bodies).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子邮件文本中，您会注意到第一行是电子邮件的主题，第三行是电子邮件的正文（我们只需要电子邮件正文）。
- en: Remove the non-words from the dictionary.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字典中删除非单词。
- en: Extract the features from the data.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据中提取特征。
- en: Prepare the feature vectors and their labels.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备特征向量及其标签。
- en: Train the model with a linear support vector machine classifier.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用线性支持向量机分类器对模型进行训练。
- en: Print out the confusion matrix of your model.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出模型的混淆矩阵。
