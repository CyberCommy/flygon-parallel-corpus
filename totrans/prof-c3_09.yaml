- en: Chapter 9. Calc, Gradients, and Shadows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we analyzed flexbox and simple structures based on
    flexbox model. In this chapter, we will focus on the following aspects of CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: Calc function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shadows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS Animations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of data-attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: The calc() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Have you ever had a problem with mixing units? For example, say you needed
    to make an equation 60%-10px? These operations could be very helpful in old browsers
    and this is possible right now with the `calc()` method in CSS. How can you use
    it? Let''s resolve a problem with two floating boxes; one has a static width and
    the second is adjusting to the possible max width. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the end result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The calc() method](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `calc()` function gives us the opportunity to make simple equations such
    as percent minus pixels. In this simple example, you can see that we don't need
    to use tricks with paddings and absolute positions. You can use the `calc()` function
    in good way and the problem will be resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Gradients in CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Experienced frontend developers remember the time when gradients were done as
    background images. Yes! That was the only idea to imitate gradients in browsers.
    You needed to cut 1px width and the gradient's height (if it was a vertical gradient;
    in the case of horizontal, it was 1px height and width was designated by the width
    of the gradient) from the PSD file. Then, you had to add it in CSS and repeat
    your *magic* image in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can do it in CSS! Let's begin with linear gradients.
  prefs: []
  type: TYPE_NORMAL
- en: Linear gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linear gradients can be of two types: from top-to-bottom or from left-to-right.
    Let''s begin with a vertical gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code will generate a linear gradient from top-to-bottom. At the top, the
    color will be black and it will be red at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear gradients](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, it cannot be so easy to be a frontend developer. That''s why you need
    to remember about prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the definition with prefixes takes up a lot of code, especially
    when you need a fallback for IE9 (the last line with the filter definition).
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic horizontal gradient definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This example will generate a gradient from left-to-right with white on the right
    and black on the left.
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear gradients](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the prefixed version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'What about multicolor gradients? Of course, it is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear gradients](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also rotate the gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear gradients](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What if you want to change the balance between colors? For example, maybe you
    want a higher concentration of black color in your gradient? This is also possible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear gradients](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To understand this, you need to check this example step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Using gradient mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you can get these mixins and use them in your projects. I
    don''t like to write long code every time—just write it once and then repeat the
    short version. That''s why I prepared these two simple gradients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: One of the most important things in the preceding examples of mixins is that
    you need to use the full representation of `hex` colors. You can't use, for example,
    `#f00` for red color. You have to use `#ff0000`. It's because of IE9 and lower
    fallback which does not respect this shorter version of color representation in
    gradients. Another important thing in this mixin is the first line, which sets
    only the background color. This is a fallback for all browsers that don't respect
    any prefixed/non-prefixed versions of gradients. With it the color is set only
    to the color which is set as a `$startColor`. The second line in the mixin is
    related to old versions of browsers based on WebKit. The last line relates to
    old IE (9 and lower). Of course, you don't have to keep this code in your projects
    if it's not used or not needed. You can modify it to match your project's requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Radial gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some projects, you will need to add radial gradients. The radial gradient
    standard function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check an example code and the possibilities of gradients'' usage:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Radial gradients](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to add box-shadow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Back in the day, shadow features weren''t available in CSS. This feature gives
    you the opportunity to append the shadow effect to boxes (with `box-shadow`) and
    text (with `text-shadow`). How is `box-shadow` created? Let''s check the parameters
    of this property in CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Before all parameters you can add inset. With this property shadow will be inside
    element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to understand this is to check how it behaves in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to add box-shadow](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, you can check how to set vertical and horizontal shadows. Additionally,
    you can set blur spread and its color. Adding a positive value to vertical and
    horizontal shadow moves the shadow to the bottom and right, respectively. When
    you are adding a negative value, it will move to the top and left.
  prefs: []
  type: TYPE_NORMAL
- en: How to add text-shadow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding a shadow for boxes is pretty simple. But how do we add a shadow to text?
    It is possible with the `text-shadow` property. It works in much the same way
    as `box-shadow`. Here''s the definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create an example based on the previous chapter''s code to better understand
    the `text-shadow` property:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to add text-shadow](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Additional font and text features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Font features in CSS have changed a lot in the past 5 years. Back in the day,
    there was no opportunity to use non-standard fonts and as it was described *safe
    for internet*. This was one of the issues that made Flash technology trendier,
    not only because of full Flash pages but because of **Scalable Inman Flash Replacement**
    (**SIFR**). With SIFR, you just needed to attach your font in Adobe Flash and
    compile the file; you could then use your font on the website. But you had a webpage
    in HTML with Flash instances. Then, there was a methodology based on JavaScript
    called **cufon**. You could use your font to visit the cufon page, compile your
    font, and then attach `cufon.js` on your website and your compiled font (JS file).
    In JavaScript, you needed to add which font should be swapped and finally your
    font was visible on the website.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, we can use font-face and use custom fonts in the web version.
  prefs: []
  type: TYPE_NORMAL
- en: Using non-standard fonts in browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to use your font in the browser, you need to prepare it. The basic
    definition of font-face is based on this example in raw CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use your font now, you will need to append this sample code
    in your CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The main question is, How can I prepare my font to use it in the browser if
    I have another font format? If you have a font, you can use `fontsquirrel.com`
    to generate the final view of CSS ready to use. Of course, there are a few other
    sources where you can search for fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Fonts ([https://www.google.com/fonts](https://www.google.com/fonts))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typekit ([https://typekit.com/fonts](https://typekit.com/fonts))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, you can find fonts ready to use in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CSS animations are a very useful feature. You don''t need to use JavaScript
    for easy animations and CSS animations are supported by the GPU (short for Graphic
    Processing Unit). What can we do with CSS animations? Let''s check the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the generated CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using CSS animations](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the progress of animations, described in the SASS/CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of CSS animations are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animation-name`: This property defines which `@keyframs` definition should
    be used, for example: `animation-name: roll_in`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`animation-delay`: This property defines the delay between the element loading
    and the animation starting, for example: `animation-delay: 2s`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`animation-duration`: This property defines the length of the animation, for
    example: `animation-duration: 2s`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`animation-iteration-count`: This property defines how many times the animation
    should be repeated, for example: `animation- iteration-count: 2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`animation-fill-mode`: This property defines how the element will behave with
    regard to the delay time, for example: `animation- fill-mode: backward`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How can I add an animation on hover? Let''s create an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the end result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using CSS animations](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the element before and after a hover action. Also, there is a transition
    that adds a little animation flavor to this button. What is important in this
    animation declaration?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding declaration gives a list of values that should be animated. An
    example of this list might be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This list means that the color and the background color will be animated. When
    you want to animate all properties, you can use *all* as a value.
  prefs: []
  type: TYPE_NORMAL
- en: Data attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data attribute is mainly related to HTML code and JavaScript. With data attribute,
    you can describe DOM elements and use these values in scripts, for example, for
    sorting, animation, or any other purpose. But how can it help you in CSS code?
    Let's consider the following example.
  prefs: []
  type: TYPE_NORMAL
- en: Issue – bold on hover moves the navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a pretty common issue on websites. Let''s imagine that you have inline
    elements that react to a hover. After hovering, the element changes its font-weight
    from normal to bold. The effect is that every element after the hovered element
    is shifted to the right. Let''s begin with the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect in the browser without and with hover action is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Issue – bold on hover moves the navigation](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The red rulers are pointed shifts in structure. Now, let''s use our *antidotum*.
    First, we need to slightly change our HTML code. This change is related to the
    `data-alt` attribute and its value. As a value, we are duplicating the value of
    the DOM element:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Voilà! Problem solved. As you can see, the trick is based on the `:after` pseudo
    element that is now kept as an invisible element. The content is set by taking
    an attribute from the HTML code with `attr(data-alt)`. To this content, the bold
    feature is added. This gives us enough space, which wasn't taken up in the previous
    code. Finally, the elements don't shift to the right.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed CSS gradients so you don't need to make gradients
    with images. We analyzed the use of `box-shadow` and `text-shadow`. We created
    a simple animation and analyzed its parameters. Additionally, we used data-attribute
    in CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss DRY (short for Don't Repeat Yourself) in
    CSS and try to create a basic framework that will be a starter for your projects.
  prefs: []
  type: TYPE_NORMAL
