- en: Appendix D. Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your Django settings file contains all the configuration of your Django installation.
    This appendix explains how settings work and which settings are available.
  prefs: []
  type: TYPE_NORMAL
- en: What's a settings file?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A settings file is just a Python module with module-level variables. Here are
    a couple of example settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you set `DEBUG` to `False`, you also need to properly set the `ALLOWED_HOSTS`
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because a settings file is a Python module, the following apply:'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't allow for Python syntax errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It can assign settings dynamically using normal Python syntax, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It can import values from other settings files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Django settings file doesn''t have to define any settings if it doesn''t
    need to. Each setting has a sensible default value. These defaults live in the
    module `django/conf/global_settings.py`. Here''s the algorithm Django uses in
    compiling settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Load settings from `global_settings.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load settings from the specified settings file, overriding the global settings
    as necessary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that a settings file should *not* import from `global_settings`, because
    that's redundant.
  prefs: []
  type: TYPE_NORMAL
- en: Seeing which settings you've changed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's an easy way to view which of your settings deviate from the default
    settings. The command `python manage.py diffsettings` displays differences between
    the current settings file and Django's default settings. For more, see the `diffsettings`
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Using settings in Python code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your Django apps, use settings by importing the object `django.conf.settings`.
    Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `django.conf.settings` isn''t a module-it''s an object. So importing
    individual settings is not possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Also note that your code should *not* import from either `global_settings` or
    your own settings file. `django.conf.settings` abstracts the concepts of default
    settings and site-specific settings; it presents a single interface. It also decouples
    the code that uses settings from the location of your settings.
  prefs: []
  type: TYPE_NORMAL
- en: Altering settings at runtime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You shouldn''t alter settings in your applications at runtime. For example,
    don''t do this in a view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The only place you should assign to settings is in a settings file.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because a settings file contains sensitive information, such as the database
    password, you should make every attempt to limit access to it. For example, change
    its file permissions so that only you and your web server's user can read it.
    This is especially important in a shared-hosting environment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s nothing stopping you from creating your own settings, for your own
    Django apps. Just follow these conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting names are in all uppercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't reinvent an already-existing setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For settings that are sequences, Django itself uses tuples, rather than lists,
    but this is only a convention.
  prefs: []
  type: TYPE_NORMAL
- en: DJANGO_SETTINGS_MODULE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you use Django, you have to tell it which settings you're using. Do this
    by using an environment variable, `DJANGO_SETTINGS_MODULE`. The value of `DJANGO_SETTINGS_MODULE`
    should be in Python path syntax, for example, `mysite.settings`.
  prefs: []
  type: TYPE_NORMAL
- en: The django-admin utility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using `django-admin`, you can either set the environment variable once,
    or explicitly pass in the settings module each time you run the utility. Example
    (Unix Bash shell):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Example (Windows shell):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `--settings` command-line argument to specify the settings manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: On the server (mod_wsgi)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your live server environment, you''ll need to tell your WSGI application
    what settings file to use. Do that with `os.environ`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Read [Chapter 13](ch13.xhtml "Chapter 13. Deploying Django"), *Deploying Django*,
    for more information and other common elements to a Django WSGI application.
  prefs: []
  type: TYPE_NORMAL
- en: Using settings without setting DJANGO_SETTINGS_MODULE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In some cases, you might want to bypass the `DJANGO_SETTINGS_MODULE` environment
    variable. For example, if you''re using the template system by itself, you likely
    don''t want to have to set up an environment variable pointing to a settings module.
    In these cases, you can configure Django''s settings manually. Do this by calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Pass `configure()` as many keyword arguments as you'd like, with each keyword
    argument representing a setting and its value. Each argument name should be all
    uppercase, with the same name as the settings described above. If a particular
    setting is not passed to `configure()` and is needed at some later point, Django
    will use the default setting value.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Django in this fashion is mostly necessary-and, indeed, recommended-when
    you're using a piece of the framework inside a larger application. Consequently,
    when configured via `settings.configure()`, Django will not make any modifications
    to the process environment variables (see the documentation of `TIME_ZONE` for
    why this would normally occur). It's assumed that you're already in full control
    of your environment in these cases.
  prefs: []
  type: TYPE_NORMAL
- en: Custom default settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''d like default values to come from somewhere other than `django.conf.global_settings`,
    you can pass in a module or class that provides the default settings as the `default_settings`
    argument (or as the first positional argument) in the call to `configure()`. In
    this example, default settings are taken from `myapp_defaults`, and the `DEBUG`
    setting is set to `True`, regardless of its value in `myapp_defaults`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example, which uses `myapp_defaults` as a positional argument,
    is equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Normally, you will not need to override the defaults in this fashion. The Django
    defaults are sufficiently tame that you can safely use them. Be aware that if
    you do pass in a new default module, it entirely *replaces* the Django defaults,
    so you must specify a value for every possible setting that might be used in that
    code you are importing. Check in `django.conf.settings.global_settings` for the
    full list.
  prefs: []
  type: TYPE_NORMAL
- en: Either configure() or DJANGO_SETTINGS_MODULE is required
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re not setting the `DJANGO_SETTINGS_MODULE` environment variable, you
    *must* call `configure()` at some point before using any code that reads settings.
    If you don''t set `DJANGO_SETTINGS_MODULE` and don''t call `configure()`, Django
    will raise an `ImportError` exception the first time a setting is accessed. If
    you set `DJANGO_SETTINGS_MODULE`, access settings values somehow, *then* call
    `configure()`, Django will raise a `RuntimeError` indicating that settings have
    already been configured. There is a property just for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, it''s an error to call `configure()` more than once, or to call `configure()`
    after any setting has been accessed. It boils down to this: Use exactly one of
    either `configure()` or `DJANGO_SETTINGS_MODULE`. Not both, and not neither.'
  prefs: []
  type: TYPE_NORMAL
- en: Available settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a large number of settings available in Django. For ease of reference,
    I have broken them up into six sections, each with a corresponding table in this
    Appendix:'
  prefs: []
  type: TYPE_NORMAL
- en: Core settings (*Table D.1*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication settings (*Table D.2*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message settings (*Table D.3*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session settings (*Table D.4*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django sites settings (*Table D.5*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static files settings (*Table D.6*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each table lists the available setting and it's default value. For additional
    information and use cases for each setting, see the Django Project website at
    [https://docs.djangoproject.com/en/1.8/ref/settings/](https://docs.djangoproject.com/en/1.8/ref/settings/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when you override settings, especially when the default value is
    a non-empty list or dictionary, such as `MIDDLEWARE_CLASSES` and `STATICFILES_FINDERS`.
    Make sure you keep the components required by the features of Django you wish
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: Core settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Setting** | **Default Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ABSOLUTE_URL_OVERRIDES` | `{}` (Empty dictionary) |'
  prefs: []
  type: TYPE_TB
- en: '| `ADMINS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `ALLOWED_HOSTS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `APPEND_SLASH` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| `CACHE_MIDDLEWARE_ALIAS` | `default` |'
  prefs: []
  type: TYPE_TB
- en: '| `CACHES` | `{ ''default'': { ''BACKEND'': ''django.core.cache.backends.locmem.LocMemCache'',
    } }` |'
  prefs: []
  type: TYPE_TB
- en: '| `CACHE_MIDDLEWARE_KEY_PREFIX` | `''''` (empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `CACHE_MIDDLEWARE_SECONDS` | `600` |'
  prefs: []
  type: TYPE_TB
- en: '| `CSRF_COOKIE_AGE` | `31449600 (1 year, in seconds)` |'
  prefs: []
  type: TYPE_TB
- en: '| `CSRF_COOKIE_DOMAIN` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `CSRF_COOKIE_HTTPONLY` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `CSRF_COOKIE_NAME` | `Csrftoken` |'
  prefs: []
  type: TYPE_TB
- en: '| `CSRF_COOKIE_PATH` | `''/''` |'
  prefs: []
  type: TYPE_TB
- en: '| `CSRF_COOKIE_SECURE` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `DATE_INPUT_FORMATS` | `[ ''%Y-%m-%d'', ''%m/%d/%Y'', ''%m/%d/%y'', ''%b
    %d %Y'', ''%b %d, %Y'', ''%d %b %Y'',''%d %b, %Y'', ''%B %d %Y'', ''%B %d, %Y'',
    ''%d %B %Y'', ''%d %B, %Y'', ]` |'
  prefs: []
  type: TYPE_TB
- en: '| `DATETIME_FORMAT` | `''N j, Y, P'' (for example, Feb. 4, 2003, 4 p.m.)` |'
  prefs: []
  type: TYPE_TB
- en: '| `DATETIME_INPUT_FORMATS` | `[ ''%Y-%m-%d %H:%M:%S'', ''%Y-%m-%d %H:%M:%S.%f'',
    ''%Y-%m-%d %H:%M'', ''%Y-%m-%d'', ''%m/%d/%Y %H:%M:%S'', ''%m/%d/%Y %H:%M:%S.%f'',
    ''%m/%d/%Y %H:%M'', ''%m/%d/%Y'', ''%m/%d/%y %H:%M:%S'',``''%m/%d/%y %H:%M:%S.%f'',
    ''%m/%d/%y %H:%M'', ''%m/%d/%y'',``]` |'
  prefs: []
  type: TYPE_TB
- en: '| `DEBUG` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `DEBUG_PROPAGATE_EXCEPTIONS` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `DECIMAL_SEPARATOR` | `''.''` (Dot) |'
  prefs: []
  type: TYPE_TB
- en: '| `DEFAULT_CHARSET` | `''utf-8''` |'
  prefs: []
  type: TYPE_TB
- en: '| `DEFAULT_CONTENT_TYPE` | `''text/html''` |'
  prefs: []
  type: TYPE_TB
- en: '| `DEFAULT_EXCEPTION_REPORTER_FILTER` | `django.views.debug. SafeExceptionReporterFilter`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DEFAULT_FILE_STORAGE` | `django.core.files.storage. FileSystemStorage` |'
  prefs: []
  type: TYPE_TB
- en: '| `DEFAULT_FROM_EMAIL` | `''webmaster@localhost''.` |'
  prefs: []
  type: TYPE_TB
- en: '| `DEFAULT_INDEX_TABLESPACE` | `''''` (Empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `DEFAULT_TABLESPACE` | `''''` (Empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `DISALLOWED_USER_AGENTS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_BACKEND` | `django.core.mail.backends.smtp. EmailBackend` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_HOST` | `''localhost''` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_HOST_PASSWORD` | `''''` (Empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_HOST_USER` | `''''` (Empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_PORT` | `25` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_SUBJECT_PREFIX` | `''[Django] ''` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_USE_TLS` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_USE_SSL` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_SSL_CERTFILE` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_SSL_KEYFILE` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `EMAIL_TIMEOUT` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_CHARSET` | `''utf-8''` |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_UPLOAD_HANDLERS` | `[ ''django.core.files.uploadhandler.` `MemoryFileUploadHandler'',
    ''django.core.files.uploadhandler. TemporaryFileUploadHandler'' ]` |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_UPLOAD_MAX_MEMORY_SIZE` | `2621440 (that is, 2.5 MB)` |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_UPLOAD_DIRECTORY_PERMISSIONS` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_UPLOAD_PERMISSIONS` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `FILE_UPLOAD_TEMP_DIR` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `FIRST_DAY_OF_WEEK` | `0` (Sunday) |'
  prefs: []
  type: TYPE_TB
- en: '| `FIXTURE_DIRS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `FORCE_SCRIPT_NAME` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `FORMAT_MODULE_PATH` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `IGNORABLE_404_URLS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `INSTALLED_APPS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `INTERNAL_IPS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `LANGUAGE_CODE` | `''en-us''` |'
  prefs: []
  type: TYPE_TB
- en: '| `LANGUAGE_COOKIE_AGE` | `None` (expires at browser close) |'
  prefs: []
  type: TYPE_TB
- en: '| `LANGUAGE_COOKIE_DOMAIN` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `LANGUAGE_COOKIE_NAME` | `''django_language''` |'
  prefs: []
  type: TYPE_TB
- en: '| `LANGUAGES` | A list of all available languages |'
  prefs: []
  type: TYPE_TB
- en: '| `LOCALE_PATHS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGGING` | `A logging configuration dictionary` |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGGING_CONFIG` | `''logging.config.dictConfig''` |'
  prefs: []
  type: TYPE_TB
- en: '| `MANAGERS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `MEDIA_ROOT` | `''''` (Empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `MEDIA_URL` | `''''` (Empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `MIDDLEWARE_CLASSES` | `[ ''django.middleware.common. CommonMiddleware'',
    ''django.middleware.csrf.  CsrfViewMiddleware'' ]` |'
  prefs: []
  type: TYPE_TB
- en: '| `MIGRATION_MODULES` | `{}` (empty dictionary) |'
  prefs: []
  type: TYPE_TB
- en: '| `MONTH_DAY_FORMAT` | `''F j''` |'
  prefs: []
  type: TYPE_TB
- en: '| `NUMBER_GROUPING` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `PREPEND_WWW` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `ROOT_URLCONF` | Not defined |'
  prefs: []
  type: TYPE_TB
- en: '| `SECRET_KEY` | `''''` (Empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_BROWSER_XSS_FILTER` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_CONTENT_TYPE_NOSNIFF` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_HSTS_INCLUDE_SUBDOMAINS` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_HSTS_SECONDS` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_PROXY_SSL_HEADER` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_REDIRECT_EXEMPT` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_SSL_HOST` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `SECURE_SSL_REDIRECT` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `SERIALIZATION_MODULES` | `Not defined` |'
  prefs: []
  type: TYPE_TB
- en: '| `SERVER_EMAIL` | `''root@localhost''` |'
  prefs: []
  type: TYPE_TB
- en: '| `SHORT_DATE_FORMAT` | `m/d/Y` (for example, 12/31/2003) |'
  prefs: []
  type: TYPE_TB
- en: '| `SHORT_DATETIME_FORMAT` | `m/d/Y P` (for example, 12/31/2003 4 p.m.) |'
  prefs: []
  type: TYPE_TB
- en: '| `SIGNING_BACKEND` | `''django.core.signing.TimestampSigner''` |'
  prefs: []
  type: TYPE_TB
- en: '| `SILENCED_SYSTEM_CHECKS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `TEMPLATES` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `TEMPLATE_DEBUG` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `TEST_RUNNER` | `''django.test.runner.DiscoverRunner''` |'
  prefs: []
  type: TYPE_TB
- en: '| `TEST_NON_SERIALIZED_APPS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `THOUSAND_SEPARATOR` | `, (Comma)` |'
  prefs: []
  type: TYPE_TB
- en: '| `TIME_FORMAT` | `''P''` (for example, 4 p.m.) |'
  prefs: []
  type: TYPE_TB
- en: '| `TIME_INPUT_FORMATS` | `[ ''%H:%M:%S'',``''%H:%M:%S.%f'', ''%H:%M'',``]`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `TIME_ZONE` | `''America/Chicago''` |'
  prefs: []
  type: TYPE_TB
- en: '| `USE_ETAGS` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `USE_I18N` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| `USE_L10N` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `USE_THOUSAND_SEPARATOR` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `USE_TZ` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `USE_X_FORWARDED_HOST` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `WSGI_APPLICATION` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `YEAR_MONTH_FORMAT` | `''F Y''` |'
  prefs: []
  type: TYPE_TB
- en: '| `X_FRAME_OPTIONS` | `''SAMEORIGIN''` |'
  prefs: []
  type: TYPE_TB
- en: 'Table D.1: Django core settings'
  prefs: []
  type: TYPE_NORMAL
- en: Auth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Setting** | **Default Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AUTHENTICATION_BACKENDS` | `''django.contrib.auth.backends.ModelBackend''`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `AUTH_USER_MODEL` | `''auth.User''` |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGIN_REDIRECT_URL` | `''/accounts/profile/''` |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGIN_URL` | `''/accounts/login/''` |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGOUT_URL` | `''/accounts/logout/''` |'
  prefs: []
  type: TYPE_TB
- en: '| `PASSWORD_RESET_TIMEOUT_DAYS` | `3` |'
  prefs: []
  type: TYPE_TB
- en: '| `PASSWORD_HASHERS` | `[ ''django.contrib.auth.hashers.PBKDF2PasswordHasher'',
    ''django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher'', ''django.contrib.auth.hashers.BCryptPasswordHasher'',
    ''django.contrib.auth.hashers.SHA1PasswordHasher'', ''django.contrib.auth.hashers.MD5PasswordHasher'',
    ''django.contrib.auth.hashers.UnsaltedMD5PasswordHasher'', ''django.contrib.auth.hashers.CryptPasswordHasher''
    ]` |'
  prefs: []
  type: TYPE_TB
- en: 'Table D.2: Django authentication settings'
  prefs: []
  type: TYPE_NORMAL
- en: Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Setting** | **Default Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `MESSAGE_LEVEL` | `messages` |'
  prefs: []
  type: TYPE_TB
- en: '| `MESSAGE_STORAGE` | `''django.contrib.messages.storage.fallback.FallbackStorage''`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `MESSAGE_TAGS` | `{ messages.DEBUG: ''debug'', messages.INFO: ''info'', messages.SUCCESS:
    ''success'', messages.WARNING: ''warning'', messages.ERROR: ''error'' }` |'
  prefs: []
  type: TYPE_TB
- en: 'Table D.3: Django messages settings'
  prefs: []
  type: TYPE_NORMAL
- en: Sessions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Setting** | **Default Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_CACHE_ALIAS` | `default` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_COOKIE_AGE` | `1209600` (2 weeks, in seconds). |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_COOKIE_DOMAIN` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_COOKIE_HTTPONLY` | `True.` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_COOKIE_NAME` | `''sessionid''` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_COOKIE_PATH` | `''/''` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_COOKIE_SECURE` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_ENGINE` | `''django.contrib.sessions.backends.db''` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_EXPIRE_AT_BROWSER_CLOSE` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_FILE_PATH` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_SAVE_EVERY_REQUEST` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| `SESSION_SERIALIZER` | `''django.contrib.sessions.serializers. JSONSerializer''`
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table D.4: Django sessions settings'
  prefs: []
  type: TYPE_NORMAL
- en: Sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Setting** | **Default Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SITE_ID` | `Not defined` |'
  prefs: []
  type: TYPE_TB
- en: 'Table D.5: Django sites settings'
  prefs: []
  type: TYPE_NORMAL
- en: Static files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Setting** | **Default Value** |'
  prefs: []
  type: TYPE_TB
- en: '| `STATIC_ROOT` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `STATIC_URL` | `None` |'
  prefs: []
  type: TYPE_TB
- en: '| `STATICFILES_DIRS` | `[]` (Empty list) |'
  prefs: []
  type: TYPE_TB
- en: '| `STATICFILES_STORAGE` | `''django.contrib.staticfiles.storage.StaticFilesStorage''`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `STATICFILES_FINDERS` | `[``"django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders. AppDirectoriesFinder"``]` |'
  prefs: []
  type: TYPE_TB
- en: 'Table D.6: Django static files settings'
  prefs: []
  type: TYPE_NORMAL
