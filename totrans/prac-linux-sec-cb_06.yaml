- en: Chapter 6. Network Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing the TCP/IP network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Iptables to configure a firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocking spoofed addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocking incoming traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and using the TCP Wrapper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the TCP/IP network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When computers are connected to each other to form a network and exchange information
    and resources with each other, managing this network information becomes an important
    task for a system administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start making any changes to the TCP/IP configuration, make sure to
    create a backup of the Network Manager configuration file, using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/B04234_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Also, create a backup of the `/etc/network/interfaces` file in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will take a look at how we can manually configure network
    settings using the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the manual configuration, first let's check our current IP address,
    which has been assigned to the system automatically by DHCP. We can check the
    details graphically by right-clicking on the **Networking** icon in the top-right
    panel and then selecting **Connection Information**, as seen in the following
    image:![How to do it...](img/B04234_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that the current IP address of our system is **192.168.1.101**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we check this information using the command line. We type the `ifconfig`
    command to do this.![How to do it...](img/B04234_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we just want to check the available Ethernet devices on the system, we can
    run this command:![How to do it...](img/B04234_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding command will list a one-line description of all the available
    Ethernet devices on the system.
  prefs: []
  type: TYPE_NORMAL
- en: If we want a more detailed insight into the network interface, we can use the
    `lshw` tool.![How to do it...](img/B04234_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This tool also gives detailed information about the other capabilities of the
    hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will disable Network Manager and then set the details of the IP address
    manually. To disable Network Manager, edit the `/etc/NetworkManager/NetworkManager.conf`
    file.![How to do it...](img/B04234_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the line `managed=false` to `managed=true` and save the file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, open the `/etc/network/interfaces` file in an editor of your choice. We
    see that, by default, there is no information regarding the `eth0` interface.![How
    to do it...](img/B04234_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the file and add the information shown in the following screenshot. Make
    sure to add the IP details according to your network settings.![How to do it...](img/B04234_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When done, save the file, and then reboot the computer to **disengage** Network
    Manager.
  prefs: []
  type: TYPE_NORMAL
- en: If we wish to create a virtual network adapter, we can add the following lines
    to the `/etc/network/interfaces` file, as shown here:![How to do it...](img/B04234_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By doing this, we have added two IP addresses to the single Ethernet card. We
    can do this to create multiple instances of the network card.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the preceding editing is complete, restart the networking service using
    either of the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we take a look at how to configure the appropriate name server that is
    to be used if the IP address is being configured manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make the changes, edit the /`etc/resolv.conf` file in any editor, and add
    these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By following the preceding steps, we will be able to configure the IP details
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The TCP/IP settings on a system can be either managed automatically or manually.
    Depending on the content in the `/etc/NetworkManager/NetworkManager.conf` file,
    the system will understand whether the settings are to be managed automatically
    or manually.
  prefs: []
  type: TYPE_NORMAL
- en: For a manual configuration, we edit the `/etc/network/interfaces` file, and
    enter the preceding IP details. Once this is done, we restart the networking service
    or completely reboot the system to make the changes effective.
  prefs: []
  type: TYPE_NORMAL
- en: Using Iptables to configure a firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the essential steps required to secure a Linux system is to set up a
    good firewall. Most Linux distributions come preinstalled with different firewall
    tools. **Iptables** is one such default firewall in a Linux distribution. In older
    versions of the Linux kernel, Ipchains was the default firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Iptables ships with the Linux distribution, no extra tool needs to be
    installed to use it. However, it is recommended that when you use Iptables; do
    not use the root account. Instead, use a normal account that has super-user access
    to run the commands efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can define different rules using Iptables. These rules are then followed
    by the kernel when checking incoming and outgoing traffic packets:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do on our system is check which version of Iptables
    is installed using the command shown here:![How to do it...](img/B04234_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will check whether any rule already exists on the system for Iptables
    using the `-L` option.![How to do it...](img/B04234_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding output can also be seen in a format that tells us about the commands
    that are necessary for each policy. To do this, use the `-S` option, as shown
    here:![How to do it...](img/B04234_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will check which of the modules of Iptables are loaded by default in
    order to know their proper functionality using this command:![How to do it...](img/B04234_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add this first in Iptables, which will make sure that all the online
    connections at present will stay online even after we have made rules to block
    unwanted services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-A` option appends a rule to the existing table. `INPUT` says that
    this rule will be appended to the Input chain of Iptables. The next few arguments
    of the `-m conntrack --ctstate ESTABLISHED,RELATED` command make sure that the
    rule applies only to connections that are online currently. Then, `-j ACCEPT`
    tells Iptables to accept and allow the packets that match the preceding specified
    criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we check the list of rules in Iptables again, we will see that our rule
    has been added.![How to do it...](img/B04234_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's assume that we want to allow our SSH connection through Iptables. For
    this, we add this rule:![How to do it...](img/B04234_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have used port `22` as it is the default port for SSH. If you have changed
    the port for SSH in your server, use the appropriate port from the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to make sure that our server continues to function properly by
    letting the services on the server communicate with each other without being blocked
    by the rules of Iptables. To do this, we want to allow all the packets being sent
    to the loopback interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We add the following rule to allow the loopback access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-I` option tells `iptables` to insert a new rule rather than append
    it. It takes the chain and position where the new rule needs to be added. In the
    preceding command, we add this rule as the first rule in the `INPUT` chain so
    that it is the first rule that's applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if we see a list of rules in Iptables using the `-v` option, we notice
    that the rule for the `lo` loopback interface is our first rule.![How to do it...](img/B04234_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming that we have added rules for all the packets to be allowed as per our
    requirements, we have to make sure that any other packet that enters the `INPUT`
    chain should be blocked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do so, we will modify the `INPUT` chain by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code in the preceding screenshot shows that the rule to drop all packets
    has been added to the bottom of the list in the `INPUT` chain. This makes sure
    that whenever a packet comes in, the Iptables rules are checked in the order specified.
    If none of the rules match for the packet, it will be dropped, thus preventing
    a packet from being accepted by default.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, whatever rules we have added in Iptables are nonpersistent. This
    means that as soon as the system is restarted, all the rules in Iptables will
    be gone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, to save the rules that we have created and then automatically load them
    when the server reboots, we can use the `iptables-persistent` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the package using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: During the installation process, you will be asked whether you want to save
    the current `iptables` rules and automatically load them. Select **Yes** or **No**
    as per your requirements.![How to do it...](img/B04234_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is complete, we can start the package by running this
    command:![How to do it...](img/B04234_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding example, we use Iptables in Linux to configure a firewall on
    our system.
  prefs: []
  type: TYPE_NORMAL
- en: First, we go through the basic options of the `iptables` command, and then we
    see how to add different rules in `iptables`. We add rules to allow localhost
    access and outgoing active connections. We then add a rule to allow an SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we add a rule to deny every other incoming packet that does not match
    the preceding rules.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we use the `iptables-persistent` package to save the rules of `iptables`
    even after a system reboot.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking spoofed addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IP spoofing is a very common technique used by attackers to send malicious packets
    to a computer server. This is the process of creating IP packets with a forged
    IP address. It is mainly used for attacks such as **Denial of Service** (**DoS**).
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we wish to block a spoofed IP address, we need to have a list of IP addresses
    or domain names from where these spoofed connections have been trying to connect.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will try to create a basic ruleset of `iptables` through which we will restrict
    all incoming packets, except those that are necessary for our usage:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create a rule to allow access to the loopback interface
    so that services on the system can communicate properly with each other locally.
    The command to do this is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is necessary for the system to function properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create a rule for outbound connections that have been initiated by
    our system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will accept all the outbound traffic, including responses from remote
    servers, which we have try to connect to ourselves (such as any website that we
    visit):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a table to be used in `iptables`. We will call it `blocked_ip`
    but you can choose a name of your choice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is the table where we will add the spoofed IP addresses that we want to
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we insert this table into the `INPUT` table of `iptables` using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have used number `2` to make sure that this rule will be second
    from the top in Iptables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s add some bad IPs into the `blocked_ip` table that we have created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We used the `192.168.1.115` IP address as an example here. You can replace it
    with an IP address that you want to block. If you have more than one IP address
    to block, add them one by one to `iptables`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see a list of rules in `iptables` using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the details shown in the following screenshot, at the bottom, you'll notice
    the IP address that we are trying to block. You can specify a single IP address
    or a range as per your needs.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04234_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After making rules in Iptables, we can edit the `/etc/host.conf` file as well.
    Open the file in any editor of your choice. I am using `nano`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add or edit the following lines in the file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, the `nospoof on` option performs a comparison of the
    IP address returned by the hostname lookup with the hostname returned by the IP
    address lookup. If the comparison fails, this option generates a spoof warning.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, save and close the file. This will also help to protect the system
    from IP spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To block a spoofed IP address or any other IP address, we again use Iptables
    as it is the default firewall, unless we don't want to use any other tool that's
    available for Linux.
  prefs: []
  type: TYPE_NORMAL
- en: We create rules once again to allow localhost access to the system and also
    to keep outbound active connections alive. Then, we create a table in Iptables,
    which we use to maintain a list of spoofed IP addresses that we want to block.
    We add this table to the input chain of Iptables. Then, we can add any IP address
    to the table whenever required, and it will automatically get blocked.
  prefs: []
  type: TYPE_NORMAL
- en: We also use the `/etc/host.conf` file to protect the system from IP spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking incoming traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important tasks for a Linux system administrator is to control
    access to network services. At times, it may be better to block all incoming traffic
    on the server and only allow the required services to connect.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we will be using Iptables here as well, no extra package is needed to perform
    these steps. We just need a user account with `super user` access. However, this
    account should preferably not be a `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will configure Iptables to deny everything except the traffic that has been
    initiated from inside our system (such as web browsers that get web traffic or
    a download that has already been initiated to update the package or any other
    software):'
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in previous examples, the first rule in Iptables will be to allow access
    to localhost data. Run this command in order to allow access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next rule will be to accept all traffic-related to outbound connections.
    This also includes responses from the remote server to which our system is connected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will add a rule to accept **Time Exceeded** ICMP packets. This is
    important for time-restricted connection setups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will add a rule to accept **Destination Unreachable** ICMP packets
    coming in from remote servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add a rule to accept ping requests/responses (Echo ICMP) to keep our
    system''s connections alive to those web services that may require ping:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the preceding rules have been added, we check the list in Iptables by
    running this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will create a table of `iptables`, which will contain a list of acceptable
    rules and services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We then add this table to the INPUT chain of Iptables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a rule so that access to SSH is allowed on the system. To do so,
    we run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we check the list of rules in Iptables, we get the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have added rules to accept the traffic that we want, we will now want
    to reject all other traffic for which no rules have been set. To do so, we add
    this rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: By doing this, whenever anyone tries to connect to the server, a **Host Unreachable**
    ICMP packet will be sent to them, which would then terminate the connection attempt.
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding all of the preceding rules, Iptables will now look similar to
    what is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04234_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To block all incoming traffic on the server and allow only outbound connections,
    we again use Iptables as it is the default firewall of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: To allow the proper functioning of the server internally, we allow access to
    localhost.
  prefs: []
  type: TYPE_NORMAL
- en: Next, to keep the outbound connections active, we add a rule to accept the **Time
    Exceeded**, **Destination** **Unreachable,** and **Echo ICMP** packets.
  prefs: []
  type: TYPE_NORMAL
- en: Once these rules have been added, we can decide whether we wish to allow any
    incoming traffic for particular services, such as SSH, or a certain client address.
    For this, we create a table to add a list of IP addresses for the clients that
    we want to allow. We add a rule to allow access to an SSH service or any other
    service as per our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we add a rule to reject all the traffic for which no rule has been added.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and using the TCP Wrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing a server by restricting access is a critical measure, which should
    never be avoided while setting up a server. Using TCP Wrappers, we can allow only
    those networks to have access to our server's services that we have configured
    and support TCP Wrappers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate these steps, we use two systems that are on the same network
    and can ping each other successfully. One system will be used as the server and
    the other as the client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux provides several tools to control access to network services. TCP Wrappers
    is one among those and adds an additional layer of protection. Here, we will take
    a look at how to configure TCP Wrappers to define access for different hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to check whether a program supports TCP Wrappers or not. To
    do this, first find the path of an executable program using the `which` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it?](img/B04234_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we have used the SSH program as an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use the `ldd` program to check the compatibility of the SSH program
    with TCP Wrappers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it?](img/B04234_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the output of the preceding command has the `libwrap.so` content, it means
    that the program is supported by TCP Wrappers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, whenever an SSH program tries to connect to the server using TCP Wrappers,
    two files are checked in this order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/etc/hosts.allow`: If a matching rule is found in this file for the program,
    access will be given'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/hosts.deny`: If a matching rule is found in this file for the program,
    access will be denied'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no matching rule is found in either of the two files for the specific program,
    access will be given.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we try to connect to the SSH server, before adding any rule, we see that
    it connects successfully.![How to do it?](img/B04234_06_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's suppose we want to deny access to the SSH program for a particular
    system that has a given IP address. Then, we will edit the `/etc/hosts.deny` file,
    as shown here:![How to do it?](img/B04234_06_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we try to connect to the SSH server from this particular system for which
    we have denied access, it shows the following error:![How to do it?](img/B04234_06_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to allow access for all programs and clients, you can either add
    no rules in either of the two files or add the following line to the /`etc/hosts.allow`
    file:![How to do it?](img/B04234_06_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to allow access for all the services from a particular client that
    has the `192.168.1.106` IP address, then we add the following line to the `/etc/hosts.allow`
    file:![How to do it?](img/B04234_06_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to allow all the clients on a particular network to access SSH, except
    for a particular client that has the `192.168.1.100` IP address, we can make the
    following changes to the /`etc/hosts.allow` file:![How to do it?](img/B04234_06_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After making the aforementioned changes, when we try to connect through SSH,
    we see the following error:![How to do it?](img/B04234_06_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that once the IP address has been changed for the client, SSH access
    is now allowed, which means that all the clients on a particular network can access
    SSH, except for the IP address that has been denied.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding steps block the services rules are defined in the `/etc/hosts.allow`
    file. However, at the server end, we don't get to know which client has tried
    to access the server and when. So, if we want to maintain a log of all connection
    attempts by the client, we can edit the `/etc/hosts.allow` file, as shown here:![How
    to do it?](img/B04234_06_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, the `spawn` keyword defines that whenever a connection
    request is made by the client, it will echo the details that are specified by
    the `%h` option and save it in the `conn.log` log file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we read the contents of the `conn.log` file, we see these details:![How
    to do it?](img/B04234_06_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file contains a log of when the client has tried to connect and from which
    IP address. More details can be captured using different arguments of the `spawn`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use TCP Wrappers to restrict access to programs that are supported by the
    TCP Wrapper package.
  prefs: []
  type: TYPE_NORMAL
- en: We first check whether the program we want to restrict is supported by TCP Wrapper
    or not using the `ldd` tool.
  prefs: []
  type: TYPE_NORMAL
- en: We then add a rule in the`/etc/hosts.allow` or `/etc/hosts.deny` file as per
    our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We add a rule to restrict the program from a particular client or the complete
    network as per our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Using the spawn option in TCP Wrapper, we even maintain a log for the connection
    attempts made by the client or the program that we have restricted.
  prefs: []
  type: TYPE_NORMAL
