- en: Chapter 4. WEP Cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover the **Wired Equivalent Privacy** (**WEP**) protocol
    and its vulnerabilities, showing how to crack the WEP keys with some of the tools
    included in Kali Linux, namely, the Aircrack-ng suite and Fern WiFi Cracker.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to WEP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WEP cracking with Aircrack-ng
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WEP cracking with automated tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to WEP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The WEP protocol was introduced with the original 802.11 standard as a means
    to provide authentication and encryption to wireless LAN implementations. It is
    based on the **RC4** (**Rivest Cipher 4**) stream cypher with a **preshared secret
    key** (**PSK**) of 40 or 104 bits, depending on the implementation. A 24 bit pseudo-random
    **Initialization Vector** (**IV**) is concatenated with the preshared key to generate
    the per-packet keystream used by RC4 for the actual encryption and decryption
    processes. Thus, the resulting keystream could be 64 or 128 bits long.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the encryption phase, the keystream is XORed with the plaintext data to
    obtain the encrypted data, while in the decryption phase the encrypted data is
    XORed with the keystream to obtain the plaintext data. The encryption process
    is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An introduction to WEP](img/B04527_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Attacks against WEP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we must say that WEP is an insecure protocol and has been deprecated
    by the Wi-Fi Alliance. It suffers from various vulnerabilities related to the
    generation of the keystreams, to the use of IVs and to the length of the keys.
  prefs: []
  type: TYPE_NORMAL
- en: The IV is used to add randomness to the keystream, trying to avoid the reuse
    of the same keystream to encrypt different packets. This purpose has not been
    accomplished in the design of WEP, because the IV is only 24 bits long (with 2^24
    = 16,777,216 possible values) and it is transmitted in clear-text within each
    frame. Thus, after a certain period of time (depending on the network traffic)
    the same IV, and consequently the same keystream, will be reused, allowing the
    attacker to collect the relative cypher texts and perform statistical attacks
    to recover the plain texts and the key.
  prefs: []
  type: TYPE_NORMAL
- en: The first well-known attack against WEP was the **Fluhrer, Mantin and Shamir**
    (**FMS**) attack, back in 2001\. The FMS attack relies on the way WEP generates
    the keystreams and on the fact that it also uses *weak* IVs to generate weak keystreams,
    making possible for an attacker to collect a sufficient number of packets encrypted
    with these keystreams, analyze them, and recover the key.
  prefs: []
  type: TYPE_NORMAL
- en: The number of IVs to be collected to complete the FMS attack is about 250,000
    for 40-bit keys and 1,500,000 for 104-bit keys.
  prefs: []
  type: TYPE_NORMAL
- en: The FMS attack has been enhanced by Korek, improving its performances.
  prefs: []
  type: TYPE_NORMAL
- en: Andreas Klein found more correlations between the RC4 keystream and the key
    than the ones discovered by Fluhrer, Mantin, and Shamir, that can used to crack
    the WEP key.
  prefs: []
  type: TYPE_NORMAL
- en: In 2007, **Pyshkin, Tews, and Weinmann** (**PTW**) extended Andreas Klein's
    research and improved the FMS attack, significantly reducing the number of IVs
    needed to successfully recover the WEP key.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, the PTW attack does not rely on weak IVs like the FMS attack does and
    is very fast and effective. It is able to recover a 104-bit WEP key with a success
    probability of 50 percent using less than 40,000 frames and with a probability
    of 95 percent with 85,000 frames.
  prefs: []
  type: TYPE_NORMAL
- en: The PTW attack is the default method used by Aircrack-ng to crack WEP keys.
  prefs: []
  type: TYPE_NORMAL
- en: Both the FMS and PTW attacks need to collect quite a large number of frames
    to succeed and can be conducted passively, sniffing the wireless traffic on the
    same channel of the target AP and capturing frames. The problem is that, in normal
    conditions, we will have to spend quite a long time to passively collect all the
    necessary packets for the attacks, especially with the FMS attack.
  prefs: []
  type: TYPE_NORMAL
- en: To accelerate the process, the idea is to re-inject frames in the network to
    generate traffic in response so that we could collect the necessary IVs more quickly.
    A type of frame that is suitable for this purpose is the ARP request, because
    the AP broadcasts it and each time with a new IV. As we are not associated with
    the AP, if we send frames to it directly, they are discarded and a de-authentication
    frame is sent. Instead, we can capture ARP requests from associated clients and
    retransmit them to the AP.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is called the **ARP Request Replay** attack and is also adopted
    by Aircrack-ng for the implementation of the PTW attack.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**WEP attacks in depth**'
  prefs: []
  type: TYPE_NORMAL
- en: The mathematics and cryptography behind these attacks are beyond the scope of
    this book. For those interested in understanding the details and the techniques
    of the attacks, a valuable resource is the *Technique Papers* section on the Aircrack-ng
    links and references page available at [http://www.aircrack-ng.org/doku.php?id=links#technique_papers](http://www.aircrack-ng.org/doku.php?id=links#technique_papers).
  prefs: []
  type: TYPE_NORMAL
- en: WEP cracking with Aircrack-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have explored WEP vulnerabilities and its relative attacks, we are
    ready to begin the hands-on part. In this section, we will see how to crack WEP
    keys with the Aircrack-ng suite.
  prefs: []
  type: TYPE_NORMAL
- en: In the reconnaissance phase, we have collected information about each network
    to be tested, such as the BSSID, the channel on which it operates, and the security
    protocol used. Here, we focus on a WEP-protected network and we start capturing
    the frames exchanged by the AP and the associated clients on the relative channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try this attack ourselves by setting our Wi-Fi router to use WEP. We
    assume that the BSSID of the AP is 08:7A:4C:83:0C:E0 and the channel is 1\. The
    first step is to start the monitor mode on channel 1, as we have seen in the previous
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To capture the traffic of our target network, we will execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![WEP cracking with Aircrack-ng](img/B04527_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This command saves all the captured frames to the `wep_crack` pcap file. We
    will see how to crack the WEP key when there are clients connected to the AP and
    when there are no clients.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking the WEP key with connected clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the preceding screenshot, we see that there is a client (which has the
    MAC address 98:52:B1:3B:32:58) connected to our target AP.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are not associated with the AP and we can't send ARP requests ourselves,
    we capture and retransmit the ones transmitted by this client.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, we use aireplay-ng, which is a tool designed to inject frames
    and it has various options to perform different attacks, which we will see in
    this book. We have already used it to test the wireless adapter for injection
    in [Chapter 2](ch02.html "Chapter 2. Setting Up Your Machine with Kali Linux"),
    *Setting Up Your Machine with Kali Linux*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To crack the WEP key, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We open a new tab in the terminal emulator and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, `-b` is the BSSID, `- h` is the client MAC address, and `-arpreplay` (or
    -3) is the ARP Request Replay attack option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Cracking the WEP key with connected clients](img/B04527_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We switch to the terminal with the output of `airodump-ng` and we should notice
    that the number of captured frames (#Data) increases quickly.
  prefs: []
  type: TYPE_NORMAL
- en: After collecting a sufficient number of packets (that is, as we have seen, about
    40,000 for the PTW attack implemented by aircrack-ng), we can begin to try cracking
    the WEP key, starting `aircrack-ng` in a new console tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Aircrack-ng is a tool that can recover the key from the frames saved in a `.cap`
    file, using the PTW attack as the default method. We run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `-b` is (as usual) the BSSID. If `aircrack-ng` fails to crack the WEP
    key, it waits for `airodump-ng` to collect more IVs and retries the process (by
    default, every 5000 IVs collected):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cracking the WEP key with connected clients](img/B04527_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we can see `aircrack-ng` attempting to crack the
    key, but still with a low number of captured IVs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cracking the WEP key with connected clients](img/B04527_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, it returns the cracked key, displayed in hexadecimal and ASCII:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cracking the WEP key with connected clients](img/B04527_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cracking the WEP key without connected clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we cover the more complex case of recovering the key with no
    clients associated with the AP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we can''t reply ARP request frames, we need to somehow simulate an authentication
    with the AP (fake authentication). To do so, we execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `--fakeauth` (or -1) is the fake authentication option, `0` is the reassociation
    timing in seconds (no delay), `-o` is the number of packets sent per time, `-e`
    is the network SSID, `-a` is the BSSID, and `-h` is the MAC address of the `mon0`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cracking the WEP key without connected clients](img/B04527_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We should see messages saying that fake authentication has been successful.
    If we get a `Got a deauthentication packet!` message, probably the AP applies
    MAC filtering, which allows access only to certain MAC addresses.
  prefs: []
  type: TYPE_NORMAL
- en: The Fragmentation and ChopChop attacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, we need to find a way to generate ARP request frames encrypted with the
    WEP key used by the AP, but we do not have it, we are looking to recover it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is when two attacks can help us: the **Fragmentation** and the **ChopChop**
    attacks. Not all the wireless device drivers support both of them and not all
    the APs can be successfully attacked, so these attacks can be performed in alternative.'
  prefs: []
  type: TYPE_NORMAL
- en: Access points transmit frames even when no client is connected. The Fragmentation
    attack allows to recover the keystream (not the actual key) used to encrypt frames,
    starting from just a single frame transmitted by the AP. The maximum size of the
    keystream could be equal to the **MTU** (**Maximum Transmission Unit**), which
    is 1,500 bytes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute the attack, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![The Fragmentation and ChopChop attacks](img/B04527_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program captures a frame originated from the AP and asks to confirm if
    we want to use this packet. We confirm and then the program attempts to recover
    up to 1,500 bytes of the keystream. When it reaches a sufficient amount of bytes
    (384), it asks to quit and save the recovered keystream. If we accept, the `Saving
    keystream in fragment...` message appears in the output, and the attack terminates
    successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Fragmentation and ChopChop attacks](img/B04527_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then we can proceed to forge an ARP request to inject into the network, as we
    will see next. Otherwise, we can try with the ChopChop attack.
  prefs: []
  type: TYPE_NORMAL
- en: The ChopChop attack can also recover the keystream from a single WEP encrypted
    frame like the Fragmentation attack does, but it is a little more complex and
    usually slower because it only relies on the cypher-text and not on any known
    plain-text.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform it, we execute the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Fragmentation and ChopChop attacks](img/B04527_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the attack is successful, we notice that the keystream and the plain-text
    are saved.
  prefs: []
  type: TYPE_NORMAL
- en: Forging and injecting ARP request frames
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Having recovered the keystream, it is now possible to forge an encrypted ARP
    request, using the `packetforge-ng` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `--arp` (or -0) is for ARP packets, `-a` is the MAC address of the AP,
    `-h` is the source MAC address, `-k` is the destination IP address, `-l` is the
    source IP address, `-y` specifies the keystream file (obtained with the previous
    seen attacks), and `-w` is the file where we need to save the generated ARP request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forging and injecting ARP request frames](img/B04527_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have forged the ARP request, we can inject it with `aireplay-ng`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we can notice the details of the ARP request being
    injected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forging and injecting ARP request frames](img/B04527_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `--interactive` option allows us to inject frames of our choice, specified
    with the `-r` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'We switch back to the `airodump-ng` terminal and we should observe the number
    of captured frames (#Data) increasing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we have a sufficient number of frames, we can start `aircrack-ng` to work
    on the generated `pcap` file and recover the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Forging and injecting ARP request frames](img/B04527_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WEP cracking with automated tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we covered WEP key cracking using the tools included
    in the Aircrack-ng suite, which provides a wide range of options and a great level
    of control and granularity. It is essential for wireless penetration testers to
    learn to use these tools and understand the logic of the implemented attacks.
  prefs: []
  type: TYPE_NORMAL
- en: There are also other tools in Kali Linux that automate the WEP cracking process,
    and therefore, are easier and immediate to use.
  prefs: []
  type: TYPE_NORMAL
- en: One of these is a Python script called Wifite that uses the Aircrack-ng tool
    for key cracking. We can download the program and read the documentation and usage
    examples on the Wifite website at [https://code.google.com/p/wifite/](https://code.google.com/p/wifite/).
    The latest version of the program is available at [https://github.com/derv82/wifite](https://github.com/derv82/wifite).
    We will cover Wifite in [Chapter 5](ch05.html "Chapter 5. WPA/WPA2 Cracking"),
    *WPA/WPA2 Cracking*.
  prefs: []
  type: TYPE_NORMAL
- en: Another simple and automated program is Fern WiFi Cracker, which we will explore
    next.
  prefs: []
  type: TYPE_NORMAL
- en: WEP cracking with Fern WiFi Cracker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fern WiFi Cracker is a GUI tool written in Python and based on the Qt library,
    and relies on the Aircrack-ng tools to do the underlying job.
  prefs: []
  type: TYPE_NORMAL
- en: It is not only designed to crack WEP and WPA/WPA2 keys with just a few mouse
    clicks, but can also perform various other wireless attacks against APs and clients.
  prefs: []
  type: TYPE_NORMAL
- en: To run the program, we navigate to **Application Menu** | **Kali Linux** | **Wireless
    Attacks** | **802.11 Wireless Tools** | **fern-wifi-cracker**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GUI is simple and intuitive. At the top of the window, there is a drop-down
    menu that lists the available wireless interfaces. We select our interface and
    the program puts it in monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To scan for wireless networks, we click on the **Scan for Access points** button
    and we should see the number of detected networks with WEP or WPA encryption,
    besides the relative buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We click on the **Wi-Fi WEP** button, which opens a window showing the detected
    WEP networks on the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'We select our target network and watch its details in the pane below. At the
    bottom, there is the attack pane, where we can choose which attack to perform
    against the network. For this example, we select the **Fragmentation attack**
    option on the left and then click on **Wi-Fi Attack** on the top-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The attack pane shows the progression of the attack with the number of captured
    IVs increasing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the program returns the cracked key (in hexadecimal) at the bottom
    of the window. We can right-click on it and copy the key or convert in ASCII text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After this is done, the Attack Panel will display the ASCII key like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the main window, we can see that the **Key Database** entry has been populated
    with our recovered key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Indeed, after completing an attack, the cracked key is saved in a SQLite database
    and we can see its details by clicking on the **Key Database** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WEP cracking with Fern WiFi Cracker](img/B04527_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the WEP protocol, the attacks that have been developed
    to crack the keys, the Aircrack-ng suite and other automated tools included in
    Kali Linux that implement these attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the WPA/WPA2 protocol and the tools used
    to attack it.
  prefs: []
  type: TYPE_NORMAL
