- en: Deploying a Hybrid On-Premises Kubernetes Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have focused on Docker and Kubernetes concepts
    from a more theoretical standpoint—now, it is time to utilize this knowledge and
    deploy a Kubernetes cluster from scratch. The goal of this chapter is to have
    a fully functional, hybrid Windows/Linux Kubernetes cluster in an on-premises
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your needs, you may use this approach to create a minimalistic
    local development cluster (one Linux **virtual machine** (**VM**)) acting as master
    and one Windows VM acting as node) or to deploy a production-grade on-premises
    cluster with Linux and Windows nodes. You are not limited to Hyper-V clusters—this
    approach can be used for bare-metal machines, VMware clusters, or VMs running
    in the cloud. Using kubeadm to create Kubernetes clusters gives you the flexibility
    to deploy the cluster anywhere, as long as the proper networking is set up and
    the machines are capable of running containerized workloads.
  prefs: []
  type: TYPE_NORMAL
- en: We also recommend using kubeadm as it is a low-level tool that gives a lot of
    insight into how the cluster is actually created. In the future, you can expect
    other solutions built on top of kubeadm (such as Kubespray), which supports hybrid
    clusters. But even then, it is still advised to try a pure kubeadm approach to
    learn the baseline steps for Kubernetes cluster Deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Hyper-V environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Kubernetes master node using kubeadm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Kubernetes network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing VMs for Windows nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining Windows nodes using kubeadm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and inspecting your first application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit); a
    Hyper-V host with at least 16 GB RAM (maybe less, if you choose not to install
    Desktop Experience for Windows Server and Ubuntu Server VMs). You may use any
    other Windows or Windows Server edition that has Hyper-V available. For Hyper-V,
    you need the **Intel Virtualization Technology** (**Intel VT**) or **AMD Virtualization**
    (**AMD-V**) technology feature enabled in **Basic Input/Output System** (**BIOS**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: Windows 10 Home cannot be used as a Hyper-V host.'
  prefs: []
  type: TYPE_NORMAL
- en: A minimum of 15 GB disk space for the Linux master VM and 30 GB disk space for
    each Windows node VM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu Server 18.04 **Long-Term Support** (**LTS**) **International Standards
    Organization** (**ISO**) ([http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso](http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2019 (**Long-Term Servicing Channel** (**LTSC**), Desktop Experience
    available) ISO or Windows Server 1903 (**Semi-Annual Channel** (**SAC**), no Desktop
    Experience) ISO. You should check [https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/)
    for the latest recommendations regarding the current Windows Server version. You
    can obtain evaluation ISOs from the Microsoft Evaluation Center ([https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2019](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2019)),
    or, if you have a Visual Studio subscription ([https://my.visualstudio.com/Downloads/Featured](https://my.visualstudio.com/Downloads/Featured)),
    you can download ISOs for development and testing purposes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubectl installed—the installation process has been covered in [Chapter 6](791e78c0-f625-4232-9907-36e25ec2767d.xhtml), *Interacting
    with Kubernetes Clusters*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can download the latest code samples for this chapter from the official
    GitHub repository at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Hyper-V environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in a cluster Deployment is preparing the Hyper-V host for Kubernetes
    master and node VMs.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose to use a different hypervisor or use bare-metal machines, you
    may skip this section.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you have already installed Docker Desktop for Windows on your machine
    in the previous chapters, then Hyper-V is enabled and configured. All you need
    is to create an internal **Network Address Translation** (**NAT**) or an external
    Hyper-V **Virtual Switch** (**vSwitch**), and you are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the design of the cluster that we are going to
    deploy in this chapter. Bear in mind that the master is *not* configured to be
    **highly available** (**HA**)—HA setup is independent of Windows containers''
    support and you can perform it when preparing Linux master node(s), according
    to the official documentation ([https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a864ac65-13ab-4d85-b84a-6f58d46a49e4.png)'
  prefs: []
  type: TYPE_IMG
- en: The minimal deployment is an Ubuntu Server 18.04 LTS Kubernetes master (with
    the possibility to schedule application Pods) with one Windows Server 2019 LTS
    Kubernetes node. Optionally, you may decide to deploy more Windows and Linux nodes
    (marked with dotted lines in the diagram), following the same instructions or
    cloning the VMs.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Hyper-V
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s enable the Hyper-V feature if you haven''t enabled it previously,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the PowerShell window as Administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command to enable the Hyper-V feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Reboot the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Windows Server as your Hyper-V host, the instructions for enabling
    the Hyper-V role can be found in the official documentation at: [https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/install-the-hyper-v-role-on-windows-server](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/install-the-hyper-v-role-on-windows-server).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, depending on your networking setup, you have to create an appropriate
    Hyper-V vSwitch. You have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal NAT Hyper-V vSwitch**: Use this option if you plan to use the cluster
    for local development only. Any external inbound communication (apart from your
    Hyper-V host machine) will require NAT. This option is preferred for a simple
    Windows 10 development setup, as in most cases you are connected to an external
    network (Ethernet or Wi-Fi) that does not allow you to manage **Dynamic Host Configuration
    Protocol** (**DHCP**) and **Domain Name System** (**DNS**) on your own. In other
    words, if you use an external vSwitch, you will end up with non-predictable IP
    address assignments for your nodes. Without DNS, you will be not able to ensure
    proper Kubernetes cluster connectivity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**External Hyper-V vSwitch**: Use this option if your network has a DHCP and
    DNS server that you (or the network administrator) can manage. This will be the
    case in most production deployments. You need then to assign appropriate **media
    access control** (**MAC**) addresses for your VMs in order to receive the desired
    IP address.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will follow the convention that the default gateway for the network is `10.0.0.1`,
    the master node has the IP address `10.0.0.2`, and nodes have subsequent IP addresses
    `10.0.0.X`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an internal NAT Hyper-V vSwitch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create the internal NAT vSwitch, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the PowerShell window as Administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command to create an internal vSwitch named `Kubernetes
    NAT Switch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `ifIndex` of the vSwitch you have just created. `ifIndex` will be
    needed for NAT gateway creation. You can do this by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c979eca5-b246-4abb-bff2-282f9b654a46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Configure the NAT gateway, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new NAT network, `Kubernetes NAT Network`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you are using an internal NAT vSwitch, you must provide a static IP address,
    a gateway IP address, and DNS server information for each VM. The static IP address
    must be within the range of the NAT internal prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that currently, you can have only one custom internal NAT vSwitch
    in your system. You can read more in the official documentation at: [https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an external Hyper-V vSwitch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alternatively, in order to create an external vSwitch, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Start menu to launch the Hyper-V Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Virtual Switch Manager... from the Actions tab, select External, and click Create
    Virtual Switch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the name `Kubernetes External Switch` and choose the network adapter that
    you use for connecting to the internet—for example, your Wi-Fi adapter, as illustrated
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9ab7c843-10af-48e4-8f75-ff9901ea2e9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK to accept the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, with the Hyper-V environment ready, you can proceed to the next step—creating
    the Kubernetes master node running on the Ubuntu Server 18.04 LTS VM.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kubernetes master node using kubeadm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For hybrid Windows/Linux Kubernetes clusters, you need to deploy a Linux master—this
    step remains almost the same as for Linux-only Kubernetes clusters, and you can
    use any supported operating system for this purpose. We have chosen Ubuntu Server
    18.04 LTS as it is widely supported (officially and by the community), has a straightforward
    installation process, and is easy to manage.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions in this chapter focus on adding Windows nodes to the Kubernetes
    cluster. Master preparation steps are minimal. If you are deploying a development
    cluster on your local machine, using kubeadm to deploy a single control plane
    in your cluster is sufficient. For production deployments, you should consider
    deploying an HA master configuration. You can read more about HA and kubeadm at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/).
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already downloaded the ISO image for Ubuntu Server 18.04 LTS,
    the official image can be found at: [http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso](http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VM and installing Ubuntu Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This subsection will guide you through the following steps, which will prepare
    a new VM with Ubuntu Server:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the VM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Ubuntu Server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the network
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing additional packages for integration with Hyper-V
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a passwordless **Secure Shell** (**SSH**) login
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you need to create a VM that will be used as the master node, running
    Ubuntu Server 18.04\. To do that, open the Hyper-V Manager application and perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Actions menu, choose New and click Virtual Machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Next and choose a Name for the master node VM. We will use `Kubernetes
    Master` for this purpose. Optionally, configure a custom directory for storing
    VM data to ensure enough disk space for hosting the VM, as illustrated in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e6f49608-18a1-4cd6-811c-bf0978a54866.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next dialog, choose Generation 2 and continue, as illustrated in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6e1ef1d7-fe34-4b2b-b96c-926f14631b3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Assign at least `2048` MB of RAM for the master node. You may also choose to
    use the dynamic memory assignment feature. You can find more about hardware minimal
    requirements in the official documentation, at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin).
    For production scenarios, consider using at least `16384` MB of RAM. The following
    screenshot illustrates the process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d17bff58-307b-4fe4-bd9a-057c78eac84e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose an internal NAT or an external switch as the connection for the VM,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d09eade9-aaec-4dde-8a56-2b52da1a75d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new virtual hard disk with `250` GB size. As **virtual hard disks
    v2** (**VHDX**) are dynamically expandable, it is easier to allocate more space
    from the beginning instead of expanding the disk and partitions later. The following
    screenshot illustrates the process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3afdde40-0434-4a19-ab2b-b8e7ed83d009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose to install an operating system from ISO and select your Ubuntu Server
    18.04 LTS image file, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0fe4fd70-cb12-4149-a510-7f403b07538e.png)'
  prefs: []
  type: TYPE_IMG
- en: Finish the VM creation wizard. Before starting the VM, we need to configure
    it further. Right-click the Kubernetes Master VM and open Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Security menu, ensure that the Secure Boot Template is set to Microsoft
    UEFI Certificate Authority, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f8e9c9ab-42a3-4c92-a272-919cf42756a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Processor menu, set the Number of virtual processors to at least `2`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2a2f66be-a2b6-433e-81be-550e975cf0c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In network adapter Advanced Features menu, select Enable MAC address spoofing
    for containers. If you are using an external vSwitch and have an external DHCP,
    you may also want to configure static DHCP assignments. For an internal NAT vSwitch,
    you can leave the default Dynamic setting, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/eee9bc8e-6372-4141-89a0-f2b8f75fa23a.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply all changes and start the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you think about fully automating this process, you may choose Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/))
    for development purposes or Packer for production scenarios ([https://www.packer.io/](https://www.packer.io/)).
    With Vagrant, you can easily create a development VM from scratch and automate
    the provisioning process using, for example, Ansible. Using Packer, you can produce
    machine images for VMs or cloud providers in order to use the **Infrastructure-as-Code**
    (**IaC**) paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ubuntu Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The VM for the master node has been created, and now we need to install Ubuntu
    Server 18.04 LTS on the VM. In order to do that, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the running VM terminal by double-clicking the Kubernetes Master
    VM in Hyper-V manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the installer to initialize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose English as the preferred language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the desired keyboard layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Network connections, proceed depending on your external network configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you use an internal NAT vSwitch, you have to set up the configuration manually.
    Open the eth0 interface and Edit IPv4, selecting the Manual method. Set Subnet
    `10.0.0.0/8`, Address `10.0.0.2`, Gateway `10.0.0.1`, Name servers `8.8.8.8,8.8.4.4`
    (or use your provider's DNS server addresses if possible).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use an external vSwitch, use automatic configuration or manually configure
    the network according to your requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, configure the network proxy. Bear in mind that if you are running
    behind a network proxy, you will later need to configure Docker to use the proxy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed with the default Mirror address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Filesystem setup, configure to Use An Entire Disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the default disk for installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed with the proposed Filesystem setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Profile setup, you can configure the machine name and the first username.
    We will use `kubernetes-master` as the machine name and `ubuntu` as the username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the SSH menu, choose to Install OpenSSH Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not select any additional packages, and continue with the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the installation to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automation of Ubuntu Server installation is possible using Kickstart or preseed configuration
    files. You can find more information in the official documentation, at: [https://help.ubuntu.com/lts/installation-guide/i386/ch04s06.html](https://help.ubuntu.com/lts/installation-guide/i386/ch04s06.html).
    This approach can be used together with Vagrant or Packer. An example preseed
    configuration file for Ubuntu Server 18.04 for Packer can be found at: [https://github.com/ptylenda/ironic-packer-template-ubuntu1804-kubernetes-ansible-proxy/blob/master/http/preseed.cfg](https://github.com/ptylenda/ironic-packer-template-ubuntu1804-kubernetes-ansible-proxy/blob/master/http/preseed.cfg).
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the network configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using internal NAT vSwitch or an external vSwitch with an external
    Windows-based DHCP server, there is some additional network configuration required
    after the machine reboots, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the VM terminal window, use the username `ubuntu` and your password to log
    in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the following file using `vim` or `nano`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you are not familiar with the Vim editor, we highly recommend learning the
    basics. A minimal guide can be found, for example, at: [https://eastmanreference.com/a-quick-start-guide-for-beginners-to-the-vim-text-editor](https://eastmanreference.com/a-quick-start-guide-for-beginners-to-the-vim-text-editor).
    Vim is extremely useful for editing files both on Linux and on Windows, without
    the need for a desktop environment. As an alternative, you can use nano ([https://www.nano-editor.org/](https://www.nano-editor.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using an internal NAT vSwitch, enforce the static IP address configuration
    for the Kubernetes master, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you are using an external vSwitch and an external Windows-based
    DHCP server, set the file contents to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setting `dhcp-identifier` to `mac` is crucial for making DHCP leases work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Save the file and reboot the machine, using the `sudo reboot` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now be installing some additional packages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing additional packages for integration with Hyper-V
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For any network configuration (both internal NAT and external vSwitch), you
    should now install additional virtualization tools that enable some dedicated
    features for integrating with hypervisors, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the machine again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `apt-get` cache by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Install additional virtualization tools, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Reboot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's set up a passwordless SSH login.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a passwordless SSH login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, it is recommended to switch to using SSH instead of the VM terminal
    for managing the machine. This will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the SSH client on your Windows machine that you use to connect to
    the VMs (in most cases, your VM host machine)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating an SSH key pair in order to disable password authentication for SSH
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install the native SSH client on your Windows machine, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the PowerShell window as Administrator
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to get the currently available version of the OpenSSH
    client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the client, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To connect to the Kubernetes master node VM, you need to know its IP address.
    If you are using a static IP address configuration, it is rather straightforward—you
    use `10.0.0.2`. For a dynamic IP address provided by DHCP, you need to determine
    it first. Thanks to the virtualization tools installed in the previous steps,
    you can easily find this in Hyper-V manager in the Networking tab, shown at the
    bottom of the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8773db22-cacf-49bc-a8e6-cd7ac057c64a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, the IP address is `10.0.0.2`, and we can use it to SSH into the
    VM, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you run into connection problems such as `Connection closed by 10.0.0.2 port
    22`, you need to regenerate the SSH host keys. In the VM terminal, run `sudo ssh-keygen
    -A` and try connecting again. If problems persist, analyze the sshd service logs
    using `sudo service sshd status`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is generating an SSH key pair for passwordless login to your
    Kubernetes master VM. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the PowerShell window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to generate the key pair. Do not specify a passphrase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your public key is available in `C:\Users\<user>\.ssh\id_rsa.pub`. Copy
    it to the Kubernetes Master VM, using the following command. This command ensures
    that the  `authorized_keys` file has proper, secure access permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And the last step is to test passwordless authentication and disable password
    authentication for the SSH server for the best security, as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `/etc/ssh/sshd_config`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `PasswordAuthentication yes` line and comment it out, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the changes and restart the SSH server, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Reconnect to verify your configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, it is a good idea to export the Hyper-V VM image (or create a checkpoint)
    for `Kubernetes Master`. This will make it easier to revert to the initial configuration
    if anything goes wrong during the Kubernetes master configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Kubernetes prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Preparing Ubuntu Server 18.04 LTS machines for the Kubernetes master (as well
    as Kubernetes nodes) requires the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the operating system configuration, such as disabling swap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the Docker container runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the steps for Ubuntu Server preparation for Kubernetes are also available
    as a bash script in the official GitHub repository for the book, which can be
    found at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/02_ubuntu-prepare-node.sh](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/02_ubuntu-prepare-node.sh).
  prefs: []
  type: TYPE_NORMAL
- en: As of Kubernetes 1.17, the list of **validated** Docker versions is as follows: 1.13.1,
    17.03, 17.06, 17.09, 18.06, 18.09, 19.03.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to configure the operating system for running Kubernetes, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the PowerShell window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SSH into the Kubernetes master machine, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `apt-get` and upgrade all packages, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the required packages, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable the swap partition for the current boot, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the swap partition permanently. Edit `sudo vim /etc/fstab` and remove
    any lines of type `swap`—for example, the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Editing `/etc/fstab` should be always performed with a **backup** of the file
    created. Configuration errors in this file may lead to a non-bootable system!
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionally, reboot the machine to check that the swap partition has not been
    mounted again. When the machine is rebooted, SSH into the machine and check that
    `swap` is disabled—the list should be empty, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that the `br_netfilter` kernel module is loaded during system boot.
    Use the `sudo vim /etc/modules-load.d/kubernetes.conf` command to create the file
    and set the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the `sysctl` variables for Kubernetes (required for the Flannel network).
    Use the `sudo vim /etc/sysctl.d/99-kubernetes.conf` command to create a new file
    and ensure that the file has the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the `br_netfilter` kernel module for the current boot and reload the `sysctl`
    variables using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, your Ubuntu Server VM is ready for installing Docker and Kubernetes.
    In order to install Docker 18.09, which is the latest validated version for usage
    with Kubernetes 1.16, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the official **GNU Privacy Guard** (**GPG**) key for the Docker `apt` package
    repository, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The latest installation instructions for Docker on Ubuntu can be found at: [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/).
    Always cross-check them with the Kubernetes container runtime installation documentation
    as it contains additional important information, and can be found at: [https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker](https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Docker `apt` package repository, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `apt-get` cache to refresh the repository''s information, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the latest Docker version validated for Kubernetes usage, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable automatic updates for the `docker-ce` package by running the following
    command (this will prevent the installation of unvalidated Docker versions):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the Docker daemon for Kubernetes. Use the `sudo vim /etc/docker/daemon.json`
    command to create a new file and set the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Reload `systemctl` and restart the Docker daemon, using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that Docker is installed properly by running a `hello-world` container,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are working behind a network proxy, you should ensure you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'An `/etc/environment` containing the appropriate proxy variables (example guide:
    [https://kifarunix.com/how-to-set-system-wide-proxy-in-ubuntu-18-04/](https://kifarunix.com/how-to-set-system-wide-proxy-in-ubuntu-18-04/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `/etc/systemd/system/docker.service.d` directory containing an additional
    file with proxy variables (example guide: [https://docs.docker.com/config/daemon/systemd/](https://docs.docker.com/config/daemon/systemd/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Ubuntu Server VM is now ready to be initialized as the Kubernetes master
    node. First, let's do the initial planning for the cluster before we install the
    Kubernetes binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Planning the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you begin initialization of the cluster, you need to determine specific
    subnets and address ranges that will be used by Kubernetes components. This is
    dependent on your external networking setup (for example, avoiding any IP address
    conflicts) and the number of Pods and Services you are planning to run in the
    cluster. In general, it is a good idea to use the defaults, especially for a development
    cluster running on your local machine behind an internal NAT vSwitch. You need
    to determine the following values from the table for your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Description** | **Default value** |'
  prefs: []
  type: TYPE_TB
- en: '| **Service subnet** | Virtual subnet (non-routable) used by Pods for accessing
    Services. Routable address translation from virtual IPs is performed by the `kube-proxy`
    running on nodes. | `10.96.0.0/12` |'
  prefs: []
  type: TYPE_TB
- en: '| **Cluster (Pod) subnet** | Global subnet used by all Pods in the cluster.
    In general, when using Flannel, each node is assigned a smaller /24 subnet for
    its Pods. Bear in mind that this subnet must be large enough for all Pods running
    in the cluster. | `10.244.0.0/16` |'
  prefs: []
  type: TYPE_TB
- en: '| **Kubernetes DNS service IP** | The IP address of the `kube-dns` service
    used for cluster service discovery and domain name resolution. | `10.96.0.10`
    |'
  prefs: []
  type: TYPE_TB
- en: These values will be needed for the next steps when initializing the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the initialization of the Kubernetes Ubuntu master and joining Windows
    nodes, we will be using kubeadm—as of Kubernetes 1.16 (and also 1.17), this is
    the only well-automated cluster deployment method for hybrid Windows/Linux clusters.
    The first step is the installation of kubeadm, kubelet, and kubectl on the Ubuntu
    Server VM. This is also covered in a script available in the GitHub repository,
    at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/03_ubuntu-install-kubeadm.sh](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/03_ubuntu-install-kubeadm.sh).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The official instructions for installing kubeadm and initializing the Kubernetes
    master can be found at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/)
    and [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH into the Ubuntu Server VM, and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the GPG key for the Kubernetes apt package repository, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Kubernetes apt package repository. Use the `sudo vim /etc/apt/sources.list.d/kubernetes.list`
    command to create a new file and set the following contents (note that you currently
    have to use the `kubernetes-xenial` repository as `bionic` is not available yet):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `apt-get` and install the required packages, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the latest Kubernetes version has been installed by running the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable automatic updates for Kubernetes packages by running the following
    command (this is especially important as any Kubernetes components'' upgrades
    should be performed consciously and in a controlled manner, taking all compatibility
    issues into consideration):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Up to this moment, initializing the Kubernetes master and node is exactly the
    same. You can follow the same steps when adding more dedicated Ubuntu nodes to
    the cluster or cloning your VM. If you decide to clone the machine, remember about
    ensuring that the hostname, MAC address, and `product_uuid` are unique for each
    node. Read more about how to ensure this in the official documentation, at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are ready to initialize the cluster using kubeadm. In order to do this,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command, assuming that the Service network is `10.96.0.0/12` and
    the Pod network is `10.244.0.0/16`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Carefully examine the kubeadm initialization output and note down the `kubeadm
    join` information, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If your kubeadm token expires (after 24 hours), you can always create a new
    one using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy your **kubectl config** (**kubeconfig**) to the default location, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is recommended to copy the config to your Windows machine in order
    to be able to manage the cluster without logging into the master node. In the
    PowerShell window, execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Carefully examine the merged config to check that you did not override any
    existing clusters'' configuration. You can read more about merging `kubeconfigs`
    in [Chapter 6](791e78c0-f625-4232-9907-36e25ec2767d.xhtml), *Interacting with
    Kubernetes Clusters*. If the merged configuration is good, you may save it as `$env:USERPROFILE\.kube\config`
    and switch context to `kubernetes-admin@kubernetes` using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the configuration is working correctly. Retrieve the list of nodes,
    as follows (note that the `NotReady` status is caused by no Pod network being
    installed yet):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not plan to add any Ubuntu nodes, you may choose to **untaint** the
    master node in order to allow the scheduling of Linux Pods on the master node.
    Note that this should be performed for development clusters only. This is achieved
    by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In case you would like to set up the cluster again, you first need to tear down
    the cluster using kubeadm. Read more about this procedure in the official documentation,
    at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down).
  prefs: []
  type: TYPE_NORMAL
- en: Your Kubernetes master node is almost ready. The last remaining step is the
    installation of the Pod network. Let's proceed!
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Kubernetes network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the Kubernetes master has been initialized with kubeadm, the next step
    is the installation of the Pod network. We have covered Kubernetes networking
    options in [Chapter 5](da2ee6af-a754-4fc8-ae62-86d8e68f0bd0.xhtml), *Kubernetes
    Networking*, which explains in detail which **Container Network Interface** (**CNI**)
    plugins are supported for hybrid Windows/Linux clusters. For this on-premises
    cluster deployment, we will use the Flannel network with a `host-gw` backend (a `win-bridge`
    CNI plugin on Windows nodes). Remember that you can use this approach only if
    there is **Layer 2** (**L2**) connectivity (no **Layer 3** (**L3**) routing) between
    the nodes. In general, a `host-gw` backend is preferable as it is in a stable
    feature state, whereas an overlay backend is still in an alpha feature state for
    Windows nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in Flannel with overlay backend installation, please
    refer to the official documentation for detailed steps, at: [https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#configuring-flannel-in-vxlan-mode-on-the-linux-control-plane](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#configuring-flannel-in-vxlan-mode-on-the-linux-control-plane).
    Note that you need Windows Server 2019 with the KB4489899 patch installed for
    overlay networking.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Flannel with a `host-gw` backend, perform the following steps (in
    the PowerShell window or on the Kubernetes master via SSH):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest official manifest file for Flannel for Kubernetes, like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Customize the manifest, so that the `net-conf.json` file section has a `host-gw` backend
    type and proper Pod network defined (default: `10.244.0.0/16`), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the modified manifest, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The latest official manifest does not need extra patching for Linux-only scheduling,
    as it already covers this requirement. If you are following the official guide,
    you may skip this step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the Pod network installation has been successful. You should be
    able to schedule a simple interactive Pod that is running Bourne shell—this will
    work only if you have an untainted master node for Pod scheduling or have other
    Linux nodes. This is achieved by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: With the Kubernetes master fully initialized, we can proceed to prepare a VM
    for the Windows node.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing VMs for Windows nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section follows a similar structure as for the Ubuntu Server VM preparation.
    For the Windows VM, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the VM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Windows Server 2019
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the network
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the SSH server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing and configuring Kubernetes prerequisites
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The steps for creating a Windows Server 2019 VM are almost the same as for Ubuntu
    Server 18.04\. If you are interested in screenshots for the process, please refer
    to the previous sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the Windows Server 2019 Kubernetes node VM, open the Hyper-V manager application
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Actions menu, choose New and click Virtual Machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Next, and choose the Name for the Windows node VM. We will use `Kubernetes
    Windows Node 01` for this purpose. Optionally, configure a custom directory for
    storing VM data to ensure there is enough disk space to host the VM. You need
    at least 30 GB of disk space for each node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, choose Generation 2 and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign at least `4096` MB of RAM for the Windows node. Using less memory may
    result in `KubeletHasInsufficientMemory` being reported occasionally and preventing
    Pods from scheduling. The dynamic memory allocation feature will not work as we
    are going to enable nested virtualization for this machine. For production scenarios,
    consider allocating more resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose an internal NAT or an external switch as the connection for the VM. This
    must be the same switch that you use for the master node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new virtual hard disk with `250` GB size or more. As VHDX are dynamically
    expandable, it is easier to allocate more space from the beginning instead of
    expanding the disk and partitions later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose to install the operating system from ISO and select your Windows Server
    2019 (or 1903) image file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finish the VM creation wizard. Before starting the VM, we need to configure
    it further. Right-click the `Kubernetes Windows Node 01` VM and open Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Processor menu, set the Number of virtual processors to at least `2`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Network Adapter Advanced Features menu, select Enable MAC address spoofing for
    containers. If you are using an external vSwitch and have an external DHCP, you
    may also want to configure static DHCP assignments. For an internal NAT vSwitch,
    you can leave the default Dynamic setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply all changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable nested virtualization with the following command in the PowerShell window,
    running as Administrator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The machine is now ready to start the operating system installation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Windows Server 2019
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The installation process for Windows Server 2019 is performed using a graphical
    interface. If you are considering automating the installation process—for example,
    for Vagrant or Packer—you should consider using `Autounattend.xml` files provided
    by virtual floppy drives. You can find an example of such a configuration file
    on GitHub, at: [https://github.com/ptylenda/kubernetes-for-windows/blob/master/packer/windows/http/Autounattend.xml](https://github.com/ptylenda/kubernetes-for-windows/blob/master/packer/windows/http/Autounattend.xml).
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform the installation, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to `Kubernetes Windows Node 01 VM` by double-clicking the machine in
    Hyper-V manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the VM and immediately press any key in order to boot from the installation
    DVD mounted into the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose language and locale settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Install Now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the product key for your installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, you can choose whether to install Desktop Experience or
    not. We suggest not installing it as it makes the installation more compact and
    leaves configuration to command line, which is better for **automation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read and accept the license terms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Custom installation of Windows Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed with the default installation target (whole disk, without partitioning).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the installation to finish and for the machine to reboot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the first login, you have to set the Administrator's password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you have a Windows Server 2019 VM up and running, but before joining it
    to the Kubernetes cluster, we need to configure the network and install prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Additional network configuration is needed only if you are running an internal
    NAT vSwitch—in this case, you need to configure a static IP address, a gateway
    address, and DNS server information. If you are running an external vSwitch with
    an external DHCP, the configuration should be performed automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this guide, we follow the convention that Kubernetes nodes have subsequent
    IP addresses starting with `10.0.0.3`. In order to configure `10.0.0.3` as the
    static IP address for the first node in the cluster, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start PowerShell by running the `powershell` command on the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command to find the `ifIndex` of the main `Ethernet`
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new static IP address of `10.0.0.3` for the interface, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Set DNS server information for the interface, as follows (use appropriate DNS
    servers if needed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you are behind a network proxy, you can define appropriate environment
    variables at the machine level using the following commands in PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`[Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://proxy.example.com:80/",
    [EnvironmentVariableTarget]::Machine)`**'
  prefs: []
  type: TYPE_NORMAL
- en: '**`[Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://proxy.example.com:443/",
    [EnvironmentVariableTarget]::Machine)`**'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at how to approach accessing Windows Server VM remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the SSH server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need a means of connecting to the VM without the Hyper-V terminal—you
    can still use it if you prefer, but it is more limited than using **Remote Desktop
    Protocol** (**RDP**) or SSH. You have the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the SSH server and use Vim for managing configuration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the RDP connection (example guide: [https://theitbros.com/how-to-remotely-enable-remote-desktop-using-powershell/](https://theitbros.com/how-to-remotely-enable-remote-desktop-using-powershell/)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use PowerShell Remoting (example guide: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-6](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-6)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will demonstrate how to enable the first option, SSH server & Vim, on Windows
    Server 2019\. This option makes access to our Kubernetes cluster uniform, and
    you can use the same SSH keys for all nodes. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hyper-V terminal connection for the Windows Server machine, start PowerShell
    by using the `powershell` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify which is the current version of SSH server that can be installed, by
    running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `OpenSSH.Server` capability, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the `sshd` service, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable automatic startup of the `sshd` service, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that the appropriate firewall rule is in place (`OpenSSH-Server-In-TCP`),
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is not present, add it manually, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'From your development machine, verify that the connection to the VM at `10.0.0.3` is
    possible via SSH, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `cmd` shell, which has limited functionality, is started. Start
    PowerShell in the SSH session by using the `powershell` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the default shell for SSH to be `powershell`, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Chocolatey package manager in order to install the Vim editor,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Vim using Chocolatey, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Configure a passwordless SSH login. Add your `~/.ssh/id_rsa.pub` public SSH
    key to `administrators_authorized_keys` on your Windows Server VM, using the vim
    `C:\ProgramData\ssh\administrators_authorized_keys` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fix permissions for the `administrators_authorized_keys` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the `sshd` service, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: All Windows provisioning operations can be performed by a mix of `Autounattend.xml`
    automated Windows setup (using regular `cmd` and `powershell` scripts) and Ansible,
    which is supported on Windows hosts. You can check how this approach works with
    Packer in this minimal example repository, at: [https://github.com/ptylenda/ironic-packer-template-windows2016](https://github.com/ptylenda/ironic-packer-template-windows2016).
  prefs: []
  type: TYPE_NORMAL
- en: At this point, your Windows Server VM is connected to the network and is ready
    for installing Kubernetes prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Kubernetes prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, ensure that Windows Server 2019 is up to date. In order to do that,
    use the Hyper-V terminal connection and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not want to use a third-party module for managing updates, you can
    use the `sconfig` command. Currently, these operations cannot be easily performed
    via SSH as they require a **graphical user interface** (**GUI**) interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell session, using the `powershell` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the `PSWindowsUpdate` custom module for managing Windows updates, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Trigger Windows updates by running the following code (this process may take
    a bit of time to complete):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to install Docker and Kubernetes itself. This can be approached
    in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual Docker installation and configuration, as in the official Microsoft documentation,
    at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semi-automated installation using Kubernetes `sig-windows-tools` scripts, as
    in the official Kubernetes documentation, at: [https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#join-windows-worker-node](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#join-windows-worker-node)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use the second option as it is a more recent approach that aligns with
    kubeadm support for Windows nodes, available from version 1.16 onward. `sig-windows-tools` scripts
    perform the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the Windows Server Containers feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the selected container runtime (Docker or **Container Runtime Interface**
    (**CRI**)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pull the required Docker images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Kubernetes and Flannel binaries, install them, and add them to the `$env:PATH`
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the selected CNI plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install all prerequisites for Kubernetes on Windows, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH into the Windows Server node VM, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and use a new directory where `sig-windows-tools` scripts will be downloaded—for
    example, `sig-windows-tools-kubeadm`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the latest `sig-windows-tools` repository and extract it. Note that
    the path in the repository may change as it is currently dedicated for `v1.15.0` (you
    can check the official documentation for the latest version, at: [https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#preparing-a-windows-node](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#preparing-a-windows-node)).
    Alternatively, you may use the fork in the GitHub repository for the book: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07/07_sig-windows-tools-kubeadm](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07/07_sig-windows-tools-kubeadm).
    The scripts contain a few bug fixes cherry-picked from `sig-windows-tools` that
    ensure networking works correctly. The code for this step can be seen in the following
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you need to customize the `Kubeclusterbridge.json` file. This configuration
    file is used by a helper PowerShell module that installs prerequisites and joins
    Windows nodes. In the following code block, you can find the configuration for
    the Windows Server 2019 node. You can also download it from the GitHub repository
    for the book at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/07_sig-windows-tools-kubeadm/Kubeclusterbridge.json](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/07_sig-windows-tools-kubeadm/Kubeclusterbridge.json).
    You need to ensure that `Images` have versions matching your node operating system
    version and that `Network` has a proper `ServiceCidr` and `ClusterCidr`. Additionally,
    you need to provide a `KubeadmToken` and `KubeadmCAHash`, which were generated
    when the Kubernetes master was initialized. You can generate a new token on the
    Kubernetes master by using the `kubeadm token create --print-join-command` command.
    The code for this step can be seen in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you need to switch to an RDP connection or to a Hyper-V terminal
    connection. The installation script requires some interaction and elevated privileges
    that cannot be performed via an SSH PowerShell session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the PowerShell session using the `powershell` command, navigate to the `.\sig-windows-tools-kubeadm`
    directory, and start the installation process, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The machine will need a reboot during the installation process, and after you
    log in again, the installation will continue. Verify that the loaded configuration
    is as expected, by checking the information shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/318ae8af-2dd1-489c-9d22-7ae13610da62.png)'
  prefs: []
  type: TYPE_IMG
- en: You may run into a *race condition* between the fully running Docker daemon
    and images being pulled. In case of an error, just reboot again or restart the
    installation process with the same command—remember to close the existing PowerShell
    session and start a new one before the next attempt. The process of downloading
    images may take some time, depending on your network connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After images have been pulled, and the Kubernetes, Flannel, and CNI plugins
    have been installed, you will be asked to generate a new SSH key pair for accessing
    the master node from the new Windows node—alternatively, you may do it yourself
    or reuse an existing key pair. This will make the joining process easier, as cluster
    configuration has to be retrieved by the joining script using SSH. Execute the
    command from script output on the `10.0.0.2` master in order to add the public
    key to `authorized_keys` for the Ubuntu user, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/68a0e9e6-640f-4b64-820b-5c25bfb98857.png)'
  prefs: []
  type: TYPE_IMG
- en: When the installation finishes, close the PowerShell window and open a new one,
    using the `powershell` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Currently, you need to clean up the `ContainerBootstrap` scheduler task that
    reruns the script after each boot (this may be fixed in the future releases),
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Verify that Docker images have been pulled using the `docker images` command
    and that Kubernetes binaries have been installed— for example, by running the `kubectl
    version` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider exporting the VM image or creating a checkpoint—this will be useful
    if you choose to add more Windows nodes to the cluster or run into problems during
    the join process. We can now *finally* proceed to join our first Windows node
    to the cluster!
  prefs: []
  type: TYPE_NORMAL
- en: Joining Windows nodes using kubeadm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next task is joining our Windows Server 2019 VM as a node in the Kubernetes
    cluster. We will use the same `KubeCluster.ps1` script from the Kubernetes `sig-windows-tools`
    repository, which internally uses **kubeadm** for joining the cluster. The script
    will perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve the *kubeconfig* file from the `10.0.0.2` master using SSH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register **kubelet** as a Windows service. This will ensure that the kubelet
    process is always running on the Windows node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the CNI plugins' configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Host Networking Service** (**HNS**) network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add firewall rules, if needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register **flanneld** and **kube-proxy** as Windows services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the join script fails, start a new PowerShell session and rerun the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'To join the Windows node, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hyper-V terminal for the Windows Server VM, start a new PowerShell session
    using the `powershell` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the directory with the `sig-windows-tools` scripts by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the join command, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: In case of any problems with the `kubeadm join` command (for example, hanging
    preflight checks), you can edit the `KubeClusterHelper.psm1` file, find the `kubeadm
    join` command, and add the `--v=3` parameter (or any other verbosity level) to
    have more detailed info. Additionally, you can examine the services logs in the
    `C:\ProgramData\Kubernetes\logs` directory. It is also a good idea to verify whether
    the issue is not already known, at [https://github.com/kubernetes-sigs/sig-windows-tools/issues](https://github.com/kubernetes-sigs/sig-windows-tools/issues)—the
    fix may be already available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Joining a new Windows node is a relatively quick process, and after a few seconds,
    the operation should finish. Now, verify whether the new node is visible in the
    cluster and has a `Ready` status, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Windows node, verify using the `ipconfig` command that the `cbr0_ep`
    interface has been created by Flannel, as illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/10ed8551-4d88-49f1-92b4-0d581839e863.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run a quick smoke test of the new node by creating an ad hoc PowerShell Pod
    named `powershell-debug`. The Pod spec override must contain `nodeSelector`, which
    matches Windows nodes, as illustrated in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The image pull can take a bit of time. You can observe the Pod events by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'When the Pod starts, verify DNS resolution and connectivity to external addresses—for
    example, by using the `ping google.com` command, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8fd7dfa6-09b2-48df-b5c5-ff27dba7d263.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Exit the container and delete the Pod afterward, by running the following command
    (we did not use the `--rm` flag so that you can easily investigate any problems
    using the `kubectl describe` command):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'For completeness, in order to remove the Windows node and reset the state of
    the machine (for example, after a configuration change, in order to install and
    join again), use the same `KubeCluster.ps1` script and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations—now, you have a fully functional, hybrid Windows/Linux Kubernetes
    cluster running! You may choose to add more Windows or Linux nodes following the
    same instructions or using VM images (remember about regenerating hostnames, MAC
    addresses, and `product_uuids`).
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and inspecting your first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to have some fun with the newly created Kubernetes cluster.
    We will create a minimal Deployment with the NodePort Service, exposing the application
    to users. The application itself is the official ASP.NET Core 3.0 sample packaged
    as a Docker image—feel free to use any other Windows web application container
    image, or create your own. We have chosen the official sample in order to make
    the Deployment as fast as possible so that we can focus on Kubernetes operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy the sample application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `windows-example.yaml` manifest file that contains the Deployment
    and Service definition. You can download it from the GitHub repository ([https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter07/09_windows-example/windows-example.yaml](https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter07/09_windows-example/windows-example.yaml))
    or directly apply it to the cluster, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three important points in this manifest file, which have been marked
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheduling for Windows nodes** requires the use of `nodeSelector` with a `"beta.kubernetes.io/os":
    windows` value. Similarly, if you need to schedule the Pods for Linux nodes, you
    should use the `"beta.kubernetes.io/os": linux` node selector in hybrid clusters.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pod definition consists of one container based on a `mcr.microsoft.com/dotnet/core/samples:aspnetapp-nanoserver-1809`
    image. It is important to ensure **compatibility** between the container host
    operating system version and the container base image version. In this case, Windows
    Server 2019 LTS is compatible with 1809-based images. If you chose to use Windows
    Server 1903 nodes, you have to use 1903-based images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **NodePort Service** will be exposed on port **31001** on each node in the
    cluster. In other words, you can expect that the application will be available
    at the `10.0.0.2:31001` and `10.0.0.3:31001` endpoints. Note that for LoadBalancer
    Services, if your infrastructure does not have load balancers, you can consider
    using **keepalived** ([https://github.com/munnerz/keepalived-cloud-provider](https://github.com/munnerz/keepalived-cloud-provider)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the PowerShell window and apply the manifest file using `kubectl`, like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for the Pods to start—the initial image pull may take a few minutes. You
    can observe the status of the Pods with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your internet browser and navigate to `http://10.0.0.2:31001` and `http://10.0.0.3:31001`.
    You should see the sample application web page that confirms that the deployment
    was successful, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/91d84c1f-bfab-4e8b-a3e2-94f4f37d6948.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s perform two common operations that are useful when debugging the
    application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieving Pod container logs: To access logs of one of the Pods (`windows-example-66cdf8c4bf-4472x`)
    in the Deployment, use the following `kubectl logs` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute into the Pod container in order to inspect the application configuration.
    To start a new `cmd` shell (PowerShell is not available in the `nanoserver` image),
    run the `kubectl exec` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now freely access and modify the container, which is useful in debugging
    and testing scenarios. For example, you can get the contents of the `appsettings.json`
    file, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, deploying a sample Windows application to a Kubernetes cluster
    is easy, and all the debugging techniques you know from Linux Kubernetes clusters
    work exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have gone through the journey of creating an on-premises
    Windows/Linux Kubernetes cluster on a Hyper-V host. This approach is useful for
    creating local development clusters as well as deploying production clusters outside
    of cloud environments. Let's have a recap of the procedure—we first planned the
    cluster design and the network for the nodes, Pod, and Service **classless inter-domain
    routings** (**CIDRs**). Then, we have created the Ubuntu Server 18.04 LTS VM—our
    Kubernetes master. Creating the master node required an initial configuration
    of the operating system and the installation of Docker. Initialization was performed
    using kubeadm. The next important step was the installation of the Kubernetes
    Pod network, which had to be compatible with both Linux and Windows nodes. In
    our case, we have chosen Flannel with a `host-gw` backend, which is currently
    the only stable network solution for hybrid clusters running on-premises. And
    after that, you have learned how to create the Windows Server 2019 LTS VM and
    how to join the machine to a Kubernetes cluster using kubeadm and `sig-windows-tools`
    scripts. Finally, we have deployed a sample ASP.NET Core 3.0 application and performed
    common operations, such as accessing container logs or executing into a container.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to perform a similar cluster Deployment
    using AKS Engine. Currently, this is the best and the most stable approach for
    deploying hybrid Kubernetes clusters in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When should you use an internal NAT Hyper-V vSwitch? What are the use cases
    for an external vSwitch?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which configuration steps are required for preparing a Linux node or master?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are a Service subnet range and a Pod subnet range?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you generate a new kubeadm token for joining the cluster?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you allow scheduling of application Pods to the master node?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the recommended networking solution for on-premises clusters with Linux
    and Windows nodes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which steps do you need to perform to join a Windows node to the cluster?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command for accessing Pod container logs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find answers to these questions in *Assessments* in back matter of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, most of the resources regarding the Deployment of hybrid Windows/Linux
    clusters are available online. There are two official guides for creating such
    clusters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes guide, available at: [https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft guide, available at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/getting-started-kubernetes-windows](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/getting-started-kubernetes-windows).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both guides are often updated, so it is worth checking them as the Deployment
    procedure may be simplified over time.
  prefs: []
  type: TYPE_NORMAL
- en: You may also find useful the following **Software-Defined Networking** (**SDN**)
    repository from Microsoft, available at: [https://github.com/microsoft/SDN/tree/master/Kubernetes/windows](https://github.com/microsoft/SDN/tree/master/Kubernetes/windows).
    It contains many helper scripts that are gradually adopted into the official deployment
    instructions and kubeadm integration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For kubeadm usage and documentation, please refer to [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you need help with troubleshooting and common problems, you can use the
    following guides:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648](https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648)—troubleshooting
    guide, specific to Windows containers networking problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
