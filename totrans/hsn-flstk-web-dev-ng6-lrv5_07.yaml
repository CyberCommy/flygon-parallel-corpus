- en: Progressive Web Applications with the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned in Chapter 3 , *Understanding the Core Concepts of Angular 6*,
    Angular is one of the main frameworks for developing modern web applications based
    on JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](a5910f49-091c-42b8-bf4c-56a23d2ea354.xhtml), *Creating a RESTful
    API Using Laravel Framework-2*, we completed the backend API using Laravel resources,
    eloquent relationships, and token-based authentication. Now, we have everything
    we need to connect the frontend application to the backend; before we do that,
    let's look at what we will learn in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see some changes that occurred in the `angular-cli.json`
    file, which now provides improved support for multiple applications.
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at how to use `ng add` to create a **Progressive Web Application**
    (**PWA**), and how we can organize our project as modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Starting a web application with the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the baseline for a PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating boilerplate components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a web application with the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we started writing this chapter, the Angular framework had launched its
    newest version: version 6\. In previous chapters, we have already commented on
    some of the novelties that are present in this version.'
  prefs: []
  type: TYPE_NORMAL
- en: The new version is more focused on development tools (such as the Angular CLI)
    than the evolution of the framework itself. We can cite the new functions of the
    Angular CLI with commands such as `ng update` and `ng add`, which are very useful
    for updating packages and adding new ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we need to do is update the Angular CLI on the machine;
    open your Terminal window and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will install Angular CLI 6.0.0 on your machine globally.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the baseline code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to prepare our baseline code, a process very similar to that of
    previous chapters. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy all of the content from the `chapter-05` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the folder to `chapter-07`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `storage-db` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's make some changes to the `docker-compose.yml` file, to fit a new
    database and server containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `docker-compose.yml` and replace the contents with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we changed the container names, the database, and the MySQL user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`container_name: chapter-07-mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-07-webserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-07-php-fpm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE=chapter-07`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER=chapter-07`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another important point to pay attention to is the configuration of the `php-fpm`
    container volume, which we are now naming as `Server` instead of `project` on
    previous chapters, according to the following highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Open `chapter-07` in `vs.code` and rename the project folder to `Server`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you saw in the previous chapters, the Laravel framework has a well-defined
    way of using its views; this is due to the MVC standard upon which Laravel is
    built.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Laravel uses a JavaScript framework called Vue.js, which can be
    found in the `./Server/resources/assets/js` folder.
  prefs: []
  type: TYPE_NORMAL
- en: In order to not mix things up, we will create our frontend application in a
    folder called `Client`, at the same level as the newly named `Server` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `Client` at the root of the `chapter-07` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end of these changes, you should see the same project structure as the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c7c558f4-335d-416f-86dc-b410b0e60ecf.png)Application structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the best way to keep your application uncoupled from your API. With
    this method, we have some advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: The frontend code is isolated from the rest of the application; we can host
    it in a static web service, such as an **Amazon Web Services** (**AWS**) bucket,
    or any other web server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application deployments can be done separately, so that the API evolves independently
    of the frontend application, and vice versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the changes that we made to the Git source control. Open your Terminal
    window and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Scaffolding a web application with the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start building our frontend application with the new version of Angular,
    using the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window at the root project and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will create all of the boilerplate code that we need, this
    time using the SCSS syntax for style sheets and the `--routing` flag to create
    application routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end of the previous command, our application will have the following
    structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bfdd5946-7b1a-4f2c-a505-bbcd095c24c2.png)New application structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the changes that version 6 of Angular and the Angular CLI brings is
    the `angular.json` file, which was previously named `angular-cli.json`. Its structure
    is very different, as you can see in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0c8a4da1-fd67-4049-9b2f-148c8ab77317.png)Angular JSON file'
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the application files, we have almost the same code organization and
    files that we had before, as you can see in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2135d742-4694-46f3-aa13-48b4a203df0a.png)New Angular app structure'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, note that we now have a file called `browserlist`;
    it is used to add browser-specific prefixes to CSS-generated code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To facilitate our development, we will create some directories in the application
    so that our project will be ready to be scaled. This means that we can add any
    modules/features that we want, in an organized way.
  prefs: []
  type: TYPE_NORMAL
- en: This step is very important, because, sometimes, the structure within the project
    is defined; it is not recommended to change it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this step, we will use a nomenclature of modules or pages. We will use
    the API definition services that we made in the previous chapter as the baseline:'
  prefs: []
  type: TYPE_NORMAL
- en: A home page, which we will call a `home` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A page of motorcycles, which we will call a `bike-list` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bike detail page, which we will call a `bike-details` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A builders page, which we will call a `builders-list` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A builder details page, which we will call a `builder-details` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A register page, which we will call a `register` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A login page, which we will call a `login` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on the preceding descriptions, our application will have the following
    pages, or modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bike`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`builder`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`register`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We prefer to use a nomenclature of *modules* or *pages* instead of components
    at this time, not to be confused with the terminology of components proposed by
    Angular, where everything is based on components.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, this is just a different way of referring to the application structure.
  prefs: []
  type: TYPE_NORMAL
- en: Open VS Code, and, inside `Client/src/app`, create a new folder named `pages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still in VS Code and inside `Client/src/app`, create a new folder named `layout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still in VS Code and inside `Client/src/app`, create a new folder named `shared`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s look at what the folder names mean in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `pages` | Holds all of the application''s modules and pages; for example, `pages/bike/bike-component.html` and `pages/builder/builder-component.html`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `layout` | Holds all layout components; for example, `layout/nav/nav-component.html`,
    `layout/footer/footer-component.html`. |'
  prefs: []
  type: TYPE_TB
- en: '| `shared` | Holds shared services, pipes, and so on; for example, a service
    shared by all application pages or components. |'
  prefs: []
  type: TYPE_TB
- en: 'So, at the end of step 3, we will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60895152-3d84-4926-a56b-430492a0a601.png)Folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: Building the baseline for a PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed earlier, we can now use the new `ng add` command to create a
    PWA. But, before that, let's take a look at the concept of a PWA.
  prefs: []
  type: TYPE_NORMAL
- en: A PWA is a set of techniques for developing web applications, progressively
    adding features that were previously only possible in native apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main advantage for the user is that they do not have to download an application
    before knowing if it will be worth it or not. In addition, we can cite the following
    advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Progressive**: For any user, regardless of browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responsive**: Made for any device: desktop, tablet, and mobile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection**: Works even if the user is offline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App-like**: The user feels as if they are in a native app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Updated**: No need to download application updates; the browser will simply
    detect and update automatically, if necessary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure**: Only with HTTPs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engaging**: Through push notifications, the user can be constantly engaged'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installable**: You can add an icon on your smartphone''s home screen with
    just one click'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SEO-friendly**: Search engines can find the contents of applications (which
    benefits both users and businesses)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more about progressive web applications at [https://developers.google.com/web/progressive-web-apps/](https://developers.google.com/web/progressive-web-apps/).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are still disadvantages to PWA in building native applications, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: PWAs do not yet have full control over the hardware of the device; Bluetooth,
    contact lists, and NFC are some examples of features that cannot be accessed by
    PWA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although Google, Microsoft, and Mozilla are betting high on PWAs, Apple isn't.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are still two important features not supported by Safari: push notifications
    and offline operation. But Apple is already considering implementing PWAs, even
    though it may not have much of a choice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For all of the negatives, it is only a matter of time – thinking about it, the
    Angular team already provides us with support for creating PWAs using only the
    Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding PWA features using ng add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's look at how we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside of the `chapter-06/Client` folder and type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate an output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/edaea9d8-5588-4ca6-b2f2-ab8f995f6288.png)Angular PWA output'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the key files in PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's check some important changes made in our application files. The previous
    command will add two new files at the root folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `manifest.json` file is used to set up the:'
  prefs: []
  type: TYPE_NORMAL
- en: Theme color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default display mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Icon configuration and size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, it is possible to set up description tags, related applications, and the
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: A `ngsw-config.json`  file (also known as a service worker configuration), used
    to setup assetsGroup, dataGroups, navigationUrls and cache.
  prefs: []
  type: TYPE_NORMAL
- en: Inside `src/assets` was created a new folder called `icons`; this icon will
    be shown as an application bookmark on your mobile phone screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the following files was updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angular.json` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json` adding: `@angular/pwa` and `@angular/service-worker`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.module.ts` registers the service-worker in production. This means that
    we can see the service-worker in action by using the production command; later
    in this chapter, we will see how to use it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html` adds the `manifest.json` file and the theme color in the `<head>`
    tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PWA in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned in step 4, the Angular engine applies the service work in the
    application only in production mode; that is, only when we use the `ng build`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s look at how this works in practice. But first, let''s see if everything
    has happened as expected, with the creation of the application and the installation
    of `@angular/pwa`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window in the `./Client` folder, and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that the `npm start` command is the same as `ng server`; you can check
    all of the `npm` aliases on the `scripts` tag inside of `package.json`. There,
    we have the following aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the previous command, we can see the following message as the
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is followed by an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a012adee-a0d6-43bd-934f-34ad9bf16867.png)Angular dev server output'
  prefs: []
  type: TYPE_NORMAL
- en: Open your default browser and navigate to `http://localhost:4200/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you can see the welcome screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7fbd412-51b1-4cdb-9c88-506289d46502.png)Angular welcome screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's check the `manifest.json` file. Almost all new browsers have a web inspector,
    where we can debug any website or web application. For the next check, we will
    use the Chrome browser, but you can use your default or favorite browser.
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, click Open to open the web inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are in Chrome, click on the A**pplication** menu tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **manifest** on the left-hand menu, and you should see a panel similar
    to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/460f7169-fd5f-4d1f-9599-a10fac0d45d8.png)Web inspector'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, everything looks as expected; our
    `manifest.json` file is available, with all of the configurations we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Note the Add to homescreen link at the right-hand side of the Identity heading;
    this means that we can add this application on a mobile phone homescreen or a
    browser application's tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you click on this link, you will see a console error, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d46fcfb2-09a0-4348-8168-dc954049aba9.png)Service worker console
    error'
  prefs: []
  type: TYPE_NORMAL
- en: This means that we don't have a service worker, and it's true. Remember that
    Angular will only inject the Service Workers in production, and we are using **`ng
    server` **behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you click on the service work right-hand side menu, you will see an
    empty panel.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application in production mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to check out our application in production mode, to understand
    how a service works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your Terminal window and stop the Angular server with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in the Terminal, type the `build` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that the preceding `npm build` alias command doesn't make use of
  prefs: []
  type: TYPE_NORMAL
- en: the `--prod` flag. So, you need to use the `ng build --prod`
  prefs: []
  type: TYPE_NORMAL
- en: command, or update the `npm build` command with the `--prod` flag.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the previous command, we can see another folder inside the `Client`
    directory, called `dist`.
  prefs: []
  type: TYPE_NORMAL
- en: Angular service – workers in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to start the application generated inside the `./Client/dist/Client`
    folder, to see the service work in action. Don''t worry about this path for now;
    later in the book, we will change it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside the `./Client/dist/Client` folder, and type
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Remember that we installed the HTTP server in the previous chapter; if you haven't
    done so, go to [https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server)
    and follow the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser at `http://localhost:4200/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, open the web inspector panel and click on the **Application**
    tab menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53f31bc2-fe24-4cdd-8c5d-1d97b4e66922.png)Web inspector application
    panel'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have the service worker properly configured and running in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to your browser and click on the **Manifest** menu in the right-hand
    side menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the add to **homescreen** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Congratulations! You have added our application to your apps panel. If you
    are in Chrome, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9e864de1-a81c-4596-a7df-35daa91dfe05.png)Application icon'
  prefs: []
  type: TYPE_NORMAL
- en: So, if you click on the Angular icon, you will be redirected to `http://localhost:8080/`.
  prefs: []
  type: TYPE_NORMAL
- en: At this moment, we already have the basis for our PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the application name; we are using `Client`, but in the real
    world, you can choose your own name.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a progressive web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to present a very useful tool for debugging progressive web
    applications. It is an extension to the Chrome navigator, called the Lighthouse:'
  prefs: []
  type: TYPE_NORMAL
- en: You can get more information about Lighthouse at [https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk/related?hl=us-EN](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk/related?hl=us-EN).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Chrome browser and click on the right-hand side Lighthouse extension,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0ec10f1a-f289-4cd3-9b4e-89066a2a9b3e.png)Lighthouse extension'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Generate report** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the report generation, you will see a result similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8650a77f-7a0a-41de-8a3a-2975a89977b1.png)Lighthouse report'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Lighthouse will analyze five primary items:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search engine optimization** (**SEO**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we have a high score level in each category, even without any content;
    let's focus on the SEO category for now.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how we can improve SEO.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on SEO in the menu on the left-hand side; you will see the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1c5e57f7-6892-4ffc-860e-c573aad58972.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding warning tells us that our application doesn't have a meta description
    tag on `index.html`. So, let's fix it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/index.html` and add the following code right after the viewport
    meta tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If we check again, we will see the following report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/be4b7199-46af-466d-a41b-51a2ef49cee9.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that we have a 100% score for SEO
  prefs: []
  type: TYPE_NORMAL
- en: This way, we can locate all of the problems in our application and correct them
    properly.
  prefs: []
  type: TYPE_NORMAL
- en: We now have everything we need to prepare our application to consume our API,
    but we still have a lot of work left to build the frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next steps, we will look at how to add our components using the Angular
    CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating boilerplate Angular components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw previously, our application has some pages for registration, login,
    and the visualization of the motorcycles list, builders list, and motorcycle voting
    scheme. At this point, we are going to create all of the necessary code to compose
    these features.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the home module and component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next lines, we will create the `home` module and component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window in `./Client/src/app` and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As we saw previously, the preceding command will generate three new files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/app/pages/home/home-routing.module.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/app/pages/home/home.modules.spec.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/app/pages/home/home.module.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we just need to generate the `home` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in the Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the previous command, you will see the following structure in
    the `pages` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/12d4473b-2b1d-4e5c-8a9b-deab577c4e1d.png)Home module structure'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we created a complete module/folder, as we explained previously. Now,
    we can call the new folder `home`. We need to import the newly created `home`
    module into our main project; let's look at how we can do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `src/app/app.modules.ts` and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating the bikes module and component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to create another module and component; let''s look at how
    to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in your Terminal window, in `./Client/src/app`, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As we saw previously, the preceding command will generate three new files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/app/pages/bikes/bikes-routing.module.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/app/pages/bikes/bikes.modules.spec.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/app/pages/bikes/bikes.module.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we just need to generate the `bike` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the previous command, you will see the following structure in
    the `pages` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bd231faf-fa52-4a06-a103-ffd4ce3f141d.png)Bike module structure'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can call the new folder `bikes` (as the Bikes module). We need to import
    the newly created `bikes` module into our main project; let's see how we can do
    that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `src/app/app.modules.ts` and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are injecting the newly created `BikesModule` as a dependent of
    `app.module`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to perform the same action for the Builders, Login, and Register
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the builders module and component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is time to create the `builders` module, using the Angular CLI. Let''s look
    at how we can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As you saw previously, the preceding command will generate three new files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/app/pages/builders/builders-routing.module.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/app/pages/builders/builders.modules.spec.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/app/pages/builders/builders.module.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Still in your Terminal window, type the following command to generate the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the newly created module to the app modules; open `src/app/app.modules.ts`
    and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Preparing Auth routes – login, register, and logout components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we can create the Auth routes, including `Login` and `Register`; again,
    we will use the power of the Angular CLI to create a new module and components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in your Terminal window, type the following command to generate the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the newly created module to the app modules; open `src/app/auth/auth.modules.ts`
    and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Pay attention; this time, we added `LoginComponent` to `auth.module.ts`,
  prefs: []
  type: TYPE_NORMAL
- en: and didn't add it to `app.module.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to create the `register` component inside of `auth.module`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the newly created module to the app modules; open `src/app/auth/auth.modules.ts`
    and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the newly created module to the app modules; open `src/app/auth/auth.modules.ts`
    and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: At this point, our authentication module is complete; that is, we have all of
    the components that we will use – `register`, `login`, and `logout`. But we still
    need to inject our new module into the main application module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the app modules, open `src/app/app.modules.ts`, and add the following
    lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of this step, you will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/400a32a2-e034-43dc-bad8-a74961bd3802.png)Application modules structure'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a layout component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the last step of this section, we will create a layout component for the
    main navigation of our app. Note that, this time, we will only create the component
    itself, without the module and route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in your Terminal window, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/58129ae7-59fc-4c64-9a89-87daa622b263.png)Layout folder structure'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations; you just finished one more chapter, and you now have a solid
    frontend application, prepared to receive all of the features it needs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we created a progressive web application with Angular, using
    the advanced techniques of code organization. You also learned how to create modules
    and components using the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to create the components and routes of
    our application.
  prefs: []
  type: TYPE_NORMAL
