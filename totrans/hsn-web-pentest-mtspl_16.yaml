- en: Penetration Testing on Technological Platforms - Apache Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about performing a penetration test on the **JBoss
    Application Server** (**JBoss AS**). Let's now look at another technological platform,
    known as **Apache Tomcat**. The Apache Tomcat software was developed in an open
    and participatory environment and released under Apache License version 2\. Apache
    Tomcat is a Java servlet container that implements multiple core enterprise features,
    including Java servlets, **Java Server Pages** (**JSP**), Java WebSocket, and
    **Java Persistence APIs** (**JPA**). Many organizations have in-house, Java-based
    applications that are deployed on Apache Tomcat. Vulnerable Apache Tomcat software
    is a goldmine for threat actors, given that a plethora of payment gateways, core
    banking applications, and **Customer Relationship Management** (**CRM**) platforms,
    among many other things, run on Apache Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Apache Tomcat architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files and their directory structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting Tomcat installations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing exploitation on Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Apache struts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to OGNL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OGNL expression injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Tomcat ([http://tomcat.apache.org/](http://tomcat.apache.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A backend database; MySQL is recommended ([https://www.mysql.com/downloads/](https://www.mysql.com/downloads/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Metasploit Framework ([https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Apache Tomcat software is an open source web server that is designed to
    run Java-based web applications. Some of the features of the current version of
    Tomcat include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for Java Servlet 3.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSP 2.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Unified **Expression Language** (**EL**) 3.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java WebSocket 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat is developed and handled by a number of developers under the auspices
    of the Apache program platform, released under the Apache Certification 2.0 certificate,
    and is an open source application. Tomcat can be used as either a standalone product
    with its own internal web server or in conjunction with other web servers, including
    Apache and the Microsoft **Internet Information Server** (**IIS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that Apache Tomcat is used by many organizations, the security aspect
    of this platform should be considered wisely. At the time of writing this book,
    Shodan has identified an excess of 93,000 Tomcat instances (both standalone and
    those integrated within JBoss instances) around the world, shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9513002f-fe30-487c-9f33-9b27c9f72d16.png)'
  prefs: []
  type: TYPE_IMG
- en: Vulnerabilities within the Apache Tomcat server can allow threat actors to exploit
    the application that is running on the server, and they can even go beyond generic
    application exploitation and end up getting access to an organization's internal
    network.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache Tomcat architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tomcat can be described as a series of different functional components that
    are combined together with well-defined rules. The following diagram represents
    the structure of Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77b8d094-f942-4e64-a988-a1b220bf7e29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to understand the role of each component shown in the preceding
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server**: A server represents a whole Catalina servlet container. The `server.xml`
    file represents all the characteristics and the configuration of a Tomcat installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service**: A service is a component inside the server that contains connectors
    that share a single container to process their incoming requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engine**: An engine receives and processes information coming in from different
    connectors and returns the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host**: This is the network or domain name that is used by the server. One
    server can have multiple hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contexts**: This represents a web application. There can be multiple web
    applications on a host with different URL paths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connector**: A connector handles communication between the client and the
    server. There are different types of connectors for handling a variety of communications;
    for example, an HTTP connector is used to handle HTTP traffic, while an AJP connector
    is used to communicate with Apache using the AJP protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of the Apache Tomcat architecture, let's
    examine the structure for the files and directories stored on a Tomcat server.
  prefs: []
  type: TYPE_NORMAL
- en: Files and their directory structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The file and directory structure of Tomcat is similar to that of JBoss, which
    we discussed in the previous chapter. In this section, we will quickly go through
    the directory structure of Tomcat, shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f354275-d7bb-48f2-b3a9-12da7f48941f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The subdirectories in the Tomcat directory can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bin`: This directory contains all of the scripts that are required when a
    server is initialized, such as startup and shutdown scripts and executables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common`: This directory contains common classes that Catalina and other web
    applications hosted by the developer can use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`conf`: This directory consists of server XML files and related **Document
    Type Definitions** (**DTDs**) to configure Tomcat.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logs`: This directory, as the name suggests, stores logs generated by Catalina
    and applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server`: This directory stores classes that are used solely by Catalina.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shared`: This directory stores classes that can be shared by all web applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webapps`: This directory contains all the web applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`work`: This directory represents temporary storage for files and directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One of the most interesting directories is the `webapps` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b346e96d-e530-4b8d-8178-bb91f416e01a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By navigating to the `webapps` directory and listing the contents, we can take
    a look at the directories, as in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ROOT`: This is the web application''s root directory. It contains all the
    JSP files and HTML pages, client-side JAR files, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs`: This directory contains the Apache Tomcat documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`examples`: The `examples` folder contains servlet, JSP, and WebSocket examples
    to help developers with development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host-manager`: The `host-manager` application lets us create, delete, and
    manage virtual hosts within Tomcat. This directory contains the code for this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manager`: `manager` lets us manage the web applications installed on the Apache
    Tomcat instance in the form of **Web Application Archive** (**WAR**) files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A clear understanding of the file and directory structures can help us to perform
    quite an efficient reconnaissance for our penetration tests on the target Tomcat
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Tomcat installations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For now, let's see how we can detect whether Tomcat is installed on a server
    and what the commonly known detection techniques that can be used for further
    reconnaissance are.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via the HTTP response header – X-Powered-By
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A very common way of detecting an Apache Tomcat installation is by looking
    at the `X-Powered-By` HTTP header in the server response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbdedd9c-6fec-4c58-a31a-33c9fc3e7a79.png)'
  prefs: []
  type: TYPE_IMG
- en: A typical installation will give the Apache Tomcat version in the HTTP response
    header.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via the HTTP response header – WWW-Authenticate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An easy method of detecting Tomcat is by requesting the `/manager/html` page.
    Once you have made the request, the server will respond with an HTTP code `401
    Unauthorized` reply with a `WWW-Authenticate` HTTP header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22bbe6a0-3f39-4392-bfe0-033f5e68783f.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, this specific header will have a
    `Tomcat Manager Application` string set to it and by using this header, we will
    be able to detect whether the target server has Tomcat installed.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via HTML tags – the title tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you see a blank page when you open a Tomcat instance, you can still detect
    whether it''s a Tomcat page by looking at the HTML `<title>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c882c6ce-2563-4c74-861f-2d7381b9df58.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Apache Tomcat`string is mentioned in between the `<title>` tags, as in
    the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via HTTP 401 Unauthorized error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tomcat installations often use the Tomcat Manager web application to manage
    and deploy web applications. It can be accessed via `URL/manager/html`. This produces
    an HTTP authentication panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5bcd2ac-93ad-4899-880d-df7e28fe05b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking Cancel on the popup will give you a 401 error, as in the preceding
    screenshot, which confirms the presence of Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note: **This kind of disclosure of information only exists in the case of
    Tomcat server misconfiguration.'
  prefs: []
  type: TYPE_NORMAL
- en: Detection via unique fingerprinting (hashing)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw in previous chapters that most web applications can be detected using
    their favicons. The `md5` hash of the favicon for different versions can be compared
    to identify the version of Tomcat being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be8b900c-7057-446d-b034-e5a79e062c6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the hash in the OWASP favicon database list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b93069a-f8d5-4231-8596-b4f30d3617a9.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also maintain our favicon database to check for different versions of
    Apache Tomcat installations.
  prefs: []
  type: TYPE_NORMAL
- en: Detection via directories and files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When installed, Apache Tomcat also creates the `docs` and `examples` directories
    to help developers with application development and deployment. By default, the
    URIs for the folders are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/docs/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/examples/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can also use SecLists ([https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists))
    to enumerate sensitive files in Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ea0aab5-2608-482e-a656-6dcf05d30e22.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the different files and folders that can be used
    to identify an instance with Tomcat installed on it. In the next section, we will
    work out how to identify the version numbers of Tomcat installations.
  prefs: []
  type: TYPE_NORMAL
- en: Version detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we've confirmed that the server is running Tomcat, the next step is to
    establish the version information. In this section, we will look at a number of
    ways of detecting the version number of existing Tomcat installations.
  prefs: []
  type: TYPE_NORMAL
- en: Version detection via the HTTP 404 error page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, Tomcat''s 404 error page discloses the version number that it is
    running, so all we need to do is to visit a URL that does not exist on the server
    and the server should throw back an error page, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47dc1bc-db8a-4acf-b8a6-da4d9d2878cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Many administrators don't really hide the web server banner that discloses the
    version number. A threat actor can use this information to find a public or zero-day
    exploit from their arsenal to get access to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Version disclosure via Release-Notes.txt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tomcat also has a `Release-Notes.txt` file that contains details regarding
    enhancements incorporated as part of that release and also the known issues of
    that build. This file also discloses the Apache Tomcat server version number to
    a threat actor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05ebf851-7f60-4f71-b4be-379cb005df55.png)'
  prefs: []
  type: TYPE_IMG
- en: The first line of the release notes contains the version information, as in
    the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Version disclosure via Changelog.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Along with `Release-Notes.txt`, there is also a `Changelog.html` file that
    discloses the version number on the page, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5da165be-331d-4ad7-862a-791654af70c3.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now move on to the next step, which is the exploitation of Tomcat installations.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at how the exploitation of vulnerable versions
    of Tomcat can be performed. We will cover various techniques, including uploading
    a WAR shell and the JSP upload bypass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `search` command on Metasploit to look up Tomcat will provide us
    with a few available modules, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40376757-444e-4a08-8914-36fd552d9b6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use the most basic module, which will brute-force Tomcat Manager and
    give us the credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To load the module, we can use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Before using a module, it''s always good practice to know the workings of the
    module. Keeping that in mind, a pentester can tweak the module in case there''s
    a **Web Application Firewall** (**WAF**) in place. Once the module is loaded,
    we can use the `show options` command to view the options that need to be filled
    in by the tester (as in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db3b7a9d-2350-47af-aa2d-648e90e9a84b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By viewing the options, we can see that it asks for the IP (`RHOSTS`) and port
    (`RPORT`) of the Tomcat installation, along with the word list to use to brute-force
    the credentials. We use the `run` command to execute the module, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fe596bb-26b5-42c3-bc6e-4ba4c456c207.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll get a `Login Successful` message with a correct login/password combination,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46cbd940-773d-4fd6-a513-5b5ccbe36865.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing the server by exploiting the default password vulnerability is one
    of the most common ways of exploiting Apache Tomcat. The attacker does not even
    have to focus a lot of energy on finding different vulnerable endpoints if they
    have obtained access by using the default password.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache Tomcat JSP upload bypass vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a JSP upload bypass vulnerability that affects Tomcat 7.x, 8.x, and
    9.x and TomEE 1.x and 7.x. The vulnerability involves using a `PUT` method to
    upload a JSP file by bypassing the filename filter. A Metasploit module is also
    available for this exploit. Let''s use the module by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54de054f-69e8-4449-b50c-29a507d73222.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting up the `RHOSTS` value and executing the module using the `run` command
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f4f2d5f-53f2-4911-899a-4f4b9a293256.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the following screenshot, this Metasploit module will first
    use the HTTP `PUT` method to upload a JSP file with `/` (forward slash) after
    the `.jsp` extension. If the Apache Tomcat instance responds back with an HTTP
    `201` (Created) code, this means that the file has been successfully uploaded
    to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b73533e-699d-4ee1-9559-b081338e1365.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The reason why the file is uploaded is that there''s a file upload restriction
    vulnerability on the Tomcat server (on specific versions only) that filters out
    the files if the file extension is JSP. Using this forward slash, we can bypass
    this restriction to upload a malicious JSP-based web shell. In this case, the
    payload file is sent to the target server using the `PUT` method, as can be seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/606bfda9-ee7a-4b36-9752-9c12c3603f48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As mentioned previously, in the case of a successful upload, the server will
    give an HTTP `201` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/575c984c-7d7f-4e6d-871a-4ed7f48389d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the payload file has been uploaded, the Metasploit module requests the
    same filename for our payload execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/765ec831-955b-4e9b-95ec-7a92404991f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After a successful payload execution, we''ll get a generic shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1eed01bb-bbc6-4e45-b145-38feaef1c8ac.png)'
  prefs: []
  type: TYPE_IMG
- en: It's not necessary for us to always get a `root` (privileged) shell after exploiting
    a JSP upload bypass. There will be more cases where we have to escalate our privileges
    from a normal user to `root`.
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat WAR shell upload (authenticated)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say we have the credentials to an Apache Tomcat instance (maybe via
    snooping/sniffing or from a file with sensitive information). A user can run a
    web application by uploading a packed WAR file to the Apache Tomcat instance.
    In this section, we will upload a WAR file to get a bind/reverse shell connection.
    Please note that the WAR shell upload requires authentication to work; otherwise,
    the server will respond with an HTTP `401` (Unauthorized) code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, let''s request the `/manager/html` page. The server will ask
    for HTTP authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7370f154-d965-4538-ab20-af95a602c618.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once authenticated, the page will be redirected to `/manager/status`, as in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cea1d303-f1bd-4111-9aa4-1746d38822f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on List Applications will list all the installed applications that
    are managed by this Apache Tomcat instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d368d15-cb67-40ca-8b20-ddfdeeef971c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scrolling down the same page, we''ll find a Deploy section where we can either
    deploy the WAR that is on the server via the URL, or we can deploy it by uploading
    our own WAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/128cdbc8-cc17-4905-bf31-b0ad7fcdd62b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can upload a WAR file (`redteam.war`) to the server from the WAR file to
    deploy section of the page. Clicking on the Deploy button will deploy our WAR
    file. In the event of a successful WAR deployment, our application will be installed
    on the Apache Tomcat server, which we can view from the List Applications option
    (as mentioned previously):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe60cb40-a7dc-44df-a592-17b47e8b0b09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, our WAR file is deployed. Now,
    we just need to access our JSP shell from the browser normally and pass the commands
    to execute as values to the parameters (shown in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d459ca1-acfa-429e-a31d-ccf42e1d4af2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same process can also be achieved using Metasploit. Using the `tomcat_mgr_upload`
    module in Metasploit, we can upload a WAR shell. Let''s use this module by executing
    the following command in `msfconsole`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fb439e1-dad9-4ef8-831d-637c0f9df625.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As this is an authenticated mechanism, we need to provide the credentials for
    HTTP authentication. Let''s execute this module so that Metasploit can upload
    the WAR file and execute the payload on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8438f5e-4edb-4880-885d-256f004c2489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, the module was successfully authenticated
    with the server and uploaded a WAR file (`ymRRnwH.war`). Once uploaded, the module
    then called the JSP payload packed inside the WAR file and executed it to get
    a reverse `meterpreter` connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec62a8d7-cd3e-4d0d-8f62-109538f30387.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the steps that `meterpreter` checks while executing the `tomcat_mgr_upload`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: The Metasploit module checks whether the credentials are valid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If they are valid, the module gets the value for `org.apache.catalina.filters.CSRF_NONCE`
    from the server response (the CSRF token).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The module then tries to upload a WAR payload through the HTTP `POST` method
    (without authentication).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the preceding step fails, the module uploads the WAR file (`POST/manager/html/upload`)
    using the credentials provided to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon successful upload, the module requests the JSP `meterpreter` file from
    the server, resulting in an opened `meterpreter` connection (a reverse connection,
    in this case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Note:**'
  prefs: []
  type: TYPE_NORMAL
- en: We have uploaded and executed the `meterpreter` shell to get a reverse connection.
    There are some cases where a reverse connection is not possible. In these instances,
    we can always look for bind connections or maybe tunnel the `meterpreter` sessions
    via HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how we can upload a WAR shell to an Apache Tomcat instance
    and how we can exploit some of the vulnerabilities, let's move on to the next
    level of attacks that are performed on the Apache Tomcat instance.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Apache Struts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Struts is a free, open source framework that follows the MVC architecture
    and is used to develop Java-based web applications. It uses the Java Servlet API.
    It was originally created by Craig McClanahan and was donated to the Apache Foundation
    in May 2000\. The first full release of Apache Struts 2 took place in 2007.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at a few vulnerabilities that have been discovered
    in Apache Struts.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding OGNL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Object Graph Notation Language** (**OGNL**) is an EL that simplifies the
    accessibility of the data stored in `ActionContext`. `ActionContext` is a container
    of objects that an action might require for execution. OGNL is very heavily linked
    in Apache Struts 2 and is used to store form parameters as Java Bean variables
    in ValueStack. **ValueStack** is a storage area where data is stored to process
    a client request.'
  prefs: []
  type: TYPE_NORMAL
- en: OGNL expression injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OGNL expression injection occurs when unsanitized user input is passed to ValueStack
    for evaluation. In this section, we will try to understand the expression injection
    query and look at an example of exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of a vulnerable web application using
    Struts 2 that is vulnerable to CVE-2018-11776:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b675680-5015-40e8-be8c-7575ec7d8650.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to exploit this Struts vulnerability (CVE-2018-11776) manually by
    taking the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you go to Configuration | Action Chaining in the menu bar, you will notice
    that the following request is sent to the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3fcea68a-a0ef-4981-bfaf-af1b1b3cd15f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The server then returns the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/832d68b3-c34d-4b7b-8707-64e85ba8fc3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we replace the `actionchaining` string with something else, such as `Testing123`,
    as we did in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5dfeff27-99b7-4d10-8998-77d9c43138ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we do this, the server processes our `Testing123` string and responds
    with the same string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2d6107e-672a-4815-8e8d-625244797946.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To test for an expression language injection such as OGNL, we need to use the `${..}`
    or `%{..}` syntax. OGNL will process anything that is included in `${..}` or `%{..}`.
    So, for a simple test, let''s use a `${123*123}` or `%{123*123}` string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22f2e91b-a078-4f9f-8287-983fd56ca758.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As the code resides in the parenthesis preceded by `$` or `%`, the server processes
    this as an OGNL expression and responds with the result shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/081adc0f-5dc1-4a35-8c6f-cf95e6b9f3c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have successfully confirmed the vulnerability in the preceding test
    case, let's understand how we can inject the payload and bypass the sandbox (if
    at all) while performing OGNL injection on the process.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for remote code execution via OGNL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test the vulnerability, we will use the following payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Before breaking down the payload, let''s understand a few things about OGNL
    that will help us understand the payload better:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operators** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `${..}` or `%{..}` | An OGNL expression block. |'
  prefs: []
  type: TYPE_TB
- en: '| `(e)` | A parenthesized expression. |'
  prefs: []
  type: TYPE_TB
- en: '| `e.method(args)` | The syntax for method calling. |'
  prefs: []
  type: TYPE_TB
- en: '| `e.property` | The syntax for calling the property. |'
  prefs: []
  type: TYPE_TB
- en: '| `e1[e2]` | An array index. |'
  prefs: []
  type: TYPE_TB
- en: '| `[e]` | An array index reference. |'
  prefs: []
  type: TYPE_TB
- en: '| `#variable` | The context variable reference. |'
  prefs: []
  type: TYPE_TB
- en: '| `@class@method(args)` | The static method reference. |'
  prefs: []
  type: TYPE_TB
- en: '| `{e1,e2,e3,..}` | List creation—a comma (`,`) is used in the same way as
    a semicolon (`;`) to end a statement. |'
  prefs: []
  type: TYPE_TB
- en: '| `e1.(e2)` | Sub-expression evaluation. |'
  prefs: []
  type: TYPE_TB
- en: Now, let's break down the previously mentioned payload by referring to the preceding table.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous versions of Struts, the `_memberAccess` object was used to control
    what OGNL could do, but in later versions, the `_memberAccess` object was even
    restricted with regards to constructor calling. This was due to the `excludedClasses`,
    `excludedPackageNames`, and `excludedPackageNamePatterns` blacklists, which deny
    access to specific classes and packages. Even though the `_memberAccess` object
    was accessible, there was a strong restriction placed on this object.
  prefs: []
  type: TYPE_NORMAL
- en: To bypass a restriction like this, in Struts versions 2.3.20–2.3.29, we just
    have to replace the `_memberAccess` object with the `DefaultMemberAccess` object
    (an accessible static object from the `SecurityMemberAccess` class), which will
    allow us to control what OGNL can do without any restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, the first line of the payload is used to bypass the restriction on the `_memberAccess`
    object by changing the context from `_memberAccess` to `DefaultMemberAccess`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `OgnlContext` is a class that defines the execution context
    for an OGNL expression according to the Apache Common OGNL expression references
    ([https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/OgnlContext.html](https://commons.apache.org/proper/commons-ognl/apidocs/org/apache/commons/ognl/OgnlContext.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the context has been changed from `_memberAccess` to `DefaultMemberAccess`,
    we can set `MemberAccess` using the `setMemberAccess` method. However, in order
    to access the object, we first need to clear the blacklists (`excludedClasses`, `excludedPackageNames`, and `excludedPackageNamePatterns`).
    We can clear the blacklists by reverting back to the original context, which can
    be seen in the following highlighted line of our payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As we don''t have a context yet, we need to retrieve the context map, which
    can be done by accessing `ActionContext.container`**.** It is now possible to
    access this container as we have already requested the context from `struts.valueStack`**. **Refer
    to the following highlighted line of our payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have access to the context map (refer to the first highlighted
    line of our payload), we can now clear the blacklists so that we can access the
    `DefaultMemberAccess` object, which has no restrictions. The second highlighted line
    of our payload does that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `clear()` method is processed and we have cleared the blacklists,
    we can now set `MemberAccess` using the `setMemberAccess()` method set to `DEFAULT_MEMBER_ACCESS`**. **Refer
    to the following highlighted text in the payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have access to the `DEFAULT_MEMBER_ACCESS` object, we can call
    any class, method, and object that we want from the Java common utility package
    to run in OGNL. In this case, we''ll use the `Runtime().exec()` method to execute
    our command (`#a=@java.lang.Runtime@getRuntime().exec(''id'')`) and, to print
    the command execution output in the response, we''ll use the `getinputStream()`
    method, as you can see in the last two lines of our payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a better understanding of the payload, let''s use the payload
    in the request, which can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef923dc9-8c88-4f0f-8edf-f4acfbecf143.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The server will process the OGNL expression and, after giving access to the
    `DEFAULT_MEMBER_ACCESS` object, our `Runtime().exec()` method will be called,
    which will execute our command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de663026-6b7e-4800-9c9b-d160ac8beaee.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of the `'id'` command will be printed in the `Location` HTTP response
    header, as you can see in the preceding screenshot. Now that we have understood
    the OGNL expression and its manual exploitation, let's try to exploit it using
    Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for blind remote code execution via OGNL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a different scenario where the server is vulnerable to Apache Struts
    2 **Remote Code Execution** (**RCE**) vulnerability, but the code execution response
    is hidden for some reason. In a scenario like this, we can still confirm the RCE
    vulnerability by using the `sleep()` function. Similar to the `sleep()` function
    used in time-based SQL injection, we can use this function to check the response
    time. We have executed the `sleep()` function for 2,000 ms, as you can see in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/133008cf-d3d2-4038-a118-469dfc9a4140.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To confirm the vulnerability, we just have to look at the response time from
    the server, which is the time the server took to process the request and send
    us the response. For this scenario, we executed the `sleep()` function for 2,000
    ms and the server responded with the request in 2,010 ms, as in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f0c7306-26a9-4daa-8d8b-ef1cefc6bf77.png)'
  prefs: []
  type: TYPE_IMG
- en: We should always check for the existence of the vulnerability by changing the
    time to different values.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for OGNL out-of-band injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another way of confirming the vulnerability is by executing commands that will
    interact with our own server placed outside the organization. To check for OGNL
    **Out-Of-Band** (**OOB**) injection, we can execute a simple `ping` command, as in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8911b640-c030-4405-b267-d0775ee5f557.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before sending the payload to the server, we need to use `tcpdump` to listen
    on the public-facing interface of our server. We can execute the `tcpdump icmp
    host <ip>` command to filter the ICMP `echo request` and `echo reply` packets
    on our server. We need to do this so that when we execute the payload, we can
    get the `ping` echo request on our server, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf7a5fbd-b7cd-4297-829b-48ed712332d6.png)'
  prefs: []
  type: TYPE_IMG
- en: For OOB interactions, we can try different protocols, such as HTTP, FTP, SSH,
    and DNS. The OOB injection helps if we're not able to get the output (blind) to
    the response and to check whether getting a reverse shell connection is possible.
  prefs: []
  type: TYPE_NORMAL
- en: Struts 2 exploitation using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have exploited the vulnerabilities of Struts 2 manually and understood
    the concepts clearly, we''ll see how easy it is to exploit the same vulnerability
    using Metasploit. Using Metasploit makes exploitation much easier. We can search
    for all the available modules on Struts by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for `struts` in the Metasploit console, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/160bd356-b5f6-415c-82cb-fb50948bf243.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a demo web application that is running Apache Struts. This
    application is vulnerable to the `S2-013` vulnerability (CVE-2013-1966). Let''s
    look at how we can exploit this vulnerability using Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa4b7727-8ce7-49b0-a679-6c1ccd608137.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We load the Metasploit exploit by typing the following command in `msfconsole`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'By typing the `show options` command, we can see the options available, as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/902fffb8-ec15-4e3d-bcd3-35530ed34d5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the options and running the exploit will give us the command shell.
    In the event that there is no reverse shell connection, we need to perform a simple
    egress test to check whether all the ports are allowed from the target server
    (outbound connection). If the outbound connections are blocked by a firewall,
    we can always try to get a bind connection via the HTTP tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics of Tomcat and read about its architecture
    and file structure. Then, we moved on to the different techniques for identifying
    Tomcat and detecting the version number. Next, we looked at the exploitation of
    Tomcat using the JSP and WAR shell uploads. Toward the end of the chapter, we
    covered Apache Struts, OGNL, and the exploitation of Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to pen test another famous technological
    platform—Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case of black-box penetration testing, how can we identify the Tomcat
    servers publicly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Will the **`Changelog.html`** file always be present on the Apache Tomcat server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I have successfully uploaded the JSP shell to the Apache Tomcat server. However,
    I am unable to access it. What could be the problem?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I found an OGNL OOB injection. How can I exploit this further?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following links can be used as further reference for understanding Apache
    Tomcat and CVE 2019-0232:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/](https://blog.trendmicro.com/trendlabs-security-intelligence/uncovering-cve-2019-0232-a-remote-code-execution-vulnerability-in-apache-tomcat/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/apache/tomcat](https://github.com/apache/tomcat)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
