- en: Putting It All Together
  prefs: []
  type: TYPE_NORMAL
- en: At last! We can now build both the front- and backend of a website and use JavaScript
    on both sides! To bring it all together, let's build a small web application that
    uses an Express API with a React frontend and MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our final project, we''ll use our skills to create a database-backed travelogue
    or travel journal, complete with photos and stories. Our approach will be to take
    this from an initial visual layout, all the way through to the front- and backend
    code. If your HTML/CSS skills aren''t great, don''t worry: the code is provided
    for you at multiple instances so you can begin working on your project where you''d
    like.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The project brief
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaffolding – React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The backend – setting up our API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database – all CRUD operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be prepared to work with the code provided in the `chapter-19` directory of
    the repository, at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-19](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-19).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  prefs: []
  type: TYPE_NORMAL
- en: The project brief
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When beginning a real-world web project from start to finish, it''s important
    to gather the **requirements** up front. This can be presented in many forms:
    a verbal description, a bulleted list of features, a visual wireframe, a complete
    design document, or any combination of these. When examining requirements, it''s
    important to be as explicit as possible in order to minimize miscommunication,
    redundant or abandoned work, and a streamlined workflow. For this project, we''ll
    begin with visual comps.'
  prefs: []
  type: TYPE_NORMAL
- en: If you've ever worked with a graphic designer, you're probably familiar with
    the term comp. A visual comp, short for *comprehensive layout*, is a design artifact
    that is a high-fidelity visual representation of the desired end state for a project.
    For example, a print project's comp would be a digital file with all the required
    assets ready to send to the printer for immediate use. For digital work, you may
    receive Adobe Photoshop, XD, or Sketch files, or many other types of design document
    formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the visuals so that we can then ascertain our requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/781c2632-8646-488c-9b09-baf75f1b05cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.1 – Main page
  prefs: []
  type: TYPE_NORMAL
- en: Our application will have *logged in* and *logged out* states. When logged out,
    the user will see a cover page and will be able to explore the travelogue's entries
    with navigation buttons. For a challenge, display a random entry on page load.
  prefs: []
  type: TYPE_NORMAL
- en: 'The login button in the top-left corner will lead to the next screen, the Log
    In screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/87a4dcee-47fe-43d5-8a46-ce5ae7731142.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.2 – Log In
  prefs: []
  type: TYPE_NORMAL
- en: The login page can be as simple or as complex as you'd like. Perhaps entering
    any username and password combination will work, or for an extra challenge, you
    could incorporate Google or Facebook authentication. You could even write your
    own authentication using your database to store credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once authenticated, we have a new button in the left bar: the dashboard button.
    This is what takes us to the various parts of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5444286-3830-41b0-9a67-c5066473e8f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.3 – Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'When the Countries Visited button is clicked, we''ll display this vector map
    powered by the D3.js graphics library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d9585ee2-43c7-49ee-a756-39fb460bd72c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.4 – Travel map
  prefs: []
  type: TYPE_NORMAL
- en: The countries highlighted are controlled via a JSON manifest, fed by the database
    of entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'And last but not least, the user needs to be able to write entries and insert
    photos:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac1ad9cf-8341-409b-99e1-4477665ec581.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.5 – New entry/edit entry screen
  prefs: []
  type: TYPE_NORMAL
- en: We'll be using a JavaScript WYSIWYG (What you see is what you get) editor called
    Quill.
  prefs: []
  type: TYPE_NORMAL
- en: As you build the app, feel free to take some liberties with the look and feel
    of it—customize it to make it your own! You might also want to add a few more
    features, such as a media library to manage uploaded photos, or a search function.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an idea of our visual layout, let's get started on the frontend
    of our project.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding – React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our project is a prime candidate for using React for our frontend, so let''s
    outline our requirements for the frontend: *One single React application with
    reusable components and **Hooks and context** for state saving*. Hooks are a new
    concept compared to our previous use of React. Added in React 16.8, Hooks are
    functions that allow you to manipulate the state and context for state management
    within a functional component.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to our handcrafted React app, we'll incorporate a few additional
    pre-built libraries to simplify our project and to utilize ready-made tools. D3.js
    is a powerful graphics and data visualization library that we'll leverage for
    our map. Quill is a rich text editor that will allow you to write the entries
    with text formatting, and upload and place photos.
  prefs: []
  type: TYPE_NORMAL
- en: It's up to you to decide whether you'd like to start with `npx create-react-app`
    or use the scaffolded code provided in the `Step 1` folder in the `chapter-19`
    directory of the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m going to make a few recommendations on additional packages to use; as
    you go through the project, feel free to add or subtract packages. I''ll be using
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap (for layout)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3`, `d3-queue`, and `topojson-client` (for our map)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node-sass` (for more efficient stylesheets using Sass)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quill` and `react-quilljs` (a WYSIWYG editor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-router-dom` (a React extension for URL pathing made easy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-cookie` (a package to easily use cookies)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're starting from scratch, feel free to get set up with the `create-react-app`
    scaffold now, or begin using the `Step 1` directory. For the rest of this chapter,
    instructions are provided for you to follow along step by step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Step 1` directory, you''ll find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a standard `create-react-app` scaffold, with a few differences from what
    we''ve done before. Let''s examine one component: the header.'
  prefs: []
  type: TYPE_NORMAL
- en: Functional components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s the code for our `Header.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should notice a few things: first of all, the filename ends in `js`, *not*
    `jsx`. Next, our component is a function that returns HTML, versus a class extending
    `React.Component`. While both class-based and functional components are valid
    in React, functional components are considered more modern when using React, especially
    with the latest methods to leverage state and context. We won''t get into the
    difference between functional and object-oriented programming right now, but suffice
    to say there are differences to be aware of. You can find a useful resource on
    these differences at the end of the chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To progress the app to the next stage, consider the functional requirements
    we laid out. A good next step may be to implement a login system. At this point,
    you probably would neither want nor need to actually validate credentials, so
    a dummy login page will suffice. You have the markup in `Login/Login.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The approach we''re going to take is to use **Hooks** and **context**. Since
    this is a fairly involved topic, we won''t get into all the details here, but
    there are plenty of articles explaining the concepts. Here''s one: [https://www.digitalocean.com/community/tutorials/react-crud-context-hooks](https://www.digitalocean.com/community/tutorials/react-crud-context-hooks).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll go through one example of context and a couple of examples of Hooks
    to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a `UserContext.js` file, which will help track our
    login state throughout the life cycle of our user interaction. The code itself
    is quite simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'React''s **Context API** is a method of providing stateful information to multiple
    components. Notice how I said "provide"? That''s exactly what we need to do next:
    provide our `App.js` context. We wrap the component as such:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we've imported `UserContext` and wrapped our `App` component in the
    `UserContext.Provider` tags with the `loginHook` stateful value provided to it,
    and thereby to its children.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `Main.js` file needs some changes too. Take a look at this snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to import `useContext` and `useCookies` from React and `react-cookies`,
    respectively, and then we can use these **Hooks** to work with our login state.
    In addition to the internal context, we''re also going to store our login status
    within a cookie to allow returning sessions to remain logged in. We also want
    to import `useEffect` from React for our next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Do you remember how, in previous chapters, we reacted to the mount states of
    React components directly with `componentDidMount()`? With React Hooks, we can
    use the `useEffect` Hook to work with the state of our component. Here, we're
    going to ensure that our user context (`loggedIn`) and the `logged-in` cookie are
    set appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Our `setOrCheckLoggedIn` function also needs to be passed to other components,
    namely `Toolbar` and `Login`. Set it as the `doLogin` prop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From this point forward, when we include the context of `UserContext`, we can
    rely on the `loggedIn` state variable to determine whether or not our user is
    logged in. For example, our simple `Login` component''s logic could utilize these
    Hooks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Fairly straightforward! First, we get our context and upon clicking the `Go` button,
    we flip the context. You should incorporate similar logic in the `Toolbar.js` file
    for the login icon to also handle logging out.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we're going to need a backend to interact with our frontend and broker
    the transactions with the MongoDB database, which will store our story entries
    and possibly our user authentication data. It will also be necessary to create
    an endpoint to upload images, as frontend code alone *cannot* write to a server's
    filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: The backend – setting up our API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s catalog the endpoints we''ll need to make our travelogue work:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Read (GET):* Like most APIs, we''ll need an endpoint to read entries. We won''t
    force authentication or being logged in for this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Write (POST):* This endpoint will be used for both creating a new trip and
    editing existing ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Upload (POST):* We''ll need an endpoint to call from our frontend in order
    to upload photos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Login (POST) (Optional):* If you''d like to take your authentication into
    your own hands, create a login endpoint that can use credentials from the database
    or a social-media login endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Media (GET) (Optional):* It will be useful to have an API that lists all of
    the media files uploaded to your server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Countries (GET) (Optional):* It will also be a good idea to have an endpoint
    specifically for listing the countries you''ve visited to power your world map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may find yourself creating more endpoints as you work, and that's fine!
    It's always a good idea to plan your API from start to finish, but if you need
    to make changes along the way to make your life easier with helper endpoints or
    other parts, feel free.
  prefs: []
  type: TYPE_NORMAL
- en: We're ready to move on to the `Step 3` directory in our repository.
  prefs: []
  type: TYPE_NORMAL
- en: API as a proxy – Step 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because we''re using a React frontend, we''ll revisit the idea of using Express
    as a backend with React proxying our API requests, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to tell our system to use a proxy by adding
    this line to our `package.json`: `"proxy": "http://localhost:5000"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding that, restart React (you'll notice that our frontend homepage has
    changed; we'll get to that in a moment) and then, in the `api` directory, execute
    `npm install` in the `api` directory and then `npm start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We should test our backend to be sure our API is responding. Add this as a
    test to the `App.js` file after the imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This very basic `fetch` call should call the `routes/index.js` component''s `get`
    method in our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: At this point, our console should display `OK`. If you have any problems at
    this stage, it would be advisable to debug them now.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know we''ll be setting up a database to handle our data, but for the time
    being, we can scaffold our API''s methods, as you can see in `routes/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've made the scaffold of our login system in **Step 2**, I've made
    a few alterations to the `Step 3` directory. As mentioned before, our homepage
    is a little different in that it's the index page of the travelogue, used to display
    a story while the user is logged out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examine the `Story/Story.js` component next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Yes, another dummy API call to our backend! This call is also a simple GET request,
    so let's do something a bit more involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and log in to the site and you''ll see something different on your
    dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/316b7bc5-3a97-4cac-a510-5695764d85c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.6 – Our dashboard is taking shape...
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, now we have a full dashboard. Click the ADD TRIP button and you''ll
    be presented with an editor, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/906c1808-d284-4f62-beaa-176587980d84.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.7 – Our text editor
  prefs: []
  type: TYPE_NORMAL
- en: If you enter rich text in the editor and save it, you'll see a response in your
    console from the API with the submitted data. From there, we need to work with
    our API to save the data to our database. So... last, but not least, we'll need
    to set up our database.
  prefs: []
  type: TYPE_NORMAL
- en: The database – all CRUD operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will, of course, need a datastore for our create, read, update, and delete
    functionality, so let's return to MongoDB in order to store these documents. You
    can refer back to [Chapter 18](b36b27d1-f6cf-4382-ac73-f21a1aeabd3d.xhtml), *Node.js
    and MongoDB,* if you need to refresh your memory on getting set up.
  prefs: []
  type: TYPE_NORMAL
- en: To get started with setting up a database from scratch, it helps to think of
    the database structure that you intend to use. While MongoDB doesn't require a
    schema, it's still a good idea to plan your MongoDB documents so that you're not
    being arbitrary with functionality or naming between sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an idea of what each collection might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It's good to keep your database simple, but remember that you can always expand
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, of course, I couldn''t just *hand* you a final project, could I? In this
    chapter, we scaffolded our travelogue—the rest is up to you. There are a few pieces
    yet to do to have a fully functional project. After all, we haven''t fully adhered
    to our visual comps, have we? Here are some ideas of what kinds of functionalities
    to implement in order to complete the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Persist information to the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work on image uploading and saving.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit existing articles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `countries` endpoint to populate the D3.js map.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable true login.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamline the user journey.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When complete, this project will be a piece for your portfolio to show how *you*,
    a Python developer, mastered JavaScript. From the beginnings of datatypes, grammar,
    loops, and Node.js, to finally creating a fully functional project, you've come
    a long way.
  prefs: []
  type: TYPE_NORMAL
- en: It's with gratitude that I thank you for accompanying me on this journey! Keep
    learning, and **live long and prosper**.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A useful resource on the differences between functional programming and object-oriented
    programming can be found at [https://www.geeksforgeeks.org/difference-between-functional-programming-and-object-oriented-programming/](https://www.geeksforgeeks.org/difference-between-functional-programming-and-object-oriented-programming/).
  prefs: []
  type: TYPE_NORMAL
