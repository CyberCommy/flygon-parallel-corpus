- en: Chapter 8. Spring Security with ORM and NoSQL DB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with Hibernate using @preAuthorize annotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Hibernate using authentication provider with @preAuthorize
    annotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Hibernate using user details service with Derby database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring framework has been designed to easily integrate with ORM frameworks similar
    to Mybatis, Hibernate, and so on. Hibernate tutorials are very well documented
    and are available on the JBoss website. Hibernate gives us data persistence.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will see how we can integrate Spring Security with ORM frameworks.
    We will also integrate Spring Security with the latest MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: We will first do some basic setup with Hibernate and Spring. Since this chapter
    has database related stuff we need to create a database for all the recipes used
    in the chapter. I am using NetBeans IDE with maven. I feel NetBeans IDE is very
    advanced compared to others.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Spring Hibernate application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a simple horror movie application, which will display a list
    of horror movies with some **CRUD** (**create, read, update, and delete**) functions
    in the UI. The following steps are involved in setting up a *Spring Hibernate*
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `horrormoviedb` database in Derby. You can use NetBeans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Services** tab and you will see **Databases**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click to **JavaDB** to see the **Create Database...** option. Select the
    **Create Database...** option.![Setting up the Spring Hibernate application](img/7525OS_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a table in the database `horrormovie`.![Setting up the Spring Hibernate
    application](img/7525OS_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create columns in the table and name the columns as `horrormovie_id`, `horrormovie_name`,
    and `horrormovie_director`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a maven project, update the POM with Spring, Hibernate, Derby and Spring
    Security dependency, and open it in NetBeans IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an entity class using `@table` and `@column` annotations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `DAO` and `DAOImpl` class to Handle hibernate operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Service` and `ServiceImpl` class to behave like a middle manager between
    the `DAO` and the UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a controller to handle the UI part.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring Security with Hibernate using @preAuthorize annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the current demonstration we are using two different databases. The authentication
    manager is configured with `tenant1DataSource` which connects to a Derby database
    which holds the user and role information. Using this data source we will do that
    authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: For displaying the `horrormovie` list we have created another datasource in
    Derby which is used with the Hibernate configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: In the `DAOImpl` class methods we are using `@preAuthorize` annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use the GlassFish application server to run the application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit the `application-security.xml`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `horrormovie-servlet.xml`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `@preAuthorize` annotation in `DAOImpl`. Spring Security authorizes
    the user when the method is invoked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will do authentication and authorization with a Hibernate
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `application-security.xml` file with data source details and Bean information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Edit the `horrormovie-servlet.xml` file with the controller information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is using JDBC for authentication service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the annotations when you execute the `addHorrorMovie` method Spring checks
    the security context object for credentials and does the authentication and authorization;
    this is given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Some SQL commands are given as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example we have created a Hibernate application and used the JDBC service
    for authentication. The Spring framework interrupts the request to access the
    application and requests the user to enter the credentials. The credentials are
    authenticated using the JDBC details provided in the `application-security.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: On success the user is redirected to the application which displays a list of
    movies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/login`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The screenshots for authenticating and authorizing using JDBC service and applying
    Spring Security on using annotation on methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow of the example is shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_08_03.jpg)![How it works...](img/7525OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using authentication provider* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with MongoDB* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Hibernate using authentication provider with @preAuthorize
    annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are using the sample `horrormovie` application to demonstrate Spring Security
    with Hibernate using custom authentication provider and `@preAuthorize` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we will create our own custom authentication provider and implement
    the interface authentication provider. We will apply the annotation on the `controller`
    method instead of the `hibernate` method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new class which implements the `AuthenticationProvider` interface and
    add the Bean definition to the `application-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `application-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `@preAuthorize` annotation in controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are used to implement Spring Security by using the `AuthenticationProvider`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `application-security.xml` file with data source details and Bean information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Edit the `MyCustomAuthenticationProvider` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Use the annotations in controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/login`'
  prefs: []
  type: TYPE_NORMAL
- en: After interrupting the request, Spring Security invokes `MyCustomAuthenticationProvider`,
    which has the overridden authenticate method for authentication and also the user
    information. The user credentials are authenticated and authorized with the credentials
    in `APP_Users` map on successful authentication and authorization the user will
    be redirected to the success URL configured in the `spring-security.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screenshots for authenticating and authorizing using the custom authentication
    provider and applying Spring Security on using annotation on methods in the controller
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_08_05.jpg)![How it works...](img/7525OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using @preAuthorize annotation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using custom authentication provider with
    @preAuthorize annotation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with MongoDB* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Hibernate using UserDetailsService with Derby database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen Hibernate and Spring security with various authentication
    providers. In this section we will use Hibernate to retrieve users and authorities
    from the database.
  prefs: []
  type: TYPE_NORMAL
- en: For that we are going to implement the `UserDetailsService` interface and implement
    a method in the interface. To begin we need to create entity classes for users
    and roles.
  prefs: []
  type: TYPE_NORMAL
- en: We also moved the `@preAuthorize` annotation to the `controller` class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new class which implements the `UserDetailsService` interface and add
    the Bean definition to the `application-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `application-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `@preAuthorize` annotation in controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the horror database add the tables `USERS` and `USER_ROLE`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert role `ROLE_EDITOR` and users named `ravi` and `ravi123`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are used to integrate Spring Security authentication with
    Hibernate by implementing the `UserDetailsService` interface that interacts with
    Hibernate methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class `MyUserDetailsService` which implements the `UserDetailsService`
    interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Edit the `application-security.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Use annotations in controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/login`'
  prefs: []
  type: TYPE_NORMAL
- en: First we authenticate and authorize using `UserDetailsService` and Hibernate.
    `UserDetailsService` is a Spring Security interface which is implemented by `MyUserDetailsService`
    class. This class is configured in the `application-security.xml` file so that
    Spring Security invokes this implementation class to load the user details using
    Hibernate. `UsersDAO.findByUserName(userName)` is a method to invoke Hibernate
    to get the user information based on the username that is passed.
  prefs: []
  type: TYPE_NORMAL
- en: After applying Spring Security to the controller using annotations, we should
    be able to login with the username and password (ravi and ravi123). The `<password-encoder
    hash="plaintext" />` is a hashing algorithm supported by Spring Security. On successful
    authentication the user will be redirected to the authorized page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow of the application is demonstrated in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_08_07.jpg)![How it works...](img/7525OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using @preAuthorize annotation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using custom authentication provider with
    @preAuthorize annotation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with MongoDB* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section let's see how Spring Security works with MongoDB. MongoDB is
    a popular NOSQL database. It is a document based database. MongoDB is written
    in the popular C++ database which makes it an object oriented document based database.
    In MongoDB queries are also document based, and it also provides indexing using
    JSON style to store and retrieve data. The latest Spring version available is
    Version 3.2 has been included in the POC.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the MongoDB database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the data folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start MongoDB in command prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start MongoDB in another command prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `horrordb` database by inserting data into it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute the command `use horrordb`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add MongoDB dependency to the **POM** (**Project Object Model**) file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add JSON dependency to the POM file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the Spring Version to 3.2.0 and Spring Security to 1.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `MongoUserDetails` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `horror-movie` servlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `Application-security.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps use Mongo with Spring Security to authenticate and authorize
    users by implementing the `UserDetailsService` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Database operations in command prompt is shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Create a class `MongoUserDetailsService` which implements the `UserDetailsService`
    interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Edit the `application-security.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Edit the `horrormovie-servlet.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Use the annotations in controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we authenticate and authorize using `MongoDetailsService` and Spring data.
    `MongoDetailsService` is the implementation of `UserDetailsService`, `getUserDetail`(string
    username) invokes the `springdata` classes to get user credentials from the Mongo
    database based on the username passed. If the data is present based on the username,
    it implies that the authentication is successful. We then apply Spring Security
    on the controller methods using annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Now we should be able to login with the username and password (ravi and 123456).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/login`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow is demonstrated in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_08_09.jpg)![How it works...](img/7525OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using @preAuthorize annotation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using custom authentication provider with
    @preAuthorize annotation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Hibernate using user details service with Derby database*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with MongoDB* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
