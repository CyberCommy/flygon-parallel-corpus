- en: Chapter 5. Building a News Aggregation Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During this chapter, we will create a news aggregation site. We will parse
    multiple feeds, categorize them, activate/deactivate them for our website, and
    display them on our website using PHP''s SimpleXML extension. The following topics
    will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database and migrating the feeds table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a feeds model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating and processing the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the core classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and parsing an external feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database and migrating the feeds table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After successfully installing Laravel 4 and defining database credentials from
    `app/config/database.php`, create a database called `feeds`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the database, open your terminal, navigate to your project folder,
    and run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will generate a new database migration named `feeds` for us. Now
    navigate to `app/database/migrations`, open the migration file just created by
    the preceding command, and change its contents as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have a `title` column to show titles on the website, which is more user-friendly.
    Also, we set a key named `active` because we want to enable/disable feeds; we
    set it with the new `enum()` method of Laravel, which is featured with Laravel
    4\. We also set a `category` column that is also set with the `enum()` method
    to group feeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving the file, run the following command to execute migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If no error occurs, you are ready for the next step of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a feeds model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will benefit from the Eloquent ORM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save this file as `feeds.php` under `app/models/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We set the table name and the fillable columns with values. Now that our model
    is ready, we can proceed to the next step, and start creating our controller,
    along with the form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we should create a form to save records to the database and specify its
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your terminal and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command will generate a `FeedsController.php` file for you with some blank
    methods in the `app/controllers` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default methods in the controller that are auto-filled by the `artisan`
    commands are not RESTful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `app/routes.php` and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Instead of defining all actions one by one, we can define all actions declared
    on a controller with a line of code. If your method names are usable as get or
    post actions directly, using the `controller()` method can save you a large amount
    of time. The first parameter sets the URI for the controller and the second parameter
    defines which class in the `controllers` folder will be accessed and defined.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Controllers that are set in this manner are automatically RESTful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create the form''s method. Add these lines of code into your controller
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The process is quite simple here; we named the method as `getCreate()` because
    we want our `create` method to be RESTful. We simply loaded a view file, which
    we will be generating in the next step directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create our view file. Save this file as `create_feed.blade.php`
    under `app/views/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will produce a simple form, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our form](graphics/2111OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Validating and processing the form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will validate the submitted form and ensure that the fields
    are valid and the required fields are filled. Then we will save the data to the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define the form validation rules. We prefer adding validation
    rules to the related model, so the rules become reusable, and this prevents the
    code from becoming bloated. To do this, add the following code in `feeds.php`
    located at `app/models/` (the model that we generated earlier in this chapter),
    inside the class definition before the last `}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We set the variable as `public`, so it can be used outside the model's file
    itself, and we set it to `static`, so we can directly access the variable.
  prefs: []
  type: TYPE_NORMAL
- en: We want the feed to be a URL, and we want to check whether it's an active URL
    or not using the `active_url` validation rule, which depends on PHP's `chkdnsrr()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Our active field can only get two values, `1` or `0`. Since we set it with integers,
    we can use the `between` rule of Laravel's form validation and check whether the
    number is between `1` and `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Our category field also has the `enum` type, and its value should only be `News`,
    `Sports`, or `Technology`. To check the exact values with Laravel, you can use
    the validation rule `in`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all server configurations support the `chkdnsrr()` method, so make sure
    it's installed on your side, else you may depend on only validating it if the
    URL is formatted correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need a controller post method to process the form. Add the following
    method to `app/controllers/FeedsController.php` before the last `}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's dig into the code one by one. First, we made a form validation and called
    our validation rules from the model that we've generated via `Feeds::$form_rules`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we created an `if()` statement and divided the code into two parts
    with it. If the form validation fails, we return to the form with old inputs using
    the `withInput()` special method, and add a flash data message field using the
    method `with()`.
  prefs: []
  type: TYPE_NORMAL
- en: If the form validation passes, we try to add a new column to the database with
    Eloquent's `create()` method, and we return to the form with a success or error
    message depending on what the `create` method returns.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to make a new view for the index page, which will show the last
    five entries of all the feeds. But before that, we need a function to parse the
    Atom feeds. For this, we will be extending the build in the `Str` class of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the core classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel has many built-in methods that make our life easier. But as in all bundled
    packages, the bundle itself may not satisfy any of its users as it is introduced.
    So, you may want to use your own methods along with the bundled ones. You can
    always create new classes, but what if half of what you want to achieve is already
    built-in? For example, you want to add a form element, but there is already a
    `Form` class bundled. In this case, you may want to extend the current class(es)
    with your own methods instead of creating new ones to keep the code tidy.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will be extending the `Str` class with the method called
    `parse_atom()`, which we will code.
  prefs: []
  type: TYPE_NORMAL
- en: First, you must find where the class file is. We will be extending the `Str`
    class, which is under `vendor/laravel/framework/src/Illuminate/Support`. Note
    that you can also find this class under the aliases key in `app/config/app.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now create a new folder called `lib` under `app/folder`. This folder will hold
    our class extensions. Because the `Str` class is grouped under the folder `Support`,
    it is suggested that you create a new folder named `Support` under `lib` too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now create a new file named `Str.php` under `app/lib/Support`, which you''ve
    just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We gave a namespace to it so we can access it easily. Instead of using it like
    `\app\lib\Support\Str::trim()` (which you can), you can directly use it like `Str::trim()`.
    The rest of the code explains how to extend the library. We have provided the
    class name starting from the `Illuminate` path to access the `Str` class directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open your `app.php` file located at `app/config/`; comment out the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This way, we switched the autoloaded `Str` class with our class, which is already
    extending the original.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to make it identifiable on autoruns, open your `composer.json` file and
    add these lines into autoload''s `classmap` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, run the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will look for dependencies and recompile common classes. If everything
    goes smoothly, you will now have an extended `Str` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Folder and class names are case-sensitive, even on Windows servers.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and parsing an external feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have the feed URLs and the titles on our server all categorized. Now all
    we have to do is to parse them and show them to the end user. There are some steps
    to follow for this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need a method to parse external Atom feeds. Open your `Str.php` file
    located at `app/lib/Support/` and add this method into the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: First, we load the XML feed on the method using SimpleXML's built-in method,
    `simplexml_load_file()`. If no results are found or the feed contains errors,
    we return an empty array. In SimpleXML, all objects and their child objects are
    exactly like XML tags. So if there is a `<channel>` tag, there will be an object
    named `channel`, and if there are `<item>` tags inside `<channel>`, there will
    be an object named `item` beneath each `channel` object. So if you want to access
    the first item inside the channel, you can access it as `$xml->channel->item[0]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need a view to show the contents. First, open your `routes.php` under
    `app` and delete the `get` route that is present by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open `FeedsController.php` located at `app/controller/` and paste this
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the controller, we got the feeds' URLs one by one, and then loaded a view
    and set them one by one as separated variables for each of the categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to loop each feed category and show its contents. Save the following
    code in a file called `index.blade.php` under `app/views/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We wrote the same code for each of the categories thrice. Also, between the
    `head` tags, a bit of styling is done, so the page will look prettier for the
    end user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have divided each category's section with an `<hr>` tag. All three parts
    are working with the same mechanics of each other, except for the source variables
    and grouping.
  prefs: []
  type: TYPE_NORMAL
- en: We first checked whether records exist for each category (the results from the
    database, since we may not have added any news feeds yet). If there are results,
    they are looped through each record using the `@foreach()` method of Blade template
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: For each record, we first show the feed's friendly name (which we defined before
    while saving them) and parse the feed with the `parse_feed()` method we've just
    created .
  prefs: []
  type: TYPE_NORMAL
- en: After we parse each feed, we look to see whether any records are found; if so,
    we loop them all again. To keep the tidiness of our feed reader, we trimmed all
    HTML tags with PHP's `strip_tags()` function and limited them to a maximum of
    250 characters using the `limit()` method of Laravel's `Str` class (which we have
    extended).
  prefs: []
  type: TYPE_NORMAL
- en: Individual feeds' items also have their own title, date, and source link, so
    we have displayed them as well on the feed. To prevent the link from breaking
    our interface, we limited the text, to be written between anchor tags, to 35 characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all of the edits, you should get an output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading and parsing an external feed](graphics/2111OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've created a simple feeds reader using Laravel's built-in
    functions and PHP's `SimpleXML` class. We've learned how to extend core libraries,
    write our own methods, and use them in production. We also learned how to filter
    results while querying the database and how to create records. Finally, we learned
    how to work with strings, limit them, and clean them up. In the next chapter,
    we will be creating a photo gallery system. We will ensure that the uploaded files
    are photos. We will also group the photos into albums, and will relate albums
    and photos with Laravel's built-in relation methods.
  prefs: []
  type: TYPE_NORMAL
