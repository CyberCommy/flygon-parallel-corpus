- en: '*Chapter 1*:'
  prefs: []
  type: TYPE_NORMAL
- en: Where to Start and How to Prepare for the Interview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is a comprehensive guide that tackles the preparation process
    for a Java interview from the very start, to getting hired. More precisely, we
    want to highlight the main checkpoints that can ensure a smooth and successful
    career road ahead. Of course, at the time you read this book, you might find yourself
    at any of these checkpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: Start your interview preparation as early as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the right experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show your work to the world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare your resume
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take the interview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have a clear picture of how to achieve the
    preceding checkpoints depending on your current status. So, let’s start by covering
    the first checkpoint and take a look at the novice interview roadmap.
  prefs: []
  type: TYPE_NORMAL
- en: The novice interview roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start from a fundamental truth that is absolutely necessary, but not
    sufficient, to become a successful developer: the best Java developers are passionate
    about their work, and, in time, true passions become professions. Over the long
    term, passion is priceless and it will make you stand out of the crowd of skilled
    but dispassionate people.'
  prefs: []
  type: TYPE_NORMAL
- en: Since you bought this book, you want to invest some time and money in a Java
    software development career. Mainly, you want to become part of the amazing Java
    ecosystem! You already feel the power and the energy that comes from focusing
    on working with Java, therefore, even if you haven’t yet actively thought about
    it, you’ve already started to prepare yourself for a Java interview.
  prefs: []
  type: TYPE_NORMAL
- en: Most probably, you are a student or you’ve just got a bachelor’s degree in IT,
    computer science, or you’ve simply discovered your propensity for the Java language.
    Nevertheless, since you are here, you have a lot of questions and doubts about
    how to get the dream job in the Java ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is time to bake a plan for success! The following flowchart represents the
    interview roadmap for a student or Java novice who wants to be part of the Java
    ecosystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Novice interview roadmap'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15403_01_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Novice interview roadmap
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover each item of the preceding diagram. Let’s get
    started with the first item, *Know yourself*.
  prefs: []
  type: TYPE_NORMAL
- en: Know yourself
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before searching for a job, it is important to know yourself. This means that
    you should know what kind of developer you are and what kind of job you want.
  prefs: []
  type: TYPE_NORMAL
- en: This is crucial to getting the right experience, evolving your package of skills,
    and finding the right employer. Most probably, you can cover a wide range of Java
    programming tasks, but do you find all of them equally engaging? Doing something
    that you don’t like for a short period of time is OK, but it will not work for
    the long term.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, in the long term, you must focus on what you like to do the most! This
    way, you maximize your chances of becoming a top Java developer. But, doing what
    you like the most should be considered in the context of what the IT market offers
    (in both the short term, and most importantly, the long term). Some Java technologies
    are widely covered by job offers, while others may require a lot of time to find
    a job or must make some really unpleasant trade-offs (for example, relocation).
    It is strongly advisable to periodically consult and participate (every vote counts)
    in the most relevant Java surveys conducted by websites such as blogs.oracle.com,
    snyk.io, jaxenter.com, codeburst.io, jetbrains.com, and dzone.com. Having a wide
    range of companies to choose from statistically maximizes the chances of finding
    the right company for you. This is half of the problem, while the other half is
    to prepare yourself to make sure that the company with the job you want will want
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s examine 10 questions that will help you to identify what kind of
    developer you plan to become. Look inside yourself and try to overlap your personality
    and skills in considering the following questions and explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Are you interested in developing user interfaces or the heavy business logic
    that is executed behind the scenes?** Developing great user interfaces is an extremely
    important aspect of a graphical interface. After all, the graphical interface
    is what the end user sees and interacts with. It requires creativity, innovation,
    vision, and psychology (for example, developing multi-device interfaces is quite
    challenging). It requires knowledge of Java AWT, Swing, JavaFX, Vaadin, and so
    on. On the other hand, the business logic that is executed behind the scenes and
    answers to end user actions is the engine behind the interface, but, for the end
    user, most of the time it is a black box. The business logic requires strong coding
    skills and solid knowledge of algorithms, data structures, frameworks (such as
    Spring Boot, Jakarta EE, and Hibernate), databases, and so on. Most Java developers
    opt for coding the business logic behind the scenes (for desktop and web applications).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What kind of applications do you find most engaging** (desktop, mobile, web,
    or others)? Each type of application has specific challenges and dedicated suites
    of tools. Today, companies target as many consumers as possible, therefore, modern
    applications should be available for multi-platform devices. Most of all, you
    should be able to code in the knowledge that the application will be exposed on
    different devices and will interact with other systems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Are you especially interested in testing, debugging, and/or code review?**
    Having strong skills in writing valuable tests, finding bugs, and reviewing the
    code are the most important skills for guaranteeing a high-quality final product.
    Of these three areas, we should focus on testing, as almost any Java developer
    job description requires the candidate to have strong skills in writing unit tests
    and integration tests (the most commonly preferred tools are JUnit, TestNG, Mockito,
    and Cucumber-JVM). Nevertheless, trying to find a dedicated Java tester job or
    Java code reviewer is quite challenging and is usually encountered in big companies
    (especially in companies that provide remote jobs, such as Upstack or Crossover).
    Most companies prefer *pair code review* and each Java developer should write
    meaningful tests that provide high coverage for the code that they wrote. So you
    have to be able do both: write astonishing code, and write the tests for that
    code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Are you interested in applications that interact with databases or do you
    try to avoid such applications?** Most Java applications use a database (a relational
    database or a NoSQL database). A wide range of Java developer jobs will imperatively
    require you to have strong knowledge of coding against a database via Object Relational
    Mapping frameworks (such as Hibernate), JPA implementations (such as Hibernate
    JPA or Eclipse Link), or SQL-centric libraries (such as jOOQ). Most Java applications
    interact with a relational database such as MySQL, PostgreSQL, Oracle, or SQL
    Server. But NoSQL databases such as MongoDB, Redis, or Cassandra are also encountered
    in a significant number of applications. Trying to avoid developing applications
    that interact with a database may seriously limit the range of jobs on offer.
    If this is your case, then you should reconsider this aspect starting today.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do you have a predilection for code optimization and performance?**Caring
    about the performance of your code is a highly appreciated skill. Such actions
    will catalog you as a perfectionist with great attention to detail. Having solutions
    that optimize the code and increase its performances will place you pretty quickly
    in the position of getting involved in designing and architecting the solutions
    of functional requirements. But at the interview (the code challenge stage), don’t
    focus on code optimizations and performance! Simply focus on delivering a working
    solution and, as much as possible, clean code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What is more appealing to you: a coding-focused job or being a software architect?**
    At the beginning of your career as a Java developer, you will be focused on coding
    and taking implementation design decisions at code level. In time, some developers
    discover their abilities and interest in architecting large applications. This
    means that it’s time to evolve from a Java developer to a Java architect, or even
    a Java chief architect. While coding is still part of your job, as an architect
    you will wear different hats on the same day. You have to split your time between
    meetings, architecting, and coding. If you feel that you have the aptitude for
    designing and architecting different pieces of a project, then it is advisable
    to consider some training in software architecture as well. Moreover, during your
    coding-focused job, challenge yourself to see what solutions you can find and
    compare them with those implemented by the current architect of the application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Are you aiming for a small or a big company?** Choosing between a small or
    a big company is a matter of trade-offs. Ideally, a big company (a brand) will
    give stability, a career path, and a good salary plan. But you may feel stifled
    by the bureaucracy, lack of communication and rivalry between departments, and
    a cold and rigid environment. In a small company, you have the chance to feel
    more intensely that you are part of the success and will get a nice, warm feeling
    of being part of a small community (even a family). However, small companies may
    fail fast and you might be fired in a year or two, most likely without any compensation
    package.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do you target a software company (working on a wide range of projects) or
    a certain industry (for example, the oil industry, medicine, the automobile industry,
    and so on)?** A software company manages projects from a variety of fields (for
    example, a software company might develop a website for a Hollywood star, a financial
    application, and an airline traffic control application at the same time). From
    a developer’s perspective, this means that you need versatile thinking and to
    be capable of quickly adapting to understand the requirements of different business
    domains without diving into those domains. On the other hand, big industries (for
    example, the oil industry) prefer to create their own IT departments that develop
    and maintain applications specific to that company field. In such cases, you would
    most likely receive some training in the given company’s field as well. You will
    have the advantage of becoming an expert at developing applications specific to
    a certain domain.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do you prefer a remote job?** In the past few years, a significant number
    of companies have decided to hire remote developers. Moreover, new companies such
    as Upwork, Remote|OK, X-Team, and Crossover are 100% remote companies recruiting
    only for remote positions. The advantage of working from any corner of the world
    with a flexible program is quite appealing. These companies offer jobs for junior,
    middle, and senior developers, and some of them (for example, Crossover) offer
    remote management positions as well. But, you have to be aware of some of the
    other aspects of this arrangement as well: it is possible that you will be monitored
    via webcam (for example, with snapshots every 10 minutes); you need to work in
    a completely remote team with members from different time zones (it may be challenging
    to participate in meetings at night, for example); you will have to be familiar
    with tools including JIRA, GitHub, Zoom, Slack, Meetup, and in-house marketplace
    platforms; you may face a lot of friction (tons of emails) and a lack of communication;
    you need to pay your taxes, and last but not least, you may need to achieve unreal
    metrics to the detriment of quality to maintain your position.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Does management interest you?** Commonly, reaching a managerial position
    is a goal that requires leadership skills. In other words, you should be able
    to take important decisions at both the technical and human levels. From this
    perspective, you need to avoid companies that offer a solid technical career path
    but don’t provide opportunities to get promoted to the ranks of management.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Knowing yourself is one of the hardest parts required in order to make the best
    decisions in life. Sometimes, asking the opinion of other people is the best way
    to eliminate your subjective view of yourself. Most of the time, asking your teachers,
    parents, and friends will help you to better understand what your skills are and
    where you fit the best. Making important decisions alone is risky.
  prefs: []
  type: TYPE_NORMAL
- en: Once you know yourself, it is time to get to know the market.
  prefs: []
  type: TYPE_NORMAL
- en: Know the market
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing what you want is great, but is not enough. As the next step, you should
    research what the market wants from you. The goal is to obtain the perfect cocktail
    of what you want and what the market offers.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Developing marketable skills is an important aspect of getting a job in the
    near future.
  prefs: []
  type: TYPE_NORMAL
- en: First, you must check which Java technologies have been most popular over the
    last few years and what the future trends look likely to be. Technologies that
    maintain relatively stable popularity over time are the most used in companies.
  prefs: []
  type: TYPE_NORMAL
- en: Take your time to read several surveys from the last 2-3 years from important
    websites such as blogs.oracle.com, snyk.io, jaxenter.com, codeburst.io, jetbrains.com,
    and dzone.com. Primarily, you can search on Google for *java technologies survey
    2019* or similar combinations of keywords. Also, don’t neglect the financial part,
    so make sure to search for *java salaries survey 2019* as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find a variety of surveys that nicely summarize the most popular technologies,
    as you can see in the following two figures. The first one shows the popularity
    of application servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The application servers that are used'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15403_01_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – The application servers that are used
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows which frameworks developers prefer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The frameworks that developers prefer to use'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15403_01_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – The frameworks that developers prefer to use
  prefs: []
  type: TYPE_NORMAL
- en: 'While reading, make a list and note down what Java technologies are the most
    popular and what technologies don’t deserve your attention at this moment. It
    will be a list similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Splitting technologies by popularity'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15403_01_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Splitting technologies by popularity
  prefs: []
  type: TYPE_NORMAL
- en: This way, you can quickly filter the technologies that are most required by
    the market. Learning popular technologies maximizes your chances of getting a
    job in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, take the pulse of the market toward the technologies that you added
    to the *Popular* column via the following means:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Social networks**: A significant number of social networks contain posts
    about technologies and what’s trending in the IT industry. Some major players
    are LinkedIn, Stack Overflow, Twitter, Reddit, and Facebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bookstores**: Book publishers strive to satisfy the interest of the programming
    community by covering the most popular technologies. They carry out serious research
    campaigns for filtering the topics that deserve to be covered in their books.
    A new book or a significant number of books on a certain topic or technology is
    a good indicator of programming community interest in that topic. Nevertheless,
    pay attention to technologies that are suddenly going mainstream. Most of the
    time, such technologies are not adopted by companies immediately. It may take
    years until they are adopted, or they may remain in the shadows forever.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Courses and training**: Besides colleges and universities, tons of websites
    strive to provide courses and training for popular and hot topics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s all about getting the right experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You know what you want and what the market offers. This is cool! Now it’s time
    to get the right experience! Without experience, there is no resume, and without
    a resume, there is no interview, therefore, this is a major and laborious step.
    The following subsections will help you to achieve two main goals:'
  prefs: []
  type: TYPE_NORMAL
- en: Accumulate a lot of technical knowledge and skills.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain trust and visibility across the Java ecosystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay attention – these two goals won’t materialize overnight! It takes time and
    requires perseverance, but there is a clear and guaranteed result – you’ll become
    a top Java developer. So, let’s start something!
  prefs: []
  type: TYPE_NORMAL
- en: Start something
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a student or a recent graduate, it is pretty hard to decide where to start
    from in order to gain experience and write a resume. You are aware that you should
    *start something,* but you cannot decide what that *something* should be. Well,
    that *something* should be **code**. Before you have any formal work, get involved
    in school projects, internships, programming, volunteering work, and any kind
    of practical experience.
  prefs: []
  type: TYPE_NORMAL
- en: It’s time to shine online
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is mandatory to get online and show the world what you can do as early as
    possible (for example, from school). Companies and programming communities are
    looking forward to seeing how you grow online. But just before you jump in, ensure
    that you follow the next two golden rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**It is very important to pay attention to the identity used to expose your
    work online.** Don’t use dummy credentials, avatars, nicknames, emails, passwords,
    and so on. Most likely, the accounts that you will create now (on GitHub, Stack
    Overflow, LinkedIn, YouTube, Twitter, and so on) will be shared all over the internet
    and will make you famous. Always use your complete name (for example, Mark Janel,
    Joana Nimar), use a relevant photo of yourself for your profile (as in the following
    figure), and use your name in accounts (for example, @markjanel, joananimar) and
    in emails addresses (for example, mark.janel@gmail.com). It is more difficult
    for dummy names, emails, and nicknames to become associated with you and with
    your work:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Using a relevant photo](img/B15403_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Using a relevant photo
  prefs: []
  type: TYPE_NORMAL
- en: '**Always accept criticism and be polite.** Exposing your work online is going
    to attract critics. An extremely small percent of what you receive will be really
    malicious comments with no logical arguments. The best practice, in this case,
    is to ignore such comments. But most critics will be positive and constructive.
    Always answer to such comments with arguments and always be polite. **Common sense
    is the most important skill!** Be open and stay open to other opinions!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not get disappointed or frustrated. And never give up!
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to open source projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contributing to open source projects is a supersonic approach for measuring
    your skills and quickly gaining experience and visibility to companies looking
    for candidates. Don’t underestimate yourself! Small contributions count as well.
    Even reading and understanding the code of an open source project is a great opportunity
    to gain coding experience and learn coding techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'A lot of open source projects encourage and support developers to contribute.
    For example, check out the Hibernate ORM open source project in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Contributing to an open source project](img/B15403_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Contributing to an open source project
  prefs: []
  type: TYPE_NORMAL
- en: You have the chance to add your footprint to the code that you will use later
    in your daily work! And it is also used by millions of developers. How cool is
    that!?
  prefs: []
  type: TYPE_NORMAL
- en: Start your own GitHub account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Besides contributing to open source projects, it is advisable to start your
    own GitHub account. Employers will evaluate the content of your GitHub profile
    before they meet you. Don’t neglect any aspect! Take your time and clean up your
    GitHub profile so it reflects your best code. Keep in mind that the worst kind
    of GitHub account is an empty account or an account that shows low activity on
    a long-term basis, as shown on the left in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – GitHub contributions over four months'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15403_01_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – GitHub contributions over four months
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrate a preference for clean code and meaningful `README.md` files and
    avoid periods of low activity on a long-term basis, as shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Start your own Stack Overflow account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stack Overflow is the next stop for companies that evaluate your work. Your
    questions and answers on Stack Overflow will appear in Google searches, therefore,
    you have to pay extra attention to what you post (questions and answers). As a
    rule of thumb, your questions may reveal your level of knowledge, therefore, *don’t*
    post simple questions, questions that have easy answers in the documentation,
    questions that sit behind trivial programming challenges, and so on. On the other
    hand, make sure to provide valuable answers and don’t repeat other people’s answers.
    Provide content that will bring you badges, not downvotes. Link your GitHub profile
    to your answers to provide complete solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Start your own YouTube channel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Besides entertainment, YouTube is also a huge source of technical knowledge.
    On YouTube, you can post complete coding solutions that show people how to program
    and how to become better programmers. You can quickly increase your YouTube subscribers
    if you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t go for long videos (stick to 10-20-minute lessons)!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you have a good webcam and microphone. A good webcam has at least
    1080p resolution, and a good microphone is the Snowball ICE; for recording use
    free or low-cost tools such as Free2X Webcam Recorder (free2x.com/webcam-recorder)
    and Loom (loom.com); Camtasia Studio is also awesome (techsmith.com/video-editor.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrate excellent English skills (English is used most commonly on YouTube).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce yourself (but do it quickly).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be enthusiastic (show people that you enjoy your work, but don’t exaggerate).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be practical (people love live coding).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take the chance to prove your speaking skills (this opens you the door to technical
    conferences).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promote your work (add links and hints for more videos, source code, and so
    on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respond to people’s feedback/questions (don’t ignore what people say about your
    video).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accept criticism and be polite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link your GitHub and Stack Overflow accounts to your YouTube videos to get more
    exposure and followers.
  prefs: []
  type: TYPE_NORMAL
- en: Start your technical blog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your awesome work on GitHub, Stack Overflow, and YouTube can easily be promoted
    in stories on a technical blog. Write about programming topics, especially about
    programming problems that you solved, and write tutorials, tips and tricks, and
    so on. Constant posting and high-quality content will increase your traffic and
    will index your blog on search engines. Someday, this valuable content can be
    exploited to write an astonishing book or develop a great video on Udemy (udemy.com)
    or PluralSight (learn.pluralsight.com).
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of blogging platforms such as Blogger (blogger.com), WordPress
    (wordpress.org), and Medium (medium.com). Choose the one that you prefer and get
    started.
  prefs: []
  type: TYPE_NORMAL
- en: Write articles and attract huge traffic and/or get paid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to post technical articles and earn money or attract a huge amount
    of traffic to your work, then a personal blog will not be very useful, at least
    not for a significant amount of time (1-2 years). But you can write technical
    articles for websites that register huge amounts of daily traffic themselves.
    For example, DZone (dzone.com) is a great technical platform where you can write
    for free or you can join different programs where you are paid for your work.
    By simply creating a free DZone account, you can immediately start publishing
    technical articles via their online editor. In 1-5 days, they will review your
    work and publish it online. Almost instantly, thousands of people will read your
    articles. Besides DZone, other great technical platforms will pay you to write
    for them (commonly between $10-$150 per article depending on length, topic, internal
    policies, and so on). Some of these platforms include InformIT (informit.com),
    InfoQ (infoq.com), Mkyong (mkyong.com), developer.com (developer.com), Java Code
    Geeks (javacodegeeks.com), GeeksForGeeks (geeksforgeeks.org), and SitePoint (sitepoint.com).
  prefs: []
  type: TYPE_NORMAL
- en: Promote yourself and your work (portfolio)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s important to work, but it is also important to show people what you’ve
    done and get their feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '*Managing your online profile is very important.* Recruiters use online profiles
    to find desirable candidates, to get to know you better, and to prepare in-depth
    or custom interview questions.'
  prefs: []
  type: TYPE_NORMAL
- en: Along with GitHub, Stack Overflow, and so on, recruiters will search your name
    on Google and will check your personal website and social network profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Personal websites
  prefs: []
  type: TYPE_NORMAL
- en: A personal website (or portfolio) is a website that shows off your work. Simply
    add the screenshots of applications that you’ve made/contributed to and give brief
    descriptions of your work. Explain your role in each project and provide a link
    to the project. Pay attention to not expose private and proprietary company information.
    You can quickly get inspiration from the internet (for example, codeburst.io/10-awesome-web-developer-portfolios-d266b32e6154)
  prefs: []
  type: TYPE_NORMAL
- en: For building your personal website, you can rely on free or low-cost website
    builders such as Google Sites (sites.google.com) and Wix (wix.com).
  prefs: []
  type: TYPE_NORMAL
- en: Social network profiles
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the most important social networks is Twitter. On Twitter, you can promote
    your work in front of the best Java developers in the world. Right from day 1,
    search and follow the best Java developers, and soon they will follow you too!
    As a tip, start to follow as many Java Champions (an exclusive community of the
    best Java developers in the world) you can find. There is a huge and valuable
    community of Java developers on Twitter. Get to know them as fast as you can!
  prefs: []
  type: TYPE_NORMAL
- en: Other social networks such as Facebook and Instagram are also scanned by recruiters.
    Pay attention to the content of your posts. Obviously, radicalism, racism, fanaticism,
    trivial or sexual content, political content, slogans and incitement to violence,
    defamatory and offensive content, and so on will cause the recruiter to take a
    step back.
  prefs: []
  type: TYPE_NORMAL
- en: CodersRank matters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'CodersRank (codersrank.io/) is a platform that harvests information about your
    work (for example, it harvests information from GitHub, Stack Overflow, Bitbucket,
    HakerRank, and so on) and tries to rank you against millions of other developers
    from around the world. In the following screenshot, you can see a developer’s
    profile page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – CodersRank profile summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15403_01_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – CodersRank profile summary
  prefs: []
  type: TYPE_NORMAL
- en: This is another important barometer for recruiters.
  prefs: []
  type: TYPE_NORMAL
- en: Learn, code, learn, code...
  prefs: []
  type: TYPE_NORMAL
- en: Once you become a developer, you must follow the *Learn->Code* practice in order
    to get on top and stay there. Never stop learning and never stop coding! As a
    rule of thumb, the *Learn->Code* practice can be applied via the *learning by
    example* or *teaching is my way of learning* approaches, or any other approach
    that fits you best.
  prefs: []
  type: TYPE_NORMAL
- en: How about certifications?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you access education.oracle.com/certification, you can see that Oracle
    provides a suite of Java certifications. While there’s nothing wrong with getting
    certifications (from Oracle or an other party), they are not required in job descriptions.
    Taking these certifications requires a significant amount of money and time, and
    most of the time they don’t pay off the effort. You can use this time more wisely
    and get involved in projects (side projects, school projects, open source projects,
    and so on). This is a better way to impress employers. So, certificates have limited
    value and it takes a lot of resources to obtain them. Moreover, certificates are
    perishable. Think how useful it is today, in 2020, to be Java 6 certified, or
    in 2030 to be Java 12 certified!
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you really want to consider certifications, then here are the top certifications
    on offer (for more information, search on Google for them since links can break
    over time):'
  prefs: []
  type: TYPE_NORMAL
- en: OCAJP (Oracle Certified associate, Java Programmer 1) and OCPJP (Oracle Certified
    Professional, Java Programmer 2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Professional Certification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OCEWCD (Oracle Certified Expert, Java EE 6 Web Component Developer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Spark Cert HDPCD (HDP Certified Developer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Professional Scrum Master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project Management (PMP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Solutions Architect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle Certified Master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having experience and visibility (fans) all over the internet is a tremendous
    plus in your career. But you still need a useful resume for applying to Java jobs.
    So, it’s time to write your resume.
  prefs: []
  type: TYPE_NORMAL
- en: Time to write your resume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing an impressive resume is not easy. There are tons of platforms that promise
    you that your resume will be amazing if you let them do it for you. There are
    also tons of resume templates, most of them quite complex and cumbersome. On the
    other hand, a resume is something personal, and it is better to do it yourself.
    Bearing the following points in mind will be enough to produce an appealing resume
    for recruiters. Let’s see these points and how to approach them.
  prefs: []
  type: TYPE_NORMAL
- en: What resume screeners are looking for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, resume screeners want to find out whether you are a good coder and you
    are smart. Second, they want to find out if you are a good fit for a certain available
    position (they check your experience against certain technologies and tools required
    for that position).
  prefs: []
  type: TYPE_NORMAL
- en: 'Strive to highlight that you are a good coder and are intelligent. This means
    being as technical as possible in a concentrated form. Pay attention: too many
    words dilute the essence of your resume and lead to loss of focus. **Be technical,
    clear, and concise**.'
  prefs: []
  type: TYPE_NORMAL
- en: How long the resume should be
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To answer how long a resume should be, you must answer another question: how
    long do you think a recruiter spends reading a resume? Most likely, around 10-20
    seconds. In other words, recruiters read between the lines, trying to quickly
    identify what interests them.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, a resume should not be longer than a page. If you have 10+ year's
    experience, then you can go with 2 pages.
  prefs: []
  type: TYPE_NORMAL
- en: You may think that it is impossible to condense your vast experience in 1-2
    pages, but this is not true. First, prioritize content, and second, add this content
    until you cover 1-2 pages. Skip the remaining content. Don’t worry that the recruiters
    will not know everything you’ve done! They will be impressed by your resume highlights
    and will be happy to discover the rest of your experience in the interview.
  prefs: []
  type: TYPE_NORMAL
- en: '**Write a resume that fits on one page.**'
  prefs: []
  type: TYPE_NORMAL
- en: If you have 10+ years of experience, then consider two pages. Keep in mind that
    some recruiters may skip long resumes without reading a single line. They want
    to find the most impressive items right away. Adding less important items and/or
    too many words will distract the recruiter and makes them waste time.
  prefs: []
  type: TYPE_NORMAL
- en: How to list your employment history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a short employment history (2-4 roles), then add all of it to the
    resume. Don’t go for your complete employment history if you have a long list
    of roles (4+ roles). Just choose 4 roles that are the most impressive (roles in
    important companies, leading roles, roles where you have achieved great results
    and/or made significant contributions).
  prefs: []
  type: TYPE_NORMAL
- en: For each role, follow the *Achievement->Action->Effect* model. Always start
    with the achievement! This will act as a magnet for the recruiter. Once they read
    the achievement, you’ve got their attention to continuing reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s imagine that you worked at the company *Foo* and you’ve
    managed to increase the performance of the connection pool by 30% by tuning its
    parameters. Now the application can accommodate a transaction throughput of 15%
    extra. Add this achievement in the resume in a single statement as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Increased the connection pool performance by 30% by tuning its parameters,
    leading to a transaction throughput boost of 15%.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**List the most relevant roles via Achievement->Action->Effect statements.**
    Always try to measure the benefits you created. Don’t say, *I reduced the memory
    footprint by compressing ...*, and say, *I reduced the memory footprint by 5%
    by compressing ...*.'
  prefs: []
  type: TYPE_NORMAL
- en: List the most relevant projects (top five)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some recruiters prefer to jump in directly into the *My Projects* section of
    your resume. They follow the *No Fluff, Just Stuff* statement. You don’t have
    to list all your projects! Make a top five and add only those. Don’t add all five
    from the same category. Choose one or two independent projects, one or two open
    source contributions, and so on. An independent project with a high GitHub star
    rating is what will really impress recruiters.
  prefs: []
  type: TYPE_NORMAL
- en: '**List the top projects with their relevant details.** This is the right place
    to lose the modesty and do your best to impress.'
  prefs: []
  type: TYPE_NORMAL
- en: Nominate your technical skills
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The *Technical Skills* section is mandatory. Here, you have to list the programming
    languages, software, and tools you know. It doesn’t have to be like a nomenclature,
    but it doesn’t have to be a short and slim section either. It has to be relevant
    and in harmony with the listed projects. The following list mentions the main
    criteria to follow in writing the *Technical Skills* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Don’t list all Java flavors**: Don’t add a list such as Spring MVC, Spring
    Data, Spring Data REST, Spring Security, and so on. Just say Spring. Or, if you
    are Java EE guy, then don’t add a list of JPA, EJB, JSF, JAX-RX, JSON-B, JSON-P,
    JASPIC, and so on. Just say Java EE, Jakarta EE. Or, if you see them listed that
    way in the job description, then you can add them between brackets. For example:
    *Spring (MVC, Data including Data REST, Security)* or *Java EE (JPA, EJB, JSF,
    JAX-RX, JSON-B, JSON-B, JASPIC)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not add software versions**: Avoid things like Java 8, Spring Boot 2,
    or Hibernate 5\. If such details are necessary, then the interviewer will ask
    you about them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don’t list utility technologies**: Avoid listing utility libraries that are
    commonly used in projects. For example, don’t add Apache Commons, Google Guava,
    Eclipse Collections, and so on. It is possible that recruiters have not heard
    of them. Or, if they have, they will smile ironically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don’t list the technologies that you have only lightly touched**: It’s quite
    risky to list technologies that you’ve used only rarely and/or superficially.
    At the interview, you may get asked questions about them that will put you in
    a difficult situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For each technology, add your experience**: For example, write *Java (expert),
    Spring Boot (advanced), Jakarta EE (proficient), Hibernate (expert)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not measure your experience with a technology in years**: Most of the
    time, it’s not relevant. This metric doesn’t say much to the recruiter. Your experience
    is shown by your projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoid common technologies**: Don’t list operating systems, Microsoft Office,
    Gmail, Slack, and so on. Listing such things is just noise for the recruiter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Double-check your English**: A recruiter can throw away a resume if it has
    typos. If you are a non-native English speaker, then find a native English speaker
    to proofread your resume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don’t list a single programming language**: Ideally, you should list two
    to three programming languages (for example, *Java (expert), C++ (medium), Python
    (prior experience)*), but don’t say that you are an expert in all of them. Nobody
    will believe you! On the other hand, a single programming language can be interpreted
    as meaning that you are not open to learning new technologies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Split technologies into categories**: Don’t add the technologies as a long,
    comma-separated list. For example, avoid something like *Java, Ruby, C++, Java
    EE, Spring Boot, Hibernate, JMeter, JUnit, MySQL, PostgreSQL, AWS, Ocean, and
    Vue.js.* Split them into categories and sort them by experience, as in the following
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a. **Programming languages**: Java (expert), Ruby (intermediate), and C++ (beginner)'
  prefs: []
  type: TYPE_NORMAL
- en: 'b. **Frameworks**: Java EE (expert), Spring Boot (advanced)'
  prefs: []
  type: TYPE_NORMAL
- en: 'c. **Object Relation Mapping** (**ORM**): Hibernate (expert)'
  prefs: []
  type: TYPE_NORMAL
- en: 'd. **Testing**: JMeter (expert), JUnit (advanced)'
  prefs: []
  type: TYPE_NORMAL
- en: 'e. **Databases**: MySQL (expert), PostgreSQL (intermediate)'
  prefs: []
  type: TYPE_NORMAL
- en: 'f. **Cloud**: AWS (expert), Ocean (beginner)'
  prefs: []
  type: TYPE_NORMAL
- en: 'g. **JavaScript frameworks**: Vue.js (intermediate)'
  prefs: []
  type: TYPE_NORMAL
- en: LinkedIn resume
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most likely, your LinkedIn profile will be the first stop for recruiters. Moreover,
    a significant number of e-job platforms require your LinkedIn account whenever
    you try to apply for a job. There are even cases where this account is mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: LinkedIn is a social network dedicated to tracking professional connections.
    Essentially, LinkedIn is an online resume on steroids. On LinkedIn, you can create
    job alerts, and colleagues, customers, and friends can endorse you or your work,
    which can be quite valuable.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Pay attention to keeping your LinkedIn resume in sync with your paper resume.
    Also, pay attention if you are looking for a job via LinkedIn since all your contacts
    receive notifications about your updates. These contacts include people at your
    current company, and most likely, you don’t want them to know you’re looking for
    a new job. The solution is to disable these notifications before you make your
    updates.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can discuss the job application process.
  prefs: []
  type: TYPE_NORMAL
- en: The job application process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technical companies prefer multi-step interviews. But, before getting invited
    to an interview, you have to find companies that are hiring, apply for their jobs,
    and then finally meet them.
  prefs: []
  type: TYPE_NORMAL
- en: Finding companies that are hiring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Surveys from the past few years (2017+) estimate that 70%-85% of all jobs are
    filled via networking (linkedin.com/pulse/new-survey-reveals-85-all-jobs-filled-via-networking-lou-adler/).
    Technical jobs (especially in the IT field) represent the leading segment that
    takes advantage of networking.
  prefs: []
  type: TYPE_NORMAL
- en: In almost any country, there are several e-jobs platforms. Let’s call them *local*
    e-jobs platforms. Commonly, the *local* e-jobs platforms list job offers from
    companies active in that country, or companies that recruit globally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Worldwide, we have *global* e-jobs platforms. These platforms include several
    major players (all these websites allow you to upload your resume or create one
    online):'
  prefs: []
  type: TYPE_NORMAL
- en: '**LinkedIn** (linkedin.com): With more than 610 million users covering more
    than 200 countries worldwide, this is the world’s largest professional network
    and social recruiting platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indeed** (indeed.com): This is a leading job site with millions of jobs harvested
    from thousands of websites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CareerBuilder** (careerbuilder.com): This is another huge platform that posts
    tons of jobs from all around the globe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stack Overflow** (stackoverflow.com/jobs): This is the largest, most trusted
    online community for developers to learn, share their programming knowledge, and
    build their careers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FlexJobs** (flexjobs.com) and **Upwork** (upwork.com): These are platforms
    dedicated to freelancers that offer premium, flexible remote jobs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other platforms that provide services useful for finding a job include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dice** (dice.com): This is the leading career destination for tech experts
    at every stage of their careers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glassdoor** (glassdoor.com): This is a complex platform including company-specific
    ratings and reviews.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these platforms, there are many others that you will discover
    by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting the resume
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve found the companies you want to apply to, it’s time to submit your
    resume.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, look at the company’s website. This can help you to find out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: See if you can apply directly via the company website (by bypassing the placement
    agency, you can speed up the process and the company can hire you directly without
    paying commission to the placement agency).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can register in the company database to be contacted whenever a suitable
    position is opened.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have the chance to find out more about the company history, vision, projects,
    culture, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out contacts of relevant people at the company (for example, you
    can find a phone number for details and support).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, double-check your resume and online profile. Most likely, if your resume
    impresses the recruiter, they will search your name on Google and will inspect
    your networking activity. From technical content to social media, everything will
    be scanned before sending you an interview offer.
  prefs: []
  type: TYPE_NORMAL
- en: Third, don’t send the exact same resume to all companies! For each company,
    make adjustments to the resume so it is as relevant to the job description as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: I got an interview! Now what?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you followed the roadmap so far, then it is just a matter of days until you
    will receive an e-mail or a phone call to invite you to an interview. Oh, wait...
    you are saying that you’ve already got an interview? Cool! It’s time to prepare
    yourself!
  prefs: []
  type: TYPE_NORMAL
- en: The phone screening stage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most IT companies prefer to start the multi-step interview process with a *phone
    screen*. A phone screen is usually accomplished via Skype, Zoom, or Meetup (or
    similar platforms), and you’ll need to share your webcam. A microphone and a set
    of headphones are needed as well. Phone screens are very popular if you opt for
    a remote position, but lately, they are used for all kinds of positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commonly, there are two approaches used by companies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Phone screen with a human resources or placement agency person**: This is
    an optional, non-technical interview of 15-30 minutes meant to detail the offer
    terms, expose your personality, concerns, both your and their expectations, and
    so on. This can take place before or after the technical phone screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical phone screen first**: Some companies will invite you directly to
    a technical phone screen. In such cases, you can expect several technical questions,
    maybe a quiz, and one or more coding challenge sessions (tackling coding challenges
    is the main focus of this book). If you pass the technical phone screen, then,
    most probably, a non-technical one will follow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going to in-person interviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unless you opt for a remote position, the next step will consist of a face-to-face
    interview. There are cases when there is no phone screen, and this is the first
    step of the interview. In such cases, you may be interviewed by HR people, followed
    by a technical interview. But, if you had a phone screen, then you may or may
    not be contacted. This depends on how the company evaluates the phone screen.
    If they decide to not proceed with the next stage of the interview, then it is
    possible you will receive some feedback covering what was good and what was less
    good about your phone screen performance. Don’t ignore the feedback, read it carefully
    and in an objective manner. It might help you to avoid repeating the same mistakes.
    Speaking about mistakes...
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding common mistakes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pay attention to the following common mistakes that may sit behind the failure
    of an interview:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ignoring the power of information**: There are cases where after failing
    an interview, we meet a friend to tell them how it went. At that moment, your
    friend may say: *My friend, I know a person who had a successful interview at
    this company 2 months ago! Why you did not tell me before? I’m sure he could have
    given you some insights!* Obviously, it’s too late to do that now! Avoid such
    cases and try to obtain as much information as possible. **See if you or your
    friends have contacts in the company, ask on social media, and so on.** This way
    it’s possible to obtain extremely useful information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lacking clarity and coherence in answers**: Your answers should be technical,
    crystal clear, meaningful, expressive, and always on topic. **Answer the questions
    thoughtfully**. Stammering, incomplete answers, interjections, and so on are not
    appreciated by interviewers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Considering that image doesn’t matter**: Don’t ignore your image! Dress professionally,
    go to the barbershop, and smell nice! All these aspects are part of the first
    impression. **If you look sloppy, then maybe your code looks the same. If you
    dress professionally, then the interviewers will treat you as if you’re a cut
    above the rest.** However, dressing professionally doesn’t mean you should be
    opulent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not selling yourself well**: The interviewer must see your value. Nobody
    can communicate your value to them better than you can. Tell them about a problem
    that you had (at a previous company, in a certain project, and so on) and explain
    how you solved it with your team or independently. Employers want people who are
    excellent team players but are capable of working independently as well. Follow
    the *Situation|Action|Result (SAR)* approach. Start by describing the situation.
    Continue by explaining the actions you took, and finally, describe the result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not practicing coding challenges**: At some point, you will be scheduled
    for at least one coding challenge. Most of the time, general coding skills are
    not enough! These challenges are specific to interviews and you have to practice
    them before the interview. As a rule of thumb, solving coding challenges (problems)
    follows the *Approach->Break down->Craft* solution pattern. Obviously, you cannot
    memorize solutions, therefore you need to practice as much as possible. Later
    in this book, we will discuss the best approaches for solving coding challenges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the interview is complete, it’s time to wait for the response. Most companies
    will tell you how much time they need to provide a final answer and will commonly
    provide an answer representing the offer, rejection, next interview step, or just
    the status of your application. Keep your fingers crossed!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter summarized the best practices that should be followed to obtain
    a job in the Java ecosystem. We talked about choosing a proper job and our eligibility,
    getting experience, working on resumes, and so on. Most of this advice was addressed
    to students or people who have just graduated. Of course, do not consider these
    pieces of advice as an exhaustive list or a list that should be applied integrally.
    These practices will help you pick up the fruits that you consider appealing and
    allow you to add your own touch to the process.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s see how big companies conduct their interviews.
  prefs: []
  type: TYPE_NORMAL
