- en: Chapter 4. The Players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll outline the characters, users, and stakeholders (players)
    in our system/project. In [Chapter 2](ch02.html "Chapter 2. The Framework"), *The
    Framework*, we discussed the player types outlined in Bartle's Games Test (killers,
    achievers, socializers, and explorers). We need to take a closer look at our users/players
    and their motivations so as to maximize that understanding when designing our
    gamified e-learning system. We will wrap up the chapter with some initial database
    design in MySQL so that we have all of the technologies in place to build our
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Bartle Test of Gamer Psychology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although it probably needs to be updated, the Bartle Test of Gamer Psychology
    has become the standard when discussing player types in gamified systems. Bartle
    came up with the system/test in the context of video game design in the mid-1990s
    and has been ported over to the gamification arena. The model may require some
    adjustments, but it is a good start in the right direction.
  prefs: []
  type: TYPE_NORMAL
- en: The Bartle Test is a series of 30 questions designed to assess a personality
    type and preferences relative to interactions in a gaming scenario. Players generally
    have tendencies in one category more than the other three categories. Let's review
    them quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Killers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Killers are motivated by the direct play and impact on other players in the
    system. They aspire to win the game. We will support these players in our system
    with the game elements discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Leaderboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The leaderboard is a prominent display graphic of leaders with top points in
    the game. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leaderboards](graphics/8119_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rewards for defending and critiquing posts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since killers are motivated by direct competition, we can play into this motivation
    by giving bonus points for posts that a player makes by defending other players'
    post as well as by attacking (critiquing) players' posts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewards for defending and critiquing posts](graphics/8119_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Achievers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like killers, achievers want to have a direct impact on the system. However,
    that impact does not need to be at the expense of another player. The player is
    driven to win and accomplish goals but does not need to *win* per se since reaching
    the goal is enough.
  prefs: []
  type: TYPE_NORMAL
- en: We can accomplish this through the following game elements.
  prefs: []
  type: TYPE_NORMAL
- en: Badges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Achievers are highly motivated by the recognition that their accomplishments
    bring. We can satisfy this motivation somewhat with the leaderboard. The leaderboard,
    however, pits players against each other, which achievers wouldn't find as rewarding
    as killers would. Therefore, they need trophies. They need recognition of their
    achievements for the achievement's sake. Badges make this possible.
  prefs: []
  type: TYPE_NORMAL
- en: Badges are graphical images that players receive to denote that they have reached
    a milestone. We grow very accustomed to acknowledging accomplishments with badges,
    from the youth scouting programs to recognition of authority figures. Therefore,
    the concept is socially acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a badge scheme into a system has been one of the major critiques
    of the gamification movement, so we need to be careful that we use mechanics wisely.
    Bad badging usually backfires.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to be sure that our badging system meets the following four criteria.
    Badges should:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Surprise players with aspirational, predictable achievement**: Badges tend
    to work best when they are used to recognize a clear achievement. The reward itself
    has an element of surprise, however. They can''t be so random that the player
    can''t associate them with the progress or status they are meant to recognize.
    On the other hand, they can''t be so linear that the player gets bored with them.
    Players in our e-learning system will receive various badges to denote their level
    of engagement with the system. After players reach a threshold (say 25 posts),
    they will receive participation badges. Players will be able earn more badges
    as they continue to reach other thresholds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be aesthetically appealing**: Badges need to look good and be visually appealing
    to the player. The player needs to be proud of the look and feel of the badge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be scarce**: One of the more powerful aspects of a badging system is the
    scarcity factor. Things tend to have a larger perceived value if they are "less
    available." Therefore, badges should be given rarely. For this reason, we will
    limit the number of badges given for any accomplishment to a predetermined percentage
    of users. Furthermore, we will raise the threshold level for future badges as
    a predetermined percentage of users reach a badge. This increases the difficulty
    level of obtaining those badges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be meaningful**: We need to tie the badging system to something that players
    will find meaningful. We can''t simply dole out badges for the sake of doing so.
    Although collecting badges is a motivator for some, the need to collect should
    not overshadow the need to achieve.![Badges](graphics/8119_04_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few example badges
  prefs: []
  type: TYPE_NORMAL
- en: Leveling/progress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already discussed leveling somewhat in a previous discussion regarding
    badges. Leveling is a game mechanic whereby we reward and recognize the player
    for reaching a certain level of mastery in the system. In many cases, reaching
    a higher level also opens up more benefits and features of the game to the player.
  prefs: []
  type: TYPE_NORMAL
- en: We have talked about giving our players the ability to critique or defend posts
    (see the screenshot in the *Rewards for defending and critiquing posts* section).
    However, we can make this feature available only after a player reaches a certain
    level of engagement in the system. We can measure this engagement level by the
    number of points accumulated.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Challenges tend to appeal particularly to the achiever motivation type. Challenges
    are preset objectives that players can aspire to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: In our system we allow players to set goals for themselves, but we can also
    offer challenges to players. For example, we can challenge players to respond
    to a certain number of posts in a 7-day period. This is a goal that many achievers
    will shoot for and can reasonably obtain.
  prefs: []
  type: TYPE_NORMAL
- en: Socializers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are players whose motivations are very different from the motivations
    of killers and achievers. Socializers are moved by having interactions with other
    players. Like killers, they desire engagement with other players, but their engagement
    is not combative. It's more collaborative.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will support socializers through the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sharing**: We are very familiar with the concept of sharing. It''s the heart
    of social media. We will award players with points for sharing posts outside the
    system with their friends on Facebook and Twitter. But sharing is not limited
    to a player''s established social network. A key aspect of sharing is friending
    or following others that might be interested in sharing. In our e-learning system,
    players will have the option to follow other players that they tend to have common
    perspectives with. Points are awarded to players when they follow and when they
    are followed by other players.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Teaming**: Teaming takes a cohort into consideration for point accumulation.
    For example, players can create teams. We will implement a team leaderboard. Whereas
    killers and achievers are moved to take action to boost their own scores on the
    leaderboard, socializers will make sure to be more apt to take actions simply
    to boost their team''s point accumulation. As an individual, the action may not
    have been a priority, but being a team contributor, it is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explorers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We round out our look at the potential players in our gamified system by examining
    explorers and how we can appeal to this gaming personality type. Explorers, like
    socializers, are looking for interaction and engagement but more with the system
    itself rather than with other players. Like achievers, they want to engage with
    the system, but not so much to accomplish goals. They are content with enjoying
    the game for the game itself. For them, the journey is the reward. Discovery is
    a primary motivator for them.
  prefs: []
  type: TYPE_NORMAL
- en: Game mechanics that tend to work well with explorers are quests (searches),
    puzzles, and collecting. Here are a few examples we can implement in our system.
  prefs: []
  type: TYPE_NORMAL
- en: We can implement quests/searches in our system by having a set of quests that
    a player can go on at any time. We can log points for each time a player views
    a post, but double the point value each time the post is in a different category
    than the previous category. The goal is to create a sense of adventure.
  prefs: []
  type: TYPE_NORMAL
- en: Another possible scenario is to give points and rewards for creating new discussion
    topics. Explorers are always attempting to push the limits of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Our players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following list shows various players:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Poster**: This is a generic player who responds to another player''s perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defenders**: This is a poster who supports a player''s perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Critics**: This is a poster who disagrees with a player''s perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Teammates**: This is a player that has a team relationship with another player.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Starters**: This is a player that is first to post a perspective on a topic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creator**: This is a player that creates a discussion topic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rookies**: This is a player that has an account but has no responses or posts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Veterans**: This is a player that has had an account for more than 30 days
    and/or 30 login sessions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need a way to hold all of the information about our players and the system.
    If we didn't store this information in a logical manner, players would need to
    keep starting over with our system each time they logged in. This does not make
    for a good system.
  prefs: []
  type: TYPE_NORMAL
- en: In our environment we opted to use the open source database MySQL. If you installed
    the WAMP server in the previous chapter, you should already have MySQL installed.
    Here we will begin using it.
  prefs: []
  type: TYPE_NORMAL
- en: Our WAMP installation includes phpMyAdmin, shown in the following screenshot.
    This is a tool to create and administer databases directly from a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the MySQL database](graphics/8119_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We should expect to see the main screen for the PHP Admin tool after clicking
    on the **phpMyAdmin** option on the WAMP server menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the MySQL database](graphics/8119_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create the main Point database. Click on the **Databases** menu. Name
    the database `VuPoint` and click on **Create**. You can see our list of databases
    on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the MySQL database](graphics/8119_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can find our newly created database in the database list on the left-hand
    side of the **PHPMyAdmin** main screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the MySQL database](graphics/8119_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are many GUI-based MySQL tools that we can install to make some of the
    database table creation and stored procedure creation simpler. We will use both
    as an example. Choose whichever you are most comfortable with. Go to [www.mysql.com/downloads](http://www.mysql.com/downloads)
    for tool options.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Databases are comprised of tables that are made up of columns/fields. We can
    add/modify/delete columns after initially creating the tables, but it's best to
    keep these types of changes to a minimum as they can drastically interfere with
    the data that is already stored in the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are some tables that we need for our system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Player`: This table will hold all information about system users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PlayerID`: This is the internal unique identifier for each player'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Username`: This is the name (external identifier) by which the player will
    be known in the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Password`: The password the player uses to log in to the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Points`: The current points accumulated for the player'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BadgesEarned`: IDs of activities the player has achieved with badges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Email Address`: The player''s unique email address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Login Count`: The total number of times the player has logged in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LastLogin`: The date and time of the last time the player logged in to the
    system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CurrentlyLoggedIn`: The `true`/`false` values for whether this player is logged
    in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AccountCreated`: The date and time when the player created this account![Creating
    our tables](graphics/8119_04_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the `PlayerID` field was created with `auto_increment` and the primary
    key (seen above). Note that the `AccountCreated` table is a timestamp datatype
    with `current_timestamp` as its default value. We will mimic this approach in
    the other tables we create.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create the rest of our tables outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Posts`: This table will hold all of the posts in the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PostID`: The internal unique identifier for each post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Type`: The type of post (`Defense`, `Critique`, or `Neutral`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Topic`: The ID of the discussion topic this post relates to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Player`: The ID of the player making the post'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Post`: The actual text of the message posted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateTime`: The date and time that the post was made at'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Activity`: This table will hold all of the possible things that players can
    get points for and their point value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ActivityID`: The internal unique identifier for activities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Activity`: The description of the activity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Value`: The point value of the particular activity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Badge`: The badge associated with an activity (if one exists).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Topics`: This table holds all of the information about the discussion topics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TopicID`: The internal unique identifier for a topic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Topic`: The actual text of a discussion topic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Creator`: The ID of the player that created the topic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NumberOfPosts`: The total count of neutral posts on the topic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateAdded`: The date and time this topic was added to the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have our basic table structure to support the VuPoint e-learning
    application in place, let''s start adding some of the fundamental code to our
    application. We have three places where the code we write will execute. We can
    write code that runs on the client (the browser) in JQuery/JavaScript. We can
    write code that runs on the server with PHP. We can write code that runs in the
    database with MySQL stored procedures. We could, in theory, write all of our code
    to run in one place, but this would not only be impractical in most cases, it
    would also make some of our tasks significantly more difficult. So the question
    is, "Where the best place to write our code?" Here is the sequence that we will
    follow:'
  prefs: []
  type: TYPE_NORMAL
- en: We will write that portion of the task that adds, modifies, or deletes data
    in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will write that portion of the task that generates HTML to run on the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will write that portion of a task that interacts with the player with JQuery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So what might be some actions that use the database? There are several, but
    here are a few to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Action | Stored procedure | Inputs | Outputs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Checking if a user is authenticated | `SelectAPlayer` | `UserName``EmailAddress``Password`
    | Exactly one player record |'
  prefs: []
  type: TYPE_TB
- en: '| Adding a new player | `InsertAPlayer` | `UserName``EmailAddress``Password`
    | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| Getting a player''s points | `SelectAPlayersPoints` | `UserName` | Number
    of total points |'
  prefs: []
  type: TYPE_TB
- en: '| Recording a post | `InsertAPost` | `UserName``Type``Topic``PlayerID``Post`
    | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| Getting all of the posts for a topic | `SelectPostsByTopic` | `Topic` | All
    post records associated with that topic |'
  prefs: []
  type: TYPE_TB
- en: '| Getting all of the topics | `SelectAllTopics` | N/A | All topics |'
  prefs: []
  type: TYPE_TB
- en: '| Getting the leaderboard data | `SelectLeaders` | `HowMany` | Records of top
    players (say the top 10 to 25) ordered by the number of points accumulated and
    this is limited by `HowMany` |'
  prefs: []
  type: TYPE_TB
- en: '| Getting the players that are online | `SelectOnlinePlayers` | N/A | Records
    of all players who have a `LoggedIn` column value `true` |'
  prefs: []
  type: TYPE_TB
- en: '| Creating a new discussion topic | `InsertATopic` | `Topic``Player` | N/A
    |'
  prefs: []
  type: TYPE_TB
- en: '| Getting the hot topics | `SelectHotTopics` | `HowMany` | Records of top topics(say
    the top 10 to 25) ordered by the number of posts accumulated; limited by `HowMany`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Getting a player''s badges | `SelectPlayerBadges` | `Player` | Comma-separated
    lists of badges achieved by the player |'
  prefs: []
  type: TYPE_TB
- en: 'Here is the code to create these stored procedures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have identified the players in our system. We know what motivates each one
    and how we can give them the feedback they need. We now have a database design
    in place, which is the foundation for our gamified system. Now, we simply need
    to add detail to our skeleton system.
  prefs: []
  type: TYPE_NORMAL
