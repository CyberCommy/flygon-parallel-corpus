- en: '*Chapter 18*: Localization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is quick and simple and what we will learn to do here can make
    your app accessible to millions more potential users. We will see how to add additional
    languages. We will also see how adding text the correct way via string resources
    benefits us when it comes to adding multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Making the Note to Self app multilingual by adding the Spanish and German languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to use string resources more fully
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2018](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2018).
  prefs: []
  type: TYPE_NORMAL
- en: Making the Note to Self app accessible for Spanish and German speakers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to add some folders to our project – one for each new language.
    The text is classed as a `res` folder. Follow these steps to add Spanish and German
    support to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: While the source files for this project are provided in the [*Chapter 18*](B16773_18_ePub_RK.xhtml#_idTextAnchor320)
    folder, they are just for reference. You need to go through the processes described
    next to achieve multilingual functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Spanish language support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the next steps to add Spanish language support:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `values-es`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to add a file in which we can place all our Spanish translations.
    Right-click on `strings.xml` in the `values-es` in the **Directory name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this stage, we have a new folder for Spanish translations with a `strings.xml`
    file inside for the string resources. Let's do the same for the German language.
  prefs: []
  type: TYPE_NORMAL
- en: Adding German language support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add German language support:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `values-de`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to add a file in which we can place all our German translations.
    Right-click on `strings.xml` in the `values-de` in the **Directory name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what the `strings.xml` folder looks like. You are probably wondering
    where the `strings.xml` folder came from as it doesn''t correspond to the structure
    we seemed to be creating in the previous steps. Android Studio is helping us (apparently)
    to organize our files and folders as is required by the Android operating system.
    You can, however, see the Spanish and German files indicated by their country-specific
    extensions, **es** and **de**, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.1 – strings.xml folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.1_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.1 – strings.xml folder
  prefs: []
  type: TYPE_NORMAL
- en: Now we can add the translations to the files.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the string resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we know, the `strings.xml` file contains the words that the app will display
    – words such as "important," "to do," "idea," and more. By having a `strings.xml`
    file for each language we want to support, we can then leave Android to choose
    the appropriate text depending on the language settings of the user.
  prefs: []
  type: TYPE_NORMAL
- en: As you go through the following, notice that although we place the translation
    of whatever word we are translating as the value, the `name` attribute remains
    the same. If you think about it, this is logical because it is the `name` attribute
    that we refer to in our layout files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s provide the translations, see what we have achieved, and then come back
    and discuss what we will do about the text in our Java code. The simplest way
    to achieve this code is to copy and paste the code from the original `strings.xml`
    file and then edit the values of each of the `name` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the **(es)** postfix. Edit the file to look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Open the `strings.xml` file by double-clicking it. Be sure to choose the one
    next to the `strings.xml` files, then the missing resources will be taken from
    the default file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What we have done is provided two translations. Android knows which translation
    is for which language because of the folders they are placed in. Furthermore,
    we have used a `name` attribute) to refer to the translations. Look back at the
    previous code and you will see that the same identifier is used for both translations
    as well as in the original `strings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even localize to different versions of a language, for example, US
    or UK English. The complete list of codes can be found here: [http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android](http://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android).
    You can even localize resources such as images and sound. Find out more about
    this here: [http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The translations were copy and pasted from Google Translate, so it is very likely
    that some of the translations are far from correct. Doing translation on the cheap
    like this can be an effective way to get an app with a basic set of string resources
    onto the devices of users who speak different languages to yourself. Once you
    start needing any depth of translation, perhaps in the case of the lines of a
    story-driven game or a social media app, you will certainly benefit from having
    the translation done by a human professional.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this exercise is to show how Android works, not how to translate.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: My sincere apologies to any Spanish or German speakers who can likely see the
    limitations of the translations provided here.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the translations, we can see them in action, up to a point.
  prefs: []
  type: TYPE_NORMAL
- en: Running Note to Self in German or Spanish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the app to see whether it is working as normal. Now we can change the localization
    settings to see it in Spanish. Different devices vary slightly in how to do this,
    but the Pixel 3 emulator options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Settings** | **System** | **Languages and input** | **Add a language**.
    Next, select **Español** and you will then be able to switch between Spanish and
    English from a list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click and drag **Español (Estados Unidos)** so that it is at the top of
    the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations, your emulator is now defaulting to Spanish. Once you are done
    with this chapter, you can drag your preferred language back to the top of the
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can run the app in the usual way. Here are some screenshots of the
    app running in Spanish. I have photoshopped a couple of screenshots side by side
    to show different screens of the Note to Self app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.2 – The app running in Spanish'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.2_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.2 – The app running in Spanish
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshots, you can clearly see that our app is translated to Spanish,
    mainly. Obviously, the text that the user enters will be in whatever language
    they speak; that is not a flaw of our app. However, look at the screenshots closely
    and notice that I have pointed out a couple of places where the text is still
    in English. We still have some untranslated text in each of our dialog windows.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the text is contained within our Java code directly. As we have
    seen, it is easy to use string resources in multiple languages and then refer
    to them in our layouts, but how do we refer to string resources from our Java
    code?
  prefs: []
  type: TYPE_NORMAL
- en: Making the translations work in Java code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to do is create the resources in each of the three `strings.xml`
    files. Here are the two resources that need adding to the three different files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `strings.xml` (without any country postfix), add these two resources within
    the `<resources></resources>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In `strings.xml` with the `<resources></resources>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In `strings.xml` with the `<resources></resources>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to edit some Java code to refer to a resource instead of a hardcoded
    string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `DialogNewNote.java` file and find this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit it as shown next to use the string resource we just added instead of the
    hardcoded text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The new code uses the chained `getResources.getString` methods to replace the
    previously hardcoded `"Add a new note"` text. Look closely and you will see that
    the argument sent to the `getString` method is the `R.string.add_new_note` string
    identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The `R.string` code refers to the string resources in the `res` folder and `add_new_note`
    is our identifier. Android will then be able to decide which version (default,
    Spanish, or German) is appropriate based on the locale of the device on which
    the app is running.
  prefs: []
  type: TYPE_NORMAL
- en: We have one more hardcoded string to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `DialogShowNote.java` file and find this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit it as shown next to use the string resource we just added instead of the
    hardcoded text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The new code again uses the chained `getResources.getString` methods to replace
    the previously hardcoded `"Your note"` text. Again, the argument sent to `getString`
    is the string identifier, in this case, `R.string.your_note`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android can now decide which version (default, Spanish, or German) is appropriate
    based upon the locale of the device on which the app is running. The next screenshot
    shows that the **New note** screen now has the opening text in the appropriate
    language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.3 – New note screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.3_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 18.3 – New note screen
  prefs: []
  type: TYPE_NORMAL
- en: You can add as many string resources as you like. As a reminder from [*Chapter
    3*](B16773_03_ePub_RK.xhtml#_idTextAnchor064), *Exploring Android Studio and the
    Project Structure*, note that using string resources is the recommended way to
    add any text to all projects. The tutorials in this book (apart from Note to Self)
    will tend to hardcode them to make a more compact tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how we can cater to regions of the world that speak a different
    language to us. We can now go global with our apps, as well as adding more flexible
    string resources instead of hardcoding all the text.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can add cool animations to our apps
    using animations and interpolators.
  prefs: []
  type: TYPE_NORMAL
