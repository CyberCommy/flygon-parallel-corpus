- en: Introduction to ECS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Elastic Container Service** (**ECS**) is a popular AWS-managed service that
    provides container orchestration for your applications and integrates with a wide
    variety of AWS services and tools.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn key concepts of ECS; how ECS is architected,
    and understand the various components of ECS, which include the **Elastic Container
    Registry** (**ECR**), ECS clusters, ECS container instances, ECS task definitions,
    ECS tasks, and ECS services. The primary focus of this chapter will be using the
    AWS console to create your first ECS cluster, define an ECS task definition, and
    configure an ECS service to deploy your first container application to ECS. You
    will take a closer look at how ECS clusters are formed from ECS container instances,
    and inspect an ECS container instance under the hood to understand further how
    ECS is connected to your infrastructure and how containers are deployed and managed.
    Finally, you will be introduced to the ECS command-line interface (CLI), which
    is a useful tool for quickly standing up ECS clusters, task definitions, and services
    that uses the popular Docker Compose format to define your containers and services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: ECS architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ECS cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding ECS container instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating ECS task definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating ECS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying ECS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an ECS task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the ECS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements to complete this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Engine 18.06 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Compose 1.22 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jq
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrator access to an AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local AWS profile configured, as per instructions in Chapter 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working Docker workflow for the sample application, as configured in Chapter
    2 (see [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following GitHub URL contains the code samples used in this chapter: [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2MTG1n3](http://bit.ly/2MTG1n3)'
  prefs: []
  type: TYPE_NORMAL
- en: ECS architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ECS is an AWS-managed service that provides you with core building blocks to
    construct how you want to deploy and operate container applications in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Prior to December 2017, the Elastic Container Service was known as the EC2 Container
    Service.
  prefs: []
  type: TYPE_NORMAL
- en: 'ECS allows you to:'
  prefs: []
  type: TYPE_NORMAL
- en: Build and publish your Docker images in private repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create definitions that describe the container images, configuration, and resources
    required to run your applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launch and run your containers using your own EC2 infrastructure or using an
    AWS-managed infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage and monitor your containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orchestrate rolling deployments of new versions or revisions of your container
    applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To provide these capabilities, ECS includes a number of components illustrated
    in the following diagram and described in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Component | Description |'
  prefs: []
  type: TYPE_TB
- en: '| Elastic Container Registry (ECR) | Provides secure private Docker image repositories
    where you can publish and pull your Docker images. We will examine ECR in depth
    in [Chapter 5](a00edb3f-1989-4e3c-8835-b99bb4a1b582.xhtml), *Publishing Docker
    Images using ECR.* |'
  prefs: []
  type: TYPE_TB
- en: '| ECS cluster | A collection of ECS Container Instances that run your container
    applications. |'
  prefs: []
  type: TYPE_TB
- en: '| ECS container instance | An EC2 instance that runs the Docker Engine and
    ECS agent, which communicates with the AWS ECS service and allows ECS to manage
    the lifecycle of your container applications. Each ECS container instance is joined
    to a single ECS cluster. |'
  prefs: []
  type: TYPE_TB
- en: '| ECS agent | A software component that runs in the form of a Docker container
    and communicates with the AWS ECS service. The agent is responsible for managing
    the Docker Engine on behalf of ECS, pulling Docker images from registries, starting
    and stopping ECS tasks, and publishing metrics to ECS. |'
  prefs: []
  type: TYPE_TB
- en: '| ECS task definition | Defines one or more containers and associated resources
    that comprise your application. Each container definition includes information
    specifying the container image, how much CPU and memory should be allocated to
    the container, runtime environment variables, and many more configuration options.
    |'
  prefs: []
  type: TYPE_TB
- en: '| ECS Task | An ECS task is the runtime manifestation of an ECS task definition,
    and represents the containers defined in your task definitions running on a given
    ECS cluster. ECS tasks can be run as short-lived, adhoc tasks, or run as long-lived
    tasks, which form the building blocks of ECS services. |'
  prefs: []
  type: TYPE_TB
- en: '| ECS service | An ECS service defines zero or more instances of a long-lived
    ECS task running on a given ECS cluster and represent what you would commonly
    think of as your application or microservice instances.ECS services define an
    ECS task definition, target an ECS cluster, and also include a desired count,
    which defines how many instances or ECS tasks based from the ECS task definition
    are associated with the service.Your ECS services can be integrated with the AWS
    Elastic Load Balancing service, which allows you to provide a highly available,
    load-balanced service endpoint for your ECS service, and also supports rolling
    deployments of new versions of your application. |'
  prefs: []
  type: TYPE_TB
- en: '| AWS ECS | Manages all components in the ECS architecture. Provides service
    endpoints that manage ECS agents, integrate with other AWS services, and allow
    customers to manage their ECR repositories, ECS task definitions, and ECS clusters.
    |'
  prefs: []
  type: TYPE_TB
- en: As we progress through this chapter, refer to the following diagram to obtain
    a visual overview of how the various ECS components relate to each other.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/25c1eaac-981b-4035-b59d-dda3353e1607.png)ECS architecture'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ECS cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To help you understand the basics of ECS, we will now step through a series
    of configuration tasks using the AWS console.
  prefs: []
  type: TYPE_NORMAL
- en: We will first create an ECS cluster, which is a collection of ECS container
    instances that will run your container applications, and often are closely related
    to EC2 Auto Scaling groups, as shown in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating an ECS cluster can be performed using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: All AWS console configuration examples in this chapter are based on you having
    logged in to the AWS console and assumed an appropriate administrative role, as
    described in the earlier Chapter 3, *Getting Started with AWS**.* At the time
    of writing this chapter, the tasks described in this section are specific to the
    us-east-1 (North Virginia) region so before proceeding, ensure you have selected
    this region in the AWS console.
  prefs: []
  type: TYPE_NORMAL
- en: From the main AWS console, select **Services** | **Elastic Container Service**
    within the Compute section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you haven't used or configured ECS before in your AWS account and region,
    you will be presented with a Welcome screen, and you can invoke a getting started
    configuration wizard by clicking the **Get started** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At at the time of writing, the getting started wizard only allows you to get
    started using the Fargate deployment type. We will learn about Fargate in later
    chapters, so scroll to the bottom of the screen and click on **Cancel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be returned to the ECS console and we can now get started creating
    an ECS cluster by clicking on the **Create Cluster** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Select cluster template** screen, select the **EC2 Linux + Networking**
    template, which will set up network resources and an EC2 autoscaling group with
    support for Docker for Linux by launching EC2 instances based upon a special ECS-optimized
    Amazon Machine Image (AMI) that we'll learn more about later on. Once complete,
    click on **Next step** to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Configure cluster** screen, configure a cluster name of **test-cluster**,
    ensure the **EC2 instance type** is set to **t2.micro** to qualify for free tier
    access, and set the **Key pair** to the EC2 key pair you created in earlier chapters.
    Notice that a new VPC and subnets will be created, along with a security group
    that permits inbound web access (TCP port `80`) from the internet (`0.0.0.0/0`).
    Once complete, click on **Create** to commence creation of the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/06292307-6855-4e25-869b-12901590f2ef.png)Configuring the ECS cluster'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the Launch status screen will be displayed and a number of resources
    will be created that are required to support your ECS cluster. Once the cluster
    creation is complete, click on the **View Cluster** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now be taken to the details screen for the `test-cluster` that was
    just created. Congratulations—you have successfully deployed your first ECS cluster!
  prefs: []
  type: TYPE_NORMAL
- en: 'The cluster details screen provides you with configuration and operational
    data about your ECS cluster—for example, if you click on the **ECS Instances**
    tab, you are presented with a list of each of the ECS container instances in the
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b41be353-c25f-4219-a6c6-d5792812649d.png)ECS cluster details'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the wizard created a single container instance, which is running
    from an EC2 instance that is deployed to the displayed availability zone. Note
    you can also see other information about the ECS container instance, such as ECS
    agent version and status, running tasks, CPU/memory usage, along with the version
    of the Docker Engine.
  prefs: []
  type: TYPE_NORMAL
- en: There's not much more than this to an ECS cluster—it is essentially a collection
    of ECS container instances, which in turn are EC2 instances running the Docker
    Engine along with an ECS agent that provide CPU, memory, and networking resources
    for running your containers.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ECS container instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an ECS cluster was very easy using the wizard provided by the AWS console,
    however it should be obvious that a lot of things were happening under the hood
    to get your ECS cluster up and running. A full discussion of all of the resources
    that were created is outside the scope of this introductory chapter, however at
    this stage, it is useful to focus on ECS container instances and examine them
    in further detail, given they collectively form the heart of ECS clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Joining an ECS cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the ECS create cluster wizard launched instances and created our ECS cluster,
    you may have wondered how exactly an ECS container instance joins an ECS cluster.
    The answer to this is very simple and can be understood easily by clicking on
    the EC2 instance ID link of the ECS container instance in your newly created cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'This link will take you to the EC2 Dashboard with the EC2 instance associated
    with the container instance selected, as shown in the following screenshot. Note
    that I have highlighted a number of elements that I will refer back to as we discuss
    ECS container instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/54684032-be1c-458f-9a0f-54cd1fd2f890.png)EC2 Instance details'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you right-click the instance and select **Instance Settings** | **View/Change
    User Data** (see the previous screenshot), you will be presented with the user
    data for the instance, which is a script that is run on instance creation and
    can be used to help initialize your EC2 instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f1a75df1-7ad8-457a-96e4-701b6a1d0a5d.png)EC2 Instance User Data
    Script for Joining an ECS Cluster'
  prefs: []
  type: TYPE_NORMAL
- en: The user data script that was configured by the getting started wizard is shown
    in the previous screenshot, which, as you can see, is a very simple bash script
    that writes the `ECS_CLUSTER=test-cluster` text to a file called `/etc/ecs/ecs.config`.
    In this example, recall that `test-cluster` is the name you configured for your
    ECS cluster, so this single configuration line in the referenced ECS agent configuration
    file simply tells the agent running on the ECS container instance to attempt to
    register with an ECS cluster called `test-cluster`.
  prefs: []
  type: TYPE_NORMAL
- en: The `/etc/ecs/ecs.config` file includes many other configuration options, which
    we will examine in further detail in [Chapter 6](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml),
    *Building Custom ECS Container Instances**.*
  prefs: []
  type: TYPE_NORMAL
- en: Granting access to join an ECS cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous screenshot, notice that there are no credentials required to
    connect to the ECS cluster—you could be forgiven for thinking that ECS simply
    allows any EC2 instance to join an ECS cluster, but of course that would not be
    very secure.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 instances include a feature called IAM instance profiles, which attaches
    an IAM role to the EC2 instance that defines various AWS service operations the
    instance can perform. In the EC2 dashboard for your EC2 instance, you can see
    that a role called **ecsInstanceRole** has been assigned to your instance, and
    if you click on this role, you will be taken to the IAM dashboard showing the
    **Summary** page for the role.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Permissions** tab you can see that an AWS-managed policy called `AmazonEC2ContainerServiceforEC2Role`
    is attached to the role, and if you expand the policy, you can see the various
    IAM permissions associated with this policy as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eb356c06-1ac3-4310-9736-1e1163eab6cd.png)EC2 Instance Role IAM Policy'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the policy permits the `ecs:RegisterContainerInstance` action, which
    is the ECS permission required for an ECS container instance to join an ECS cluster,
    and that the policy also grants the `ecs:CreateCluster` permission, which means
    an ECS container instance attempting to register to an ECS cluster that does not
    currently exist will automatically create a new cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'One further thing to note is that the policy applies to all resources as designated
    by the `"Resource": "*"` property, meaning any EC2 instance that is assigned a
    role with this policy will be able to join any ECS cluster in your account and
    region. Again, this may not seem very secure, but bear in mind this is a policy
    intended to simplify granting the necessary permissions for your ECS container
    instances, and in later chapters we will discuss how to create your own custom
    IAM roles and policies to restrict which ECS clusters a given ECS container instance
    can join.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing ECS container instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, ECS container instances should be self-managing and require very
    little direct management, but nevertheless there will be times you need to troubleshoot
    your ECS container instances, hence it is useful to learn how you can connect
    to your ECS container instances and understand what happens under the hood of
    an ECS container instance.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to ECS container instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ECS container instances are regular Linux hosts, so as you might expect, connecting
    to your instances simply means being able to establish a secure shell (SSH) session
    to the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: If you navigate back to your instance in the EC2 dashboard, we first need to
    configure the security group attached to your instance to permit inbound SSH access.
    You can do this by clicking on the security group, selecting the Inbound tab and
    clicking the **Edit button** to modify the inbound rules of the security group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Edit inbound rules** dialog, click on the **Add Rule** button and
    add a new rule with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Protocol: TCP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port Range: 22'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source: My IP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/47275b79-2f2b-40c2-9a8b-df1c4a977c87.png)Add a Security Group Rule
    for SSH Access'
  prefs: []
  type: TYPE_NORMAL
- en: After clicking **Save**, you will have enabled inbound SSH access from your
    public IP address to the ECS container instance. If you click back in your browser
    to return to your EC2 instance, you can now copy the public IP address and SSH
    to your instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example demonstrates how to establish an SSH connection to the
    instance, using the `-i` flag to reference the private key of the EC2 key pair
    you associated with the instance. You also need to log in with a username of `ec2-user`,
    which is the default non-root user included in Amazon Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first thing to notice is that the login banner indicates this instance is
    based on the the Amazon ECS-Optimized Amazon Linux AMI, which is the default and
    recommended Amazon Machine Image (AMI) to work with when creating ECS container
    instances. AWS maintains this AMI and updates it periodically with versions of
    Docker and ECS agent recommended for use with ECS, so this is by far the simplest
    platform to use for your ECS container instances and I strongly recommend using
    this AMI as the foundation for your ECS container instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about this AMI here: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).
    It includes a list of current AMI image IDs for each of the regions supported
    by ECS.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml), *Building Custom
    ECS Container Instances* you will learn how to customize and enhance the Amazon
    ECS-Optimized Amazon Linux AMI.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the local Docker environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you might expect, your ECS container instance will have an active Docker
    Engine running, which you can gather information about by running the `docker
    info` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here you can see the instance is running Docker version 17.09.1-ce, using the
    device mapper storage driver, and currently has a single container running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now take a look at the running container by executing the `docker container
    ps` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the ECS agent actually runs as a container called `ecs-agent`,
    which should always be running on your ECS container instances in order for your
    ECS container instance to be managed by ECS.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the ECS agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown previously, the ECS agent runs as a Docker container, and we can use
    the `docker container inspect` command to gather some insight about how this container
    works. In the previous example, we reference the name of the ECS agent container,
    and then use a Go template expression along with the `--format` flag to filter
    the command output, displaying the various bind mounts or volume mappings from
    the ECS agent container to the ECS container instance host.
  prefs: []
  type: TYPE_NORMAL
- en: In many of the command examples, I am piping output to the `jq` utility, which
    is a useful utility used for parsing JSON output at the command line. `jq` is
    not included by default in the Amazon Linux AMI, so you will need to install `jq`
    by running the `sudo yum install jq` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Running the docker container inspect command
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `/var/run` folder is mapped from the host to the agent, which
    provides access to the Docker Engine socket located at `/var/run/docker.sock`,
    allowing the ECS agent to manage the Docker Engine. You can also see that ECS
    agent logs will be written to `/var/log/ecs` on the Docker Engine host file system.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the ECS agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ECS agent includes a local web server that can be used to introspect current
    ECS agent status.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates introspecting the ECS agent using the `curl`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Introspecting the ECS Agent
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the ECS agent listens on port 51678 and provides three endpoints
    you can query:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/v1/metadata`: Describes the cluster the container instance is joined to,
    the container instance **Amazon Resource Name** (**ARN**), and the ECS agent version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/v1/tasks`: Returns a list of currently-running tasks. At the moment we haven''t
    deployed any ECS services or tasks to our cluster, hence this list is empty'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/license`: Provides the various software licenses that apply for the ECS agent
    software'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/v1/metadata` endpoint is particularly useful, as you can use this endpoint
    to determine whether or not the ECS agent has successfully joined a given ECS
    cluster. We will use this later on in [Chapter 6](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml),
    *Building Custom ECS* *Container Instances* to perform a health check on instance
    creation to ensure our instances have successfully joined the correct ECS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: ECS container instance logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each ECS container instance includes log files that can help troubleshoot your
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary logs you will work with include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Engine logs: Located at `/var/log/docker`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECS Agent logs: Located at `/var/log/ecs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that there are two types of ECS agent logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Init logs: Located at `/var/log/ecs/ecs-init.log`, these logs provide output
    related to the `ecs-init` service, which is an Upstart service that ensures the
    ECS agent is running on container instance startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agent logs: Located at `/var/log/ecs/ecs-agent.log.*`, these logs provide output
    related to ECS agent operation. These logs are the most common logs you will inspect
    for any ECS agent related issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ECS task definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have set up your ECS cluster and understand how ECS container instances
    register with the cluster, it's time to configure an ECS task definition, which
    defines the configuration of the containers you want to deploy for your application.
    ECS task definitions can define one or more containers, along with other elements,
    such as volumes, that your containers may need to read or write to.
  prefs: []
  type: TYPE_NORMAL
- en: To keep things simple, we are going to create a very basic task definition that
    will run the official Nginx Docker image, which is published at [https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/).
    Nginx is a popular web server, which by default will serve a Welcome to Nginx
    page, and for now this will suffice to represent a simple web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create an ECS task definition for our simple web application by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the ECS console at **Services** | **Elastic Container Service**.
    You can create a new task definition by selecting **Task Definitions** from the
    left-hand menu and clicking the **Create new Task Definition** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Select launch type compatibility** screen, select the **EC2 launch
    type**, which will configure the task definition to be launched on ECS clusters
    based upon the infrastructure that you own and manage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Configure task and container definitions** screen, configure a **Task
    Definition Name** of **simple-web** and then scroll down and click **Add container**
    to add a new container definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Add container** screen, configure the following settings and once
    complete click the **Add button** to create the container definition. This container
    definition will map port 80 on ECS container hosts to port `80` in the container,
    allowing access to the Nginx web server from the outside world:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Container name**: nginx'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: nginx'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory Limits**: `250` MB Hard limit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port mappings**: Host port `80`, Container port `80`, Protocol tcp:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/0b9e9538-9656-4d04-a83d-a988536410bf.png)Creating a Container Definition'
  prefs: []
  type: TYPE_NORMAL
- en: Complete creation of the task definition by clicking the **Create** button at
    the bottom of the **Configure task and container definitions** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an ECS service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created an ECS cluster and configured an ECS task definition that includes
    a single container running Nginx with an appropriate port mapping configuration
    to expose the Nginx web server to the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: We now need to define an ECS service, which will configure ECS to deploy one
    or more instances of our ECS task definition to our ECS cluster. ECS services
    deploy a given ECS task definition to a given ECS cluster, allowing you to configure
    how many instances (ECS tasks) of the referenced ECS task definition you would
    like to run, and controlling more advanced features, such as load balancer integration
    and rolling updates of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new ECS service, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the ECS console, select Clusters from the left and click on the **test-cluster**
    you created earlier in this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ee85b80b-d440-4a73-bbd4-fa331767d863.png)Selecting an ECS Cluster
    to Create an ECS Service'
  prefs: []
  type: TYPE_NORMAL
- en: In the Cluster details page, select the **Services** tab and click on **Create**
    to create a new service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Configure service screen, configure the following settings and once
    complete click the **Next** **step** button. Notice that we reference both the
    task definition and ECS cluster we created earlier in this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Launch type**: EC2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task Definition**: simple-web:1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cluster**: test-cluster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service name**: simple-web'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of tasks**: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remainder of the ECS service configuration settings are optional. Keep on
    clicking **Next step** until you reach the **Review** screen, where you can review
    your settings and click **Create Service** to complete creation of the ECS service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Launch Status** screen will now appear and once your service has been
    created, click on the **View Service** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Service details screen will now appear for your new ECS service, and you
    should see a single ECS task in a RUNNING state, meaning the Nginx container associated
    with the simple-web ECS task definition was successfully launched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7ff62653-1a1e-4dc7-9f44-848fcebca51c.png)Completing Creation of
    a New ECS Service'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, you should now be able to browse to your newly deployed Nginx
    web server, which you can verify by browsing to the public IP address of the ECS
    container instance you created earlier as part of your ECS cluster. If everything
    is working as expected, you should be presented with the default **Welcome to
    nginx** page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7863bcb9-dbb8-42c2-8481-c43e191fa316.png)Browsing to the Nginx Web
    Server'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying ECS services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have successfully created an ECS service, let's examine how ECS
    manages new deployments of container applications. It is important to understand
    that ECS task definitions are immutable—that is, you cannot modify a task definition
    once it has been created, and instead you need to either create a completely new
    task definition or create a *revision* of your current task definition, which
    you can think of as a new version of a given task definition.
  prefs: []
  type: TYPE_NORMAL
- en: ECS defines the logical name of an ECS task definition as the *family*, and
    a given revision of an ECS task definition is expressed in the form *family*:*revision—*for
    example, `my-task-definition:3` refers to revision 3 from the *my-task-definition*
    family.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that in order to deploy a new version of a container application,
    you need to perform a couple of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new revision of your ECS task definition with configuration settings
    that have been changed for the new version of your application. This often will
    just be the image tag associated with the Docker images you build for your applications,
    however any configuration change, such as a change in allocated memory or CPU
    resource, will result in a new revision of your ECS task definition being created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update your ECS service to use the new revision of the ECS task definition.
    Whenever you update an ECS service in this manner, ECS will automatically perform
    a rolling update of your application, attempting to gracefully replace each running
    container that comprises your ECS service with new containers based on the new
    ECS task definition revision.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To demonstrate this behavior, let''s now modify the ECS task definition you
    created earlier in this chapter and update the ECS service by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the ECS console, select **Task Definitions** from the left and click on the
    **simple-web** task definition you created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that a single revision of the task definition currently exists—the revision
    number is denoted after the colon following the task definition name. For example,
    **simple-web:1** refers to revision 1 of a simple-web task definition. Select
    the current task definition revision, and then click **Create new revision** to
    create a new revision based on the existing task definition revision.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Create new revision of Task Definition** screen is displayed, which is
    very similar to the **Create new Task Definition** screen you configured earlier.
    Scroll down to the **Container Definitions** section and click on the Nginx container
    to modify the Nginx container definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The change we will make to the task definition is to modify the port mapping
    from the current static host mapping of port 80 to a dynamic port mapping on the
    host. This can be achieved by simply leaving the host port setting empty, in which
    case the Docker Engine will assign a dynamic port from the ephemeral port range
    on underlying ECS container instances. For the Amazon Linux AMI we are using,
    this port range is between `32768` and `60999`. The benefit of dynamic port mapping
    is that we can run multiple instances of our container on the same host—if the
    static port mapping was in place, only one container could be launched, as subsequent
    containers would attempt to bind to the already-in-use port `80`. Once you have
    completed the configuration change, click on the **Update** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create button at the bottom of the **Create new revision of Task Definition**
    screen to complete creation of the new revision.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To obtain the ephemeral port range used by Docker, you can inspect the contents
    of the `/proc/sys/net/ipv4/ip_local_port_range` file. If this file is not available
    on your operating system, Docker will use the port range of `49153` through `65535`.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, a new revision (revision 2) has been created from your ECS task
    definition. Now you need to update your ECS service to use the new task definition
    revision by completing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the ECS console, select **Clusters** from the left and select your test-cluster.
    On the Services tab, select the checkbox next to your ECS service and click the
    **Update** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Task Definition drop-down on the Configure service screen, you should
    be able to select the new revision (simple-web:2) of the task definition you just
    created. Once complete, keep on clicking the **Next step** button until you reach
    the Review screen, at which point you can click the **Update Service** button
    to complete your configuration changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2aa14d89-5a38-4204-b619-236a6a61a153.png)Modifying ECS Service Task
    Definition'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to what you saw previously when you created your ECS service, the Launch
    Status screen will be displayed. If you click on the **View Service** button,
    you will be taken to the ECS service details screen, and if you select the Deployments
    tab, you should see the new version of your task definition being deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6fe12f0d-5fdd-48bd-8677-ed4aa6755052.png)ECS Service Deployment'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that there are two deployments—the ACTIVE deployment shows the existing
    ECS service deployment, and indicates there is currently a single running container.
    The PRIMARY deployment shows the new ECS service deployment based on the new revision,
    and indicates a desired count of 1 but notice the running count is not yet 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you periodically refresh the deploy status, you will be able to observe
    the various state changes as the new task definition revision is deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: The deployment changes will be performed reasonably quickly, so if you don't
    see any of these changes, you can always update the ECS service to use the first
    revision of the ECS task definition to force a new deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The PRIMARY deployment should indicate a pending count of 1, meaning the new
    version of the container is about to start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7686c6f8-bd4d-4904-bf65-0fd0382085d4.png)New Deployment Pending
    Transition'
  prefs: []
  type: TYPE_NORMAL
- en: 'The PRIMARY deployment will next transition to a running count of 1, meaning
    the new version of the container is running alongside the existing container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/74aa02ea-9b46-46cb-8854-3b7b1a8ffecd.png)New Deployment Running
    Transition'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the existing container can now be stopped, so you should see
    the ACTIVE deployment running count drop to zero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/619fe851-38df-4e92-bde6-6371ee013880.png)Old Deployment Stopping
    Transition'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ACTIVE deployment disappears from the Deployments tab and the rolling deployment
    is complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3750bf97-f2c1-4d44-a110-f3952a961157.png)Rolling Deployment Completion'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have successfully performed a rolling update of an ECS service,
    and it is worthwhile to point out that the new dynamic port-mapping configuration
    means that your Nginx web server is no longer listening on port 80 to the outside
    world, and instead is listening on a port dynamically chosen by the ECS container
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: You can verify this by attempting to browse to your Nginx web server public
    IP address—this should result in a connection failure as the web server is no
    longer operational on port 80\. If you select the **Tasks** tab for the **simple-web**
    ECS service, you can click on the task to find out which port our web server is
    now listening on.
  prefs: []
  type: TYPE_NORMAL
- en: After expanding the Nginx container which is shown as follows, you can see that
    in this case port `32775` on the ECS container instance host is mapped to port
    `80` on the Nginx container, which you won't be able to reach from the Internet,
    given the security group assigned to the ECS container instance only permits inbound
    access on port `80`.
  prefs: []
  type: TYPE_NORMAL
- en: For dynamic port mapping to be useful, you need to associate your ECS services
    with an application load balancer, which will automatically detect the dynamic
    port mapping of each ECS service instance and load balance incoming requests to
    a static port defined on the load balancer to each ECS service instance. You will
    learn more about this in later chapters.![](assets/c27fd937-e1b2-4a91-8300-c174222ad400.png)ECS
    Service Dynamic Port Mapping
  prefs: []
  type: TYPE_NORMAL
- en: Running ECS tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how we can deploy long-running applications as ECS services, but
    how do we run ad-hoc tasks or short-lived containers using ECS? The answer of
    course is to create an ECS task, which typically are used to run ad-hoc tasks,
    such as running a deployment script, performing database migrations, or perhaps
    performing scheduled batch processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although ECS services are essentially long-running ECS tasks, ECS does treat
    ECS tasks that you create yourself quite differently from ECS services, as described
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Scenario/feature | ECS service behavior | ECS task behavior |'
  prefs: []
  type: TYPE_TB
- en: '| Container is stopped or fails | ECS will always attempt to maintain the desired
    count of a given ECS service, and will attempt to restart a container if the active
    count falls below the desired count due to a container being stopped or failing.
    | ECS tasks are one-shot executions that are either success or fail. ECS will
    never attempt to re-run a failed ECS task. |'
  prefs: []
  type: TYPE_TB
- en: '| Task definition configuration | You cannot override any of the ECS task definition
    configuration for a given ECS service. | ECS tasks allow you to override environment
    variables and command-line settings, allow you to leverage a single ECS task definition
    for a variety of different types of ECS tasks. |'
  prefs: []
  type: TYPE_TB
- en: '| Load balancer integration | ECS services feature full integration with the
    AWS Elastic Load Balancing service. | ECS tasks offer no integration with any
    load balancing services. |'
  prefs: []
  type: TYPE_TB
- en: ECS Services vs ECS Tasks
  prefs: []
  type: TYPE_NORMAL
- en: Let's now see how you run ECS tasks using the AWS console. You will create a
    very simple ECS task that runs the `sleep 300` command from the Nginx image defined
    in your ECS tasks definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will cause the task to sleep for five minutes before executing, simulating
    a short-lived ad-hoc task:'
  prefs: []
  type: TYPE_NORMAL
- en: In the ECS console, select **Clusters** on the left and click on your cluster
    named **test-cluster**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Tasks** tab and click on the **Run new Task** button to create
    a new ECS task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c57d3acc-a14a-4571-b3a6-158461398793.png)Running an ECS Task'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Run Task** screen, first select **EC2** as the **Launch type** and
    ensure that the **Task Definition** and **Cluster** settings are configured correctly.
    If you expand the **Advanced Options** section, notice that you can specify container
    overrides for the **nginx** container. Note that to configure a command override,
    you must supply the command you want to run along with any arguments in a comma
    separated format—for example, to execute the `sleep 300` command, you must configure
    a command override of **sleep,300**. Once configuration is complete, click on
    **Run Task** to execute your new ECS task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/689373b4-dae0-49a9-9677-97bf10311b1a.png)Configuring an ECS Task'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you will be returned to the Tasks tab for the ECS cluster and
    you should see a new task with a state of **PENDING**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e25ba3d1-4de3-4d2d-a607-16d019c3b943.png)ECS Task in a Pending State'
  prefs: []
  type: TYPE_NORMAL
- en: The new task should quickly transition to a status of **RUNNING**, and if we
    left the task to run it would eventually exit after five minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take this opportunity to observe the behavior of ECS tasks when they
    are stopped. If you select all tasks and click the **Stop** button, you will be
    prompted to confirm you want to stop each task. After confirming you want to stop
    each task, the **Tasks** pane should immediately display no active tasks, and
    after clicking the refresh button a few times, you should see a single task start
    back up. This task was automatically started by ECS, in order to maintain a desired
    count of 1 for the simple-web service.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ECS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have focused solely on using the AWS console to get started
    with ECS. Another tool that is written and maintained by AWS is called the ECS
    CLI, which allows you to create ECS clusters and deploy ECS tasks and services
    from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ECS CLI is different from the AWS CLI in a variety of ways, but the main
    differences include:'
  prefs: []
  type: TYPE_NORMAL
- en: The ECS CLI is focused on interacting with ECS and only supports interacting
    with other AWS services that provide supporting resources for ECS, such as the
    AWS CloudFormation and EC2 service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECS CLI operations are more coarse-grained than AWS CLI operations. For example,
    the ECS CLI will orchestrate creating an ECS cluster and all of its supporting
    resources, much like the behavior of the ECS cluster wizard you used earlier in
    this chapter, whereas the AWS CLI is focused on more fine-grained operations that
    perform a single specific task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ECS CLI is written in Golang, whereas the AWS CLI is written in Python.
    This does introduce some behavioral differences—for example, the ECS CLI does
    not support the use of AWS profiles with MFA (multi-factor authentication) enabled,
    meaning you need to use AWS credentials and roles that do not mandate MFA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A particularly useful feature of the ECS CLI is that it supports version 1 and
    version 2 of Docker Compose files, meaning you can use Docker Compose to provide
    a generic description of your multi-container environments. The ECS CLI also allows
    you to define your infrastructure using a YAML-based configuration file, and as
    such can be considered a simple and functional infrastructure-as-code tool.
  prefs: []
  type: TYPE_NORMAL
- en: In general, the ECS CLI is useful for quickly standing up sandbox/development
    environments for rapid prototyping or testing. For deploying your formal non-production
    and production environments, you should use tools and services such as Ansible,
    AWS CloudFormation, or Terraform, which provide much broader support for all of
    the AWS resources you will need to run production-grade environments.
  prefs: []
  type: TYPE_NORMAL
- en: The ECS CLI includes complete documentation, which you can find at [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html).
    You can also view the ECS CLI source code and raise issues at [https://github.com/aws/amazon-ecs-cli](https://github.com/aws/amazon-ecs-cli).
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the Test Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, you should delete the test cluster you created in this chapter
    by following these steps in the ECS dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the test-cluster from Clusters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select and update the simple-web ECS service to have a desired count of 0
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait until the simple-web ECS task count falls to 0
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the test-cluster and then click the Delete Cluster button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the ECS architecture and learned about
    the core components that make up ECS. You learned how ECS clusters are a collection
    of ECS container instances, which run the Docker Engine atop EC2 autoscaling group
    instances. AWS provide you with a pre-built ECS-optimized AMI, making it very
    easy to get up and running quickly with ECS. Each ECS container instance includes
    an ECS agent, which runs as a system container and communicates with ECS, providing
    the management and control plane required to start, stop, and deploy your containers.
  prefs: []
  type: TYPE_NORMAL
- en: You next created an ECS task definition, which defines a collection of one or
    more container and volume definitions, including information such as container
    image, environment variables, and CPU/memory resource allocations. With your ECS
    cluster and ECS task definition in place, you were then able to create and configure
    an ECS service, referencing the ECS task definition to define the container configuration
    for the ECS service, and targeting one or more instances of your ECS service to
    your ECS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: ECS supports rolling deployments for updates to your container applications,
    and you were able to successfully deploy a new application change by simply creating
    a new revision of your ECS task definition and then associating the definition
    with your ECS service.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned how to use the ECS CLI to simplify the creation of ECS
    clusters and services, using Docker Compose as a generic mechanism to define task
    definitions and ECS services.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will take a closer look at the Elastic Container Registry
    (ECR) service, where you will learn how to create your own private ECR repositories
    and publish your Docker images to these repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name three ECS components required to run a long running Docker container using
    ECS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True/false: The ECS agent runs as an upstart service'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What configuration file format do you use to define infrastructure when using
    the ECS CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True/false: You can deploy two instances of an ECS task with a static port
    mapping to a single instance ECS cluster'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True/false: The ECS CLI is considered the best tool for deploying Docker environments
    to production'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What would you configure when using ECS to run a batch job that runs for 15
    minutes every night?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True/false: ECS task definitions are mutable and can be modified'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True/false: You can inspect the current status of an agent on a given Docker
    Engine by running the `curl localhost:51678` command'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the following links for more information about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ECS Developer Guide: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon ECS-Optimized AMI: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Permissions required for ECS container instances: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECS agent documentation: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_agent.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_agent.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the ECS CLI: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECS agent GitHub repository: [https://github.com/aws/amazon-ecs-agent](https://github.com/aws/amazon-ecs-agent)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECS init GitHub repository: [https://github.com/aws/amazon-ecs-init](https://github.com/aws/amazon-ecs-init)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECS CLI GitHub repository: [https://github.com/aws/amazon-ecs-cli](https://github.com/aws/amazon-ecs-cli)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
