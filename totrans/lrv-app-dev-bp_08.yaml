- en: Chapter 8. Building a Q&A Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we are going to create a Q&A web application. First, we will
    learn to remove the public segment from Laravel, to be able to use some shared
    hosting solutions. Then, we will use a third-party extension for authentication
    and process access rights. Finally, we will make a question system which will
    allow commenting and answering questions, a tag system, upvoting and downvoting,
    and choosing the best answer. We will use pivot tables for question tags. We will
    also benefit from the jQuery Ajax requests at various places. The following are
    the topics that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Removing the public segment from Laravel 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Sentry 2 and an authentication library, and setting access rights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our registration and login forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our questions table and model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our tags table with a pivot table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and processing our question form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our questions list page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our question page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our answers table and resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching questions by tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the public segment from Laravel 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In some real-world cases, you may have to stick with badly configured, shared
    web hosting solutions, which don''t have a `www`, `public_html`, or a similar
    folder. In that case, you would want to remove the public segment from your Laravel
    4 installation. To remove this public segment, there are some easy steps to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure you have a running Laravel 4 instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, move everything inside the `public` folder into the parent folder (where
    `app`, `bootstrap`, `vendor`, and other folders are present), and then delete
    the blank public folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open the `index.php` file (which we had just moved from the public folder),
    and find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous line with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, find this line in the `index.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous line with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `paths.php` file under the `bootstrap` folder, and find this
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous line with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you are using a virtual host, don't forget to change the directory settings
    and restart your web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous steps, we first moved everything from the `public` folder to
    the `parent` folder since we won't be using the `parent` segment anymore. Then
    we altered the `index.php` file to identify the proper paths of `autoload.php`
    and `start.php`, so that the framework can run. If everything went okay, you won't
    see any issues whatsoever when you refresh your page, and this means you have
    successfully removed the public segment from your Laravel 4 installation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not to forget that this method will make all your code available in the public
    web root, and this may bring security issues on your project. In that case, you
    should prevent using this method, or you should find a better web hosting solution.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Sentry 2 and an authentication library and setting access rights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be installing a third-party library for user authentication
    and access rights called Sentry 2, made available by **Cartalyst** . Cartalyst
    is a developer centric, open source company with a strong focus on documentation,
    community support, and framework. In this section, we will be following the Sentry's
    official Laravel 4 installation steps, with a simple extra step, which is currently
    available at [http://docs.cartalyst.com/sentry-2/installation/laravel-4](http://docs.cartalyst.com/sentry-2/installation/laravel-4).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your `composer.json` file, and add the following line to the `require`
    attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the composer update command to fetch the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open your `app.php` file under `app/config`, and add the following line
    to the `providers` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following line to your `aliases` array in `app.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command to install the required tables (or users) to
    the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to publish the configuration file of Sentry 2 to our `app` folder,
    so that we can manage throttling or other settings if we want to. Run the following
    command from your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we should alter the default User model to be able to use it with Sentry
    2\. Open your `User.php` file under `app/models`, and replace all its contents
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we should create our admin user. Add the following code to your `routes.php`
    file under the `app` folder and run it once. Comment out or delete the code after
    that. We are practically assigning the admin ID=1 for our system, with an access
    right called `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Doing this, you've successfully created a user with `admin@admin.com` as an
    e-mail address and `password` as the password. The password will be automatically
    hashed upon creation by Sentry 2, so we won't have to hash and salt the password
    before creation. We have set the admin's name as `John` and the surname as `Doe`.
    Also, we've set a permission for the user that we've just generated called `admin`
    to check the access right before the request processes.
  prefs: []
  type: TYPE_NORMAL
- en: You're now all set. If everything went okay and you check your database, you
    should see the migrations table generated by Laravel 4 (which you had to manually
    set before the first migration in Laravel 3) and the tables generated by Sentry
    2\. In the `users` table, you should see an entry for the user generated by our
    closure method.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our user authentication system is ready, we need to generate our filters,
    and then create registration and login forms.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom filters will help us filter requests and help us make some prechecks
    beforehand. Benefiting from the Sentry 2's built-in methods, we can define custom
    filters easily. But first we need to define some routes, which will be used in
    our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to your `routes.php` file under the `app` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In these named resources, the names are defined with the key `as` in the array,
    and the filters are set with the key `before`. As you can see, there are some
    `before` parameters, such as `is_guest` and `user`. These filters will run before
    any request is made by the user, and even call the controller. The key `uses`
    sets the controller that will be executed when the resource is called. We will
    write the code for those controllers later. As a result, for example, a user can't
    even try to post to the login form. If the user tries that, our filter will run
    and do the filtering before the request is made by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our routes are ready, we can add the filters. To add the filters,
    open your `filters.php` file under the `app` folder and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The method `Route::filter()` allows us to create our own filters. The first
    parameter is the filter's name and the second parameter is a closure function,
    which itself takes at least two parameters. If you need to provide a parameter
    to the filter, you can add this as a third parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The `check()` helper function of Sentry 2 returns a Boolean value whether the
    user is logged in or not. If it returns true, it means the user is logged in,
    else the user browsing the web page is currently not logged in. In our custom
    filter `user` and `is_guest`, we check exactly this. The passing clause of your
    filter can be left blank. But if the user fails to satisfy the filter's conditions,
    appropriate action can be taken. In our example, we are redirecting the user to
    our `index` route.
  prefs: []
  type: TYPE_NORMAL
- en: However, our third filter `access_check` is a little bit more complicated. As
    you can see, we've added a third parameter called `$right`, which we will pass
    through the calling filter. This filter checks two conditions. First, it checks
    whether the user is logged in by using the `Sentry::check()` method. Then, it
    checks whether the user has access to the `$right` section (which we will see
    when we define filters) by using the `hasAccess()` method. But this method requires
    a current logged in user first. For this, we will validate the current user's
    information by using the `getUser()` method of Sentry 2.
  prefs: []
  type: TYPE_NORMAL
- en: To pass parameter(s) while calling a filter, you can use `filter_name:parameter1,
    parameter2`. In our example, we will check whether the user is an admin, using
    the filter `access_check:admin`.
  prefs: []
  type: TYPE_NORMAL
- en: To use multiple filters in the `before` parameter, add a `|` character between
    the parameters. In our example, our login post and sign up resources' filters
    are defined as `csrf|guest` (csrf is predefined in our `filters.php` file by Laravel
    itself).
  prefs: []
  type: TYPE_NORMAL
- en: Creating our registration and login forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating our registration and login forms, we need a template to set
    the sections. I'll be using a custom HTML/CSS template that I've generated for
    this chapter, which is inspired by the **Snow** theme of the open source Q&A script,
    **Question2Answer**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We perform the following steps to create our registration and login forms:'
  prefs: []
  type: TYPE_NORMAL
- en: First, copy everything in the `assets` folder of the provided example code,
    to your project folder's root (where the `app`, `bootstrap`, and other folders
    are located), because we had removed the public folder segment in the first section
    of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following code to your `template_masterpage.blade.php` file under
    `app/views`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s dig the code:'
  prefs: []
  type: TYPE_NORMAL
- en: If we load a view with a `title` attribute, the `<title>` tag will include the
    title; else it will just display our website's name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `style()` method of the `HTML` class will help us add CSS files to our template
    easily. Also, the `script()` method of the `HTML` class allows us to add JavaScript
    to our output HTML file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have included another file to our `template_masterpage.blade.php` file using
    the `@include()` method of the Blade template engine. We will describe its sections
    in the next step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `route()` method of the `URL` class will return a link to a named route.
    This is pretty handy actually, because if we change the URL structure we won't
    need to dig into all the template files and edit all our links.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `image()` method of the `HTML` class allows us to add the `<img>` tag to
    our template.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In filters, we redirected to the route pages using the `with()` method with
    the parameter `error`. If we loaded pages (`View::make()`) using `with()`, the
    parameters would be variables. But because we have redirected the user to a page,
    these parameters passed with `with()` will be a session flashdata, which will
    only be available once. To check whether these sessions are set, we use the `has()`
    method of the `Session` class. `Session::has('sessionName')` will return a Boolean
    value to identify whether a session is set or not. If it's set, we can use the
    `get()` method of the `Session` class to use it in our views, controllers, and
    other places as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@yield()` method of the Blade template engine fetches the data present
    in `@section()`, and parses it to the master template page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous section, we included another view by calling the `@include()`
    method as `@include(''template.topmenu'')`. Now save the following code as `topmenu.blade.php`
    under `app/views/template`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s dig the code:'
  prefs: []
  type: TYPE_NORMAL
- en: In our template we have two error messages of which the first one is totally
    reserved for the login area that will be shown at the top. I've named it as `error_top`.
    With the methods `has()` and `get()` that we've just learned, we check whether
    an error is present, and display it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The top menu will depend on whether a user is logged in or not. So we create
    an `if` clause using the user checking method `check()` of Sentry 2 and check
    if the user is logged in. If the user is not logged in (guest), we show the login
    form that we've made using the `Form` class, else we show the user `infobar` with
    a profile and a **logout** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we need a registration form page. We''ve already defined its methods in
    our `routes.php` file under the `app` folder earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the route resource we''ve created, we need a controller named
    `AuthController`, having two methods called `getSignup()` and `postSignup()`.
    Now let''s first create the controller. Open your terminal and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create a new file, `AuthController.php` under `app/controllers`
    with some default methods. Delete the code present inside the `AuthController`
    class and add the following code inside that class, to make the sign up form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need a view file to make the form. Save the following code as `signup.blade.php`
    under `app/views/qa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done everything correctly, when you navigate to `chapter8.dev/signup`,
    you should see the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our registration and login forms](graphics/2111OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Validating and processing the form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we need to validate and process the form. We first need to define our
    validation rules. Add the following code to the `User` class in your `user.php`
    file under `app/models`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The rules mentioned in the previous code will make all the fields `required`.
    We set the `first_name` and `last_name` columns as `required`, and we set a minimum
    length of two characters. We set the `email` field to be in a valid e-mail format,
    and the code will check the `users` table (which is created upon installing Sentry
    2) for unique e-mail addresses. We set the `password` field to be `required`,
    and its length should be a minimum of six characters. We also set the `re_password`
    field to match the `password` field, so that we can make sure that the password
    is typed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sentry 2 can also throw a unique e-mail checking exception, upon an attempt
    to log in a user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before processing the form, we need a dummy index page to return the user after
    signing up successfully. We will create a temporary index page by performing the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, run the following command to create a new controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, remove all methods that auto inserted, and add the following method inside
    the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, save this view file as `index.blade.php` under `app/views/qa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need a controller method (which we defined in `routes.php`) to process
    the `signup` form''s `post` request. To do this, add the following code to your
    `AuthController.php` file under `app/controllers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s dig the code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we check the form items using Laravel's built-in form validation class
    using the rules we've defined in the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We check whether the form validation passes, using the `passes()` method. We
    could also check the exact opposite situation using the `fails()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the validation fails, we return the user to the **Sign Up** form with given
    credentials using `withInput()` . But by using `Input::except()`, we filter some
    columns such as `password` and `re_password`, so that the value in those fields
    are not returned. Also, by passing a parameter using `with`, the form validation's
    error message is returned. `$validation->errors()->first()` returns the first
    error message string after the form validation step.
  prefs: []
  type: TYPE_NORMAL
- en: '![Validating and processing the form](graphics/2111OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the validation passes, we create a new user using the provided credentials.
    We have set the column `activated` to `1`, so that the sign up process would not
    require an e-mail validation in our example.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sentry 2 also uses a try/catch clause to catch errors. Don't forget to check
    the documentation of Sentry 2, to learn how to catch unusual errors.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are not using an e-mail validation system, we could simply authenticate
    and sign in the user using the `authenticate()` method of Sentry 2, right after
    signing up. The first parameter takes an array of `email` and `password` (with
    `key => value` matching) and the optional second parameter takes a Boolean value
    as an input, to check whether the user is to be remembered or not (the `remember
    me` button).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the authentication, we simply redirect the user to our `index` route with
    a success message, as shown in the following screenshot:![Validating and processing
    the form](graphics/2111OS_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Processing the login and logout requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our registration system is ready, we need to process login and logout
    requests. Since our login form is already prepared, we can directly go ahead and
    process it. To process login and logout requests, we perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need the login form validation rules. Add the following code to your
    `User.php` file under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need a controller method to process the login request. Add the following
    code to your `AuthController.php` file under `app/controllers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s dig the code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we check the form items via Laravel's built-in form validation class,
    using the rules we've defined in the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we check whether the form validation has failed using the `fails()` method
    of the form validation class. If the form validation fails, we return the user
    to the `index` route with the first form validation error.![Processing the login
    and logout requests](graphics/2111OS_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `else` clause in the previous code holds the events that will be done if
    the form validation passes. In this, we authenticate a user using the try/catch
    clauses of Sentry 2, catch all the exceptions, and return an error message according
    to the type of exception.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't need all the exceptions in our example application, but as an example
    we tried to show all the exceptions, just in case you needed to do something different
    while following up.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All these try/catch exceptions are documented on the website of Sentry 2.
  prefs: []
  type: TYPE_NORMAL
- en: If no exceptions were thrown by Sentry 2, we return to the index page with a
    success message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the only thing remaining regarding authentication is the logout button.
    To create one, add the following code to the `AuthController.php` file under `app/controllers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s dig the code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we call the `logout()` method of Sentry 2, which logs the user out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we simply return the user (who is currently a guest) to the `index` route
    with a success message, telling that they have successfully logged out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that our authentication system is ready, we are ready to create our questions
    table.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our questions table and model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a fully working authentication system, we are ready to create
    our `questions` table. To create our `questions` table, we will be using a database
    migration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a migration, run the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will create a new migration under `app/database/migrations`.
  prefs: []
  type: TYPE_NORMAL
- en: For questions, we will be needing a question title, question details, the question's
    poser, the question's date, how many times a question has been viewed, total sum
    of votes, and the question's tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the migration that you''ve just created and replace its content with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: For tags, we will be using a pivot table, that's why they are not present in
    our current schema. For votes, in this example, we are simply holding an integer
    (that can be positive or negative). In a real-world application, you would want
    to use a second pivot table to keep users' votes, to prevent double voting, and
    to get a more accurate result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that your schema is ready, run the migration using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully migrating the schema, we now need a model to benefit from
    Eloquent. Save the following code as `Question.php` under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need the database relations to match tables. First, add the following
    code to your `User.php` file under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following code to your `Question.php` file under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Since a user may have more than one question, we have used the `hasMany()` method
    for the relation in our `User` model. Also, since all the questions are owned
    by the users, we have used the `belongsTo()` method to match questions to users.
    In these methods, the first parameter is the model name, which in our case is
    `Question` and `User`. The second parameter is the column name in that model to
    match the tables, which in our case is `userID`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our tags table with a pivot table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we should understand why we need pivot tables for tags. In a real world
    situation, a question may have more than one tag; also, a tag may have more than
    one question. In such situations (many to many relationships), where both the
    tables may have more than one of each other to match them properly, we should
    create and use a third pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we should create a new tags table using schema. Open your terminal and
    run the following command to create our pivot table schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to fill the table''s contents. In our example, we just need the
    tag name and tag''s friendly URL name. Replace the schema''s `up` function contents
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We have the `id` column to match questions with tags in the pivot table. We
    have a string field `tag`, which will be the title of the tag, and the column
    `tagFriendly` is what will be shown as a URL. I have also kept timestamps, so
    that, in future, it can give us information about when the tag was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, run the following command in your terminal to run the migration and
    install the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need a model for the `tags` table. Save the following file as `Tag.php`
    under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to create our pivot table. As a good practice, its name should
    be `modelname1_modelname2`, and its content sorted alphabetically. In our example,
    we have the `questions` and `tags` table, so we will set the pivot table's name
    as `question_tags` (this is not forced, you can give any name to your pivot table).
    As you may guess, its schema will have two columns to match the two tables and
    two foreign keys for these columns. You can even add additional columns to the
    pivot table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create the migration file, run the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the schema that we''ve generated in the `migrations` folder under
    `app/database` and alter its `up()` method contents with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We need two columns, and its name structure should be `modelname_id`. In our
    migration, they are `question_id` and `tag_id`. Also, we've set the foreign keys
    to match them in our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the migration and install the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to add methods to describe to Eloquent that we are using a pivot
    table. To teach the pivot information to the question model, add the following
    code to the `Question.php` file under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To describe the pivot information to the tag model, add the following code
    to the `Tag.php` file under `app/models`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter in the `belongsToMany()` method is the model name, and
    the second parameter is the pivot table''s name. Using `withTimestamps()` (which
    brings us the pivot data''s creation and updation dates) is optional. Also, if
    we had some extra data to be added to the pivot table, we could call it using
    the method `withPivot()`. Consider the following example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Now that our pivot table structure is ready, in the later chapters, we can easily
    fetch both the question's tags and all questions tagged with $`tagname` easily.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and processing our question form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our structure is ready, we can proceed to create and process our question
    form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our questions form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We perform the following steps to create our question form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need a new route resource for the question form. Open your `routes.php`
    file in the `app` folder and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our resource is defined, we need to add the resource to our top menu
    for navigation. Open your `topmenu.blade.php` file under `app/views/template`,
    and find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the previous line above the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need the controller file to handle the resources. Run the following
    command in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open the newly created `QuestionsController.php` file under `app/controllers`
    and delete all the methods inside the class. Then add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create the view we''ve just assigned. Save the following code
    as `ask.blade.php` under `app/views/qa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In addition to the previous views we had created, in this view we added a JavaScript
    code to the footer by filling the `footer_assets` section, which we defined earlier
    in our master page.
  prefs: []
  type: TYPE_NORMAL
- en: If you have done everything correctly, when you navigate to `site.com/ask`,
    you will see a form styled like the following screenshot:![Creating our questions
    form](graphics/2111OS_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that our question form is ready, we are ready to process the form.
  prefs: []
  type: TYPE_NORMAL
- en: Processing our questions form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To process the form, we need some validation rules and the controller method.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the following form validation rules to your `Question.php` file
    under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the question successfully, we would like to provide the question''s
    permalink to the user, so the user can access the question easily. But to do this,
    we first need to define a route to create this link. Add the following line into
    your `routes.php` file in the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We set two parameters into this route, `id` and `title`. The `id` parameter
    has to be a positive integer, whereas `title` should contain only alphanumeric
    characters, score, and underscore.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are ready to process the question form. Add the following code to your
    `QuestionsController.php` file under `app/controllers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s dig the code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we run the form validation class to check whether the values are valid.
    If the validation has failed, we return the user to the question page with the
    old inputs he had provided, and with the first validation error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the validation passes, we continue processing the form. We first create and
    add the question, add a new row to the database, and then we fetch the row that
    we've just created. To get the current user's ID, we use the `id` object of the
    `getUser()` method by Sentry 2, which returns the info of the current logged in
    user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the question, we check the length of the `tags` field. If the
    field is not empty, we split the string at the commas and make a raw `tags` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we loop through each of the tags that we had split, and make their
    friendly URL version using Laravel 4's `slug()` method of the `String` class.
    If the slugged version has a length, it's a valid tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After finding all the valid tags, we check the database to find whether there
    is a tag already created. If so, we get its ID. If the tag is new to the system,
    then we create a new tag. So, in this way, we avoid unnecessary multiple tags
    in our system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we use the method `attach()` to create a new tag in the pivot table.
    To attach a new relation, we first need to find the ID, which we want to attach,
    and then go to the model of the attachment and use the `attach()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our example, we need to attach the question to the tag(s). So we find the
    question, which needs to be attached, use a many-to-many relation to show that
    tags will be attached to the question, and attach the tag's `id` to the question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything goes without any problem, you should be redirected back to the
    question page with a success message and a permalink to your question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, if you check your `question_tags` table, you will see the relation data
    filled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always validate and filter the contents coming from forms, and make sure you
    are not accepting any unwanted content.
  prefs: []
  type: TYPE_NORMAL
- en: 'After successfully adding the question, you should see a page like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Processing our questions form](graphics/2111OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating our questions list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we can create questions, it''s time to fill our dummy index page with
    actual question data. To do this, open your `MainController.php` file under `app/controllers`,
    and alter the function `getIndex()` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: In this method, we loaded the same page, but we added two variables named `title`
    and `questions`. The `title` variable is the dynamic title of our application,
    and the `questions` variable holds the last two questions, with pagination. Instead
    of `get()`, if you use `paginate($number)`, you can get a ready-to-use pagination
    system. Also, using the method `with()`, we eagerly loaded the `users` and `tags`
    relations directly with the questions collection, for better performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the view, we will have a crude upvote/downvote option for the questions,
    and a route link for the questions tagged with `$tag`. For this, we will need
    some new routes. Add the following code to your `routes.php` file under the `app`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open your `index.blade.php` file under `app/views/qa`, and alter the whole
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Since we've set the relations, we can directly use `$question->users` to access
    the poser, or `$question->tags` to access the question's tags directly.
  prefs: []
  type: TYPE_NORMAL
- en: The method `links()` brings Laravel's built-in pagination system. The system
    is ready to be used with Bootstrap. Also we can alter its appearance from the
    `view.php` file under `app/config`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you followed up until here, when you navigate to your index page, after
    inserting some new questions, you will see a view like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our questions list page](graphics/2111OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we need to add functionality to the upvote and downvote buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Adding upvote and downvote functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The upvote and downvote buttons will be on almost every page in our project,
    so adding them to the master page is a better practice instead of adding and cloning
    them into each template more than once.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open your `template_masterpage.php` file under `app/views`, and
    find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code below the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we check whether the user is logged in, and whether the
    user has navigated either to the index or the details page. Then we use JavaScript
    to prevent the user from clicking on the link, and we alter the click event to
    be an Ajax `get()` request. In the next code we will fill the vote's value with
    the result, which will come from the `Ajax()` request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to write the vote update method to make it work correctly. For
    this, open your `QuestionsController.php` file under `app/controllers`, and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `getVote()` method checks whether the question is valid, and if it's valid,
    it increases or decreases its vote count by one. We didn't validate the parameter
    `$direction` here, because we've already prefiltered using regular expression
    at the resource that the value of `$direction` should either be `up` or `down`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In real-world cases, you should even store the votes in a new table and check
    whether the users' votes are unique. You should also make sure that a user votes
    only once.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our index page is ready and functioning, we can proceed to the next
    step.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our questions page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the details page, we need to show the full question to the user. Also there
    will be a place for the answers. To create our question page, we perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add the details method what we''ve defined on our route earlier.
    Add the following code to your `QuesionsController.php` file under `app/controllers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We first try to fetch the question information using tags and the poser's information.
    If the question is found, we increase the view count by one, and we simply load
    the view, and add the title and the question information to the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before displaying the view, we first need some extra routes to delete the question
    and reply to the post. To add these, add the following code to your `routes.php`
    file in the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the controller method and the routes required in the view are ready,
    we need the view to show the data to the end user. Follow the steps and add all
    the code provided further, by parts, to the `details.blade.php` file under `app/views/qa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: In the first section of the view, we extend the view file to our master page
    `template_masterpage`. Then we start to fill the code for the section `content`.
    We made two links using named routes for upvoting and downvoting that will be
    handled using Ajax. Also, since we have different styles for each voting state
    (green for a positive vote and red for a negative vote), we used an `if` clause
    and altered the opening `<div>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following code to `details.blade.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we are showing the question itself, and checking whether there
    are tags. If the `tags` object is not null (tags are present), we make a link
    with a named route for each tag, to show the questions tagged with `$tag`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following code to `details.blade.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In this section, if the end user is an admin, we show buttons to answer and
    delete questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following code to `details.blade.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we are adding the answering block to the question itself, benefitting
    from Laravel 4's built-in `Form` class. This form will only be available for logged
    in users (and for the admins, since they are also logged in users). We finish
    the section content using `@stop`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following code to `details.blade.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we fill the `footer_assets` section to add some JavaScript
    to show/hide the answer field to the users, and a confirmation box is displayed
    to the admin before deleting the question.
  prefs: []
  type: TYPE_NORMAL
- en: 'If all the steps are performed, you should have a view like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our questions page](graphics/2111OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, we need a method to delete the question. Add the following code to
    your `QuestionsController.php` file under `app/controllers`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Since we've set the related tables to cascade on deletion, we won't have to
    worry about deleting the answers and the tags while deleting a question.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are ready to post answers, we should create the answers table and
    process our answers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our answers table and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our answers table will be very similar to the current questions table, only
    that it will have fewer columns. Our answers can also be voted, and an answer
    can be marked as the best answer either by a question''s poser or an admin. To
    create our answers table and resources, we perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create the database table. Run the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the migration, which is created under `app/database/migrations`,
    and replace the `up()` function''s contents with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to benefit from the Eloquent ORM and its relations, we need a model for
    the `answers` table. Add the following code as `Answer.php` under `app/models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The answers are children of both users and questions, that's why in our model,
    we should use `belongsTo()` for users and questions to relate their tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since a question may have more than one answer, we should also add a relation
    from the `questions` table to the `answers` table (to get the data about the answers
    to your question, all of the answers to your questions, or all of my upvoted questions''
    answers). To do this, open your `Question.php` file under `app/models` and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need a controller to process the requests related to answers. Run
    the following command in the terminal to make a controller for the answers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a file `AnswersController.php` under `app/controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our answers' resource is ready, we can process the answers.
  prefs: []
  type: TYPE_NORMAL
- en: Processing the answers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we successfully created a question with tags, and
    our answers form. We now have to process the answers and add them to the database.
    There are some simple steps to follow for this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need the controller form to process the answers and add them to the
    table. To do this, open your freshly created `AnswersController.php` file under
    `app/controllers`, remove every autogenerated method inside the class, and add
    the following code inside the class definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The `postReply()` method simply checks whether the question is valid, runs a
    form validation, adds an answer owned by the question and the user to the database,
    and returns the user back to the questions page.
  prefs: []
  type: TYPE_NORMAL
- en: Now in the questions page, we also need to include the answers and the number
    of answers. But before that, we need to fetch them. There are some steps to do
    this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, open your `QuestionsController.php` file under `app/controllers`, and
    find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous line with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, find the following line in the `MainController.php` file under `app/controllers`,
    and find this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous line with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open your `index.blade.php` file under `app/views/qa`, and find the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous code with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: In this alteration, we added a PHP code and a loop, checking each answer if
    it's an accepted one. And if it is, we change the `div` holder class. Also we
    added a feature to show the number of answers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need the route resources defined to answer upvoting and downvoting
    and choose the best answer. Add the following code into your `routes.php` file
    under the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to display the answers in the question details page so that the
    users can see the answers. To do this, open the `details.blade.php` file under
    `app/views/qa`, and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous line with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Now find the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code above the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The current structure of answers is very close to the questions structure, which
    we had created earlier in this chapter. In addition, we have a button to choose
    the best answer, which is shown only to the poser of the question and to the admin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need a confirmation button in the same view. For this, add the following
    code to the `footer_assets` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need a method to increase or decrease the votes of the answers. Add
    the following code to your `AnswersController.php` file under `app/controllers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The `getVote()` method is exactly the same as the questions voting method. The
    only difference here is that, instead of the question, the answers are affected.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the best answer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need a processing method to choose a selected answer as the best answer.
    To choose the best answer, we perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `AnswersController.php` file under `app/controllers`, and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we first check whether the answer is a valid answer. Then,
    we check whether the user who has clicked on the **best answer** button is either
    the poser of the question or the application's administrator. After that, we mark
    all the answers of the question as unchecked (we erase all the best answer information
    to the answers of the question), and mark the chosen answer as the best answer.
    And finally, we return the form with a success message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need a method to delete the answers. For this, first we need a route.
    Open your `routes.php` file under `app` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, find the following code in the `details.blade.php` file under `app/views/qa`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code below the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need the controller method to delete an answer. Add the following code
    to the `AnswersController.php` file under `app/controllers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done everything correctly, the final version of our details page
    would look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing the best answer](graphics/2111OS_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that everything is ready to ask questions, answer, mark the best answer,
    and delete, only one thing is missing in our application, tag searching. As you
    know, we've made all the tags as links, so we should now process their routes.
  prefs: []
  type: TYPE_NORMAL
- en: Searching questions by the tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our main page and details page, we''ve given all the tags a special link.
    We will perform the following steps to search questions by the tags:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your `QuestionsController.php` file under `app/controllers`, and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: What this code does is, it first searches for a tag using the column `tagFriendly`,
    which gives a unique result. So, we can safely return the first result using `first()`.
    Then we check whether the tag is present in our system. If not, we return the
    user to the index page with an error message stating that the tag has not been
    found.
  prefs: []
  type: TYPE_NORMAL
- en: If the tag is found, using the relations we've defined, we catch all the questions
    tagged using that tag, and we use eager loading to load the users, tags (all of
    the tags of the questions), and answers (although we don't show the answers on
    this page, we need a count of them to display it on the page). Our view would
    be exactly the same as the index page's view. So instead of creating a new one,
    we've directly used that view.
  prefs: []
  type: TYPE_NORMAL
- en: We've kept the pagination limit to two, just to show that it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to allow JavaScript assets on the page (such as enabling Ajax upvoting
    and downvoting), open your `template_masterpage.php` file under `app/views`, and
    find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous code with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: This way, we allow these Ajax events even on pages having the route named `tagged`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have done everything correctly, and if you click on a tag''s name, a
    page like this will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching questions by the tags](graphics/2111OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've used various features of Laravel 4\. We've learned to
    remove the public segment, to make Laravel work on some of the shared hosting
    solutions. We've also learned the basics of Sentry 2, a powerful authentication
    class. We've learned how to use many-to-many relationships and pivot tables. We've
    also used the belongs-to and has-any relationships using Eloquent ORM. We defined
    all our URLs, form actions, and links with routes using resources. So if you need
    to change the application's URL structure (let's say you need to change your website
    to German, and the German for question is frage), you only need to edit `routes.php`.
    So this way, you won't have to dig each file to fix the links. We've used the
    pagination class to navigate through records, and we've also used the Laravel
    Form Builder Class.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be developing a fully featured e-commerce website
    using everything we've learned so far.
  prefs: []
  type: TYPE_NORMAL
