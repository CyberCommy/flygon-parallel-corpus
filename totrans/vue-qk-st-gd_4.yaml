- en: Filters and Mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will show how we can use filters to change what gets rendered
    on the screen without changing the underlying data. We'll also cover mixins, a
    practical way to extend components and adhere to the DRY rule of programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, in this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using filters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with global and local filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing conditional directives with filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaining filters together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Working with mixins:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding code duplication inside mixin methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using data option to add more functionality to our mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Employing life cycle hooks in mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A filter is just a function. It takes some data (passed in as an argument to
    the filter function), and performs some simple operations on that data. The result
    of the operations performed is returned from the filter function and displayed
    in the appropriate place in the app. It's important to note that filters do not
    affect the underlying data; they only affect the way that data is displayed on
    the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like components, filters too can be registered as either global or local.
    The syntax for registering a global filter is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides global registration, we can also register a filter locally, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As we can see here, in case of local registration, filters are added as an option
    to a Vue component.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a filter that rounds up student grades
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that we have a friend who is a professor, and they need some help
    with their students' tests. A test that students take is set up in such a way
    that it always produces a score in the form of a decimal number. The range of
    points a student can get on that test is between 0 and 100.
  prefs: []
  type: TYPE_NORMAL
- en: Being the good friend that we are, we will make a simple Vue app with a filter
    that rounds up decimal scores to full numbers. We will also err on the side of
    the student, meaning we will always round up the result.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this example is available at [https://codepen.io/AjdinImsirovic/pen/MqBNBR](https://codepen.io/AjdinImsirovic/pen/MqBNBR).
  prefs: []
  type: TYPE_NORMAL
- en: 'The function for our filter is going to be very simple: it will take in a float
    and return a rounded up integer based on the received float. The filter function
    will be called `pointsRoundedUp`, and it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Hence our `pointsRoundedUp` function takes in the `points` instance from our
    app's `data()` function, and returns those `points` instance with JavaScript's
    built-in `parseFloat()` and `Math.ceil()` functions called on the `points` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a filter in our HTML, we employ the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `points` value is the actual data stored in the app. `pointsRoundedUp` is
    the filter that we use to format the data we receive from our Vue component's
    data option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, we could say that the underlying logic of all filters is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This general principle could be read like this: to format the data that gets
    returned, we follow it up with a pipe symbol (`|`) and then we call a specific
    filter on that data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the full code of our app. The HTML will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The JS will be simple too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The app will output the following on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The app is now complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, after some time, our friend asks us for another favor: to calculate
    the student''s grade based on the points. Initially, we realize that it will be
    just a tiny calculation, which we can simply fit into conditional directives.'
  prefs: []
  type: TYPE_NORMAL
- en: The code for the updated example can be found here: [https://codepen.io/AjdinImsirovic/pen/XPPrEN](https://codepen.io/AjdinImsirovic/pen/XPPrEN).
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, what we did in this new example is we extended our HTML with several
    conditional directives. Although this solves the problem, we have cluttered our
    HTML, while our JS has remained unchanged. The updated HTML code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Our problem is solved. The points for this test are 94.44, and the app successfully
    prints out the following information to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: However, we realize that our HTML is now cluttered. Luckily, we can utilize
    filters to make things less messy.
  prefs: []
  type: TYPE_NORMAL
- en: Using filters as a replacement for conditional directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will employ a filter to return the proper grade for our
    student.
  prefs: []
  type: TYPE_NORMAL
- en: The code for the updated app is available here: [https://codepen.io/AjdinImsirovic/pen/LJJPKm](https://codepen.io/AjdinImsirovic/pen/LJJPKm).
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes we made to this version of the app''s HTML are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We moved the conditional functionality to our JavaScript, namely, to a new
    filter we named `pointsToGrade`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As a quick test that our updated code works, we have also changed the points
    to 84.44, which successfully returns the B grade from the `pointsToGrade` filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, not entirely unexpectedly, our friend returns again, and asks us for
    yet another favor: to extend the app yet again. This time, we need to display
    a properly formatted name of our student, in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that we''ll have to expand our app with additional functionality.
    Luckily, that won''t be hard because we can employ another nice feature of filters:
    chaining.'
  prefs: []
  type: TYPE_NORMAL
- en: Chaining filters in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The requirements for our app have been updated, and now we need to show some
    additional, nicely formatted data on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Since the requirements have changed, we also need to update the data.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this section is available at this pen: [https://codepen.io/AjdinImsirovic/pen/BOOazy](https://codepen.io/AjdinImsirovic/pen/BOOazy).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the updated JavaScript. To begin, we''ll add the `el` and `data` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in JS, we''ll add the filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated HTML looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With these chained filters, we achieved the correct formatting of the student''s
    name by virtue of taking the data (which appeared in all CAPS) and piping it through
    two filters: `toLowerCase` and `capitalizeFirstLetter`.'
  prefs: []
  type: TYPE_NORMAL
- en: We can also see a commented-out paragraph that shows an unsuccessful approach
    that capitalizes only the first letter of the last name, but not the first letter
    of the first name. The reason for this is the `firstAndLastName` filter which,
    when applied, combines the full name into a single string.
  prefs: []
  type: TYPE_NORMAL
- en: Note that filters are not cached, which means that they will be always run,
    just like methods.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on filters, refer to the official documentation at [https://vuejs.org/v2/guide/filters.html](https://vuejs.org/v2/guide/filters.html).
  prefs: []
  type: TYPE_NORMAL
- en: Working with mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixins are a way for us to abstract out reusable functionality in our Vue code.
    Made popular in the frontend world by Sass, the concept of mixins is now present
    in a number of modern JavaScript frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins are best used when we have some functionality that we would like to reuse
    across a number of components. In the example that follows, we will create a very
    simple Vue app, which will show two Bootstrap alerts on the page. When a user
    clicks on either of the alerts, the browser's viewport dimensions will be logged
    out to the console.
  prefs: []
  type: TYPE_NORMAL
- en: For this example to work, we will need to get some plain HTML components from
    the Bootstrap framework. Specifically, we will use the alert component.
  prefs: []
  type: TYPE_NORMAL
- en: The official documentation on this Bootstrap component can be found at this
    link: [https://getbootstrap.com/docs/4.1/components/alerts/](https://getbootstrap.com/docs/4.1/components/alerts/).
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that Bootstrap components and Vue components are different
    things and should not be confused.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app, when run, will produce this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e09d84d6-6887-4b67-b0b4-470f14216b0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code for this example can be found here: [https://codepen.io/AjdinImsirovic/pen/jvvybq](https://codepen.io/AjdinImsirovic/pen/jvvybq).'
  prefs: []
  type: TYPE_NORMAL
- en: Building a simple app with repetitive functionality in different components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin, let''s build our simple HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using Bootstrap''s CSS classes of `container` and `mt-4`. The regular
    HTML `h1` tag also gets some Bootstrap-specific styling. We are also using two
    Vue components in the previous code: `primary-alert` and `warning-alert`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our JavaScript code, we define these two components as `primaryAlert` and
    `warningAlert`, and then we list them in the `components` option of their parent
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, still in JS, we can specify the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result of this little app, open the console and click on either
    of the two alert components. The console output will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the JavaScript code, we are also defining a `viewportSizeOnClick`
  prefs: []
  type: TYPE_NORMAL
- en: method inside the `methods` option of both the `primaryAlert` and `warningAlert`
    components. This unnecessary repetition in functionality is a perfect candidate
    for abstracting into a mixin, which we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Staying DRY with mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for the improved app is available here: [https://codepen.io/AjdinImsirovic/pen/NLLgWP](https://codepen.io/AjdinImsirovic/pen/NLLgWP).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, while our HTML stays completely the same, the updated JavaScript
    code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As can be seen here, we have erased the `methods` option from both components
    and added a new object named `viewportSize`. Inside this object, we have moved
    the shared `methods` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `methods` option holds only the `viewportSizeOnClick` function.
  prefs: []
  type: TYPE_NORMAL
- en: As a side note, the `vieportSizeOnClick` method's name is slightly misleading.
    If you look at the code for the second component (the `warningAlert` component)
    a bit closer, you'll notice that we updated the directive so it is using `v-on:mouseenter`,
    rather than `v-on:click`. This means that the name of the method will need to
    be changed to something more suitable. Therefore, we will rename the method to
    `logOutViewportSize`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, let's imagine that we want another way to display the viewport information.
    For example, we might show it in an alert box rather than logging it to the console.
    That's why we'll introduce another method, `alertViewportSize`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With all of these little changes accumulating, it is a good time to see another,
    updated version of our little app. The new pen can be found at this URL: [https://codepen.io/AjdinImsirovic/pen/aaawJY](https://codepen.io/AjdinImsirovic/pen/aaawJY).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the previous updates, again the updated example only has changes
    made to the JS, as follows. We begin with `viewportSize`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll set up the alerts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s wrap it up with specifying the Vue constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will look at how we can further improve our mixins by
    refactoring them.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring our viewportSize mixin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at ways to further improve our mixins. While our
    code is both readable and easy to grasp, we have some code duplication in `const`
    declarations. Also, we will use this opportunity to look at ways of approaching
    mixin refactoring. The updated code will include some basic event handling.
  prefs: []
  type: TYPE_NORMAL
- en: For the list of available events, refer to this link: [https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events).
  prefs: []
  type: TYPE_NORMAL
- en: Since we will also use JavaScript's built-in `addEventListener()` method, it
    would also be good to get more information about it on MDN, at the following URL: [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin refactoring, we will utilize the ability of mixings to plug
    into the life cycle functionality of Vue (just like components do). Additionally,
    in this iteration of our mixin, we introduce another option besides `methods` in
    the mixin itself. The option we use is `data`. Effectively, to avoid having to
    duplicate `const` declarations inside the `methods` option of our mixin, we will
    store the values to work with inside the `data` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the HTML still remains unchanged, our JavaScript file will look quite
    different. Let''s begin by setting up the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll add methods, namely `getViewportSize`, `logOutViewportSize`, and
    `alertViewportSize`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add `created`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can set up `primaryAlert`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll continue by adding `warningAlert`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add the Vue constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The code for this section is available in the following code pen: [https://codepen.io/AjdinImsirovic/pen/oPPGLW](https://codepen.io/AjdinImsirovic/pen/oPPGLW).
  prefs: []
  type: TYPE_NORMAL
- en: The options we have in our refactored mixin are `data`, `methods`, and `created`.
    The `created` function is a life cycle hook, and we use this hook to listen for
    `mousemove` events. When such an event occurs, we run the `this.getViewportSize`
    method of our mixin, which updates the viewport dimensions that get either logged
    out or shown in an alert box.
  prefs: []
  type: TYPE_NORMAL
- en: Never use global mixins! Global mixins affect all of the components of your
    apps. There are not that many use cases for such a scenario, so usually it is
    best to avoid using global mixins.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we conclude our brief discussion of mixins in Vue. For more information
    on the subject, visit this official link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://vuejs.org/v2/guide/mixins.html](https://vuejs.org/v2/guide/mixins.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at filters and mixins in Vue. We discussed the situations
    in which using filters would make sense, and we looked at using global and local
    filters. We also discussed how filters can be used to replace conditional directives,
    and we examined how to pipe filters together.
  prefs: []
  type: TYPE_NORMAL
- en: We also explored how to abstract reusable functionality by moving it from components
    to mixins, and we looked at ways to avoid code duplication inside mixins themselves.
    We wrapped it up with an example of using life cycle hooks inside our mixins.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at building our own custom directives.
  prefs: []
  type: TYPE_NORMAL
