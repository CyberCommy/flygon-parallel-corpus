- en: '[*Chapter 5*](B17385_05_Final_PD_ePub.xhtml#_idTextAnchor052): Installing Skaffold
    and Demystifying Its Pipeline Stages'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took a deep dive into Skaffold's architecture and
    workflow. We also looked at Skaffold's configuration. This chapter will cover
    how to install Skaffold on different operating systems, such as Linux, Windows,
    and macOS. We will also explore common CLI commands and how to use these commands
    in Skaffold's different pipeline stages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Skaffold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding common CLI commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Skaffold's pipeline stages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with Skaffold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will know how to install Skaffold on different
    platforms. You will also gain a solid understanding of the most used CLI commands
    for Skaffold.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples of this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Skaffold CLI ([https://skaffold.dev/docs/install/](https://skaffold.dev/docs/install/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minikube ([https://minikube.sigs.k8s.io/docs/](https://minikube.sigs.k8s.io/docs/))
    or Docker Desktop for macOS and Windows ([https://www.docker.com/products/dockerdesktop](https://www.docker.com/products/dockerdesktop))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Skaffold
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Skaffold, being a CLI tool, needs to be downloaded and installed first on your
    favorite operating system. The following are the supported platforms where you
    can download and install Skaffold:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss these options in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Skaffold on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Linux, you can use the following URLs to download the latest stable release
    of Skaffold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64](https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-arm64](https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-arm64)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After downloading the binary, you can add it to your `PATH` variable. Alternatively,
    you can use the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Linux on AMD64, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For Linux on ARM64, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There is also a bleeding-edge version of Skaffold, which is built with the latest
    commit. It may not be a stable version, so be careful while working with it. You
    can use the following URLs to download the bleeding edge version of Skaffold.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Linux on AMD64, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For Linux on ARM64, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at the commands for installing Skaffold on the Linux
    **operating system** (**OS**).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Skaffold on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For macOS, you can use the following URLs to download the latest stable release
    of Skaffold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://storage.googleapis.com/skaffold/releases/latest/skaffold-darwin-amd64](https://storage.googleapis.com/skaffold/releases/latest/skaffold-darwin-amd64)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://storage.googleapis.com/skaffold/releases/latest/skaffold-darwin-arm64](https://storage.googleapis.com/skaffold/releases/latest/skaffold-darwin-arm64)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After downloading the binary, you can add it to your `PATH` variable. Alternatively,
    you can use the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS on AMD64, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS on ARM64, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To download the build with the latest commit, you can use the following commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS on AMD64, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS on ARM64, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For macOS specifically, you can download Skaffold using the following package
    managers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Homebrew, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For MacPorts, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we explored various commands for installing Skaffold on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Skaffold on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Windows, you can use the following URL to download the latest stable release
    of Skaffold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://storage.googleapis.com/skaffold/releases/latest/skaffold-windows-amd64.exe](https://storage.googleapis.com/skaffold/releases/latest/skaffold-windows-amd64.exe)'
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the EXE file, you can add it to your `PATH` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the build with the latest commit, you can use the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://storage.googleapis.com/skaffold/builds/latest/skaffold-windows-amd64.exe](https://storage.googleapis.com/skaffold/builds/latest/skaffold-windows-amd64.exe)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows specifically, you can download Skaffold using the following Chocolatey
    package manager command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Installing Skaffold on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Installing Skaffold on Windows
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is a known issue (https://github.com/chocolatey/shimgen/issues/32) with
    the `skaffold dev` command where Skaffold doesn't clean up deployments when you
    press *Ctrl* + *C* on Windows when installed with Chocolatey package manager.
    The problem is not related to Skaffold but how Chocolatey interferes with *Ctrl*
    + *C* handling during installation.
  prefs: []
  type: TYPE_NORMAL
- en: This section covered how to install Skaffold on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Skaffold using Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also download and run Skaffold inside a Docker container. To do that,
    you can use the following `docker run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with an edge build with the latest commit, you can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'I want to highlight one point regarding using a docker image for Skaffold.
    The Docker image''s size is around ~3.83 GB, and this seems ridiculously large
    for Skaffold since in [*Chapter 3*](B17385_03_Final_PD_ePub.xhtml#_idTextAnchor034),
    *Skaffold – Easy-Peasy Cloud-Native Kubernetes Application Development*, we learned
    that Skaffold''s binary size is around ~63 MB. This can be seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Skaffold Docker image size'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Skaffold Docker image size
  prefs: []
  type: TYPE_NORMAL
- en: So, why is the image size so large? This is because the image contains other
    tools as well, such as the gcloud SDK, kind, minikube, k3d, kompose, and bazel,
    to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: You can verify what's inside your container image using the Dive CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Dive allows you to check your image layer's contents and suggest different ways
    to shrink your image's size if you are wasting any space.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download Dive by following the instructions at [https://github.com/wagoodman/dive#installation](https://github.com/wagoodman/dive#installation).
    Run the following command to get an inside view of your container image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output for the Skaffold docker image, which contains an
    image layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Skaffold Docker image layers'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Skaffold Docker image layers
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the layers inside the image, we have many tools available,
    not just Skaffold. Another advantage of using this Docker image is that you don't
    have to install these tools separately, and you can use the same image to play
    or experiment with these tools.
  prefs: []
  type: TYPE_NORMAL
- en: This section covered how to install Skaffold using a Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Skaffold using gcloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google developed Skaffold, so it nicely fits into the Google products ecosystem.
    If you have **Google's Cloud SDK** installed on your machine, you can use the
    `gcloud components install skaffold` command to install Skaffold.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover how to install the gcloud SDK in [*Chapter 8*](B17385_08_Final_PD_ePub.xhtml#_idTextAnchor099),
    *Deploying a Spring Boot Application to Google Kubernetes Engine Using Skaffold*.
    For now, we can assume that the Cloud SDK is already installed. You can view the
    installed and not installed components using the `gcloud list` command. The following
    is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – gcloud list command output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – gcloud list command output
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding output, it is clear that Skaffold is not installed. It is
    not mandatory but before we move on to the installation, make sure that `gcloud`
    has been installed and that its components are up to date. We can run the following
    command to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can install Skaffold using the following `gcloud` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Installing Skaffold via gcloud'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Installing Skaffold via gcloud
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed different ways to install Skaffold. Now, let's
    discuss the Skaffold CLI commands.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding common CLI commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have introduced you to commands such as `skaffold dev` and `skaffold
    run`, but there are many such commands that you can use to either create an end-to-end
    pipeline or use individually in your CI/CD pipelines. We will categorize these
    commands into the following sections. You can also discover the supported options
    for these commands by enabling the `skaffold completion bash/zsh` command and
    pressing *Tab* after entering the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Commands for end-to-end pipelines**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold run`: This command allows you to build and deploy once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold dev`: This command allows you to trigger the continuous development
    loop for build and deploy. This workflow will clean up on exit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold debug`: This command allows you to trigger the continuous development
    loop for build and deploy pipelines *in debug mode*. This workflow will also clean
    up on exit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commands for CI/CD pipelines**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold build`: This command allows you to just build, tag, and push your
    image(s).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold test`: This command allows you to run tests against your built application
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold deploy`: This command allows you to deploy the given image(s).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold delete`: This command allows you to clean up the deployed artifacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold render`: This command allows you to build your application images
    and then export the hydrated (with a newly built image tag) Kubernetes manifests
    to a file or terminal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold apply`: This command takes templated Kubernetes manifests as input
    and creates resources on the target cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commands for getting started**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffod init`: This command allows you to bootstrap the Skaffold config.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold fix`: This command allows you to upgrade the schema version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Miscellaneous commands**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold help`: This command allows you to print help. Use `skaffold options`
    to get a list of global command-line options (this applies to all commands).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold version`: This command allows you to get Skaffold''s version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold completion`: This command allows you to set up tab completion for
    the CLI. It supports the same options as `skaffold version`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold config`: This command allows you to manage context-specific parameters.
    It supports the same options as `skaffold version`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold credits`: This command allows you to export third-party notices to
    a given path (`./skaffold-credits` by default). It supports the same options as
    `skaffold version`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold diagnose`: This command allows you to run diagnostics of Skaffold
    works in your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skaffold schema`: This command allows you to list and print JSON schemas used
    to validate `skaffold.yaml` configuration. It supports the same options as `skaffold
    version`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we talked about Skaffold commands and their usage. In the next
    section, we will try to understand Skaffold's different pipeline stages.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Skaffold pipeline stages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have built a basic understanding of how Skaffold works. From the
    previous chapters, we know that it picks source code changes in your project and
    creates container images with the tool of your choice; the images, once successfully
    built, are tagged as you see fit and pushed to the repository you specify. Skaffold
    also helps you deploy the artifacts to your Kubernetes cluster at the end of the
    workflow, once again using the tools you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Skaffold permits you to skip stages. If, for example, you run Kubernetes locally
    with Minikube or Docker desktop, Skaffold is smart enough to make that choice
    for you and will not push artifacts to a remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at Skaffold''s pipeline stages in detail to understand what other
    choices we have in each pipeline stage. Skaffold pipeline stages can be broadly
    classified into the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Init
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log tailing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port forwarding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleanup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss each in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Init stage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this stage, we typically generate a basic Skaffold configuration file to
    get your project up and running in seconds. Skaffold looks at your project directory
    for any build configuration files, such as `Dockerfile`, `build.gradle`, and `pom.xml`,
    and then auto-generates a build and deploy config.
  prefs: []
  type: TYPE_NORMAL
- en: 'Skaffold currently supports build detection for the following builders:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buildpacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Skaffold detects multiple build configuration files, it will prompt you to
    pair your build configuration files with any images that have been detected in
    your deploy configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Skaffold v1.27.0, you no longer have to provide the `XXenableJibInit`
    or `XXenableBuildpacksInit` flag with the `skaffold init` command as their default
    values are set to `true`. This also means that the `init` command will detect
    if you should use Jib or Buildpacks based upon your project, without the need
    to specify these flags.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you might be asked to choose from the following after you run
    the `skaffold init` command. In this example, we have a `Dockerfile` in the root
    directory, so Skaffold is asking you to choose the build configuration for this
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – skaffold init prompt'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – skaffold init prompt
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, for deployment, Skaffold will look at your project directory and
    if it detects some Kubernetes manifests – that is, `deployment.yaml` or `sevice.yaml`
    – is already present, then it will automatically add those to the `deploy` section
    of the `skaffold.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Generating a Skaffold configuration file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Generating a Skaffold configuration file
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have the manifests ready but want Skaffold to handle the manifest
    generation part, then don't worry – you can pass the `--generate-manifests` flag
    with the `skaffold init` command.
  prefs: []
  type: TYPE_NORMAL
- en: Build stage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Skaffold supports various tools for image building.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the following table, you can understand that image building can be done
    locally, in a cluster, or using Google Cloud Build remotely:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 5.1– Skaffold supported container image builders'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 5.1– Skaffold supported container image builders
  prefs: []
  type: TYPE_NORMAL
- en: We will learn more about these options in [*Chapter 6*](B17385_06_PreFinal_PD_ePub.xhtml#_idTextAnchor074),
    *Working with Skaffold Container Image Builders and Deployers*. In a cluster,
    builds are supported by kaniko or using a custom script. Remote builds are only
    supported for Dockerfile, Jib, and Buildpacks using Cloud Build. For a local build,
    you can pretty much use any of the supported image building methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set a build configuration through the `build` section of the `skaffold.yaml`
    file. The following is an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have covered the build stage, next, we will take a look at the tag
    stage.
  prefs: []
  type: TYPE_NORMAL
- en: Tag stage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Skaffold supports the following image tagging strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: Tagging is available through `the gitCommit tagger`, which utilizes Git commits
    to tag images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tagging is available through `the sha256 tagger`, which uses the latest tag
    to tag images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tagging is available through `the envTemplate tagger`, which uses **Environment
    Variables** to tag images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tagging is available through `the dateTime tagger`, which accepts the current
    **Date and Time** with a configurable pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tagging is available through `the customTemplate tagger`, which uses a combination
    of the existing taggers as components in a template.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An image tagging strategy can be configured using the `tagPolicy` field in
    the `build` section of `skaffold.yaml`. If no `tagPolicy` is specified, then the
    default is the `gitCommit` strategy. Please refer to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know about the different image tagging strategies with Skaffold,
    we will go through the test stage.
  prefs: []
  type: TYPE_NORMAL
- en: Test stage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Skaffold has an integration testing phase between build and deploy. It supports
    container structure tests and custom tests for integration testing. Let's discuss
    them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Container structure test
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Skaffold provides support for running container structure tests (https://github.com/GoogleContainerTools/container-structure-test)
    on container images we build with Skaffold. The Container Structure Test framework
    primarily aims to verify the contents and structure of the container. For example,
    we may want to run some command inside a container to test whether it gets executed
    successfully or not. We can define tests per image in the Skaffold config. After
    building the artifact, Skaffold will run the associated structure tests on that
    image. If the tests fail, Skaffold will not proceed with the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Custom test
  prefs: []
  type: TYPE_NORMAL
- en: With a Skaffold custom test, developers can run custom commands as part of their
    development loop. The custom test will run before deploying the image to the Kubernetes
    cluster. The command will execute on the local machine where Skaffold is being
    executed and works with all supported Skaffold platforms. You can opt out of running
    custom tests by using the `--skip-tests` flag. You can run tests individually
    with the `skaffold test` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the use cases for a custom test:'
  prefs: []
  type: TYPE_NORMAL
- en: Running unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running validation and security scans on images using GCP Container Analysis
    or Anchore Grype
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also validate Kubernetes manifests before deployment using tools like
    **kubeval** ([https://github.com/instrumenta/kubeval](https://github.com/instrumenta/kubeval))
    or **kubeconform** ([https://github.com/yannh/kubeconform](https://github.com/yannh/kubeconform)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of Helm charts, we can use the **helm lint** command before deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, we have a profile named `test` and we are using the
    `mvn test` command to run various tests. We will be using the `skaffold dev --profile=test`
    command here, which runs tests after the build and before deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the logs, you will see the following, which states that the tests have been
    started and that there are no failures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have learned how we can execute custom tests with Skaffold. In
    the deploy stage, we will learn about deploying an application with Skaffold.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy stage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Skaffold deploy stage typically renders the Kubernetes manifests by replacing
    the untagged image names in the Kubernetes manifests with the final tagged image
    names. It also might go through the additional intermediary step of expanding
    templates for helm or calculating overlays for kustomize. Then, Skaffold will
    deploy the final Kubernetes manifests to the cluster. And to make sure the deployment
    happens, ideally, it will wait for the deployed resources to stabilize by doing
    health checks.
  prefs: []
  type: TYPE_NORMAL
- en: Health checks are enabled by default and are a great feature for your CI/CD
    pipeline use cases to make sure that deployed resources are healthy and we can
    proceed further in the pipeline. Skaffold internally uses the `kubectl rollout
    status` command to test the status of the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the following logs, you can see that Skaffold waited for the
    deployment to stabilize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Skaffold currently supports the following tools for deploying applications
    to local or remote Kubernetes clusters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kustomize`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can set the deploy configuration through the `deploy` section of the `skaffold.yaml`
    file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have learned how we can deploy an image to Kubernetes using Skaffold.
    Next, we will explore how to sync changes directly to a pod without rebuilding
    and redeploying an image using file sync.
  prefs: []
  type: TYPE_NORMAL
- en: File sync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Skaffold has a great feature through which it can copy the changed files to
    a deployed container, without the need to rebuild, redeploy, and restart the corresponding
    pod. We can enable this file copying feature by adding a `sync` section with sync
    rules to the artifact in the `skaffold.yaml` file. Internally, Skaffold creates
    a `.tar` file with changed files that match the sync rules we define in the `skaffold.yaml`
    file. Then, this `.tar` file is transferred to and extracted inside the corresponding
    containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Skaffold supports the following types of sync:'
  prefs: []
  type: TYPE_NORMAL
- en: '`manual`: In this mode, we need to specify the source file path from the local
    and destination path of the running container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`infer`: In this mode, Skaffold will infer the destination path by looking
    at your Dockerfile. Under sync rules, you can specify which files are eligible
    for syncing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto`: In this mode, Skaffold will automatically generate sync rules for the
    known file types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand the **file sync** functionality, we will use the Spring Boot application
    that we built in [*Chapter 3*](B17385_03_Final_PD_ePub.xhtml#_idTextAnchor034),
    *Skaffold – Easy-Peasy Cloud-Native Kubernetes Application Development*. The Spring
    Boot application exposes a `/states` REST endpoint that will return all Indian
    states and their capitals. We have added a new profile named sync to the `skaffold.yaml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following `skaffold.yaml` file, we have used `jib` as an image builder.
    Jib integration with Skaffold allows you to auto-sync your class files, resource
    files, and Jib''s extra directories files to a remote container once changes have
    been made. However, it can only be used with Jib in the default build mode (exploded)
    for non-WAR applications because of some limitations. You also need to have the
    Spring Boot Developer Tools dependency in your project for this to work. It will
    also work with any embedded server that can do a reload or restart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Spring Boot application, we deliberately made a mistake by changing
    the name of Bengaluru to Bangalore. In the output, you will see the following
    after running the `skaffold dev --profile=sync` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Output before sync'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.9.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Output before sync
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, since we have Jib''s auto-sync set to `true`, any changes that are made
    to the `schema.sql` file will be directly synced with the pod running inside the
    Kubernetes cluster. We made changes in the `schema.sql` file, and they were synced
    directly with a running pod by just restarting the application. Here, we don''t
    have to rebuild the image, push the image, redeploy the image, or restart the
    pod. You will see the following output in the streamed logs on your console after
    you make this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'After hitting the URL again, you will see the changed output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Output after sync'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Output after sync
  prefs: []
  type: TYPE_NORMAL
- en: '`schema.sql` was under our resources, so let''s see whether, when we make changes
    to a Java class file, those will also be synced. Let''s try it out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this, I will tweak the logging statement we have in the `StateController`
    class. We have the following log statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We will change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After making these changes, you should see the following in the streamed logs
    on your console. You might be wondering why five files have been synced since
    we only changed one file. Well, the reason for this is that Jib transferred the
    entire layer, which contains your class file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, in the streamed logs, we will see the changed logging statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have learned about the direct file sync capabilities of Skaffold.
    Now, let's understand how we can tail logs with various Skaffold commands.
  prefs: []
  type: TYPE_NORMAL
- en: Log tailing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Skaffold can tail logs for containers that have been built and deployed by it.
    With this feature, you can tail logs from your cluster to your local machine when
    you execute `skaffold dev`, `skaffold debug`, or `skaffold run`.
  prefs: []
  type: TYPE_NORMAL
- en: Log tailing is enabled for the `skaffold dev` and `skaffold debug` modes by
    default. For skaffold `run`, you can use the `–tail` flag to explicitly enable
    log tailing.
  prefs: []
  type: TYPE_NORMAL
- en: For a typical Spring Boot application, you will see the following in the tail
    logs after you've built and deployed it using `skaffold dev`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following log, you can see that after successfully building and deploying
    to the cluster, the application logs are streamed to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we know how we can tail logs from a running container with Skaffold.
    Next, let's discuss port forwarding with Skaffold.
  prefs: []
  type: TYPE_NORMAL
- en: Port forwarding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Skaffold supports automatic port forwarding of services and user-defined port
    forwards in dev, debug, deploy, or run mode. You don't have to expose an endpoint
    to access your application. Port forwarding is helpful for local development.
    Skaffold uses `kubectl port-forward` internally to implement port forwarding.
    You can define your custom port forward explicitly in `skaffold.yaml` or pass
    the `--port-forward` flag while running `skaffold dev`, `debug`, `run`, or `deploy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of user-defined port forwarding. In this example,
    Skaffold will try to forward port `8080` to `localhost:9000`. If port `9000` is
    unavailable for some reason, then Skaffold will forward to a random open port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It is good practice to clean up the resources we create using Skaffold after
    our work is completed. Now, let's learn how we can clean up and delete Kubernetes
    resources with Skaffold.
  prefs: []
  type: TYPE_NORMAL
- en: Cleanup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the `skaffold run` and `skaffold dev` commands, we can create resources
    in the Kubernetes cluster, create images stored on the local Docker daemon, and
    sometimes push images to remote registry. Doing all this work can have side effects
    on your local and deployment environments, in that you might fill up a significant
    amount of disk space in your local environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Skaffold provides a cleanup functionality to neutralize some of these side
    effects:'
  prefs: []
  type: TYPE_NORMAL
- en: You can clean up Kubernetes resources by running `skaffold delete`, or perform
    an automatic cleanup by using *Ctrl* + *C* for `skaffold dev` and `skaffold debug`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can enable image pruning for local Docker daemon images by passing the `--no-prune=false`
    flag. Since artifact caching is enabled by default, you need to disable that for
    the purge to work. The actual command you need to run is `skaffold dev --no-prune=false
    --cache-artifacts=false`. By pressing *Ctrl* + *C* for `skaffold dev` and `skaffold
    debug`, Skaffold will automatically clean the images stored on the local Docker
    daemon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For images that have been pushed to remote container registries, the user has
    to take care of the cleanup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, to test image pruning, we can use the following `docker` profile
    to build images using our local Docker daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can run the `skaffold dev --no-prune=false --cache-artifacts=false`
    command. After the build and deployment, we can press *Ctrl* + *C*, which should
    prune the images and delete any Kubernetes resources as well. In the following
    logs, you can see that after pressing *Ctrl* + *C*, Skaffold started deleting
    Kubernetes resources and pruned images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we took a deep dive into Skaffold pipeline stages such as init,
    build, and deploy, to name a few. In the next section, we will talk about debugging
    an application that's been deployed to a Kubernetes cluster with Skaffold.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Skaffold
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Skaffold supports debugging containerized applications running on Kubernetes
    with the `skaffold debug` command. Skaffold provides debugging for different container's
    runtime technology. Once debugging has been enabled, the associated debugging
    ports are exposed and labeled to be port-forwarded to the local machine. IntelliJ
    IDE's plugins, like Cloud Code, internally use Skaffold to add and attach the
    correct debugger for your language.
  prefs: []
  type: TYPE_NORMAL
- en: However, in debug mode, `skaffold debug` will disable image rebuilding and syncing
    as it can lead to debugging sessions terminating accidentally if we save file
    changes. You can allow image rebuilding and syncing with the `--auto-build`, `--auto-deploy`,
    and `--auto-sync` flags.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `skaffold debug` command supports the following languages and runtimes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go 1.13+ (runtime ID: go) and using Delve'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Node.js (runtime ID: nodejs) and using the Node.js Inspector Chrome DevTools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Java and JVM languages (runtime ID: jvm) and using JDWP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python 3.5+ (runtime ID: python) and using `debugpy` (Debug Adapter Protocol)
    or `pydevd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.NET Core (runtime ID: netcore) using `vsdbg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the IDE, like IntelliJ, you need to add the Remote Java Application configuration
    to your Run/Debug configurations once you start your application. You must also
    select the port/address you defined when starting your application. Then, you
    are ready to debug:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In IntelliJ, you should see the following after setting up the breakpoint.
    On the breakpoint, you should see the tick mark once the debug session has been
    activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Breakpoint enabled'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Breakpoint enabled
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Debug** console logs, you should see the following once the debug
    session has started. Now, you are ready to debug your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Debugger attached'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B17385_Figure_5.12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Debugger attached
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we took a deep dive into Skaffold's debugging capabilities.
    We also learned how to debug a containerized version of our application using
    the `skaffold debug` command. You can also debug using the Cloud Code IntelliJ
    plugin, which we will cover in [*Chapter 7*](B17385_07_Final_PD_ePub.xhtml#_idTextAnchor092),
    *Building and Deploying a Spring Boot Application with the Cloud Code Plugin*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by discovering various ways to install Skaffold
    on different operation systems. We covered the installation for popular OSes such
    as macOS, Windows, and Linux. Then, we looked at various commands supported by
    Skaffold that help build and deploy the Kubernetes application. We also covered
    some miscellaneous and housekeeping commands. Then, we discovered the different
    Skaffold pipeline stages, such as init, build, and deploy to name a few. Finally,
    we discussed debugging an application with Skaffold with a command such as `skaffold
    dev`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss Skaffold container image builders (Dockerfile,
    kaniko, Buildpacks, Jib) and deployers (Helm, kubectl, kustomize).
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to learn more about Skaffold, please take a look at its documentation
    at https://skaffold.dev/docs/.
  prefs: []
  type: TYPE_NORMAL
