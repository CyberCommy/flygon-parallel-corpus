- en: Load and Resolve with Composer, an Evolutionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Composer is not only a package manager, but also a dependency manager in PHP.
    In PHP, if you want to reuse an open source component, the standard way to do
    it is to use an open source package through Composer, as Composer has become a
    standard for making packages, installing packages, and auto-loading. Here, we
    have discussed a few new terms, such as package manager, dependency manager, and
    auto-loading. In this chapter, we will go into detail of what they are and what
    Composer provides for them.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding paragraph explains what Composer mainly does, but Composer is
    more than that.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composer as a package and dependency manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Composer works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composer commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `composer.json` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `composer.lock` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composer as an autoloader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PHP community is a sort of divided one and there are lot of different frameworks
    and libraries. Since there are different frameworks available, a plugin or package
    written for one framework cannot be used in another. So, there should be a standard
    way to write and install packages. Here comes Composer. Composer is a standard
    way to write, distribute, and install packages. Composer is inspired by **npm**
    (**Node Package Manager**) from the `node.js` ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, most developers use Composer to install the different packages they
    use. This is also because using Composer to install a package is convenient because
    packages installed through Composer can also be easily auto-loaded through Composer.
    We will look into auto-loading later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As stated before, Composer is not just a package manager, but also a dependency
    manager. This means if a package needs something, Composer will install those
    dependencies for it and it will then auto-load accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Composer requires PHP 5.3.2+ to run. Here is how you can install Composer on
    different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Windows, installing Composer is very easy, so we will not go into much detail.
    You just need to download and execute the Composer setup from [getcomposer.org](http://getcomposer.org).
    Here is the link: [https://getcomposer.org/Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe).'
  prefs: []
  type: TYPE_NORMAL
- en: Installation on Linux/Unix/OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways to install Composer, they are locally and globally. You
    can simply install Composer through the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding four commands perform the following tasks respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloads the Composer setup PHP file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifies the Installer by checking SHA-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Runs the Composer setup to install Composer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Removes the downloaded Composer setup file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are curious about what this Composer setup does, then leave the fourth
    command. As you can see, the setup file is a PHP file named `composer-setup.php`;
    you can simply open this file and read the code. What it mainly does is check
    several PHP extensions and settings and creates the `composer.phar` file. This
    `composer.phar` will be responsible for performing Composer tasks. We are going
    to look at what Composer does and what actions or tasks it performs in this chapter
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Using the aforementioned commands, we have installed Composer locally. By default,
    it will install Composer in the current directory by installing Composer, which
    means by placement of the `composer.phar` file, because this `composer.phar` file
    performs Composer functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to install Composer (placing `composer.phar`) in a specific directory
    or change the `composer.phar` name to something else, you can simply run the install
    with different parameters, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There are many other parameters, which you can see at [https://getcomposer.org/download/](https://getcomposer.org/download/)
    under "Installer Options".
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have installed Composer locally and the filename is `composer.phar`,
    you can simply run it through PHP by saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will run Composer. If `composer.phar` is not in the same directory as before
    `composer.phar`, you need to append the path of the directory where the `composer.phar`
    file is. This is because we have installed Composer locally. So, let's see how
    we can install it globally.
  prefs: []
  type: TYPE_NORMAL
- en: Global Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install and access Composer globally from anywhere, we need to place it in
    a directory that is added in the system's `PATH` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we can run the following command to move `composer.phar` to a place
    from where we can access it globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you will simply be able to access Composer by running command, `composer`
    and it will work; nothing else will be required. So, if you say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will return something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can run this command from anywhere, since we have Composer installed globally.
  prefs: []
  type: TYPE_NORMAL
- en: Usage of Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Composer is a dependency manager and has other different uses. Composer is used
    to install packages while resolving dependencies. Composer is also very good at
    auto-loading. There are more uses of Composer as well. Here, we will discuss the
    different uses of Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Composer as a dependency manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Composer is a dependency manager. Now you can package your code in a way that
    you don't need to ship third-party dependencies with it. You just need to tell
    its dependencies. In fact, your package dependencies can have more dependencies,
    and those dependencies can also have more dependencies. So, resolving all those
    dependencies while making a package or bundle could be really tiresome. But it
    is not, thanks to Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Since Composer is also a dependency manager, dependencies are not a problem
    anymore. We can just specify dependencies in a JSON file, and those dependencies
    are resolved by Composer. We will look into that JSON file shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Installing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we have dependencies (other packages on which our work depends or is going
    to depend) in a JSON file named `composer.json`, then we can install them through
    Composer.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of good packages in PHP and most of the stuff related to our
    daily work is available, so who would want to reinvent the wheel and create everything
    again? So, to start a project, we can simply install different packages through
    Composer and reuse a lot of code that is already there.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the question is, what is the source from where Composer can be installed?
    Can it be anything anywhere on the internet? Or are there some fixed places from
    where Composer installs packages? Actually, there can be multiple sources. The
    one default place from where Composer installs a package is Packagist [https://packagist.org/](https://packagist.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we are going to install a package from Packagist. Let''s say we want to
    install a PHP unit testing framework package from Packagist. It is available here:
    [https://packagist.org/packages/phpunit/phpunit](https://packagist.org/packages/phpunit/phpunit).'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s install it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You will see that this package installation will also result in the installation
    of a lot of dependencies as well. Here, `require` is a Composer command, while
    `phpunit/phpunit` is the name with which this package is registered on Packagist.
    Note, we just discussed about a `composer.json` file but we didn't need the `composer.json`
    file, to install this PHP unit package. Actually, the `composer.json` file is
    useful if we already have some dependencies. If we just need to install some packages
    right now, then we can simply use the `composer require` command. And this `composer
    require` will also create a `composer.json` file and update it with the `phpunit/phpunit`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the content of the `composer.json` file that will be created after
    running the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can see in the require object, it has the key of package name and then,
    after the colon, there is `"^6.2"`, which represents the package version. Here,
    the package version is given in a regular expression stating that the package
    version is starting from 6.2, but this isn't the actual version that is installed.
    After packages and their dependencies are installed, their exact version is written
    in the `composer.lock` file. This file, `composer.lock` , has significant importance,
    so we will look into it in detail shortly.
  prefs: []
  type: TYPE_NORMAL
- en: After running this command, you will be able to see another directory in the
    directory where you ran the Composer require command. This other directory is
    the `vendor` directory. In the vendor directory, all packages are installed. If
    you look into it, not only is the PHP unit present in the vendor directory, but
    also all of its dependencies and dependencies of dependencies are installed in
    the vendor directory.
  prefs: []
  type: TYPE_NORMAL
- en: Installing using composer.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of using `composer require`, we can also install a package through
    another command if we have a `composer.json` file. To do so, go into another directory.
    We can simply make a `composer.json` file having a list of packages with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'So, once you have a file named `composer.json` and have this content in it,
    you can simply install these two packages with their dependencies based on this
    version information by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will do the same thing that Composer require did. However, if both `composer.json`
    and `composer.lock` files are present, it will read information from the `composer.lock`
    file and will install that exact version and ignore `composer.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to ignore the `composer.lock` file and install based on information
    in the `composer.json` file, you can either delete the `composer.lock` file and
    use the `composer install` or you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note, the `composer update` command will also update the `composer.lock` file.
  prefs: []
  type: TYPE_NORMAL
- en: If a package or library isn't available on Packagist, you can still install
    that package through other sources, and to do so you will need to enter different
    information in the `composer.json` file. You can read detailed information about
    other sources here [https://getcomposer.org/doc/05-repositories.md](https://getcomposer.org/doc/05-repositories.md).
    However, note that Packagist is the recommended source because of its convenience.
  prefs: []
  type: TYPE_NORMAL
- en: The composer.json in detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `composer.json` file that we have seen is minimal. To see what a typical
    `composer.json` file looks like, here is the `composer.json` file of my favorite
    PHP MVC framework Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We will not go into obvious parts of this file, such as name, description, and
    so on. We will look into complex and more important attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The require object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already seen that `require` has dependencies and version information
    which are installed by the `composer install` command.
  prefs: []
  type: TYPE_NORMAL
- en: The require-dev object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `require-dev` , only those packages which are required during the development
    phase are listed. We used an example, of `phpunit/phpunit` in the Composer install
    example but actually, packages like `phpunit` and `phpspec` are only required
    in development and not in production. Also, if there are any packages required
    related to debugging, they can also be included in the `require-dev` object. And
    the `composer install` command will install all the packages which are in `require-dev`,
    as well as under `require` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we want to only install packages which are required in production,
    they can be installed with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the aforementioned example, `composer.json`, `laravel/tinker` and `laravel/laravel`
    are in the `require` object, but `phpunit`, `mockery` , and `faker` are the packages
    mentioned in the `require-dev` object, so those will not be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The autoload and autoload-dev
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This autoload option is there to autoload either a namespace or group of classes
    under one directory or simply a class. It is a PHP autoloader alternative that
    Composer provides. This is what tells Composer which directory to look into while
    auto-loading a class.
  prefs: []
  type: TYPE_NORMAL
- en: The auto-load property has two more properties, that is `classmap` and `psr-4`.
    PSR4 is a standard that describes specifications for auto-loading classes from
    file paths. You can read more about it at [http://www.php-fig.org/psr/psr-4/.](http://www.php-fig.org/psr/psr-4/)
  prefs: []
  type: TYPE_NORMAL
- en: Here, PSR-4 is specifying a namespace and from where this namespace should be
    loaded. Here, in preceding the example, the `App` namespace should be getting
    content from the `app` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Another property is `classmap`. This is used to auto-load libraries which don't
    support PSR-4 or PSR-0\. PSR-0 is another standard for auto-loading, however,
    PSR-4 is newer and is the recommended one. PSR-0 is already deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: Just as `require-dev` is similar to `require`, `autoload-dev` is similar to
    `autoload`.
  prefs: []
  type: TYPE_NORMAL
- en: The scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scripts basically have scripts in arrays against different events. All those
    properties of script objects are sort of events, and scripts specified in values
    executed at specific events. Different properties represent different events,
    such as `post-install-cmd` means after installing packages it will execute scripts
    in an array against the `post-install-cmd` property. It''s the same with other
    events. On this URL in the Composer documentation, you can find details of all
    these events: [https://getcomposer.org/doc/articles/scripts.md#command-events](https://getcomposer.org/doc/articles/scripts.md#command-events).'
  prefs: []
  type: TYPE_NORMAL
- en: The composer.lock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main purpose of `composer.lock` is to lock dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed, the `composer.lock` file is very important. This is because when
    a specific exact version is not specified in `composer.json` or a package is installed
    through `composer require` without version information, Composer installs the
    package and, after installing, adds information regarding that package installation
    including the exact version (that is installed).
  prefs: []
  type: TYPE_NORMAL
- en: If, package is already in `composer.lock`, then most probably you have the package
    listed in `composer.json` as well. In that case, you normally install the package
    through `composer install` and Composer will read the package details and version
    information from `composer.lock` and install exactly that version because that
    is what Composer does, locking dependencies with the exact version.
  prefs: []
  type: TYPE_NORMAL
- en: If there is no `composer.lock` file in your code base, `composer install` or
    `composer require` will install package(s) which will create the `composer.lock`
    file as well.
  prefs: []
  type: TYPE_NORMAL
- en: If the `composer.lock` file is already there, then it will make sure that Composer
    install will install the exact version written in `composer.lock` file and it
    will ignore `composer.json`. However, as mentioned earlier, if you want to update
    your dependencies and want to update that in the `composer.lock` file, then you
    can run `composer update`. This is not recommended, because once your application
    is running on specific dependencies and you don't want to update, then the `composer.lock`
    file is useful. So, if you want to lock down dependencies, don't run the `composer
    update` command.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working in a team, you must commit the `composer.lock` file as well,
    so that other team members in your team can have the exact same packages and versions.
    So, committing the `composer.lock` file is highly recommended and not a matter
    for discussion.
  prefs: []
  type: TYPE_NORMAL
- en: We are not going to discuss `composer.lock` in detail, as this is most of what
    we need to know about `composer.lock`. However, I would recommend you open and
    read `composer.lock` once. Understanding everything is not necessary, but it will
    give you some idea.
  prefs: []
  type: TYPE_NORMAL
- en: It basically has package information that is installed with the exact version
    that is installed and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Composer as an auto-loader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen, there is auto-loading related information available in the
    `composer.json` file because Composer is also responsible for auto-loading. In
    fact, even without that auto-load property specified, Composer can be used to
    auto-load files.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, we were using `require` or `include` to load every file separately.
    You don't need to `require` or `include` each and every file separately. You just
    need to require or include one file, that is `./vendor/autoload.php`. This `vendor`
    directory is Composer's vendor directory, where all packages are placed. So, this
    `autoload.php` file will auto-load everything without worrying about including
    all files with their dependencies in order.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say we have a `composer.json` file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With that `composer.json` file, if we run `composer install`, it will install
    all these packages, then, to load all those packages and all the classes in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to just include one file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: And this will make all those packages available in your code. So, all these
    packages, and our own `classes/traits` within `app/Models` and `app/Traits`, will
    be available even though while we didn't include all those packages separately.
    So, Composer works as an auto-loader as well.
  prefs: []
  type: TYPE_NORMAL
- en: Composer for creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use Composer to create a new project from an existing package.
    This is equivalent to performing two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running `composer install` in that
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That means it will clone a project and install its dependencies. It can be
    done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It is very useful if we want to start a project from a code base. Note, the
    path on the filesystem and version number is not required, but optional.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install a framework named Laravel, you can simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, `laravel/laravel` is the package. As you can see from this, the path on
    the filesystem or version is not mentioned here. This is because those parameters
    are optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'With those parameters, this command will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Composer is a standard way to make and use reusable components. Nowadays, a
    lot of stuff has already been done and can be reused. For this reason, in PHP,
    Composer is a standard method. In this chapter, we have seen how Composer works,
    what it''s usages are, how can one install packages through it, and a lot more.
    However, one thing that we haven''t touched on in this chapter is how we can make
    packages for Composer. This is because our focus was on how we can reuse already
    available Composer packages. If you want to learn how to a create Composer package,
    then start from here: [https://getcomposer.org/doc/02-libraries.md](https://getcomposer.org/doc/02-libraries.md).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know more about Composer, you can:'
  prefs: []
  type: TYPE_NORMAL
- en: Go and read Composer documentation at [https://getcomposer.org/doc/](https://getcomposer.org/doc/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open and start reading important files. You can open and read different Composer
    files, such as `composer.json` and `composer.lock` , from different packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Till now, we have seen how we can reuse Composer components to avoid writing
    everything on our own. In the next chapter, we will start using such components
    or projects to make our RESTful web service better.
  prefs: []
  type: TYPE_NORMAL
