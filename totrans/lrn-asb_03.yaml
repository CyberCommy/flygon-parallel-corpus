- en: The Ansible Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move on to writing and executing more advanced playbooks, we are going
    to take a look at the inbuilt Ansible commands. Here, we will cover the usage
    of the set of commands that makes up Ansible. Towards the end of the chapter,
    we will also install a few third-party tools, one being an inventory grapher,
    which will let us visualize our hosts, and the second allows you to record your
    playbook runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inbuilt commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-console`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-doc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-inventory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-vault`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Third-party commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-inventory-grapher`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ara`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be reusing the Vagrant box we launched in the previous chapter; if you
    have not been following along, please refer to the previous chapter for instructions
    on how to install both Ansible and Vagrant. There are a few playbook examples
    throughout this chapter; you can find the complete examples at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter03](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: Inbuilt commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we installed Ansible, there were several different commands installed.
    These were:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-console`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-doc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-inventory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-vault`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be covering a few of the commands, such as `ansible-galaxy`, `ansible-playbook`,
    and `ansible-pull`, in later chapters, so I will not go into any detail about
    those commands in this chapter. Let's make a start at the top of the list with
    a command we have already used.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you would have thought that `ansible` is going to be the most common command
    we will be using throughout this book, but it isn't.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ansible` command is really only ever used for running ad hoc commands
    again in a single or collection of hosts. In the last chapter, we created a host
    inventory file that targeted a single local virtual machine. For this chapter,
    let''s take a look at targeting four different hosts running in DigitalOcean;
    my hosts file looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I have four hosts, `ansible01` > `ansible04`. My first two hosts
    are in a group called `london` and my second two are in a group called `nyc`.
    I have then taken these two groups and created one containing them called `digitalocean`,
    and I have then used this group to apply some basic configuration based on the
    hosts I have launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `ping` module, I can check connectivity to the hosts by running the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from these results, all four hosts return `pong`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eacb9b7b-708c-4dba-b865-95e45fd84d8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I can also target all four hosts at once by using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/1585a18f-2fa3-421b-92aa-75c03d3a3af2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our host accessible through Ansible, we can target them with
    some ad hoc commands; let''s start with something basic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will connect to the `london` hosts and run the `ping -c 3 google.com`  command;
    this will ping `google.com` from the hosts and return the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/84b9aeb6-8592-4fb9-b7b7-969f9bfcd970.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also run a single module using the `ansible` command; we did this in
    the previous chapter using the `setup` module. However, a better example would
    be updating all of the installed packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we are using the `yum` module to update all of the
    installed packages in the `nyc` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/acddf1cd-05d0-4233-aa9c-9fb9fb3f38a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the screenshot, the output when running Ansible is quite
    verbose, and it has feedback to tell us exactly what it has done during the ad
    hoc execution. Let''s run the command again against `all` of our hosts, but this
    time just for a single package, say `kpartx`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The Terminal output gives you a better idea of the information being returned
    by each host as the command is executed on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/73ef6999-a100-4841-9e37-adf188407f21.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the two hosts in the `nyc` group, while returning a `SUCCESS`
    status, are showing no changes; the two hosts in the `london` group again show
    a `SUCCESS` status but show changes.
  prefs: []
  type: TYPE_NORMAL
- en: So why would you want to do this and what is the difference between the two
    commands we ran?
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s take a look at two of the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: While it appears that the first command isn't running a module, it is. The default
    module for the `ansible` command is called `raw` and it just runs raw commands
    on each of the targeted hosts. The `-a` part of the command is passing arguments
    to the module. The `raw` module just happens to accept raw commands, which is
    exactly what we are doing with the second command.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the syntax is slightly different to when we pass commands
    to the `ansible` command, and when using it as part of a YAML playbook. All we
    are doing here is passing the key-value pairs directly to the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'So why would you want to use Ansible like this? Well, it''s great for running
    commands directly against non-Ansible managed hosts in an extremely controlled
    way. Ansible just SSHs in, runs the command, and lets you know the results. Just
    be careful, as it is very easy to get overconfident and run something like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If Ansible has permissions to execute the command, then it will do. Running
    the previous command will reboot all the servers in the host inventory file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/11b8a321-1a1b-4733-902d-8b85bc55bddb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that all of the hosts have a status of `UNREACHABLE` because the `reboot`
    command kicked our SSH session before the `SUCCESS` status could be returned.
    You can, however, see that each of the hosts has been rebooted by running the
    `uptime` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cc1a54f6-64e2-4207-9110-3d3aeeb56a4e.png)As mentioned, be extremely
    careful when using Ansible to manage hosts using ad hoc commands.'
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-config command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ansible-config` command is used to manage Ansible configuration files.
    To be honest, Ansible ships with some quite sensible defaults, so there is not
    much to configure outside of these. You can view the current configuration by
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, all of the text in green is the default
    config, and any configuration in orange is a changed value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5b0142ec-a78c-47c1-9437-42f4bd1b37f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the following command will list details of every configuration option
    there is within Ansible, including what the option does, its current state, when
    it was introduced, the type, and much more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a64b4c9-a333-4d20-8c45-3372b7fbbcfc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you had a configuration file, say at `~/.ansible.cfg`, then you can load
    it using the `-c` or `--config` flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will show you the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-console command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible has its own built-in console. Personally, it is not something I have
    used much at all. To start the console, we simply need to run one of the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The first of the three commands targets all of the hosts, while the next two
    just target the named groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/761e4018-c266-461b-898c-31e58648ad36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the Terminal output, you are asked for an Ansible Vault
    password. Just enter anything here as we do not have anything protected by Ansible
    Vault; more on that later in the chapter. Once connected, you can see that I am
    connected to the `london` group, in which there are two hosts. From here, you
    can just type a module name, such as `ping`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ad3f6376-f3b6-46ab-974f-33c1ed1d63ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or use the `raw` module, by typing `raw uptime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e775b6e1-a1a1-480d-80a5-fb6aeac1d6c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also use the same syntax as we did when running the `ansible` command
    to pass key-value pairs, for example, `yum name=kpartx state=latest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c987bdea-05b6-49ed-880d-f44cc43833c4.png)'
  prefs: []
  type: TYPE_IMG
- en: To leave the console, simple type `exit` to return to your regular shell.
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-doc command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ansible-doc` command has one function—to provide documentation for Ansible.
    It mostly covers the core Ansible modules, which you can find a full list of by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For information on a module, just run the command followed by the module name,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, the documentation is quite detailed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7979b3a7-74f1-4246-b27c-cb7d353bbb58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you just want to see how to use the example in your playbook, then you can
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you an idea of what your playbook should contain, as you can
    see from the following output for the `raw` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2242373d-80fe-4a41-bdcf-bd411c2462d1.png)'
  prefs: []
  type: TYPE_IMG
- en: The content of the `ansible-doc` command mirrors the documentation that can
    be found at the Ansible website, but it's useful if you want to quickly check
    the syntax needed for a module.
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-inventory command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the `ansible-inventory` command provides you with details of your host
    inventory files. It can be useful if you want to get an idea of how your hosts
    are grouped. For example, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives you a logical overview of your host groups. Here is the hosts inventory
    file we first used with the `ansible` command at the start of the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/80c4cbb7-993f-4828-b997-d45a718a79f7.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it displays the groups, starting with all, then the main host
    group, followed by the child groups, and then finally the hosts themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to view the configuration for a single host, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a5f935dc-bcae-426c-abf3-dfd9d3e2de5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You may have noticed that it displays the configuration information that the
    host inherited from the configuration we set for all of the DigitalOcean hosts.
    You can view all the information on each of your hosts and groups by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This command is useful if you have a large or complicated hosts inventory file
    and you want information on just a single host, or if you have taken on a host
    inventory and want to get a better idea of how the inventory is structured. We
    will be looking at a third-party tool later in this chapter that gives more display
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Ansible, it is possible to load in variables from files. We will be looking
    at this in our next chapter in more detail. These files can contain sensitive
    information such as password and API keys. An example of this would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have two sensitive bits of information visible as plaintext.
    This is OK while the file is on our local machine, but what if we want to check
    the file into source control to share it with our colleagues? Even if the repository
    is private, we shouldn't be storing this type of information in plaintext.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible introduced Vault to help solve this very problem. Using Vault, we can
    encrypt the file and then when, Ansible is executed, it can be decrypted in memory
    and the content read.
  prefs: []
  type: TYPE_NORMAL
- en: 'To encrypt a file, we need to run the following command, providing a password
    that will be used to decrypt the file when prompted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a15d1b91-d18e-4b3d-be6f-5bba0a54eb64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the output, you will be asked to confirm the password.
    Once encrypted, your file will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the details are encoded using text. This makes sure that our
    `secrets.yml` file will still work without any problems with source control. You
    can view the content of a file by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This will ask you for the password and print the content of the file to the
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/64214a87-fcc9-496e-9a84-701197d71584.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can decrypt the file on disk by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When using this command, please remember not to check the decrypted file into
    your source control system!
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Ansible 2.4, it is now possible to encrypt a single variable in a file.
    Let''s add some more variables to our file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It would be good if we didn't have to keep viewing or decrypting our file to
    check the variable name and overall content of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s encrypt the password content by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This will encrypt the `mypassword` string and give it a variable name of `password`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/df83ad87-808d-40ed-be7e-40dcedf39f06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then copy and paste the output into our file, repeat the process again
    for the `secret-api-key`, and we end up with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, that is a lot easier to read and is just as secure as encrypting
    the file as a whole. There is one last thing with Ansible Vault, and that is that
    you can also read the password from a file; for example, I have been encoding
    my Vaults using the password of `password`. Let''s put that in a file and then
    use it to unlock our Vault:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following `playbook.yml` file, we are reading the `secrets.yml`
    file and then outputting the content using the `debug` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `playbook.yml` file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in an error message shown in the Terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e74b642b-41cb-4d79-9d05-d81bc5372e8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it is complaining that it found Vault-encrypted data in our
    file, but we haven''t provided the secret to unlock it. Running the following
    command will read the content of `/tmp/vault-file` and decrypt the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following playbook run, the output is now as we expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/119c603a-0f96-419a-9163-b71cdbd11b5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you prefer to be prompted for the password, you can also use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can find a copy of `playbook.yml` and `secrets.yml` in the `Chapter03` folder
    of the accompanying repository.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we finish up looking at Ansible commands, there are a few different third-party
    commands I would like to cover, the first of which is `ansible-inventory-grapher`.
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-inventory-grapher command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ansible-inventory-grapher` command by Will Thames uses the Graphviz library
    to visualize your host inventories. The first thing we need to do is install Graphviz.
    To install this on macOS using Homebrew, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, to install Graphviz on Ubuntu, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you can install `ansible-inventory-grapher` using `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have everything installed, we can generate the graph using the
    `hosts` file we used earlier in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run the following command to generate the raw graph file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the raw output of the graph. As you can see, it is similar to HTML.
    We can render this using the `dot` command, which ships as part of Graphviz. The
    `dot` command creates hierarchical drawings from graphs. To do this, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate a PNG file called `hosts.png` that contains the visualization
    of the host inventory file you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dca6621b-227a-423c-b3e5-f296cc2c6765.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be using this tool in later chapters to get an idea of what our inventory
    files look like as they are generated.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Run Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ARA**, which is a recursive acronym that stands for **Ansible Run Analysis**,
    records Ansible. It is a tool written in Python that records your playbook runs
    and displays the results in an intuitive web interface. To install it on macOS,
    I had to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To install on Ubuntu, I could use just this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you should be able to run the following commands to configure
    your environment to record your Ansible playbook runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have your environment configured, you can run a playbook. For example,
    let''s rerun the playbook from the Ansible Vault section of this chapter using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the playbook has been executed, running the following command will start
    the ARA web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Opening your browser and going to the URL mentioned in the output of the previous
    command, `http://127.0.0.1:9191/`, will give you the results of your playbook
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c16d88ee-f914-49ad-9933-18ff7fbeca6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, I have run the playbook four different times, and one of those
    executions failed. Clicking on the elements will show you more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d972cbd2-f777-4348-994e-32f6c63ca83a.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, we will be using ARA in later chapters in a lot more detail; we have
    just touched upon the very basics here.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a brief look at some of the supporting tools that ship
    as part of a standard Ansible installation, as well as some useful third-party
    tools that have been designed to work with Ansible. We will be using these commands,
    as well as the few we have purposely missed, in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we are going to make a start by writing a more complex
    playbook that installs a basic LAMP stack on our local Vagrant box.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of the commands that provide information about your host inventory that we have
    covered in this chapter, which ships with Ansible by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Variable files that have strings encrypted with Ansible Vault
    will work with versions of Ansible lower than 2.4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command would you run to get an example of how you should call the `yum`
    module as part of your task?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why you would want to run single modules against hosts within your inventory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using your own host inventory file, generate a diagram showing the content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the project pages for the two third-party tools covered at the
    end of the chapter at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible-inventory-grapher`: [https://github.com/willthames/ansible-inventory-grapher](https://github.com/willthames/ansible-inventory-grapher)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ara`: [https://github.com/openstack/ara](https://github.com/openstack/ara)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
