- en: New Features in C# 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For decades, we have seen the development of a wide variety of programming languages.
    Some are now almost dead, some are used by few companies, and others have remained
    dominant in the market for many years. C# belongs to the third category. The first
    version of C# was released in the year 2000\. When C# was released, many people
    said that it was a clone of Java. Over time, however, C# became more mature and
    started dominating the market. This is especially the case for the Microsoft technology stack,
    where C# is undoubtedly the number one programming language. With every new release,
    Microsoft has introduced amazing features and made the language very powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of 2018, Microsoft announced some exciting features that will be
    available in C# 8\. At the time of writing, C# 8 is still yet to be officially
    released, so I can''t guarantee that all of these features will be available in
    the final release. However, there is a very high chance that these features will
    be available in the final release. In this chapter, we will look at these features
    and try to understand how the language is evolving into an extraordinary programming
    language. Let''s take a look at the features that we are going to discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: Nullable reference types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Async streams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ranges and indices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default implementation of interface members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target-typed new expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To execute the code of this chapter you will need **Visual Studio 2019**. At
    the time of my writing this book, Visual Studio 2019 is not yet released officially.
    However, the preview version is available and to execute the code of this chapter,
    you will need Visual Studio 2019 preview version at least. Another thing to keep
    in mind is to create **.NET Core** Console App projects when testing the code
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download Visual Studio 2019 Preview Version, go to this link: [https://visualstudio.microsoft.com/vs/preview/](https://visualstudio.microsoft.com/vs/preview/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca22bf53-4019-4a40-82e3-002f198c086b.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio 2019 Preview download page
  prefs: []
  type: TYPE_NORMAL
- en: Nullable reference types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have ever faced an exception while coding in C#, it is likely to have
    been a null reference exception. Null reference exceptions are one of the most
    common exceptions a programmer will face while developing applications, so the
    C# language development team has worked hard to make them easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'In C#, there are two types of data: **value types** and **reference types**.
    Value types normally have default values when you create them, whereas reference
    types are, by default, null. Null means that the memory address does not point
    to any other memory address. When the program tries to find a reference and can''t
    find any, it throws an exception. As developers, we want to ship software that
    is exception-free, so we try to handle all the exceptions in our code; however,
    sometimes, it can be really hard to find a null reference exception when developing
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: In C# 8, the language development team came up with nullable reference types,
    which means that you can make a reference type nullable. If you do this, the compiler
    will not allow you to set null to non-nullable reference variables. If you are
    using Visual Studio, you will also get a warning if you try to set a null value
    to a non-nullable reference variable.
  prefs: []
  type: TYPE_NORMAL
- en: As this is a new feature and not available in old versions of C#. The C# programming
    language team came up with the idea of enabling the feature by writing a piece
    of code, so that the old systems do not crash. You can enable this feature for
    the whole project or for an individual file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable nullable reference types in a code file, you have to place the following
    code at the top of the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at an example of a nullable reference type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the preceding code, you get an exception when trying to print the
    statement. Try to enable nullable reference types by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will show you a warning to the effect that the name can''t
    be null. To make this workable, you have to change the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By changing the string name to `nullable`, you are telling the compiler that
    it's OK to make this field nullable.
  prefs: []
  type: TYPE_NORMAL
- en: Async streams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have worked with async methods in C#, you might have noticed that returning
    streams is not possible, or is hard to achieve with existing features. This would,
    however, be a helpful feature, which would make development tasks much simpler.
    This is why C# 8 has introduced a new interface called `IAsyncEnumerable`. With
    this new interface, asynchronous streams of data can be returned. Let me explain
    a little bit more about this.
  prefs: []
  type: TYPE_NORMAL
- en: Before async streams, in the C# programming language an async method was not
    able to return a stream of data—it could could only return a single value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example of code that doesn''t use an async stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With async streams, a stream of data can now be returned using `IAsyncEnumerable`.
    Let''s take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding example, we can see how we can use this new feature of C#
    to return asynchronous streams.
  prefs: []
  type: TYPE_NORMAL
- en: Ranges and indices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'C# 8 comes with ranges, which allow you to take a slice of an array or string.
    Before, if you wanted to get only the first three numbers of an array, you had
    to iterate through the array and use a condition to find out which values you
    wanted to use. Let''s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With ranges, you can easily slice the array and take whatever value you want,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we can see that we gave a range (`[0..3]`) in the
    `foreach` loop next to the numbers. This means that we should only take the values
    of index 0 to index 3 in the array.
  prefs: []
  type: TYPE_NORMAL
- en: There are other ways to slice an array. You can use `^` to say that indexes
    should be taken backward. For example, if you want to get values from the second
    element to the second-from-last element, you can use `[1..^1]`. If you apply this,
    the result you will get is `2, 3, 4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the use of ranges in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When running the above code you will need a special Nuget package in your project.
    The name of the package is `Sdcb.System.Range`. To install this package you can
    go to Nuget Package Manager in Visual Studio and install it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/370d0040-10f3-44d9-9554-5c12e0028656.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Sdcb.System.Range Nuget package
  prefs: []
  type: TYPE_NORMAL
- en: If you are still having build errors, there is a possibility that your project
    is still using C# 7 and, to upgrade to C# 8, you hover over the place which is
    marked with a red underline and click the light bulb that will popup. Then, Visual
    Studio will ask if you want to use C# 8 for your project. You need to click on
    Upgrade this project to C# language version '8.0 *beta*'. This will upgrade your
    project from C# 7 to C# 8 and you will be able to run your code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/188d10ee-9070-4d8c-848e-9f1dff400cb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure: Upgrade project to C# 8'
  prefs: []
  type: TYPE_NORMAL
- en: Default implementation of interface members
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know that, in C#, interfaces don't have any method implementations; they
    only contain the method signature. In C# 8, however, interfaces are allowed to
    have implemented methods. These methods can be overridden by classes if they need
    to be. Interface methods will also have access to modifiers, such as public, virtual,
    protected, or internal. By default, the access level is set to virtual unless
    it is fixed as sealed or private.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another important thing to note. No attributes or fields are yet allowed
    in an interface. This means that interface methods can''t use any instance fields
    in the methods. Interface methods can take parameters as input and use those,
    but not instance variables. Let''s take a look at an example of an interface method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: At this time of writing the book, this feature has not yet been available in
    the C# 8 preview version. This is still marked as a proposed feature but, hopefully,
    it will be implemented in the final release. Therefore, the above given code might
    not work even if you use Visual Studio 2019 preview version.
  prefs: []
  type: TYPE_NORMAL
- en: Switch expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been using switch statements for many years now. Whenever we think of
    or hear about switches, we think about case and break. C# 8, however, will force
    us to change that mindset through the introduction of switch expressions. This
    means that switch statements will not be the same as they were in the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what our old `switch` statement used to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With the new approach, we won''t place the `person` in parentheses after the
    `switch`, but we will place the `switch` to the right of the `person` variable,
    and no `case` keywords will be needed. Let''s take a look at how we can use `switch`
    expressions in a new way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can also see that, for the default case, we just use the underscore (`_`).
  prefs: []
  type: TYPE_NORMAL
- en: Target-typed new expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In C# 8, another new feature is target-typed new expressions. This feature
    will make code assignment much cleaner. Let''s start with some example code in
    which we are creating a dictionary with a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With target-typed new expressions, the preceding code can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When you place `new()`, the variable takes the type that is on the left-hand
    side and creates a new instance of it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time Microsoft announces a new release of the C# programming language,
    I get excited to see what they are bringing to the table, and every time, I am
    impressed with the results. C# 8 was no exception. The nullable reference type
    in particular is an amazing feature because it allows us to prevent a very common
    exception. Async streams are another fantastic feature, especially for the development
    of IoT. Ranges, interface members, switch expressions, and all the other additions
    are small steps towards significant progress. New features such as these make
    a developer's life much easier, and bring benefits to businesses by reducing software
    crashes. In the next chapter, we are going to discuss design principles and different
    design patterns.
  prefs: []
  type: TYPE_NORMAL
