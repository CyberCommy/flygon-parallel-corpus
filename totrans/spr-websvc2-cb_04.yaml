- en: Chapter 4. Exception/SOAP Fault Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling server-side exceptions by returning an exception's message as a SOAP
    fault string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping exception class names to SOAP faults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotating exception classes with the `@SOAPFault`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your own exception resolvers in Spring-WS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The server-side exceptions generated while processing a Web-Service are transmitted
    as SOAP faults. The `SOAP <Fault>` element is used to carry error and status information
    within a SOAP message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code represents a general structure of the SOAP fault element
    in a SOAP message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If a `Fault` element is present, it must appear as a child element of the `Body`
    element. A `Fault` element can only appear once in a SOAP message.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Web-Services offer smart mechanisms to handle SOAP faults with its easy-to-use
    API. The exceptions that are thrown when handling the request get picked up by
    `MessageDispatcher` and get delegated to any of the endpoint exception resolvers
    that are declared in the application context (XML or annotation). This exception
    resolver-based handling mechanism allows the developer to define custom behaviors
    (such as returning a customized SOAP fault) when a particular exception gets thrown.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter starts with recipes for easy exception-handling mechanisms and
    then moves on to slightly complex scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '`org.springframework.ws.server.EndpointExceptionResolver` is the primary specification/contract
    for server-side exception handling in Spring-WS. `org.springframework.ws.soap.server.endpoint.SimpleSoapExceptionResolver`
    is the default implementation of `EndpointExceptionResolver`, available in the
    Spring-WS framework. If not explicitly handled by the developer, `MessageDispatcher`
    handles the server-side exceptions with `SimpleSoapExceptionResolver`.'
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter demonstrate different usages of `org.springframework.ws.server.EndpointExceptionResolver`
    and its implementations, including `SimpleSoapExceptionResolver`.
  prefs: []
  type: TYPE_NORMAL
- en: For demonstration purposes, the simplest recipe for building a Spring-WS is
    Simplifying the creation of a WebService using `MessageDispatcherServlet`.
  prefs: []
  type: TYPE_NORMAL
- en: Handling server-side exceptions by returning the exception's message as a SOAP
    fault string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring-WS framework automatically converts the description of application-level
    exception thrown in server-side into SOAP fault messages and includes it within
    response message and sends it back to the client. This recipe demonstrates catching
    the exception and setting a meaningful message to be sent back as a SOAP fault
    string in the response.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.1` (for server-side
    Web-Service) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-4.1-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses projects from *Setting up an endpoint by annotating the payload-root*,
    discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"), *Building
    SOAP Web-Services*. The following steps describe how to modify the endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the endpoint to throw an exception when an application/system error occurs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from the root of the project, in a command-line window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.1-Client`,
    and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output from the server-side console (note the `SOAP-Env:Fault`
    element generated in the message):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output from the client-side console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the endpoint (`OrderServiceEndpoint`) in the handler method (`handlePlaceOrderRequest`),
    as the incoming message doesn''t contain a reference number, a simple `RuntimeException`
    is thrown. This symbolizes any unexpected runtime exception. For clarification,
    a meaningful error description **(Reference number is not provided!)** is passed
    to the exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can see that there are no explicit exception resolvers configured for this
    project. The smart `MessageDispatcher` of the Spring-WS framework allocates a
    default exception resolver to handle any exception when there is no exception
    resolver configured. It uses `SimpleSoapExceptionResolver` to handle the situation.
  prefs: []
  type: TYPE_NORMAL
- en: '`SimpleSoapExceptionResolver` resolves the exception by performing the following
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Logs the exception to the logger (console, log file)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generates the SOAP fault message with the exception message as the fault string
    and returns as part of the response message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we check the response message at the client side, we can see the exact
    exception message (Reference **number is not provided!)** that is set inside the
    method, `OrderServiceEndpoint. handlePlaceOrderRequest` is returned as the SOAP
    fault string in the response message.
  prefs: []
  type: TYPE_NORMAL
- en: What is interesting here is that the developer doesn't need to do anything to
    handle and send the SOAP fault message, except for throwing an exception with
    a meaningful message.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in [Chapter
    2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building Clients
    for SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Mapping exception class names to SOAP faults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring-WS framework allows the SOAP fault messages to be customized easily in
    the bean-configuration file, `spring-ws-servlet.xml`. It uses a special exception
    resolver, `SoapFaultMappingExceptionResolver`, to do that job. We can map exception
    classes to the corresponding SOAP fault to be generated and returned to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.2` (for server-side
    Web-Service) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-4.2-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the projects from *Setting up an endpoint by annotating the
    payload-root*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Create a custom exception class `DataOutOfRangeException.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `OrderServiceEndpoint` to throw `DataOutOfRangeException`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `SoapFaultMappingExceptionResolver` in `spring-ws-servlet.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from the root of the project, in a command-line window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.2-Client`,
    and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output from the server-side console (note that the `SOAP-Env:Fault`
    element is generated in the message):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output from the client-side console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding code, the `OrderServiceEndpoint.placeOrderRequest` method
    throws a custom exception, `DataOutOfRangeException`, which symbolizes a typical
    server-side exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This exception is caught by `MessageDispatcher` and delegated to the configured
    exception resolvers. In this project, `SoapFaultMappingExceptionResolver` is used,
    which is a special kind of resolver that allows the exception classes to be mapped
    with custom messages in the configuration file. In this example, a different message
    is used to map against `DataOutOfRangeException`. It acts as an interceptor that
    converts the SOAP fault message into whatever is given in the following mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The generated SOAP fault message is logged in at both the server-side as well
    as the client-side console screens. It displays the mapped SOAP fault message
    instead of what is originally thrown by the `DataOutOfRangeException` class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This powerful facility to map exceptions with SOAP fault strings is very useful
    for externalizing SOAP fault management from the code. It gives developers the
    flexibility to change the SOAP fault string, based on any business requirements
    at a later stage, without touching the code and rebuilding it. Moreover, if properly
    designed, this feature, with its configuration (SOAP fault mapping) in the `spring-ws.xml`
    file, can serve as a single point of reference for all possible SOAP fault messages
    of the services that can be maintained easily.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a good solution for B2B applications. Not good for B2C, when supporting
    multiple languages. In general, the best way to do this is by configuring messages
    in the database. This way, we can change them and fix them during runtime. The
    drawback in configuring in XML is that it needs to restart. In real time, one
    app runs on 30 servers. Deploying and restarting are painful processes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Creating a Web-Service client on HTTP transport*, discussed in [Chapter
    2](ch02.html "Chapter 2. Building Clients for SOAP Web-Services"),*Building Clients
    for SOAP Web-Service*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Handling server-side exceptions by returning exception's message
    as a SOAP fault string*, discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Annotating exception classes with @SOAPFault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring-WS framework allows application exceptions to be annotated to SOAP fault
    messages and customized easily in the exception class itself. It uses a special
    exception-resolver, `SoapFaultAnnotationExceptionResolver`, for that job. SOAP
    fault string and fault code can be customized by annotating in the class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.3` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the Maven dependencies for `LiveRestaurant_R-4.3-Client`
    (for the client-side Web-Service):'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlunit-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the project from *Setting up an endpoint by annotating the
    payload-root*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),
    *Building SOAP Web-Services*, as server-side and the recipe *How to integrate
    test using Spring-Junit support*, discussed in [Chapter 3](ch03.html "Chapter 3. Testing
    and Monitoring Web-Services"), *Testing and Monitoring Web-Services*, as client-side.
  prefs: []
  type: TYPE_NORMAL
- en: Create a custom exception class (`InvalidOrdeRequestException.java`), which
    is annotated with `@SoapFault`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a custom exception class (`OrderProcessingFailedException.java`), which
    is annotated with `@SoapFault`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `Endpoint(OrderServiceEndpoint)` to throw both `InvalidOrderRequestException`
    and `OrderProcessingFailedException`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `SoapFaultAnnotationExceptionResolver` in the server application context
    file (`spring-ws-servlet.xml`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from the root of the project, in a command-line window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.3-Client`,
    and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output from the client-side console (please note the SOAP-Env:Fault
    element generated in the message):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the endpoint''s methods, `OrderServiceMethodEndoint.processOrder` (`placeOrderRequest`
    and `cancelOrderRequest)`, custom exceptions are thrown `(ProcessingFailedException`
    and `InvalidOrderRequestException)` that symbolize a typical server-side/client-side
    exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This exception is caught by the `MessageDispatcher` and delegates to the configured
    exception resolvers. In this project, `SoapFaultAnnotationExceptionResolver` is
    used, which is a special kind of resolver that allows the exception classes to
    be annotated with custom fault-code and fault-strings in the class. `SoapFaultAnnotationExceptionResolver`
    is configured to be used in `spring-ws-servlet.xml`, thus any exception handling
    is delegated to it by `MessageDispatcherServlet` at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`ProcessingFailedException` represents a server-side system exception `(faultCode
    = FaultCode.SERVER):`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`InvalidOrderRequestException` represents a client-side business logic exception
    (faultCode `= FaultCode.CLIENT):`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the annotated `faultStringOrReason` is generated as a SOAP
    fault and is transmitted back to the client. The generated SOAP fault message,
    which is logged in both the server-side as well as client-side console screens,
    displays the annotated SOAP fault message instead of what is originally thrown
    in the `Endpoint` class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The attribute `faultCode` of the `@SoapFault` annotation has the following
    possible enumerated values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CLIENT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CUSTOM`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RECEIVER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SENDER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The selection of one from the enumerated list instructs the dispatcher which
    kind of SOAP fault is to be generated along with its specifics. Based on the preceding
    selection, dependent attributes become mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if `FaultCode.CUSTOM` is selected for `faultCode`, the property
    `customFaultCode` string must be used instead of `faultStringOrReason`, as given
    in the code snippet of this recipe. The format used for `customFaultCode` is that
    of `QName.toString()`, that is, `"{" + Namespace URI + "}" + local part`, where
    the namespace is optional. Note that custom fault codes are only supported on
    SOAP 1.1.
  prefs: []
  type: TYPE_NORMAL
- en: The `@SoaPFault` annotation has one more attribute, namely, locale, which decides
    the language of the SOAP fault message. The default locale is English.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In general practice, we use error codes rather than error messages. Mapping
    will be done on the client side using mapping information. This avoids any load
    on the network and there will be no issue with multiple language support.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *How to integrate test using Spring-JUnit support*, discussed in
    [Chapter 3](ch03.html "Chapter 3. Testing and Monitoring Web-Services"),*Testing
    and Monitoring Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Mapping exception class names to SOAP faults*, discussed in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own exception resolvers in Spring-WS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Spring-WS framework provides default mechanisms to handle exceptions using
    the standard exception resolvers, it allows developers to handle exceptions in
    their own way by building their own exception resolvers. SOAP faults can be customized
    to add custom details in their own formats and transmitted back to the client.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe illustrates a custom exception resolver that adds the exception
    stack trace to the SOAP fault detail element of the SOAP response, so that the
    client will get the complete stack trace of the server-side exception, which is
    very useful for certain cases. This custom exception resolver already carries
    the power of annotations, as in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-4.4` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LiveRestaurant_R-4.4-Client` (for the client side) has the following Maven
    dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-test-3.0.5.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`junit-4.7.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xmlunit-1.1.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the project from *Setting up an endpoint by annotating the
    payload-root*, discussed in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Create a custom exception resolver, `DetailedSoapFaultExceptionResolver`, extending
    `SoapFaultAnnotationExceptionResolver`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `DetailedSoapFaultExceptionResolver` in `spring-ws-servlet.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command from the root of the project, in a command-line window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To test, open a new command window, go to the folder `LiveRestaurant_R-4.4-Client`,
    and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output from the server-side console (note the `SOAP-Env:Fault`
    element generated in the message):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding code, our custom exception resolver, `DetailedSoapFaultExceptionResolver`,
    which is a subclass of `SoapFaultAnnotationExceptionResolver`, overrides the method
    `custmizeFault()` to add an exception stack trace into the SOAP fault detail element.
    The method `stackTraceToString()` returns the exception stack trace from a given
    exception, and it is used to set the stack trace to the detail element of the
    SOAP fault of the response message.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different ways of creating custom exception resolvers. It is
    not just `SoapFaultAnnotationExceptionResolver` that can be inherited for that
    purpose. Any implementation of `org.springframework.ws.server.EndpointExceptionResolver`
    can be configured appropriately to be used as an exception resolver. Developers
    can choose from a set of very convenient implementations of `EndpointExceptionResolver`,
    available in the Spring-WS API, leveraging the power of these implementations.
  prefs: []
  type: TYPE_NORMAL
- en: The place for customizing these classes is the method, `customizeFault`. The
    SOAP fault can be customized by overriding the method `customizeFault`. Take a
    look at the package `org.springframework.ws.soap.server.endpoint` for the readily
    available exception resolvers that suit your requirement.
  prefs: []
  type: TYPE_NORMAL
- en: '`AbstractSoapFaultDefinitionExceptionResolver` would be an ideal starting point
    to extend, if an exclusively custom exception resolver needs to be developed that
    doesn''t fit with the currently available implementations, as it has already implemented
    some of the very common and basic functionality that are needed for any exception
    resolvers. The developer just needs to implement the abstract method, `resolveExceptionInternal()`,
    to suit your specific need.'
  prefs: []
  type: TYPE_NORMAL
- en: What needs to be taken care of is that `MessageDispatcherServlet` should be
    instructed to consider the resolver in use, either by registering in `spring-ws-servlet.xml`
    or annotating in the exception class (in addition to registering in `spring-ws-servlet.xml)`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Setting up an endpoint by annotating the payload-root*, discussed
    in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building SOAP
    Web-Services*
  prefs: []
  type: TYPE_NORMAL
- en: The recipe *Annotating Exception classes with @SOAP fault*, discussed in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
