- en: Azure and Serverless Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right about now, I bet that there are some of you coming to this chapter asking,
    "What does serverless computing even mean?" The name is confusing, I agree. It
    makes no sense (to me anyway), but when you understand the concept it kind of
    makes sense. In this chapter, we will have a look at what the term Serverless
    Computing means. We will also take a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing print functionality with DocRaptor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS and S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating C# lambda functions with AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serverless does not mean the lack of a server, but rather you (or the application)
    does not know which server is used to provide some functionality to an application.
    Serverless, therefore, describes an application that depends on some 3rd party
    app or service that lives in the cloud to provide some logic or functionality
    to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Let us use the example of a student research portal. Students research a certain
    topic and create documents in the portal related to what they need to research.
    They can then load print credits against their profile and print the saved documents they
    need. After a page is printed, the print credit is deducted from their profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this is a very simple example, I am using it to illustrate the concept
    of serverless computing. We can split the application up into various components.
    These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Login authentication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Purchasing print credits
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating remaining print credits
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Printing documents
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There could be several other components required not mentioned here, but this
    is not the real world. We are just creating this hypothetical application to illustrate
    the concept of serverless computing.
  prefs: []
  type: TYPE_NORMAL
- en: Why write the code to provide login authentication in your application when
    there are already third-party services out there that do just that? Similarly,
    why write code to print documents when there are services that provide quite rich
    functionality you can just consume in your application? Anything specific such
    as the purchasing and loading of student print credits, can be created using an
    Azure Function. The topic of serverless computing is broad and still in its infancy.
    There is much to learn and experience. Let's take the first steps and explore
    what benefits this can have for developers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why Azure Functions? Imagine that you have an application that needs to provide
    some specific functionality, but that still scales up when the call rate to your
    function increases. This is where Azure Functions provide a benefit. With Azure
    Functions, you only pay for the compute that your function needs at a specific
    instance in time, and it is immediately available.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, head on over to [https://azure.microsoft.com/en-us/services/functions](https://azure.microsoft.com/en-us/services/functions) 
    and create a free account.
  prefs: []
  type: TYPE_NORMAL
- en: Because you only pay for the actual computing time you use when running Azure
    Functions, it is imperative that your code is as optimized as possible. If you
    refactor the Azure Function code and gain a 40% code execution improvement, you
    are directly saving 40% in your monthly expense. The more you refactor and improve
    your code, the more money you will save.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to have an Azure account set up. If you don''t have one, you can set
    one up for free. From the Azure portal, on the left-side menu, click on New to
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the search box, type in `Function App` and hit the *Enter* button. The first
    result should be Function App. Select that.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you select the Function App, you will see this screen pop out to the right.
    The description perfectly describes what Azure Functions do. Click the Create
    button at the bottom of this form.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You now see a form that allows you to give your function a name and select the
    Resource Group and other settings. Click on the Create button when you are done.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After Azure has created the new Function App, you will then be able to create
    an Azure Function. All that we are going to do is to create an Azure Function
    that will be triggered whenever something happens on a GitHub repository. Click
    on the Create your own custom function link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'According to the Microsoft Azure site, the following are supported when writing
    Azure Functions: JavaScript, C#, F#, and scripting options such as Python, PHP,
    Bash, Batch, and PowerShell.'
  prefs: []
  type: TYPE_NORMAL
- en: You will now see that you are given a choice between several templates. Choose
    C# from the Language selection and API & Webhooks from the Scenario selection
    and then select the GitHubWebHook-CSharp template. Azure will now ask you to give
    your function a name. I called mine `GithubAzureFunctionWebHook`. Click on the
    Create button to create the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When your function is created, you will see that it has added some default code
    for you in the online code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Preceding the `return` statement, add the following line of code: `log.Info($"Message
    from GitHub: {gitHubComment}");`. This is so that we will see what was sent from
    GitHub.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your code should now look as follows. Note that there are two links that allow
    you to get the function URL and the GitHub secret. Click on those links and copy
    the values of each to Notepad. Click on the Save and run button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your Azure Function URL should be something like: `https://funccredits.azurewebsites.net/api/GithubAzureFunctionWebHook`
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Head on over to GitHub at [https://github.com/](https://github.com/). If you
    don't have an account, create one and create a repository (GitHub is free for
    open source projects). Go to the repository you created, and click on the Settings
    tab. To the left, you will see a link called Webhooks. Click on that link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will now see a button to the right called Add webhook. Click on that button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add the Azure Function URL you copied earlier to the Payload URL field. Change
    the Content type to application/json and add the GitHub secret you copied earlier
    to the Secret field. Select Send me everything and click on the Add webhook button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Still in your GitHub repository, open a file and add a comment to it. Click
    on the Comment on this commit button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Swing back to your Azure Function and take a look at the Logs window. This window
    is directly below the code window. You will see that the comment we posted in
    GitHub pops up in the log output of the Azure Function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If nothing appears in the log window, ensure that you have clicked on the Run
    button of the Azure Function. If all else fails, click on the Run button at the
    bottom of the Test window.
  prefs: []
  type: TYPE_NORMAL
- en: While this is a very simple example, the usefulness of Azure Functions should
    become evident to you. You will also notice that the function has a `.csx` extension.
    What is important to note is that Azure Functions share a few core concepts and
    components irrespective of which programming language you choose to code it in.
    At the end of the day, a function is the primary concept here. You also have a
    `function.json` file that contains JSON configuration data. You can see this and
    other files by clicking on the View files link to the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the `function.json` file, you will see the contents of the JSON
    file. Changing the `disabled` property to `true` will effectively stop the function
    from executing if called. You will also notice the `bindings` property. Here,
    you configure your web hook. All these settings can be set from within the Integrate
    and other sections of the Azure Function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Azure Functions and the benefits exposed to developers is an exciting concept.
    This is one area of your programming repertoire that will surely keep you busy
    for many hours as you explore more intricate and complex tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Providing print functionality with DocRaptor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Printing from a web application has always been tricky. This is much easier
    these days with the availability of numerous third-party controls that provide
    print functionality to your application. The reality, however, is that I have
    come across many projects where, when they were developed, used a third-party
    control to provide print functionality. At the time it was developed, the third-party
    control was good and did exactly what they needed.
  prefs: []
  type: TYPE_NORMAL
- en: Having this functionality available to the application means that the companies
    that purchase the licenses for these third-party controls, rarely continue renewing
    their licenses. Within a few years, however, this results in a web application
    that contains old and dated print technology. While there is nothing wrong with
    this, it does have some drawbacks.
  prefs: []
  type: TYPE_NORMAL
- en: The developers are usually stuck with maintaining an aging code base, which
    is locked into this third-party control. Any change in requirements, and you'll
    find that developers are faced with making code work within the limitations of
    the third-party controls. Alternatively, they need to approach the powers that
    be and suggest that the third-party controls be updated to the latest version.
    This means that the small change needed in the print module, turns out to be more
    costly than anyone had budgeted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Real world: I used to work for a company that would have consultants quote
    customers on what a change to some application functionality would cost. After
    the quote was given and accepted, it was handed to development to make it work
    within the allotted time frame and budget. This resulted in developers having
    to hack code to make it work and meet budget and deadlines because of a lack of
    proper project management skills. Replacing third-party controls would be virtually
    impossible because the budget was already set without input from development.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I agree that there are some developers that do a very good job of providing
    and maintaining functionality in an aging code base. I also really love third-party
    controls and the functionality they provide. There are a select few big players
    that a developer can choose from. But here is the catch: why purchase a suite
    of third-party controls, when all you need is the ability to print an invoice
    for example? Using this logic, serverless make much more sense in many cases (this
    one included).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example will take a look at a service called DocRaptor. The service isn't
    free, but consider the cost of writing and maintaining code to provide print functionality
    in your web application. Consider the cost of buying third-party controls to provide
    the same functionality. It all comes down to what makes the most sense for you
    as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Create a basic web application and go to Tools, NuGet Package Manager, Package
    Manager Console. Type the following command in the console to install the DocRaptor
    NuGet package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once DocRaptor is installed, you can head on over to their web page ([http://docraptor.com/](http://docraptor.com/))
    to read through some of the API documentation or you can also swing by the GitHub
    page ([https://github.com/DocRaptor/docraptor-csharp](https://github.com/DocRaptor/docraptor-csharp))
    for additional information.
  prefs: []
  type: TYPE_NORMAL
- en: It will be better to have a look at the source code accompanying this book in
    order to copy the code for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Add an aspx web page that contains invoice details. I have simply taken from
    the example on DocRaptor's site and modified it slightly. Call this page `InvoicePrint.aspx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I have included the CSS in a style sheet called `invoice.css`. Be sure to get
    this from the source code accompanying this book.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few ways you could approach this code. This is not necessarily the
    only way to create the web pages. If you are using .NET Core MVC, your approach
    would probably be different. However if you do this, remember that this code is
    just to illustrate the concept here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: I also created a print friendly version of the invoice page called `invoice.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to create a click event for the link button. Add the following
    code to the click event. You will notice that I have just hard coded the path
    to generate the PDF document to as: `C:tempinvoiceDownloads`. You need to make
    sure that you change this path if you want to output to a different path (or get
    a path relative to the server you''re on).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you include the following namespaces in your web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, get the HTML content of the print friendly page called `invoice.html`.
    The URL in the code below will differ on your machine because your port number
    will probably be different.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Run your web application and see the basic invoice displayed on the web page.
    Make sure that you have set your `InvoicePrint.aspx` page as the start page for
    your web application. Click on the Print this invoice link.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will see that the invoice is created in the output path you specified.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the PDF document to open the invoice.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: DocRaptor provides a service that is really useful to developers creating web
    solutions. If you need to create PDF or Excel documents from your application,
    DocRaptor can benefit your team. The test document used in this example is free
    to use without it being deducted from your monthly quota (if you are on a paid
    plan).
  prefs: []
  type: TYPE_NORMAL
- en: In the true serverless sense of the word, DocRaptor provides functionality to
    you without you having to write a lot of extra code. It is super easy to implement
    and super easy to maintain. The preceding example is really basic, but you can
    pass DocRaptor a URL instead of the `DocumentContent` to print the page you want.
    From the developer's perspective, they don't care how DocRaptor does what they
    do. It just works. And this is the idea behind serverless computing.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can implement solutions in their applications easily, effortlessly,
    and in record time, using minimal code while adding a lot of value to the application
    they're developing. The functionality being implemented can also easily scale
    as demand increases. There are, however, overage charges on the professional plan.
    Lastly, creating a few PDF documents will probably not make much of a difference
    in server computing power. Consider then that DocRaptor is used by some large
    companies that probably generate thousands of documents each month. All those
    document generation requests do not get processed by the customer using DocRaptor,
    but by the DocRaptor servers themselves.
  prefs: []
  type: TYPE_NORMAL
- en: You are then left with being able to develop a lightweight, streamlined web
    application that will not place huge demand on your server as volumes increase.
  prefs: []
  type: TYPE_NORMAL
- en: Using AWS and S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter can't be considered complete without looking at Amazon Web Services
    (AWS). The topic of AWS is really vast. There is a lot of functionality provided
    by the platform. Developers can harness this in their applications and provide
    rich functionality with minimal code on their part. AWS also has really good documentation
    that developers can review to get up to speed quickly. S3 is Amazon's Simple Storage
    Service and allows you to store and retrieve data in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: I enjoy playing Minecraft with my kids. Some of the things they create are mind
    boggling, especially since my daughter (who plays as CupcakeSparkle) is 7 years
    old and my son (who plays as Cheetah) is only 4 years old. My daughter has been
    playing Minecraft since she was 5 and as you can imagine, she has created quite
    a few incredible structures. Joseph Garrett is by far my kids' favorite YouTuber
    who plays as Stampy Cat. They watch his Let's Play videos religiously (including
    Building Time with Squid Nugget). We often have Building Time competitions of
    our own and Stampy Cat and his lovely world serve as an inspiration for my kids
    in everything they do in Minecraft.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the picture of Stampy Cat that my daughter built.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_23.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is the picture of Squid Nugget that my son built.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_24.png)'
  prefs: []
  type: TYPE_IMG
- en: So, I want to create a place to upload some of their Minecraft pictures, screenshots,
    and other documents related to our Minecraft adventures. For this, we will use
    S3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter assumes that you have signed up for an AWS account using the free
    tier. For more details regarding the free tier, navigate to [https://aws.amazon.com/free/](https://aws.amazon.com/free/).
    One section I want to highlight though is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: <q>The Amazon Web Services (AWS) Free Tier is designed to enable you to get
    hands-on experience with AWS Cloud Services. The AWS Free Tier includes services
    with a free tier available for 12 months following your AWS sign-up date, as well
    as additional service offers that do not automatically expire at the end of your
    12 month AWS Free Tier term.</q>
  prefs: []
  type: TYPE_NORMAL
- en: In order to sign up, you need to provide your credit card information. When
    the free tier period expires (or if your application exceeds the usage limitations),
    you will be charged the pay-as-you-go service rates. Regarding S3 specifically,
    the free tier allows 5GB of storage, 20,000 get requests and 2,000 put requests.
    First you will need to create an S3 bucket. From the Services selection, locate
    the Storage group and click on S3.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create your first bucket. I named mine `familyvaultdocs` and selected the EU
    (Frankfurt) region. Click on Next until you have completed the creation of the
    bucket.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After the bucket is created, you can review the permissions for the bucket.
    For simplicity's sake I have selected that Everyone has Read and Write permissions
    for Object access and Permissions access.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, you will also need to create an access key and secret key for your application.
    From the Services, look for the Security, Identity & Compliance group and click
    on IAM (**Identity and Access Management**). Add a user with the Access type of
    Programmatic access. This will provide you with the access key ID and secret access
    key you need.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With your bucket created, user permissions set to Everyone and access keys created,
    let's write some code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will just create a console application that will upload the picture to the
    S3 bucket we created earlier. Start off by opening the NuGet Package Manager and
    adding the AWSSDK NuGet package to your Console Application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It might be worth your while to have a look at the AWS SDK for .NET at the following
    link [https://aws.amazon.com/sdk-for-net/](https://aws.amazon.com/sdk-for-net/).
    This helps developers get up to speed quickly with the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a class called `StampysLovelyWorld` and a method called `SaveStampy()`.
    There is really nothing complicated about the code. Create a client object that
    specifies the region of your bucket, create the `TransferUtilityUploadRequest`
    object that specifies the file to upload, the bucket name and directory and, lastly,
    upload the file to the bucket via a `TransferUtility`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The AWS `RegionEndpoint` enumeration for EU (Frankfurt) is `EUCentral1`. Refer
    to the following link on the AWS Regions and Endpoints [https://docs.aws.amazon.com/general/latest/gr/rande.html.](https://docs.aws.amazon.com/general/latest/gr/rande.html.)
  prefs: []
  type: TYPE_NORMAL
- en: In reality, we would probably enumerate the contents of a folder or even allow
    the user to select several files. This class is only to illustrate the concept
    of uploading a file to our bucket. As you will see, this code is really uncomplicated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the `static void Main` method of the console application, specify the bucket
    name you created earlier, a folder to create in the bucket and the filename you
    want in the S3 folder. Pass these along with the path to your file, to the `SaveStampy()`
    method in the `StampysLovelyWorld` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The last thing we need to do is add the access key and secret key to the App.config
    file of our console application. Just add an `<appSettings>` section and add the
    keys listed here. You will obviously use the access key and secret key you generated
    in the IAM earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run your console application. After the file is uploaded, your console application
    will just display the text uploaded in the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swing back to your `familyvaultdocs` bucket in AWS and click on the refresh
    icon next to the EU (Frankfurt) region. You will see the folder `MinecraftPictures`
    you specified in code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the folder, you will see the contents listed. I previously uploaded
    the `SquidNugget.png` image, but the `StampyCat.png` image we uploaded in our
    code sample has been prefixed with the date as specified in code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The code is run and the files are added almost immediately. Admittedly they
    aren't very big files, but this goes to show how easy it is to add a simple storage
    service to AWS and integrate that with a .NET application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating C# Lambda functions with AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the 1st of December 2016, Amazon announced that C# was now a supported language
    for AWS Lambda. This is therefore really fresh off the press, so to speak, and
    developers can experiment with using AWS Lambda in their .NET applications. AWS
    Lambda allows you to deploy your code to AWS and not have to worry about the machines
    the code runs on or even worry about the scaling of those machines when demand
    increases. Your code will just work. This is really great for mobile developers.
    Up until December, AWS Lambda only supported Node.js, Pythos, and Java. Let's
    take a look at how to create a Lambda function in Visual Studio 2017 using C#.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to ensure that you have downloaded and installed the preview of the
    AWS Toolkit for Visual Studio 2017\. At the time of this writing, the toolkit
    could be found at this link: [https://aws.amazon.com/blogs/developer/preview-of-the-aws-toolkit-for-visual-studio-2017/](https://aws.amazon.com/blogs/developer/preview-of-the-aws-toolkit-for-visual-studio-2017/).
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an earlier version of Visual Studio, download the AWS Toolkit
    from this link: [https://aws.amazon.com/visualstudio/](https://aws.amazon.com/visualstudio/).
    This version of the toolkit supports Visual Studio 2015 and also allows you to
    download legacy versions for Visual Studio 2010-2012 and Visual Studio 2008\.
    After you have downloaded and installed the toolkit, you are ready to create your
    first AWS Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Launch Visual Studio and create a new project. Under the Visual C# templates,
    you will see a new type called AWS Lambda. Click on the AWS Lambda Project (.NET
    Core) template. That's right, these are .NET Core apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next screen will allow us to select a blueprint. For our purposes, we will
    just select a Simple S3 Function blueprint that responds to S3 event notifications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The function is created and your Solution Explorer in Visual Studio will look
    as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code that is added to the `Function.cs` file is simply a class that has
    at its heart a method called `FunctionHandler()`. You will also notice an assembly
    attribute at the top of the class as follows: `[assembly: LambdaSerializerAttribute(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]`.
    This is required and registers the  Lambda JSON serializer that is using `Newtonsoft.Json`
    to create our typed class. Since this code just works, I will not spend much time
    on explaining it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can now publish the function to AWS directly from within Visual Studio.
    Right-click on the project that you created and from the context menu, select
    Publish to AWS Lambda....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You now need to complete the deployment wizard. Give your function a name, and
    if you do not have an account profile selected, add one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For your AWS Lambda function, be sure to select the same region as that of your
    S3 bucket created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an account profile is really easy. This is the account you configured
    in IAM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking next will allow you to select the IAM Role Name that provides access
    permissions to S3 and our function. This is configured in the **IAM** (**Identity
    and Access Management**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Upload to upload the function to AWS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B06434_17_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Take note, however, that there might be several permission issues encountered
    at this step. You might encounter something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can in fact receive several such errors when trying to upload your function
    to AWS. The Identity and Access Management area in AWS is your friend here. You
    should have a look at the user you are using (in this case the user is S3Lambda)
    and review the permissions attributed to the user. Here, the error is informing
    us that the user S3Lambda does not have permission to create the function on AWS
    for the S3LambdaFunction resource. Modify your permissions and try uploading again.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you have uploaded your function to AWS, click on the View menu in Visual
    Studio and select the AWS Explorer. Expanding the AWS Lambda node will show us
    the function we previously uploaded. If you see an error when expanding the node,
    you might need to give your user the ListFunctions permission. Expanding the AWS
    Identity and Access Management node will also show you the users, groups and roles
    you have configured. You can easily test your AWS Lambda function from within
    Visual Studio here by selecting one of the Example Requests and clicking on the
    Invoke button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What we want to do, however, is hook up our S3 that stores files to send events
    to our function. Click on the Event Sources tab and click the Add button. Select
    Amazon S3 as the Source Type and select the `familyvaultdocs` bucket we created
    in the previous recipe. When you are done, click on the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the console application in the previous recipe to upload a new file
    to our S3 bucket will trigger our Lambda function. We can confirm this by looking
    at the Logs section in our function view.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also upload files from the AWS Explorer. Expand the Amazon S3 node and
    click on the Upload File button to the bucket.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your file is uploaded and the progress is shown in the status window at the
    bottom.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06434_17_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While this example is not too complicated (with the exception of the permission
    settings perhaps), it does illustrate the concept of AWS Lambda functions. We
    can use the function to do a host of actions when triggered from something as
    simple as an event in an S3 bucket. Start to combine functionality and you can
    create a very powerful, serverless module to support and enhance your applications.
  prefs: []
  type: TYPE_NORMAL
- en: It does not matter if you are using AWS, Azure or something such as DocRaptor
    (or any of the other 3rd party services available). Serverless computing is here
    to stay and C# Lambda functions will change the face of development in a big way.
  prefs: []
  type: TYPE_NORMAL
