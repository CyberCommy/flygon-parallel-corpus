- en: '*Chapter 8*: Working with WSL Distros'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023), *Installing
    and Configuring the Windows Subsystem for Linux*, in the *Introducing the wsl
    command* section, we saw how we can use the `wsl` command to list the **distributions**
    (**distros**) that we have installed, run commands in them, and terminate them
    as needed.
  prefs: []
  type: TYPE_NORMAL
- en: We will revisit distros in this chapter, this time looking at them from more
    of a distro management perspective. In particular, we will look at how you can
    use the `export` and `import` commands to back up a distro or copy it to another
    machine. We will also look at how you can quickly create a new distro based on
    a Docker container image to enable you to easily create your own distros ready
    with any dependencies installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and importing a WSL distro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and running a custom distro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start the chapter by looking at how to export and import WSL distros.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and importing a WSL distro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have invested time in setting up a WSL distro, you may wish to be able
    to copy it to another machine. This could be because you are replacing or reinstalling
    your machine, or maybe you have multiple machines and want to copy a configured
    distro to a second machine rather than setting up the distro from scratch. In
    this section, we will look at how to export a distro to an archive file that can
    be copied to another machine and imported.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by preparing the distro for exporting.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for exporting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we export a distro, we want to make sure that the default user for the
    distro is set in the `/etc/wsl.conf` file inside the distro (you can read more
    about `wsl.conf` in [*Chapter 2*](B16412_02_Final_JC_ePub.xhtml#_idTextAnchor023),
    *Installing and Configuring the Windows Subsystem for Linux*, in the *Introducing
    wsl.conf and .wslconfig* section). By doing this, we can ensure that WSL still
    uses the correct default user for our distro after we have imported it later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a terminal in your WSL distro and run `cat /etc/wsl.conf` to inspect
    the contents of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of this output, you can see the `[user]` section with the `default=stuart`
    entry. If you don''t have the default user entry (or you don''t have a `wsl.conf`),
    then you can use your favorite editor to ensure that there is an entry similar
    to this (with the correct username). Alternatively, you can run the following
    command to add a user (assuming your `wsl.conf` doesn''t have a `[user]` section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command uses `echo` to output the `[user]` section with the default set
    to the current user. It embeds the result of calling `whoami` to get the current
    username. The whole command is wrapped and executed using `sudo` to ensure it
    has the necessary permissions to write to the file.
  prefs: []
  type: TYPE_NORMAL
- en: With this preparation complete, let's look at how to export the distro.
  prefs: []
  type: TYPE_NORMAL
- en: Performing the export
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To export the distro, we will use the `wsl` command to export the contents
    of a distro to a file on disk. To do this, we run `wsl --export`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we specify the name of the distro we want to export (`Ubuntu-18.04`)
    followed by the path to where we want the export to be saved (`c:\temp\Ubuntu-18.04.tar`).
    The export will take a few moments to complete, depending on the size of the distro
    and the amount of content within it.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the export process, the distro is unavailable for use, as shown with
    the `wsl --list` command (executed in a separate terminal instance):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this output, you can see that the state of the `Ubuntu-18.04` distro is shown
    as `Converting`. Once the export command completes, the distro will be in the
    `Stopped` state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exported file is an archive in the **TAR** format (originally short for
    **Tape Archive**) that is common to Linux. If you open the TAR file (for example,
    in an application such as 7-zip from [https://www.7-zip.org/](https://www.7-zip.org/)),
    you can see the contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – A screenshot showing the exported TAR open in 7-zip'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16412_Figure_8.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – A screenshot showing the exported TAR open in 7-zip
  prefs: []
  type: TYPE_NORMAL
- en: In this screenshot, you can see that the exported TAR file contains the familiar
    folders of a Linux system. You can drill down to folders such as `/home/stuart`
    and export individual files if you wish to.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an exported file for our distro, let's look at how to import
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Performing the import
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have the export file for your distro, you can copy it to the new machine
    (assuming you are transferring the distro) or leave it in the same place if you
    are using the export/import to create a copy of a distro.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform the import, we will use the following `wsl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this time we use the `--import` switch. After that, we pass
    the following three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ubuntu-18.04-Copy`: This is the name for the new distro that will be created
    by the import.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\wsl-distros\Ubuntu-18.04-Copy`: This is the path where the state for the
    new distro will be stored on disk. Distros installed via the Store are installed
    in folders under `$env:LOCALAPPDATA\Packages` and you can use this path if you
    prefer to keep your imported distros in a similar location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\temp\Ubuntu-18.04.tar`: The path to the TAR file with the exported distro
    that we want to import.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As with the export, the import process can take a while if there is a lot of
    content. We can see the state by running `wsl` in another terminal instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this output, we can see that the new distro (`Ubuntu-18.04-Copy`) shows as
    being in the `Installing` state during the import. Once the `import` command is
    complete, the new distro is ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: As you've seen here, by exporting a distro to a TAR file that can be imported,
    you have a way to create a clone of a distro on your machine, for example, to
    test some other applications without affecting the original distro. By copying
    the TAR file between machines, it also gives you a way to copy distros that you
    have configured between machines to reuse them.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll take a look at how you can create your own distro.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and running a custom distro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you work across multiple projects, each with their own sets of tools, and
    you like to keep the dependencies separate, then running a distro for each project
    might be appealing. The technique we've just seen for exporting and importing
    distros gives you a way to achieve this by making a copy of a starting distro.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at an alternative approach using Docker images.
    There is a large range of images published on Docker Hub, including images that
    have various developer toolsets installed. As we will see in this section, this
    can be a quick way to get a distro installed for working with a new toolset. In
    [*Chapter 10*](B16412_10_Final_JC_ePub.xhtml#_idTextAnchor125), *Visual Studio
    Code and Containers*, we will see an alternative approach, using containers directly
    to encapsulate your development dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started, it is worth noting that there is another approach to
    building a custom distro for WSL, but that is a more involved process and doesn't
    fit the scenario for this section. It is also the route to publish a Linux distro
    to the Store – details can be found at [https://docs.microsoft.com/en-us/windows/wsl/build-custom-distro](https://docs.microsoft.com/en-us/windows/wsl/build-custom-distro).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at how to use containers to set up a distro ready
    for working with .NET Core (but this process will work for any tech stack that
    you can find a container image for). We will use Docker Hub to find the image
    we want to use as the base for our new WSL distro and then configure a running
    container so that it will work smoothly with WSL. Once we have the container set
    up, we will export it to a TAR file that can be imported as we saw in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started by finding the image we want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Finding and pulling the container image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to find the container we want to use as a starting point.
    After searching for `dotnet` on Docker Hub ([https://hub.docker.com/](https://hub.docker.com/)),
    we can scroll down to find the images from Microsoft, which will lead us to this
    page ([https://hub.docker.com/_/microsoft-dotnet-core](https://hub.docker.com/_/microsoft-dotnet-core)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – A screenshot of the .NET images page on Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16412_Figure_8.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – A screenshot of the .NET images page on Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in this screenshot, there are a number of images available for
    .NET. For this chapter, we will use the .NET 5.0 image, and the SDK image in particular,
    as we want to be able to test building applications (rather than just running
    applications that the runtime images are designed for).
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking through to the `dotnet/sdk` page, we can find the image tag we
    need to use to pull and run the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – A screenshot showing the .NET 5.0 SDK image tag on Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16412_Figure_8.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – A screenshot showing the .NET 5.0 SDK image tag on Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: As this screenshot shows, we can run `docker pull mcr.microsoft.com/dotnet/sdk:5.0`
    to pull the image to our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have found the image we want to use as the starting point for a
    new distro, there are a few steps to get it ready to use with WSL. Let's see what
    these are.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a container ready for WSL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can export the image that we just pulled from Docker Hub, we need
    to make a few tweaks so that it fits in cleanly with WSL:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we will create a running container from the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing to set up will be a user for WSL to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add the `/etc/wsl.conf` file to tell WSL to use the user that we just
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We could do additional configuration at this stage (and we will look at some
    examples in the *Taking it further* section later in this chapter), but for now
    the basic preparations are complete, so let's convert the container to a WSL distro.
  prefs: []
  type: TYPE_NORMAL
- en: Converting the container to a WSL distro
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first section of this chapter, we saw how we can export a WSL distro
    to a TAR file and then import that TAR file as a new distro (on the same or a
    different machine).
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately for us, Docker provides a way to export containers to a TAR file
    that is compatible with the format that WSL uses. In this section, we will take
    the container that we just configured and use the export/import process to convert
    it to a WSL distro.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we export, let''s quit the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This output shows running the `exit` command to exit from the `bash` instance
    in the container. This causes the container process to exit and the container
    is no longer running. By running `docker ps -a`, we can see a list of all containers
    (including those that are stopped), and we can see the container we have been
    working with listed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can export the Docker container to a TAR file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using the `docker export` command. The `-o` switch provides the
    path for the output TAR file, and the final argument is the name of the container
    we want to export (`dotnet`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this command completes (which may take a while), we have the TAR file
    ready to import with the `wsl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `import` command is the same as in the earlier section. The first argument
    is the name of the distro we want to create, `dotnet5`; the second specifies where
    WSL should store the distro; and finally, we give the path to the TAR file we
    want to import.
  prefs: []
  type: TYPE_NORMAL
- en: Once this is complete, we have created a new WSL distro and we are ready to
    run it.
  prefs: []
  type: TYPE_NORMAL
- en: Running the new distro
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve created a new distro, we can take it for a test. Let''s start
    up a new instance of `bash` in the distro and check what user we are running as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we start `bash` in the `dotnet5` distro we just created and run `whoami`.
    This shows that we are running as the `stuart` user that we created and configured
    in the container before importing it as a distro.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can test running `dotnet`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, let''s create a new web app with `dotnet new`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can change directory to the new web app and run it with `dotnet run`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this approach gives us a nice way to quickly create a new, separate
    WSL distro and this can be used to split up different dependencies across projects.
    This approach can also be used to create temporary distros to try out previews
    without installing them in your main distro. In this case, you can use `wsl --unregister
    dotnet5` to delete the distro when you are finished with it and free up the disk
    space.
  prefs: []
  type: TYPE_NORMAL
- en: The process we used here required us to execute some steps interactively, which
    is fine in many situations. If you find yourself repeating these steps, you may
    wish to make them more automated, and we will look at that next.
  prefs: []
  type: TYPE_NORMAL
- en: Taking it a step further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've seen how we can work with Docker interactively to set up a container
    that can be exported as a TAR and then imported as a WSL distro. In this section,
    we will look at how to automate this process, and as part of the automation, we
    will add in some extra steps to refine the image preparation that we performed
    previously.
  prefs: []
  type: TYPE_NORMAL
- en: The basis for the automation of the container configuration is the `Dockerfile`
    that we saw in [*Chapter 7*](B16412_07_Final_JC_ePub.xhtml#_idTextAnchor082),
    *Working with Containers in WSL*, in the *Introducing Dockerfiles* section. We
    can use a `Dockerfile` to build an image, then we can follow the previous steps
    to run a container from the image and export the file system to a TAR file that
    can be imported as a WSL distro.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Dockerfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `docker build` command allows us to pass a `Dockerfile` to automate the
    steps to build a container image. A starting point for this `Dockerfile` is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `Dockerfile`, we specify the starting image in the `FROM` step (the
    same `dotnet/sdk` image we used previously) before using a couple of `ARG` statements
    to allow the `USERNAME` and `PASSWORD` to be passed in. After this, we `RUN` a
    number of commands to configure the image. Typically, in a `Dockerfile`, you would
    see these commands concatenated as a single `RUN` step to help reduce the number
    and size of the layers, but here, we''re just going to export the full file system,
    so it doesn''t matter. Let''s take a look at the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: We have `useradd`, which we used previously to create our user and here we use
    it with the `USERNAME` argument value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `passwd` command expects the user to input the password twice, so we use
    `echo` to output the password twice with a line break between and pass this to
    `passwd`. We call `bash` to run this so that we can use `\n` to escape the line
    breaks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `echo` again to set the `/etc/wsl.conf` content to configure the default
    user for WSL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We call `usermod` to allow the user to run `sudo` by adding the user to the
    `sudo`ers group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we use `apt-get` to install the `sudo` utility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, this list covers the steps that we previously ran manually plus
    a couple of others to set up `sudo` to make the environment feel a bit more natural.
    You can add any other steps you want here, and this `Dockerfile` can be reused
    for other Debian-based images by changing the `FROM` image.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can use Docker to build an image from the `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the TAR file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have a `Dockerfile`, we need to call Docker to build the image
    and create the TAR file. We can use the following commands to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This set of commands perform the required steps to create the TAR file from
    the `Dockerfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: Run `docker build` specifying the image name to create (`dotnet-test`), the
    input `Dockerfile`, and the values for each `ARG` we defined. This is where you
    can set the username and password you want to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a container from the image with `docker run`. We have to do this to be
    able to export the container file system. Docker does have a `save` command but
    that saves images complete with their layers and this isn't the format that we
    need to import to WSL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `docker export` to export the container file system to a TAR file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the container with `docker rm` to free space and make it easy to rerun
    the commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this point, we have the TAR file and we can run `wsl --import` as we saw
    in the previous section to create our new WSL distro:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will create a `chapter-08-dotnet` distro with the specified user and configuration
    that we applied in the `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these scriptable commands, it becomes easy to create new distros. You
    can add steps to the `Dockerfile` to add other applications or configurations.
    For example, if you are going to be working with Azure in that distro, you might
    want to install the Azure CLI for convenience by adding the following line to
    your `Dockerfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This `RUN` command is based on the install instructions in the Azure CLI documentation
    ([https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest)).
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can easily script the creation of new WSL distros configured
    for your needs. This is a powerful tool in your toolkit whether you plan to keep
    them around for a long time or just treat them as temporary, disposable environments.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've seen how to use the WSL `export` and `import` commands.
    These commands allow you to copy your distros to other machines, or to back up
    and restore your distros when you reinstall your machine. They also provide a
    way to clone your distros if you want to experiment or work in a copy of a distro
    without affecting the original.
  prefs: []
  type: TYPE_NORMAL
- en: You also saw how to build new distros using *containers*. This provides a productive
    way to set up new distros to work in or to quickly test applications without affecting
    your original distros. It can also be a great way to set up per-project distros
    if you have different technology stacks between projects and want to have some
    isolation between their dependencies. Being able to create these distros in a
    scripted way helps to boost productivity if you find yourself using this multi-distro
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: As we progress with scripting the creation of these environments through the
    use of Dockerfiles, we move closer to working with containers. We will explore
    how to continue on this journey and use containers directly for development work
    in [*Chapter 10*](B16412_10_Final_JC_ePub.xhtml#_idTextAnchor125), *Visual Studio
    Code and Containers*.
  prefs: []
  type: TYPE_NORMAL
- en: Before that, the next chapter will introduce Visual Studio Code, a powerful
    and free editor from Microsoft, and explore how it allows us to work with source
    code in WSL.
  prefs: []
  type: TYPE_NORMAL
