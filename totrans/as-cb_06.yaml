- en: Chapter 6. Capture and Share
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We love to share the world we live in with others, so we will use our smartphones
    to take images or videos of all the things and all the people we care about. With
    Android, this is pretty easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Capturing images the easy way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image capturing using the Camera2 API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orientation issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, you can just launch an intent, grab the data, and do with it
    whatever you want.
  prefs: []
  type: TYPE_NORMAL
- en: Things become a little bit more complicated if you want to handle image or video
    capturing yourself. So, why would someone want to do that in the first place?
    It gives us more flexibility in the way the camera is being previewed, filtered,
    or handled.
  prefs: []
  type: TYPE_NORMAL
- en: With Android Lollipop onwards, the old Camera API that we had been using has
    been replaced with the Camera2 API, which has turned out to be a huge improvement.
    Unfortunately, some orientation issues remain, mostly due to the large fragmentation
    of Android hardware and software. On some devices, captured images seem to be
    rotated 90 degrees. Why is that? You will find out in the last recipe in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing images the easy way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are of course, many ways on Android to take a picture or record a video.
    The easiest way to capture an image is by using an intent to launch the camera
    app and grabbing the results once the image has been taken.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you just need to have Android Studio up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Launching a camera intent typically goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: In Android Studio, create a new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `activity_main.xml` layout, add a new button and an image view. Name
    the image view `image`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an on-click handler for that button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the `takePicture` method from the event handler implementation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the `takePicture` method. If supported by the device, launch the
    capture intent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Override the `onActivityResult` method. You will get the thumbnail from the
    data being returned and display the result in the image view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is the easiest way to capture an image, and perhaps you have already done
    it this way before.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to preview the image within your own app, there is more work to
    do. The Camera2 API can be used for previewing, capturing, and encoding purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Within the Camera2 API, you will find components such as `CameraManager`, `CameraDevice`,
    `CaptureRequest`, and `CameraCaptureSession`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listed here are the most important Camera2 API classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class | Objectives |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CameraManager` | Select camera, create camera device |'
  prefs: []
  type: TYPE_TB
- en: '| `CameraDevice` | `Create CaptureRequest`, `CameraCaptureSession` |'
  prefs: []
  type: TYPE_TB
- en: '| `CaptureRequest, CameraBuilder` | Link to surface view (previewing) |'
  prefs: []
  type: TYPE_TB
- en: '| `CameraCaptureSession` | Capture an image and display it on the surface view
    |'
  prefs: []
  type: TYPE_TB
- en: The sample that we are going to investigate in the next recipe, *Image capturing*,
    may look a bit confusing at first. This is mostly because the setup process requires
    many steps, and most of them will be executed asynchronously. But do not worry,
    though - we will investigate it step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Image capturing using the Camera2 API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us share the world around us with the ones we love. It all starts with previewing
    and capturing it. That is what this recipe is all about. We will also go back
    to those good old days when photos were sepia toned.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many apps, such as Instagram, that provide options to add filters
    or effects to your photos. What would happen if sepia were the only option for
    filtering and sharing your pictures? Maybe we can set a trend. #EverybodyLovesSepia!'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the Camera2 API to capture an image, based on Google''s Camera2
    Basic sample that is available on GitHub. As a reference for the steps in the
    recipe, you can have a look at the following class diagram. It will make clear
    what classes we are dealing with and how they interact with each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image capturing using the Camera2 API](img/B04299_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will investigate what exactly is in there, and once you have found out what
    is going on, we will add a little bit of ourselves to it by making the preview
    and the captured image appear in sepia (or another effect, if you prefer).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the Camera2 API. As we will be using this
    API, you need to have a real device that is running Android 5.0 or above (recommended),
    or you will need to create a virtual device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can get up to speed quickly. Google has already
    prepared a neat example for us:'
  prefs: []
  type: TYPE_NORMAL
- en: In Android Studio, choose **Import Android code sample** from the launch wizard,
    or choose **Import Sample** on the **File** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog you will see many interesting sample apps demonstrating various
    Android features. Choose the **Camera2 Basic** sample, and click on the **Next**
    button:![How to do it...](img/B04299_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your project `EverybodyLovesSepia` and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If nothing happens after clicking on the button (due to a bug in some versions
    of Android Studio), try again, but leave the project name unchanged this time.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio will get the sample project from GitHub for you. You can find
    it at [https://github.com/googlesamples/android-Camera2Basic](https://github.com/googlesamples/android-Camera2Basic)
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app on a device or on a virtual device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using a virtual device running on Genymotion, enable the camera first
    by clicking on the camera icon on the right, turning the camera switch on, and
    selecting a (web) camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the app, you will see a preview of the camera, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04299_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A lot of things have happened automatically again! What is in this Camera2 API
    sample? What is needed to capture an image? Actually, quite a lot is needed. Open
    the `Camera2BasicFragment` class. This is where most of the magic happens.
  prefs: []
  type: TYPE_NORMAL
- en: Collapsing all methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a less overwhelming view, collapse all methods:'
  prefs: []
  type: TYPE_NORMAL
- en: You can do this by choosing the **Folding** option from the **Code** menu. In
    the submenu, choose **Collapse all**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also find other options in this submenu; for example, **Expand all**
    methods or **Expand** (which expands only the selected method).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the shortcuts *Cmd* followed by *+* and *Cmd* followed by *–* (or *Ctrl*
    with *+* and *Ctrl* with *–* for Windows) to expand or collapse a method, respectively.
    Use the shortcuts *Cmd* + *Shift* with *+* and *Cmd* + *Shift* with *–* (*Ctrl*
    + *Shift* and *+* and *Shift* + *Ctrl* and *–* for Windows) to expand or collapse,
    respectively, all methods within a class.
  prefs: []
  type: TYPE_NORMAL
- en: Expand the `onViewCreated` method. Here, we see the initialization of `mTextureView`,
    which is a reference to the custom widget `AutoFitTextureView`. It will display
    the camera preview.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, expand the `onResume` method. Initially, this is where the `SurfaceTextureListener`
    class will be set. As the comments in the sample already suggest, this allows
    us to wait for the surface to be ready before we try to open a camera. Double
    click on `mSurfaceTextureListener` and jump to its declaration using the shortcut
    *Cmd* + *B* (for Windows, that's *Ctrl* + *B*) to see what this is about.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fully expand the initialization of `mSurfaceTextureListener`. Just like an activity,
    the texture view has a life cycle. Events are being handled here. For now, the
    most interesting one here is the `onSurfaceTextureAvailable` event. As soon as
    the surface is available, the `openCamera` method will be called. Double-click
    on it and jump to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many things happen in the `openCamera` method. There is a call to the `setUpCameraOutputs`
    method. This method will handle which camera to use (if there are multiple ones)
    by setting the private member `mCameraId` and the (preview) size of the image.
    This may be different for each type of device. It will also take care of the aspect
    ratio. Almost any device supports the 4:3 aspect ratio, but many also support
    16:9 or other aspect ratios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most devices have one or two cameras on board. Some have only a back camera
    and some have only a front camera. Front cameras often support fewer image sizes
    and aspect ratios.
  prefs: []
  type: TYPE_NORMAL
- en: Also, with the new permission policy that comes with Android Marshmallow (Android
    6.0), your app may not be allowed to use any camera at all. This means that you
    always need to test whether or not the cameras functionality is available to your
    app. You will have to provide some feedback to your user by displaying a dialog
    or toast if it cannot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s have a look at the following line in the `openCamera` method.
    It says to open the camera that the `setCameraOutputs` method has selected for
    us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It also provides a `mStateCallback` parameter. If you double-click on it and
    jump to it, you can see its declaration. Things are again happening asynchronously
    here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as the camera has been opened, the preview session will be started.
    Let's jump to the `createCameraPreviewSession` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a look at `mCameraDevice.createCaptureSession`. One of the parameters that
    go into that method is a capture session state callback. It is used to determine
    whether or not the session is configured successfully so the preview can be shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, what needs to be done to take a picture? Find the `onClick` method. You
    will notice a call to the `takePicture` method. Jump to it. The `takePicture`
    method in turn calls the `lockFocus` method. Jump to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Taking a picture involves several steps. The focus of the camera has to be
    locked. Next, a new capture request needs to be created and the `capture` method
    needs to be called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: One of the parameters that go into `capture` method is `mCaptureCallback`. Jump
    to its declaration using *Cmd* + *B* (or *Ctrl* + *B* for Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice two methods: `onCaptureProgressed` and `onCaptureCompleted`.
    They both call the private method `process` and pass the result or partial result
    to it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `process` method will act differently on the various possible states. Finally,
    it will call the `captureStillPicture` method. Go to its declaration using *Cmd*
    + *B* (or *Ctrl* + *B* for Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `captureStillPicture` method initializes a `CaptureRequest.Builder` class,
    which is used to take the picture and store it with the right properties, such
    as orientation information. Once the capturing is completed and the file has been
    saved, the camera focus is unlocked and the user is notified through a toast:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding steps showed you the highlights of the basic (!) Camera2 example
    app. Quite a bit of work for just taking a picture within your app! If you do
    not need a preview within your app, you may want to consider taking pictures just
    using an intent. However, having your own preview gives you more flexibility for
    controls and effects.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the sepia effect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will add a sepia effect to the preview just because it looks cool (and because
    of course, everything used to be better in the early days), using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `createCameraPreviewSession` method, and within the `onConfigured`
    class of the camera capture session state call back implementation, add this line
    just before setting the `autofocus` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run your app now, your preview will be in sepia. However, if you press
    the button to capture an image, it will not have this effect. In the `onCaptureStillPicture`
    method, you will have to do the same thing. Add this line just above the line
    that sets the `autofocus` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run your app one more time, capture an image, and find the captured file using
    the Astro app (or another file browser app). You can find it at `Android/data/com.example.android.camera2basic`
    (Obviously that is if you have accepted the suggested package name or else the
    path includes the package name you have provided). Sepia it is!
  prefs: []
  type: TYPE_NORMAL
- en: If you like, you can perform some further experiments with the negative or any
    of the other available effects, which is fun too, at least for a while.
  prefs: []
  type: TYPE_NORMAL
- en: That is it for now. We haven't done much programming yet, but we have looked
    at some interesting pieces of code. In the next recipe, we will share our captured
    image on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information, check out GitHub at [https://github.com/googlesamples/
    android-Camera2Basic](https://github.com/googlesamples/ android-Camera2Basic)
    and the Google Camera2 API reference at [https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html).
  prefs: []
  type: TYPE_NORMAL
- en: An interesting fork of the Camera2 API sample, with QR code scanning support
    can be found at [https://github.com/ChristianBecker/Camera2Basic](https://github.com/ChristianBecker/Camera2Basic).
  prefs: []
  type: TYPE_NORMAL
- en: Image sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Image capturing is no fun without the ability to share images; for example,
    on Facebook. We will be using the Facebook SDK for that.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge! If you are building an app running on a Parse backend, as we did
    in [Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"),
    *Applications with a Cloud-based Backend*, there is no need for that, as the Facebook
    SDK is already in there. If you want, you can combine the recipes from [Chapter
    2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"), *Applications
    with a Cloud-based Backend* with this one, and create a real cool app real quick!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have the previous recipe completed successfully
    and you need to have a real Android device (or a virtual one, but this will require
    some additional steps).
  prefs: []
  type: TYPE_NORMAL
- en: You also need to have a Facebook account, or you can create one just for testing
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can share our sepia captured image on Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the code from the previous recipe. Open the `build.gradle` file in the
    `app` folder. Add a new dependency to the `dependencies` section, and click on
    the **Sync now** link that will appear after you have added this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To obtain a Facebook app ID, browse to [https://developers.facebook.com](https://developers.facebook.com)
    (yeah, this requires a Facebook account). From the **MyApps** menu, choose **Add
    a new app**, select **Android** as your platform, enter a name for your app, and
    click on **Create new Facebook App ID**. Choose a category- for example, **Entertainment**-
    and click on **Create App ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your app will be created, and a QuickStart page will be shown. Scroll down all
    the way to the **Tell us about your Android project** section. Enter details in
    the **package name** and **default activity class name** fields, and click on
    the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up warning will be shown. You can safely ignore the warning and click
    on the **Use this package name** button. Facebook will start thinking, and after
    a while the section **Add your development and release key hashes** will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To obtain development key hashes, open the Terminal app (in Windows, start
    Command Prompt) and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If prompted for the keystore password, enter `android`, which should do the
    trick - unless you have changed the password previously, of course.
  prefs: []
  type: TYPE_NORMAL
- en: Hit *Enter*, copy the value that is shown, and paste it into the Facebook web
    page at **Development Key Hashes**. Click on the **Next** button to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the section **Next Steps**, click on the **Skip to developer dashboard**
    button. It will bring you straight to the information you need, the app ID. Copy
    the value in the **App ID** field:![How to do it...](img/B04299_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, initialize the Facebook SDK. Open the `CameraActivity` class, and within
    the `onCreate` method, add the following line just after the `super.OnCreate`
    line. Use the *Alt* + *Enter* shortcut to import the required package `com.facebook.FacebookSdk`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to tell the app about the Facebook app ID. Open the `strings.xml`
    file from the `res/values` folder. Add a new string that will contain your Facebook
    app id:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Open the `AndroidManifest.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a metadata element to the `application` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `FacebookActivity` declaration to the `manifest` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Camera2BasicFragment` class, locate the `captureStillPicture` method.
    Add a new call to the end of the `onCaptureCompleted` callback implementation,
    just after the `unlockFocus` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add a provider to the `manifest` file (within the `application` section),
    which will allow you to share images on Facebook. The next chapter will discuss
    content providers. For now just append your app ID to the end of `FaceBookContentProvider`
    at `authorities`, replacing the zeros in the example shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `sharePictureOnFacebook` method. We will load the bitmap from
    the file. In a real app, we would have to calculate the required value for `inSampleSize`,
    but for the sake of simplicity, we will just use a fixed `inSampleSize` setting
    of `4` here. On most devices, this will be sufficient to avoid any `OutOfMemory`
    exceptions that may occur otherwise. Also, we will add the photo to the `share`
    dialog that will be displayed after taking a picture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To be on the safe side, we want to create a unique file name for each picture.
    Modify the `onActivityCreated` method to do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The page will look like this on your Facebook timeline. Here it is shown in
    the Dutch language:![How to do it...](img/B04299_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app and share some sepia images on your own Facebook timeline!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our app is fully functional already, although it may require a few tweaks. On
    my Samsung device, all images that I have captured in portrait mode are rotated
    90 degrees. That is just a little bit too artistic. Let's fix it in the next recipe!
  prefs: []
  type: TYPE_NORMAL
- en: Orientation issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On some devices (such as the Samsung ones), captured images in portrait mode
    are rotated 90degrees; and on other devices (such as the Nexus devices), things
    seem to be just fine. You won't notice this if you have a look at the file using
    the Astro app, for example, but you will if you see the preview in the Facebook
    **share** dialog.
  prefs: []
  type: TYPE_NORMAL
- en: This is a well-known challenge for many Android developers. Images may contain
    metadata about the rotation degree, but apparently not every app respects that
    metadata. What is the best solution? Should you rotate the image every time you
    want to display it? Should you rotate the bitmap itself, which could be very time
    and processor consuming?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have the previous recipe completed successfully.
    It would be ideal if you had multiple Android devices to test your app on. Otherwise,
    it would be great if you had at least a Samsung device available, as the orientation
    issue can be reproduced for most (if not all) models from this brand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at how you can fix this orientation issue if it appears:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Facebook **share** dialog, the preview image is rotated 90 degrees (on
    some devices), as shown here:![How to do it...](img/B04299_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This does not look like the world I live in. It appears this way on my Samsung
    Galaxy Note 3 device, but not on my Nexus 5 device. Apparently, Samsung stores
    the picture as it is from a landscape point of view, and then adds metadata to
    it to indicate that the image has been rotated (compared to the default orientation).
    Things, however, will go wrong if you want to share it on Facebook, for example,
    as the orientation information in the metadata is not being respected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, we need to examine the meta data and find out if there is any rotation
    information in there. Add the `getRotationFromMetaData` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If needed, you have to rotate the bitmap before showing the sharing preview.
    That is where the `rotateCaptureImageIfNeeded` method comes in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we can safely rotate the bitmap in memory, because of the `inSampleSet`
    value of `4`. If you rotate the original full-size bitmap, chances are that you
    will run out of memory. Either way, it is going to be time consuming and will
    result in a delay between capturing an image and displaying the sharing preview
    dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `sharePictureOnFacebook` method, right after you have retrieved
    the bitmap using the `BitmapFactory` class , call the `onRotateCaptureImageIfNeeded`
    method and pass the bitmap as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you run the app again, you will see that everything is fine in portrait mode
    too:![How to do it...](img/B04299_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These things are easy to implement and will improve the quality of your app,
    although they can also drive you nuts sometimes and make you wonder why one solution
    cannot just work on any device. Everything looks fine now, but what will it look
    like on a tablet or on a Huawei, LG, or HTC device? There's nothing that cannot
    be fixed, but since you do not have a drawerful of Android devices (or maybe you
    do), testing is hard.
  prefs: []
  type: TYPE_NORMAL
- en: It always is a good thing to test your app on as many devices as possible. Consider
    using a service for remote testing, for example, TestDroid. You can find their
    website at [www.testdroid.com](http://www.testdroid.com). In [Chapter 8](ch08.html
    "Chapter 8. Improving Quality"), *Improving quality*, this and other topics will
    be discussed, but first will we have a look at observables and content providers
    in the upcoming chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Capturing video is even more fun to do. There is also a Camera2 API sample for
    video capturing available. You can examine the sample project through the **Import
    sample** option as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving quality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
