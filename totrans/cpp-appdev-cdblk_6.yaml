- en: Appendix A. Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Appendix focuses on the feature set of Code::Blocks. Apart from code editing,
    managing, and building, Code::Blocks has numerous other features. It can be scripted
    to extend features of Code::Blocks. It has plugin to generate documentation of
    code. It is also able to export code in different formats such as rich text format,
    portable document format, and so on. It can also manage snippets of code to ease
    the development process. We shall discuss about them in the next couple of sections.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting Code::Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code::Blocks uses **Squirrel** language for scripting. Squirrel language is
    a high-level, object oriented, and light weight programming language. Squirrel
    syntax is similar to C/C++ programing language.
  prefs: []
  type: TYPE_NORMAL
- en: Code::Blocks exposes a large amount of its API via scripting. As a result several
    aspects of Code::Blocks can be extended via scripting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the documentation from the following URLS for scripting references:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scripting commands**: [http://wiki.codeblocks.org/index.php?title=Scripting_commands](http://wiki.codeblocks.org/index.php?title=Scripting_commands)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API bindings**: [http://wiki.codeblocks.org/index.php?title=Script_bindin](http://wiki.codeblocks.org/index.php?title=Script_bindin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation of code is very important for any project. It builds an overview
    of the written code, explains its usage, and helps developers understand the code.
    Code::Blocks allows generation of code documentation from the IDE itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**Doxygen** is a standard tool to create documentation from annotated C++ files.
    Code::Blocks comes with a plugin called **DoxyBlocks** that creates an interface
    with the externally installed doxygen tool.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to download and install doxygen tool first. Subsequently we can use
    DoxyBlocks plugin to generate documentation. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download doxygen from the following URL—[http://www.stack.nl/~dimitri/doxygen/download.html](http://www.stack.nl/~dimitri/doxygen/download.html).
    Also download `doxygen-x.x.x-setup.exe` file. Double-click on that file to install
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to connect DoxyBlocks plugin with doxygen tool. Go to **DoxyBlocks**
    | **Open preferences…** menu option. The following screenshot will be displayed:![Documentation
    generation](img/3415OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **General** tab. Next click on the **Browse** button next to **Path
    To doxygen** option and set the path to `C:\Program Files\doxygen\bin\doxygen.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next create a new C++ console project and add the following code to wizard
    generated `main.cpp` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to **DoxyBlocks** | **Extract documentation** menu option or press
    *Ctrl* + *Alt*+ *E* key combination. Code::Blocks will now generate documentation
    of the project inside `doxygen` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **DoxyBlocks** | **Run HTML** menu option or press the *Ctrl* + *Alt*
    + *H* key combination to open the newly created documentation in a Web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also add additional detailed description of function, class, etc to create
    a detailed documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the cursor to the beginning of `B::CallMe()` function and click on the
    **DoxyBlocks | /** Block comment** menu option or press *Ctrl* + *Alt* + *B* key
    combination. Code::Blocks will analyze the function parameters and will insert
    a default comment block suitable for doxygen tool. Adjust the comment block and
    our code will look similar to the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Alt* + *E* key combination to regenerate the documentation and
    use the *Ctrl* + *Alt* + *H* key combination to open it inside Web browser. Documentation
    of `B::CallMe()` will look similar to the following screenshot:![Documentation
    generation](img/3415OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also customize DoxyBlocks plugin option to use advanced features of doxygen.
  prefs: []
  type: TYPE_NORMAL
- en: Management of code snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code::Blocks allows developers to store and retrieve frequently used code snippets.
    We have used DoxyBlocks plugin in our previous example to comment blocks suitable
    for generating documents. However we can also save a blank template as a code
    snippet and reuse it wherever needed.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **View** | **Code snippets** menu option to show the **CodeSnippets**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `codesnippets` in the tree and select **Add SubCategory**
    menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name it `doxygen`. Right-click on this **doxygen** category and click on the
    **Add snippet** menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter `Block comment` as **Label** and following code as the snippet text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **OK** button to save this snippet. **CodeSnippets** window will
    look similar to the following screenshot:![Management of code snippets](img/3415OS_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on any place in the Code::Blocks editor window, right-click on this
    snippet and select **Apply** menu option. This snippet will now be pasted into
    the Editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can add code, bookmarks, text files as a code snippet. Code snippets are
    not project specific and works across all the projects.
  prefs: []
  type: TYPE_NORMAL
- en: Use of external tools for a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code::Blocks allows user to use external tools for any project. Imagine we want
    to use doxygen tool to generate documentation without using the DoxyBlocks plugin.
    We can add doxygen as an external tool and then use it on demand.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Tools** | **Configure tools…** menu option to add a new tool. The following
    window will be opened:![Use of external tools for a project](img/3415OS_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to add a new tool. The following window will be
    opened:![Use of external tools for a project](img/3415OS_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Name** property to `doxygen`. This value will be used to create a new
    menu item under **Tools** menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Executable** property to `C:\Program Files\doxygen\bin\doxygen.exe`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Parameters** property to `${PROJECT_DIR}doxygen\doxyfile`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Working** directory property to `${PROJECT_DIR}doxygen\`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **OK** button to close this window and then click on the **OK**
    button to close **User-defined tools** window. A menu item will be created under
    **Tools** menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Tools** | **doxygen** menu option and the doxygen tool will be
    launched inside a console window. Press any key to close this console window when
    it has completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can use any other tool in a similar manner.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting source code in different format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code::Blocks allows user to export source code to HTML, RTF, ODF, or PDF format.
    Perform the following steps to export source in different format:'
  prefs: []
  type: TYPE_NORMAL
- en: To export a file as PDF format go to **File** | **Export** | **As PDF…** menu
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a file name and path in the next dialog. Click on the **Save** button
    to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code::Block will prompt to confirm inclusion of line numbers in the exported
    source code. Select **Yes** or **No** option and that particular source file will
    be exported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
