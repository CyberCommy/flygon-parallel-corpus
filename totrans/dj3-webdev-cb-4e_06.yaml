- en: Model Administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing columns on the change list page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sortable inlines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating admin actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing change list filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the app label of a third-party app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom accounts app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting user Gravatars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting a map into a change form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django framework comes with a built-in administration system for your data
    models. With very little effort, you can set up filterable, searchable, and sortable
    lists in order to browse your models, and you can configure forms to add and manage
    data. In this chapter, we will go through the advanced techniques we can use to
    customize administration by developing some practical cases.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with the code in this chapter, you will need the latest stable version
    of Python, a MySQL or PostgreSQL database, and a Django project with a virtual
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find all the code for this chapter in the `chapter 06` directory of
    this book''s GitHub repository: [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing columns on the change list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The change list views in the default Django administration system provide an
    overview of all of the instances of the specific models. By default, the `list_display`
    model admin attribute controls the fields that are shown in different columns.
    Additionally, you can implement custom admin methods that will return the data
    from relations or display custom HTML. In this recipe, we will create a special
    function, for use with the `list_display` attribute, that shows an image in one
    of the columns of the list view. As a bonus, we will make one field directly editable
    in the list view by adding the `list_editable` setting.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we will need the `Pillow` and `django-imagekit` libraries.
    Let''s install them in the virtual environment using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that `django.contrib.admin` and `imagekit` are in `INSTALLED_APPS`
    in the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, hook up the admin site in the URL configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a new `products` app and put it under `INSTALLED_APPS`. This app
    will contain the `Product` and `ProductPhoto` models. Here, one product might
    have multiple photos. For this example, we will also be using `UrlMixin`, which
    was defined in the *Creating a model mixin with URL-related methods* recipe in
    [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml), *Models and Database
    Structure*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `Product` and `ProductPhoto` models in the `models.py` file
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a simple administration for the `Product` model
    that will have instances of the `ProductPhoto` model attached to the product as
    inlines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `list_display` property, we will include the `first_photo()` method
    of the model admin, which will be used to show the first photo from the many-to-one
    relationship. So, let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an `admin.py` file that contains the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the same file, let''s add the administration for the product:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the template that will be used to generate the `photo-preview`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you add a few products with photos and then look at the product administration
    list in the browser, it will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d14311ca-f563-4422-bb00-8eb990292a4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `list_display` property is usually used to define the fields so that they''re
    displayed in the administration list view; for example, TITLE and PRICE are fields
    of the `Product` model. Besides the normal field names, though, the `list_display`
    property also accepts the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A function, or another callable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of an attribute of the model admin class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of an attribute of the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using callables in `list_display`, each one will get the model instance
    passed as the first argument. Therefore, in our example, we have defined the `get_photo()`
    method in the model admin class, which receives the `Product` instance as `obj`.
    The method tries to get the first `ProductPhoto` object from the many-to-one relationship,
    and, if it exists, it returns HTML generated from the include template with the
    `<img>` tag.  By setting `list_display_links`, we make both the photo and the
    title linked to the admin change form for the `Product` model.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set several attributes for the callables that you use in `list_display`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `short_description` attribute of the callable defines the TITLE shown at
    the top of the column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the values that are returned by callables are not sortable in administration,
    but the `admin_order_field` attribute can be set to define which database field
    we should sort that generated column by. Optionally, you can prefix the field
    with a hyphen to indicate a reversed sort order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By setting `boolean = True`, you can show icons for the `True` or `False` values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the PRICE field can be made editable if we include it in the `list_editable`
    setting. Since there are now editable fields, a Save button will appear at the
    bottom so that we can save the whole list of products.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating admin actions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Developing change list filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sortable inlines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will want to sort most of the models in your database by creation date,
    happening date, or alphabetically. But sometimes, the user has to be able to show
    items in a custom sorting order. This applies to categories, image galleries,
    curated lists, and similar cases. In this recipe, we will show you how to use `django-ordered-model` to
    allow custom sorting in administration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will build upon the `products` app that we defined in the
    previous recipe. Follow these steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install `django-ordered-model` in our virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Add `ordered_model` to `INSTALLED_APPS` in the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, modify the `ProductPhoto` model from the previously defined `products`
    app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `OrderedModel` class introduces an `order` field. Make and run migrations
    to add the new `order` field for `ProductPhoto` to the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up sortable product photos, we''ll need to modify the model administration
    for the `products` app. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify `ProductPhotoInline` in the admin file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, modify `ProductAdmin` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you open the Change Product form, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11c19c3c-8124-4f8d-b852-5c08271d85fa.png)'
  prefs: []
  type: TYPE_IMG
- en: In the model, we set the `order_with_respect_to` attribute to ensure that ordering
    will be separate for each product instead of just ordering the whole list of product
    photos in general.
  prefs: []
  type: TYPE_NORMAL
- en: In Django administration, product photos can be edited by following the product
    details itself as tabular inlines. In the first column, we have a photo preview.
    We are generating it using the same `photo-preview.html`  template that we used
    in the previous recipe. In the second column, there is a field for changing the
    photo. Then, there is a column for the ORDER field, followed by a column with
    arrow buttons so that we can reorder the photos manually next to it. The arrow
    buttons are coming from the `move_up_down_links` method. Finally, there is a column
    with a checkbox so that we can delete the inline.
  prefs: []
  type: TYPE_NORMAL
- en: The `readonly_fields` attribute tells Django that some fields or methods will
    be for reading only. If you want to use another method to display something in
    the change form, you have to put those methods in the `readonly_fields` list.
    In our case, `get_photo_preview` and `move_up_down_links` are such methods.
  prefs: []
  type: TYPE_NORMAL
- en: '`move_up_down_links` is defined in `OrderedTabularInline`, which we are extending
    instead of `admin.StackedInline` or `admin.TabularInline`. This renders the arrow
    buttons so that they switch places in the product photos.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Customizing columns on the change list page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating admin actions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Developing change list filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating admin actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django administration system provides actions that we can execute for selected
    items in the list. One action is provided, by default, and it is used to delete
    selected instances. In this recipe, we will create an additional action for the
    list of the `Product` model, which will allow the administrators to export selected
    products to Excel spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with the `products` app that we created in the previous recipes.
    Make sure that you have the `openpyxl` module installed in your virtual environment
    in order to create an Excel spreadsheet, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Admin actions are functions that take three arguments, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The current `ModelAdmin` value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current `HttpRequest` value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QuerySet` value, which contains the selected items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a custom admin action to export a spreadsheet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `ColumnConfig` class for spreadsheet column configuration in the `admin.py`
    file of the `products` app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the same file, create the `export_xlsx()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the `actions` setting to `ProductAdmin`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you take a look at the product administration list page in the browser,
    you will see a new action called Export XLSX, along with the default Delete selected
    Products action, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae598c42-d15a-4aef-a26d-1c24e63d4537.png)'
  prefs: []
  type: TYPE_IMG
- en: We use the `openpyxl` Python module to create an OpenOffice XML file that's
    compatible with Excel and other spreadsheet software.
  prefs: []
  type: TYPE_NORMAL
- en: First, a workbook is created, and the active worksheet is selected, for which
    we set the title to `Products`. Because there are common styles that we will want
    to use throughout the worksheet, these are set up as named styles so that they
    can be applied by name to each cell, as appropriate. These styles, the column
    headings, and the column widths are stored as `Config` objects, and a `column_config`
    dictionary maps column letter keys to the objects. This is then iterated over
    to set up the headers and column widths.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `append()` method of the sheet to add the content for each of the
    selected products in `QuerySet`, ordered by ID, including the URL of the first
    photo for the product for when photos are available. The product data is then
    individually styled by iterating over each of the cells in the just-added row,
    once again referring to `column_config` to apply styles consistently.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, admin actions do something with `QuerySet` and redirect the administrator
    back to the change list page. However, for more complex actions, `HttpResponse`
    can be returned. The `export_xlsx()` function saves a virtual copy of the workbook
    to `HttpResponse`, with the content type and character set appropriate to the
    **Office Open XML** (**OOXML**) spreadsheet. Using the `Content-Disposition` header,
    we set the response so that it can be downloaded as a `products.xlsx` file. The
    resulting sheet can be opened in Open Office and will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85faa318-6a66-4cc2-9cb2-14950f5e4f76.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Customizing columns on the change list page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Developing change list filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 9](1979103c-ef2a-44d8-a94d-d18e57688503.xhtml)*, Importing and Exporting Data*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing change list filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want administrators to be able to filter the change list by date, relation,
    or field choices, you have to use the `list_filter` property of the admin model.
    Additionally, there is the possibility of having custom-tailored filters. In this
    recipe, we will add a filter that allows us to select products by the number of
    photos attached to them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the `products` app that we created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `admin.py` file, create a `PhotoFilter` class that extends from `SimpleListFilter`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add a list filter to `ProductAdmin`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The list filter, based on the custom field that we just created, will be shown
    in the sidebar of the product list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca4b4b04-eecf-40ee-b6c2-b4f3f61129ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `PhotoFilter` class has a translatable title and query parameter name as
    properties. It also has two methods, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `lookups()` method, which defines the choices of the filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `queryset()` method, which defines how to filter `QuerySet` objects when
    a specific value is selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `lookups()` method, we define three choices, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There are no photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is one photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is more than one photo attached
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `queryset()` method, we use the `annotate()` method of `QuerySet` to
    select the count of photos for each product. This count is then filtered according
    to the selected choice.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about aggregation functions, such as `annotate()`, refer to the
    official Django documentation at [https://docs.djangoproject.com/en/3.0/topics/db/aggregation/](https://docs.djangoproject.com/en/3.0/topics/db/aggregation/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Customizing columns on the change list page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating admin actions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a custom accounts app* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the app label of a third-party app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django framework has a lot of third-party apps that you can use in your
    project. You can browse and compare most of them at [https://djangopackages.org/](https://djangopackages.org/).
    In this recipe, we will show you how to rename the label of the `python-social-auth`
    app in administration. Analogically, you will be able to change the label of any Django third-party
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the instructions at [https://python-social-auth.readthedocs.io/en/latest/configuration/django.html](https://python-social-auth.readthedocs.io/en/latest/configuration/django.html)
    to install Python Social Auth into your project. Python Social Auth allows your
    users to log in with social network accounts or their Open ID. Once you''ve done
    this, the index page of the administration will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/828e2e92-06ce-4cb5-b807-1216415cb22a.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin, change the PYTHON SOCIAL AUTH label to something more user-friendly,
    such as SOCIAL AUTHENTICATION. Now, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an app called `accounts`. In the `apps.py` file there, add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the steps of setting up Python Social Auth involved adding the `"social_django"`
    app to `INSTALLED_APPS`. Now, replace the app there with `"myproject.apps.accounts.apps.SocialDjangoConfig"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you check the index page of administration, you will see something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed96a18a-c5ab-44ed-b35f-5b191f230566.png)'
  prefs: []
  type: TYPE_IMG
- en: The `INSTALLED_APPS` setting accepts either the path to an app or the path to
    app configuration. Instead of the default app path, we can pass an app configuration.
    There, we change the verbose name of the app and can even apply some signal handlers
    or do some other initial setup for the app.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a custom accounts app* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting user Gravatars* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom accounts app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django comes with a contributed `django.contrib.auth` app that's used for authentication.
    It allows users to log in with their username and password to be able to use administration
    features, for example. This app has been designed so that you can extend it with
    your own functionality. In this recipe, we will create a custom user and role
    models and will set administration for them. Instead of a username and password,
    you will be able to log in by email and password.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an `accounts` app and put this app under `INSTALLED_APPS`, in the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to overwrite the user and group models:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `models.py` in the `accounts` app with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `admin.py` file in the `accounts` app with the administration configuration
    for the `User` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file, add configuration for the `Role` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default user administration list looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f12f73f-ee33-4eef-995b-e509b0d8d735.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The default group administration list looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a142a4a5-3f57-40b6-9387-f275500e616d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this recipe, we created two models:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Role` model, which is a proxy for the `Group` model from the `django.contrib.auth` app. The `Role` model
    was created to rename the verbose name of `Group` to `Role`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `User` model, which extends the same abstract `AbstractUser` class as the
    `User` model from `django.contrib.auth`. The `User` model was created to replace
    the primary key with `UUIDField` and to allow us to log in via email and password
    instead of username and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The admin classes, `MyUserAdmin` and `MyRoleAdmin`, extend the contributed `UserAdmin`
    and `GroupAdmin` classes and overwrite some of the properties. Then, we unregistered
    the existing administration classes for the `User` and `Group` models and registered
    the new, modified ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what the user administration looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6433a0e7-b052-45b9-be81-5a8f7b747266.png)'
  prefs: []
  type: TYPE_IMG
- en: The modified user administration settings show more fields than the default
    settings in the list view, additional filters and ordering options, and Submit
    buttons at the top of the editing form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the change list of the new group administration settings, we will display
    those users who have been assigned to specific groups. In the browser, this will
    look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/516c43fe-6b6d-47e7-879e-989fe89765cf.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Customizing columns on the change list page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Inserting a map into a change form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting user Gravatars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've started using a custom `User` model for authentication, we can
    enhance it even more by adding more useful fields. In this recipe, we will add
    an `avatar` field and the ability to download a user's avatar from the Gravatar
    service ([https://en.gravatar.com/](https://en.gravatar.com/)). The users of this
    service can upload avatars and assign them to their emails. By doing this, different
    comment systems and social platforms will be able to show those avatars from Gravatar
    based on the hashes of the user's emails.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's continue with the `accounts` app that we created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to enhance the `User` model in the `accounts` app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `avatar` field and `django-imagekit` thumbnail specification to the
    `User` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some methods in order to download and show a Gravatar to the `MyUserAdmin`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `helpers.py` file to the `accounts` app with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the avatar in the administration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a template for the `button` to download `Gravatar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a template for user change list administration with the JavaScript
    to handle mouse clicks on the Get Gravatar buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you look at the user change list administration now, you will see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddc67c53-0a92-4f43-8864-7722138222d9.png)'
  prefs: []
  type: TYPE_IMG
- en: The columns start with the user's AVATAR, then FULL NAME, and then a button
    to get the Gravatar. When a user clicks on the Get Gravatar button, a JavaScript
    `onclick` event handler makes a `POST` request to `download_gravatar_view`. This
    view creates a URL for the user's Gravatar, which is dependent on the MD5 hash
    of the user's email, and then calls a helper function to download an image for
    the user and link it to the `avatar` field.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gravatar images are quite small and relatively quick to download. If you were
    downloading bigger images from a different service, you could use Celery or Huey
    task queues to retrieve the images in the background. You can learn about Celery
    at [https://docs.celeryproject.org/en/latest/django/first-steps-with-django.html](https://docs.celeryproject.org/en/latest/django/first-steps-with-django.html),
    and about Huey at [https://huey.readthedocs.io/en/0.4.9/django.html](https://huey.readthedocs.io/en/0.4.9/django.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Changing the app label of a third-party app* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a custom accounts app* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting a map into a change form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps offers a JavaScript API that we can use to insert maps into our
    websites. In this recipe, we will create a `locations` app with the `Location`
    model and extend the template of the change form in order to add a map where an
    administrator can find and mark the geographical coordinates of a location.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Register for a Google Maps API key and expose it to the templates, just like
    we did in the *Using HTML5 data attributes* recipe in [Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*, Templates
    and JavaScript*. Note that for this recipe, in the Google Cloud Platform console,
    you will need to activate Maps JavaScript API and Geocoding API. For those APIs
    to function, you also need to set billing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue by creating a `locations` app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Put the app under `INSTALLED_APPS` in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `Location` model there with a name, description, address, geographical
    coordinates, and picture, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll need to install the PostGIS extension for our PostgreSQL database.
    The easiest way to do that is to run the `dbshell` management command and execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create the default administration for the model with a geoposition (we
    will change this in the *How to do it...* section):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The default Django administration for geographical `Point` fields from the
    contributed `gis` module uses the `Leaflet.js` JavaScript mapping library. The
    tiles are obtained from Open Street Maps and the administration will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a5e6034-e6a8-4277-b892-a9a672aa341b.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that in the default setup, you can't enter the longitude and latitude manually
    and there is no possibility to geocode the geoposition from the address information.
    We will implement that in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The administration of the `Location` model will be combined from multiple files.
    Perform the following steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the administration configuration for the `Location` model. Note
    that we are also creating a custom model form to create separate `latitude`  and `longitude` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a custom change form template, add a new `change_form.html` file,
    under `admin/locations/location/`, to your templates directory. This template
    will extend from the default `admin/change_form.html` template, and will overwrite
    the `extrastyle` and `field_sets` blocks, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have to create the template for the map that will be inserted into
    the `Map` fieldset, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, the map won''t be styled by default. Therefore, we will have to
    add some CSS, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's create a `location_change_form.js` JavaScript file. We don't want
    to pollute the environment with global variables. Therefore, we will start with
    a closure in order to make a private scope for variables and functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will be using jQuery in this file (as jQuery comes with the contributed
    administration system and makes this easy and cross-browser), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create JavaScript functions and add them to `location_change_form.js` one
    by one. The `getAddress4search()` function will collect the address string from
    the address fields that will be used later for geocoding, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updateMarker()` function will take the `latitude` and `longitude` arguments
    and draw or move a marker on the map. It will also make the marker draggable,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updateLatitudeAndLongitude()` function, as referenced in the preceding
    dragend event listener, takes the `latitude` and `longitude` arguments and updates
    the values for the fields with the `id_latitude` and `id_longitude` IDs, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `autocompleteAddress()` function gets the results from Google Maps geocoding
    and lists them under the map in order to select the correct result. If there is
    only one result, it updates the geographical position and address fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updateAddressFields()` function takes a nested dictionary, with the address
    components as an argument, and fills in all of the address fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have the initialization function, which is called when the page
    is loaded. It attaches the `onclick` event handlers to the buttons, creates a
    Google Map, and, initially, marks the geoposition that is defined in the `latitude`
    and `longitude` fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you look at the Change Location form in the browser, you will see a Map
    shown in a fieldset, followed by the fieldset containing the address fields, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d71d3a9-f2a1-4a60-bec1-13d786f860b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the map, there are two buttons: Locate address and Remove from map.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the Locate address button, the geocoding is called in order
    to search for the geographical coordinates of the entered address. The result
    of performing geocoding is one or more addresses listed in a nested dictionary
    format. We''ll represent the addresses as a list of clickable links, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c5cc0dc-642e-4cf2-abce-03d0fde80113.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the structure of the nested dictionary in the console of the developer
    tools, put the following line at the beginning of the `autocompleteAddress()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'When you click on one of the selections, the marker appears on the map showing
    the exact geoposition of the location. The Latitude and Longitude fields will
    be filled in like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5e23aa4-d2ee-4a07-849c-109c29a007e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, the administrator can move the marker on the map by dragging and dropping
    it. Also, double-clicking anywhere on the map will update the geographical coordinates
    and the marker position.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if the Remove from map button is clicked, the geographical coordinates
    are cleaned and the marker is removed.
  prefs: []
  type: TYPE_NORMAL
- en: Administration uses a custom `LocationModelForm` that excludes the `geoposition`
    field, adds the `Latitude` and `Longitude` fields, and handles saving and loading
    their values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 4](707758de-0bea-479d-8e79-3e4de6c956d5.xhtml)*, Templates and JavaScript*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
