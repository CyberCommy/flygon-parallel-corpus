- en: Asynchronous Task Execution on AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to cover asynchronous task execution on AWS Lambda.
    AWS Lambda makes autoscaling and asynchronous execution very easy to achieve.
    Zappa can help us to configure tasks so that they are executed in an asynchronous
    manner on AWS Lambda. Zappa implements features to manage responses for asynchronous
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda asynchronous invocation using Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Quote API application with asynchronous features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and executing the Quote API using Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before starting this chapter, make sure you fulfill the prerequisites for working
    with the application. Here are the  technical requirements you need to meet:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 16.04/Windows/macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python3.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipenv tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Falcon framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zappa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registered domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter enhances the application developed in [Chapter 8](part0203.html#61J260-8241a43bed654018b51365a570bcef1d), *Custom
    Domain with SSL*. Hence, some of the requirements can be used from previously
    configured prerequisites. Let's move ahead to learn more about asynchronous execution
    in AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Asynchronous execution plays an essential role in developing high-performance
    and optimized applications. AWS Lambda supports asynchronous execution. There
    are different approaches to executing AWS Lambda functions in asynchronous mode.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding asynchronous execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Asynchronous execution** is the process of executing specific blocks of code
    without blocking user intervention. To understand it better, consider the jQuery
    Ajax mechanism for sending asynchronous requests to the server, which does so
    without blocking the user and capturing the success response or error response
    in a callback method. Have a look at the following diagram to get a better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.gif)'
  prefs: []
  type: TYPE_IMG
- en: Now, as you can see, once the server gets an asynchronous request from the client,
    the server returns an acknowledged response immediately. Once the request processing
    is done, either a success or failure response will be returned; otherwise, nothing
    will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Whether a response is returned from the asynchronous method depends on the requirements.
    We may or may not need to have a response returned. If we do wish to return a
    response, then there should be a mechanism to handle or capture the response at
    the client side.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar fashion, AWS Lambda functions can be executed in an asynchronous
    manner, where we would not be blocking user intervention to wait for the return
    response. There are some use cases where we are required to capture the response
    of an AWS Lambda function executed asynchronously. We will discuss capturing responses
    in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how AWS Lambda executes asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous AWS Lambda execution using Boto3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An AWS Lambda function is nothing but a function (a block of code) in the cloud.
    A function can be invoked synchronously or asynchronously. To achieve asynchronous
    execution in any programming language, we execute functions in a separate thread
    or process. In Python, for instance, there are various libraries available for
    achieving asynchronous execution. Similarly, AWS Lambda supports asynchronous
    execution very well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can invoke the AWS Lambda function using the Boto3 library. The preceding
    code is the syntax of the `invoke` method of the Lambda client. You can read more
    about the `invoke` method's mechanism at Boto3's official documentation here: [http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke](http://boto3.readthedocs.io/en/latest/reference/services/lambda.html#Lambda.Client.invoke).
  prefs: []
  type: TYPE_NORMAL
- en: Boto3 is a well-organized and well-maintained AWS SDK for Python. It helps developers
    to interact with AWS services using Python. Zappa also uses Boto3 in order to
    interact with AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Let's briefly elaborate on `InvocationType`, which is used to decide whether
    to execute the function in either synchronous mode or asynchronous mode. If you
    want to invoke an existing AWS Lambda function in synchronous mode, then you can
    choose `InvocationType` as `RequestResponse`, and for asynchronous mode, you can
    choose `InvocationType` as `Event`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is an example of asynchronous execution of a Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's it. This would invoke the Lambda function in asynchronous mode. With
    the help of Boto3, you can perform execution of AWS Lambda functions asynchronously.
    Now let's see how we can perform asynchronous execution using Zappa.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda asynchronous invocation using Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An AWS Lambda function is nothing but a function deployed at an AWS Lambda container.
    Hence, executing it is just a matter of invoking a function. There are various
    methods of invocation provided by AWS. How you go about integrating and configuring
    the invocation to achieve asynchronous execution is entirely up to you. We have
    seen in the previous section how to go about asynchronous execution using the
    Boto3 SDK. Now, we are going to explore the various ways of invocation that are
    provided by Zappa.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous AWS Lambda invocation using the task decorator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zappa provides a super-easy way to configure your Lambda execution in asynchronous
    mode. Zappa has an implementation of asynchronous execution using a decorator
    method called `zappa.async.task`. This decorator can be used with any function
    we want to execute in asynchronous mode. The following is an example from Zappa''s
    official GitHub page ([https://github.com/Miserlou/Zappa#asynchronous-task-execution](https://github.com/Miserlou/Zappa#asynchronous-task-execution)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we used the `task` decorator on the `make_pie` method. Now,
    when you call the API, it will return the response immediately and execute the
    `make_pie` method in asynchronous mode. Executing `make_pie` asynchronously is
    nothing more than instantiating the AWS Lambda instance with the context of the
    `make_pie` method execution. This is how you can execute a function asynchronously.
    Now, another challenge is collecting the response from an asynchronously executed
    function. We will discuss this in an upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon SNS as the task source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Simple Notification Service** (**SNS**) is a managed pub/sub messaging
    service. It supports various protocols, such as HTTP, HTTPS, email, email-JSON,
    Amazon SQS, applications, AWS Lambda, and SMS. We can create topics and subscribes
    via any of these protocols, though we can use AWS SNS and perform a pub/sub operation
    through its web console.'
  prefs: []
  type: TYPE_NORMAL
- en: We have already invoked AWS Lambda via API Gateway, which is how all our implemented
    APIs are working. In a similar fashion, we can subscribe our AWS Lambda with Amazon
    SNS with a specific topic. Now, whenever any message is published on that topic,
    it will invoke the subscribed AWS Lambda as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to update the following settings in the `zappa_settings.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When you call the `zappa schedule` command, it will automatically create and
    subscribe to SNS. Any message publication over an SNS topic creates a unique message
    ID as well. Hence, you can track the message response in CloudWatch Logs using
    the generated message ID.
  prefs: []
  type: TYPE_NORMAL
- en: This feature enables you to use the Lambda invocation to perform an operation
    based on the SNS event. You may use it to develop a **One-Time Password **(**OTP**) generation
    application, for instance, where you wouldn't be required to persist the OTP data.
    Instead, it would be published to a specific topic, and subscribers would get
    that information. Finally, AWS Lambda and mobile numbers can be subscriptions
    of an AWS SNS topic. This would invoke the AWS Lambda method and with the published
    message context over an SNS topic.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the direct invocation method in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Direct invocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa provides another mechanism for performing the direct invocation of a Lambda
    function. Previously, we have been using the `task` and `task_sns` decorators,
    but now we are going to use the `zappa.async.run` method to perform the direct
    invocation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This feature would help you to configure the `async` invocation dynamically
    based on your requirements. Decorator task methods are fixed from compilation,
    but this method statement can be called, conditionally, at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Remote invocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, Zappa performs the direct invocation of a method at the current
    Lambda instance. But, if you wish to perform the Lambda invocation as a separate
    Lambda function on a different region, then you can update your task decorator,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We are using the `task` decorator, but with additional arguments, such as **`remote_aws_lambda_function_name`**
    and **`remote_aws_region`**. These arguments state to execute the particular Lambda
    function in a specific region. This is how you can perform a **remote invocation**.
  prefs: []
  type: TYPE_NORMAL
- en: Let's enhance the Quote API application with these different types of invocation
    to achieve asynchronous execution.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Quote API application with async features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we created a Quote API and configured a custom domain.
    Now we are going to enhance and optimize the existing application. There will
    be some new features that we are going to add to the application in order to demonstrate
    the different types of invocations.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use the existing code base as a different project, so it would
    be good to copy the existing code base in a new directory; in our case, we will
    copy the `Chapter08` code base as `Chapter09`; however, you will be required to
    update the `zappa_settings.json` file. In the upcoming section, we will be covering
    the Zappa settings changes.
  prefs: []
  type: TYPE_NORMAL
- en: SMS subscription with Amazon SNS for the daily quote
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to add the new feature of the SMS subscription for receiving quotes
    on a daily basis. This would require us to configure Amazon SNS using the Boto3
    library. Boto3 is a complete Python SDK library that enables us to interact with
    AWS services programmatically. Let's move on and configure Amazon SNS in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Amazon SNS using Boto3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have met the prerequisites and followed the installation instructions
    detailed in the previous chapter, where we configured the environment with Boto3
    and other required libraries. Assuming that you have configured the environment,
    I will now move ahead to explore the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are creating a client object of Amazon SNS using Boto3\.
    We need to have access key credentials in order to get access programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: This is an essential step when connecting with Amazon SNS. Once you have successfully
    created the `client` object, you can perform various actions, such as creating
    a topic, subscribing a service with a protocol, and publishing the message on
    the topic.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move toward the actual implementation of the SMS subscription using Amazon
    SNS.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the SMS subscription functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'File—`sns.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This class has a method for performing the subscription functionality for a
    mobile number. In order to demonstrate asynchronous executions, we are going to
    write some functions explicitly, which will be using `QuoteSubscription` features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file called `async.py` with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we defined these methods and added the `@task` decorator. On
    the local environment, it would execute in normal methods, but on an AWS Lambda
    context, it would execute in asynchronous mode.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move to the resources API implementation. We are going to modify the existing
    resources a little bit. There will be some new APIs related to SMS subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'File—`resources.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here we created some API using the resources classes as mentioned in the preceding
    code snippet. Each resource class represents a single API endpoint. So we have
    created three API endpoints and each have its own workflow execution and usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore usages of each API endpoints as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/daily`: This API endpoint is intended to return the daily quote data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/subscribe`: This API endpoint is designed to subscribe any mobile number
    for daily quote SMS. It implements a OTP verification before subscribing any mobile
    number. Hence it follows a URL pattern for performing the subscription operation.
    It requires two steps for subscribing such as generating the OTP for subscription
    and then verifying the OTP to confirm the subscription. For generating the OTP
    for subscription, you need to use the API with the `mobile` query parameter such
    as `http://localhost:8000/subscribe?mobile=919028XXXX` and for subscription confirmation
    you need to use this API with `mobile` and `otp` parameters such as `http://localhost:8000/subscribe?mobile=919028790411&otp=XXXX`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/unsubscribe`: This API endpoint is designed to unsubscribe the existing subscribed
    mobile number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API query parameters has defined pattern, Hence you need to use these pattern
    for a valid parameter. For mobile parameter, you should send the mobile mobile
    number in this format `<country_code><mobile_number>`. For `opt` parameter, you
    should send 4 digits integer numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now let's move ahead to deploy the application, and then we will go through
    its execution.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and executing the Quote API using Zappa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deployment is an essential part of any web application. We are blessed with
    Zappa and AWS Lambda, which provide us with the essence of being serverless. As
    we are enhancing the Quote API application created in the previous chapter, there
    will some modifications as per our current requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming sections, we will be discussing some changes in Zappa settings.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed before, we are using the `Chapter08` code base. There is some
    modification required in the `zappa_settings.json` file, such as the `project_name`
    needing to be changed to `Chapter09`, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once you've changed `project_name`, you need to configure the virtual environment
    with `pipenv`, by using the `pipenv install` command. This will create a new virtual
    environment with a changed `project_name`.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the Boto3 library to interact with Amazon SNS. Hence, we will need
    to install Boto3 as well, by using the `pipenv install boto3` command.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from the virtual environment, we need to configure some environment variables.
    We are using the Mashape API (a third-party API marketplace) and the Boto3 library.
    Hence, we are going to configure the environment variables with the Mashape API
    key and our AWS access credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Zappa provides several mechanisms for the configuration of environment variables.
    We are going to use `"remote_env"`. This approach requires the uploading of a
    JSON file on an S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code snippet of the configured JSON file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve uploaded this file to the S3 bucket, you can then use the S3 path
    of this file as a value to `"remote_env"`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Zappa will automatically set environment variables based on this JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: AWS and other API credentials are confidential and sensitive data; hence, you
    must avoid committing that data in public Git repositories. With the help of `remove_env`,
    you can set the credentials as environment variables on AWS Lambda and keep it
    all secure on S3.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a custom domain with SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to configure a specific domain for the enhanced version of the Quote
    API application. Zappa provides a keyword named `domain` to be set with your domain
    name in a file setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code snippet for configuring the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you configure the domain, you need to certify it with an SSL certificate.
    We already generated the wildcard SSL certificate using the **Amazon Certificate
    Manager** (**ACM**). Hence, we will be using that same ACM ARN, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you need to run the `zappa certify` command in order to create the subdomain
    and configure the certificate. Have a look at following log snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding log snippet, it can take up to 40 minutes for this
    domain to be created and propagated through AWS, but it requires no further work
    on your part.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move to the next section, where we will be configuring an event for publishing
    a quote SMS to all mobile subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling an event to publish an SMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to send a quote SMS on a daily basis to all SMS subscribers. SMS
    subscription features have been implemented using Amazon SNS with the `QuoteSubscription`
    class. We will give a detailed explanation about the subscription workflow in
    the upcoming section. But before we perform the subscription execution, we should
    have a configured and scheduled event that will publish a quote on the SNS topic.
  prefs: []
  type: TYPE_NORMAL
- en: We have already created the SNS topic in the `QuoteSubscription` constructor.
    Also, we have written an `async` method, `async_publish`, in the `async.py` file.
    Now we are going to use this method for sending a quote message asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep a modularized code base, we have created a `schedulers.py`
    file to keep all scheduling methods in one place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As we've already created a schedule method, `set_quote_of_the_day`, in the last
    chapter, we now have to create a method called `publish_quote_of_the_day`, which
    is responsible for publishing the quote message on the Amazon SNS topic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We configured the scheduling method to be invoked using the `cron` expression
    for every day at 2: 00 AM **UTC** time (**Coordinated Universal Time**), which
    will be 7:30 AM **IST** (**Indian Standard Time**). Hence, all subscribers in
    India will receive the SMS in the morning. You can schedule the `cron` expression
    as per your requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create the instance of the `QuoteSubscription` class, it creates an
    SNS topic, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Do not Disturb** (**DND**) may be enabled on your mobile. DND works on promotional
    SMS. So, in that case, you can change the default message type in the Text messaging
    preferences section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: That's it, we are done with configuring the domain with the Quote API application!
    Now we are going to use the configured domain to access the API.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa deployment requires the `zappa_settings.json` file, which generates the `zappa
    init` command. But we already have the `zappa_setttings.json` file, so we don't
    need to run this command again.
  prefs: []
  type: TYPE_NORMAL
- en: If you are deploying the application for the first time, you would need to use `zappa
    deploy <stage_name>`, and if the application is already deployed, then you would
    need to use `zappa update <stage_name>`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Wow! We deployed the Quote API application successfully! Now you see that the
    configured domain is up and runing with the Quote API application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move to the next section, where we will see the execution of the Quote
    API application.
  prefs: []
  type: TYPE_NORMAL
- en: Quote API execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use the `curl` command-line tool ([https://curl.haxx.se/](https://curl.haxx.se/)).
    It makes interaction with any HTTP/HTTPS links from the command line very easy
    indeed. (Developers tend to use it more while writing Shell scripts, though.)
    Let's see the execution of each API.
  prefs: []
  type: TYPE_NORMAL
- en: The daily quote API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Daily quote SMS subscription
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have integrated Amazon SNS to implement the SMS subscription feature. We
    designed the API `/subscribe?mobile=<mobile_number>&otp=<otp_code>` to create
    a subscription for getting daily quote messages on registered mobiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a log snippet showing the execution of the subscription API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! We''ve already scheduled an event to publish the daily quote message
    to the relevant SNS topic, which will broadcast to all subscriptions. As a result,
    subscribers will now receive a quote SMS on a daily basis. Once you hit this API,
    it creates an SNS subscription. The following is a screenshot of the Amazon SNS
    web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see one subscription record has been created. Now on every message that
    is publish, this subscription will receive the published message.
  prefs: []
  type: TYPE_NORMAL
- en: Daily quote SMS unsubscription
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The unsubscription API will be responsible for removing any subscribed mobile
    numbers. This API has a similar workflow to the `/subscribe` API, using something
    very close to `/subscribe?mobile=<mobile_number>`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This removes the related subscription from Amazon SNS subscriptions. The following
    is a screenshot of the Amazon SNS web console following execution of the unsubscription
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the subscription that was there has now been removed, and so
    we've achieve the SMS subscription/unsubscription alongside an asynchronous execution
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the asynchronous workflow and its usage. We
    also explored in detail the asynchronous invocation of AWS Lambda functions using
    Zappa. In order to demonstrate asynchronous Lambda funtion execution, we implemented
    the Quote API application along with an SMS subscription feature. I hope you enjoyed
    this chapter and that it was really beneficial to you!
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to see some advanced Zappa configurations in order to utilize
    the power of Zappa's automation process for maintaining application deployment.
    Let's get ready for the next chapter and move your journey toward a new adventure.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is AWS SNS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does AWS Lambda invoke an SNS topic?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
