- en: Defect Management Phase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software products can only be trusted if they generate satisfactory results
    without any faults. Invalid results can have a negative impact on end users. Faulty
    products can make consumers unhappy and cause frustration. Hence, identifying
    faults or problems in time can aid developers in delivering a good quality product.
    However, we need to understand how to classify defects, along with an effective
    way of reporting them, so as to confirm whether the defect has been resolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the importance of logging defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking existing defects to test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also see how Jira helps us in tracking and managing defects effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the importance of logging defects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before understanding the importance of defects, let's understand what a defect
    actually means in the software industry. When teams start working on a part or
    component of the project, they start building it with a predefined set of requirements
    or conditions. Similarly, when the test team creates test cases, they base them
    on the same set of requirements for the respective components.
  prefs: []
  type: TYPE_NORMAL
- en: Now, during the test execution phase, the test team starts validating the actual
    product in the test environment by interacting with the application step by step,
    since the end user will perform the same actions, and compare them with the expected
    results. If the result matches, testers can pass the selected step ...
  prefs: []
  type: TYPE_NORMAL
- en: Creating new defects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply speaking, deviations from the anticipated results are regarded as defects.
    There are a few more terms that are used in the industry interchangeably to define
    a problem, such as a failure, bug, or error. However, any form of issue, no matter
    what it's called, must be resolved before launching the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'Software defects can be the result of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A feature is built based on invalid or incomplete requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A feature is stated in the requirements but the required software for it is
    missing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function used in the code is not returning the expected results, or running
    in an infinite loop, or accepting an invalid number/type of an input parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users are not restricted from performing invalid/unauthorized actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error messages as not shown as expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stated and unstated requirements are not met
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text and images are unreadable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalid code is merged into the build and is deployed in the test environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once there is confirmation that the behavior exhibited by the application does
    not match the stated requirements, which is also confirmed by the development
    team, then the test team can mark it as a defect and log it in the test management
    system. We will look at how we can create and log defects using Jira plugins in
    the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what defects are, let's begin with our defect creation process.
    Test management tools can be used to report newly found defects. It is helpful
    to trace defects and aids the testers in collaborating with the team smoothly.
    Before creating new defects, it is essential to check whether a similar defect
    already exists in the system and what its current status is. Defects can only
    be reported and fixed successfully if they are reproducible; hence, it is necessary
    to reproduce it a few times before logging it in the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is recommended that the following checklist be observed before logging any
    defects. Though this is a common checklist, more steps can be added as per your
    requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: An application's behavior specified in the requirements document is different
    from the results achieved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that testing is being performed in the correct environment with the expected
    configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that the application's build version is correct and that it has been configured
    as per testing requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that all the required services of the application are up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that the application is compatible with the specified operating system,
    browser, or third-party application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that the test is being performed from the specified state of an application
    with valid test data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that the user role has all the necessary permissions to perform the actions
    as mentioned in the test case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that there is connectivity between the application, server, and databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding more details to the defect helps developers identify an initial location
    in the specific part of the code to start debugging while performing root cause
    analysis, instead of checking the entire product or module. Let's see what details
    should be added while logging the defects.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about defect management, please check the article on defect
    management that is available at [https://www.red-gate.com/simple-talk/dotnet/software-delivery/a-primer-on-defect-managment/](https://www.red-gate.com/simple-talk/dotnet/software-delivery/a-primer-on-defect-managment/).
  prefs: []
  type: TYPE_NORMAL
- en: How to create defects using Jira plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally, test management tools provide a template with some of the default
    fields to log the defects. However, we can always be more descriptive, for example,
    by specifying the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A unique identifier to identify the defect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A summary of the defect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actions to be performed to reproduce the defect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variations between the actual and expected results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test environment used to perform the test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preconditions, such as the state of the application under test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of the application under test with the configuration details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build version of the code deployed in the test environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test data used to perform the test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The defect creation date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current status of the defect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing and managing defect workflows in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Defect workflow can be customized to have its own set of statuses that a defect
    issue type can undergo. Organizations can have their own set of workflows. Let''s
    look at some of the recommended statuses that a defect should go through. This
    is also referred to as a defect life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DRAFT: A defect can be set on DRAFT when the tester still needs to provide
    more details in relation to it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NEW/OPEN**: This status can be set for the defect when all the details are
    added and it is ready to be assigned to a developer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASSIGNED**: Once the project team identifies a developer who will be working
    on the logged defect, the status of the defect can be set to ASSIGNED and should
    be assigned to the developer in question'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IN PROGRESS**: Once a defect gets assigned, the developer can change the
    status of the defect to IN PROGRESS to indicate that the developer is working
    to fix the issue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FIXED**: The developer can change the defect status to FIXED once the required
    code changes are implemented and it is made available for the testers to verify
    the changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOT FIXED**: The tester sets the defect status as NOT FIXED if the defect
    is still reproducible and the fix is not satisfactory as per the requirements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CLOSED**: If the fixed defect is working as expected and it matches the stated
    requirements, then the tester closes the defect and sets its status as CLOSED'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REOPEN: If a previously resolved defect is now reoccurring, then the tester
    can change the status of the defect to REOPEN'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOT APPLICABLE**: If the newly created defect is not related to the verified
    changes, then the developer can change the status of the defect to NOT APPLICABLE'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOT A DEFECT**: If the application or feature is behaving as expected, then
    the developer can change the status of the defect to NOT A DEFECT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOT REPRODUCIBLE**: If the developer is unable to recreate the defect in
    the same environment and build version, then its status can be updated to NOT
    REPRODUCIBLE'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DUPLICATE**: If a similar defect already exists in the system, then the development team
    can update the defect status to DUPLICATE'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VERIFIED**: If the code changes for the defect have been verified by the
    tester, then its status can be marked as VERIFIED'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PENDING**: If the defect verification is on hold due to the unavailability
    of the environment, test data, or resources, then its status can be updated to *PENDING*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DEFERRED**: The defect status can be marked as DEFERRED if the team decides
    to work on the fix in the upcoming sprints or release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since we are familiar with the defect workflow now, let''s create one using
    Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a customized workflow in Jira, we need to add a workflow
    scheme and add a customized workflow to this scheme. The option to add a workflow
    scheme is available under Admin | Issues | Workflows | Workflow Scheme. Assign
    a name to this defect workflow scheme, such as `DefectWorkflowScheme-1`, add a
    Description, and then click on the Add button to create a scheme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/dd6b41c3-237a-45be-81ff-d0751c38c4b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the following screenshot, the customized defect workflow has various
    statuses similar to the ones we discussed earlier. This workflow has been categorized
    as defect workflow, which will be added to a workflow scheme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/78ff76ac-ac90-4a7a-97bb-32c3c595d424.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the existing workflow, click on the Next button. The following
    screenshot shows issue types that you want to apply to this workflow. Select the Defect issue
    type and click on the Finish button, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a4db6803-fd44-46a4-b6c2-f4b66cc52598.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you add a defect workflow, it can be viewed from the Project settings
    | Issues | Workflows section. As shown in the following screenshot, the current
    project has two types of workflow, namely the Jira Workflow and the defect workflow.
    The defect workflow field has an associated issue type as a defect. Here, it will
    prompt you to publish the changes and as soon as you publish, the newly added
    workflow will be added to the defect issue type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/698b515d-3842-47a0-a080-e7c4c257e877.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, navigate to the Project | Project Settings | Issues sections. Here, you
    need to customize your project to have a Defect issue type. As shown in the following
    screenshot, we have added a Defect issue type to the Issue Types for Current Scheme section
    so that it will be added to your current project scheme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9e1db2e1-274a-416e-8b59-e2ad70616bb2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Save and our defect workflow is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT has additional issue types, including requirement, test case, and
    test plan, but it has a missing defect issue type. From the previous section,
    we now know how to add defect issue types with the customized workflows to our
    project. After adding the issue type, follow these steps to log a defect:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since a defect is another issue type, click on the Create button to create
    a defect, select the project in question, and then select the issue type as Defect,
    as shown in the following screenshot. Then, click on the Next button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/56c6a4f0-99d6-4f6d-8840-261ee0aafd95.png)'
  prefs: []
  type: TYPE_IMG
- en: This will load the issue description page with the header Create Issue, as shown
    in the following ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linking existing defects to test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Establishing a relationship between defects and test cases helps to identify
    the impact of a defect on the current execution of test cases. If a single defect
    impacts more than one test case, then the testers can link the same defect to
    all the impacted test cases and update the test case status as Blocked.
  prefs: []
  type: TYPE_NORMAL
- en: However, apart from the impact analysis, it also helps in generating the traceability
    matrix where the requirements are linked to the test cases and test cases are
    linked to the defect. Defects can be linked to the test case at the test case
    level or test step level. If a test case has a greater number of test steps, and
    there are multiple defects observed for the same test cases, then in such cases,
    it makes more sense to link these defects at the test step level to identify at
    which step specifically the error has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Changing a test case status with regard to defects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever the test team logs a defect and links it to the relevant test case,
    the status of the test case is updated as Failed. Now, the test case status remains as
    failed, unless and until the related defect is either closed or deferred. Once
    the defect is closed, the relevant test case status is updated to Passed.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the defect is linked at the test step level, the steps that worked
    as expected are updated as Passed. The step where a defect has been observed is
    updated as Failed and the remaining steps that the tester is not able to execute
    remain in the default Not executed or Not run status.
  prefs: []
  type: TYPE_NORMAL
- en: Let's link the defect to the test cases using the Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: synapseRT gives an option to link a defect either at the test case level or
    test step level. Select any test case in synapseRT and create an ad hoc run. During
    the execution, it creates a new test run and shows the options to either link
    the existing defect or create new ones under the Run Attributes section. We also
    have an option to update the test status at the test step level.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, step one has been marked as failed and it has
    an associated SCRUM-7 defect at the test step level. However, there are two defects,
    SCRUM-7 and `SCRUM-5`, linked to the test case level. Since one test step has
    failed here, the status of the entire test case gets updated as FAILED:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e2448179-73f8-443c-8519-42c40871a20d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If multiple test cases are blocked due to a single defect during the test cycle,
    then the same defect can be linked to the test cases and their status can be updated
    as BLOCKED. The following screenshot depicts this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/edb11728-25c9-4ff3-bdae-ec949f06e1a0.png)'
  prefs: []
  type: TYPE_IMG
- en: There are three test cases in total. One has failed because of the defect, and
    the same defect is blocking the remaining two test cases in the current test cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case of Zephyr, once we start executing the test case from the selected
    test cycle, we can update the test status at the test case level or test step
    level.
  prefs: []
  type: TYPE_NORMAL
- en: 'While executing the test, we also have an option to link a defect at the test
    step level or at the test case level. As shown in the following screenshot, since
    one step has been marked as FAIL, the status of the entire test case has changed
    to FAIL. The following steps are marked as BLOCKED. In the Defect section, it
    has a defect linked to it as `SCRUMZ-3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9aee0e44-8bb6-4c93-9d37-69dffc0dff86.png)'
  prefs: []
  type: TYPE_IMG
- en: After completing this run, the status of the test execution and its linked defects
    can be viewed at the test cycle level. ...
  prefs: []
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Test Management tool also has an option to link a defect and update the
    status of the test step at the test step and test case levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the test case `TESTP-T2` is marked as
    having failed at step 1 and its ISSUES section indicates the linked defects. In
    our case, this is `TESTP-1`. The remaining steps are marked as BLOCKED:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b32746a9-8096-4776-b776-dbd0ce38cba3.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the defect creation and management process. We
    learned to identify defects and understand their possible root causes. We also
    looked at the preliminary checks that should be performed before reporting defects,
    as well as the details that should be provided while logging the defects in the
    system.
  prefs: []
  type: TYPE_NORMAL
- en: We then learned to create defects in Jira by having a customized issue type,
    such as **defect**, and a customized workflow. In order to create traceability,
    we learned how to link defects to the relevant test cases with the help of Jira
    plugins, either at the test step or the test case level during the test execution
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how Jira issues can be used to track project
    requirements. ...
  prefs: []
  type: TYPE_NORMAL
