- en: Chapter 10. Building an E-Commerce Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll code a simple book store example using Laravel. We''ll
    also cover Laravel''s built-in authentication, named routes, and database seeding.
    We''ll also elaborate some rapid development methods that come with Laravel such
    as creating route URLs. Also, we''ll working with a new relation type called *belongs
    to many*. We''ll cover pivot tables as well. Our e-commerce application will be
    a simple book store. This application will have order, administration, and cart
    features. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an authorization system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and migrating authors, books, carts, and orders tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating template files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing books
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking orders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing orders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an authorization system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We assume that you have already defined the database credentials in the `database.php`
    file located at `app/config`. To create our e-commerce application, we need a
    database. You can create and simply run the following SQL command or basically
    you can use a database administration interface such as phpMyAdmin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating and migrating the members' database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Contrary to most of the PHP frameworks, Laravel has a basic and customizable
    authentication mechanism. The authentication class is very helpful for rapidly
    developing applications. First, we need a secret key for our application. As we
    mentioned in previous chapters, the application''s secret key is very important
    for our application''s security because all the data is hashed salting this key.
    The artisan can generate this key for us with a single command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If no error occurs, you will see a message that tells you the key is generated
    successfully. After key generation, if you''ve visited your project URL before
    you face problems with opening your Laravel application, simply clear your browser''s
    cache and try again. Next, we should edit the authentication class''s configuration
    file. To use Laravel''s built-in authentication class, we need to edit the configuration
    file, which is located at `app/config/auth.php`. This file contains several options
    for the authentication facilities. If you need a change in the table name, and
    so on, you can make the changes under this file. By default, Laravel comes with
    a `User` model. You can see the file, which is located at `app/models/User.php`.
    With Laravel 4, we need to define which fields are fillable in our `User` model.
    Let''s edit `User.php` located at `app/models/` and add the `fillable` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically we need four columns for our members. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email`: This is the column for storing a member''s e-mails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password`: This is the column for storing a member''s password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the column for storing a member''s name and surname'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin`: This is the column for flagging store admin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need several migration files to create the `users` table and add a member
    to our database. To create a migration file, give a command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file, which was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing the `migration` file, run the `migrate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to create a database seeder file to add some users to the database.
    Database seeding is another highly recommended way to add data to your application
    database. The database seeder files are located at `app/database/seeds`. Let's
    create our first seeder file under the `UsersTableSeeder.php` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can create both the seeder file and the seeder class with any name. But it
    is highly recommended for the seeder file and class name that the table name should
    follow camel case, for example, `TableSeeder`. Following the world-wide programming
    standards will improve the quality of your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of `UsersTableSeeder.php` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply seeding, first we need to call the `Seeder` class. Let''s open the
    `DatabaseSeeder.php` file located at `app/database/seeds` and edit the file, as
    shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is very important to securely store your users' passwords and their critical
    data. Do not forget that if you change the application key, all the existing hashed
    records will be unusable because the `Hash` class uses the application key as
    the salting key, when validating and storing given data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and migrating the authors' database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need an Author model for storing the book authors. It will be a very simple
    structure. Let''s create the `Author.php` file under `app/models` and add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need several migration files to create the `authors` table and add some
    authors to our database. To create a migration file, give a command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing the migration file, run the `migrate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you know, the command creates the `authors` table and its columns. If no
    error occurs, check the `laravel_store` database for the `authors` table and the
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: Adding authors to the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need to create a database seeder file to add some authors to the database.
    Let's create our first seeder file under `app/database/seeds/AuthorsTableSeeder.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content in `AuthorsTableSeeder.php` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply seeding, first we need to call the `Seeder` class. Let''s open the
    file `DatabaseSeeder.php` located at `app/database/seeds/`and edit the file as
    shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to seed our database with the following `artisan` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you want to rollback and re-run all migrations, you can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating and migrating the books database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need a `Book` model to store the author''s books. Let''s create the `Book.php`
    file under `app/models/` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's explain the role of the `author_id` column and the `Author()` function.
    As you know from previous chapters, `Eloquent` has several functions for different
    kinds of database relations. The `author_id` will store the ID of the authors.
    The `Author()` function is used to fetch names and surnames of authors from the
    `authors` table.
  prefs: []
  type: TYPE_NORMAL
- en: Adding books to the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need to create a database seeder file to add some books to the database.
    Let's create the first seeder file under `app/database/seeds/BooksTableSeeder.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content in `BooksTableSeeder.php` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply seeding, first we need to call the seeder class. Let''s open the `DatabaseSeeder.php`
    file located at `app/database/seeds` and edit the file, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to seed our database with the following `artisan` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Creating and migrating the carts database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you know, all e-commerce applications should have a cart. In this application,
    we''ll have a cart too. We''ll design a member-based cart, which means we can
    store and show each visitor their carts and cart items. So, we need a `Cart` model
    to store the cart items. It will be a very simple structure. Let''s create the
    `Cart.php` file under `app/models` and add following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need a migration file to create the `carts` table. To create a migration
    file, give a command such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file, which was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply migration, we need to migrate with the following `artisan` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating and migrating the orders database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To store members' orders, we need two tables. The first of them is the `orders`
    table, which will store shipping details, member ID, and the total value of the
    order. The second one is the `order_books` table. This table will store orders'
    books and will be our pivot table. In this model, we'll use the `belongsToMany()`
    relation. This is because an order can have many books.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first we need an `Order` model to store the book orders. Let''s create
    the `Order.php` file under `app/models` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the code, we've used a new option named `withPivot()` with
    the `belongsToMany()` function. With the `withPivot()` function, we can fetch
    extra fields from our pivot table. Normally, without the function, the relational
    query accesses from the pivot table with just the `id` object of related rows.
    This is necessary for our application because of price changes. Thus, previous
    orders, which were possibly done before any price change, are not affected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need a migration file to create the `carts` table. To create a `migration`
    file, give a command such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file, which was created recently and located at `app/database/migrations`.
    We need to edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply migration, we need to migrate with the following `artisan` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our `pivot` table. We need a migration file to create the `order_books`
    table. To create a migration file, give a command such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the migration file, which was created recently and located a`t app/database/migrations`.
    We need to edit the `up()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply migration, we need to migrate with the following `artisan` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Our database design and models are finished. Now we need to code controllers
    and our application's front pages.
  prefs: []
  type: TYPE_NORMAL
- en: Listing books
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to list our products. To do that, we need to create a controller,
    which is named `BookController`. Let''s create a file under `app/controllers/`
    and save it with the name `BookController.php`. The controller code should look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The code simply fetches all the books from our `books` table and passes the
    data `book_list.blade.php` template with the `$books` variable. So we need to
    create a template file under `app/controllers/`, which is named as `book_list.blade.php`.
    Before doing this we need a layout page for our templates. Working with layout
    files is very helpful to manage html code. So first, we need a template file under
    `app/controllers/`, which is named `main_layout.blade.php`. The code should look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The template file contains a menu, a login form, and some JavaScript code for
    the drop-down login form. We''ll use the file as our application''s layout template.
    We need to code our login and logout functions in the `UserController.php` file
    located at `app/controllers`. The login function should look like the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the following code, we need to add routes to our route file, `routes.php`,
    found under `apps`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Creating a template file to list books
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need a template file to list books. As mentioned previously, we need
    to create a template file under `app/views/` and save it as `book_list.blade.php`.
    This file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The template file has a form to add books to a cart. Now we need to code our
    functions in the `CartController.php` file located at `app/controllers/`. The
    content of `CartController.php` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Our controller has three functions. The first of them is `postAddToCart()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The function basically, at first, validates the posted data. The validated
    data checks the `carts` table for duplicate records. If the same book is not in
    the member''s cart, the function creates a new record in the `carts` table. The
    second function of the `CartController` is `getIndex()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The function fetches whole cart items, books'' information, and cart total
    and passes the data to the template file. The last function of the class is `getDelete()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The function basically finds from the `carts` table the given ID and deletes
    the record. We use the function to delete items from a cart. Now we need to create
    a template file. The file will show all cart information of members and also contains
    the order form. Save the file under `app/views/` as `cart.blade.php`. The content
    of `cart.blade.php` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to write our routes. The functions of the controller should just
    be accessible to members. So we can easily use Laravel''s built-in `auth.basic`
    filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Taking orders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you may remember, we''ve already created an order form in the `cart.blade.php`
    template file located at `app/views/`. Now we need to process the order. Let''s
    code the `OrderController.php` file under `app/controllers/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The controller has two functions. The first of them is `postOrder()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The function, first, validates the posted data. After successful validation,
    the function creates a new order on the `orders` table. The `order` table stores
    the member ID, shipping address, and total amount of the order. Then, the function
    attaches all cart items to the pivot table with their amount, price, and total
    amounts. In this way, the order items will not be affected by any price change.
    The function then deletes all items from the member''s cart. The second function
    of the controller is `getIndex()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The function queries the database by looking at current user rights. If the
    current user has admin rights, the function fetches all the orders. If the current
    user has no admin rights, the function fetches just the user''s orders. So, now
    we need to write our routes. Add the following route code to `app/routes.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Our e-commerce application is almost done. Now we need to add a template file.
    Save the file under `app/views/` as `cart.blade.php`. The content of `cart.blade.php`
    should be like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The template file contains all the information about orders. The template is
    a very simple example of how to use pivot table columns. The pivot data comes
    as an array. So, we've used the `foreach` loop to use the data. You can store
    any data that you do not want to be affected by any changes in the database, such
    as price changes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've built a simple e-commerce application. As you can see,
    thanks to Laravel's template system and built-in authorization system, you can
    easily create huge applications. You can improve the application with third-party
    packages. Since Laravel Version 4, the main package manager has been Composer.
    There is a huge library at [http://packagist.org](http://packagist.org), which
    provides packages for image manipulating, social media APIs, and so on. The number
    of packages increase day-by-day, which are becoming, by default, Laravel compatible.
    We suggest that, before coding anything, you take a look at the Packagist website.
    There are many contributors still sharing their codes while you're reading these
    sentences. Reviewing another programmer's code gives new answers to old problems.
    Do not forget to share your knowledge with people to have a better programming
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: During the entire book we've tried to explain building different kinds of applications
    with the Laravel PHP framework. So, we've covered RESTful controllers, routing,
    route filters, the authentication class, Blade template engine, database migrations,
    database seeding, string, and file-processing classes. Also, we've given some
    tips for rapid development with Laravel. We hope that this book will be a good
    resource for learning the Laravel framework.
  prefs: []
  type: TYPE_NORMAL
- en: The co-author of the book, *Halil İbrahim Yılmaz*, has developed an open source,
    multilingual CMS with Laravel, which is named HERKOBI. You can use both the source
    codes of the book chapters and the source code of the CMS. You can access the
    CRM and the codes at [http://herkobi.org](http://herkobi.org) and also at [http://herkobi.com](http://herkobi.com).
  prefs: []
  type: TYPE_NORMAL
- en: Laravel has a good community, which is very helpful and friendly. You can ask
    any question in the Laravel forums. The international Laravel community can be
    accessed at [http://laravel.com](http://laravel.com). Laravel also has some national
    Laravel communities, such as a Turkish Laravel community, which is located at
    [http://laravel.gen.tr](http://laravel.gen.tr).
  prefs: []
  type: TYPE_NORMAL
- en: You can send an e-mail to the authors when you need help on anything in the
    book or the Laravel PHP framework.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for being interested in and purchasing this book.
  prefs: []
  type: TYPE_NORMAL
