- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript is a scrappy yet graceful language that has found itself at the
    center of one of the greatest software shifts in history. It is now the primary
    programming language used to deliver user experiences on the most ubiquitous platform
    that exists: *the web*.'
  prefs: []
  type: TYPE_NORMAL
- en: This huge responsibility has meant that the JavaScript language has had to grow
    up very quickly in a period of shifting demands. For the up-and-coming JavaScript
    programmer or web developer, these changes have meant that the language and its
    ecosystem have been increasingly complex to grasp. Nowadays, the sheer number
    of frameworks and libraries available is overwhelming, even to those who've been
    in the industry for many years.
  prefs: []
  type: TYPE_NORMAL
- en: The task of this book is to peel back the confusing layers and concepts that
    the world has placed atop the language to reveal its underlying nature and consider
    how we can use it to craft reliable and maintainable code with a focus on usability.
    We will begin by zooming out and considering, in a very fundamental way, why we
    even write code. We will discover that the code we write does not exist in a vacuum.
    We will explore the large and small ways in which our code drastically affects
    our users and fellow programmers, and discuss ways that we can accommodate their
    various needs.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond a fundamental exploration of clean coding principles, we will deeply
    delve into JavaScript itself, guiding you through the language, from its most
    atomic syntax to its more abstract design patterns and conventions. We will also
    explore how we can go about documenting and testing our code in the cleanest way
    possible. You should come away with a solid grasp of the JavaScript language and
    an attuned sense of what clean code is.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for anyone who has an interest in improving their JavaScript skills.
    Whether you are an amateur or a professional, there are aspects of this book that
    you will find valuable. In terms of technical knowledge, the book assumes some
    previous exposure to programming and at least a small amount of experience of
    JavaScript itself. The reader who will get the most value from this book is someone
    who has programmed for a number of months or years in JavaScript but has always
    felt weighed down by the complexity of it and is unsure of how to craft clean
    and bug-free JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](38edb3e5-10eb-471a-a2c0-4e1a03d69af5.xhtml), *Setting the Scene*,
    asks you to consider why we write code and explores the many ways in which we
    communicate our intent via code. This chapter provides a firm foundation upon
    which you can build and adapt your understanding of clean code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](fd19fa13-f04a-4e03-9bc3-ba318cacf731.xhtml), *The Tenets of Clean
    Code*, uses real-world JavaScript examples to explore the four tenets of clean
    code: reliability, efficiency, maintainability, and usability*.* Each of these
    vital tenets serves as a foundation for the rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](4aede822-c58b-4e6b-81cd-ba27582e9aa7.xhtml), *The Enemies of Clean
    Code*, uncovers some of the more notorious enemies of clean code. These are the
    forces and dynamics that lead to the proliferation of unclean code, such as egotistic
    programming, bad metrics, and cargo cults.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](98ac69ed-3848-4359-b9fb-1a9f8b8daed4.xhtml), *SOLID and Other Principles*,
    explores the famous SOLID principles and uncovers their deeper meaning by tying
    them together with functional programming principles, the Law of Demeter, and
    the abstraction principle.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](cf2c2cfc-6b5e-48a3-a7ef-99169bd9067d.xhtml), *Naming Things Is
    Hard*, discusses one of the most challenging aspects of programming: *naming things*.
    It poses some of the specific challenges of naming and ties together a foundational
    naming theory with real-world naming problems and solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ae94cc02-a077-4ffb-903a-b9ec222a2a09.xhtml), *Primitive and Built-In
    Types*, begins a deep exploration into JavaScript. This chapter details the primitive
    and built-in types available to the JavaScript programmer, warning against common
    pitfalls and sharing best practices.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](43f1d47f-08cd-4c87-a731-7c359ef3bedd.xhtml), *Dynamic Typing*,
    discusses JavaScript''s dynamic nature, and goes over some of the challenges related
    to this. It explains how we can both cleanly detect and convert to various types
    (via explicit casting or implicit coercion).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](d8c326c9-db6f-4562-b92d-975dd0159182.xhtml), *Operators*, thoroughly
    details the operators available within JavaScript, discussing their behaviors
    and challenges. This includes a detailed account of every operator alongside examples,
    pitfalls, and best practices.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](1b37008e-8843-431a-9545-56d4246e3447.xhtml), *Parts of Syntax and
    Scope*, provides a more macro view of the language, highlighting the broader syntaxes
    and constructs available, such as statements, expressions, blocks, and scope.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](b41df1c6-fc76-4d51-b95c-ae39ab040ab1.xhtml), *Control Flow*, broadly
    covers the concept of control flow, highlighting the crucial difference between
    imperative and declarative forms of programming. It then explores how we can cleanly
    control flow within JavaScript by utilizing control-moving mechanisms such as
    invoking, returning, yielding, throwing, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](9ef81929-c89f-4988-aa66-436c59f7f43f.xhtml), *Design Patterns*,
    broadly explores some of the more popular design patterns used in JavaScript.
    It describes the major architectural design patterns of MVC and MVVM, and the
    more modular design patterns such as the Constructor pattern, the Class pattern,
    the Prototype pattern, and the Revealing Module pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](5df59321-fd46-4504-93ed-5e8555b33b01.xhtml), *Real-World Challenges*,
    looks at some of the more realistic problem domains within the JavaScript ecosystem
    and considers how they can be handled cleanly. Topics covered include the DOM
    and single-page applications, dependency management, and security (XSS, CSRF,
    and more).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](58d1cced-ee45-4200-b01b-9c02a40f1195.xhtml), *The Landscape of
    Testing*, describes the broad concepts of testing software, and how these can
    be applied to JavaScript. It specifically explores unit testing, integration testing,
    E2E testing, and TDD.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](13b7c7f2-9967-49c6-9cb7-54984545427c.xhtml), *Writing Clean Tests*,
    delves further into the domain of testing by advising you to author assertions
    and test suites in a way that is utterly clear, intuitive, representative of the
    problem domain, and conceptually hierarchical.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](be9ab437-faeb-4a14-8a5f-663ddba470fd.xhtml), *Tools for Cleaner
    Code*, briefly considers several available tools and development flows that can
    greatly aid us in writing and maintaining clean code. Included are topics such
    as linting, formatting, source control, and continuous integration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](86a160b7-1472-4d38-816b-0e71d3450fdd.xhtml), *Documenting Your
    Code*, uncovers the unique challenges of documentation. This chapter challenges
    you to consider all the mediums of documentation that are available and asks you
    to consider how we can understand and accommodate the needs and questions of individuals
    who may wish to utilize or maintain our code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](0fe4d928-ff4f-4758-a54f-e8ee8dab6571.xhtml), *Other Peoples''
    Code*, looks into the challenges of selecting, understanding, and making use of
    third-party code within our  JavaScript projects (such as third-party libraries,
    frameworks, and utilities). It also discusses methods of encapsulation that allow
    us to interface with third-party code in a clean and minimally invasive way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18](6b197059-b00f-48fb-bc6b-c46ad73fa2b8.xhtml), *Communication and
    Advocacy*, explores the wider project-based and interpersonal challenges inherent
    in the crafting and delivery of clean software. This includes a detailed inquiry
    into the following: planning and setting requirements, communication strategies,
    and identifying issues and driving change.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19](50986a9c-9b05-4b10-8ea8-099db6924120.xhtml), *Case Study*, concludes
    the book with a walk-through of the development of a JavaScript project, including
    both client-side and server-side pieces. This chapter draws together the principles
    espoused within the book and affirms them by exposing you to a real-world problem
    domain and the development of a usable solution.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get the most out of this book, it is useful to have a basic understanding
    of the JavaScript language and to have some experience of atleast one platform
    in which JavaScript is utilized. This may include the browser or Node.js, for
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for you to execute the pieces of code shared within the book, you
    have a few options available:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file with `<script>` in which you can place any JavaScript code
    you wish to test. In order to observe an output visually, you can either use `alert()`
    or `console.log()`. In order to view values outputted via `console.log()`, you
    can open the development tools of the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directly open the development tools of any modern browser and directly type
    JavaScript expressions and statements into the JavaScript console. A guide to
    doing this within the Chrome browser can be found here: [https://developers.google.com/web/tools/chrome-devtools/console/javascript](https://developers.google.com/web/tools/chrome-devtools/console/javascript).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `test.js` file and run it via Node.js or use the Node.js REPL to interactively
    test distinct JavaScript statements and expressions via the command line. A comprehensive
    guide to getting started with Node.js can be found here: [https://nodejs.org/en/docs/guides/getting-started-guide/](https://nodejs.org/en/docs/guides/getting-started-guide/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Browser development tools are accessible within all modern browsers. The shortcuts
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Chrome**: *Ctrl* + *Shift* + *J* on Windows or *CMD* + *Shift* + *J* on
    macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In Firefox**: *Ctrl* + *Shift* + *I* or *F12* on Windows and Linux, or *CMD*
    + *OPTION* + *I* on macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In IE**: *F12* on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are advised to move through the book at your own pace and conduct additional
    research and exploration online if you are finding a topic hard to grasp. Some
    especially helpful resources include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Mozilla Developer Network: [https://developer.mozilla.org/en-US/docs/Web/JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECMAScript Language Specification: [https://www.ecma-international.org/publications/standards/Ecma-262.htm](https://www.ecma-international.org/publications/standards/Ecma-262.htm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The book gets progressively more detailed as you advance through it, so it is
    natural to take a slower pace in later chapters. This may be especially true for
    *Chapters 6-12*, which cover, in great detail, the characteristics of the JavaScript
    language itself.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Clean-Code-in-JavaScript](https://github.com/PacktPublishing/Clean-Code-in-JavaScript). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781789957648_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789957648_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "We find a publicly available package called `shipping_address_validator`and
    decide to use it."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "For the purposes of our case study, the plant names only
    exist as their full Latin names, which includes a family (for example, Acanthaceae)."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
