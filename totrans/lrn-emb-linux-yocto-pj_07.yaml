- en: Chapter 7. ADT Eclipse Plug-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be presented with a new perspective of the available
    tool in the Yocto Project. This chapter marks the beginning of the introduction
    to various tools available in the Yocto Project ecosystem, tools that are very
    useful and different from the Poky reference system. In this chapter, a short
    presentation to the **Application Development Environment** (**ADE**) is presented
    with emphasis on the Eclipse project and the Yocto Project's added plug-ins. A
    number of the plug-ins are shown along with their configurations and use cases.
  prefs: []
  type: TYPE_NORMAL
- en: A broader view of the **Application Development Toolkit** (**ADT**) will also
    be shown to you. This project's main objective is to offer a software stack that
    is able to develop, compile, run, debug, and profile software applications. It
    tries to do this without requiring extra learning from the developer's point of
    view. Its learning curve is very low, taking into consideration the fact that
    Eclipse is one of the most used **Integrated Development Environment** (**IDEs**),
    and over time, it has become very user-friendly, stable, and dependable. The ADT
    user experience is very similar to the one that any Eclipse or non-Eclipse user
    has when they use an Eclipse IDE. The available plug-ins try to make this experience
    as similar as possible so that development is similar to any Eclipse IDE. The
    only difference is between configuration steps, and this defines the difference
    between one Eclipse IDE version and another.
  prefs: []
  type: TYPE_NORMAL
- en: The ADT offers the possibility of using a standalone cross-compiler, debugging
    tool profilers, emulators, and even development board interaction in a platform-independent
    manner. Although interaction with hardware is the best option for an embedded
    developer, in most cases, the real hardware is missing due to various reasons.
    For these scenarios, it is possible to use a QEMU emulator to simulate the necessary
    hardware.
  prefs: []
  type: TYPE_NORMAL
- en: The Application Development Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ADT is one of the components of the Yocto Project and provides a cross-development
    platform, which is perfect for user-specific application development. For the
    development process to take place in an orderly manner, some components are required:'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse IDE Yocto plug-ins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QEMU emulator for specific hardware simulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-toolchain alongside its specific `sysroot`, which are both architecture-specific
    and are generated using the metadata and the build system made available by the
    Yocto Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Userspace tools to enhance a developer's experience with the application development
    process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Eclipse plug-ins are available when offering full support to the Yocto Project
    with the Eclipse IDE and maximizing the Yocto experience. The end result is an
    environment that is customized for the Yocto developer's needs, with a cross-toolchain,
    deployment on a real hardware, or QEMU emulation features, and also a number of
    tools that are available for collecting data, tracing, profiling, and performance
    reviews.
  prefs: []
  type: TYPE_NORMAL
- en: 'The QEMU emulator is used to simulate various hardware. It can be obtained
    with these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the ADT installer script, which offers the possibility of installing it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning a Poky repository and sourcing the environment, access is granted to
    a QEMU environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading a Yocto release and sourcing the environment offers for the same
    result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a cross-toolchain and sourcing the environment to make the QEMU environment
    available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The toolchain contains a cross-debugger, cross-compiler, and cross-linker, which
    are very well used in the process of application development. The toolchain also
    comes with a matching sysroot for the target device because it needs access to
    various headers and libraries necessary to run on the target architecture. The
    sysroot is generated from the root filesystem and uses the same metadata configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The userspace tools include the tools already mentioned in the previous chapters,
    such as SystemTap, PowerTop, LatencyTop, perf, OProfile, and LTTng-UST. They are
    used for getting information about the system and developed application; information,
    such as power consumption, desktop stutters, counting of events, performance overviews,
    and diagnosing software, hardware, or functional problems, and even tracing software
    activities.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before explaining the ADT Project further, its Eclipse IDE plug-ins, other
    features, and functionalities of the setup would be required. To install the Eclipse
    IDE, the first step involves the setup of a host system. There are multiple methods
    to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using an ADT install script**: This is the recommended method to install
    the ADT, mostly because the installation process is completely automated. Users
    are in control of the features that they want available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the ADT tarball**: This method involves a section of an appropriate
    tarball with the architecture-specific toolchain and setting it up using a script.
    The tarball can be both downloaded and manually built using Bitbake. This method
    also has limitations due to the fact that not all of its features are available
    after installation, apart from the cross-toolchain and QEMU emulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using a toolchain from the build directory**: This method takes advantage
    of the fact that a build directory is already available, so the setup of the cross-toolchain
    is very easy. Also, in this case, it faces the same limitation as the one mentioned
    in the preceding point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ADT install script is the preferred method to install the ADT. Of course,
    before moving on to the installation step, the necessary dependencies need to
    be available to make sure that the ADT install script runs smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: These packages were already mentioned in the previous chapters, but they will
    once again, be explained here to make things easy for you. I advise you to go
    back to these chapters and refer to the information once again as a memory exercise.
    To refer to packages that might be of interest to you, take a look at the ADT
    Installer packages, such as `autoconf automake libtool libglib2.0-dev`, Eclipse
    Plug-ins, and graphical support offered by the `libsdl1.2-dev xterm` packages.
  prefs: []
  type: TYPE_NORMAL
- en: After the host system is prepared with all the required dependencies, the ADT
    tarball can be downloaded from [http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/adt-installer/](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/adt-installer/).
    At this location, the `adt_installer.tar.bz2` archive is available. It needs to
    be downloaded and its content extracted.
  prefs: []
  type: TYPE_NORMAL
- en: This tarball can also be generated using the Bitbake build system inside a build
    directory, and the result will be available inside the `tmp/deploy/sdk/adt_installer.tar.bz2`
    location. To generate it, the next command needs to be given into the build directory,
    which is `bitbake adt-installer`. The build directory also needs to be properly
    configured for the target device.
  prefs: []
  type: TYPE_NORMAL
- en: The archive is unpacked using the `tar -xjf adt_installer.tar.bz2` command.
    It can be extracted in any directory, and after unpacking the `adt-installer`
    directory, it is created and contains the ADT installer script called `adt_installer`.
    It also has a configuration file called `adt_installer.conf`, which is used to
    define the configurations before running the script. The configuration file defines
    information, such as the filesystem, kernel, QEMU support, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the variables that the configuration file contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`YOCTOADT_REPO`: This defines the packages and root filesystem on which the
    installation is dependent. Its reference value is defined at [http://adtrepo.yoctoproject.org//1.7](http://adtrepo.yoctoproject.org//1.7).
    Here, the directory structure is defined and its structure is the same between
    releases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YOCTOADT_TARGETS`: This defines the target architecture for which the cross
    development environment is set up. There are default values defined that can be
    associated with this variable, such as `arm`, `ppc`, `mips`, `x86`, and `x86_64`.
    Also, multiple values can be associated with it and the separation between them
    being is done using the space separator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YOCTOADT_QEMU`: This variable defines the use of the QEMU emulator. If it
    is set to `Y`, the emulator will be available after installation; otherwise the
    value is set to `N`, and hence, the emulator won''t be available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YOCTOADT_NFS_UTIL`: This defines if the NFS user-mode that will be installed.
    The available values are, as defined previously, `Y` and `N`. For the use of the
    Eclipse IDE plug-ins, it is necessary to define the `Y` value for both `YOCTOADT_QEMU`
    and `YOCTOADT_NFS_UTIL`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YOCTOADT_ROOTFS_<arch>`: This specifies which architecture root filesystem
    to use from the repository that is defined in the first mentioned `YOCTOADT_REPO`
    variable. For the `arch` variable, the default values are the ones already mentioned
    in the `YOCTOADT_TARGETS` variable. This variable''s valid values are represented
    by the image files available, such as `minimal`, `sato`, `minimal-dev`, `sato-sdk`,`lsb`,
    `lsb-sdk`, and so on. For multiple arguments to the variable, the space separator
    can be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>`: This represents the root filesystem
    from which the `sysroot` of the cross-development toolchain will be generated.
    The valid values for the ''arch'' variable are the same as the one mentioned previously.
    Its value is dependent on what was previously defined as values for the `YOCTOADT_ROOTFS_<arch>`
    variable. So, if only one variable is defines as the value for the `YOCTOADT_ROOTFS_<arch>`
    variable, the same value will be available for `YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>`.
    Also, if multiple variables are defined in the `YOCTOADT_ROOTFS_<arch>` variable,
    then one of them needs to define the `YOCTOADT_TARGET_SYSROOT_IMAGE_<arch>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YOCTOADT_TARGET_MACHINE_<arch>`: This defines the machine for which the image
    is downloaded, as there could be compilation option differences between machines
    of the same architecture. The valid values for this variable are can be mentioned
    as: `qemuarm`, `qemuppc`, `ppc1022ds`, `edgerouter`, `beaglebone`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YOCTOADT_TARGET_SYSROOT_LOC_<arch>`: This defines the location where the target
    `sysroot` will be available after the installation process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are also some variables defined in the configuration files, such as `YOCTOADT_BITBAKE`
    and `YOCTOADT_METADATA`, which are defined for future work references. After all
    the variables are defined according to the needs of the developer, the installation
    process can start. This is done by running the `adt_installer` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of the `adt_installer.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After the installation has started, the user is asked the location of the cross-toolchain.
    If no alternative is offered, the default path is selected and the cross-toolchain
    is installed in the `/opt/poky/<release>` directory. The installation process
    can be visualized both in a silent or interactive way. By using the `I` option,
    the installation is done in an interactive mode, while the silent mode is enabled
    using the `S` option.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the install procedure, the cross-toolchain will be found in its
    defined location. An environment setup script will be available for later usage,
    and the image tarball in the `adt-installer` directory, and the `sysroot` directory
    is defined in the location of the `YOCTOADT_TARGET_SYSROOT_LOC_<arch>` variable.
  prefs: []
  type: TYPE_NORMAL
- en: As shown previously, there is more than one method to prepare the ADT environment.
    The second method involves only the installation of the toolchain installer—although
    it offers the possibility of having a prebuilt cross-tooolchain, support files
    and scripts, such as the `runqemu` script to start something similar to a kernel
    or Linux image in an emulator—which does not offer the same possibilities as the
    first option. Also, this option has its limitations regarding the `sysroot` directory.
    Although it's been generated, the `sysroot` directory might still need to be extracted
    and installed in a separate location. This can happened for various reasons, such
    as the need to boot a root filesystem over NFS or develop the application using
    the root filesystem as the target `sysroot`.
  prefs: []
  type: TYPE_NORMAL
- en: The root filesystem can be extracted from an already generated cross-toolchain
    using the `runqemu-extract-sdk` script, which should be called only after the
    cross-development environment script was set up using source command.
  prefs: []
  type: TYPE_NORMAL
- en: There are two methods to obtain the toolchain installed for this second option.
    The first method involves the use of the toolchain installer available at [http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/).
    Open the folder that matches your development host machine. In this folder, multiple
    install scripts are available. Each one matches a target architecture, so the
    right one should be selected for the target you have. One such example can be
    seen from [http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/x86_64/poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh](http://downloads.yoctoproject.org/releases/yocto/yocto-1.7/toolchain/x86_64/poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh),
    which is, in fact, the installer script for the `armv7a` target and the `x86_64`
    host machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your target machine is not one of the ones that are made available by the
    Yocto community, or if you prefer an alternative to this method, then building
    the toolchain installer script is the method for you. In this case, you will require
    a build directory, and you will be presented with two alternatives, both of them
    are equally good:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one involves the use of the `bitbake meta-toolchain` command, and
    the end result is an installer script that requires the installation and set up
    of the cross-toolchain in a separate location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second alternative involves the use of the `bitbake –c populate_sdk <image-name>`
    task, which offers the toolchain installer script and the matching `sysroot` for
    the target. The advantage here is that the binaries are linked with only one and
    the same `libc`, making the toolchain self-contained. There is, of course, a limitation
    that each architecture can create only one specific build. However, target-specific
    options are passed through the `gcc` options. Using variables, such as `CC` or
    `LD`, makes the process easier to maintain and also saves some space in the build
    directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the installer is downloaded, make sure that the install script has set
    the execution correctly, and start the installation with the `./poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon-toolchain-1.7.sh`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the information you require includes the place where the installation
    should be made, the default location being the `/opt/poky/1.7` directory. To avoid
    this, the script can be called with the `–d <install-location>` argument and the
    installation can be made in the `<install-location>` location, as mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that the `MACHINE` variable is set accordingly in the `local.conf`
    file. Also, if the build is done for a different host machine, then `SDKMACHINE`
    should also be set. More than one `MACHINE` cross-toolchain can be generated in
    the same build directory, but these variables need to be properly configured.
  prefs: []
  type: TYPE_NORMAL
- en: After the installation process is finished, the cross-toolchain will be available
    in the selected location, and the environment script will also be available for
    sourcing when needed.
  prefs: []
  type: TYPE_NORMAL
- en: The third option involves the use of the build directory and the execution of
    the `bitbake meta-ide-support` command. Inside the build directory, the proper
    environment needs to be set using one of the two available build environment setup
    scripts, which include the `oe-init-build-env` script or `oe-init-build-env-memres`.
    The local configuration from the `local.conf` file also needs to be set accordingly
    for the target architecture. After these steps are fulfilled by the developer,
    the `bitbake meta-ide-support` command could be used to start the generation of
    the cross-toolchain. At the end of the process, an environment setup script will
    be available inside the `<build-dir-path>/tmp` directory, but in this case, the
    toolchain is tightly linked into the build directory in which it was built.
  prefs: []
  type: TYPE_NORMAL
- en: With the environment set up, writing of an application can start, but the developer
    would still need to complete some steps before finishing the activity, such as
    testing the application on the real root filesystem, debugging, and many others.
    For the kernel module and driver implementation, the kernel source code will be
    required, so the activity is just starting.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The plug-ins available for Eclipse from the Yocto Project include the functionalities
    for the ADT Project and toolchain. They allow developers to use a cross-compiler,
    debugger, and all the available tools generated with the Yocto Project, Poky,
    and additional meta layers. Not only can these components be used within the Eclipse
    IDE, but they also offer a familiar environment for application development.
  prefs: []
  type: TYPE_NORMAL
- en: The Eclipse IDE is an alternative for developers who are not interested in interacting
    with editors, such as `vim`, although, in my opinion, `vim` can be used for all
    kinds of projects. Even if their dimensions or complexities are not a problem,
    the overhead for using `vim` might not suit all tastes. The Eclipse IDE is the
    best alternative available for all developers. It has a lot of useful features
    and functionalities that can make your life a little easier and it is pretty easy
    to grasp.
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project offers support for two versions of Eclipse, Kepler and Juno.
    The Kepler version is the one recommended with the latest Poky release. I also
    recommend the Kepler 4.3.2 version of Eclipse, the one downloaded from the official
    download site of Eclipse, [http://www.eclipse.org/downloads](http://www.eclipse.org/downloads).
  prefs: []
  type: TYPE_NORMAL
- en: 'From this site, the Eclipse Standard 4.3.2 version containing the **Java Development
    Tools** (**JDT**), the Eclipse Platform, and the Development Environment Plug-ins
    for the host machine should be downloaded. After the download is finished, the
    received archive content should be extracted using the tar command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is represented by the configuration. With the content extracted,
    the Eclipse IDE needs to be configured before installing the Yocto Project-specific
    plug-ins. The configuration starts with initializing the Eclipse IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Eclipse IDE is started after executing the `./eclipse` executable and setting
    the `Workspace` location. This is how the starting windows looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Eclipse IDE](img/image00326.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Eclipse window
  prefs: []
  type: TYPE_NORMAL
- en: 'To initialize the Eclipse IDE perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Workbench**, and you will be moved into the empty workbench where the
    projects source code will be written.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate through the **Help** menu and select **Install New Software**.![Eclipse
    IDE](img/image00327.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Help menu
  prefs: []
  type: TYPE_NORMAL
- en: A new window will open, and in the **Work with:** drop-down menu, select **Kepler
    - http://download.eclipse.org/releases/kepler**, as shown in the following screenshot:![Eclipse
    IDE](img/image00328.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install window
  prefs: []
  type: TYPE_NORMAL
- en: Expand the **Linux Tools** section and select **LTTng – Linux Tracing Toolkit**
    box, as shown in the following screenshot:![Eclipse IDE](img/image00329.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install—LTTng – Linux Tracing Toolkit box
  prefs: []
  type: TYPE_NORMAL
- en: 'Expand the **Moble and Device Development** section and select the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**C/C++ Remote Launch (Requires RSE Remote System Explorer)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote System Explorer End-user Runtime**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote System Explorer User Actions**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target Management Terminal**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCF Remote System Explorer add-in**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCF Target Explorer**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Eclipse IDE](img/image00330.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Expand the **Programming Languages** section and select the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**C/C++ Autotools Support**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C/C++ Development Tools**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Eclipse IDE](img/image00331.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Available software list window
  prefs: []
  type: TYPE_NORMAL
- en: Finish the installation after taking a quick look at the **Install Details**
    menu and enabling the license agreement:![Eclipse IDE](img/image00332.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install details window
  prefs: []
  type: TYPE_NORMAL
- en: 'After these steps, the Yocto Project Eclipse plug-ins can be installed into
    the IDE, but not before restarting the Eclipse IDE to make sure that the preceding
    changes take effect. The result after the configuration phase is visible here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Eclipse IDE](img/image00333.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Eclipse—Configuring phase results
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Eclipse plug-ins for the Yocto Project, these steps are required:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the Eclipse IDE as mentioned previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the previous configuration, select the **Install New Software**
    option from the **Help** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button and insert `downloads.yoctoproject.org/releases/eclipse-plugin/1.7/kepler/`
    in the URL section. Give a proper name to the new **Work with:** site as indicated
    here:![Eclipse IDE](img/image00334.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit site window
  prefs: []
  type: TYPE_NORMAL
- en: After the **OK** button is pressed, and the **Work with** site is updated, new
    boxes appear. Select all of them, as shown in this image, and click on the **Next**
    button:![Eclipse IDE](img/image00335.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install details window
  prefs: []
  type: TYPE_NORMAL
- en: One final pick at the installed components and the installation is approaching
    its end.![Eclipse IDE](img/image00336.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install details window
  prefs: []
  type: TYPE_NORMAL
- en: If this warning message appears, press **OK** and move further. It only lets
    you know that the installed packages have unsigned content.![Eclipse IDE](img/image00337.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security warning window
  prefs: []
  type: TYPE_NORMAL
- en: The installation finishes only after the Eclipse IDE is restarted for the changes
    to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: After the installation, the Yocto plug-ins are available and ready to be configured.
    The configuration process involves the setup of the target-specific option and
    cross-compiler. For each specific target, the preceding configurations steps need
    to be performed accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration process is done by selecting the **Preferences** option from
    the **Window** menu. A new window will open, and from there, the **Yocto Project
    ADT** option should be selected. More details are available, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Eclipse IDE](img/image00338.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Eclipse IDE—Preferences
  prefs: []
  type: TYPE_NORMAL
- en: The next thing to do involves the configuration of the available options of
    the cross-compiler. The first option refers to the toolchain type, and there are
    two options available, **Standalone prebuilt toolchain** and **Build system derived
    toolchain**, which is the default selected option. The former refers to a toolchain
    specific for an architecture that already has an existing kernel and root filesystem,
    so the developed application will be made available in the image manually. However,
    this step is not a requirement since all the components are separated. The latter
    option refers to a toolchain built inside a Yocto Project build directory.
  prefs: []
  type: TYPE_NORMAL
- en: The next elements that need to be configured are the toolchain location, `sysroot`
    location, and the target architecture. The **Toolchain Root Location** is used
    to define the toolchain install location. For an installation done with the `adt_installer`
    script, for example, the toolchain will be available in the `/opt/poky/<release>`
    directory. The second argument, **Sysroot Location**, represents the location
    of the target device root filesystem. It can be found in the `/opt/poky/<release>`
    directory, as seen the preceding example, or even inside the build directory if
    other method to generate it were used. The third and last option from this section
    is represented by the **Target Architecture** and it indicates the type of hardware
    used or emulated. As it can be seen on the window, it is a pull-down menu where
    the required option is selected, and a user will find all the supported architectures
    listed. In a situation where the necessary architecture is not available inside
    the pull-down menu, the corresponding image for the architecture will need to
    be built.
  prefs: []
  type: TYPE_NORMAL
- en: The last remaining section is represented by the target specific option. This
    refers to the possibility of emulating an architecture using QEMU or running the
    image on the externally available hardware. For external hardware, use the **External
    HW** option that needs to be selected for the work to be finished, but for the
    QEMU emulation, there are still things to do besides selecting the **QEMU** option.
    In this scenario, the user will also need to indicate the **Kernel** and **Custom
    Option**. For the kernel selection, the process is simple. It is available in
    the prebuilt image location in case the **Standalone pre-built toolchain** option
    was selected or in the `tmp/deploy/images/<machine-name>` directory if the **Build
    system derived toolchain** option was selected. For the second option, the **Custom
    Option** argument, the process for adding it will not be as simple as the preceding
    options.
  prefs: []
  type: TYPE_NORMAL
- en: The **Custom Option** field needs to be filled with various options, such as
    `kvm`, nographic, `publicvnc`, or `serial`, which indicate major options for the
    emulated architecture or their parameters. These are kept inside angled brackets,
    and include parameters, such as the memory used (`-m 256`), networking support
    (`-net`), and full screen support (`-full-screen`). More information regarding
    the available options and parameters can be found using the `man qemu` command.
    All of the preceding configurations can be overwritten using the **Change Yocto
    Project Settings** option from the **Project** menu after a project is defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a project, these steps need to be taken:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Project…** option from the **File** | **New** menu option, as shown
    here:![Eclipse IDE](img/image00339.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eclipse IDE—Project
  prefs: []
  type: TYPE_NORMAL
- en: Select **C project** from the **C/C++** option. This will open a **C Project**
    window:![Eclipse IDE](img/image00340.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eclipse IDE—New project window
  prefs: []
  type: TYPE_NORMAL
- en: In the **C Project** window, there are multiple options available. Let's select
    **Yocto Project ADT Autotools Project**, and from there, the **Hello World ANSI
    C Autotools Project** option. Add a name for the new project, and we are ready
    to move to the next steps:![Eclipse IDE](img/image00341.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C project window
  prefs: []
  type: TYPE_NORMAL
- en: In the **C Project** window we you be prompted to add information regarding
    the **Author**, **Copyright notice**, **Hello world greetings**, **Source**, and
    **License** fields accordingly:![Eclipse IDE](img/image00342.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C project—basic settings window
  prefs: []
  type: TYPE_NORMAL
- en: After all the information is added, the **Finish** button can be clicked on.
    The user will be prompted in the new **C/C++** perspective that is specific for
    the opened project, with the newly created project appearing on the left-hand
    side of the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the project is created and the source code is written, to build the project,
    select the **Build Project** option from the **Project…** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: QEMU emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QEMU is used in the Yocto Project as a virtualization machine and emulator for
    various target architectures. It is very useful to run and test various Yocto
    generated applications and images, apart from fulfilling other purposes. Its primary
    use outside of the Yocto world is its selling point for the Yocto Project too,
    making it the default tool to be used to emulate hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about the use case of QEMU can be found by accessing [http://www.yoctoproject.org/docs/1.7/adt-manual/adt-manual.html#the-qemu-emulator](http://www.yoctoproject.org/docs/1.7/adt-manual/adt-manual.html#the-qemu-emulator).
  prefs: []
  type: TYPE_NORMAL
- en: Interaction with the QEMU emulation is done within Eclipse, as shown previously.
    For this to happen, the proper configuration would be required, as instructed
    in the preceding section. Starting the QEMU emulation here is done using the **External
    Tools** option from the **Run** menu. A new window will be opened for the emulator,
    and after the corresponding login information is passed to the prompt, the shell
    will be available for user interaction. An application can be deployed and debugged
    on the emulator also.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information regarding QEMU interaction is available at [http://www.yoctoproject.org/docs/1.7/dev-manual/dev-manual.html#dev-manual-qemu](http://www.yoctoproject.org/docs/1.7/dev-manual/dev-manual.html#dev-manual-qemu).
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debugging an application can also be done using the QEMU emulator or the actual
    target hardware, if it exists. When the project was configured, a run/debug Eclipse
    configuration was generated as a **C/C+ Remote Application** instance, and it
    can be found on the basis of its name, which is according to the `<project-name>_gdb_-<suffix>`
    syntax. For example, `TestProject_gdb_armv5te-poky-linux-gnueabi` could be an
    example of this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to the Eclipse GDB interface and start the remote target debugging
    process, the user is required to perform a few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **C/C++ Remote application** from the **Run** | **Debug configuration**
    menu and choose the run/debug configuration from the **C/C++ Remote Application**
    available in the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the suitable connection from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the binary application to deploy. If multiple executables are available
    in your project, by pushing the **Search Project** button, Eclipse will parse
    the project and provide a list with all the available binaries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the absolute path in which the application will be deployed by setting
    the **Remote Absolute File Path for C/C++ Application:** field accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Selecting the debugger option is available in the **Debugger** tab. To debug
    shared libraries, a few extra steps are necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Add** | **Path Mapping** option from the **Source** tab to make
    sure a path mapping is available for the debug configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Load shared libraries symbols automatically** from the **Debug/Shared
    Library** tab and indicate the path of the shared libraries accordingly. This
    path is highly dependent on the architecture of the processor, so be very careful
    which library file you indicate. Usually, for the 32-bit architecture, the `lib`
    directory is selected, and for the 64-bit architecture, the `lib64` directory
    is chosen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the **Arguments** tab, there is a possibility of passing various arguments
    to the application binary during the time of execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once all the debug configurations are finished, click on the **Apply** and
    **Debug** buttons. A new GDB session will be launched and **Debug perspective**
    will open. When the debugger is being initialized, Eclipse will open three consoles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A GDB console named after the GDB binary described previously, used for command-line
    interaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A remote shell used to run an application display results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local machine console that is named after the binary path, which in most of
    cases, is not used. It remains as an artefact.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the setup of the debug configuration, the application can be rebuilt and
    executed again using the available **Debug** icon in the toolbar. If, in fact,
    you want only to run and deploy the application, the **Run** icon can be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Profiling and tracing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inside the **Yocto Tools** menu, you can see the supported tools that are used
    for the tracing and profiling of developed applications. These tools are used
    for enhancing various properties of the application and, in general, the development
    process and experience. The tools that will be presented are LTTng, Perf, LatencyTop,
    PerfTop, SystemTap, and KGDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one we''ll take a look at is the LTTng Eclipse Plug-in, which offers
    the possibility of tracing a target session and analyzing the results. To start
    working with the tool, a quick configuration is necessary first, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the tracing perspective by selecting **Open Perspective** from the **Window**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new tracing project by selecting **Project** from the **File** | **New**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Control View** from the **Window** | **Show view** | **Other…** |
    **Lttng** menu. This will enable you to access all these desired operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting/stopping tracing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll introduce the user space performance analyzing tool called **Perf**.
    It offers statistical profiling of the application code and a simple CPU for multiple
    threads and kernel. To do this, it uses a number of performance counters, dynamic
    probes, or trace points. To use the Eclipse Plug-in, a remote connection to the
    target is required. It can be done by the Perf wizard or by using the **Remote
    System Explorer** | **Connection** option from the **File** | **New** | **Other**
    menu. After the remote connection is set up, interaction with the tool is the
    same as in the case of the command line support available for the tool.
  prefs: []
  type: TYPE_NORMAL
- en: '**LatencyTop** is an application that is used to identify the latencies available
    within the kernel and also their root cause. This tool is not available for ARM
    kernels that have **Symmetric multiprocessing** (**SMP**) support enabled due
    to the limitation of the ARM kernels. This application also requires a remote
    connection. After the remote connection is set up, the interaction is the same
    as in the case of the command line support available for the tool. This application
    is run from the Eclipse Plug-in using `sudo`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**PowerTop** is used to measure the consumption of electrical power. It analyzes
    the applications, kernel options, and device drivers that run on a Linux system
    and estimates their power consumption. It is very useful to identify components
    that use the most amount of power. This application requires a remote connection.
    After the remote connection is set up, the interaction with the application is
    the same as for the command line available support for the tool. This application
    is run from the Eclipse Plug-in using the –d option to display the output in the
    Eclipse window.'
  prefs: []
  type: TYPE_NORMAL
- en: '**SystemTap** is a tool that enables the use of scripts to get results from
    a running Linux. SystemTap provides free software (GPL) infrastructure to simplify
    the gathering of information about the running Linux system via the tracing of
    all kernel calls. It''s very similar to dtrace from Solaris, but it is still not
    suited for production systems, unlike dtrace. It uses a language similar to `awk`
    and its scripts have the `.stp` extension. The monitored data can be extracted
    and various filters and complex processing can be done on them. The Eclipse Plug-in
    uses the `crosstap` script to translate the `.stp` scripts to a C language to
    create a `Makefile`, run a C compiler to create a kernel module for the target
    architecture that is inserted into the target kernel, and later, collect the tracing
    data from the kernel. To start the SystemTap plug-in in Eclipse, there are a number
    of steps to be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **systemtap** option from the **Yocto Project Tools** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the opened windows, the crosstap argument needs to be passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Metadata Location** variable to the corresponding `poky` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set **Remote User ID** by entering the root (the default option) because it
    has `ssh` access to the target-any other user that has the same privileges is
    also a good choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set in the **Remote Host** variable to the corresponding IP address for the
    target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the **Systemtap Scripts** variable for the full path to the `.stp` scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set additional cross options using the **Systemtap Args** field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of the `.stp` script should be available in the console view from
    Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last tool we''ll take a look at is **KGDB**. This tool is used specifically
    for the debugging of Linux kernel, and is useful only if development on the Linux
    kernel source code is done inside the Eclipse IDE. To use this tool, a number
    of necessary configuration setups are required:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Disable the C/C++ indexing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **C/C++ Indexer** option from the **Window** | **Preferences** menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unselect the **Enable indexer** checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a project where the kernel source code can be imported:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **C/C++** | **C Project** option from the **File** | **New** menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **Makefile project** | **Empty project** option and give a proper
    name to the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unselect the **Use default location** option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Browse** button and identify the kernel source code local git
    repository location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the **Finish** button and the project should be created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After the prerequisites are fulfilled, the actual configuration can start:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Debug Configuration** option from the **Run** menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-click on the **GDB Hardware Debugging** option to create a default configuration
    named **<project name> Default**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the **Main** tab, browse to the location of the `vmlinux` built image,
    select the **Disable auto build** radio button, as well as the **GDB (DFS) Hardware
    Debugging Launcher** option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the **C/C++ Application** option available in the **Debugger** tab, browse
    for the location of the GDB binary available inside the toolchain (if ADT installer
    script is available, its default location should be `/opt/poky/1.7/sysroots/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi/arm-poky-linux-gnueabi-gdb`).
    Select **Generic serial option** from the **JTAG Device** menu. The **Use remote
    target** option is a requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the **Startup** tab, select the **Load symbols** option. Make sure that
    the **Use Project binary** option indicates the correct `vmlinux` image and that
    the **Load image** option is not selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the **Apply** button to make sure the previous configuration is enabled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prepare the target for the serial communication debugging:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `echo ttyS0,115200` | `/sys/module/kgdboc/parameters/kgdboc` option
    to make sure the appropriate device is used for debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start KGDB on the `echo g` | `/proc/sysrq-trigger` target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close the terminal with the target but keep the serial connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **Debug Configuration** option from the **Run** menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the previously created configuration and click on the **Debug** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the **Debug** button is pressed, the debug session should start and the
    target will be halted in the `kgdb_breakpoint()` function. From there, all the
    commands specific to GDB are available and ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: The Yocto Project bitbake commander
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The bitbake commander offers the possibility of editing recipes and creating
    a metadata project in a manner similar to the one available in the command line.
    The difference between the two is that the Eclipse IDE is used to do the metadata
    interaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure that a user is able to do these sort of actions, a number of steps
    are required:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Project** option from the **File** | **New** menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **Yocto Project BitBake Commander** wizard from the opened window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **New Yocto Project** option and a new window will be opened tp define
    properties of the new project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Project Location**, identify the parent of the `poky` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the **Project Name** option to define the project name. Its default value
    is poky
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the **Remote service provider** variable, select the **Local** choice and
    make use of the same choice for the **Connection name** drop-down list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that the **Clone** checkbox is not selected for an installed `poky`
    source directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using the Eclipse IDE, its features are available to be used. One of the
    most useful features is the quick search option that could prove to be very useful
    for some developers. Other benefits include the possibility of creating recipes
    using templates, editing them with syntax highlighting, auto completion, error
    reports on the fly, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of bitbake commander is restricted to local connections only. The remote
    connection causes the IDE to freeze due to a bug available upstream.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were presented with information about the functionalities
    of the ADE offered by the Yocto Project, and the numerous Eclipse Plug-ins available
    for application development not only as an alternative, but also as a solution
    for developers who are connected to their IDEs. Although the chapter started with
    an introduction to the application development options for the command-line enthusiast,
    it shortly became more about IDE interaction than anything else. This happened
    because alternative solutions need to be available so that developers could choose
    what fits their needs best.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, a number of Yocto Project components will be presented.
    This time, they are not related to application development, but involve metadata
    interaction, quality assurance, and continuous integration services. I will try
    to present yet another face of the Yocto Project that I believe will help readers
    get a better picture of the Yocto Project, and eventually, interact with and contribute
    to the components that suit them and their needs best.
  prefs: []
  type: TYPE_NORMAL
