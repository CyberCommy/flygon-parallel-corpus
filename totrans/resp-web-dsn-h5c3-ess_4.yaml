- en: Chapter 4. Exploring Media Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Mobile to overtake fixed Internet access by 2014.*'
  prefs: []
  type: TYPE_NORMAL
- en: This bold prediction from Mary Meeker, an analyst from KPCB, back in 2008 came
    true in 2013-14, when mobile Internet usage rose to 51% in the USA, overtaking
    desktop for the first time. Part of this can be attributed to the use of media
    queries, the basic principles of which haven't changed since their official introduction
    in 2000.
  prefs: []
  type: TYPE_NORMAL
- en: Today, queries exist to support anything from high-resolution images to monochrome
    screens and handheld devices; throughout the course of this chapter, we'll continue
    with the theme of discovering what is possible with just a browser and text editor,
    and show you that it isn't always necessary to download anything to create media
    queries when building responsive sites.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the basics of media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating breakpoints and removing the need for them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring best practice and common mistakes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking things further
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curious? Let's get cracking.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring some examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a browser; let's go and visit some sites.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you may think I''ve lost my marbles, but stay with me. I want to show
    you a few examples. Let''s take a look at a couple of example sites at different
    screen widths. How about this example from my favorite coffee company, Starbucks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring some examples](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Try resizing the browser window; if you get small enough, you will see something
    akin to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring some examples](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s another example—we cannot forget the site for the publisher of this
    book, Packt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring some examples](img/image_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Try changing the size of your browser window. If we resize it enough, it will
    show this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring some examples](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For our third and final example, let''s go visit CSS Tricks, the site created
    by Chris Coyier, at [http://www.css-tricks.com](http://www.css-tricks.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring some examples](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we resize this to a smaller width, this is what we will get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring some examples](img/image_04_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, what was the point of all that, I hear you ask? Well, it's simple. All
    of them use media queries in some form or other; CSS Tricks uses the queries built
    into WordPress, Packt's site is hosted using Drupal, and Starbucks' site is based
    around the Handlebars template system.
  prefs: []
  type: TYPE_NORMAL
- en: The key here is that all use media queries to determine what should be displayed;
    throughout the course of this chapter, we'll explore using them in more detail,
    and see how we can use them to better manage content in responsive sites. Let's
    make a start with exploring their make up in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The developer Bruce Lee sums it up perfectly, when likening the effects of
    media queries to how water acts in different containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Empty your mind, be formless, shapeless—like water. Now you put water in a
    cup, it becomes the cup; you put water into a bottle it becomes the bottle; you
    put it in a teapot it becomes the teapot. Now water can flow or it can crash.
    Be water, my friend.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use media queries to apply different CSS styles, based on available
    screen estate or specific device characteristics. These might include, but not
    be limited to the type of display, screen resolution, or display density. Media
    queries work on the basis of testing to see if certain conditions are true, using
    this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use a similar principle to determine if entire style sheets should be
    loaded, instead of individual queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Seems pretty simple, right? The great thing about media queries is that we don't
    need to download or install any additional software to use or create them; we
    can build most of them in the browser directly.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the available media types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we take a look at the example query in the previous section, we see that
    part of it is made up of the type of media in use. This is just part of the query.
    All media queries come in two parts, with the first part controlling how our CSS
    will be displayed, with the second part taking care of when it is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This illustrates two ways of referencing media queries: the first example doesn''t
    specify the media type, so we can infer it will be all by default; the second
    part of it states that it will only apply when the width of our window is at least
    `800px`.'
  prefs: []
  type: TYPE_NORMAL
- en: The second media query one doesn't specify the media type either, so again all
    will be inferred as the default; this time, the `.sidebar` element will not be
    displayed if the window width is less than `600px` wide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what all media types can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Value** | **Used for** |'
  prefs: []
  type: TYPE_TB
- en: '| `all` | All types of media |'
  prefs: []
  type: TYPE_TB
- en: '| `print` | Printers or printing content to media |'
  prefs: []
  type: TYPE_TB
- en: '| `screen` | Screens/displays (such as computers, mobiles, or tablets) |'
  prefs: []
  type: TYPE_TB
- en: '| `speech` | Screen readers |'
  prefs: []
  type: TYPE_TB
- en: '| `braille` | Braille tactile feedback devices |'
  prefs: []
  type: TYPE_TB
- en: '| `embossed` | Paged braille printers |'
  prefs: []
  type: TYPE_TB
- en: '| `handheld` | Handheld devices, except smartphones and tablets, which use
    `screen` instead |'
  prefs: []
  type: TYPE_TB
- en: '| `print` | Paged material and for documents viewed on screen in print preview
    mode |'
  prefs: []
  type: TYPE_TB
- en: '| `projection` | Projecting presentations |'
  prefs: []
  type: TYPE_TB
- en: '| `screen` | Color computer screens and smartphones |'
  prefs: []
  type: TYPE_TB
- en: '| `speech` | Speech synthesizers |'
  prefs: []
  type: TYPE_TB
- en: '| `tty` | Media using a fixed-pitch character grid (such as teletypes, terminals,
    or portable devices with limited display capabilities |'
  prefs: []
  type: TYPE_TB
- en: In addition, to this, we have a number of features that we can use to control
    the trigger for displaying the content; it's worth getting to know them, as they
    all play an important role, but work in different ways. Let's take a look at the
    list in more detail and learn what each of them does in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Listing the available media features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a query that specifies the media target is only half the picture; we
    also need to give it something that controls when to display it! To achieve this,
    we can provide one or more conditions that must be satisfied in order for content
    to be styled or displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at some of the options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name of the attribute** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `aspect-ratio` | Viewport''s width:height ratio |'
  prefs: []
  type: TYPE_TB
- en: '| `device-aspect-ratio` | Device''s width:height ratio |'
  prefs: []
  type: TYPE_TB
- en: '| `device-[height&#124;width]` | Height or width of device''s screen |'
  prefs: []
  type: TYPE_TB
- en: '| `height` | Viewport''s height |'
  prefs: []
  type: TYPE_TB
- en: '| `min-device-pixel-ratio` | Check device''s pixel ratio. Good for high definition
    and retina devices (where the ratio is greater than 2) |'
  prefs: []
  type: TYPE_TB
- en: '| `[min&#124;max]-aspect-ratio` | Viewport''s minimum or maximum width:height
    ratio |'
  prefs: []
  type: TYPE_TB
- en: '| `[min&#124;max]-device-aspect-ratio` | Device''s minimum or maximum width:height
    ratio |'
  prefs: []
  type: TYPE_TB
- en: '| `[min&#124;max]-device-height` | Device''s minimum or maximum height or width
    |'
  prefs: []
  type: TYPE_TB
- en: '| `[min&#124;max]-width` | Viewport''s minimum or maximum width |'
  prefs: []
  type: TYPE_TB
- en: '| `orientation` | Viewport''s orientation in portrait or landscape mode |'
  prefs: []
  type: TYPE_TB
- en: '| `resolution` | Device''s resolution (in dpi or dpcm) |'
  prefs: []
  type: TYPE_TB
- en: '| `width` | Viewport''s width |'
  prefs: []
  type: TYPE_TB
- en: The key here is selecting the right attribute against which we should run our
    test; a great example is checking orientation so that we can determine if a tablet
    is in portrait or landscape mode. We will make good use of some of these query
    tests later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, time to move on. The theme so far has been what we can achieve by just
    using a browser and a text editor. This may seem limiting at first, but I maintain
    that too many people resort to using additional help (such as using jQuery) to
    create queries when it isn''t always necessary to do so. In the main this will
    work, but there are some points that we should consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Do you need to support IE8 or below? If so, then we need to provide additional
    support for this; a decision by Microsoft in early 2016 though means that IE8
    is no longer supported, so now is the time to really consider if this browser
    should feature in your designs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for some of the newer media queries, such as max resolution, is only
    available in the newer browsers; it's worth checking the CanIUse.com site and
    your server logs to confirm if not supporting older browsers will be an issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we need to provide fallback support, then don't automatically assume this
    means we must use a JavaScript-based solution; it's worth considering what support
    you need to offer, and whether you really need to use media queries (more on this
    anon).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Okay, let''s move on: it''s time to get physical, and stuck into something
    more practical! We''ve covered some of the different facets that make up queries
    and explored some of the considerations we need to allow for, when working with
    just a browser and text editor. Before we get too practical though, we need to
    cover one more topic. There are occasions when we need to test for multiple conditions.
    We can do this using logical operators. Let''s take a quick look at some of these
    in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing operators in our queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When composing media queries that require multiple tests, we can make use of
    logical operators to confirm if one or more CSS rules should be applied to our
    content. If we use logical operators, we need to encapsulate each attribute that
    is tested in parentheses; otherwise, it will generate an error in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the more common examples of operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '**And**: It is used to combine multiple media types or media features into
    a single complex query. It works normally like arithmetic and operators, that
    is, requires each condition to be true to execute the query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not**: We can use this to negate a query. It applies on the whole media query
    and works only if the entire query would otherwise return false (such as `min-width:
    700px` on a `600px` display). This operator must be used with a media type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only**: It is used to apply styles only when we need to prevent applying
    selected styles in old browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Media queries are case sensitive, and will return false if unknown media types
    are encountered.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we''ve talked about the basics of what a media query looks like: let''s
    explore how we can use them to manage content by identifying where our designs
    break at different screen sizes. These breaks, or **breakpoints**,are what make
    media queries work – whilst it is clearly key that we get them right, it is also
    important to know when we should and should not use them...'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying common breakpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an age of responsive design, breakpoints are key to a successful site; it's
    all about defining where our design might break, if we were to resize the available
    screen width. It is important to understand that no two sites will have identical
    queries in use; this said, there are some we can use that can be used as a basis
    for our designs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start with this one, for standard desktops:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With the meteoric rise in mobiles, we can''t forget those who are fortunate
    enough to own a smartphone, such as an iPhone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The downside of this query means that it would equally apply to any device
    that was small enough to satisfy the `*-device-width` dimensions given. This is
    not what we want (or intended); to set a cleaner division between mobile devices
    and desktops, we can adapt the query thus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This one is for mobiles in landscape mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Taking it even further, we can also cater for tablets, such as iPads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A similar caveat applies here though – we''ve not set a sufficiently clear
    threshold that can only apply to tablets. We can fix that, by adding the `orientation`
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To complete the picture, we can equally apply a check for when tablet content
    is being displayed in landscape mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These breakpoints are just a small selection of what could be used to add media
    queries to any site; this does not mean we should use them blindly; we should
    only add those queries that allow us to support our target devices. We can of
    course add custom queries, although there is a risk that we can add more than
    is necessary. Let's take a moment to consider the implications of adding custom
    queries, and why this can become an issue for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's worth researching what others have created as media queries online; there
    are dozens of examples available, some of which will be geared toward specific
    devices, such as smartphones or tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom breakpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The media queries we've already outlined should cover a wide range of scenarios;
    there will be occasions when these won't suffice, and our site isn't working as
    expected.
  prefs: []
  type: TYPE_NORMAL
- en: What do we do? Well, we are not limited to using the standard queries we've
    already covered; we can absolutely create our own!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom breakpoint is very easy, as long as we do it the right way;
    done incorrectly, and we can create unnecessary breaks that have a limited use
    or an unintended knock-on effect to other devices. To see what we mean, let's
    work through a (theoretical) example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine your site has been resized to around `335px`, and we see it is a little
    out of kilter—there are a number of elements that don''t quite fit properly. To
    better manage content at this breakpoint, the temptation would be to write a query
    such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We would add our changes in the area headed by `/*Styles*/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sounds reasonable, right? It would be, if it weren''t for one thing: we''ve
    now just created a whole new set of problems for viewing devices that have a width
    lower than `345px`!'
  prefs: []
  type: TYPE_NORMAL
- en: The key to solving this issue is to not simply use a bigger pixel value, as
    this may break the layout for other devices—this includes mobile devices, in portrait
    or landscape modes. The right way to fix this is to identify the exact circumstances
    where our query fails, and to either adjust the query to better match the circumstances
    or (ideally) work out if the design itself can be tweaked to avoid the need for
    a query.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, if our site broke between `325px` and `345px`, and that the
    failure was in portrait mode only, we would create a media query such as this
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How does this help us? Well, refining our query to be more explicit avoids any
    possible conflict with more generic queries that we might have already created.
    We're also making the threshold limits clearer too; we won't trigger the query
    unless we can match all three conditions at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the rationale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some developers may ask why we simply don't just fix the available viewport;
    this changes size when we change orientation, so surely the content will adjust
    to fit, right?
  prefs: []
  type: TYPE_NORMAL
- en: Well, yes and no. It's all about understanding where content is positioned,
    and the types of devices we want to support, in addition to desktops. We should
    not forget that it is perfectly valid to have a layout that is different in portrait
    mode to those in landscape; try looking at Packt's site in landscape and portrait
    modes on an iPad!
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, an extra element is displayed in portrait mode, but
    it is not present in landscape orientation. If one of the elements in the portrait
    mode was broken and not displaying correctly, then simply specifying numerical
    breakpoints will not work. To fix the issue, we must also specify the affected
    orientation, otherwise fixing one mode may break another.
  prefs: []
  type: TYPE_NORMAL
- en: Taking care over our design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, so we've created a bunch of media queries, ready for implementing into
    a site. We're good to move on and start building some examples, or are we? If
    I said to hold fire for a moment, you would very likely think I've lost my marbles;
    but as always, there is a good reason. Let me explain.
  prefs: []
  type: TYPE_NORMAL
- en: A drawback when using media queries is that no two sites will be the same; this
    means that we can't always reuse standard queries in multiple sites. There will
    be times when we have to create custom breakpoints to satisfy a requirement for
    a site; the trick is to know when and where our site may need extra attention,
    over and above the normal breakpoints we might have used in our site.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom, ad hoc queries is easy, but we do run the risk of creating
    too many, which undermines the whole concept of responsive design. Can we get
    around this? Well, yes we can; it involves a shift in our approach to designing,
    which is not to focus on viewport sizes, but our content instead.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the need for breakpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Up until now, we've covered how we can use breakpoints to control what is displayed,
    and when, according to which device is being used. Let's assume you're working
    on a project for a client and have created a series of queries that use values
    such as 320px, 480px, 768px, and 1024px to cover support for a good range of devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'No matter what our design looks like, we will always be faced with two issues
    if we focus on using specific screen viewports as the basis for controlling our
    designs:'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping up with the sheer number of devices that are available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The inflexibility of limiting our screen width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, hold on. We've created breakpoints, yet this can end up causing us more
    problems? If we're finding ourselves creating lots of media queries that address
    specific problems (in addition to standard ones), then we will start to lose the
    benefits of a responsive site; instead we should re-examine our site to understand
    why the design isn't working and see if we can't tweak it so as to remove the
    need for the custom query.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, our site and target devices will dictate what is required—a good
    rule of thumb is if we are creating more custom queries than a standard bunch
    of four to six breakpoints, then perhaps it is time to recheck our design!
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to working with specific screen sizes, there is a different
    approach we can take, which is to follow the principle of adaptive design and
    not responsive design. Instead of simply specifying a number of fixed screen sizes
    (such as for the iPhone 6 Plus or a Samsung Galaxy unit), we build our designs
    around the point at which the *design begins to fail*.
  prefs: []
  type: TYPE_NORMAL
- en: Why? The answer is simple. The idea here is to come up with different bands,
    where designs will work between a lower and upper value, instead of simply specifying
    a query that checks for fixed screen sizes that are lower or above certain values.
    Don't worry for now if it doesn't entirely make sense just yet; for now, the key
    here is that we're creating designs that mean we can reduce the need to support
    so many devices.
  prefs: []
  type: TYPE_NORMAL
- en: Let's put this theory into practice, and start creating some demos to show off
    how we can use media queries in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Putting our theory into practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the course of this chapter, we've covered the different parts that
    make up media queries as I am sure someone once said, *it is time*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, it''s time to put this into practice. Before we start creating some real-world
    examples, let''s create something we can use to explore the effects of adding
    a media query to code. We''ll start by resizing some simple boxes on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: From the code download, go ahead and extract a copy of `queryexample.html` and
    save it to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a text editor, go ahead and add the following styles; we''ll start with
    some basic styles for our boxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to add our media query; go ahead and add this below the closing
    bracket of the previous style rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `queryexample.css` within the `css` subfolder in our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we try previewing the results of our work by running `queryexample.css`,
    we should see something akin to this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Putting our theory into practice](img/image_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's understand what happened here. In the core CSS (in step 3), we added three
    `<div>` elements to our markup. Since we gave them `100%` width and height is
    set to `auto` by default, they'll be stacked as a series of boxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use Chrome and activate the device mode as we did before, then we can
    begin to see the effect of resizing the browser window. If we resize it to below
    `30rem` in width as our breakpoint (or `480px`), we can see the boxes realign
    and resize at the same time; the background also changes to a light brown color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Putting our theory into practice](img/image_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've seen the basics of setting up queries, let's take this a step
    further and create some practical examples. We'll begin with setting up a simple
    web page to which we will apply some simple media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Creating some practical examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the next few pages, we'll be exploring how we can make good use of media
    queries; we'll be constructing two demos that illustrate some of the ways we can
    use queries. The demos themselves may not look complicated, but this is not a
    bad thing; making code complex only serves to make it more fragile, prone to breaking,
    and harder to support.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at our first demo, which adds responsive support to a basic
    portfolio template page.
  prefs: []
  type: TYPE_NORMAL
- en: Making it real
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making it real—what a title! There is a good reason for it. When exploring new
    concepts, one of my pet hates is exploring a demo that is so minimalistic as to
    not include anything that gives a true picture of the functionality that I want
    to begin using in my development.
  prefs: []
  type: TYPE_NORMAL
- en: Creating media queries should not be an exception. In our previous example,
    we created some test queries to see how three boxes would interact when the browser
    window is resized. To put this into context though, requires something a little
    more in-depth; one could do worse than explore how we might add similar queries
    to a portfolio page that might be part of a new or existing site. For our second
    demo, we're going to create a simple web page template, then begin to add and
    develop queries that allow it to be used on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an important point here. The keen-eyed among you will notice that this
    is not a mobile-first approach, which we advocated earlier in the book. Yes, mobile-first
    is absolutely the preferred approach, but we live in a world where this may not
    be possible, and we may have to add query support to an existing site. Even though
    we are doing this in what is not our preferred order, the principles around the
    media queries used in the next demo will still apply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: To start, we need to extract a number of files from the code download that accompanies
    this book; go ahead and save copies of `responsive.html`, the two `coffeebeans.png`
    images (normal and small size) and the `video` folder, to the root of our project
    area. Move the two images into the `img` folder within this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a new file, add the following styles and save it as `responsive.css` within
    the `css` folder of our project area. The first block of styles create the main
    text area and overall container for our demo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This deals with the `Skip to...` at the top of the mobile view; it''s hidden
    for now, but will be visible when the media query is activated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We need something to host our video and banner image; these styles take care
    of that for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a side area on the right of our main demo window; we need a style to
    control its dimensions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A number of links are used in our site, mainly in the form of buttons. This
    takes care of their styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'A key part of the site is of course the navigation. These style rules manage
    the presentation, which is based around a number of unordered list items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but by no means least, we need something to make our footer presentable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file. We now need to add our media queries. Leave two lines in our
    style sheet, then add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Leave another two blank lines below the first media query, then add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Save the file, then preview the results in a browser. Ideally, this should be
    Google Chrome or an alternative such as Firefox:![Making it real](img/image_04_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A perfectly presentable page, I hope you will agree. It shows off two of my
    favorite things perfectly: my love of coffee and the Scrabble board game! I always
    say coffee must be the secret tool in many developers'' armories, but I digress…'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try resizing the screen; for argument''s sake, let''s resize it to **414 x
    736**, or the equivalent required for an **iPhone 6 Plus**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making it real](img/image_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use Chrome''s device mode to switch the orientation to landscape:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making it real](img/image_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the site realigns itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making it real](img/image_04_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's a simple, clean design. The key here is that we can use this as a basis
    for adding more queries that support other devices. There are some important concepts
    that we should explore in more detail, so let's take five for a moment, and see
    how media queries play their part in our demo.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring what happened
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many of the styles used in this example cater for styling our page; the key
    rules for us start on lines 33 and 50, where we style for an iPhone 6 Plus in
    portrait and landscape modes, respectively. Let''s take a look at these two rules
    in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This rule states that the screen width must have a `max-width` of `414px` or
    less; if it is bigger and still showing in portrait mode, then the rule will not
    apply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this rule, we''ve taken styles already used in the main block and applied
    changes that allow us to maintain the desired effect when viewing the site on
    an iPhone. A perfect example is the `#banner` block; in the main set of styles,
    we set a number of attributes to position it on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: However, that won't suit being displayed on an iPhone, leaving aside how big
    the image is at 717px by 214px. It also weighs in at a hefty 102KB! Clearly, we
    don't want to keep downloading such a large image on a mobile device (where Internet
    access is likely to be metered), so we need to do something else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we have a smaller version in use, in the form of `coffeebeans-small.png`.
    This one is a more palatable 33KB, and sits in the top-right corner of our page
    when viewed on a mobile in portrait mode. We hide the original as it is not needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as we flip to using it in landscape mode, this rule kicks in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice though we don''t need to change the rule. The image stays the same size
    and is already set to float to the right, so the rule can simply be reused. We
    have to specify it here too; otherwise, it won''t display at all. To see the difference,
    try setting the demo using Google Chrome to emulate iPad mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring what happened](img/image_04_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that even though the base code uses `coffeebeans-small.png` in the
    `#banner` `<div>`, our media queries have replaced it with `coffeebeans.png`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may notice that the media query widths are not set in rem units; this is
    purely so we can match them with the Device tool in Chrome. You can easily set
    them to rem units if you prefer to do so.
  prefs: []
  type: TYPE_NORMAL
- en: We've purposely kept the rules in our demo simple; they illustrate how, with
    little effort, we can get our page to display properly in both desktop, iPhone
    6 portrait and iPhone 6 landscape modes perfectly. We can then reuse the same
    principles to extend support to cover other devices; the trick is to make sure
    that we use a breakpoint that covers enough devices so that we don't have to add
    more than is necessary to our site.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change tack now, but stay with the Apple theme. No, I'm not thinking of
    food! How many of you are lucky enough to own an iPad? If the answer is yes, then
    this next demo will be of interest. For many standard devices, we are limited
    in terms of what resolution we can use when displaying images.
  prefs: []
  type: TYPE_NORMAL
- en: Enter a great trick. How about the ability to display higher-resolution images?
    We don't need to download anything to help with this. Most modern browsers can
    do this out of the box; all we need is the appropriate media query to tell browsers
    when to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting high-resolution image support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The advent (and some may say meteoric rise) of mobile devices has introduced
    an opportunity, supporting higher resolution images.
  prefs: []
  type: TYPE_NORMAL
- en: Most users can't distinguish individual pixels on standard PCs. When viewed
    at typical distances, some websites would appear too small to use! Instead, the
    PC will revert to a more realistic resolution, such as 1,440px.
  prefs: []
  type: TYPE_NORMAL
- en: To give a smoother view, some devices pack in extra pixels; this has the effect
    of making individual pixels harder to view, and images super crisp in appearance.
    This was started by Apple, who marketed them as Retina displays; others have begun
    to follow suit and create devices capable of supporting high-res images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, we don''t need expensive iPhones or iPads to add support. We can
    do this with a media query and use Chrome''s Device tool to simulate testing it.
    To see how, let''s create a simple demo that switches between two images of a
    Phalaenopsis or Moth orchid plant. To tell which image is displayed, each will
    show the resolution in the top right corner of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, fire up your normal text editor, then add the following code and
    save it as `min-resolution.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and create a separate folder called `css`. In it, save the following
    code as `min-resolution.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We also need an images folder. Create this as `img` at the same level as the
    `css` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the code download that accompanies this book, extract copies of `mothorchid.png`
    and `mothorchid@2x.png`, then save them into the `img` folder. *Don't change their
    names!*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and preview the results of our file. If all is well, we will see something
    akin to this screenshot:![Detecting high-resolution image support](img/image_04_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To confirm what size is shown, first activate the Developer toolbar by pressing
    ***Ctrl* + *Shift* + *I***. Then enable device mode by pressing ***Ctrl* + *Shift*
    + *M***. We will see a toolbar similar to this appear:![Detecting high-resolution
    image support](img/image_04_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two points of note here—one is the setting on the left (**Responsive**),
    while the other is DPR or device pixel ratio. To trigger displaying the higher
    resolution image, try changing the setting on the left to **iPhone 6 Plus**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting high-resolution image support](img/image_04_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice how the DPR setting has jumped to `3.0`, and that our image has changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting high-resolution image support](img/image_04_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully, you will agree that this is a simple way to add support. Using Chrome,
    we can get a good representation of how a high-res image will appear; it is worth
    noting that it should still be tested on a proper device, as even Google can't
    entirely emulate specific devices from within their browser!
  prefs: []
  type: TYPE_NORMAL
- en: Exploring how it works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, I am sure you will be asking how this all works. It's a simple
    trick. The key to it is the naming convention we used for the images at the beginning
    of the demo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember how I said they should be saved as they are from the code download,
    and to not change the names? The reason for this is that we make use of this in
    our demo. Apple devices (since iOS4) expect to see the `@2x` in the filenames
    to denote a high-res image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring how it works](img/image_04_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then make use of that with our media query, which is only set to display
    the higher resolution image, if our `min-resolution` was detected to be `120dpi`
    or greater.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an aside, you may see `min`/`max-device-pixel-ratio` being used. This is
    required to support recent versions of Safari. All other browsers can use min-resolution
    without issue, although not all support the `dppi` or `dpcm` unit formats that
    can also be used.
  prefs: []
  type: TYPE_NORMAL
- en: The power of media queries means we can tailor support for higher resolution
    images to those devices that can support them; if the device is not able to do
    so, then standard resolution images can be displayed instead.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's change tack now. Although writing media queries is a straightforward
    task, there may be instances where even the best developer doesn't get it quite
    right! This could be anything from missing the viewport tag to inadvertently writing
    queries that clash with each other. Let's take a moment to explore some of the
    more common points where we might trip up, and take a look at a few pointers to
    help get us back on track.
  prefs: []
  type: TYPE_NORMAL
- en: Examining some common mistakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating sites, and in particular, those that are responsive, it is easy
    to make mistakes; after all, it's like learning any new technology; we're not
    perfect from the outset!
  prefs: []
  type: TYPE_NORMAL
- en: 'To help with your first few steps into the world of responsive construction
    and creating media queries, let''s spend a little time exploring some of the more
    common mistakes, understand why they cause issues, and go through a few pointers
    to help avoid these problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Not including the viewport tag**: This is one of the most common errors to
    make. When working on mobile devices, we have to include this tag if we want them
    to be displayed without zooming:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If the tag is not included, then text will appear smaller, as mobile devices
    zoom pages by default.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax errors**: Yes, this old chestnut is another common cause of problems!
    Hard as it may seem, but mistyping a query can throw up errors, especially for
    those new to writing media queries. There is no right or wrong answer here. It''s
    a matter of taking care when writing the code; copying and pasting. Take a look
    at the CSS Media Queries site (at [http://cssmediaqueries.com/](http://cssmediaqueries.com/))
    for plenty of examples you can use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inclusive media queries**: Take a look at these two queries for a moment.
    At first glance, they look perfectly reasonable, don''t they? After all, both
    are set for screen display only and will only show when the screen size is above
    `767px`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Trouble is, we still have an issue here. If we set both of these queries in
    our style sheet, then they will both kick in if our screen estate is `767px` or
    greater. At best, we might end up with `h1` being `40px` (instead of `30px`);
    at worst, we will get some odd effects! It pays to take care over what media queries
    you set. Make sure that your queries do not overlap.
  prefs: []
  type: TYPE_NORMAL
- en: '**Specificity and order of inheritance**: Staying with the theme of duplicated
    selectors (in a sense), another trap that can trip us up is that of inheritance.
    Say, for example, we specify these two attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: What color will we have? Well, if you said dark red, then get ready for a surprise;
    the answer is actually `#f00` or green. Why would this cause us an issue? If we
    had written a couple of media queries, but didn't take care over the breakpoints
    or didn't plan the order of our queries properly, then we might end up adding
    one too many assignments. Remember, if two selectors apply to the same element,
    the one with higher specificity wins.
  prefs: []
  type: TYPE_NORMAL
- en: It's all too easy to overthink an issue when working with media queries. In
    many cases, it simply requires a little forethought and care, and we can produce
    some useful rules to manage our content on mobile devices without too much overlap.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change tack and move on. Assuming any code we write is syntactically correct,
    now is a good opportunity to explore some guidelines we can follow when writing
    media queries. Although the next section is entitled *Exploring best practices*,
    I personally hate the phrase. It is one which is used and abused to death! Instead,
    consider them as some friendly tips to help improve your nascent skills when writing
    queries. It's all about exploring the art of possible, while balancing it with
    catering for more practical needs, such as our target market and supported devices.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ugh, using this phrase makes me cringe! All too frequently, too many people
    come up with what they consider to be best practice when talking about subject
    X or topic Y.
  prefs: []
  type: TYPE_NORMAL
- en: 'This said, there are some useful tips we can use when creating media queries;
    they aren''t just about following best practice, but equally making things easier
    for ourselves, so that we can display the right content on the right device at
    the right time:'
  prefs: []
  type: TYPE_NORMAL
- en: Always start small when designing media queries. This will avoid browsers downloading
    unnecessary elements that are only needed for larger screen sizes. Starting large
    is possible, but often requires some heavy reduction of content and is not likely
    to be as easy to manage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When designing queries, don't immediately think you have to include everything
    from the desktop site on a mobile device. Sometimes it doesn't make sense to do
    so. More often than not, there simply isn't space or bandwidth to do so! It's
    important to consider the context of the site you're building for, to ensure you
    include everything that is suitable or appropriate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give plenty of thought to how content should be prioritized. For example, on
    a blog site, we frequently see images against article teasers. These won't transfer
    well to smaller screens, so consider removing these images and leave details of
    the article, when it was written, author's photo, and the likes. We can still
    get our message across, but this time just by making some simple tweaks to our
    design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take care when using media queries with images. Page sizes are on the increase,
    so it is vitally important that we reference the right image in our queries. Equally,
    if we have effects such as carousels in place, then we should consider replacing
    it with a static image; this means we can significantly decrease the size of the
    page, as a large proportion of the images can be be removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't even try to cater for every device available on the market; research in
    2015 has shown there to be over 24,000 distinct Android devices, making for a
    highly fragmented market, which is difficult if not impossible to support in its
    entirety. Again, server logs will help identify devices being used to access your
    site. A check through these will identify your top mobile browsers, on which you
    should focus your efforts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When designing, consider using em (or better, rem) units. Pixel values work
    well for normal design, but do not operate so well when zooming in, which is frequently
    done with responsive sites. If we use em (or rem) values, this allows the browsers
    to automatically adjust the design of our site, based on the zoom level in use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your navigation scalable. Clarity and consistency should rule over similarity
    to the desktop site. Don't be afraid to use something that is entirely different
    to the desktop site; clarity and ease of navigation should rule over any other
    factor, such as color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use icons and fonts where possible, or even SVG images. These scale much better
    than standard images, particularly if we are using media queries. We can even
    change the content of the latter using CSS, and still maintain clear images throughout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay attention to font sizes. We can absolutely use media queries to display
    larger or smaller fonts, depending on what screen estate is available to us. The
    key to note though is that if we use percentage values or em/rem units, then these
    will scale better, and may even remove the need for media queries to handle fonts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch out for users with visual impairments, such as deuteranopia or color blindness.
    The available screen viewport on a mobile device will already be smaller; your
    users will definitely not thank you if font sizes don't scale well, or you've
    chosen colors that clash, such as white text on a red background!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lot we can accomplish by simply using a text editor, browser, and
    some careful planning. The great thing though is that we can use media queries
    to help with many of these tips. It's just a matter of planning so that we don't
    create more queries than are needed!
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on. Throughout this chapter, we've focused on what is possible when
    simply using a browser and a text editor to create our queries. I strongly believe
    that too many simply resort to picking the nearest library to help with constructing
    our queries; time has come to get back to basics!
  prefs: []
  type: TYPE_NORMAL
- en: This said, there may be instances when we need to use jQuery or a specific library
    to help produce our queries. A classic example is to incorporate support for older
    browsers, although it has to be said that it is debatable as to whether we should
    still support old technology. Assuming though that we have a valid need to use
    a library, let's spend a moment or two to explore some of the options available
    to help with creating those queries, that can't be satisfied with simple CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Taking things further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many instances, we can satisfy our requirements with the use of a text editor
    and browser; the latter's device mode (or responsive mode) will play a big part
    in creating perfectly valid queries that will suit many sites.
  prefs: []
  type: TYPE_NORMAL
- en: However, there will be occasions where this won't be enough. We may need to
    rely on additional help to support media queries for a particular project. One
    must ask, though, if this is really necessary, and not simply an excuse to be
    lazy. The media query support in recent browsers is very solid!
  prefs: []
  type: TYPE_NORMAL
- en: 'This said, if we have to use outside help, then there are plenty of options
    available online. Let''s take a look at a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plain JavaScript or jQuery**: It goes without saying, but most solutions
    will be based on either of these two technologies; these will, of course, be obvious
    choices! The point to note, though, is that jQuery was always designed to complement
    sites, and not play a core part in their design; one might argue that creating
    media queries is not a good use of jQuery for this reason.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.resizr** ([http://resizr.co/](http://resizr.co/)): This website is one of
    many we can use to get a feel for how well our site might work on a range of mobile
    devices; it does rely on you having a site that is accessible to the Internet,
    and there is no substitute for the real thing! It is a good start though, so when
    you get to test your site on real devices, it should mean that many of the basic
    issues have been resolved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What''s My Device Pixel Ratio?**: Hosted at [http://devicepixelratio.com/](http://devicepixelratio.com/),
    this tool works out what your screen''s device ratio setting is capable of supporting.
    This is perfect for those instances where we may want to use high-res images.
    After all, there is no point using them if your chosen device can''t display them!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mediaqueri.es**: Hosted at [http://mediaqueri.es/](http://mediaqueri.es/),
    this website should be in any developer''s armory. It is a display of inspirational
    sites that use media queries and RWD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modernizr**: Available from [http://www.modernizr.com](http://www.modernizr.com),
    we can use the library to test for media query support; an alternative is to use
    the `@supports` directive. In most cases, it will be older versions of IE that
    cause issues. If we plan our site with care, we may be able to design out the
    need for either, by providing a base site that works in IE, and adding extra touches
    on top for other browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restive.js**: From [http://restivejs.com/](http://restivejs.com/), this jQuery-based
    plugin is a real Swiss Army knife of functionality, and allows you to add responsive
    support for different aspects of your sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responsive design patterns**: The agency Code My Views, based in the USA,
    created a number of patterns for use in responsive design; this may be worth a
    look once you are more accustomed to working with media queries. You can see more
    details at [https://codemyviews.com/blog/5-really-useful-responsive-web-design-patterns](https://codemyviews.com/blog/5-really-useful-responsive-web-design-patterns).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whichever way you decide to go, there are plenty of options available online,
    to help with developing your media queries. The key here though is to be sure
    that if you are adding an additional library, then it is the right thing to do
    for your site; it will probably center around whether your project must support
    old browsers such as IE8\. This browser has been around since 2009, and should
    really be put out to pasture—permanently!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating media queries opens up a world of possibilities; we are not forced
    to have to display every element of our page on each device, so we can be selective
    about what we show our visitors, depending on which device they use! We've covered
    a number of useful techniques in this chapter by just using a browser and text
    editor, so let's take a moment to recap what we've learned.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with a quick interactive demo, to illustrate how some well-known
    sites have used media queries to realign content on screen, before exploring how
    media queries are constructed.
  prefs: []
  type: TYPE_NORMAL
- en: We then took a look at some of the different types. This included covering both
    the media types and features we can use to control how content is displayed. We
    then moved onto looking at some common breakpoint statements that we might use
    in our code, before exploring how we might need to create custom breakpoints for
    specific purposes. We also saw how we may even be able to reduce or remove breakpoints,
    if we make some simple changes to our code.
  prefs: []
  type: TYPE_NORMAL
- en: Next up came a more practical look at using media queries. We explored how we
    can use them to make content on a simple page display properly in a mobile device
    (allowing its orientation). We then covered how we can use media queries to control
    whether we display images of standard or higher resolution on screen.
  prefs: []
  type: TYPE_NORMAL
- en: We then rounded off the chapter with a look at fixing some common mistakes that
    we might make, before covering some of the options available that we can step
    up to using once we're more accustomed to creating media queries for our sites.
  prefs: []
  type: TYPE_NORMAL
- en: Phew, we've come to the end of the technical development; there is one more
    topic we should cover as part of our journey through creating responsive sites.
    There is no point in creating solutions if they are not efficient. Your visitors
    will not thank you if it takes an age to load a site! We can fix this with some
    simple tips and tricks, as part of optimizing our code. We'll explore this topic,
    and more, in the next chapter.
  prefs: []
  type: TYPE_NORMAL
