- en: '*Chapter 5*: Data Visualization with Plotly.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plotting and visualization are very important tasks in data analysis, and as
    such, we are dedicating a full chapter to them. A data analyst will typically
    perform plotting and data visualization as part of the **exploratory data analysis**
    (**EDA**) phase. This can greatly help in identifying useful patterns hidden in
    data and in building intuition for data modeling.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use **Plotly.js** to create rich and
    interactive plots that can be embedded into any web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief primer on Plotly.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamentals of Plotly.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating basic charts with Plotly.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating statistical charts with Plotly.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to follow along with this chapter, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A modern browser such as Chrome, Safari, Opera, or Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js** and, optionally, **Danfo Notebook** (**Dnotebook**) installed on
    your system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A stable internet connection for downloading datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation instructions for Dnotebook can be found in [*Chapter 2*](B17076_02_ePub_RK.xhtml#_idTextAnchor045),
    *Dnotebook - An Interactive Computing Environment for JavaScript*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you do not want to install any software or libraries, you can use the online
    version of Dnotebook at [https://playnotebook.jsdata.org/](https://playnotebook.jsdata.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Danfo.js** comes with a plotting **application programming interface** (**API**)
    for easily making plots, and under the hood, it uses Plotly. This is the main
    reason why we introduce Plotly.js in this chapter, as knowledge gained here will
    help you easily customize plots created with Danfo.js in the next chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: A brief primer on Plotly.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plotly.js ([https://plotly.com/javascript/](https://plotly.com/javascript/)),
    according to the authors, is an open source, high-level, declarative charting
    library built on top of the popular D3.js ([https://d3js.org/](https://d3js.org/))
    and stack.gl ([https://github.com/stackgl](https://github.com/stackgl)) libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'It supports over 40 chart types, including these kinds:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic charts such as scatter plots, line plots, and bar and pie charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statistical graphs such as box plots, histograms, and density plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scientific charts such as heatmaps, log plots, and contour plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Financial charts such as waterfall, candlestick, and time-series charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps such as bubble, choropleth, and Mapbox maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Three-dimensional** (**3D**) charts for scatter plots and surface plots,
    as well as 3D meshes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use Plotly.js, you need access to the browser's `React` and `Vue`. In the
    following section, we will see how to install Plotly.js.
  prefs: []
  type: TYPE_NORMAL
- en: Using Plotly.js via a script tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use Plotly.js in a `script` tag. In the following code snippet,
    we add the Plotly.js `script` tag to the header section of a simple HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have added the Plotly.js `script` tag as shown in the preceding code
    snippet, save the HTML file and open it in a browser. The output is going to be
    an empty page, but under the hood, Plotly.js gets added and is made available
    in the page. We can test this by making a simple plot, following the steps here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `div` tag in the HTML body where the graph will be drawn. We''ll give
    this an `myPlot`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the body of your HTML page, create sample `x` and `y` data, and then plot
    a `scatter` plot, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Opening the HTML file in your browser will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – A simple scatter plot made with Plotly'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – A simple scatter plot made with Plotly
  prefs: []
  type: TYPE_NORMAL
- en: 'In Dnotebook, which we''ll be using a lot in this chapter, you can load and
    use Plotly by first loading the scripts in a top cell using the `load_package`
    function, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in a new cell, you can add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – A simple scatter plot made with Plotly on Dnotebook'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – A simple scatter plot made with Plotly on Dnotebook
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the code in the preceding section is the same as the HTML version,
    with just one slight difference—the `this_div` function passed to `Plotly.newPlot`.
  prefs: []
  type: TYPE_NORMAL
- en: The `this_div` function is just a Dnotebook helper function that creates and
    returns the ID of the `div` tag just below the code cell block. This means that
    whenever you're working with plots in Dnotebook, you can get a `div` tag using
    the `this_div` function.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Going forward, we'll be using `this_div` instead of specifying a `div` tag ID.
    This is because we'll be working mostly in a Dnotebook environment. To use the
    code in an HTML or other `this_div` to the ID of the `div` tag you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to install Plotly, we'll move on to the next section, which
    is about creating basic charts.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of Plotly.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the major advantages of using Plotly.js is the fact that it is easy to
    get started, and there are lots of configurations you can specify to make your
    plot better. In the section, we are going to cover some of the important configuration
    options available, and we'll also show you how to specify these options.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go further, let's understand how to get data into Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: Data format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make a `x` and `y` keys, as shown in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A data point is normally called a **trace** in Plotly. This is because you
    can plot more than one data point in a single graph. An example of this is provided
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`var data = [trace1, trace2]`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Plotly.newPlot("my_div", data);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `x` and `y` arrays can contain both string and numeric data. If they contain
    string data, the data points are plotted as they are, that is, point to point.
    Here''s an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – A plot of string values against date with Plotly'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – A plot of string values against date with Plotly
  prefs: []
  type: TYPE_NORMAL
- en: 'If, on the other hand, your data is numeric, then Plotly will automatically
    sort and then choose a default scale. Look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – A plot of numerical values against date with Plotly'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – A plot of numerical values against date with Plotly
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move to the configuration section, let''s see an example of plotting
    multiple traces in the same chart. First, we set up our data, as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – A plot of multiple traces sharing the same x axis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – A plot of multiple traces sharing the same x axis
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When plotting multiple traces in a single chart, it is recommended that the
    traces share a common axis. This makes your plot easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: If you were wondering whether you can add more traces to a data array, then
    the answer is yes—you can add as many traces as you want, but you must consider
    interpretability, as adding more traces may not be easy to interpret.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to pass data into plots, let's understand some basic configuration
    options that you can pass to Plotly when making charts.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options for plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configurations can be used to set properties such as interactivity and modebars
    of a graph. A configuration is an object and is normally passed as the last argument
    in the `Plotly.newPlot` call, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following sections, we''ll introduce some common configuration options
    that we will be using in [*Chapter 8*](B17076_08_ePub_RK.xhtml#_idTextAnchor149),
    *Creating a No-Code Data Analysis/Handling System*. If you want to know which
    configuration options are available to use, then you can read more about it here:
    [https://plotly.com/javascript/configuration-options/](https://plotly.com/javascript/configuration-options/).'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the modebar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **modebar** is a horizontal toolbar that presents numerous options that
    can be used to interact with a chart. By default, the modebar only becomes visible
    when you hover over a chart, although this can be changed, as we will see in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Making the modebar always visible
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To make the modebar always visible, you can set the `displayModeBar` property
    to `true`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Configuring modebar to always display'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Configuring modebar to always display
  prefs: []
  type: TYPE_NORMAL
- en: If you do not need the modebar, then setting the `displayModeBar` function to
    `false` will ensure that the modebar is hidden even when you hover over it.
  prefs: []
  type: TYPE_NORMAL
- en: Removing buttons from the modebar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can remove buttons from the modebar by passing the names of the buttons
    you do not want to the `modeBarButtonsToRemove` `config` property, as we will
    demonstrate in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the same traces as from the *Making the modebar always visible* section,
    we will remove the zoom-in button from the modebar. You can see the zoomed-in
    button in the following screenshot before it was removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Zoom-in button before removal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Zoom-in button before removal
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we show the chart before removing the zoom-in
    button. Next, we''ll set the `config` option to remove the button, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Chart after zoom-in button removal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Chart after zoom-in button removal
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the method demonstrated in the preceding example, you can remove any
    button from your charts. You can see the names of all modebar buttons that can
    be removed here: [https://plotly.com/javascript/configuration-options/#remove-modebar-buttons](https://plotly.com/javascript/configuration-options/#remove-modebar-buttons).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom buttons to the modebar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Plotly provides a way to add buttons with custom behavior to the modebar. This
    becomes useful when we want to extend our plots with custom behaviors— such as,
    for example, linking to your personal website.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we'll add a custom button to display `This` `is` `an`
    `example` `of` `a` `plot` `that` `answers` `a` `question` `on` `click` to the
    user when it is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom buttons will not work in Dnotebook, so we are going to do this
    in an HTML file. You can set up an HTML file with a Plotly script, as we demonstrated
    in the *Using Plotly.js via a script tag* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the body section of your HTML file, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and open the preceding HTML file in the browser and click on the button
    you just created. It should display an alert with the text you specified, similar
    to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Chart with a custom button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Chart with a custom button
  prefs: []
  type: TYPE_NORMAL
- en: 'In the code snippet we showed previously, notice the `modeBarButtonsToAdd`
    configuration option. This option is where we defined the button to add, as well
    as what happens when we click on it. The main properties you can specify when
    creating custom buttons are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: The name of the button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`: The icon/image that is shown in the modebar. This can be a custom icon
    or any built-in Plotly icon ([https://github.com/plotly/plotly.js/blob/master/src/fonts/ploticon.js](https://github.com/plotly/plotly.js/blob/master/src/fonts/ploticon.js)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`click`: This defines what happens when you click the button. Here, you can
    specify any JavaScript function or even change the behavior of the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's see how to make a static chart.
  prefs: []
  type: TYPE_NORMAL
- en: Making a static chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Plotly charts are interactive. If you want to make them static,
    then you can specify the following option in the `config` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Static charts can be useful when we only want to display a chart with a distracting
    interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll show you how to create charts that are responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Making a responsive chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make a chart responsive, such that it can automatically resize alongside
    the window where it is displayed, you can set the `responsive` property to `true`,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Responsive charts are useful when you're creating web pages that will be shown
    across different screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll show you how to download and set download options
    in your charts.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing download plot options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, when the modebar is shown, you can save a Plotly chart as a **Portable
    Network Graphics** (**PNG**) file. This can be customized, and you can set the
    download image type, as well as other properties such as filename, height, width,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, you can set the `toImageButtonOptions` property in the `config`
    object, as we demonstrate in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: And finally, in the next section, we'll demonstrate how to change the locale
    of your charts.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default locale
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A locale is important when making charts for people speaking other languages.
    This can greatly improve the interpretability of your charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following these next steps, we''ll change the default locale from English to
    French:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the specific locale and add it to your HTML file (or load it using `load_scripts`
    in Dnotebook), as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In Dnotebook, this can be done using `load_package`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In your `config` object, specify the locale, as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see a complete example with the corresponding output. Add the following
    code to the body of your HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Loading the HTML page in the browser displays the following chart, with `locale`
    set to French:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Chart with locale set to French'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Chart with locale set to French
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you know how to configure your plots, we''ll move on to another important
    aspect of chart configuration: **layout**.'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`layout` ([https://plotly.com/javascript/reference/layout/](https://plotly.com/javascript/reference/layout/))
    is the third argument passed to the `Plotly.newPlot` function. It is used to configure
    the area/layout where a chart is drawn, as well as properties such as the title,
    text, legend, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: There are six layout properties that you can set—title, legend, margins, size,
    fonts, and colors. We'll demonstrate how to use them, with examples.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring chart title
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `title` property configures the chart title, which is the text shown at
    the top of a chart. To add a title, simply pass the text to the `title` property
    in the `layout` object, as demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To be more explicit, especially if you need to configure how the title text
    is positioned, then you can set the `text` property of `title`, as we show in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding format, we can easily configure other properties such as
    title position using other properties, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`: A number between 0 and 1 inclusive and used to set the `x` position of
    the title text with respect to the container where it''s displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: Also a number between 0 and 1 inclusive and used to set the `y` position
    of the title text with respect to the container where it''s displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xanchor`: This can be one of `auto`, `left`, `center`, or `right` alignment.
    It sets the title''s horizontal alignment with respect to its `x` position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yanchor`: This can be one of `auto`, `top`, `middle`, or `bottom` alignment.
    It sets the title''s vertical alignment with respect to its `y` position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see an example of configuring `title` to show it in the top-right corner
    of a chart, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Chart with title configured to top right'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Chart with title configured to top right
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set the **padding** of the title. The padding can accept the following
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`t`: Sets the top padding of the title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Sets the bottom padding of the title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r`: Sets the right padding and will only work when the `xanchor` property
    is set to `right`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Sets the left padding and will only work when the `xanchor` property is
    set to `left`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, to set the `right` padding of the title, you can set the `xanchor`
    property to `right` and then configure the `r` property of `pad`, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note that the padding parameters are in `100` in the preceding code snippet
    means 100px.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at configuring the legend of a chart.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Plotly legends
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A legend describes the data displayed in a chart. Legends are very important
    when you're displaying more than one form of data in a single chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Plotly shows a legend when you have more than one trace in a chart.
    You can also explicitly show a legend by setting the `showLegend` property of
    `layout` to `true`, as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the legend is activated, you can customize how it is displayed by setting
    the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bgcolor`: Sets the background color of the legend. By default, it is set to
    `#fff` (white).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bordercolor`: Sets the color of the border enclosing the legend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`borderwidth`: Sets the width (in px) of the border enclosing the legend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font`: An object with the following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a) `family`: Any supported HTML font family.'
  prefs: []
  type: TYPE_NORMAL
- en: 'b) `size`: The size of the legend text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'c) `color`: The color of the legend text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, we show an example of using these properties
    to configure your legend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Chart showing legend with custom configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Chart showing legend with custom configuration
  prefs: []
  type: TYPE_NORMAL
- en: Next, we show how to configure the margin of the overall layout.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring layout margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `margin` property configures the position of the chart on the screen. It
    supports all margin properties (`l`, `r`, `t`, and `b`). In the following code
    snippet, we use all four properties to demonstrate setting layout margins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Chart with margin configured'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Chart with margin configured
  prefs: []
  type: TYPE_NORMAL
- en: Notice the space around the chart in the preceding screenshot? That is the set
    margin. It is important to note that the margin is in px as well.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll look at setting the layout size.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring layout size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, we may want a bigger or a smaller layout, and this can be configured
    using the `width`, `height`, or—conveniently— the `autosize` property, as we demonstrate
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Chart with size configured'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Chart with size configured
  prefs: []
  type: TYPE_NORMAL
- en: The `autosize` property can be set to `true` when we want Plotly to automatically
    set the size of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To see other properties that can be configured in `layout`, you can visit Plotly''s
    official API reference here: [https://plotly.com/javascript/reference/layout](https://plotly.com/javascript/reference/layout).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll show you how to make different types of charts based
    on the information you want to convey.
  prefs: []
  type: TYPE_NORMAL
- en: Creating basic charts with Plotly.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plotly.js supports many basic charts that can be quickly used to convey information.
    Some examples of basic charts available in Plotly are scatter plots, line, bar,
    pie and bubble charts, dot plots, treemaps, tables, and so on. You can find a
    complete list of supported basic charts here: [https://plotly.com/javascript/basic-charts/](https://plotly.com/javascript/basic-charts/).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover some basic charts such as scatter plots, bar
    charts, and bubble charts.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll start with scatter plots.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a scatter plot with Plotly.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A **scatter plot** is typically used to plot two variables against each other.
    The plot is displayed as a collection of points, hence the name *scatter plot*.
    The following screenshot shows an example of a scatter plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Example of a scatter plot showing Fare against Age margin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Example of a scatter plot showing Fare against Age margin
  prefs: []
  type: TYPE_NORMAL
- en: 'To make a scatter plot using Plotly, you simply specify the plot type, as we
    show in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Example scatter plot of sales versus margin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Example scatter plot of sales versus margin
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the points are joined together using a line. You can change this
    behavior by setting a mode type. The mode type can be any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`markers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lines`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`none`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also use more than one mode by joining them together with a plus sign—for
    example, `markers+text+lines` or `markers+lines`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we use both `markers` and `text` as our mode type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Scatter plot with mode type set to markers+text'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.17 – Scatter plot with mode type set to markers+text
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, you can plot more than one scatter plot in a single chart,
    and each trace can be configured as required. In the following example, we plot
    three scatter plots with varying modes configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Scatter plot with three traces'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.18 – Scatter plot with three traces
  prefs: []
  type: TYPE_NORMAL
- en: Now you have learned the concept of basic charts in this section, you can easily
    create scatter plots from custom data points and customize the size using the
    required properties.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll briefly look at bar charts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating bar charts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bar chart is another popular type of chart available in Plotly.js. It is used
    to show the relationship between data points using a rectangular bar, with heights
    or lengths proportional to the values they represent. Bar charts are mostly used
    for plotting **categorical data**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Categorical data or a categorical variable is a variable with a fixed or limited
    number of possible values. The letters of the English alphabet are an example
    of categorical data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make a bar chart in Plotly.js, you pass a categorical data point
    with corresponding bar heights/length and then set the type to `bar`, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Simple bar chart with four variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.19 – Simple bar chart with four variables
  prefs: []
  type: TYPE_NORMAL
- en: 'You can plot more than one bar chart in a single layout by creating multiple
    traces and passing them as an array. For example, in the following code snippet,
    we create two traces and a plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20 – A bar chart with two traces'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.20 – A bar chart with two traces
  prefs: []
  type: TYPE_NORMAL
- en: 'When plotting multiple traces within the same category, you can specify a `barmode`
    property. The `barmode` property can be one of `stack` or `group` mode. For example,
    in the following code snippet, we make a bar chart of two traces with the same
    categories in `stack` mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – A bar chart with two traces in stack mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.21 – A bar chart with two traces in stack mode
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, we change the `barmode` property to `group`
    (default mode):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – A bar chart with two traces in group mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.22 – A bar chart with two traces in group mode
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many other options you can specify when making bar charts, but we
    will not cover all of them in this section. You can see all configuration options,
    as well as clear examples of creating good bar charts, in the official documentation
    here: [https://plotly.com/javascript/bar-charts/](https://plotly.com/javascript/bar-charts/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we'll briefly cover bubble charts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating bubble charts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A bubble chart is another very popular type of chart that can be used to cover
    information. It is basically an extension of a scatter plot, with point sizes
    specified. Let''s look at the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.23 – A simple bubble chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.23 – A simple bubble chart
  prefs: []
  type: TYPE_NORMAL
- en: In the previous code snippet for a bubble chart, you can see that the main changes
    are the mode and the markers with sizes specified. The sizes are mapped one-to-one
    with the points, and if you want to apply sizes to each bubble, you must specify
    the size.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also change the colors of individual bubbles by passing an array of
    colors, as demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.24 – A simple bubble chart with different colors'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.24 – A simple bubble chart with different colors
  prefs: []
  type: TYPE_NORMAL
- en: 'Bubble charts are very useful, and if you need to know more or see some more
    advanced examples, you can check out the example page in Plotly''s documentation
    here: [https://plotly.com/javascript/bubble-charts/](https://plotly.com/javascript/bubble-charts/).'
  prefs: []
  type: TYPE_NORMAL
- en: There are many other types of basic plots you can make, but sadly we can't cover
    all of them. The *Basic Charts* page ([https://plotly.com/javascript/basic-charts/](https://plotly.com/javascript/basic-charts/))
    in Plotly's documentation is a good place to learn how to make these awesome plots,
    and we encourage you to take a look.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll introduce you to some statistical charts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating statistical charts with Plotly.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Statistical charts are different types of charts used mostly by statisticians
    or data scientists to convey information. Some examples of statistical plots are
    histograms, box plots, violin plots, density plots, and so on. In the following
    sub-section, we'll briefly cover three types of statistical plots—histograms,
    box plots, and violin plots.
  prefs: []
  type: TYPE_NORMAL
- en: Creating histogram plots with Plotly.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A histogram is used to represent the distribution or spread of numerical/continuous
    data. A histogram is similar to a bar chart, and sometimes people may confuse
    the two. A simple way to differentiate between them is the type of data they can
    show. A histogram works with continuous variables instead of categorical variables,
    and only needs a single value as data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, we show an example of a histogram with generated
    random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, you will observe that the `trace` property has
    only the `x` data specified. This is in line with what we mentioned earlier—histograms
    only need a single value. We also specify the plot type to be `histogram`, and
    running the code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25 – A histogram with random values of x'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.25 – A histogram with random values of x
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifying a `y` value instead of `x` will result in a horizontal histogram,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.26 – A histogram with random values of y'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.26 – A histogram with random values of y
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create stacked, overlaid, or grouped histograms by creating multiple
    traces and setting the `barmode` property to `stack`, as demonstrated in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.27 – A histogram in stack mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.27 – A histogram in stack mode
  prefs: []
  type: TYPE_NORMAL
- en: 'By changing the `barmode` overlay, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28 – A histogram in overlay mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.28 – A histogram in overlay mode
  prefs: []
  type: TYPE_NORMAL
- en: 'To see more examples of plotting histograms as well as various configuration
    options, you can check out the histogram documentation page here: [https://plotly.com/javascript/histograms/](https://plotly.com/javascript/histograms/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll introduce box plots.
  prefs: []
  type: TYPE_NORMAL
- en: Creating box plots with Plotly.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **box plot** is a very common type of plot in descriptive statistics. It graphically
    presents groups of numerical data using their quartiles. Box plots also have lines
    extending above or below them, called **whiskers**. The whiskers represent the
    variability outside the upper and lower **quartiles**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: A quartile divides a specified number of data points into four parts or quarters.
    The first quartile is the lowest 25% of data points, the second quartile is between
    25% and 50% (up to the median), the third quartile is 50% to 75% (above the median),
    and finally, the fourth quartile depicts the highest 25% of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram can help you better understand box plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.29 – Diagram depicting a box plot (source: Redrawn from https://aiaspirant.com/box-plot/)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.29 – Diagram depicting a box plot (source: Redrawn from https://aiaspirant.com/box-plot/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Plotly.js, we make a box plot by passing our data and setting the `trace`
    type to `box`. We demonstrate this in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.30 – A simple box plot with two traces'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.30 – A simple box plot with two traces
  prefs: []
  type: TYPE_NORMAL
- en: We can configure the layout for box plots to be horizontal as opposed to the
    default vertical format. In the following section, we demonstrate how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Making horizontal box plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can make horizontal plots by specifying `x` values instead of `y` values
    in your traces. We demonstrate this in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.31 – A simple box plot with two traces'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.31 – A simple box plot with two traces
  prefs: []
  type: TYPE_NORMAL
- en: You can also make grouped box plots, as we show in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Making grouped box plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Multiple traces sharing the same *x* axis can be grouped together into a single
    box plot, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.32 – A box plot with three traces grouped together'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.32 – A box plot with three traces grouped together
  prefs: []
  type: TYPE_NORMAL
- en: 'There are numerous other options you can set when making box plots, but we''ll
    leave you to read more about them in the box-plot documentation here: [https://plotly.com/javascript/box-plots/](https://plotly.com/javascript/box-plots/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll briefly introduce violin plots.
  prefs: []
  type: TYPE_NORMAL
- en: Creating violin plots with Plotly.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **violin plot** is an extension of a box plot. It also describes data points
    using quartiles, just like a box plot, with just one major difference—the fact
    that it also shows the distribution of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the common characteristics between a violin plot
    and a box plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.33 – Common properties between a violin plot and a box plot (Redrawn
    from https://towardsdatascience.com/violin-plots-explained-fb1d115e023d)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.33 – Common properties between a violin plot and a box plot (Redrawn
    from https://towardsdatascience.com/violin-plots-explained-fb1d115e023d)
  prefs: []
  type: TYPE_NORMAL
- en: The curved area of the violin plot shows the underlying distribution of the
    data and conveys more information than the box plot.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Plotly, you can easily make a violin plot by just changing the type to `violin`.
    For example, in the following code snippet, we are reusing the code from the box-plot
    section, with just two main changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.34 – A violin plot with three traces grouped together'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.34 – A violin plot with three traces grouped together
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as with other chart types, you can also configure how violin plots are
    displayed. For example, we can show the underlying box plot in a violin plot,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.35 – A violin plot with underlying box plot shown'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_5_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.35 – A violin plot with underlying box plot shown
  prefs: []
  type: TYPE_NORMAL
- en: 'To see other configuration options as well as some advanced settings, you can
    check out the documentation of a violin plot here: [https://plotly.com/javascript/violin/](https://plotly.com/javascript/violin/).'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have to come to the end of this introductory section on Plotly.js.
    In the next chapter, we will show you how to use Danfo.js to quickly and easily
    make plots for any type of data supported by this particular library.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered plotting and visualization with Plotly.js. First,
    we gave a brief introduction to Plotly.js, including installation setup. Then,
    we moved on to chart configuration and layout customization. Finally, we showed
    you how to create some basic and statistical charts.
  prefs: []
  type: TYPE_NORMAL
- en: The knowledge you have gained in this chapter will help you easily create interactive
    charts that you can embed in your websites or web applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll introduce data visualization with Danfo.js, and you'll
    see how, with knowledge of Plotly.js, you can easily create amazing charts directly
    from your DataFrame or Series.
  prefs: []
  type: TYPE_NORMAL
