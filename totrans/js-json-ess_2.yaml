- en: Chapter 2. Getting Started with JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON or JavaScript Object Notation is a very popular data interchange format.
    It was developed by Douglas Crockford. JSON is text-based, lightweight, and a
    human-readable format for data exchange between clients and servers. JSON is derived
    from JavaScript and bears a close resemblance to JavaScript objects, but it is
    not dependent on JavaScript. JSON is language-independent, and support for the
    JSON data format is available in all the popular languages, some of which are
    C#, PHP, Java, C++, Python, and Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSON is a format and not a language.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON can be used in web applications for data transfer. Prior to JSON, XML
    was considered to be the chosen data interchange format. XML parsing required
    an XML DOM implementation on the client side that would ingest the XML response,
    and then XPath was used to query the response in order to access and retrieve
    the data. That made life tedious, as querying for data had to be performed at
    two levels: first on the server side where the data was being queried from a database,
    and the second time was on the client side using XPath. JSON does not need any
    specific implementations; the JavaScript engine in the browser handles JSON parsing.'
  prefs: []
  type: TYPE_NORMAL
- en: XML messages often tend to be heavy and verbose, and take up a lot of bandwidth
    while sending the data over a network connection. Once the XML message is retrieved,
    it has to be loaded into memory to parse it; let us take a look at a `students`
    data feed in XML and JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example in XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with JSON](img/6034OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us take a look at the example in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with JSON](img/6034OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we notice, the size of the XML message is bigger when compared to its JSON
    counterpart, and this is just for two records. A real-time feed will begin with
    a few thousands and go upwards. Another point to note is the amount of data that
    has to be generated by the server and then transmitted over the Internet is already
    big, and XML, as it is verbose, makes it bigger. Given that we are in the age
    of mobile devices where smart phones and tablets are getting more and more popular
    by the day, transmitting such large volumes of data on a slower network causes
    slow page loads, hang ups, and poor user experience, thus driving the users away
    from the site. JSON has come about to be the preferred Internet data interchange
    format, to avoid the issues mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Since JSON is used to transmit serialized data over the Internet, we will need
    to make a note of its MIME type. A **MIME** (**Multipurpose Internet Mail Extensions**)
    type is an Internet media type, which is a two-part identifier for content that
    is being transferred over the Internet. The MIME types are passed through the
    HTTP headers of an HTTP Request and an HTTP Response. The MIME type is the communication
    of content type between the server and the browser. In general, a MIME type will
    have two or more parts that give the browser information about the type of data
    that is being sent either in the HTTP Request or in the HTTP Response. The MIME
    type for JSON data is `application/json`. If the MIME type headers are not sent
    across the browser, it treats the incoming JSON as plain text.
  prefs: []
  type: TYPE_NORMAL
- en: The Hello World program with JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a basic understanding of JSON, let us work on our Hello World
    program. This is shown in the screenshot that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hello World program with JSON](img/6034OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding program will alert World onto the screen when it is invoked from
    a browser. Let us pay close attention to the script between the `<script>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hello World program with JSON](img/6034OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the first step, we are creating a JavaScript variable and initializing the
    variable with a JavaScript object. Similar to how we retrieve data from a JavaScript
    object, we use the key-value pair to retrieve the value. Simply put, JSON is a
    collection of key and value pairs, where every key is a reference to the memory
    location where the value is stored on the computer. Now let us take a step back
    and analyze why we need JSON, if all we are doing is assigning JavaScript objects
    that are readily available. The answer is, JSON is a different format altogether,
    unlike JavaScript, which is a language.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSON keys and values have to be enclosed in double quotes, if either are enclosed
    in single quotes, we will receive an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us take a quick look at the similarities and differences between JSON
    and a normal JavaScript object. If we were to create a similar JavaScript object
    like our `hello_world` JSON variable from the earlier example, it would look like
    the JavaScript object that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hello World program with JSON](img/6034OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The big difference here is that the key is not wrapped in double quotes. Since
    a JSON key is a string, we can use any valid string for a key. We can use spaces,
    special characters, and hyphens in our keys, which is not valid in a normal JavaScript
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hello World program with JSON](img/6034OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we use special characters, hyphens, or spaces in our keys, we have to be
    careful while accessing them.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hello World program with JSON](img/6034OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The reason the preceding JavaScript statement doesn''t work is that JavaScript
    doesn''t accept keys with special characters, hyphens, or strings. So we have
    to retrieve the data using a method where we will handle the JSON object as an
    associative array with a string key. This is shown in the screenshot that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hello World program with JSON](img/6034OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another difference between the two is that a JavaScript object can carry functions
    within, while a JSON object cannot carry any functions. The example that follows
    has the property `getName`, which has a function that alerts the name `John Doe`
    when it is invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Hello World program with JSON](img/6034OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, the biggest difference is that a JavaScript object was never intended
    to be a data interchange format, while the sole purpose of JSON was to use it
    as a data interchange format.
  prefs: []
  type: TYPE_NORMAL
- en: Datatypes in JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let us take a look at a more complex example of JSON. We''ll also go over
    all the datatypes that are supported by JSON. JSON supports six datatypes: strings,
    numbers, Booleans, arrays, objects, and null.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding example, we have five key-value pairs of different datatypes.
    Now let us take a close look at each of these key-value pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The datatype of the value that `"id"` references is a number.
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, the datatype of the value that `"name"` references is a string.
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, the datatype of the value that `"isStudent"` references
    is a Boolean.
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The datatype of the value that `"scores"` references here is an array.
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here the datatype of the value that `"courses"` references is an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that JSON supports six datatypes; they are strings, numbers, Booleans,
    arrays, objects, and null. Yes, JSON supports null data, and real-time business
    implementations need accurate information. There might be cases where null was
    substituted with an empty string, but that is inaccurate. Let us take a quick
    look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arrays and null values are objects in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In the earlier example, we are using the `typeof` operator that takes an operand,
    and returns the datatype of that operand. On line 4, we are determining the type
    of an empty string, while on line 8 we are determining the type of a null value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us implement our JSON object in a page and retrieve the values, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve the `id` from the variable `complexJson`, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve the `name` from the variable `complexJson`, look at the screenshot
    that is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the following screenshot to retrieve `isStudent` from the variable
    `complexJson`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Retrieving data from arrays and objects gets a little tricky, as we have to
    traverse through the array or object. Let us see how values can be retrieved from
    arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we are retrieving the second element from the `scores`
    array. Although `scores` is an array inside the `complexJson` object, it is still
    treated as a regular key-value pair. It is handled differently when the key is
    accessed; the first thing that the interpreter has to assess, when a key is accessed,
    is to get the datatype of its value. If the retrieved value is a string, number,
    Boolean, or null, there will not be any extra operations that are performed on
    the value. But if it is an array or an object, the value's dependencies are taken
    into consideration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve an element from the object inside a JSON object, we will have to
    access the key that is the reference for that value, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Datatypes in JSON](img/6034OS_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since objects do not have a numeric index, JavaScript might rearrange the order
    of items inside an object. If you notice that the order of key-value pairs during
    the initialization of the JSON object is different from when you are accessing
    the data, there is nothing to worry about. There is no loss of data; the JavaScript
    engine has just reordered your object.
  prefs: []
  type: TYPE_NORMAL
- en: Languages that support JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have seen how the parsers in JavaScript support JSON. There are
    many other programming languages that provide implementations for JSON. Languages
    such as PHP, Python, C#, C++, and Java provide a very good support for the JSON
    data interchange format. All of the popular programming languages that support
    service-oriented architecture have understood the importance of JSON and its implementation
    for data transfer, thus, they have provided great support for JSON. Let us take
    a quick detour from implementing JSON in JavaScript, and see how JSON is implemented
    in other languages, such as PHP and Python.
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP is considered to be one of the most popular languages for building web applications.
    It is a server-side scripting language that allows developers to build applications
    that can perform operations on the server, connect to a database to perform CRUD
    (Create, Read, Update, Delete) operations, and provide a stately environment for
    real-time applications. JSON support has been built into the PHP core from PHP
    5.2.0; this helps users avoid going through any complex installations or configurations.
    Given that JSON is just a data interchange format, PHP consists of two functions.
    These functions handle JSON that comes in via a request or generate JSON that
    will be sent via a response. PHP is a weakly-typed language; for this example,
    we will use the data stored in a PHP array and convert that data into a JSON string,
    which can be utilized as a data feed. Let us recreate the student example that
    we have used in an earlier section, build it in PHP, and convert it into JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example is only intended to show you how JSON can be generated using PHP.
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP](img/6034OS_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run a PHP script, we will need to install PHP. To run a PHP script through
    a browser, we will need a web server, such as Apache or IIS. We will go through
    the installation in [Chapter 4](ch04.xhtml "Chapter 4. AJAX Calls with JSON Data"),
    *AJAX Calls with JSON Data*, when we work with AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: This script starts by initializing a variable, and assigning an associative
    array that contains student information. The variable `$students` is then passed
    to a function called `json_encode()`, which converts the variable into a JSON
    string. When this script is run, it generates a valid response that can be exposed
    as a JSON data feed for other applications to utilize.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP](img/6034OS_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully generated our first JSON feed via a simple PHP script;
    let us take a look at the method to parse JSON that comes in via an HTTP request.
    It is common for web applications that make asynchronous HTTP requests to send
    data in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example is only intended to show you how JSON can be ingested into PHP.
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP](img/6034OS_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PHP](img/6034OS_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python is a very popular scripting language that is extensively used to perform
    string operations and to build console applications. It can be used to fetch data
    from a JSON API, and once the JSON data is retrieved it will be treated as a JSON
    string. To perform any operations on that JSON string, Python provides the JSON
    module. The JSON module is an amalgamation of many powerful functions that we
    can use to parse the JSON string on hand.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example is only intended to show you how JSON can be generated using Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/6034OS_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example we have used complex datatypes, such as Tuples and Dictionaries,
    to store the scores and courses respectively; since this is not a Python course,
    we will not go deep into those datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run this script Python2 needs to be installed, it comes preinstalled on any
    *nix operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/6034OS_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The keys might get rearranged based on the datatype; we can use the `sort_keys`
    flag to retrieve the original order.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us take a quick look at how the JSON decoding is performed in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example is only intended to show you how JSON can be ingested into Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/6034OS_02_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we are storing the JSON string in `student_json`, and we are
    using the `json.loads()` method that is available through the JSON module in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python](img/6034OS_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced us to the basics of JSON. We went through the history
    of JSON, and understood its advantages over XML. We created our first JSON object
    and successfully parsed it. Also, we went over all the datatypes that JSON supports.
    Finally, we went over some examples as to how JSON can be implemented in other
    programming languages. As we move forward in this journey, we will find the knowledge
    that we have gathered in this chapter to be a solid foundation for the more complex
    concepts that we will go over in the later chapters.
  prefs: []
  type: TYPE_NORMAL
