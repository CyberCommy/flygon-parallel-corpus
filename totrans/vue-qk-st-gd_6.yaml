- en: Transitions and Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll look at how to use transitions and animations in Vue.
    This is a large topic that would take a lot more than a chapter to cover. Hence,
    we will deal with some fundamental concepts that we can build upon in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CSS transitions and animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing transitions with the `transition` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with CSS transitions and animations in Vue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with third-party CSS and JS libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding CSS styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with transition groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript animation hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After reading this chapter, you should have a solid understanding of how transitions
    and animations are used in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions and animations in CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand how Vue.js deals with transitions and animations, we will first
    need to have a quick refresher on how they work in CSS. We will focus on the bare
    basics, with the goal of revisiting the principles that govern transitions and
    animations. We will also look at their differences. The goal is to be able to
    understand better how Vue helps, rather than dive deep into the nuances of transitions
    and animations.
  prefs: []
  type: TYPE_NORMAL
- en: How CSS transitions work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we hover over an element, we put that element in a hover state. When the
    user triggers a hover state through their interaction with our web page, we might
    want to *emphasize* that this change of state has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: To emphasize that change of state, we could, for example, change the CSS `background-color`
    property on that element when the user hovers over it.
  prefs: []
  type: TYPE_NORMAL
- en: This is where CSS transitions come in. When we write code for CSS transitions,
    we *instruct* the browser on how it will display changes made to that specific
    CSS property—in our example, the `background-color` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we have an HTML `button` element. This element has its CSS property
    of `background-color`  set to `red`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user hovers over the button, we want to change the value of the `background-color`
    property from `red` to `blue`. We''ll do that like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The sample code is available here: [https://codepen.io/AjdinImsirovic/pen/LJKJYY](https://codepen.io/AjdinImsirovic/pen/LJKJYY).'
  prefs: []
  type: TYPE_NORMAL
- en: However, this change of color is sudden. To *smoothly transition* a CSS property
    of an HTML element from one value to the other, we use the CSS `transition` property.
    The `transition` property is a shorthand CSS property. It is just another CSS
    property we specify on the targeted element—the one to which we want to apply
    this smooth transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we want to smoothly transition our button from the red background
    to the blue background. We will simply add the shorthand `transition` property
    on the button element, and set two values on this `transition` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we're specifying the duration for only one property, but we
    can add more, as needed. The previous example can be found at [https://codepen.io/AjdinImsirovic/pen/rqBqYN](https://codepen.io/AjdinImsirovic/pen/rqBqYN).
  prefs: []
  type: TYPE_NORMAL
- en: How CSS animations work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous example, we saw a simple transition. In this example, we will
    convert the transition into an animation. The updated CSS code will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we have converted our simple CSS transition into a CSS
    animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example can be found at this link: [https://codepen.io/AjdinImsirovic/pen/WaNePm](https://codepen.io/AjdinImsirovic/pen/WaNePm).'
  prefs: []
  type: TYPE_NORMAL
- en: However, it does not work 100% the same. When we hover over the button, we don't get
    the exact same behavior we had in the transition example. The reason is that we
    have specified the initial state (as `0%`) and the final state (as `100%`) of
    our animation. So, we are effectively mapping over the behavior we had in the
    transition example, to behavior in the animation example.
  prefs: []
  type: TYPE_NORMAL
- en: However, when we remove the mouse pointer from the button, the animation does
    not rewind to the initial state, but rather abruptly cuts back to the original
    background color of red. In CSS, there is no `mouseout` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could, however, add additional steps in between. For example, we could set
    the background color to green at 50% of our change animation. The result can be
    seen at this URL: [https://codepen.io/AjdinImsirovic/pen/QZWWje](https://codepen.io/AjdinImsirovic/pen/QZWWje).'
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into how Vue implements transitions and animations, let's look
    at the differences between them in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Differences between transitions and animations in CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are two quick, incomplete lists of the differences between transitions
    and animations in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Rules for CSS transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some important rules of CSS transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: Transitions only have implied start and end states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The way that a transition will be performed is decided by the browser; in other
    words, the browser decides how it will perform the in-between steps of the transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can only point the browser to the exact CSS property we want transitioned,
    and the duration, easing, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitions are *triggered; t*he trigger can be a hover or an element appearing
    on the page (via JavaScript)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitions can't be looped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitions are played in reverse when the trigger state (the hover state) is
    reverted, that is, when the mouse is *unhovered*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition syntax is simpler than the syntax for animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's list the important concepts of CSS animations.
  prefs: []
  type: TYPE_NORMAL
- en: Rules for CSS animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What follows is an incomplete list of rules for CSS animations:'
  prefs: []
  type: TYPE_NORMAL
- en: Animations allow us to specify initial state, in-between state(s), and end state
    of our CSS properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be as many steps as we need in our CSS animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can delay animations, play them *x* number of times (to infinity), or play
    them in the opposite direction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations don't have to be triggered, but they can be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these basic distinctions out of the way, let's next look at how to deal
    with transitions and animations in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: The transition element in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the previous example of CSS-only transitions, ported into Vue.
    In the following example, the first button is wrapped inside a custom component,
    while the second button is just the regular HTML button element. They still both
    share the same styles, as specified in the app''s CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code can be found here: [https://codepen.io/AjdinImsirovic/pen/vVYERO](https://codepen.io/AjdinImsirovic/pen/vVYERO)[.](https://codepen.io/AjdinImsirovic/pen/vVYERO) As
    can be seen in the example, in this case, Vue does not diverge from the way that
    transitions and animations work in plain HTML and CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue is not designed to override the normal use case for CSS transitions and
    animations, but rather to work alongside them with one specific goal: to transition
    the appearance and removal of its *components* on the screen. This addition and
    removal of components is done with the help of Vue''s `transition` element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when you want to have an event in one component to affect the
    addition and removal of another component, you simply wrap that other component
    in a `transition` element. To build from the previous examples with plain CSS,
    here is a simple implementation in Vue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The example code is available here: [https://codepen.io/AjdinImsirovic/pen/ZqExJO](https://codepen.io/AjdinImsirovic/pen/ZqExJO).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need the element to appear smoothly on the initial page load, without
    conditions, then you can use the `appear` attribute on your transition wrapper,
    like this: `<transition appear>`.'
  prefs: []
  type: TYPE_NORMAL
- en: What is happening in the previous code is that we are conditionally toggling
    the mounting of the `custom-component` element based on whether the user has clicked
    the first button or not. Note that the original CSS transition is still behaving
    the exact same way in both buttons. When we hover over either of them, we still
    get the four-second transition of background color from red to blue. The browser
    still takes care of the *inverted* transition of a button's background when we
    hover away from either of the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: However, the mounting of the second button on the screen comes without any transitions.
    The second button simply appears and disappears upon clicking the first, without
    any easing in or out.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this gradual appearance and removal, the `transition` element comes
    with built-in CSS class names. These built-in transition class names are also
    called **animation hooks**. These animation hooks describe the beginning state,
    the end state, and the in-between state for component(s) wrapped inside that `transition`
    element; that is, they describe in what way the affected components will toggle
    on and off the screen.
  prefs: []
  type: TYPE_NORMAL
- en: We can add animation hooks to either *enter* transitions or to *leave* transitions.
    Enter transition classes are `v-enter`, `v-enter-active`, and `v-enter-to`. Leave
    transition classes are `v-leave`, `v-leave-active`, and `v-leave-to`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the enter transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build on the previous example, we will employ these animation hooks to make
    the second button''s appearance and disappearance smoother. The only difference
    between the previous example and this one is the addition of animation hooks in
    our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for this example can be found at the following link: [https://codepen.io/AjdinImsirovic/pen/MPWVNm](https://codepen.io/AjdinImsirovic/pen/MPWVNm).'
  prefs: []
  type: TYPE_NORMAL
- en: If we imagine the appearance of the second button as a regular CSS transition,
    then the `.v-enter` animation hook would be the initial transition state, `.v-enter-active`
    would be the in-between steps, and `.v-enter-to` would be the final transition
    state, that is, what the element will transition *to*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we have not used the `.v-enter-to` animation hook in our example, the
    behavior we get is as follows: when the first button is clicked, the second button
    takes three seconds to change (transition) its opacity from the initial value
    of zero to the implied value of one. This takes care of our enter transition.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the leave transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a slight issue with our previous example: when we click the first
    button again, the second button will disappear instantly, because its opacity
    value will be reset to zero without any transition. The reason for this is simple:
    we have not specified any *leave* transition hooks, so the button just disappears.
    We''ll fix that in the next example, by simply specifying the leave transitions,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code can be found here: [https://codepen.io/AjdinImsirovic/pen/XxWqOy](https://codepen.io/AjdinImsirovic/pen/XxWqOy).
    What we are doing in this code is this: when the component needs to be animated
    out, our transition''s initial state is `.v-leave`. The CSS declaration in the `.v-leave` animation
    hook is `opacity: 1`. Next, we specify the in-between steps: the CSS property
    to be transitioned, namely `opacity`, and the duration of the transition: `3s`.
    Finally, we specify the finished state for our transition, where `opacity` gets
    set to the value of zero.'
  prefs: []
  type: TYPE_NORMAL
- en: What we can conclude from these examples is that the *leave* transitions' animation
    hooks (`v-leave`, `v-leave-active`, and `v-leave-to`) should be *a mirror image—*figuratively
    speaking—in comparison to the enter transitions' animation hooks (`v-enter`, `v-enter-active`,
    and `v-enter-to`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also conclude that the transition component and the animation hooks
    that come along with it are to be used for mounting and unmounting the components
    on the screen. When transitioning a component on and off the screen, the animation
    hooks'' natural progression is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also group certain CSS selectors that share the same values, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This example can be found at the following web address: [https://codepen.io/AjdinImsirovic/pen/dgyKMG](https://codepen.io/AjdinImsirovic/pen/dgyKMG).'
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen here, `.v-enter` (the initial enter animation hook) gets combined
    with `.v-leave-to` (the last leave animation hook) precisely because the transition
    must be played in reverse to get the most expected behavior. Similarly, we are
    grouping the in-between steps, the `-active` hooks, to have the same `transition`
    CSS property. Finally, the enter animation's final hook needs to share the CSS
    declaration with the initial leave animation hook. Also, since the `.v-enter-to`
    and the `.v-leave` values are implied by default, we can even omit them and still
    have a working component transition, similar to the one described in the official
    documentation: [https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components](https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components).
  prefs: []
  type: TYPE_NORMAL
- en: To make things simpler to reason about, in our most recent example we have also
    changed the `data` option's `show` key to the value of `false`. That way, initially
    the component is not mounted to the DOM. Only when the user clicks on the first
    button will the second button's enter animation hooks kick in and smoothly transition
    the component in. On another click, the second button's leave animation hook will
    kick in and transition the component out in reverse. This is important, since
    initially we had the enter animation transition the unmounting of the component
    and the leave animation transition the mounting of it back into the page, which
    possibly makes things slightly more difficult to reason about.
  prefs: []
  type: TYPE_NORMAL
- en: Naming transition components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can give our transition elements the `name` attribute. Doing this changes
    the naming convention for animation hooks. For example, if we give our transition
    the name of `named`, then the animation hooks will need to be renamed as follows.
    For every transition class, we'll replace the beginning `v-`  with the value of
    the `name` attribute. Hence, `v-enter` will become `named-enter`, `v-leave` will
    become `named-leave`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s rewrite the previous example with a named transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for this example is available in this CodePen: [https://codepen.io/AjdinImsirovic/pen/MPWqgm](https://codepen.io/AjdinImsirovic/pen/MPWqgm).'
  prefs: []
  type: TYPE_NORMAL
- en: CSS animations with transition component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS animations are also employed with the help of the transition component.
    Here is an example of the previous example with CSS transition, converted into
    using a CSS animation. We''ll begin with HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll add the following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add a few simple styles too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for this example is available here: [https://codepen.io/AjdinImsirovic/pen/vVEXEv](https://codepen.io/AjdinImsirovic/pen/vVEXEv).
    The converted animation is exactly the same as the previous example with CSS transitions,
    save for the change in animation behavior at 35% and 65% of animation completion.
    The effect that we get is sort of like a border color effect, even though we are
    changing the `background-color` property of this element. This confirms a few
    conclusions we already discussed, namely the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `transition` element in Vue affects the appearance and disappearance of
    the entire `<transition>` component, rather than its contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual animation can have as many steps as needed; in other words, to get
    the exact same effect as we had in the CSS transition example, it would be enough
    to simply remove the steps we specified at 35% and 65% of animation completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we'll discuss custom transition classes.
  prefs: []
  type: TYPE_NORMAL
- en: Custom transition classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Custom transition classes are great when we want to add functionality from
    a third-party CSS animation library. In this example, we''ll be using the `Animate.CSS`
    animation library, available here: [https://daneden.github.io/animate.css/](https://daneden.github.io/animate.css/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The official documentation covers the use of custom transition classes sufficiently
    at this URL: [https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes](https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing to add is the example we have been building on, available here:
    [https://codepen.io/AjdinImsirovic/pen/rqazXZ](https://codepen.io/AjdinImsirovic/pen/rqazXZ).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the example is as follows. First, we''ll start with the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s see the JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, inside our styles, we''ll set up some basic CSS declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Basically, we specify attributes that have the same names as animation hooks,
    plus the additional `-class` at the end of the attribute name. Hence, the default
    `v-enter-active` CSS class becomes the custom `enter-active-class` HTML attribute.
    We then give this custom HTML attribute a value we choose. The value we give it
    is the class name of the effect we want to use from our CSS animation library
    we previously picked—in this case, the `Animate.CSS` library. In the previous
    code, we have also set the `:duration` prop, specifying the duration of the transition
    to be exactly 4000 miliseconds. Practically, in our example, this will only have
    an effect if the `:duration` prop we set is shorter than the duration of animations
    we provided from the third-party library. For example, try setting the `:duration`
    prop to 100 milliseconds and see the animation chopped off. This can create some
    interesting effects.
  prefs: []
  type: TYPE_NORMAL
- en: Combining transition modes, duration, keys, and v-if
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Transition modes are used when we want to smoothly remove one element from
    the screen and seamlessly replace it with another one. The default transition
    mode that the `<transition>` component comes with, without any tweaks needed,
    is the simultaneous transition: one element is removed at the same time that another
    is added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are some transitions is which it would be better to have the
    new element appear, and only when this transition is complete does the old element
    get removed. This transition mode is referred to as the `in-out` transition mode.
    To add it, we simply use the custom mode HTML attribute, and give it the value
    of `in-out`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, we might want to use the `out-in` transition mode, where we first
    have the old element transition out, and only then, when the transition is complete,
    the new element transitions in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see this in practice. The example is available at this pen: [https://codepen.io/AjdinImsirovic/pen/yRyPed](https://codepen.io/AjdinImsirovic/pen/yRyPed).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We are still using the same JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'There are some changes in our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We are switching on and off between two `button` elements inside our transition.
    Since these two have the same tag name, we need to give them different `key` attributes
    so Vue can distinguish them.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we are rendering our buttons conditionally. While we are keeping the check
    of `v-if="show"` in the first button, in the second button we are simply using
    the `v-else` directive, without giving it a value to check against.
  prefs: []
  type: TYPE_NORMAL
- en: Binding CSS styles in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll discuss how to animate other parts of the page when a
    component is mounted or removed. For that, we will use the `v-bind` directive,
    and as we have seen in the previous chapters, we can use this directive to bind
    to HTML attributes. Once bound, these attributes can then be manipulated from
    our Vue instance.
  prefs: []
  type: TYPE_NORMAL
- en: The example for which we will demonstrate CSS style binding is a simple onboarding
    demo. Onboarding, in terms of web page usability, is the practice of showing new
    users of a web app the overall functionality that a web page has, which is achieved
    by highlighting a certain section of a page and showing a popover with some information
    that further describes the functionality at that specific step of the onboarding
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we need to understand that we can statically bind CSS classes
    by passing the value of the `v-bind:class` directive as an object, as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the object, we can simply add CSS classes as keys, and Boolean `true`
    and `false` as values. CSS values that are set to `true` will be used, otherwise,
    they won''t, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are using the Bootstrap framework's CSS classes. We are
    setting the button to the class of `btn-primary`, as it is set to `true`, rather
    than the `btn-secondary`, which is set to false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the `v-bind` directive allows us to programatically control HTML attributes,
    we might make our app switch CSS classes on a click. For example, in a basic Vue
    app, we might do this in our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, we are setting the classes of `btn`, `btn-lg`, and `btn-primary`
    to `true`, and we are setting the value of `btn-secondary` to `btnClicked`. Next,
    we''re going to set the value of `btnClicked` to `false` in our JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll add the click event to our button, so when it''s clicked, the
    value of `btnClicked` will be toggled from `true` to `false`, and vice versa.
    Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This example is available at this URL: [https://codepen.io/AjdinImsirovic/pen/KGVvML](https://codepen.io/AjdinImsirovic/pen/KGVvML).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can further expand on this example by using the `data` property to store
    groups of CSS classes, and a JavaScript ternary expression to check whether the
    `btnClicked` value is currently set to `true` or `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The code for the previous example is available at [https://codepen.io/AjdinImsirovic/pen/wYMEJQ](https://codepen.io/AjdinImsirovic/pen/wYMEJQ).
  prefs: []
  type: TYPE_NORMAL
- en: Animating a button on click with dynamic CSS classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are ready to add animations by virtue of simply adding additional CSS
    classes from the aforementioned Animate.CSS animation library. The updates to
    the previous example''s code are minimal. We are only adding two CSS classes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, we also had to include the Animate.CSS library, as can be seen here: [https://codepen.io/AjdinImsirovic/pen/RerEyy](https://codepen.io/AjdinImsirovic/pen/RerEyy).
    To add the animation on both clicks, we simply alter the entry for `btnSecondary`
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now, the button will be animated on every click.
  prefs: []
  type: TYPE_NORMAL
- en: Working with transition groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While a single transition component is used to wrap around a single element,
    transition groups are used for animating multiple elements. They come with an
    additional animation hook: `v-move`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example that follows, we''ll build simple functionality where users
    can award a piece of content online with an **applause***,* a concept similar
    to the clap feature of [https://medium.com/](https://medium.com/), which works
    as follows: if a visitor to the website likes a piece of content, they can award
    it with *claps*, by clicking the clap button up to 50 times. hence, the claps
    feature works like a kind of a counter of how much a piece of content is appreciated
    by the website visitors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our implementation, we will combine the features we have already covered.
    The difference is, instead of a transition, we will use the `transition-group`
    component. This is the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the JS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is available as a pen at this URL: [https://codepen.io/AjdinImsirovic/pen/JmXJgd](https://codepen.io/AjdinImsirovic/pen/JmXJgd).'
  prefs: []
  type: TYPE_NORMAL
- en: There are several things happening in this code. In HTML, we are using the `transition-group`
    component to work with two buttons. In JS, we set up the logic for the behavior
    of our claps. We begin the `clapCount` set to `false`, which coerces to zero.
    In CSS, we style the buttons and we employ the animation hooks. The `transform`
    and `transition` values have been set to extreme values, to be able to understand
    better how they work by playing around with the values (for instance, `1000 px`
    for the translate on the *X* axis, and `500 px` for the translate on the *Y* axis).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript animation hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use Vue''s `transition` classes as JavaScript methods. Just like lifecycle
    hooks, we don''t have to access any of them. Or we can cherry-pick those that
    we want to use. To begin, inside our Vue constructor''s `methods` option, we could
    specify what to do with all of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we have four methods for enter transitions and another four methods
    for leave transitions. All of the methods take in the `el` argument and the `enter`
    and `leave` methods also take in the `done` argument to signify the completion
    of an animation. If the `done` argument was not used, the hooks would be called
    without waiting for the `done` callback to complete, and the transition would
    be completed at once.
  prefs: []
  type: TYPE_NORMAL
- en: Let's rewrite the previous example using these JavaScript animation hooks. To
    keep things easy to understand, we will integrate the official documentation's
    example into our example, so that we can see how this example works when the animation
    hooks are called via JavaScript only.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code we will use in our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the code we will use in our JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The example is available here: [https://codepen.io/AjdinImsirovic/pen/PyzqxM](https://codepen.io/AjdinImsirovic/pen/PyzqxM).
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding, it is easy to change parameters in the specific methods
    inside our Vue constructor to achieve the desired effect for our JavaScript-powered
    animations.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at working with transitions and animations in Vue.js.
    Specifically, we examined how transitions and animations work in CSS. We examined
    the differences between transitions and animations in CSS and established the
    rules for both. We worked with the transition and transition-group elements in
    Vue, and we discussed animation hooks and their grouping into enter and leave
    transitions. We saw how transition components can be named and, given key values
    and how we can assign custom transition classes for easier integration with third-party
    animation libraries.
  prefs: []
  type: TYPE_NORMAL
- en: We explained when to use transition modes and how to further tweak our animations
    with `:duration` and `conditional` directives. We mentioned the importance of
    binding CSS styles in Vue and how this approach can be used for adding animations
    to our web apps. Finally, we saw how to convert CSS class-based transitions into
    JavaScript-based animation hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how to use Vuex.
  prefs: []
  type: TYPE_NORMAL
