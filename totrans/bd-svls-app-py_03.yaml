- en: Setting Up Serverless Architectures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have understood what the serverless paradigm is, and also how serverless
    systems work. We have also understood how AWS Lambda's serverless tool works.
    We have also learned the basics of how triggers work in AWS Lambda as well as
    a detailed understanding of the system settings and configuration available to
    the user in the Lambda environment. We have also learned how the Lambda console
    works, and also how to identify and use various parts of the Lambda console in
    detail, including code deployment, trigger manipulation, deploying tests in the
    console, versioning our Lambda function, and also the different settings available.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a clear understanding of all the important
    triggers available for AWS Lambda and how you can use them to set up efficient
    Lambda architectures. You will also understand what an event structure is, and
    what an event structure looks like for some AWS resources, and how you can use
    that knowledge to write and deploy better trigger-based Lambda architectures.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: S3 trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SNS trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQS trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudWatch Event and Logs trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S3 trigger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: S3 is the AWS object storage service, where the user can store and retrieve
    any type of object. In this section, we shall be learning how the S3 trigger works,
    what the event structure of an S3 event looks like, and also how to make use of
    them in the learning to build a Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be building a Lambda function that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Receives a PUT request event from the S3 service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prints the name of the file and other major details
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transfers that file to a different bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, let''s get started on learning how to use the S3 trigger efficiently. We
    will be working on this task step-by-step, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we need to create two S3 buckets for the task. One will be the bucket
    where the file will be uploaded by the user. The other will be the one where the
    file is transferred and uploaded by the Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The S3 console looks like the following screenshot when there are no pre-existing
    buckets. You can go there by selecting the S3 service from the drop-down Services
    menu in the top-left of your AWS console:![](img/09a5de57-300f-49c0-8b59-12bc529afa02.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create two buckets, namely `receiver-bucket` and `sender-bucket`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `sender-bucket` bucket will be used as the bucket where the user uploads
    the files. The `receiver-bucket` bucket is the one where the Lambda function uploads
    the files. So, as per our problem statement, whenever we upload files to the `sender-bucket`
    bucket, the Lambda function gets triggered and the files get uploaded to `receiver-bucket`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we click on the Create bucket button in the S3 console, we get a dialog
    that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a72eb0c-9445-40b1-9f8c-73b4b34d0e14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding dialog, we need to enter the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bucket Name:As the name suggests, we need to enter the name of the bucket we
    are creating. For the creation of the first bucket, name it `sender-bucket` and
    name the second bucket `receiver-bucket`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Region: This is an AWS region we want the bucket to reside in. You can use the
    default region for this or the region closest to wherever you are located.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy settings from an existing bucket: This specifies whether we want to use
    the same settings as in some other bucket in the console for this bucket too.
    As we do not currently  have any other bucket in our console, we can skip this
    setting by leaving it empty. After this, you can click on the Next button in the
    bottom-right part of the popup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we click Next, we get redirected to the second tab of the popup, which
    is the Set properties menu and looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10128d3e-10e6-45e9-b027-0f7ff5062db1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this part of the popup, we need to decide on the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Versioning:This is relevant if we want to keep multiple versions of the files
    in the S3 bucket. This setting is required when you need a Git style versioning
    for your S3 bucket. Note that the storage cost would be included in line with
    the number of versioned documents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server access logging: This will log all the access requests to the S3 bucket.
    This helps debug any security breaches and secure the S3 bucket and the files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tags: This will tag the bucket using a *Name:Value* style, the same style of
    tagging as we learned for Lambda functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object-level logging: This will use the CloudTrail service of AWS to log all
    the access requests and other details and activities on the S3 bucket. This will
    also include CloudTrail costs too. So, use this feature only if you need detailed
    logging. We shall skip using this for this section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After finishing creating the buckets, the S3 console will look like this, with
    both the created buckets listed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7f31807-cf46-4bef-ba8d-d20124be7acf.png)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully created S3 buckets for our task. Now, we have to create
    a Lambda function that can recognize an object upload in the `sender-bucket` bucket
    and send that file to the `receiver-bucket` bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While creating the Lambda function, this time choose the s3-get-object-python 
    blueprint from the listed options available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cfc6e86a-9252-4248-b7ed-0055f37f1da5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Configure the bucket details in the next step. In the Bucket section, select
    the sender-bucket bucket and select the Object Created (All) option in the Event
    type action. This is because we want to send a notification to Lambda whenever
    an object gets created in the `sender-bucket` bucket. The completed part of the
    section will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a382c99c-082c-489c-924f-b0ef76843400.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have enabled the trigger, Lambda helps you by creating a boilerplate
    code for the task. All we need to do is write the code to put the object into
    the `receiver-bucket` bucket. The boilerplate code can be seen in the Lambda function
    code section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ea96838-08fa-4617-84f2-aa8a67147152.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When this step has been completed and you have clicked the Create function
    button, you can see the Triggers section of the Lambda console, which displays
    a success message in green at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9186f527-a131-41b5-8fb6-21f6f1ddae21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I have uploaded a small image file into the `sender-bucket` bucket. So, now
    the contents of the sender-bucket bucket look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a3e237fe-2e78-4a2f-a67d-9878ec9a4f87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as this file had been uploaded, the Lambda function got triggered.
    The Lambda function code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you run the Lambda function, you can see the same file in the receiver-bucket
    bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/957a5fbb-3d6b-4f34-8a69-ea62d47a06ed.png)'
  prefs: []
  type: TYPE_IMG
- en: SNS trigger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SNS notification service can be used across multiple use cases, one of which
    involves triggering Lambda functions. The SNS trigger is popularly used as an
    interface between the AWS CloudWatch service and Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this section, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an SNS topic
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a CloudWatch alarm for our `receiver-bucket` bucket to monitor the number
    of objects in the bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the objects count reaches 5, the alarm will be set to ALERT and the corresponding
    notification will be sent to the SNS topic that we have just created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This SNS topic will then trigger a Lambda function, which prints out a Hello
    World message for us
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will help you understand how to monitor different AWS services and set
    up alarms for some thresholds for those metrics. And depending on whether the
    service's metrics have hit that threshold or not, the Lambda function will get
    triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process flow for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SNS topics can be created from the SNS dashboard. By clicking on the Create
    topic option, you will be redirected to the topic creation dashboard of SNS. The
    SNS dashboard of AWS looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3262ad33-76f7-4d57-8e43-2e12db82b2c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The SNS topic creation wizard in the next step looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b51fe4e3-fed3-41be-80df-b59948f23419.png)'
  prefs: []
  type: TYPE_IMG
- en: In this creation wizard, you can name the SNS topic that you are creating, and
    add any meta information you want to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the topic is created, you can view it in the Topics menu, which is on
    the left of your SNS dashboard. The button looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/698f8392-0c40-46b6-a558-4fd6309dfa26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon clicking the Topics tab, a list of topics will be displayed, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eeae4a00-0357-4153-a0fd-441b71dad76a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have successfully created an SNS topic, we shall create a CloudWatch
    alarm to monitor our S3 bucket for files. The AWS CloudWatch dashboard looks something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10928218-5dfe-47a1-8c48-150d889b7496.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can go to the Alarms page by clicking the Alarms button in the list
    on the left of the dashboard. The AWS Alarms page of looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc0501d4-b507-4d58-b7c2-2c589238c3bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on Create Alarm to create an alarm. This will open an alarm creation
    wizard with multiple options. The wizard looks like this, depending on the services
    running in your AWS ecosystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9f15a2f-b628-447e-a920-7f9287bc587b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we intend to create an alarm for our S3 bucket, we can go to the S3 Metrics tab
    and ignore the rest of the available metrics. If you click on the Storage Metrics
    option in the S3 Metrics category, you will be re-directed to another alarm creation
    wizard that looks like the following, depending on the number of buckets you have
    in your S3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32782120-1b76-4d1b-8b27-9a929f4dc6e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you observe the options in the Metric Name column, you will see two options
    available for each bucket: NumberOfObjects and BucketSizeBytes. They are self-explanatory 
    and we will only need the NumberOfObjects option for the `receiver-bucket` bucket.
    So, select that option and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45fd818d-d08c-4100-857c-4377453774ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take you to the alarm definition wizard, where you need to specify
    the details of the SNS topic and the threshold for the alarm. The wizard looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0921bdeb-5fde-4537-8f95-04aed3bcf7e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add in the details for the threshold and the name of the alarm. The threshold
    is five files, which means that the alarm will be triggered as soon as the number
    of files in the corresponding bucket (`receiver-bucket` in our case) reaches a
    total of five. The wizard looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4148aba2-9c69-4913-b885-13d2a49687e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Actions option, we can configure the alarm to send the notification
    to the SNS topic that we have just created. You can select the topic from the
    drop-down list, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9438ea9f-5fb0-46a7-bc73-ef23df6afa6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have configured the SNS topic, we can click on the blue Create Alarm button
    at the bottom. This will create the alarm that is linked to the SNS topic as a
    notification pipeline. The created alarm will look like this on the dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55201a98-53ba-42cd-bf02-c2827618e7fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can move on to building the Lambda function for the task. For this
    particular task, use the sns-message-python blueprint while creating our Lambda
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b08bdcd4-f8b2-4b7e-8ac5-14da83059c1f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous step, when you have selected the blueprint, you will be asked
    to enter some meta information regarding your Lambda function, just like we did
    previously while creating Lambda functions. In the same wizard, you will also
    be asked to mention the name of the SNS topic. You can specify it here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c4217ff-c8c1-4bce-b320-f7f88e46b38f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have selected all the options for the Lambda function correctly,
    we can now go on to the code. The desired code will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6107109-2c7f-4237-bc5e-62cbb37f1129.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding code will display a `Hello World` message whenever the Lambda
    function gets triggered. This we have completed the setup for this task.
  prefs: []
  type: TYPE_NORMAL
- en: To test the preceding setup, you can simply upload more than five files to your
    `receiver-bucket` bucket and check for Lambda function's execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SQS trigger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **AWS Simple Queue Service (SQS)** is the AWS queue service. This service
    is similar to the queuing mechanisms that are used generally in software engineering.
    This enables us to add, store, and remove messages inside the queue.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to trigger a Lambda function, depending on the number of messages
    in a SQS queue. This task will help you understand how serverless batch data architectures
    can be built and how to build one yourself.
  prefs: []
  type: TYPE_NORMAL
- en: We will do this by monitoring our SQS queue with a CloudWatch alarm and relaying
    the information to Lambda via an SNS topic, just like we did in the previous task.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this section, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an SQS queue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an SNS topic
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a CloudWatch alarm for our SQS queue to monitor the number of messages
    in the queue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the messages count reaches 5, the alarm will be set to ALERT and the corresponding
    notification will be sent to the SNS topic we have just created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This SNS topic will then trigger a Lambda function, which prints out a `Hello
    World` message for us
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will help you understand how to monitor queues and build efficient serverless
    data architectures that are batched, instead of in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process flow for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating an AWS SQS queue. We need to go to the SQS dashboard
    of our AWS account. The dashboard looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39c005af-791e-433c-858a-3ba9d9d1292b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Get Started Now button to create an SQS queue. It will redirect
    you to the queue creation wizard, where you need to enter details such as the
    name, type of queue, and so on. The queue creation wizard looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/50152dc5-a8d0-4eea-964c-ec94f4a3a3f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can enter the name of the queue in Queue Name. In the What type of queue do
    you need? option, select the Standard Queue option. In the options at the bottom,
    select the blue Quick-Create Queue option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03c94053-37fe-49db-bc53-bc2049fabe0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Configure Queue option is for advanced settings. It is not necessary to
    tweak those settings for this task. This is what the advanced settings look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67e1af76-950f-4b85-bfe9-f574dadb53cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created the queue, you will be taken to the SQS page, where all
    the queues that you have created are listed similarly to the SNS list. This page
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a3174a2-251c-4b5b-af46-673a86e7514e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we have already created an SNS topic in the previous task, we will use the
    same topic for this purpose. If you haven''t created an SNS topic, you can refer
    to the previous task for instructions on how to create one. The list of SNS topics
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/489ab47d-2c1e-4d58-a857-5b33a52e7154.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will go to the CloudWatch dashboard to create an alarm to monitor our
    SQS queue and send a notification to Lambda via the SNS topic that we have already
    created. We can now see the SQS queue metrics in the alarm creation wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70942869-f930-4886-be27-da5db529dc1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on the Queue Metrics option under SQS Metrics, we will be taken
    to the page where all queue metrics are listed, and we need to select one of them
    for our alarm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d9f61c2-5448-4a61-9350-36d7147f350f.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are interested in the ApproximateNumberOfMessagesVisible metric, which
    gives the number of messages in the queue. It says Approximate, as SQS is a distributed
    queue and the number of messages can only be determined stochastically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next page, after selecting the ApproximateNumberOfMessagesVisible metric
    from the list, the necessary settings can be configured as we did for the S3 Metrics
    in the previous task. The page should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac9558df-bc94-4b64-835f-c0fea9f2e7fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Actions section, configure the SNS topic to which we want to send our
    notification. This step is also similar to how we configured the SNS topic in
    the previous task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a9ed54d-2897-40b3-9ab1-e327bb359f61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are satisfied with the metadata and the settings you have configured
    for the alarm, you can click the blue Create Alarm button on the bottom-right
    side of the screen. That will successfully create an alarm that monitors your
    SQS queue and sends a notification to the SNS topic that you have configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/def27a8d-3fb9-4bcc-89d5-c2d7d93f2591.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the Lambda function that we created in the previous task. Make sure
    the trigger is the SNS topic that we are using to configure the notification system
    of the alarm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d5aae9c-805b-4fcb-8ea4-602553ca4ed8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Lambda function code for this task is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: CloudWatch trigger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CloudWatch** is the logging and monitoring service for AWS, where logs from
    most services get stored and monitored. In this section, we will learn how CloudWatch
    trigger works, how CloudWatch querying works in practice, configuring this in
    the Lambda function, and also how to make use of this knowledge to build a Lambda
    function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this section, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a CloudWatch log
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Briefly understand how a CloudWatch log works
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Lambda function that gets triggered by the CloudWatch trigger
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will help you understand and build resilient and stable serverless architectures.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process flow for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a CloudWatch Logs group, click on the Logs option to the left of
    the CloudWatch console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76623ee2-7ff2-40d9-b4e0-7e07a76ca89f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are on the AWS CloudWatch Logs page, you will see a list of log groups
    that are already present. The CloudWatch Logs page looks something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c23bdbdf-ee89-4449-8979-5d503712e8e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go ahead and create a new CloudWatch log. You can see the option to
    create a new log group from the Actions drop-down menu at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53517c8e-c595-4e20-925c-35967b6b0cac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next step, you will be asked to name the log group that you are creating.
    Go ahead and enter the relevant information and click Create log group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6315be94-5485-490f-ae80-d660c7e88531.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, now we have a new log group listed in the list of log groups in our CloudWatch
    console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c02d6c18-85b0-4fcb-99cd-9e39456e0c45.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the log group has been created, we can now start working on our Lambda
    function. So, let's move on to the Lambda console and start creating a new function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the blueprints, choose the cloudwatch-logs-process-data blueprint. The
    description reads: A real-time consumer of log events ingested by an Amazon CloudWatch
    Logs log group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61ffd152-0d65-4079-9dfb-5007b3dffeee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the corresponding blueprint option, you will be redirected
    to the Lambda creation wizard, as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d4e0e03-c35d-4b60-9d6f-708caf1b85e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just as we did in the previous task, we will also enter relevant information
    about the log name and other details in the cloudwatch-logs pane of the Lambda
    creation panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d882d70c-60fd-4d07-8019-83d11b359ea1.png)'
  prefs: []
  type: TYPE_IMG
- en: After clicking Create function, we will be directed to a Triggers page with
    the success message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76767741-339a-45bd-9323-6b8fbc1ba9e1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, now we write the Lambda function code to identify the log group and print `Hello
    World ` message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42a6a6b2-7e14-46ac-bcf6-890cef77d9b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have now successfully completed another task where we understood how to
    trigger a Lambda function via AWS CloudWatch Logs. The Lambda function code for
    this task is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned a great deal about how various Lambda triggers
    work, and how to configure them, set up the triggers, and write Lambda function
    code to handle the data from them.
  prefs: []
  type: TYPE_NORMAL
- en: In the first task, we learned how S3 events work and how to understand and receive
    events from the S3 service to AWS Lambda. We have understood how to monitor S3
    buckets for file details via their metrics in CloudWatch and then send that notification
    via AWS SNS to a Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned how to create SNS topics and how to use them as an intermediate
    route between several metrics of AWS services from CloudWatch to AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned briefly about how AWS CloudWatch works. We understood what the
    metrics of various AWS services, such as S3, SQS, and CloudWatch, look like. We
    also learned how to set thresholds for CloudWatch Alarms, and how to connect those
    alarms to notification services, such as AWS SNS.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how AWS CloudWatch Logs work and how to connect and use the CloudWatch
    trigger in Lambda so it's triggered whenever a new log event is added/received.
    Overall, we have successfully created new AWS services, such as SQS, CloudWatch
    Logs, SNS, and S3 buckets in this chapter, and successfully built and deployed
    three serverless tasks/pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to build serverless APIs, on which we
    will perform some tasks just like we did in this chapter, and get a hands-on understanding
    of how APIs work and, most importantly, how serverless APIs work.
  prefs: []
  type: TYPE_NORMAL
