- en: Reporting and Acting on Your Findings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration test reports are extremely important as they provide the client
    with detailed outcomes of the test. In this chapter, you will be able to understand
    what exactly goes into a penetration test report. You will be able to identify
    the audience of the report and how their views of the report differ. You will
    learn how to use Dradis, which can help you to keep track of findings, issues,
    and evidence that you can use in your report. You will learn what kind of remediation
    efforts are recommended to help a client to secure their environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of a penetration testing report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What goes into a penetration test report?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools for report writing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommending remediation options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following technical requirements are needed for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of a penetration testing report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Don't underestimate the importance of reporting. A penetration test report serves
    as a way for you to tell your story of navigating through the target organization
    and discovering vulnerabilities. It allows you to communicate important information
    to stakeholders such as the executive and IT management teams. This will help
    them to drive remediation efforts and provide executive backing to any policies
    that may need to be created or updated to address risks that were discovered.
    Remember that, with information security, if there is no backing by an executive
    stake holder, policies are bound to fail.
  prefs: []
  type: TYPE_NORMAL
- en: For technical teams, the report provides a clear picture of how vulnerable their
    environment is. It will provide them with the full technical details of what is
    vulnerable, why it is vulnerable, who it will affect, and how the vulnerability
    can be exploited. Having this information will help the technical team to prepare
    a roadmap of remediation efforts and plan which issues will be addressed first.
  prefs: []
  type: TYPE_NORMAL
- en: Don't fall into a pit of not having enough time to produce a decent report—ensure
    that you account for report writing within your planning.
  prefs: []
  type: TYPE_NORMAL
- en: When you write your report, don't assume that the people who will read it hold
    the same level of technical skill that you have. They work in IT, but their interests
    might be far different to yours. There is an art to learning how to explain your
    findings in a report; it is an art you will master as you grow and gain experience
    in the field. Ultimately, you want your report to help to build relationships
    with your clients, who will then use your services over and over.
  prefs: []
  type: TYPE_NORMAL
- en: What goes into a penetration test report?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some clients might tell you exactly what they want in a report, while some customers
    won't. In any event, you should have a basic structure that your report will follow.
    The structure that will be discussed here is by no means a template; it is merely
    to help you to understand what will be in the report. If you work for a organization
    that contacts other organizations to perform penetration tests, they might have
    their own templates. If you perform penetration tests as an individual, you will
    build your own templates.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some of the sections that a report can contain.
  prefs: []
  type: TYPE_NORMAL
- en: Cover page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The cover page should contain information such as the name and logo of the penetration
    testing company. The client's name should be displayed, as well as any title that
    has been given for the penetration test. This will provide a clear separation
    in case multiple tests are performed for the same client. The date should appear
    on this page, as well as the classification of the document. The details contained
    within the report are sensitive and should not be available for everyone to view;
    hence, a classification such as **confidential** or **highly confidential** should
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: Executive summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The executive summary will communicate the specific goals of the penetration
    test and the findings at a high level. The audience of this section will be people
    who are in charge of the strategic vision, security programs, and oversight of
    the organization. This section usually contains sub-sections, which we will describe
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you need to define the purpose of the test. Ensure that you
    connect details that were discussed during the pre-engagement phase so that the
    readers are able to link aspects such as the risk, countermeasures, or testing
    goals to the objectives and results of the test.
  prefs: []
  type: TYPE_NORMAL
- en: You can also list any objectives that may have changed during the engagement
    within this section.
  prefs: []
  type: TYPE_NORMAL
- en: Overall posture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you will state the overall posture of the penetration test. You will state
    how effective the penetration test was and what goals were achieved during the
    test. Within this section, you can state the potential impact it has on the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Risk ranking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will define the overall risk ranking of the organization. You will
    use a scoring mechanism that should be agreed upon during the pre-engagement phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example would be the **Damage potential**, **Reproducibility**, **Exploitability**,
    **Affected users**, and **Discoverability** model (**DREAD**). Each aspect can
    be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Damage potential**: How affected are the assets?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reproducibility**: How easily can the attack be reproduced?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploitability**: How easily can the asset be exploited?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Affected users**: How many users are affected?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discoverability**: How easily can the vulnerability be found?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By answering these questions, you will assign a risk rating value to each item
    that's been discovered. This can be **high**, **medium**, or **low**. The risk
    rating value can be something simple that is expressed in numbers, for example,
    Low=1, Medium=2, and High=3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding up all of the values will determine the risk rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Risk rating** | **Result** |'
  prefs: []
  type: TYPE_TB
- en: '| High | 12 - 15 |'
  prefs: []
  type: TYPE_TB
- en: '| Medium | 8 -11 |'
  prefs: []
  type: TYPE_TB
- en: '| Low | 5 - 7 |'
  prefs: []
  type: TYPE_TB
- en: 'An example of using the DREAD model on a finding is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerability discovered**: Lack of input sanitation enables the use of a
    SQL injection attack to extract user details from the SQL database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Analyzing the ratings for the items in the DREAD model will determine the risk
    rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Item** | **Rating** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage potential | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected users | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | 1 |'
  prefs: []
  type: TYPE_TB
- en: Once you add up all of the values, the sum is 12, which means the risk rating
    is high.
  prefs: []
  type: TYPE_NORMAL
- en: General findings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will be provided with an overall view of the findings.
    This will not be the specific detailed findings, but rather a statistical representation
    of the findings. You can look at using graphs or charts that will represent the
    targets that have been tested, results, attack scenarios, and other metrics that
    were defined in the pre-engagement phase. You can look at using graphs that represent
    the cause of the issues, for example, lack of operating system hardening = 35%,
    and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: The effectiveness of countermeasures can be listed here too. For example, when
    testing a web application that has a web application firewall in place, you may
    state that two out five attacks were stopped by the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Strategic roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Roadmaps provide a prioritized plan of remediation. These must be weighed against
    the business objectives and level of impact. Ideally, this section should map
    to the goals defined by the organization.
  prefs: []
  type: TYPE_NORMAL
- en: The roadmap can be broken down into short-, mid-, and long-term activities.
    Short-term would define what the organization can do within a 1-3 month period
    that would address the issues that have been discovered. Mid-term could be a 3-6
    month period, whereas long-term would be a 6-12 month period.
  prefs: []
  type: TYPE_NORMAL
- en: Technical report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical report is where you will communicate all of the technical details
    around the findings that you have discovered. This section of the document will
    describe the scope of the engagement in detail. The audience of this section will
    be personnel who have deep technical skills and will probably be the ones remediating
    the findings.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of a technical report would be an introduction section. This
    section would contain topics such as who was involved in the penetration test,
    contact information, the target systems or applications, objectives, and scope.
  prefs: []
  type: TYPE_NORMAL
- en: Let's focus on the main topics that would fall into the technical report.
  prefs: []
  type: TYPE_NORMAL
- en: Tools used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, your client may want to reproduce the test that you have performed.
    In order for them to obtain the same results, it would be good to disclose the
    tools that you used, as well as their versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '** Testing platform**: Kali Linux 2019.1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metasploit Framework v5**: Penetration testing framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Burp Suite Professional v1.7.34**: Web application testing framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap v7.70**: Port scanning and enumeration tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will proceed to list all of the tools that were used during the penetration
    test.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will write about how much information is obtainable about
    the customer. Be sure to highlight the extent of both public and private information.
    You can break down this section into two categories if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Passive information gathering**: This section is where you will display the
    amount of information that has been gathered without sending any data to the target.
    For example, you can highlight any information that was obtained from a crafted
    Google dork, DNS, or publicly accessible documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active information gathering**: In this section, you will show how much information
    was obtained using techniques such as port scanning and other foot printing activities.
    This section discloses data that was obtained by directly sending data to the
    assets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publicly accessible information should be a huge concern for any organization,
    especially if any metadata exists within publicly accessible documents that could
    give away the organization's username structure.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability assessment and exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will define the methods that were used to identify vulnerabilities
    and how they were exploited. You will include things such as the classification
    of the vulnerability, evidence of it, and CVE details.
  prefs: []
  type: TYPE_NORMAL
- en: When disclosing the vulnerability, be sure to break them into both technical
    vulnerabilities and logical vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Technical vulnerabilities are vulnerabilities that can be exploited by missing
    patches, or coding errors or the possibility of injecting malicious code, for
    example, a SQL injection attack.
  prefs: []
  type: TYPE_NORMAL
- en: Logical vulnerabilities are exploited by finding a flaw in the way the application
    works, for example, a web application that fails to perform a permission check.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how you would report a vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding**: Here, you will discuss the finding in detail. For example: we
    found that Server01 (`192.168.10.15`) is missing the MS17-010 Microsoft Windows
    patch, and the server has been manually exploited with DoublePulsar. DoublePulsar
    creates a backdoor to the system that can be used by anyone. It opens up a door
    for ransomware such as WannaCry and NotPetya, especially on systems that don''t
    have the MS17-010 patch. We were able to exploit this missing patch to gain access
    to the server with full administrative rights. Since we have access to the server,
    we were able to extract the local administrator account (`localadmin`) and its
    password hash using Metasploit''s hashdump.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Affected host**: This is where you define the full name of the host or application,
    for example, `CLIENT\Server01` (hostname).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tool used**: Here, you will explain what tool you used, for example, Metasploit
    Framework v5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evidence**: This is where you will provide evidence of the exploit. It can
    be in the form of a screenshot or screen text capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business impact**: In this section, you define what the risk of the finding
    is. For example, when systems are not patched in a timely manner, they can introduce
    a risk, which could be abused by malware, ransomware, and malicious users to gain
    access to sensitive information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root cause**: This defines what the cause of the vulnerability is. This can
    be technical, such as missing a security patch, or process-related. For example,
    the root cause is process-related since a patch management system exists. Servers
    are not being patched in a timely manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommendations**: Here, you will define what the recommended course of action
    should be to remediate this finding. Ensure that you provide as much detail as
    possible. For example, the short-term action would be to update the server to
    ensure that it is up to date with all Microsoft patches. The long-term action
    would be to ensure that vulnerability assessments are run monthly on the entire
    network and that servers and workstations are fully patched. Management should
    also scan the network for all systems that have been manually exploited with DoublePulsar
    and remove them from the network as they create a backdoor to the system for anyone
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining the correct level of detail in a report can be tricky. Some customers
    might find the report overwhelming if it is too detailed, while some might find
    it lacking in detail. The best way to determine the right amount of detail that
    should be in the report is to spend time with your client to understand what their
    expectations are and what they want to get out of the report.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have discussed the vulnerabilities and the exploitation of them, you
    need to highlight the actual impact to the client. Remember that this impact would
    be what the client would experience in a real-world attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this section, you can make use of screenshots to elaborate on the extent
    of the impact. Some topics that you would discuss in this section are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation paths and the techniques that were used, for example, pass-the-hash
    attacks and ultimately forging a golden ticket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to maintain access using persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to exfiltrate data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional systems that may have been accessed using pivot points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Countermeasure effectiveness can be discussed in this section, including both
    proactive and reactive countermeasures. Detection capabilities fall into this
    section too; for example, was the antivirus able to detect your payloads?
  prefs: []
  type: TYPE_NORMAL
- en: If there were any incident response activities that were triggered during the
    penetration test, these should be listed in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The conclusion will have the final overview of the penetration test. Within
    this section, you can reiterate portions of the test and how the client can grow
    their security posture. Always end on a positive note, no matter how bad the results
    are. This will provide your client with confidence to enforce future testing activities
    as they grow.
  prefs: []
  type: TYPE_NORMAL
- en: Tools for report writing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to writing a penetration testing report, you may wonder how to
    keep track of findings. Maybe you prefer a manual method of using a word processor,
    or maybe you want something that is more intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux includes a tool called Dradis, which is an open source framework
    that's is used by security professionals for effective information sharing. Dradis
    comes in a community edition and pro edition. Kali Linux contains the community
    edition. The professional edition contains a few interesting features, such as
    custom branding, 2FA, one-click reports, and the ability to export to multiple
    file types. However, the community edition contains the core features that the
    professional version has and allows you to export the results in HTML or CSV formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dradis is accessible from Applications | Reporting Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/467fda84-c405-44ee-b0da-41ee8a1434f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Accessing Dradis'
  prefs: []
  type: TYPE_NORMAL
- en: When you run Dradis for the first time, you will be prompted to create a shared
    server password and a new user account. Once you've done that, you will log in
    to the main landing page of Dradis.
  prefs: []
  type: TYPE_NORMAL
- en: Methodologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within Dradis, there is a section called Methodologies. This is a list of tasks
    that you want to perform for a given project. You can create your own methodology
    or import existing ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af806cbc-8f48-46a2-a5c7-b503ef40ed20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: The Methodologies component of Dradis'
  prefs: []
  type: TYPE_NORMAL
- en: If you click on Add new and select Download more, you will be redirected to
    a link where you can download compliance packages. Download the PTES Technical
    Guidelines; this will be a `.zip` file that you will need to extract. Within the
    contents of the file will be a folder called `ptes_methodology`; extract these
    files to `/var/lib/dradis/templates/methodologies`. Once the files are extracted,
    refresh the Dradis page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will be able to add the various PTES methodologies. Go ahead and add
    them all:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cac099f0-d143-46af-89f1-0c8f2a114f4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Adding the PTES methodologies'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added them, take note of the output. You now have a checklist
    of various tasks that can be performed at different stages of the PTES methodology. This
    is a good way to ensure that you are following a methodology standard when performing
    a penetration test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6259f0f-dc71-431b-81f8-4ff022fd1b7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Checklist as per the PTES methodology'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, not all penetration tests will follow this methodology. As you perform
    different penetration tests, you will create different methodologies that are
    tailored to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nodes can be likened to folders in a filesystem. This is where you will store
    information such as notes, attachments, and evidence files. Nodes will help you
    to structure your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a node, click on the plus (+) sign to the right of Nodes. From here,
    you will add a top-level node. You can add them one at a time or all at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3aa37940-f02a-4d57-8584-06d0b662762d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Adding multiple nodes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created your node structure, you have the ability to upload files
    from other tools. Here, you can import files from Nmap scans, Nessus, Nikto, and
    more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/200bee0f-1306-44d9-b96d-1ce8c8216378.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Uploading files from other tools'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, I have uploaded an Nmap Scan. Dradis has populated
    the properties and notes section to reflect the scan results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed53e7d8-95c5-449a-965b-7cf3be26cb11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Nmap scan results imported into Dradis'
  prefs: []
  type: TYPE_NORMAL
- en: As you import various tool outputs, Dradis will utilize its rule engine to autopopulate
    the data into the node.
  prefs: []
  type: TYPE_NORMAL
- en: Issues and evidence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **issue** contains information about a problem or vulnerability. For example,
    you would provide a description, CVE, URL references, and so on here.
  prefs: []
  type: TYPE_NORMAL
- en: '**Evidence** shows the presence of an issue. For example, you might create
    evidence of an exploit working.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can create evidence, you need to create an issue. To create an issue,
    click on the plus (+) sign to the right of Issues. You can use a template if you
    wish, but you don''t have to. Define the issue that you will show evidence about,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a44412c-50d5-4362-8396-28dc04684761.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Creating an issue'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the issue has been created, you can navigate to the node that you want
    to log the evidence on and click on the evidence flag. Next, you will select the
    issue from the drop-down list and then write your evidence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d165a55-39eb-4e93-b33c-be9aeb80be2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Creating evidence'
  prefs: []
  type: TYPE_NORMAL
- en: Within the nodes, you have the option to upload attachments. Attachments can
    be anything from screenshots, reports, files that have been downloaded from the
    target, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can explore the project by clicking on the Export results link at the top
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Using Dradis can really help you to keep track of your findings as you perform
    a penetration test. Methodologies serve as a good reminder in case you missed
    a step in a specific stage of the penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Recommending remediation options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within a penetration test report, you will need to give recommendations on how
    to secure the findings that were discovered. It's important to understand how
    the vulnerabilities can be remediated, as opposed to only knowing how to exploit
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider a few of the attacks that were performed throughout this book
    and the remediation activities that can be recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the information gathering phase, we looked at how we can gather information
    on our target using publicly accessible sources (OSINT). It's inevitable that
    an organization will post information publicly. The key to protecting from information
    exposure (such as metadata in documents) is by using techniques such as **information
    protection**. Information protection protects data from unauthorized use, disclosure,
    access, destruction, disruption, and modification. Information protection leverages
    a few techniques, such as encryption, data classification, policies, and processes
    to secure information.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting against active information gathering entails securing ports that
    should not be open. Network layer defenses can also be used, such as access-control
    lists on switches, and firewalls to perform filtering.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social engineering is perhaps one of the most dangerous attack vectors that's
    available to attackers. Successful social engineering attacks are dependent on
    the amount of information the attacker can obtain. Similarly, in a penetration
    test, a successful social engineering attack will depend on how much information
    you are able to obtain about the target organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no silver bullet when it comes to protecting against social engineering.
    At the end of the day, it is our human nature that will sway us to falling victim
    to these kinds of attacks. However, there are some measures that an organization
    can put into place, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Education**: Providing end user education is critical to any organization.
    If users don''t know how to identify social engineering attacks, how will they
    not fall victim to them? The key with education is making the end user care about
    security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Awareness**: Organizations need to be aware of what type of information is
    available publicly. This type of information is the first thing an attacker will
    access. If the information discloses too much that a social engineering attack
    can easily be crafted, then the organization needs to address that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity verification**: Organizations need to look at multiple ways of identifying
    a user. For example, when users request a password reset via a self-service portal,
    there should be some type of two-factor authentication in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technology**: Many organizations are moving their email to cloud services
    such as Office 365\. Within Office 365, there is a wealth of security mechanisms
    that can be enabled to protect against sophisticated phishing attacks. Most of
    the time, organizations are not fully aware of the defenses that exist, or they
    may not have tweaked them correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering can be very dangerous to an organization. It all boils down
    to the amount of information available that can be used against an organization.
    If social engineering was an attack vector in your penetration test, ensure that
    you disclose exactly how much information you had access to in order to successfully
    launch the attack. This will help the organization to know of their weaknesses
    and address them.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities and OS hardening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is highly unlikely that software will ever be bug-free, and so vulnerabilities
    will always exist. This is evident in large-scale software such as operating systems.
    Operating systems are complex, with many components that work together. It takes
    just one flaw in one component to enable the exploitation of a system.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations that build software usually follow a **Software Development Life
    Cycle **(**SDLC**). It is a framework that defines detailed steps on how to develop,
    maintain, and replace software. Security is now being encompassed into software
    life cycles so that secure software can be built. This dramatically reduces the
    amount of errors that are found within the code, which can lead to vulnerabilities,
    but this does not remove the risk of coding errors completely.
  prefs: []
  type: TYPE_NORMAL
- en: This is where patch management comes into play. Having a proper patch management
    process in place that's adhered to will dramatically reduce the amount of vulnerabilities
    that exist in relation to software used by the organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Operating system hardening is another good way of ensuring that unsecure protocols
    that are known to be vulnerable are not exploited. For example, flaws with SMBv1
    are known and easily exploitable. The **Center for Internet Security** (**CIS**)
    maintains a great repository of benchmarks and discusses how to harden various
    systems. The CIS benchmarks can be found here: [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft maintains security baselines which apply to their suite of products.
    These are exceptional at enabling specific security features within their products.
    These baselines can be found here: [https://blogs.technet.microsoft.com/secguide/](https://blogs.technet.microsoft.com/secguide/).'
  prefs: []
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Password-based attacks are the simplest and oldest form of attacks that are
    still used today. Today, organizations have realized the value of having strong
    passwords, but it comes down to usability. For example, it's easy to enforce a
    12-character password—but how will end users react to that? Chances are they will
    use common passwords such as `January@1234`, and increment it by months, or maybe
    they will have a really secure password and end up writing it down or storing
    it somewhere. Another pitfall with passwords is that people tend to reuse them.
    Their domain password might be the same one that's used on Facebook, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Securing passwords would entail using more than just passwords for authentication.
    Multi-factor authentication is a must in this day and age. Leveraging additional
    authentication methods such as a token, SMS, or a phone call adds that extra layer
    of protection. Coupling multi-factor authentication with password best practices
    such as enforcing complexity, a higher password length, and enforcing a banned
    password list will increase the security posture.
  prefs: []
  type: TYPE_NORMAL
- en: Web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications are prime targets for attackers since these are public facing.
    They can serve as an entry point into a network, especially if the web application
    server is not segmented properly from a network layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Open Web Application Security Project** (**OWASP**) maintains a list
    called the **OWASP Top 10**. This top 10 list discusses the 10 most critical web
    application security risks and mitigations of them. It goes into detail explaining
    the attack, and its impact and provides references with attack scenarios. The
    OWASP Top 10 can be found here: [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good resource to leverage when looking for web application attack prevention
    is the OWASP attack category, which can be found here: [https://www.owasp.org/index.php/Category:Attack](https://www.owasp.org/index.php/Category:Attack).'
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation and lateral movement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lateral movement is one of the most common attacks that's used within networks.
    The ability to crab walk an environment provides the attacker with a vast landscape
    that can be browsed to detect high privilege accounts.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most easiest accounts to use for lateral movement is the **local
    administrator** account. Generally, this account shares the same name and password,
    which means that if you compromise it on one computer, it can be easily reused
    on another. Remediating this would entail enforcing random local administrator
    account passwords within the network. In Windows environments, this can be done
    using **Local Administrator Password Solution** (**LAPS**). More information on
    this can be found here: [https://www.microsoft.com/en-us/download/details.aspx?id=46899](https://www.microsoft.com/en-us/download/details.aspx?id=46899).
  prefs: []
  type: TYPE_NORMAL
- en: Good credential hygiene is key to preventing privilege escalation. It entails
    not exposing high privilege accounts to lower trusted systems, for example, restricting
    the use of a **domain administrator **account on a workstation. If the workstation
    is compromised, the hash of the **domain administrator **account can be dumped
    and it's game over. Enforcing the principal of least privilege should be a norm
    within any environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have gained a good understanding of what is included in
    a penetration test. You now have the ability to create a report which is targeted
    at executive and technical staff. You have hands-on experience with using a reporting
    tool, Dradis, for documenting your findings in a penetration test. You have gained
    insight into the various security measures that a client can deploy to increase
    their security posture.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter ([Chapter 14](472713ef-5182-4c3b-a871-38b6aba339c4.xhtml)*,
    Where Do I Go from Here?*), we will cover how you can grow your career in the
    penetration testing field by looking at certifications, online resources for training,
    and practicing your skills.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the importance of a penetration test report?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the Executive and Technical sections of the report?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool can be used to help you to build a report?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a good source for finding information related to web application attacks
    and prevention?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Protecting against privilege escalation and lateral movement involves doing
    what?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
