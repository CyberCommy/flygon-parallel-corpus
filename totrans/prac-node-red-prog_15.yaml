- en: '*Chapter 12*: Developing a Chatbot Application Using Slack and IBM Watson'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a chatbot application, using Node-RED. For the
    chatbot application UI, we'll use Slack, and we'll use IBM Watson AI for skills.
    After completing the tutorials in this chapter, you will learn how to combine
    Node-RED with an external API to create an application. This will help you create
    extensible web applications with Node-RED in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Slack workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Watson Assistant API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling a connection to Slack from Node-RED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a chatbot application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have mastered how to make a Slack chatbot
    application with Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To progress in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'An IBM Cloud account: [https://cloud.ibm.com/](https://cloud.ibm.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used in this chapter can be found in `Chapter12` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Slack workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This hands-on tutorial uses **Slack** as the UI for your chatbot application.
    Node-RED is responsible for controlling the exchange of messages in the background
    of the chatbot application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The overall view of this chatbot application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Application overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.1_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Application overview
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, create a Slack workspace for use in this application with the
    following steps. If you already have a Slack workspace, you can use your existing
    one. In that case, skip the following steps and create a channel called `learning-node-red`
    in your workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: Access [https://slack.com/create](https://slack.com/create), enter your email
    address, and click the **Next** button:![Figure 12.2 – Enter your email address
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.2_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – Enter your email address
  prefs: []
  type: TYPE_NORMAL
- en: Check the six-digit verification code from the email you received from Slack:![Figure
    12.3 – Check the six-digit code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.3_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – Check the six-digit code
  prefs: []
  type: TYPE_NORMAL
- en: Enter the verification code in the window that is displayed after you click
    **Next** with your email address. After entering your verification code, you will
    be redirected to the next window automatically:![Figure 12.4 – Enter the verification
    code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.4_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – Enter the verification code
  prefs: []
  type: TYPE_NORMAL
- en: Give your workspace a name and click the **Next** button:![Figure 12.5 – Give
    your workspace a name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.5_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – Give your workspace a name
  prefs: []
  type: TYPE_NORMAL
- en: Create a channel in your workspace. You can use the `Learning Node-RED`:![Figure
    12.6 – Your workspace name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.6_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – Your workspace name
  prefs: []
  type: TYPE_NORMAL
- en: Click **skip for now** without adding teammates:![Figure 12.7 – No teammates
    are needed for this tutorial
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.7_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.7 – No teammates are needed for this tutorial
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **See Your Channel in Slack** to open the workspace you created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Click See Your Channel in Slack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.8_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.8 – Click See Your Channel in Slack
  prefs: []
  type: TYPE_NORMAL
- en: 'You have created the workspace for this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – You have created the workspace'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.9_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.9 – You have created the workspace
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The channel on which the chatbot resides should preferably be a channel that
    only you participate in unless you have a public purpose. This is because the
    chatbot's movement can be noisy for participants who do not like (or are not interested
    in) the chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you've got your workspace and channels ready to run your chatbot
    in Slack. Next, we will create a mechanism that will be the engine of the chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Watson Assistant API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This hands-on tutorial uses IBM's **Watson Assistant API** as the engine for
    chatbots. Watson Assistant can use natural language analysis to interpret the
    intent and purpose of natural conversation and return an appropriate answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Details about Watson Assistant can be found at the following URL: [https://www.ibm.com/cloud/watson-assistant-2/](https://www.ibm.com/cloud/watson-assistant-2/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Watson Assistant API, you need to create an instance of the Watson
    Assistant API on IBM Cloud. Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your IBM Cloud dashboard, and search `Assistant` in the **Catalog**.
    Click the **Assistant** tile on the results of your search:![Figure 12.10 – Search
    for Watson Assistant
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.10_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.10 – Search for Watson Assistant
  prefs: []
  type: TYPE_NORMAL
- en: Create a Watson Assistant API service. Select a **region** for the Watson Assistant
    service data center. Dallas is stable so here we selected **Dallas**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Lite** for the pricing plan. Other items such as service name and resource
    group can be left at their default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button:![Figure 12.11 – Create a Watson Assistant service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.11_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.11 – Create a Watson Assistant service
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Watson Assistant tool. Click the **Launch Watson Assistant** button
    to open the Watson Assistant console:![Figure 12.12 – Launch the Watson Assistant
    console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.12_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.12 – Launch the Watson Assistant console
  prefs: []
  type: TYPE_NORMAL
- en: Create a **Skill** in your **Watson Assistant** service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be moved to the **My first skill** screen automatically when you open
    the Watson Assistant console for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, you would create a Watson Assistant skill here, but this hands-on
    tutorial will focus on Node-RED rather than how to use Watson Assistant. Therefore,
    a skill in Watson Assistant is created by importing the definition file prepared
    in advance.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to create your own skill, that''s fine. In that case, the official
    Watson Assistant documentation will help: [https://cloud.ibm.com/apidocs/assistant/assistant-v2](https://cloud.ibm.com/apidocs/assistant/assistant-v2).'
  prefs: []
  type: TYPE_NORMAL
- en: Click `tell me a joke`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an assistant for this frame, set the assistant's name to `Respond Joke
    Phrase`, and click the **Create assistant** button:![Figure 12.14 – Create assistant
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.14_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.14 – Create assistant
  prefs: []
  type: TYPE_NORMAL
- en: Import **Dialog**. When your assistant is created, the settings screen of the
    created assistant is displayed. In the **Dialog** area on that settings screen,
    click the **Add dialog skill** button:![Figure 12.15 – Add dialog skill
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.15_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.15 – Add dialog skill
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Import skill** tab and select the JSON file for the skill you want
    to import. Download this JSON file at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter12/skill-Respond-Joke-Phrase.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter12/skill-Respond-Joke-Phrase.json).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Import** button when the JSON file is selected:![Figure 12.16 –
    Import the dialog skill file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.16_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.16 – Import the dialog skill file
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see **Respond Joke Phrase** in the **Dialog** area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.17 – Dialog skill imported'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.17_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.17 – Dialog skill imported
  prefs: []
  type: TYPE_NORMAL
- en: 'This completes the skill import. You can return simple greetings and joke phrases,
    so try out the conversation with the **Try it** feature provided in the Watson
    Assistant console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.18 – Try it'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.18_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.18 – Try it
  prefs: []
  type: TYPE_NORMAL
- en: 'The chat window will be opened when you click the **Try it** button. Try typing
    the conversation that follows in the chat window:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"Hello`*"; "*`Hi";` `"Tell` `me` `jokes";` `"Do` `you` `know` `any` `jokes?"`*;
    and so on…*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.19 – Test conversation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.19_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.19 – Test conversation
  prefs: []
  type: TYPE_NORMAL
- en: If you don't get a good answer, try another phrase. Watson Natural Language
    Understanding divides conversations spoken in Watson Assistant's **Try it out**
    window into classes of intents or entities. If a conversation is not divided into
    the desired classes, you can train the Assistant API in the **Try it out** window.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've created an auto-answer conversation using Watson Assistant,
    there's one more thing to do, that is, confirmation of the Skill ID. This is the
    ID you will need later to operate Watson Assistant as an API from Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the Skill ID from the **Skills** screen by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **View API Details** under the **Skills** menu at the top right of the
    **Skill** tile you created:![Figure 12.20 – Access the View API Details menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.20_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.20 – Access the View API Details menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a note of the **Skill ID** displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.21 – Check and note the Skill ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.21_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.21 – Check and note the Skill ID
  prefs: []
  type: TYPE_NORMAL
- en: We have now created a chatbot service that automatically responds to chats.
    Next, let's integrate this with the Slack user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the connection to Slack from Node-RED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let's move on to the preparation of a Slack node on your Node-RED environment.
    Launch the Node-RED flow editor created on IBM Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: What you do in this step is to install a node to connect to Slack in your Node-RED
    environment. The method is easy. All you have to do is find and install the node
    from the **Manage palette** window, which you've done several times in other chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: I believe that the Node-RED flow editor on your IBM Cloud has already been created
    as a service (as a Node.js application), but if you haven't done so already, refer
    to [*Chapter 6*](B16353_06_ePub_AM.xhtml#_idTextAnchor073)*, Implementing Node-RED
    in the Cloud*, to create a Node-RED service on IBM Cloud, before proceeding with
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You need to install the **node-red-contrib-slack** node to use Slack from Node-RED,
    so click **Manage palette**:![Figure 12.22 – Open the Manage palette window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.22_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.22 – Open the Manage palette window
  prefs: []
  type: TYPE_NORMAL
- en: Search the `node-red-contrib-slack` node and click the **Install** button:![Figure
    12.23 – Install the node-red-contrib-slack node
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.23_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.23 – Install the node-red-contrib-slack node
  prefs: []
  type: TYPE_NORMAL
- en: You will see four nodes that belong to **node-red-contrib-slack** on your palette.
    You have to prepare Slack nodes for building this sample application:![Figure
    12.24 – Slack nodes will appear on your palette
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.24_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.24 – Slack nodes will appear on your palette
  prefs: []
  type: TYPE_NORMAL
- en: Make a bot in your Slack workspace by accessing the **Slack App Directory**
    via **Settings & administration** | **Manage apps** on your Slack application
    (desktop or web):![Figure 12.25 – Select Manage apps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.25_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.25 – Select Manage apps
  prefs: []
  type: TYPE_NORMAL
- en: After moving to the Slack App Directory website, click the `https://<your workspace>.slack.com/apps`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following URL is just an example: [https://packtnode-red.slack.com/apps](https://packtnode-red.slack.com/apps).'
  prefs: []
  type: TYPE_NORMAL
- en: This URL is generated automatically depending on each workspace name on Slack.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Get Essential Apps** button to move to the application search window:![Figure
    12.27 – Click the Get Essential Apps button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.27_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.27 – Click the Get Essential Apps button
  prefs: []
  type: TYPE_NORMAL
- en: Search the word `bots` and click **Bots** on the results:![Figure 12.28 – Search
    for Bots and select it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.28_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.28 – Search for Bots and select it
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Add to Slack** button on the **Bots** app screen:![Figure 12.29
    – Add the Bots app to your workspace
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.29_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.29 – Add the Bots app to your workspace
  prefs: []
  type: TYPE_NORMAL
- en: Set the `packt-bot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add bot integration** button:![Figure 12.30 – Set your bot name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.30_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.30 – Set your bot name
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, the API token for using the bot will be generated and displayed.
    Make a note of this so that you do not forget it. This API token is used when
    creating a flow with Node-RED:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when sharing bot user tokens with applications. Do not publish bot
    user tokens in public code repositories. This is because anyone can access the
    bot with this API token.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.31 – Confirm your API token'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.31_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.31 – Confirm your API token
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Save Integration** button to finish the bot app integration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.32 – Bot app integration is finished'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.32_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.32 – Bot app integration is finished
  prefs: []
  type: TYPE_NORMAL
- en: Now you are ready. Let's move on to the flow creation procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Building a chatbot application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you've created a chatbot engine in Watson Assistant, created a Slack
    workspace, and integrated the Bot app, which you can use in that Slack workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will combine these services with Node-RED and create a mechanism with
    Node-RED so that the bot will answer when talking in Slack's workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a flow:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect Watson Assistant to Node-RED. Access your Node-RED service dashboard
    via **Resource list** on IBM Cloud. Select the **Connections** tab and click the
    **Create connection** button:![Figure 12.33 – Create a new connection on Node-RED
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.33_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.33 – Create a new connection on Node-RED
  prefs: []
  type: TYPE_NORMAL
- en: Select the Watson Assistant service you created and click the **Next** button:![Figure
    12.34 – Create a new connection on Node-RED
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.34_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.34 – Create a new connection on Node-RED
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Connect** button with the default options to finish the connection
    setup. Doing this operation will restart the Node-RED application, which will
    take a few minutes to complete:![Figure 12.35 – Finish creating the new connection
    on Node-RED
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.35_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.35 – Finish creating the new connection on Node-RED
  prefs: []
  type: TYPE_NORMAL
- en: Make the flow to handle conversations on Slack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You already have Slack nodes and Watson nodes that are available to use for
    this hands-on tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Place a **slack-rtm-in** node, two **function** nodes, an **assistant** node,
    **slack-rtm-out**, and a **debug** node. After placing them, wire them sequentially
    as in the following figure:![Figure 12.36 – Place the nodes and wire them
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.36_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.36 – Place the nodes and wire them
  prefs: []
  type: TYPE_NORMAL
- en: Set the parameters for each node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow this procedure to set the parameters on each node. For the nodes that
    need to be coded, code them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **slack-rtm-in** node:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a) Click the edit button (pencil icon) to open the **Properties** panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.37 – Open the Properties panel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.38_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.37 – Open the Properties panel
  prefs: []
  type: TYPE_NORMAL
- en: 'b) Enter the `packt-bot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.38 – Set the properties of the configuration to connect the Slack
    app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.39_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.38 – Set the properties of the configuration to connect the Slack
    app
  prefs: []
  type: TYPE_NORMAL
- en: When you go back to the main panel of this node, you will see the configuration
    has been set in the **Slack Client** property.
  prefs: []
  type: TYPE_NORMAL
- en: 'c) Click the **Done** button to close this setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.39 – Finish setting the properties of the slack-rtm-in node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.39_B163531.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.39 – Finish setting the properties of the slack-rtm-in node
  prefs: []
  type: TYPE_NORMAL
- en: 'The **function** node (first one):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a) In the first **function** node, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also refer to the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.40 – First function node coding'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.40_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.40 – First function node coding
  prefs: []
  type: TYPE_NORMAL
- en: In this function node, the message that is posted on Slack is taken out from
    the JSON data sent from Slack and put in `msg.payload` again.
  prefs: []
  type: TYPE_NORMAL
- en: Another important process is to store the channel information sent from Slack
    in the Global variable in Node-RED. The channel information stored here will be
    used later when sending a response message back to Slack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **assistant** node:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous step, you connected Watson Assistant to Node-RED. This means
    that you can call the Assistant API from Node-RED without using an API key or
    secret.
  prefs: []
  type: TYPE_NORMAL
- en: When I double-click the **assistant** node to open the settings panel, I don't
    see any properties such as API keys. If you see them in your settings panel, it
    means that the Watson Assistant and Node-RED connection process is failing. In
    that case, perform the connection process again.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is only one property to set here. Set the Watson Assistant Skill ID you
    wrote down earlier as the **Workspace ID** property in the **assistant** node''s
    settings panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.41 – Set the Skill ID as the Workspace ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.41_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.41 – Set the Skill ID as the Workspace ID
  prefs: []
  type: TYPE_NORMAL
- en: This completes the settings for the **assistant** node. Save your settings and
    close the settings panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **function** node (the second one):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the first **function** node, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also refer to the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.42 – Second function node coding'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.42_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.42 – Second function node coding
  prefs: []
  type: TYPE_NORMAL
- en: The second function node stores the autoresponder message returned from Watson
    Assistant in `msg.payload.text`, and gets the Slack channel information saved
    in the first function node and stores it in `msg.payload.channel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `packt-bot` you created is already placed in this node property. If it
    is not set yet, please select it from the drop-down list manually. Once you click
    on **Done**, the settings will be complete:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.43 – Check the property settings of the slack-rtm-out node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.43_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.43 – Check the property settings of the slack-rtm-out node
  prefs: []
  type: TYPE_NORMAL
- en: 'The **debug** node:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The debug node here simply outputs the log. No settings are required.
  prefs: []
  type: TYPE_NORMAL
- en: Check the bot application on Slack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An auto-answer chatbot has been created using Slack. Let's try the conversation.
  prefs: []
  type: TYPE_NORMAL
- en: On the channel you created in your Slack workspace, add the bot app you integrated
    and click the **Add an app** link on the channel:![Figure 12.44 – Click the Add
    an app link
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.44_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.44 – Click the Add an app link
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Add** button to add the bot app to your channel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.45 – Add the bot app you created'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.45_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.45 – Add the bot app you created
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's actually have a conversation. Mention and talk to your bot (`packt-bot`
    in the example) on the channel where you added this bot app. Since the only conversations
    we are learning with Watson Assistant this time are greetings and listening to
    jokes, we will send a message from Slack that seems to be related to either of
    these.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s say Hello. You will see a greeting kind of response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.46 – Exchanging greetings with the chatbot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.46_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.46 – Exchanging greetings with the chatbot
  prefs: []
  type: TYPE_NORMAL
- en: 'Then send a message like `Please` `tell` `me` `a` `joke`. It randomly responds
    with a bot-selected joke as a reply:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.47 – The chatbot answers some jokes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.47_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.47 – The chatbot answers some jokes
  prefs: []
  type: TYPE_NORMAL
- en: Great work! You finally made the chatbot application with Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want the flow configuration file to make this flow in your Node-RED
    environment, you can get it here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter12/slack-watson-chatbot-flows.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter12/slack-watson-chatbot-flows.json).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we experienced how to make a chatbot application with Slack,
    Watson, and Node-RED. This time, we used Slack as a chat platform, but you can
    use any chat platforms that have APIs, such as LINE, Microsoft Teams, and so on,
    instead of Slack.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is also very helpful for creating any applications that are not
    IoT-based. Node-RED can develop various applications by linking with any Web API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, let's develop our own node. Of course, it can be used in
    any environment. Developing your own node with Node-RED means developing a new
    node that cannot be done with the existing nodes. This is surely the first step
    for advanced users of Node-RED.
  prefs: []
  type: TYPE_NORMAL
