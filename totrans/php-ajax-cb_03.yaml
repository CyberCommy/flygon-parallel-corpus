- en: Chapter 3. Useful Tools Using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Making tool tips using Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Autocomplete from a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a tab navigation using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an image slider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating pageless pagination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading images using Lightbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Growing textarea using the jGrow plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML replacement of the select dropdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving date selection with Datepicker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag-and-drop functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ajax shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting and filtering data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding visual effects and animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need Ajax tools or plugins to get an "Ajaxified" website. jQuery plugins
    are usually a great timesaver as they're mostly Plug-and-Play type of scripts.
    jQuery's selector-based approach makes it easier to convert normal web pages into
    "Ajaxified" web pages in an unobtrusive manner. In this chapter, we'll see some
    productive jQuery plugins and their usage.
  prefs: []
  type: TYPE_NORMAL
- en: Making tool tips using Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web browsers render the contents of the `title` attributes in a **tool tip**.
    There are some problems with the browsers'' tool tips such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Their appearance isn't consistent across browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser tool tips can't be styled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To solve these aesthetic UI issues, we have a number of jQuery plugins. In this
    recipe, we'll look into using the BeautyTips plugin to get tool tips.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll require the BeautyTips jQuery plugin from [http://plugins.jquery.com/project/bt](http://plugins.jquery.com/project/bt)
    along with jQuery Core. Optionally, we may require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ExplorerCanvas** from [http://excanvas.sourceforge.net/](http://excanvas.sourceforge.net/)
    to support the `canvas` element in Internet Explorer. Note that BeautyTips uses
    the `canvas` element for generating bubble tips.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **hoverIntent** plugin from [http://cherne.net/brian/resources/jquery.hoverIntent.html](http://cherne.net/brian/resources/jquery.hoverIntent.html),
    as it changes the hover behavior. jQuery's default `hover` event fires whenever
    a bound element is hovered upon, and that sometimes creates poor user experience—especially
    when the user unintentionally hovers over a particular element. The hoverIntent
    plugin solves this issue by adding intervals and a timeout for the hover event
    so that user's intention is clearly met. When installed, BeautyTips uses hoverIntent
    instead of hover.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **bgiframe** plugin from [http://plugins.jquery.com/project/bgiframe](http://plugins.jquery.com/project/bgiframe)
    as it fixes the IE6 z-index issue with form elements. When bgiframe is available
    on the page, BeautyTips will automatically use it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Easing** plugin when we need animation effects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making a tool tip with the BeautyTips plugin is easy as it's merely a Plug-and-Play
    setup. Let's see how help tips are made available when the user is filling up
    forms.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code makes getting the display in the preceding screenshot easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And, in the JavaScript triggering, it''s simpler to use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BeautyTips uses the `canvas` element to draw the bubbles commonly referred to
    as tool tips, help tips, help balloons, and talk bubbles. The main idea behind
    using `canvas` is to achieve bubbles of any shape. BeautyTips has inbuilt style
    support for normal bubbles, Google Maps bubbles, Facebook tool tips, and Netflix
    tool tips. It also supports custom bubble themes through CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'As noted in our example, to get tool tips on form inputs, the bubble texts
    are automatically taken from the `title` attribute of the element attached. Thus,
    it degrades gracefully and compliant with accessibility standards. In circumstances
    where we may need to show some other texts in bubble tip, we can do that by adding
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Bubble tips are usually placed on the right side of the element. When there''s
    no space available, it automatically adjusts and detects the position. The API
    offers the ability to set the position, too, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The default trigger event is `hover`. When the hoverIntent plugin is found
    on the page, it will make use of it to improve the user experience. As mentioned
    in the preceding text, the hoverIntent plugin will set time to fire the `hover`
    event and, thereby, avoid unnecessary event triggering when the user accidentally
    moves over the element. Through the API, we can also customize the trigger event
    to something other than `hover`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify when the `trigger` event should be hidden, we have to pass a second
    parameter. The following code will trigger `bubble tip` in the `focus` event and
    hide it in the `blur` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Bubble text content can also be loaded from a remote Ajax page using the `ajaxPath`
    attribute as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The jQuery ecosystem has lot of plugins available to get tool tips easily.
    Features of BeautyTips are usually sufficient in most scenarios. However, we may
    come across a situation where we want to get the exact (or similar) tool tips
    used in other sites. Here, we discuss few such plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tipsy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This plugin is available at [http://onehackoranother.com/projects/jquery/tipsy/](http://onehackoranother.com/projects/jquery/tipsy/)
    . It focuses on getting Facebook-like mini-information tool tips easily.
  prefs: []
  type: TYPE_NORMAL
- en: '**BubbleTip**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This plugin, found at [http://code.google.com/p/bubbletip/](http://code.google.com/p/bubbletip/),
    helps us to get shadowed and animated tool tips.
  prefs: []
  type: TYPE_NORMAL
- en: '**jGrowl**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Mac OS X, the Growl framework lets developers raise an alert message. This
    jGrowl plugin, found at [http://stanlemon.net/projects/jgrowl.html](http://stanlemon.net/projects/jgrowl.html),
    imitates the same alert functionality. We can create nifty tool tips/alert pop-ups
    on the browser, using this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '**qTip**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is yet another tool tip plugin, found at [http://craigsworks.com/projects/qtip2./](http://craigsworks.com/projects/qtip2./).
    It has lots of options and also provides visually pleasing tool tips.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Autocomplete from a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the time, users are sick of filling up forms. However, from the website''s
    point of view, user input is very important for data mining and better service.
    When the end user has the ability to fill up forms quickly, or fill up forms easily,
    it will help both end users and the website owners. Autocomplete is one such attempt
    to help end users. Overall, we have two types of Autocomplete designs:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the browser UI, by allowing the browser to remember certain form inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within websites that employ the Autocomplete technique to quickly fill up forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to integrate the jQuery UI Autocomplete plugin
    in a PHP script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the jQuery UI from [http://jqueryui.com/](http://jqueryui.com/),
    with the Autocomplete component. Note that the jQuery UI download page, [http://jqueryui.com/download](http://jqueryui.com/download),
    has a wizard-like interface to select the necessary files easily.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the database, we'll need to have a table with the schema `jslibs (id,
    name)`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we'll start the Autocomplete integration without a database, and then
    we'll add database support. Integrating the jQuery UI Autocomplete widget is straightforward.
    Let's improve the UI of a polling application with Autocomplete support. Note
    that the Autocomplete pattern is usually preferred in a scenario where the input
    can be anything within a predetermined set, or from users.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the JavaScript code, it's as simple as hooking the input element through
    its `id:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have hardcoded the Autocomplete values through the `source` option.
    When the size of the `values` set is high, we have to remotely provide the values
    over server script. So, let''s add remote value functionality to the preceding
    setup by creating `values.php`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, hook `values.php` in the Autocomplete call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `source` parameter holds the values that are to be autocompleted. We can
    set them directly with an object set. The other option is to set them through
    a remote Ajax request. Since the server script pulls values dynamically, it will
    be a little inefficient when the data is not cached. Therefore, we have formed
    a `cache` buffer object for every term that's been sent to the server. This improves
    the performance when the user is hitting backspace or re-enters the previous query.
    In such cases, the requests will immediately be served from the locally saved
    data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is relevant to note that the jQuery UI Autocomplete plugin has numerous
    features, for example, the ability to autocomplete multiple values (say while
    entering tags in `delicious.com)`, the ability to fix the number of inputs, and
    so on. A few interesting topics and plugins are described next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sphinx:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server-side script search function isn't efficient as it uses the `LIKE`
    operator, which would require a full table scan. A better option is to use full
    text search using Sphinx. More about Sphinx can be found at [http://sphinxsearch.com/](http://sphinxsearch.com/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**Geocoded Autocomplete:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is an interesting jQuery plugin to autocomplete locality addresses using
    the Google Maps API. When integrated, it makes it easier for users to enter their
    address. It is available at [https://github.com/lorenzsell/Geocoded-Autocomplete](https://github.com/lorenzsell/Geocoded-Autocomplete)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Building a tab navigation using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any site is incomplete without navigation links. Tabs are a good user interface
    approach to bring navigation to the site. Navigation links can easily be designed
    to look like tabs, through CSS. There are many tab implementations in jQuery.
    In this recipe, we'll look into how to integrate the jQuery UI Tabs plugin easily.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the jQuery UI from [http://jqueryui.com/](http://jqueryui.com/),
    with the Tabs component.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **jQuery UI Tabs** plugin makes use of accessible markup standards. As soon
    as we use predefined HTML markup, and hook it to **jQuery UI Tabs** with a selector,
    we're done!
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And, in the JavaScript call, we simply bind it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**jQuery UI Tabs** markup has navigation links defined in an unordered list
    within the `tabs` container. The tab contents are placed next to the navigation
    links. Mapping from the navigation link to the tab container is done through the
    `id` of the containers.'
  prefs: []
  type: TYPE_NORMAL
- en: The theme of the tab has been applied from `jquery.ui.all.css` by applying the
    CSS selectors through JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the following screenshot, the markup provides graceful degradation.
    When JavaScript is not available for some reason, the navigation still works,
    letting the link jump to the container.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/3081_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **jQuery UI Tabs** plugin offers other nifty features too, such as loading
    Ajax content, the ability to get the tab displayed at the bottom, the ability
    to have sortable tabs through jQuery UI Sortable, and so on. Let''s see how to
    achieve these common features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Remote Ajax Tabs:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting remote links to load in tabs is easy. jQuery UI Tabs has inbuilt support
    for that. So, it is enough to change the HTML markup alone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, note that we don't have to add any container `div` element for remote
    link loading.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sortable Tabs:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firefox browser''s tabs are **sortable** —they can be dragged-and-dropped to
    change the order. **jQuery UI Tabs** are not sortable by default, but that ability
    can be added by using the `sortable` UI plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that the tabs' navigation links section found in an unordered list will
    be added with the `ui-tabs-nav` class dynamically when the `tabs()` call has been
    made and the unordered list's `ul` element has been hooked with the `sortable()`
    call.
  prefs: []
  type: TYPE_NORMAL
- en: '**Styling Tabs:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Styling tabs to change the appearance is easy. It can be done in the following
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: An online theming tool called **ThemeRoller**, found at [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually tweaking the styles found in CSS declarations starting with `ui-tabs-`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The Building SEO-friendly Ajax websites* recipe in [Chapter 7](ch07.html "Chapter 7. Implementing
    Best Practices to Build Ajax Websites"),*Implementing Best Practices to Build
    Ajax Websites*'
  prefs: []
  type: TYPE_NORMAL
- en: Rotating content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scrolling content with effects in the iPhone and Mac OS is very attractive.
    In Web 2.0 sites, too, we sometimes require to fly or scroll the contents. That
    content rotation is usually needed for news tickers, announcement scrollers, stylish
    effects to present content like slideshows, and so on. The jQuery ecosystem has
    lot of plugins for that purpose. However, the `jQuery.scrollTo` plugin is relatively
    simple, provides lot of effects, and can therefore effectively be used in many
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with the jQuery core library, we'll require the `jQuery.scrollTo` plugin
    from [http://plugins.jquery.com/project/ScrollTo](http://plugins.jquery.com/project/ScrollTo).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we'll see how to scroll the content of the `div` container dynamically,
    using JavaScript. Initially, the HTML markup is straightforward, with a `div`
    container and links to trigger scroll down or up events.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In JavaScript code, the trigger link `click` events are attached to the `scrollTo()`
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Width, height, and overflow properties are set through CSS, to get scrollbars
    on the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`scrollTo()` is a single method that takes variable parameters to control the
    scrolling effect. In the preceding example, the `content` container has been set
    to a fixed `width` and `height`, through CSS. To get the scrollbar, we have set
    the `overflow` property with the `auto` value. Therefore, some of the content
    gets hidden when the page is loaded. To scroll down, we have used `$(''#content'').scrollTo(800,
    ''slow'')`;.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, `800` is the offset value to which the content should scroll. Animation
    speed is set to `slow`; without this parameter and value, the content will scroll
    instantly. Similarly, to scroll up or to reset the position of the content, we
    have used `$('#content').scrollTo(0, 'slow')`;.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first parameter of `scrollTo()` accepts the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Percentage value:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, if we call $(`'#content').scrollTo('50%', 'slow'),` the content
    will scroll only halfway up. To scroll down all the way, we may also use `$('#content').scrollTo('100%',
    'slow')` instead of $('#content').scrollTo(800,'slow').
  prefs: []
  type: TYPE_NORMAL
- en: '**Selector:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is possible to scroll up to a particular selector in the content by passing
    the selector value in the first parameter, in this manner: `$(''#content'')` .scrollTo(`''#target'',''slow'').`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pixel value:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also accepts pixel values like so: $(''#content'').scrollTo(''50px'',''slow'').
    This will keep the offset value in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery object:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A jQuery object can also be passed to specify the target in the following way:
    `$(''#content'').scrollTo($(''#target''),''slow'').`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from these, there are parameters to control the axis (whether to scroll
    in the horizontal or vertical direction), margin, queue (when set to `true`, it
    will make the scrolling happen in both axes, one by one), and callback functions.
    For example, the following snippet will scroll the content to a particular target
    element and also will prompt with the alert box once scrolling is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`scrollTo()` is a generic plugin. It''s extended with a few plugins for ease
    of use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery.SerialScroll:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This plugin is available at [http://flesler.blogspot.com/2008/02/jqueryserialscroll.html.](http://flesler.blogspot.com/2008/02/jqueryserialscroll.html.)
    It uses the scrollTo plugin and can be used to get news tickers or easy horizontal
    and vertical scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery.LocalScroll:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is available at [http://flesler.blogspot.com/2007/10/jquerylocalscroll-10.html](http://flesler.blogspot.com/2007/10/jquerylocalscroll-10.html).
    It improves the local scrolling of anchor links with animation. For example, the
    following JavaScript code will make all local links scroll smoothly with animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, local links like this will animate when jumping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating an image slider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Displaying images in a page as photo albums, features, screenshots, and so on
    are a common requirement in most websites. Displaying images in a slider with
    some effects will spice it up and would make the website "Ajaxified". To provide
    such effects and have a better finish, there are lot of jQuery plugins. In this
    recipe, we'll see how to display an image slider using the jCarousel plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the jCarousel plugin from [http://sorgalla.com/projects/jcarousel/](http://sorgalla.com/projects/jcarousel/),
    along with the jQuery core library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is enough to use the normal HTML markup—images in an unordered list—to get
    a photo listing. In order to hook the jCarousel plugin to the unordered list,
    we have set the `id`. To set the theme, we have set class to `jcarousel-skin-ie7`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we attach jCarousel to the unordered list, through the selector, as shown
    in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This brings the wonderful **Image slider**, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we have used simple and accessible HTML markup to display images—each
    image is wrapped inside an unordered list. We have hooked the jCarousel to the
    unordered list through its `id` to get a nifty image slider.
  prefs: []
  type: TYPE_NORMAL
- en: 'jCarousel is bundled with two CSS skins:'
  prefs: []
  type: TYPE_NORMAL
- en: Tango—in compliance with the **Tango Desktop Project** that makes it possible
    to get consistent graphical user experiences for all open source software—found
    at [http://tango.freedesktop.org/](http://tango.freedesktop.org/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IE7**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jCarousel iterates every image in the unordered list and forms the sliding
    panel. It also takes care of navigating to the next and previous images. By default,
    the image slider appears in the horizontal direction. To have it appear in the
    vertical direction, we have to set it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The image slider is not circular. The next and previous buttons are disabled
    after hitting the last image in the slider. Sometimes, we may need to have a slider
    that keeps rolling in a circular manner. Getting that with jCarousel is simple
    and is done with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'jCarousel has the ability to set how many images should be scrolled for a next
    or previous sliding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In fact, we have lots of plugins and ways to get image sliders. Here are some
    alternatives to jCarousel:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lightbox:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightbox is covered in an upcoming recipe in this chapter. Some implementations
    have image sliding and slideshow options, and so we may use such versions as image
    sliders.
  prefs: []
  type: TYPE_NORMAL
- en: '**GalleryView:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GalleryView, available at [http://plugins.jquery.com/project/galleryview](http://plugins.jquery.com/project/galleryview)
    , has visually pleasing features to display an image gallery. It also has a thumbnail
    option to view available images instantly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating pageless pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the records on a page exceed certain limits, it is common to split the
    records into multiple pages and let the user access the pages through page-numbered
    links/next/previous/first/last links. Such a system is called **pagination.**
    In some Web 2.0 websites, we can find pageless pagination. It is unique; there
    is a "More" link at the bottom and, when clicked, will load content below it,
    through Ajax. This user interface is interesting, as the user doesn't have to
    click a "Previous" link to view previous pages; they're already available within
    the current page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll require the jQuery core library with a DB table in a schema similar
    to what is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We create simple pagination that works by passing the page number over the
    query string. Here, we have used database connection statements for connecting
    and selecting the database of the `users` table. In every page, we have set the
    code to load only `10` records. In this code, we have mixed **templating** with
    programming logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'For the JavaScript part, we have a simple call without any other plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This simple setup doesn't even require any plugins. In the PHP code, we have
    listed `$records_per_page` records through MySQL's `LIMIT` syntax. Furthermore,
    the code outputs the HTML without header and footer, when invoked through an Ajax
    call by sniffing `HTTP_X_REQUESTED_WITH`. For brevity, we have used basic syntax
    for templating. In JavaScript code, we have used `delegate()`. This is because
    the **Load next page** link is being dynamically loading—otherwise, we could have
    used the `click()` method. Note that `click()will` work only on the existing elements
    on a page, whereas `delegate()` will work on elements that are already on the
    page as well as those that will be created in the future. The `delegate()` method
    handles event delegation elegantly and is an easy replacement for `click()`. Apart
    from the logic of pagination and selective output for the Ajax call, use of even
    delegation to get the dynamically loaded link to respond to a `click` event (the
    core logic in JavaScript) is extremely simple—a call to `$.ajax()`. Also, note
    that our code works with page refresh, when JavaScript is not available, thus
    making it degrade gracefully.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test the pageless pagination, we may have to generate dummy data. Some programming
    frameworks have inbuilt support to generate test data. There are also online tools
    available.
  prefs: []
  type: TYPE_NORMAL
- en: '**GenerateData**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The online service GenerateData found at [http://www.generatedata.com/](http://www.generatedata.com/)
    is a very good and easy tool to generate sample test data.
  prefs: []
  type: TYPE_NORMAL
- en: Loading images using Lightbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Ajax, Lightbox is a very useful concept, where the content of a link that
    is clicked, or an image, or video is loaded in a container window without taking
    the user to a separate page. Lightbox also turns a set of images found on the
    page into a slideshow in the container window. The original Lightbox script was
    written in the Prototype framework. In jQuery, there are lots of implementations
    available. However, the ColorBox plugin takes a lead with a better user interface
    and features. In this recipe, we'll see how to use the ColorBox plugin to improve
    Lightbox.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Lightbox concept was introduced by Lokesh Dhakar. More details on this can
    be found on his website at [http://www.lokeshdhakar.com/projects/lightbox2/](http://www.lokeshdhakar.com/projects/lightbox2/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the ColorBox jQuery plugin from [http://colorpowered.com/colorbox/](http://colorpowered.com/colorbox/)
    along with the jQuery core library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ColorBox HTML markup is merely a list of image links. We have listed the image
    links through an unordered list.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to other jQuery plugins, it''s just about triggering through a selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This causes the images to load in the ColorBox overlay, as shown in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In principle, the Lightbox script iterates all hooked links and stops them
    from getting loaded with page refresh. Here, we have listed a set of image links
    in an unordered list and then attached them to the `colorbox()` call. The ColorBox
    first forms the overlay container for the images being loaded. The ColorBox dimensions
    take the following defaults and can be overridden through parameter setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'With the default options, the ColorBox doesn''t have the automatic slideshow
    feature enabled. To enable automatic slideshow, the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The ColorBox theme can easily be changed through CSS and it already comes with
    five different styles.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is common to find a number of implementations for the same functionality,
    as developers sometimes start a new project because of dissatisfaction over existing
    implementations. And, for the same reasons, we have many Lightbox implementations
    available, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lightbox Clones Matrix:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Lightbox Clones Matrix, available at [http://planetozh.com/projects/lightbox-clones/](http://planetozh.com/projects/lightbox-clones/),
    shows the comparison between various Lightbox implementations.
  prefs: []
  type: TYPE_NORMAL
- en: '**SlimBox 2:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is another Lightbox implementation. The original SlimBox implementation,
    first written in the Mootools framework, was very much appreciated for being lightweight.
    Later, in version 2, the author ported his code to jQuery—[http://www.digitalia.be/software/slimbox2](http://www.digitalia.be/software/slimbox2).
    It's 100% compliant with the original Lightbox by Lokesh Dhakar in terms of features
    and HTML markup. So, we can quickly replace the original Lightbox with it by just
    changing the JavaScript library path.
  prefs: []
  type: TYPE_NORMAL
- en: Growing textarea using the jGrow plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In web browsers, the `textarea` element's height and width are controlled through
    the `rows` and `cols` attributes or through `height` and `width` CSS properties.
    When we enter more text in the `textarea`, the upper text will move up, leaving
    a scrollbar. To improve the UI for `textarea`, some Ajax experts have made the
    `textarea` grow when more text is entered. In this recipe, we'll see how to use
    the jGrow plugin to get such a growing `textarea`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the jGrow jQuery plugin from [http://lab.berkerpeksag.com/jGrow](http://lab.berkerpeksag.com/jGrow)
    along with the jQuery core library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we have used a simple `textarea` with an `id` set, so that it can easily
    be hooked with jQuery selector.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the HTML markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Again, as usual, we have attached the plugin through the `id` value of the `textarea:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When hooked to the `textarea`, the jGrow plugin creates a `div` element above
    the text area and starts holding the input text. This makes it easier to control
    the height through CSS properties. On every `keyup` event, a new jGrow call is
    made to trigger, and thus, it increases the height whenever necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also has an option to limit the growing height, so that it won''t let it
    grow beyond the specified height:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improving the `textarea` UI will improve usability. There are similar plugins
    available in the jQuery ecosystem. One of them is **autoGrowInput**. Just like
    we have a growing `textarea`, we may, at some time, want to have a growing input
    box. In that case, we may use this plugin available at [http://stackoverflow.com/questions/931207/is-there-a-jquery-autogrow-plugin-for-text-fields](http://stackoverflow.com/questions/931207/is-there-a-jquery-autogrow-plugin-for-text-fields).
  prefs: []
  type: TYPE_NORMAL
- en: HTML replacement of the select dropdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Improving the UI of the form select dropdown is an interesting topic. For instance,
    except Internet Explorer, other web browsers support styling of each option in
    the `select` element. This is of great help, especially when we have to show country
    flag along with country name when listing countries in the **selectbox**. As direct
    styling of the `option` elements is not possible in Internet Explorer, one approach
    is to replace them with an anchored ordered/unordered list so that each list can
    be styled. In this recipe, we'll look into such HTML replacement.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the jQuery UI selectmenu plugin from [https://github.com/fnagel/jquery-ui](http://https://github.com/fnagel/jquery-ui)
    along with the jQuery UI core.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML markup to get this done is a simple form with the `select` element.
    Note that we are going to use the jQuery UI selectmenu plugin to convert the `select`
    element to an unordered list and get the styling done through CSS.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: When we attach the jQuery UI selectmenu to the `select` element, it gets replaced
    with an unordered list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, at least for now, easy styling is more likely to be possible in
    an ordered/unordered list rather than in a selectbox, especially in Internet Explorer.
    When the selectbox is attached to the plugin, it iterates over the select options
    and creates an unordered list of options. It also hides the original selectbox.
    For the rest of the effect to mimic the selectbox, all selection and highlighting
    are being handled through JavaScript over the unordered list.
  prefs: []
  type: TYPE_NORMAL
- en: As this plugin is compliant with jQuery UI, it brings the same theming power
    to this plugin. We can apply themes to it, just like other jQuery UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some peculiar cases where we'll be forced to use selectbox replacement.
    That will mostly happen when we target more browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Icons for options:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''d require this replacement when trying to put icons next to options. Some
    example cases are: including country flag icons in a countries dropdown, including
    user avatars in a users dropdown, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chosen:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This selectbox replacement plugin transforms the single selectbox UI making
    it searchable as in Autocomplete. For the multi-select selectbox, it transforms
    into delicious.com's tag input UI. It can be found at http://harvesthq.github.com/chosen/.
  prefs: []
  type: TYPE_NORMAL
- en: Improving date selection with Datepicker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Datepicker** or calendar widget is part of any Web 2.0 website. It helps
    in quickly selecting dates visually and thus avoids errors in the date when a
    user has to input it in a particular format. The jQuery UI offers a datepicker
    plugin to which themes can be applied. In this recipe, we'll see how to use or
    integrate this datepicker in any website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require the jQuery UI from [http://jqueryui.com/](http://jqueryui.com/),
    with the datepicker component.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get the datepicker widget, we create a date input field to get date of birth.
    We set the `name` and `id` attributes to `dob`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `dob` input field is triggered with a `datepicker()` call, it attaches
    the calendar widget. The calendar widget pops up when the input field is clicked
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jQuery UI datepicker plugin creates a dynamic calendar widget when attached
    over any `input` element. In its default behavior, it will pop up when the attached
    input textbox is triggered. It improves the usability of selecting dates considerably.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get an inline calendar by hooking it to a `div` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s also possible to have more months shown in the calendar by setting the
    `numberOfMonths` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can also restrict the date to a particular range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding case, the date that can be selected will range from "2 days
    from current date" to "1 month 15 days from current date".
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the date format uses the American format of mm/dd/yy. It can be
    changed to another format with the `dateFormat` parameter, say to ISO format,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have very nice jQuery plugins to choose dates. Here are some useful datepicker
    plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous calendar:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This plugin lists the calendar in a continuous format, making it easier to select
    dates across months. This is available at [http://old.laughingpanda.org/mediawiki/index.php/Continuous_calendar](http://old.laughingpanda.org/mediawiki/index.php/Continuous_calendar).
  prefs: []
  type: TYPE_NORMAL
- en: '**wdCalendar:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This plugin isn't for selecting dates, but it's a full-blown calendar application
    similar to Google Calendar. It's available with PHP server scripts at [http://www.web-delicious.com/jquery-plugins/](http://www.web-delicious.com/jquery-plugins/).
  prefs: []
  type: TYPE_NORMAL
- en: Drag-and-drop functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drag-and-drop functionality is a major feature of the modern Web. It is the
    ability to move objects around on the website. In this task, we will learn how
    to build a nice drag-and-drop layout using `jQuery.sortable()`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the beginning, we will need to download the jQuery library with jQuery UI
    and include them before the closing the`</body>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we will use a random image downloaded from the internet (with
    preferred dimensions of 200x80 pixels).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the jQuery library with jQuery UI is ready, we can start with HTML. We
    will build four main `div` elements: `top, sidebar, sidebar2`, and `mainContent`.
    Each of them includes a `sortable` list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the CSS styles need to be applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: When the HTML and CSS are ready, we can see the following result:![How to do
    it...](graphics/3081_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we have nice static layout. Let''s start with JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: After applying this simple function, our result will look like the following:![How
    to do it...](graphics/3081_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main magic happens inside the `sortable` function. We are binding the sortable
    functionality on all lists in the document, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$(''#sidebar ul, #top ul, #sidebar2 ul, #mainContent ul'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We are connecting them with each other in order to be able to move an item
    from one list to the other, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connectWith: ''.sortable''`,'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the object is close enough to one of the sortable lists, we can see the
    placeholder (green division with dashed border) with the help of `placeholder:
    ''placeholder''`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moving the objects around the website is really nice, but it is not so useful
    without the ability to save the current location. Now, we will learn how to store
    this information in cookies and how to read them when it is needed. We will use
    the jQuery Cookie plugin from [http://plugins.jquery.com/project/Cookie](http://plugins.jquery.com/project/Cookie),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also use the possibility to save the layout information on the server
    side using Ajax, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Saving items:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can create a function, `getItems()`, to find every unsorted list in the
    document, save its ID as a groupName, and find all items related to this group.
    The result will be the string `items` in the form `"group1=item1,item2&group2=item3,item4,..."`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we know how to get all the items, we''ll want to save them in cookies.
    For this purpose, we will use the `update` method in a `sortable` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `ajax/saveLayout.php` file could look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '**Loading Items:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading items is the same as reversing the function `getItems`. First of all,
    we need to read `items` from the cookies, which are stored there as a string.
    We will split this string by `'&'` into groups, by `'='` into the group name and
    array of items, and by `','` into separated items. When we have the list of items,
    we will split them into lists, by group name. If the items are not stored in cookies,
    we will load them from the server (`ajax/getLayout.php`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ajax/getLayout.php` example file will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The `renderItems()` function can be triggered by the `click` event on `renderButton:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Ajax shopping cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shopping carts play an important role in e-commerce websites. In this task,
    we will learn how to build a shopping cart with Ajax functionality to provide
    the best user experience. The result of this task will look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ajax shopping cart](graphics/3081_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we need for this task is the latest jQuery library and a sample `.php` file,
    `ajax/shopping-cart.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script will provide basic server functionality to retrieve and receive
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to include our CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'And the last, but most important—JavaScript functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Ajax shopping cart functionality has two main parts. The first part handles
    the product list. Every product item has a `Buy` button where we can bind the
    `click` event with the functionality to add a product to the shopping cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The second part is the shopping cart itself. By default, it includes the `incart-product-template`.
    This template is used to build a product based on a selected product from the
    product list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In e-commerce websites, we need to be very careful and protect our data as much
    as possible. One of the attacks we can prepare for is **Cross-Site Request Forgery
    (CSRF)**. CSRF is an attack that tricks a victim into loading a specific page
    that contains a malicious request. The page acts like a favorite website (such
    as our e-mail provider) waiting for our request (changing the password, sending
    an e-mail), and tries to get sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: The best strategy to protect our website against a CSRF attack is by using CSRF
    tokens in our requests. We can generate a unique token for the user and store
    it in the session. When the token provided in the request matches with the token
    stored in the session, we can accept the request. If not, we will reject it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this token in our source, we need to make it available in JavaScipt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will include an extra post parameter for `csrf_token` in our jQuery
    source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Sorting and filtering data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, the best place for sorting and filtering data is the database. But,
    sometimes, we need to work with the given data on the client side only. For example,
    filtering a simple contact list or sorting a small data grid. In this task, we
    will learn how to filter and sort data on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will need the jQuery library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: We will also need a sample of data in JSON format from `json/developers.json:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the beginning, we will build the HTML code with `searchPlaceHolder` and
    `datalist`, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use some nifty CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'When the HTML and CSS are ready, we can start with JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: When everything is ready, our result looks like the following:![How to do it...](graphics/3081_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `document.ready` event, we ask the server for data. This data is saved
    as the `developers` object and is sorted by the full name of each developer.
  prefs: []
  type: TYPE_NORMAL
- en: Once the data object has been retrieved from the server, we call the `initContacts()`;
    function. This function processes the developers object and creates a list of
    developers in datalist. When the user enters a search term then the searchString
    variable is populated. This triggers a refresh of the developers list, showing
    only those developers whose name, location or label contains the exact search
    string.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sorting of the data in the preceding example works only for strings. If
    we want to use sorting by integer or by date we have to create new sorting functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sorting by integer:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example of a sorting function for integers (ascending order):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '**Sorting by date:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, the data is sorted by date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Adding visual effects and animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The biggest advantage of jQuery is in its ability to work with the DOM, and
    create neat effects and animations. In this task, we will learn how to create
    our own image/content slider with the ability to load images dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need to prepare some example images and save them to our `images` folder.
    And, of course, we will need the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As usual, we will start with HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'In this task, the CSS code is really important:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'And, finally, JavaScript functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The result of the preceding source code is a simple image slider:![How to do
    it...](graphics/3081_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The slider has two main objects—the list with images and the navigation. The
    navigation contains buttons **(Prev, Next)** for changing the current image. After
    clicking on one of these buttons, we call the `moveTo()` function. This function
    animates the left margin of the sliding list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'When the animation is completed, we check the visibility of the navigation
    buttons, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The slider uses the `preloadPictures()` function to preload the required pictures
    dynamically. When the page loads for the first time, we will load the first two
    pictures into the slider. The first picture is displayed and the second one is
    prepared for smooth sliding. After clicking on the **Next** button we will call
    the `preloadPictures()` function again, to preload another picture to the list.
    This will be prepared for the next slide, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can combine more animations in one slider. Now, we will create a description
    list, which will provide separate information for the current slide. We will modify
    `navContainer:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also make the following addition to our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will extend the `moveTo()` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have achieved a nice image/content slider with a professional look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](graphics/3081_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
