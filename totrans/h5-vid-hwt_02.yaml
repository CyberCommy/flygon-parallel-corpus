- en: Chapter 2. Supporting the Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Structuring a blog `article`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting text using the `mark` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `time` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying the `pubdate` of an `article`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying comment blocks using the `article` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding fonts dynamically with @font-face
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding drop shadow effect to fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying gradient effects to fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotating visual elements using the `figure` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"On the web, a man should not be judged by the color of his skin but by the
    content of his content." - Internet meme'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One of the most significant differences between HTML5 and all previous versions
    of HTML is that before we built generic `<div>s` and other such generic containers
    without much knowledge of what content would go in them. With the advent of HTML5,
    that comes to an end. To be correct according to the specification semantically,
    we need to know what the content is so we can wrap it with the most appropriate
    new element tag. While this may mean we developers have to think differently,
    a new challenge is exactly why we're here. In this chapter we'll look at some
    examples of how to do just that using several of HTML5's new elements.
  prefs: []
  type: TYPE_NORMAL
- en: '"In case of conflict, consider users over authors over implementers over specifiers
    over theoretical purity." - Priority of Constituencies'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Throughout this chapter, we'll show you how to use the new `<article>` element
    to mark up both blog posts and comments, add a meaningful publication date to
    an `<article>`, use the new `<mark>` element to highlight text, and how to note
    visual elements using the new `<figure>` element. We'll then turn our attention
    to some new methods of styling text with font replacement techniques, as well
    as adding drop shadows and gradients to our text.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring a blog article
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The `<article>` element represents a self-contained composition in a document,
    page, application, or site and that is, in principle, independently distributable
    or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper
    article, a blog entry, a user-submitted comment, an interactive widget or gadget,
    or any other independent item of content." - WHATWG''s HTML5 Draft Standard -
    [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blog entries are perfect candidates for the new `<article>` element, which is
    designed for syndicated content.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, let's start by identifying the major elements of a blog `<article>:`
    There's usually a headline in the form of a heading tag, the blog entry itself
    consisting of several paragraphs and perhaps one or more images, and some information
    that usually includes the author's name and other related metadata. Notice this
    is all self-contained related content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to continue using the new HTML5 <header> and <footer> elements.
    The headline, entry and meta-information should be wrapped in their own unique
    tags, like `<h2>`, multiple `<p>s` and the new `<footer>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with a foundation very similar to what we used in the last chapter,
    and add our new `<article>` element twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Put your code on a diet?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ready for a shocker? Want to have your mind blown? The `<html>` and `<head>`
    and `<body>` tags (as well as their closing tags) are now optional in the HTML5
    specification. Sure, you could leave them in there, and your pages will validate
    just fine, but why should we? If remove them from the previous code, we are left
    with the spartan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t believe me? Run that code through the World Wide Web Consortium''s validator
    at: [http://validator.w3.org](http://validator.w3.org), and you''ll see it displays
    correctly in the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, not so fast buster. The problem is that removing those elements breaks
    our code for screen readers. Uh oh. Strike one. Also, removing the `<body>` tag
    breaks our new HTML5-enabling JavaScript for Internet Explorer. Strike two. And
    guess what? You can see it coming, can''t you? Yes, removing the `<html>` tag
    removes the language of the page. There it is: Strike three.'
  prefs: []
  type: TYPE_NORMAL
- en: So let's add those elements back in, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There, that's better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember, the new `<article>` element is a collection of related information
    intended for syndication via RSS or another means.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Richer, more meaningful semantics is perhaps the most significant goal for HTML5\.
    It's better for machines, better for authors, and most importantly, better for
    our audiences.
  prefs: []
  type: TYPE_NORMAL
- en: Validation as an aid, not a crutch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we saw previously, removing the `<html>` and `<head>` and `<body>` tags render
    a still valid page. So that begs the question of how valid validators are. Unlike
    the XML world, HTML5 can use incorrect syntax and still render just fine.
  prefs: []
  type: TYPE_NORMAL
- en: The author makes every effort to validate his code whenever possible. It's not
    necessary to be slavish to the validator, but it's always a good quality control
    check. And the closer you get to valid code, the better chance browsers will display
    your work in as consistent a manner as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Eric Meyer's funny
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The author loves how CSS guru Eric Meyer thinks about validators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Eric Meyer''s funny](img/1048_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Where to find validators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can make good use of code validators at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://validator.nu](http://validator.nu)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://validator.w3.org](http://validator.w3.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kristina Halvorson's book "Content *Strategy For The Web"* ([http://contentstrategy.com](http://contentstrategy.com))
    was an instant classic from the time of its release. In it, Halvorson, CEO of
    Minneapolis-based company Brain Traffic, clearly defines the process of how to
    create and deliver useful and usable content for online audiences.
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting text using the mark element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The `<mark>` element represents a run of text in one document marked or highlighted
    for reference purposes, due to its relevance in another context. When used in
    a quotation or other block of text referred to from the prose, it indicates a
    highlight that was not originally present but which has been added to bring the
    reader''s attention to a part of the text that might not have been considered
    important by the original author when the block was originally written, but which
    is now under previously unexpected scrutiny. When used in the main prose of a
    document, it indicates a part of the document that has been highlighted due to
    its likely relevance to the user''s current activity." - WHATWG''s HTML5 Draft
    Standard - [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When viewing search results, you'll often find the term for which you searched
    highlighted. Instead of relying on a semantically meaningless tag, we can now
    use the more meaningful `<mark>` element.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you'll see [HTML5doctor.com](http://HTML5doctor.com) has an
    excellent example of how to use the new `<mark>` element to highlight a search
    results term. This gives a useful semantic hook not only for styling but also
    for the machine tracking the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding a simple style declaration like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'in the `<head>` section helps us render this highlighted text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new `<mark>` element simply highlights a word or phrase to draw the reader's
    attention. To do this, simply specify the `<mark>` to be bold or italicized or
    highlighted in some way in your corresponding Cascading Style Sheet.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sure, you could mark up and style a search-results page to use the `<b>` or
    `<i>` or even `<span>` tags to indicate for which term the search took place,
    but each of those tags only affects the presentation layer. They lack meaning.
    The new `<mark>` element can accomplish the same visual effect, while also adding
    that extra meaning to your markup. In fact, the new `<mark>` element is full of
    win.
  prefs: []
  type: TYPE_NORMAL
- en: <Mark> long and prosper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another great use of the new `<mark>` element is highlighting a date in a calendar
    picker, as we often see on any date-based reservation system website like [Priceline.com](http://Priceline.com).
  prefs: []
  type: TYPE_NORMAL
- en: '[Priceline.com](http://Priceline.com) highlights the current date by default
    when booking your itinerary. Instead of using a semantically meaningless tag to
    achieve this, the new `<mark>` element could be a perfect candidate to use.'
  prefs: []
  type: TYPE_NORMAL
- en: '![<Mark> long and prosper](img/1048_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Waiting for browsers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new `<mark>` element isn't fully supported by any web browser at the time
    of this writing. Though the extra semantic meaning may not be apparent to machine
    readers, we can still use the new `<mark>` element as a stylistic "hook" until
    the day its meaning is fully supported by a variety of browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Is "future proof" a word?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that HTML5's new elements attempt to add extra meaning to our markup.
    The goal is never to take away meaning or break pages. With this in mind, it becomes
    much more palatable to layer on new elements like the `<mark>` element that's
    not fully implemented by browsers yet. Even if its meaning is not fully understood
    by machines yet, it certainly does not hurt to add it and make our pages as "future
    proof" as we possibly can.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2001, Carrie Bickner prepared the "New York Public Library Online Style Guide"
    ([http://legacy.www.nypl.org/styleguide](http://legacy.www.nypl.org/styleguide))
    for branches of the NYPL to use when updating their websites. In this seminal
    publication, Bickner made the case for web standards by separating content (markup)
    from presentation (Cascading Style Sheets) from behavior (JavaScript). The publication
    was extremely forward-thinking for the time and was in use for many years.
  prefs: []
  type: TYPE_NORMAL
- en: Using the time element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The `<time>` element represents either a time on a 24-hour clock, or a precise
    date in the proleptic Gregorian calendar, optionally with a time and a time-zone
    offset." - WHATWG''s HTML5 Draft Standard - [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new `<time>` element is a powerful way to display time or a specific date.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll display dates and times that will be readable for both
    humans and machines. Let's look at four examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the new `<time>` element to indicate specific dates, times, or both.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new `<time>` element specifies an exact moment in time — not a time period.
  prefs: []
  type: TYPE_NORMAL
- en: Odd rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One interesting aspect of the new `<time>` element is that you can't use a date
    before the Christian Era. You also can't use a date like "November 2010." Whatever
    date we specify must be a positive, specific date — not a relative one. The HTML5
    Working Group continues to address this seemingly arbitrary restriction.
  prefs: []
  type: TYPE_NORMAL
- en: <time>'s Time will come
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Browsers display the new `<time>` element but don't do anything special with
    it — yet.
  prefs: []
  type: TYPE_NORMAL
- en: Always remember SEO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Time. Why are we so obsessed with it? One very valid reason to focus on time
    and dates on the web is Search Engine Optimization. SEO, once seen as some sort
    of mysterious voodoo only black hatted wizards understood, is now everyone's responsibility
    online. You spend time creating good code and expect a writer to create content
    worth reading. Now go one step further and ensure that your intended audience
    can actually find the content you have taken the time to create. And the new `<time>`
    element is just one of the ways search engines draw attention to the most recent
    content.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new HTML5 `<time>` element is a possible addition to the Microformats movement.
    Microformats promise to add additional semantic meaning to our markup. Though
    not officially a standard, Microformats are slowly gaining acceptance in the web
    development community. Learn more at [Microformats.org](http://Microformats.org).
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the pubdate of an article
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The `pubdate` attribute is a boolean attribute. If specified it indicates
    that the date and time given by the element is the publication date and time of
    the nearest ancestor `<article>` element, or, if the element has no ancestor `<article>`
    element, of the document as a whole." - WHATWG''s HTML5 Draft Standard - [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new `pubdate` is an attribute for the new `<time>` element when it exists
    within the new `<article>` element. It allows us to be even more precise when
    presenting the date and time of publication.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll build on the new `<time>` element from the last recipe
    and add the new optional `pubdate` attribute to display our publication date.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Pubdate` is simply a binary variable, or Boolean, attribute to denote when
    something was published.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can think of `pubdate` as adding extra information to an element `(<time>)`
    that is already providing extra information. It is like the cherry on a sundae.
    And who doesn't like cherries on their sundaes?
  prefs: []
  type: TYPE_NORMAL
- en: Still waiting on browsers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are getting really forward-thinking by including new elements like `<mark>,
    <time>`, and `pubdate`, as none are fully supported by any browser — *yet*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Still waiting on browsers](img/1048_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Modern browsers like Firefox display the new `<time>` element and `pubdate`
    attribute natively without styling.
  prefs: []
  type: TYPE_NORMAL
- en: Extra credit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can code the new `pubdate` Boolean attribute as `<time datetime="2010-11-29"
    pubdate="pubdate">` if you want to conform to XML syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Let's end confusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though HTML5 is still quite new, there's already some confusion about the
    new `pubdate` Boolean attribute. Some think it should generate the date of publication
    based on your computer clock or a server. That's not its role. Its role is to
    produce a machine-readable publication date that is useful no matter what text
    you may put after it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tantek Celik has created a very useful site at [http://favelets.com](http://favelets.com)
    that features all sorts of "bookmarklets" or in-browser JavaScript commands. Use
    these to do things like validate HTML5, CSS, and anchors all in the same window.
    Very helpful!
  prefs: []
  type: TYPE_NORMAL
- en: Displaying comment blocks using the article element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The `<article>` element represents a self-contained composition in a document,
    page, application, or site and that is, in principle, independently distributable
    or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper
    article, a blog entry, a user-submitted comment, an interactive widget or gadget,
    or any other independent item of content." - WHATWG''s HTML5 Draft Standard -
    [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can certainly make the case for marking up blog comments using the new `<article>`
    element too. In this recipe, we will do exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's use the new `<article>` element to mark up a block of blog comments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Wait a minute," you are thinking. "A blog comment isn''t an `<article>!"`
    you exclaim. Not so fast, buster. If we analyze the components of a blog comment,
    we''ll find the same elements common to other `<article>s`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we''re at it, let''s check out that new `<small>` element in the previous
    `<footer>s`. Previously, `<small>` was a presentational element that denoted physically
    small text. Not anymore! Now `<small>` has been redefined for use this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '"The `<small>` element represents so called ''small print'' such as legal disclaimers
    and caveats." - WHATWG''s HTML5 Draft Standard - [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Blog comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since blog comments and their comment feeds can be intended for syndication,
    there's even more reason to use the new `<article>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Value comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Comments. They are found in just about any blog worth its readership. No matter
    if we're creating our own sites or our own blog content management systems, we
    deserve to treat the code for comments with every bit as much care and attention
    as we do the actual blog posts themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Opportunity's yours
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Disqus.com](http://Disqus.com) is the online home of the most widely used
    blog comments plugin. Publishers can easily incorporate it into their sites without
    much programming effort. So where does that leave us? Well, no matter whether
    you use Disqus or any other commenting system, somebody had to develop that code,
    right? It might as well be you!'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Josh Duck has created the clever and useful Periodic Table of HTML5 Elements
    at: [http://joshduck.com/periodic-table.html](http://joshduck.com/periodic-table.html).
    There, Josh smartly groups categories of similar new elements like Root element,
    Text-level semantics, Document sections, and more!'
  prefs: []
  type: TYPE_NORMAL
- en: Adding fonts dynamically with @font-face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not so long ago, we designers and developers were limited to only a select few
    "web safe" fonts for text. If we wanted to display text in a font face that wasn't
    considered "safe," we made an image out of it. It was dumb, but we had no other
    choice. Now we do. The font has finally been liberated on the web.
  prefs: []
  type: TYPE_NORMAL
- en: Good typography is essential to any design, and the new @font-face ability lets
    us embed fonts for browsers to use. Though technically not part of HTML5, this
    CSS3 property is much too important not to address.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, let's find a fun font and embed it as a simple logo. Below
    you'll find links to several great sites to find both free and paid fonts for
    web use. For this example, let's look at a previous version of the author's personal
    portfolio at [http://dalejcruse.com](http://dalejcruse.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several methods to display custom fonts on the web, but we're going
    to examine and use the bulletproof way to get it working in modern, legacy, and
    even mobile browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Let's head over to the @Font-Face Generator at [http://fontsquirrel.com/fontface/generator](http://fontsquirrel.com/fontface/generator).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the @font-face Kit Generator wizard walks us through the process of uploading
    a font ("League Gothic" here) and ensuring that the font you use is legally authorized
    for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once uploaded, the generator will convert your font to multiple file formats.
    Download all of these, and save them to the server where you want them to be displayed.
    All that''s needed is two bits of styling:'
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the @font-face files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assigning the new font to the element we want to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/1048_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And boom goes the dynamite.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new @font-face ability allows us to save font files in various formats on
    our web servers and use CSS to reference them for display. In this way, the font
    files become another asset, just like an image.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browsers use their own proprietary font files for display on the web. By downloading
    and referencing each of the possible formats, we have ensured that modern browsers
    like Firefox, Chrome, and Safari, as well as legacy browsers like Internet Explorer
    and even mobile browsers can display our intended fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Don't steal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure that the font(s) you are using has been legally authorized to be used
    for online display. Stealing isn't cool.
  prefs: []
  type: TYPE_NORMAL
- en: Firefox note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to store the fonts you want to use on the same server as your unique
    domain. Some browsers (I'm looking at you, Firefox) do not like it when you try
    to reference fonts across domains.
  prefs: []
  type: TYPE_NORMAL
- en: Paul Irish rocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the spirit of giving credit where it is due, the CSS method we used to call
    various locally stored font files was developed by Paul Irish in his post "Bulletproof
    @font-face Implementation Syntax" at: [http://paulirish.com/2009/bulletproof-font-face-implementation-syntax](http://paulirish.com/2009/bulletproof-font-face-implementation-syntax).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some terrific sources to find both free and paid fonts on the web,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: Fontdeck - [http://fontdeck.com](http://fontdeck.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernest - [http://kernest.com](http://kernest.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The League of Moveable Type - [http://theleagueofmoveabletype.com](http://theleagueofmoveabletype.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typekit - [http://typekit.com](http://typekit.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typotheque - [http://typotheque.com/fonts](http://typotheque.com/fonts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Fonts - [http://webfonts.fonts.com](http://webfonts.fonts.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webfonts.info - [http://webfonts.info](http://webfonts.info)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webtype - [http://webtype.com](http://webtype.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding drop-shadow effects to fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once upon a time, it seemed like web designers and developers added drop shadows
    to every visual element they could. It was almost like they were getting paid
    by the drop shadow. Luckily that time has come and gone. Today, only the most
    fashionable designers and developers know to add drop shadows very sparingly Let's
    take a look at how to do that using only CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, let us use the previous example, and simply add a very subtle
    drop shadow to the headline font from a previous version of the author's portfolio
    site at [http://dalejcruse.com](http://dalejcruse.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we will use some careful styling to add a tasteful drop shadow
    effect to some of our text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The text-shadow CSS attribute displays a subtle black drop shadow one pixel
    to the right and one pixel underneath our text in modern browsers. Though very
    subtle on the author's portfolio site, the effect can be seen much more dramatically
    if we set the background and font color both to white.
  prefs: []
  type: TYPE_NORMAL
- en: With the background and text color both set to white, all we see here is the
    black drop shadow one pixel to the right and one pixel underneath. Since IE does
    not support text-shadow, this would be rendered as pure white in that browser.
    That's probably not what you want.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...fontsdrop shadow effects, adding](img/1048_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to absolute color values like "black," we can also use hexadecimal
    values like "#000" or even RGBA values with a semi-transparent alpha channel.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modern browsers like Chrome 2+, Firefox 3.1+, Opera 9.5+, and Safari 1.1+ all
    support the text-shadow CSS property. This song is pretty worn out by now, but
    suffices to say Internet Explorer does not support it.
  prefs: []
  type: TYPE_NORMAL
- en: With great power…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just because the ability to add drop shadows to text using only CSS exists,
    don't consider it a license to go and abuse it. We don't want to revert to the
    ugly days of the web when drop shadows were everywhere. Instead, use your powers
    for good.
  prefs: []
  type: TYPE_NORMAL
- en: A plea to all readers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the sake of readability, consider applying drop shadow effects only to headline
    or header fonts. Applying it to body text becomes tiresome and unreadable. And
    you do not want to be the person known for overusing and killing drop shadows
    all over again.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Google released the WebFont Loader open-source JavaScript library to better
    control the way browsers load web fonts. Check out the super-simple implementation
    at: [http://code.google.com/apis/webfonts/docs/webfont_loader.html](http://code.google.com/apis/webfonts/docs/webfont_loader.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Applying gradient effects to fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take our previous example and add one more layer to it: A subtle gradient
    effect.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only other extra thing we'll need is a portable network graphics image that
    we can reference via our CSS.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we will add a `.png` image file with alpha transparency to create
    a slick gradient effect on our headline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that extra `<span>` in our `<h1>` tag. That is where we have put our
    image.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By simply layering an image with some transparency over our text, we have subtly
    altered the text to appear to have a gradient.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your imagination is the only limitation to this effect. You could create fades,
    metallic effects, vertical or horizontal stripes — even zebra stripes!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Careful there**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: Just because you can, does not mean you should. Use text gradients
    sparingly. Please.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a beautiful example of a gradient effect over a font, check out the header
    on Alex Clarke''s college project about Enceladus, one of Saturn''s moons at:
    [http://hagablog.co.uk/demos/enceladus/index.html](http://hagablog.co.uk/demos/enceladus/index.html).
    While you''re enjoying the visual design, don''t forget to check out the source
    code to see Alex''s very well documented HTML5 code.'
  prefs: []
  type: TYPE_NORMAL
- en: Annotating visual elements using the figure and figcaption tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The `<figure>` element represents some flow content, optionally with a caption,
    that is self-contained and is typically referenced as a single unit from the main
    flow of the document. The element can thus be used to annotate illustrations,
    diagrams, photos, code listings, etc, that are referred to from the main content
    of the document, but that could, without affecting the flow of the document, be
    moved away from that primary content, e.g. to the side of the page, to dedicated
    pages, or to an appendix." - WHATWG''s HTML5 Draft Standard - [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"The first <figcaption> element child of the element, if any, represents the
    caption of the <figure> element''s contents. If there is no child <figcaption>
    element, there is no caption." - WHATWG''s HTML5 Draft Standard - [http://whatwg.org/html5](http://whatwg.org/html5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have seen it a million times: An image with some sort of text caption underneath.
    Usually it is on the side of a page. Previously, we''d just mark that up as an
    image with some sort of text container under it. Now, we have the more semantically
    rich new `<figure>` element to handle it for us. Let''s find out how.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to achieve this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Without a caption
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a caption
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First let''s try it without the caption:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add that caption:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Having one caption for multiple images is easy too. Notice multiple `img` tags
    and just one `<figcaption>`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A bit of styling makes that `<figcaption>` display beneath those images in the
    new `<figure>` element.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember that the new `<figure>` element is used for inline content that you
    want to display to the side of its corresponding main text.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping's good
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new `<figure>` element can contain text, images, audio, video, illustrations,
    diagrams, code listings, and just about anything else that deserves to be grouped
    together aside from the primary content.
  prefs: []
  type: TYPE_NORMAL
- en: Semantics are valuable too
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inline content with captions occurs all the time in books, newspapers, and magazines.
    Since some of the earliest days of the web, we have been able to accomplish the
    same thing, but now the new `<figure>` element gives us a much more semantic "hook"
    to style instead of resorting to class names.
  prefs: []
  type: TYPE_NORMAL
- en: <figure> vs <aside>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So what is the difference between `<figure>` and `<aside>?` We should use the
    new `<figure>` element for essential content whose position is not important.
    The new `<aside>` element, however, is for content that is related but not essential.
    Are we splitting hairs? Maybe. But you are the kind of web developer who lives
    and dies by the details, right?
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For an even more detailed description of how HTML5 differs from all previous
    versions of HTML, see the Wikipedia entry at: [http://en.wikipedia.org/wiki/HTML5](http://en.wikipedia.org/wiki/HTML5).'
  prefs: []
  type: TYPE_NORMAL
