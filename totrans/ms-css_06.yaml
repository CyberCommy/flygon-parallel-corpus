- en: Becoming Responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "\uFEFFUp to this point, we've built almost everything with a fixed size. Our\
    \ layout had a fixed width, our images had fixed widths, and our menu had a fixed\
    \ width as well. But this is not going to deliver a favorable experience when\
    \ using phones, tablets, and a multitude of other device sizes that are out there.\
    \ Luckily, responsive web design is here to transform our static website into\
    \ a fluid, device-friendly website."
  prefs: []
  type: TYPE_NORMAL
- en: 'The book that started it all - *Responsive Web Design*, by *Ethan Marcotte*,
    *2011*. He outlined three main technical pillars of responsive web design:'
  prefs: []
  type: TYPE_NORMAL
- en: Fluid grids,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible images, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll discuss these three fundamental CSS foundations of responsive web design,
    followed by how to build accommodations for primary navigation at smaller screen
    sizes, and finally, the `viewport` meta tag.
  prefs: []
  type: TYPE_NORMAL
- en: Fluid grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll discuss the first of the three main components of responsive
    web design, the fluid grid, or a percentage-based layout. We'll look at converting
    a fixed width layout into a fluid grid, and to do this, you'll need to learn the
    formula for converting pixels into percentages.
  prefs: []
  type: TYPE_NORMAL
- en: Converting pixels to percentages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right now, we have a fixed width layout, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you shrink the browser, you can see how it breaks down into smaller sizes,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a fluid grid is the first step in fixing this. The goal is to convert
    all our pixel-based widths, as well as left and right margins and left and right
    padding, into percentages. We''re going to ignore our main navigation for now,
    but we''ll circle back to it in a later section. We''ll start with the `div` tag,
    which is the `wrapper` class, that I have used to wrap a lot of the content. Let''s
    change the property `width` to `max-width`. This indicates that this element can
    be smaller than `960px` wide, but it can''t be any wider than that. Let''s also
    set the width to `90%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So, as per this code, we''re making the width 90 percent of its parent element,
    which has no width. Therefore, it will be 90 percent of the browser window. This
    will give it a 5 percent gutter on either side with widths narrower than `960px`.
    Let''s look at the site in the browser. You can refresh the browser and make it
    smaller again. The following screenshot shows that it doesn''t have a dramatic
    effect and looks pretty bad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We want to create these elements inside `wrapper` percentages as well. Since
    we're starting with fixed pixel widths, we to convert all pixels into percentages.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating percentage widths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to *Responsive Web Design*, by *Ethan Marcotte*, there is a formula
    for converting pixel-based layouts to percentage-based layouts: *target / context
    = result*. The *target* is the desired width of an element. The *context* is typically
    the width of its parent element. The *result* is the percentage we can plug into
    our CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at our HTML inside the `intro-content` section, we can see the `wrapper`
    class and the two `div` tags inside of it, namely `intro-content` and `go-premium`,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Back to our CSS, our first element is `intro-content`, which is the section
    that appears inside of the wrapper, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The target here is 600 pixels and the context is 960 pixels. So our calculation
    would be 600 divided by 960, which equals 0.625\. We''ll plug this in as our width,
    add a percentage as our unit of measure, and move the decimal point over two places
    so that it comes out to 62.5%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, my comment at the end of the declaration tells me that the element
    was originally 600 pixels wide, and the parent element was originally 960 pixels
    wide.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `margin-right` property needs to be a percentage too. The formula remains
    the same—*target* divided by *context* equals *result*. Our target is 60 pixels,
    and our context is still 960 pixels—the parent element, which is the `wrapper`
    class. 60 divided by 960 comes out 0.0625\. We convert this into a percentage
    by moving the decimal point two places, and we have `6.25%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up is our call-to-action button''s container, `go-premium`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As the width is `300px`, it needs to be converted into a percentage as well.
    So let''s do the same thing, in this case, 300 divided by 960—we still have the
    same parent here. It''s 0.3125\. Move the decimal point two place, add a percentage,
    and then put that in a CSS comment to the right in case we need it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now I think we''re ready to look at this in the browser. If I shrink the browser
    window a little, the layout no longer breaks immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'But if I shrink the browser window a little more, then it ultimately starts
    to look pretty terrible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: However, we did make some progress as our layout is starting to become fluid.
    The intro content and the call-to-action button are getting narrower as the browser
    window gets smaller. Eventually, they will start overlapping, but that's okay;
    at least we have a fluid foundation for this top section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at the three columns underneath of it; they are kind
    of breaking as the window gets smaller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So let''s take a look at the HTML for this in our `secondary-section` class.
    These three columns are inside of a `div` tag with a class of `wrapper` that was
    also originally 960 pixels wide (but is now a max-width of 960px with a width
    of 90%):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll continue using it as our context while we convert our `.column` width
    from pixels into percentages. All the way down to the bottom of our CSS, we see
    that each column is `300px` wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s apply our formula here. We already know that 300 divided by 960 is 31.25
    percent because that''s the exact calculation we used just before this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `margin-left` property is `30px`, so we''re actually going to copy and
    paste 31.25 percent down here, but we''ll move the decimal one place and add a
    comment stating 30 divided by 960:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We do have a `margin-left` property of `0` value on the first column. We don''t
    have to change 0 to a percentage because 0, 0 pixels, and 0 percent are all the
    same exact thing—nothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As a side note, I never changed any heights, top and bottom margins, or padding
    because they just didn''t really matter to us. So now if we refresh this section
    and make it smaller, we will see our three columns shrinking proportionately as
    our browser window shrinks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So everything in our home page is fluid now, except for our nav, which I'm going
    to leave as is for now. I want to handle it totally differently, so I'll leave
    it as a fixed width.
  prefs: []
  type: TYPE_NORMAL
- en: Changing padding to a percentage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We never had to change our padding left or right to a percentage because we
    didn''t have any, but the process to do so is very similar. You still use the
    same formula – target divided by context equals result. But the context is a little
    different now; it''s the width of the element itself and not the width of the
    parent element, like it is for width and margin. The only caveat to that is if
    the element itself doesn''t have a width defined, you can use the width of its
    parent or determine the width itself by determining the width of the parent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you''re using the `box-sizing` property with the border box value, padding
    would no longer be factored into the box model width of the element. Therefore,
    you can leave it as a pixel length and just convert the width and margin into
    a percentage, so `box-sizing: border-box` could definitely be helpful.'
  prefs: []
  type: TYPE_NORMAL
- en: A fluid grid on the shark movies page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's search for some other non-percentage-based widths/margins/paddings. So
    we're not worried about anything related to vertical distance, like `height`,
    `margin-top`, `margin-bottom`, `padding-top` or `padding-bottom`. And we're not
    worried about any value of `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will come across `auto` for the left and right margin in the `wrapper` rule
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This doesn't need to be converted into a percentage because `auto` automatically
    calculates the width based on the space available, so it's as good as a percentage.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are worried about this `margin` property in the following declaration block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This rule set has a `margin` of `30px`; it's using the single value syntax.
    This means the top, bottom, left, and right margins are all `30px`. We only want
    to change the left and right margins. So what we can do is use the two-value syntax.
    The first value refers to the top and bottom margins, and the second value refers
    to the left and right margins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember `content-block .figure` is the element that wraps around our image,
    as shown in the following screenshot. So we''re actually trying to convert `margin-right`
    and `margin-left` into a percentage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we look in our `shark-movies.html`, we will see that the image is inside
    of a `wrapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: So again, we know the `wrapper` is 960 pixels. So far, our context has been
    very easy to determine because our context has always been the width of the `wrapper`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The number 30 divided by 960 is 03.125, which is 3.125%, so we''ll save this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: On our site, except for nav, all the hard pixel lengths are percentages! Not
    everything has to be a percentage for responsive web design to work. We made a
    judgment call that we'd handle navigation without percentage widths. This is true
    for the fluid grid and so many other decisions for responsive web design; there
    really isn't a one-size-fits-all solution. Each component of your website needs
    to be thought out thoroughly from the desktop down to mobile, or even better yet,
    starting from the mobile up through to the desktop. So step one, creating fluid
    grids, is complete for now. This is an important step because it ensures our design
    will start to fit nicely on all our screen sizes. In the next section, we'll look
    at flexible images.
  prefs: []
  type: TYPE_NORMAL
- en: Flexible images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've created a fluid grid, which is the first foundation of a responsive web
    design. Foundation two is responsive images or flexible images. We want our images
    or at least certain images to behave the same way as our divs and sections. We
    want them to be fluid or flexible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at our site, what we can notice is that the three images of `The Octopus`,
    `The Crab`, and `The Whale` shrink as the column they are in gets smaller. On
    the other hand, the shark at the top kind of stays the same size no matter what
    the browser width is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our image in the navigation is not flexible. The three images in our columns
    are flexible. We''ll look at the image in the navigation and see why. But first,
    let''s go over the three things that will guarantee responsive images:'
  prefs: []
  type: TYPE_NORMAL
- en: Put the `img` tag inside of a container. The most semantic container is usually
    the `figure` tag, but it could certainly be any element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the container fluid; give it a percentage width.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the `max-width` property of `100%` to all the `img` tags or at least
    to the `img` tags you want to be fluid or flexible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The octopus, crab, and whale images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s look at one of the images in our HTML file. We can see the octopus
    image is inside of a container. The container is the `figure` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `figure` element doesn''t have a width defined, but it''s a block-level
    element that takes up the entire width of its container. So we could think of
    the figure width as `100%`. It''s inside of the `column` div:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look in our CSS column, we see the column width is `31.25%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: So there we have our first step – we have our image inside of the container.
    Then we have step two – the parent is fluid. The third step is assigning a max
    width to all the images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s scroll up to the top of our CSS file. I actually have this selector,
    shown in the next screenshot, as part of my reset. It targets `img`, `iframe`,
    `video`, and `object`, pretty much all types of media. I have assigned this selector
    with maximum width of 100 percent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'I make this selector part of my reset or base layer of styles that I use on
    every project. So for fun, let''s remove that property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we save it and look at our site, as we shrink the browser window, the images
    wouldn''t get smaller; they''ll stay the same size and get squashed together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we add back the `max-width: 100%` declaration, these images become flexible
    again. This indicates that the maximum width of any image can only be 100 percent
    of its container. So, as the container gets smaller, the width of the image will
    also get smaller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The shark image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two reasons why the shark image is not getting smaller. Let''s inspect
    them. We can see that the shark image does have an immediate container element
    – a `figure` tag. But that container is intentionally not fluid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the container of the images container, the `nav` tag, you will
    see it expands to the full width of the browser, demonstrating how the container
    is not fluid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we inspect the image itself, we see that it has a width assigned to it of
    `160px`, which will definitely stop it from being fluid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Personally, I don't like having a width set on the image. Even if I don't want
    this image to be fluid, I don't want to have a width on it either. In this case,
    let's do a little cleanup here and change the image so the figure element has
    a width of `160px`, which is the image's container, instead of the image itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is more of my preference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Intentionally we are leaving the shark image as a fixed width as it doesn't
    necessarily need to shrink or grow to make this design responsive. We'll handle
    the header section separately later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Shrinking images on the shark movies page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the images on the movies page. They don''t shrink when
    we resize the browser. They have fixed widths:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I think they should shrink; they''re just a little too big in smaller browser
    sizes. The reason all three images on our movies page don''t shrink is because
    their parent element does not have a width defined. Let''s use Ethan Marcotte''s
    formula-target divided by context equals result. We know the context of the area
    filled by the image, heading 1, paragraph, and learn more button is still 960px
    wide because it''s inside of a `wrapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'So what is the width of the anchor tag that surrounds the image? If we look
    at our CSS, we have `.content-block .figure`, where there is no width defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look at the image that is inside of `.figure`, there is no width defined
    there as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'So we have to use the power of Chrome DevTools in order to figure out what
    the width of the `a` element around the `img` element is. If we hover over the
    actual image itself, we see the image is 200 pixels by 200 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If we actually highlight the anchor, as shown in the following screenshot, DevTools
    tell us that the width is 230 pixels. You can see that it says in that pop-up
    bubble right above the image itself. Our width is 230 - 200 pixels of the image
    plus 15 pixels border left and 15 pixels border right. This makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: "Now what we want to do is we want to use 230 as our target when we convert\
    \ the pixel value into a percentage. We are also going to have to use `box sizing:\
    \ border-box`. Remember that, as you learned in *The box model and block versus\
    \ inline elements* section in [\uFEFFChapter 1](part0021.html#K0RQ0-a72d261cc09f412988422c8a08f12cd5),\
    \ *CSS Foundations*, if you set an element to `box-sizing: border-box`, then the\
    \ `border` and `padding` get calculated into the `width` that you define:"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '230 divided by 960 equals 0.23958333333333, so we''ll convert that into a percent
    and we get `23.98333333333%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now if we refresh the browser and make it smaller, we can see our images get
    smaller. It may look a little odd at the moment, but believe it or not, that's
    what we were shooting for, so that's great!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s head back to the CCS code now. This technique we''re using is very helpful,
    but we could potentially be repeating `box-sizing: border-box` a lot throughout
    our code. Let''s remove it altogether from our `.content-block .figure` rule set
    and add it to our reset a little differently, where it should be. Let''s add this
    to our reset section of our stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'As part of our reset, every element will get `box-sizing: border-box`. We can
    see where we''ve added it to our HTML element and used the universal (star) selector,
    which, as you''ll remember from our section on specificity rules, applies to all
    elements. We''re applying `box-sizing: border-box` on the `html` element only,
    but everything else is going to get `box-sizing: inherit`. `html` is the parent
    of every element; therefore, you''re inheriting the `border-box` property to every
    element. Alright, we took a little detour from flexible images, but we needed
    to do this to create a positive path forward.'
  prefs: []
  type: TYPE_NORMAL
- en: So, in summary, our images are now flexible, but our site isn't perfect at very
    small browser widths (think smaller devices like phones or tablets). In the next
    section, we'll figure out how to handle this using media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first two foundations of responsive web design can only get you so far.
    The most important foundation is the media query. Media queries are basically
    "if" statements or conditional logic inside your CSS. For instance, *if* the width
    of the browser is less than 500 pixels, we can then apply different rule sets
    based on these conditions. Media queries are extremely powerful because at certain
    points, our website really breaks down and looks bad, and we're going to need
    to fix this with . In this section, we'll figure out what a media query is, and
    we'll use it to fix the remaining issues with the site, especially at narrower
    widths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to consider is this – since we''re going to shrink our browser
    window to kind of emulate a tablet or mobile, we won''t have a lot of room to
    look at DevTools. You can click on the 3-vertical-dots icon to open up a drop
    down menu to shift DevTools over to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Chrome changes its UI from time to time as it updates, so the icon may look
    different for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can shrink our browser window to any smaller width we want and still
    have plenty of room for the developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Quick tip
  prefs: []
  type: TYPE_NORMAL
- en: If you use Chrome DevTools and shrink your browser window, in the top-right
    corner it will show you the width and height of the browser's viewport. So, in
    the following image, you can see it's providing information about the width, which
    is at **691px**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The problem with our site right now is if we reach a narrower width, the nav
    will be behind the shark, the call-to-action button will be smushed into the site
    title, and three columns are way too narrow as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So we'll skip the nav and circle back to it at the end of this section. The
    main site title and call-to-action button are floated. At 1,023 pixels, let's
    "defloat" these two sections and stack them on top of each other using a media
    query.
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of a media query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m going to put all the media queries at the bottom of the style sheet. You
    don''t have to do this, but that''s what I''ll do. Media queries always start
    with `@media`. Then, they have two parts. The first part is the *media type*.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You could plug in `print` , `screen`, `all` and a few other options as well.
    `print` would only be applied to print style sheets, whereas, `screen` would only
    be applied to computer screens (but not print outs). `all` would apply to both.
    If we left out the `media type` altogether - which is perfectly acceptable - it
    defaults to `all`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part of a media query is called the *media feature* and determines
    when to use the media query. We need to separate this from the `@media screen`
    with the word "and". For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Again, this is conditional logic similar to an if-statement in JavaScript. If
    both the *media type* and the *media feature* evaluate to true then what's inside
    the media query will be applied (Yes, we'll be putting stuff inside the media
    query's curly braces shortly).
  prefs: []
  type: TYPE_NORMAL
- en: '`(max-width: 1023px)` means that if the browser window is 1,023px or lower
    then this media query will apply (or evaluate to true). Once the screen width
    is more than 1,023px, then the media query will no longer apply (or evaluate to
    false). You can also use `min-width`; it has the reverse effect, applying to everything
    1,023px and greater:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In fact, you can use any length value as well as many other values. Commonly
    though, `max-width` and `min-width` work just fine with what we''re trying to
    do and we''ll stick with `max-width` for now. Notice the curly braces at the end.
    It''s almost like we just built a CSS rule set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the curly braces of the media query, we can start writing plain old
    CSS that will only be applied if the browser window is both (1) a screen and (2)
    1,023px or less. Let''s add `float: none` and `width: auto` to both the `intro-content`
    and `go-premium`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `auto` value is the default for the `width` property, so it effectually
    makes these block elements span the full width available, which will be 100 percent
    of the `wrapper`. The `auto` keyword means it will automatically calculate the
    value. `auto` has different values based on the property it's paired with. In
    this case, it basically the same as `100%`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can see our intro content is no longer floated, the width is the full
    width, and the `go-premium` button is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, we have a big space between the `go-premium` button and the `intro-content`
    that we need to get rid of:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To fix this, we''re going to add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `go-premium` button itself, we''ll remove the top margin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve got our title, our subtitle, our text, and our button, and everything''s
    looking good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00253.jpeg)              ![](img/00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Considering iPads and other tablet dimensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We chose 1,023 as the break point because that is just one pixel under the width
    of an iPad held in landscape orientation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This way, our media query will apply to all the widths and devices lesser than
    1,024p. As of 2017, I would *guess* that the iPad is - if not the most popular
    tablet - one of the most popular. I can say with more certainty that the iPad
    is definitely not the only popular tablet. In fact, it is amazing just how many
    different tablet devices and widths there are out there, so you may not want to
    necessarily use 1,024 and 768, respectively, as the basis for your media queries.
    Figure out where your layout generally starts to break or look funny and determine
    the logical placement of your media queries from there. Then, test your site on
    an iPad and any other device or emulator you can find in order to make sure your
    site looks good. We'll just use 1,023 as our baseline since, in our case, the
    layout still looks good at 1,024.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our three columns to the media query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So now, we just need to add all of the CSS to our media query in order to get
    the rest of the site looking good, starting with the three column area. As you
    can see in the following screenshot, these are just too tight:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s kind of standard practice to create a tube of content for smaller devices,
    getting rid of any multicolumn, floated layout. So we''ll remove the float again
    from `.column` and make the width the full width of the parent by specifying the
    keyword of `auto`. Let''s go to the bottom of our CSS and update the media query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we go to our site, each of these three columns will have a full width
    and will not be floated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The problem is that we should probably center this text and the image itself.
    So first we''ll target `.column figure` first inside the media query to center
    the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the `auto` keyword for the left and right margin and setting not only
    `width: 100%` but also `max-width: 25px` we are able to center the images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding width: `100%` ensures that if the `wrapper` container is ever less than
    250px (the max-size of the image) then the image width will be `100%` of its container;
    sort of a safety net for really narrow widths.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s center the heading, simply using `text-align: center`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00259.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's another approach that we could take with our responsive design – the
    mobile-first approach.
  prefs: []
  type: TYPE_NORMAL
- en: The mobile-first approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, this is the best practice. We want to be thinking about smaller
    displays at the same time or before the desktop experience, as the name suggests.
    This way, the content and design take into account mobile devices and all their
    constraints at the very beginning, so they can be fully realized in the design
    and build process. Mobile first relates to much more than how we code our CSS.
    But here''s the general idea behind the code part of mobile first: Put all of
    your CSS targeting the smallest devices outside of any media query. Then use media
    queries to target larger and larger devices.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00260.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This means using `min-width` media queries to add additional CSS for larger
    displays. For instance, our layout wouldn't have any floats by default; instead,
    it would be a single tunnel of content, which is usually standard for mobile.
    Then our media queries, using `min-width` instead of `max-width`, would add the
    floats that would be applied at wider screen widths to create a multicolumn layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the mobile-first approach, check out Luke Wroblewski''s
    defining book on the subject-*Mobile First*-available on the [abookapart.com](https://abookapart.com/)
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Solving the navigation problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's talk about this navigation now. Solving navigation isn't as easy as solving
    what we just tackled using media queries. At certain widths, our shark just gets
    in the way of the nav, and at some point, we are going to have to do something
    with the dropdown as well. Also, if we were to add a few more nav items, then
    we'd have this problem at even wider widths.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We hit our first real challenge of what to do with the navigation. There are
    certain responsive design patterns that have emerged. Let''s talk about a site
    that''s curated by Brad Frost – [bradfrost.github.io/this-is-responsive](http://bradfrost.github.io/this-is-responsive/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s basically a collection of patterns to use for responsive web design.
    It has a bunch of different ways of handling navigation that you can explore.
    Let''s look at the first one under *Patterns*, called Toggle. At a wider width,
    the menu kind of looks like ours; it''s just some nav items up at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At a narrower browser width, the nav items are replaced with a menu link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00265.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the link, it expands and hides the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is generally what we want to do with our site; this will require a little
    heavier use of media queries and some JavaScript or jQuery to show and hide the
    navigational click. Up for the challenge? Good, let's get it done!
  prefs: []
  type: TYPE_NORMAL
- en: We've used media queries to change our CSS based on the width of the screen.
    This is tremendously useful as it fixed most of our issues at narrower widths.
    We still need to remedy the navigation at smaller widths. In the next section,
    we are going to use media queries to drastically change our navigation so that
    it's hidden, except for a Menu icon that can be clicked to show the navigation
    with jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, you've learned about Ethan Marcotte's three fundamentals
    of responsive web design – fluid grids, flexible images that squish, and media
    queries. That's kind of the easy part in a way. The hard part is figuring out
    the multitude of tricky design challenges; for example, what to do with our menu
    on a mobile, especially as we decide to add more menus. Luckily, this is the one
    area where a decent design pattern has emerged. We are going to forgo the horizontal
    menu that shows each button on the nav in lieu of a hidden menu that is activated
    by a click or touch. Upon being clicked or touched, the hidden menu will slide
    down vertically and show all the menu choices. We'll achieve this by styling the
    mobile nav in its open state. Then, we'll hide the nav and add in the menu icon
    that triggers the mobile menu to open and close it. Finally, we'll link our HTML
    to the jQuery CDN and our scripts file and write a bit of basic jQuery needed
    to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the mobile nav in its open state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the very bottom of the style sheet, I''m going to add in a new media query
    targeting `900px` or less:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice I also add a comment at the closing curly brace of the first media query.
    This is useful so we don''t lose track of where our first media query ends. The
    new mobile nav will only be triggered at a new break point, `900px` wide. That''s
    when it starts to look funky and starts breaking. Firstly, I don''t want the nav
    to be fixed to the top anymore, so let''s get rid of fixed positioning and replace
    it with the default static position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Static, as you'll recall from an earlier section, is the default value for the
    `position` property so it basically turns off `fixed` positioning and returns
    it as an element that behaves based on the *normal flow*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s tell all the immediate list items of `primary-nav` to float to
    the right instead of left. We''ll also give it a full width because these floated
    elements are only going to take up the width needed, similar to inline elements,
    so we are going to tell them to take up the entire width available by setting
    the width to `100%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Again I also add a comment to signal the closing curly brace of this media query
    so to not lose track of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s focus on the anchors. Let''s align the text to the right, standardize
    the padding, remove the border on the left and add a border at the bottom, and
    give it a little smaller font size of 13px, and width of 100%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, so this is what the nav looks like before we apply this CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what it looks like when we refresh. Now it''s starting to look like
    mobile navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The problem is that the width of 100% didn''t really work. Well, actually it
    did; the anchors are 100 percent of their container, but it''s their container
    also needs to be 100%. So let''s assign the `primary-nav` with a width of 100
    percent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We can cross that off our to-do list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This resembles a menu for sure. The big elephant in the room is that the shark
    is just taking up too much space in the middle. Let's fix that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a new selector to the bottom of the media query targeting the shark.
    We''ll make it much smaller, move it up, and hug it close to the left using the
    offset properties in the top and left positions since this is already an absolutely
    positioned element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'That looks good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next thing to fix is the dropdown menu. This won''t do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have a design decision to make right now. Should we hide the dropdown menu
    and not let any mobile users have access to it? We could. But that''s not fair
    to mobile users. We can obviously keep it as shown above, but I think we''ll serve
    mobile users better by assimilating it into the `primary-nav`. I want to make
    it look like the other major menus. So we''re going to target the `.has-submenu
    ul` selector. We''ll add this rule set to the bottom of the media query. We''ll
    change the `position` property from `absolute` to `static`, change the `display`
    property to `block`, remove the `border` and `border-radius` properties, and make
    the `width` stretch all the way across:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wow! That looks pretty good. Let''s also kill the animation as it''s no longer
    needed. We''ll add a new selector inside the media query and set `-webkit-animation`
    and `animation` to `none`; this keyword will kill the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We no longer get the animation. The hover-state of the "Movies" menu covers
    the shark in an odd way, but that will get fixed shortly when we add the hamburger
    menu icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Mobile navigation in its open state is now complete; now we need to hide it
    and add the hamburger icon that will trigger it to open and close.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the hamburger menu icon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a `div` tag right on top of the `primary-nav` in both the `index.html`
    file and the `shark-movies.html` file. We''ll give it a class of `mobile-menu-icon`;
    that''s going to be important:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing shows up in the browser when we apply this because this is simply an
    empty `div` tag. Let''s use a background image to add the icon. We''re not going
    to put this in a media query; we''re actually going to move all the way up to
    where the nav originally sits in the CSS and add this rule set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We already have this image sitting in our images folder. We''re using zero
    and zero as our background position and no-repeat to make sure that this image
    doesn''t automatically repeat itself. Still nothing will show up in the browser
    unless we add a width and height. We know the image is `30px` wide and `26px`
    tall, so we''ll use those exact dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we save and refresh, we can see the three bar icon sitting at the
    top of the browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We also want to move it to the right and give it some space from the edges
    using some margin top, right, and bottom. We can also change the cursor, so this
    way it has a different look to it. Let''s add these properties to `mobile-menu-icon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we refresh the browser, we can see that we have just a regular cursor
    hovering over the icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we refresh, it moves over to the right and now it has a pointer type
    of a cursor indicating that it''s clickable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Obviously, we won't see this on mobile devices but desktop devices or desktop
    browsers; that's kind of a little nice thing to have.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s hide the menu by default. Instead of using `display: none`, which,
    as I mentioned earlier, is not great for accessibility reasons, let''s explore
    another technique that hides the content more creatively so screen readers can
    still find and announce it. We''ll go back down inside of our media query, inside
    `.primary-nav`. We''re going to say the height of this element is zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00277.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There you go. Now what we want to do is activate that menu on a click.
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery to trigger the menu on a click
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this stage, we have to link to jQuery and our own JavaScript file. We''ll
    do this at the bottom of the HTML, just above our closing `</body>` and `</html>`
    tags. Copy a link to the jQuery CDN that''s hosted on Google''s site. Below this,
    add a link to our own JS file. We''re going to put this file in the `js` folder
    and we''re going to name that file `scripts.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Also, let's copy this to the same place in the `shark-movies.html`. Let's create
    that new JavaScript file as well.
  prefs: []
  type: TYPE_NORMAL
- en: In Sublime Text an easy way to create a new file, is to use *Cmd* + *N* (on
    Mac) or *Ctrl* + *N* (on Windows). *Cmd* + *S* (on Mac) or *Ctrl* + *S* (on Windows)
    will let you save name and save the file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00278.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll save it in the `js` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00279.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We'll name the file `scripts.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, great, now let''s write some jQuery. Don''t worry if everything here
    doesn''t make too much sense to you. I''m not going to go into much detail as
    this topic is beyond the scope of this book, but it''s needed for our responsive
    design. What we''re going to paste here to our new `scripts.js` file is a function
    that fires when the DOM is ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to put the code we write, inside this function. This simply tells the
    script to wait for the web page to be ready before the code inside it gets executed.
    It''s kind of just standard fair for jQuery. So, let''s paste it in our function
    as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'First, what we have here is a jQuery function that''s targeting the `mobile-menu-icon`
    class specifically when you click on that element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that element is clicked, two lines of code are executed. We''re going
    to hone in first on the `primary-nav` and toggle a class called `active`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if you click on the hamburger menu, it''s going to add a class of `active`
    to `primary-nav`. If you click on it a second time, it''s going to remove it and
    kind of keep doing that for us, which is nice. The next line is targeting `$(this)`.
    Here, `$(this)` refers to whatever we''re clicking on. In this case we''re clicking
    on `mobile-menu-icon` and toggling a class called `open` on it. Looking at the
    mobile menu icon and the `primary-nav` in DevTools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code line in DevTools is highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00281.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Both of these should get the classes added. When we click on the hamburger
    menu icon, we see the `mobile-menu-icon` gets the `open` class and the `primary-nav`
    gets the `active` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we click on it again, they both disappear. So now we can go ahead and
    target those classes how we need to. Let''s go back to our CSS. We want to target
    the `mobile-menu-icon` in it''s open state. So we add that selector to the nav
    section of the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'All we''re going to do is just change the background image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we click on the hamburger icon, we get the x icon, and when we click
    on it again, we get the menu icon. So that''s good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we want to target the `primary-nav.active` selector, so let''s add that
    to our CSS, and give it some height:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we click on the icon, we get our menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we click on it again, it disappears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the moment, the image appears and disappears immediately, so we want to
    add a transition to that. Let''s go to `.primary-nav` and add a transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We now should have a silky smooth transition, where the hidden navigation slides
    down and up as we click on the menu icon.
  prefs: []
  type: TYPE_NORMAL
- en: Our mobile navigation is done, with quite a bit of CSS and a touch of JavaScript,
    and our site is widely responsive now. There's just one thing we have to do –
    we need to test our site on a mobile device. We'll notice that the result is very
    different than when we resize our browser to the width of a phone or tablet. Luckily,
    the solution is very simple – the `viewport` meta tag.
  prefs: []
  type: TYPE_NORMAL
- en: Viewport meta tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are just about done with our responsive site. We have everything in place,
    except that we haven't actually tested it on a mobile device yet. In this section,
    let's test our design using Chrome's mobile device simulator and then look at
    and try to understand the `viewport` meta tag.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our responsive design on a mobile device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One way to test on a mobile would be this – make your site live and test on
    an actual phone or tablet. An easier way to do a simple test on a phone (but possibly
    slightly less accurate) is to use Chrome''s Device Simulator. Within DevTools
    there is a devices icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on that, you''ll be able to choose a phone. We can see our site,
    but it doesn''t look similar to when we just minimized our browser window to be
    about the size of a phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What''s happening is that most mobile devices are going to try and shrink your
    website to fit on the phone, and then if your site isn''t responsive, it will
    look like the desktop version, only much smaller. So one noticeable thing is I''m
    not seeing mobile navigation. There is a very simple solution – the `viewport`
    meta element. I''m going to copy and paste this into both the `index` and `shark-movies`
    pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s just a `meta` element with a name of `viewport`; we''ll come back to
    this in a second. Now, look what happens when we refresh the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We are actually getting the mobile version, so this looks a lot better and it
    fixed the problem we were having.
  prefs: []
  type: TYPE_NORMAL
- en: The anatomy of the viewport meta tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s examine this meta tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I''ve provided the name attribute with a value of `viewport`. Then, I
    have a `content` attribute with a couple of different things provided inside of
    it. The first thing is `width=device-width`. This basically means "please don''t
    scale my page down on mobile devices because I''m handling that with media queries.
    Thanks!" The second thing is `initial-scale=1.0`, which basically says this –
    size it to exactly the width of the device and nothing more. Lastly, we have the
    `minimum-scale=1.0`. This helps when you rotate your phone so the website stays
    exactly the width of the device after the width of the device is changed from
    *portrait* mode to *landscape* mode and vice versa. There''s more to the `viewport`
    meta tag. We could add `user-scalable=no`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `user-scalable=no` term doesn't allow the user to zoom in or out on their
    phone. Sites that have this can be very annoying, which is why we're not going
    to include it on our site.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, I recommend adding the `viewport` meta tag to your site's boiler
    plate to use it on every site. Also, there is no substitute for actual device
    testing as an actual phone and an emulator is never quite the same.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the core concepts of responsive web design that
    will allow you to make your sites look good on any device. You learned that fluid
    grids and flexible images are the first steps to get a site to fit all screen
    sizes. We now understand how media queries can make sure the site looks good at
    narrower widths. We also created a mobile menu, using jQuery to trigger the menu
    on a click. Finally, we tested our design on Chrome's mobile device simulator
    and learned how to use the `viewport` meta tag to ensure our site is responsive
    on mobile devices. I strongly urge you, when employing these techniques yourselves,
    to consider the mobile experience from the very beginning, especially in the design
    process. In the next chapter, we will discuss web fonts.
  prefs: []
  type: TYPE_NORMAL
