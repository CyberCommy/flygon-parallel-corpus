- en: Chapter 6. HTML5 Frameworks and Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most exciting aspects of working with any programming language is
    discovering new libraries and frameworks which can be utilized to extend and simplify
    the code that drives your applications. With the rise in popularity surrounding
    HTML5 development on many different platforms and devices, the amount of code
    that has been made publicly available to aid anyone with their HTML5 development
    has grown at an outstanding rate. In this chapter, we will overview some of the
    most popular libraries and frameworks, which you can utilize at any time to not
    only save you time, but also allow you to focus more on your user experience rather
    than writing complex JavaScript to work within every modern browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: How frameworks and libraries can make your life easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things we can create with a framework or library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of the ever-popular jQuery library and jQuery mobile framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building **HTML** pages with the **HTML5** Boilerplate template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating responsive unified page layouts with Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating your content using familiar tweening engines with GreenSock's Animation
    Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing your JavaScript in the popular **MVC** structure with `Backbone.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming hardware-accelerated 3D graphics with WebGL and `Three.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of JavaScript compilers by checking out Google's V8 project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing JavaScript to the limits of application development with `Node.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How frameworks and libraries can make your life easier?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From an outsider's or non-developer's perspective, the idea of using someone
    else's code within your project may bring up many negative connotations. If you're
    using the code that has been created and freely distributed by someone you don't
    know, how can you trust that it performs as advertised and won't show malicious
    functionality? Traditionally, when importing libraries and using frameworks in
    any programming language, only a small fraction of the entire code base will be
    utilized. This results in a larger overhead and possible implication on application
    runtime execution speeds. As valid as all of these arguments are, many of the
    popular concerns around using external libraries and frameworks have been solved.
    The concept of using external resources within **HTML5** projects has become so
    common that JavaScript has easily become the most popular programming language
    shared on the social coding website GitHub ([https://github.com/languages](https://github.com/languages)).
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to sites such as GitHub ([http://github.com](http://github.com)), the
    concept of sharing and contributing to open source projects has exploded. With
    the aid of external libraries and frameworks, developers can easily move from
    a concept or an idea in their mind to having a prototype built in a matter of
    minutes to hours. Developers can also focus more on the actual concept integration
    rather than dealing with small issues such as browser optimization and platform
    support. Therefore, as the environment around developers expands and the open
    source projects that back your projects grow, upgrading your external dependencies
    will result in having the latest and greatest support for your applications' feature
    set.
  prefs: []
  type: TYPE_NORMAL
- en: What can I do with JavaScript frameworks and libraries?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you have seen in the chapters up to this point in the book, the support
    for JavaScript within modern web browsers is getting better every day. The idea
    of moving the entire typical application flow for all application types to the
    Web is becoming more of a reality as time passes. JavaScript is now starting to
    make its way into operating system applications on both desktop and mobile. With
    this new reach to so many platforms, JavaScript can do many things you may not
    even be aware of at this point in time. As a developer with experience in creating
    Flash applications, you may find that you will have another upper hand in terms
    of moving to **HTML5** when it comes to understanding and implementing many of
    the new and interesting JavaScript APIs. From microphone and camera integration
    to multi-touch gestures on a touch-enabled device, the amount of things you can
    do with JavaScript is growing every day. To get you a little more excited about
    what is possible, here is a short list of some of the great things the HTML5 applications
    can do:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically control **CSS** properties to create 2D and 3D animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time audio and video streaming from the client camera and microphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render 3D graphics and high frame rate with hardware acceleration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile the JavaScript directly to the machine code to be run as a server or
    application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the right library or framework for your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to finding the right external resources to include into your project,
    it can become a tedious task of sorting through projects as all seem to do the
    same thing. With the current popularity of JavaScript development, one can only
    expect that this issue will continue to worsen as more and more developers publish
    their projects. Thankfully the development community is on your side! So where
    does one go to find the latest and great open source projects to use within their
    **HTML5** projects? Well, as with anything on the Internet, there is no one-stop
    shop for finding all of these available projects. However, as the time passes,
    more and more projects are being hosted on GitHub ([http://github.com](http://github.com)),
    which easily allows the developers to share and contribute to projects while utilizing
    the Git version control system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best aspect of social coding websites such as GitHub when attempting to
    find new projects is not only the ability to sort projects by specific programming
    language, but by the current popularity of the project as well ([https://github.com/explore](https://github.com/explore)).
    GitHub ranks project popularity by the number of other users who watch, fork,
    and contribute to the project in question. So just by sorting those values, countless
    popular and up-to-date projects will be displayed. Of course, using the site search
    will only refine your results when looking for specific topics and platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding the right library or framework for your project](img/3325OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So after some digging around, you may have found a couple of libraries or frameworks
    that you consider to be an appropriate solution to your needs. The next decision
    is narrowing down the selection to something you can start with. So how do you
    choose? Well, obviously there is no simple answer to this question either. However,
    there are some important considerations worth making prior to downloading and
    implementing the library or framework you have located. The first consideration
    should always be what your expected end result is. If you are just having fun
    writing the code for yourself to learn about new frameworks, you pretty much have
    free rein to download and test anything you wish. If you are considering using
    this code for professional use or a project that may be open to public, spending
    some time on researching some more specifics about the project in question will
    help you keep out of trouble down the road. If you happen to find an open source
    project of interest but the project contains little or no development activity,
    be it bug fixes or updates, chances are the development team behind it has moved
    on to new projects. Therefore, the version of code you will download and use will
    require you to maintain and update it in order to implement and use it without
    any issues. Chances are if the developer who created the project in the beginning
    has abandoned it, they won't be coming back anytime soon to specifically help
    you with your issues. On the other hand, if you are looking at a project that
    has just been born or is still in early development, chances are if you implement
    the project into yours, you will need to manually correct any critical issues
    in the dependencies back into your project whenever they are made. Although this
    is typical of most development situations, it is always worth keeping in the back
    of your mind during the early stages (picking and choosing external assets) that
    you may use this code in the lifetime of your project.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep you updated with some features of what is out there, let's
    overview some of the great open source projects waiting to be used by you in your
    next project.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no way we can start off with the list of JavaScript libraries without
    starting with jQuery. Up to this point in this book, we have yet to use jQuery
    in any of our examples. However, if you have spent any time looking into web development
    prior to reading this book, chances are you have already heard of this project.
    Originally released in 2006, jQuery has risen up to easily become the most popular
    JavaScript library in use as (at the time of writing this book) more than 55 percent
    of the top 10,000 most visited websites on the Internet. Due to the overwhelming
    use of jQuery in projects from big to small scattered all over the Internet, it
    has become an almost essential skill in the **HTML5** developer's arsenal.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To keep you updated with everything related to jQuery, head over to the project
    website [http://jquery.com](http://jquery.com).
  prefs: []
  type: TYPE_NORMAL
- en: Of course with the overwhelming popularity jQuery has had, comes the overwhelming
    amount of documentation, examples, and tutorials for using it. Therefore, rather
    than dedicating a vast amount of time looking at all of the features in jQuery,
    we will just overview the fundamentals of how it works and what you can do with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with all the topics in this book, if you are so inclined to learn more,
    a quick Google search will be extremely helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![jQuery](img/3325OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So what actually is jQuery? Well, jQuery is a relatively small JavaScript library
    to aid in all sorts of common JavaScript development tasks and issues. With easily
    selecting elements within your document, creating and handling events of all sorts,
    animating elements within your document, calling and retrieving external data
    with Ajax, jQuery can give you a much simpler, easy-to-use, and unified syntax
    that will work across a ton of web browsers. The best part about jQuery is that
    it can do all of this work with only the cost of importing a JavaScript file that
    is less than 50 KB.
  prefs: []
  type: TYPE_NORMAL
- en: Putting jQuery into action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with all JavaScript projects, the best way to understand jQuery is by example.
    So let's quickly touch on how to properly add jQuery into your project as well
    as how to start using its functionality within your code.
  prefs: []
  type: TYPE_NORMAL
- en: It all starts by heading over to the jQuery project website to obtain the latest
    stable version of the project ([http://jquery.com](http://jquery.com)). It is
    probably worth noting that with almost all the actively developed open source
    projects, you will find a number of different build types available for you to
    download and use. Generally, when visiting a project website such as the jQuery
    website, you will usually find a link to download the latest stable release of
    the project. Stable releases of the actively developed projects are generally
    not the latest versions, but the stable version is one that is tested and approved
    to be used by the public. As the contributions to the project continue to roll
    in from the developers, they will continue to roll in until the development team
    has approved the current code base to be ready for public usage. Therefore, the
    entire time between each version release of the software, there will be a development
    version of the project, which in many cases you can also download and use, of
    course with the known possibility of encountering new and undocumented issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reaching the jQuery download page ([http://jquery.com/download](http://jquery.com/download)),
    you will have the option of downloading either the compressed or uncompressed
    version of the current releases. The reason for compressing the code is to keep
    file size down and allowing for faster load times when requested by your web server.
    Compressing or condensing JavaScript is actually something you can easily do with
    your code and we will continue to dig deeper into that topic in the later chapters.
    For now, you can go ahead and save either of those jQuery source JavaScript files
    on your computer, preferably within the directory you will be creating your **HTML5**
    project. Once you have created an empty HTML document, importing jQuery is as
    simple as importing any other external JavaScript document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With that hard work completed, you can now utilize all of jQuery's functionality
    within your project. However, there is a key place you will usually need to start
    from and that is controlling the point at which your code is ready to be executed.
    Up to this point, we have used a number of common techniques to accomplish this
    task such as setting the `body onload` parameter to a JavaScript function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or setting an `onload` event on the `window` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'One issue with this way of calling your JavaScript is the fact that this way
    of waiting for your document to load includes waiting for all the image assets
    to be loaded including uncontrolled external assets such as banner ads. Therefore,
    jQuery has created its own document-ready event handler syntax for circumventing
    this issue. Generally with all jQuery-based projects, the first snippet of code
    to append will be the document ready handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Selecting elements with jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the greatest aspects of jQuery is its selector engine, otherwise known
    as Sizzle ([http://sizzlejs.com](http://sizzlejs.com)). What makes the selector
    engine so great is how easy it makes the entire development process when dealing
    with interacting elements within your HTML document. Consider our working example
    with some simple content additions within the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As simple as this page layout is, each of the elements that make up the page
    can be easily controlled through the code by using jQuery selectors. To append
    an event listener to our link to Google, we can add it within our document ready
    callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Although the preceding example is very simplistic, there are a couple of key
    aspects, which should be covered right off the bat. jQuery selector syntax relies
    on the `$()` syntax. In case of our example, within the selector syntax brackets,
    we supply the parameter "`a"` to select all of the `<a>` element tags within the
    body of our document. Just selecting an element isn't going to get you too far;
    therefore, the next step in the example is to chain a click event listener to
    the selected elements. Of course the click event is far from being the only available
    event you could apply to an element, you can reference the event documentation
    to see the entire list ([http://api.jquery.com/category/events](http://api.jquery.com/category/events)).
    The final step is to define the method to be used on event callback, and in our
    example, we have simply defined the function directly into the callback parameter.
  prefs: []
  type: TYPE_NORMAL
- en: With this change appended, saved, and then reloaded within a browser, the resulting
    action will be an alert dialog displayed when the link is clicked, followed by
    the page location ([http://google.com)](http://google.com)). As you can see, our
    event listener has been fired before the predefined action of moving to the referenced
    **URL** in the anchor tag. The selector engine used in tandem with the vast amounts
    of jQuery events allows you to control a ton of user and web interactions that
    can occur within your pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding the predefined actions is easily done as well. As you can see within
    the callback function defined in our example, when it is called, it passes the
    event variable into the method. This event property is used to control the event
    and can easily be manipulated or completely overridden:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: By calling the `preventDefault()` method on the event object, we can disable
    the default action of the event and use our own code to control the result.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling CSS via jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another great aspect of jQuery is the ability to easily control the look and
    feel of your elements with CSS3 properties. Getting and setting CSS values on
    any elements is a breeze when using jQuery selectors and CSS methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding example, setting the CSS properties for the
    width and height of a specific element is pretty straightforward. We could simplify
    these two lines of CSS property updates into one by passing the CSS properties
    to an object rather than passing them independently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It is the equivalent of appending the following within your document''s CSS
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: CSS manipulation in jQuery isn't just for setting the width and height of an
    element in your document. jQuery now has full support for CSS3 properties, which
    include properties such as rounded corners, text effects, opacity, shadowing 2D
    and 3D transformations, and filters.
  prefs: []
  type: TYPE_NORMAL
- en: CSS animations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since controlling CSS properties for pretty much any element via jQuery is possible,
    so is the ability to easily animate them as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before looking at some examples, there are some important points to note. As
    mentioned in [Chapter 2](ch02.html "Chapter 2. Preparing for the Battle"), *Preparing
    for the Battle*, and [Chapter 3](ch03.html "Chapter 3. Scalability, Limitations,
    and Effects"), *Scalability, Limitations, and Effects*, when covering CSS properties
    and their values in comparison to the ActionScript 3 API, the values when positioning
    elements within the document are not based on the traditional x and y value set.
    Rather when animating the position of an element, the element position value should
    be noted to properly define the right values to move an element when you intend
    for it to move around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Requesting external data with jQuery Ajax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Thanks to the built-in `URLLoader` and `URLRequest` classes available in ActionScript
    3, requesting external data either local to your project or external on the Web
    is pretty straightforward. A `URLLoader` is created, along with a `URLRequest`
    object containing the path reference to the data. Finally the `URLRequest` object
    is passed into the loader object and the `load` method is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Of course to finish this example properly, you would need to add event handlers
    to catch the return of the data and know when you can begin manipulating or utilizing
    it. Nevertheless, the concept of calling and retrieving external data from your
    application is probably not new to you.
  prefs: []
  type: TYPE_NORMAL
- en: When developing your applications in JavaScript, the goto for this type of functionality
    is **AJAX**. **AJAX** (**Asynchronous JavaScript and XML)**, is the concept of
    exchanging data with your web server while the client is using your web page without
    the need for ever reloading the page. The use of **AJAX** on the Web today is
    so widespread that it is almost impossible to go a day without utilizing it in
    one of the many websites or services you reply on. A perfect example of this is
    the infinite scrolling when viewing your Facebook Timelines or Twitter Feeds.
    As you scroll down the page viewing content, the JavaScript running under the
    hood detects you are getting to the bottom of the page and calls the server for
    more data to continually populate the list. Traditionally, this would be done
    by applying the data to multiple pages and requiring the user to refresh the page
    for each view.
  prefs: []
  type: TYPE_NORMAL
- en: So what can jQuery do to aid in the development of your application's **AJAX**
    functionality? Well, within the jQuery library are a number of methods specifically
    designed to deal with the **AJAX** requests and request types.
  prefs: []
  type: TYPE_NORMAL
- en: 'In its most basic form, the jQuery `load` method can retrieve external data
    and place it within a selected element all in a single line of JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Of course the external asset does not need to be an **HTML** document. **XML**,
    JavaScript, JSON, Plain Text, and HTML documents are all supported within AJAX
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Understandably you probably don''t always want to just place the incoming data
    from your **AJAX** request right into your document, so a response handler is
    usually commonly placed amongst these types of calls. This can be achieved by
    using the **AJAX** method itself in a self-instantiating jQuery syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now with the data returned, you can easily manipulate and verify the returned
    data from the **AJAX** call before assuming it is ready to include within your
    document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data can also be supplied with the call for external data. Depending on the
    requirements by the script in the referenced document, you can choose to send
    data over an **HTTP** GET request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can choose to send data over an HTTP POST request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: jQuery Mobile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the recent past, the team behind jQuery has released jQuery Mobile ([http://jquerymobile.com](http://jquerymobile.com)),
    which creates a unified **HTML5** user interface for developers to build the content
    on, and will be properly displayed over a wide range of modern mobile devices.
    Just like jQuery itself, jQuery Mobile is extremely lightweight and even comes
    with prebuilt packaged themes to be used within the themeable element designs.
    jQuery Mobile aims to ease your mobile development process by allowing you to
    focus more on your application content rather than writing special shims and conditional
    code for browser support. Updates are released from the development team at a
    pace that is able to keep up with the astounding speed of the mobile device marketplace.
    Therefore, you can write mobile web applications that will run on the maximum
    number of devices possible, without having to target each device specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![jQuery Mobile](img/3325OT_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since its initial release, jQuery Mobile has grown to be used by big and small
    websites throughout the Web. The core aspects of the jQuery Mobile framework include
    the usage of pages, dialogs, toolbars, listviews, and buttons. By developing your
    web pages and content around these core elements within the framework, you can
    layout your pages for mobile without ever needing to open Photoshop.
  prefs: []
  type: TYPE_NORMAL
- en: 'jQuery Mobile makes great use of Custom Data Attributes, a new feature within
    **HTML5**. If you examine the example multipage jQuery Mobile layout below, you
    will see many element properties that use the `data-*` syntax. These are the Custom
    Data Attributes that anyone can now implement into their **HTML5** project. They
    can have any string, which is at least a single character and can be utilized
    to easily declare values when setting element properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this single **HTML** file is actually two pages long separated
    into DIV elements with the `data-role="page"` element. Now when the jQuery Mobile
    framework loads the **HTML** file containing these two pages, only the initial
    page will display and the second will wait for user interaction to slide into
    view. Within the first page you can see that the link to our second page is actually
    just an anchor tag, as it uses the `#` character prior to referencing the ID of
    another page within the current **HTML** document. To further demonstrate this
    difference, there is a second link to the third page within the initial pages
    navigation, which links out to an external **HTML** document in the traditional
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, when a new page is requested, the data is loaded (if it hasn''t
    been already) and displayed within a DIV element, which is actually out of view
    to the end user. When the loading of data and document preparation is completed,
    the new page then animates from right to left into the visible display of the
    user. This content animation is typical of many modern mobile device application
    user interfaces therefore making your application more familiar to your end user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![jQuery Mobile](img/3325OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the easiest and most refined examples of jQuery Mobile in action is
    the documentation for the framework. As you can see in the preceding screenshot,
    by default, jQuery Mobile''s user interface looks very mobile-friendly. The buttons
    are big and easily stretch to fit the page, allowing the users to easily select
    menu items without worrying about a misclick. Header and paragraph text is easy
    to read and positioned in a pixel perfect manner. Icons are added to specific
    elements within the documentation navigation. What isn''t visible in a printed
    screenshot is the responsiveness of the layout. To better illustrate the importance
    of responsiveness on mobile, here is a screenshot of the same jQuery Mobile documentation
    webpage in an even larger window size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![jQuery Mobile](img/3325OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the same page has now responded to the larger browser window
    size and reoriented the page layout to better fit the visible display area. Rather
    than have multiple designs for the same page to have displayed on different browser
    sizes, jQuery Mobile uses **CSS** Media Queries to define the current viewport
    size and orient the page content to fit properly. The greatest part of this process
    when building a site with jQuery Mobile is the fact that you don't need to bother
    writing a single line of **CSS** or define special **CSS** Media Queries yourself.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Boilerplate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Libraries like jQuery are great for aiding you in coding your JavaScript with
    ease but getting your project up and running is a different question. Page layouts,
    browser failsafes, and tracking codes are usually all the things you will eventually
    add to your project and these are just some of the great features within the **HTML5**
    Boilerplate ([http://html5boilerplate.com](http://html5boilerplate.com)). The
    HTML5 Boilerplate isn't technically a library or a framework, as at its core,
    it is simply a starting point for creating HTML5 documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, because of its simplicity, eagerness to stay up-to-date with all the
    changes around the Web, and a large group of open source contributions behind
    it, this **HTML5** template is a great start when working on any project big or
    small:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML5 Boilerplate](img/3325OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Upon downloading the latest version of the **HTML5** Boilerplate from the project
    website, you will find a collection of files that not only includes your basic
    ready-to-go `index.html` file and the file's references within, but a group of
    other common files usually found within the base level website directory on the
    public web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand exactly what this template looks like and what it actually does
    for you, let''s take a quick glance at the following default `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this template HTML file is doing quite a bit and thankfully
    it is extremely well documented. From top to bottom, this example is full of browser
    checks and failsafes, references to website icons for web and mobile platforms,
    references to Modernizr to clean and set the development environment to a unified
    platform to start from, and references to jQuery and default code including Google
    Analytics visitor tracking.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Boilerplate is developed under the MIT license and even includes some
    refined and optimized web server configurations to use if you are interested in
    streamlining the way your web server delivers its content.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re like me and enjoy writing code rather than dealing with designing
    and creating pages in Photoshop, you may be very interested in Bootstrap, created
    by two Twitter employees. Bootstrap is an HTML5 framework designed to allow developers
    to easily create powerful and responsive page layouts and designs based on a 12-column
    grid system. With support for rendering your page layouts properly on all modern
    devices and browsers, Bootstrap cuts out much of the need to write hours of CSS
    and JavaScript in order to properly get your content displayed in a universal
    manner for all the users, no matter how they are attempting to view your content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap](img/3325OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Getting up and running with a new project developed with Bootstrap, like many
    of the projects covered in this chapter, is painfully simple. Simply head over
    to the project website at [http://twitter.github.com/bootstrap](http://twitter.github.com/bootstrap)
    and download the latest version. Once downloaded and unarchived, move the downloaded
    directory contents into the root of your project directory. You will notice that
    the downloaded Bootstrap files do not contain an HTML file for you to begin working
    from, rather it expects you to generate your own. The reason for this is due to
    the fact that pages are not defined to a specific layout template. Bootstrap utilizes
    the grid layout system to allow developers to easily place their site content
    in the format of a grid to easily allow a properly defined layout that can easily
    respond to dynamic browser window sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap](img/3325OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default bootstrap layout is built on a 12-column grid layout with an infinite
    amount of rows, as an overflow of rows will just result in typical web page scrolling.
    Reviewing the example grid layouts in the preceding image, you can pretty much
    visualize every website you use on a daily basis and how it is arranged within
    a grid like this. Because this grid layout system is so valuable for almost any
    web page design, it can be of use to you on almost every HTML5 project you encounter
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: If you are still not convinced that Bootstrap is a viable solution for your
    website, head over to the **Examples** section of the Bootstrap project website
    to check out the latest list of popular websites that are using this project [http://twitter.github.com/bootstrap/getting-started.html#examples](http://twitter.github.com/bootstrap/getting-started.html#examples).
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap add-ons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the popularity of Bootstrap growing at such a fast rate, the amount of
    user contributions has begun to follow suit. Many of these third-party external
    plug-ins and features can be added on to the existing Bootstrap setup, to extend
    its base functionality. Let's take a quick glance at some of the most popular
    of these projects to give you some sense of what is available.
  prefs: []
  type: TYPE_NORMAL
- en: StyleBootstrap.info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although Bootstrap comes packaged with a number of different color choices to
    choose from when creating elements, the chance you would want to further that
    level of customization is pretty high. `StyleBootstrap.info` ([http://stylebootstrap.info](http://stylebootstrap.info))
    is a great online resource to easily customize the look and feel of your Bootstrap
    setup with a simple click and select user interface. Once you have completed your
    design, the site will generate the necessary **CSS** files for you to download
    and include within your project.
  prefs: []
  type: TYPE_NORMAL
- en: Font Awesome
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another great library that extends the already existing feature set within
    Bootstrap is Font Awesome ([http://fortawesome.github.com/Font-Awesome](http://fortawesome.github.com/Font-Awesome)).
    Although it may sound like this is a new font addition to the framework, it is
    actually an additional icon set, which can be easily implemented into your design.
    The reason for the referencing to the idea of a font is that the icon set is actually
    implemented within a packaged font to enable a scalable vector graphic rather
    than the typical bitmap graphic found in **HTML** documents. Since you''re coming
    from a Flash background you probably already understand how important vector graphics
    can be when scaling images, you can probably see why using the font packaging
    concept makes for an extremely easy-to-use library. All of the icons within the
    package have specific names and can be easily implemented into your page by calling
    that unique icon name as a class in an **HTML** element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Font Awesome](img/3325OT_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, which displays only a small section
    of the available icons in the package, each icon has a specific name. As specified
    by the project documentation, the best way to append an icon into your document
    is to call the unique icon name within the class attribute of the `<i>` or italics
    **HTML** tag. As an example, if we wanted to place a book icon beside the word
    "Books" in our document, the HTML syntax would be represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the italics tag can be placed within almost any HTML element, this allows
    you to place the icon wherever you need, like inside a Bootstrap customized button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Again, it is worth noting that since font packages are saved in vector formats
    to allow for dynamic font sizes, the icons within the default Bootstrap setup
    as well as this project are all in vector format as well. To change the size of
    an icon within your document, you can just set the `font-size` property or append
    it into an element that already has the font styles configured.
  prefs: []
  type: TYPE_NORMAL
- en: bootstrap-wysihtml5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you''re planning on building web applications that require large amount
    of text-based user input, the Bootstrap **WYSIWYG** (What You See Is What You
    Get) library is worth a look ([http://jhollingworth.github.com/bootstrap-wysihtml5](http://jhollingworth.github.com/bootstrap-wysihtml5)).
    With only a few lines of code, you can easily implement elegant tool-based input
    forms for your users to construct formatted **HTML**-based text content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![bootstrap-wysihtml5](img/3325OT_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although simple, this is just another one of the many great examples of what
    is freely distributed on the Internet and ready for you to use in your projects
    at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Hammer.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are planning on moving into the fast moving world of mobile web development,
    dealing with new events such as touch interaction is going to be a must. Although
    traditional JavaScript mouse events will translate directly to the basic touch
    events when used on a touch-enabled device, events such as swiping and pinching
    are not common to traditional desktop user interaction ([http://eightmedia.github.com/hammer.js](http://eightmedia.github.com/hammer.js)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hammer.js currently supports tap, double tap, swipe, hold, pinch (transform),
    and drag events, and is easily implemented into any preexisting website regardless
    of whether you are using jQuery or not. Due to the library''s simplicity, the
    resulting file size is only 2 KB when minified and compressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: GreenSock Animation Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have spent enough time developing Flash applications, chances are that
    you have ran into the GreenSock TweenMax or TweenLite library before. The TweenMax
    and TweenLite library easily allows you to tween your Flash objects around your
    stage with support for ActionScript 2 and ActionScript 3 projects. GreenSock has
    now produced and released a pure JavaScript implementation of their library with
    no dependencies that brings many of the great familiar features to your HTML5
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: So after looking at the jQuery animation methods and what they can do, why would
    you need to use a library like this? Well, unlike jQuery, GSAP JS is built to
    do one and only one thing very well. Features like sequencing animations to enable
    properly timed animations, overwrite control to stop running animations at anytime,
    and the ability to animate pretty much anything will extend your web application's
    visual appeal with relative ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the ActionScript companion, the GreenSock JavaScript library ([http://www.greensock.com/v12](http://www.greensock.com/v12))
    contains a ton of great up-to-date documentation and examples that will guide
    you in the right starting direction. In fact, they have specifically created a
    visual jump start guide to easily get you up and running with the library and
    demonstrate the results of the code right in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![GreenSock Animation Platform](img/3325OT_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The best addition to the GSAP JS documentation is the Interactive Jump Start
    Guide that can be found at [http://www.greensock.com/jump-start-js/](http://www.greensock.com/jump-start-js/).
    This simple-to-use, interactive application takes you from never using the library
    before, to understanding exactly what it can do in a matter of minutes; I can't
    stress how great of a feature this is.
  prefs: []
  type: TYPE_NORMAL
- en: Again, if you have had any experience using the GreenSock TweenMax or TweenLite
    libraries in any of your previous Flash projects, you are going to have an extremely
    easy time moving over to GSAP JS. As mentioned, the main issue most ActionScript
    3 developers will face when using this library, is properly dealing with the **CSS3**
    properties, which are supplied for the Tweens to properly run.
  prefs: []
  type: TYPE_NORMAL
- en: Three.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the world of hardware accelerated 3D graphics is to your liking, `Three.js`
    ([http://mrdoob.github.com/three.js](http://mrdoob.github.com/three.js)) is definably
    worth a look. This lightweight 3D library is extremely easy to get up and running,
    and has loads of examples and documentation scattered all over the Web. `Three.js`
    uses not only the `<canvas>` element for rendering but `<svg>`, `CSS3D`, and `WebGL`
    as well allowing it to support a wide range of modern browsers and devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you some appreciation of what `Three.js` can do in print, check out
    some of these beautiful screen captures I took while viewing some example projects
    found on the `Three.js` project website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Three.js](img/3325OT_06_13.jpg)![Three.js](img/3325OT_06_14.jpg)![Three.js](img/3325OT_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshots, JavaScript and WebGL have come
    a long way in a very short period of time. Again, all of these screenshots were
    taken from the examples found on the `Three.js` project website, so be sure to
    head over there and try these out for yourself to get a sense of how well they
    run on your machine and browser. Keep in mind that many of the modern mobile device
    web browsers are begging to have more robust WebGL support, so try it out on your
    phone or tablet as well.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the development of your `Three.js` project, it would be wise
    to make sure you are familiar with many of the common aspects and principals of
    3D programming. At its core, a typical `Three.js` application will include a scene,
    a renderer, a camera, and an object. Each of these elements will work with one
    another to enable the creation of a 3D environment. One of the best introductory
    tutorials to learn about `Three.js` online is the *Getting Started with Three.js*
    article by *Paul Lewis* ([http://www.aerotwist.com/tutorials/getting-started-with-three-js](http://www.aerotwist.com/tutorials/getting-started-with-three-js)).
    In it, he covers all of the principals of 3D programming and how to utilize them
    within the `Three.js` framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without getting into too much detail, as there are already many great books
    and online resources to learn Three.js development, here is a very simple code
    layout for rendering a scene in `Three.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Starting from the top of the preceding `Three.js` code example, we can see that
    initially the stage size is appended to a `WIDTH` and `HEIGHT` variable. These
    properties, which are familiar to every Flash developer define the viewable area
    where the content will be rendered. Following the stage configuration comes the
    initial camera configuration. As the 3D scene is created, the resulting view in
    the rendered frontend will be from the perspective of a camera that has been placed
    in the scene. Just like any other object, the camera can be moved around based
    on x, y and, z values as well as properties such as viewing angle, camera aspect
    and, zooming abilities. After the camera configuration, we need to target a specific
    element within the document to set as our stage, and a `document.getElementById`
    lookup to an element we have already created in our HTML document will do the
    trick. With the configuration values set, and an element selected ready to set
    our scene in, we can actually begin initializing our `scene` element.
  prefs: []
  type: TYPE_NORMAL
- en: Of course `Three.js` projects are not required to be 100 percent JavaScript.
    Once your scene is set up and ready for viewing, moving over to a 3D modeling
    software such as Blender or Maya will allow you to create extremely detailed 3D
    objects, which can be easily imported back into your HTML5 project. As you have
    seen in some of the example images previously, the level of detail that can be
    obtained can be simply amazing.
  prefs: []
  type: TYPE_NORMAL
- en: One final note about working with 3D or WebGL in JavaScript:. the current support
    for WebGL in the browser has been widespread in the desktop environment. You should
    have little or no issue viewing or testing your projects in almost every modern
    desktop web browser; however, you may still find many limitations on mobile browsers.
    Google's Chrome Browser on desktop and mobile is attempting to push the limits
    of WebGL with the advent of the Chrome Experiments site ([http://www.chromeexperiments.com/webgl/](http://www.chromeexperiments.com/webgl/)).
    Containing a ton of great examples and projects, this site can easily let you
    test whatever browser, device, or platform you are running to see how well it
    copes with hardware accelerated graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Long gone are the days of considering JavaScript just as a frontend development
    language used for HTML element manipulation. With the advent of JavaScript compilers,
    some pretty unimaginable things can be done by just writing some JavaScript code.
    Just like the methods you were used to in Flash, where ActionScript is compiled
    into binary packages, JavaScript compilers convert pure JavaScript into machine
    code, which can be run on a computer just like any other application. As far out
    as a concept this may seem, there are actually many great reasons for it and the
    best being for use in the Web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Google's V8 Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In late 2008, Google released the initial version of Chrome and with it came
    the initial release of the V8 engine as well. V8 compiles JavaScript directly
    to native machine code and even optimizes the code when doing so. The result is
    applications that can run just like applications that are written in Python or
    C++. V8 is written in C++ and has been open source and freely available to the
    public since its original release. You can find out more about the Google V8 project
    by visiting the project website at [http://code.google.com/p/v8](http://code.google.com/p/v8).
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Easily one of the coolest new projects to be born from the Google V8 Engine
    is Node.js ([http://nodejs.org](http://nodejs.org)). `Node.js` allows you to write
    server-side applications (usually web servers) in 100 percent JavaScript, something
    typically done in programming languages such as **PHP**, **Perl**, **Python,**
    and even **C** or **C++**.
  prefs: []
  type: TYPE_NORMAL
- en: Like many of the frameworks and libraries covered in this chapter, `Node.js`
    has a massive amount of great documentation and examples all over the Web. However,
    with the speed at which some of the projects are being developed, the documentation
    available can easily become outdated. One of the best resources for `Node.js`,
    which is constantly updated to the current stable release of the project, is [http://nodeguide.com](http://nodeguide.com)
    created by *Felix Geisendörfer*, one of the early core contributors to the `Node.js`
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Since `Node.js` is made to run server side, rather than including it into your
    **HTML5** project, you must install it on a computer to be run as an application.
    So after downloading and installing the `Node.js` files on the machine of your
    choice, you can now run your `Node.js`-ready JavaScript files from the command
    line as you would any other command-line application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the basic usage of how to start a `Node.js` application, we
    will use the popular `Node.js` web server example, which can be found within the
    official documentation. Create a new JavaScript file with the filename `example.js`
    and populate it with the following JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The first line of the example code is importing the **HTTP** module within the
    `Node.js` framework. With the HTTP module included, the `createServer` method
    is called with a success function supplied. The function contains a simple "Hello
    World" greeting and has the `Content-Type` set to `text/plain`, so the browser
    viewing it knows it is just plain text. Finally, the `listen` method is chained
    into the server declaration to specify the port, which the **HTTP** server will
    listen for requests on.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `example.js` file saved, open the command line on your system running
    `Node.js` and point the current working directory to the location of your new
    JavaScript file and type the following command. Executing the file with `Node.js`
    is as easy as referencing the JavaScript file with the *node* application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing this command will result in the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The command line will sit waiting for physical termination. Before stopping
    the server, we have to test to make sure it works. So head over to the URL stated
    in the response after executing the `node` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node.js](img/3325OT_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As simple as this output is, the reality is you just created a simple custom
    web server only using JavaScript. This is just the beginning of what `Node.js`
    has to offer and the best part is many of the great things that can be done with
    `Node.js`, have been, and are available for you to locate and use anytime you
    wish. Rather than spending hours on Google searching for modules to include in
    your project, `Node.js` uses its own system for finding and installing further
    functionality into your `Node.js` server.
  prefs: []
  type: TYPE_NORMAL
- en: Node Package Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are still unsure as to what `Node.js` could do for you, the **NPM**
    (**Node Package Manager**) may be able to help you out. A package manager is an
    online collection of packages available to be downloaded and utilized within your
    node projects with ease. Since `Node.js` is installed on your machine, the package
    manager can do all of the hard work when it comes to checking for dependencies,
    versions, and platform support. To easily search the current `Node.js` **NPM**
    directory, head over to [https://npmjs.org](https://npmjs.org) and browse around
    until you find what you are interested in installing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Node Package Manager](img/3325OT_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Any package that is located in the registry can easily be installed on your
    system by running the install command in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned before, if the package you have requested to be installed requires
    other packages within the registry, they will automatically be downloaded and
    installed as well without you having to dig around to find the proper version
    yourself. As developers work on the packages you may be using and release updates,
    the NPM registry will automatically take care of updating you with the release
    information as well as allow for easy updating of any out-of-date packages you
    may have installed.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting a public Node.js server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since you are required to have a server to run your `Node.js` projects, you
    will need to set up a public facing server to host any projects you wish to be
    open to the Internet. Since installing `Node.js` on your computer for testing
    won''t accomplish this, you will need to either setup your own, with the proper
    networking in place, or pay for this service from a `Node.js` hosting company.
    Since the company you use for your web hosting usually won''t allow you to accomplish
    this, looking into services such as Nodejitsu ([http://nodejitsu.com](http://nodejitsu.com))
    may be of use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hosting a public Node.js server](img/3325OT_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just like a traditional web hosting company, Nodejitsu offers your own public
    facing `Node.js` server, which can be used from any of your web projects online.
    You can always start with a free trial account to get a sense of how the service
    allows you to use your `Node.js` server from anywhere in the world and then move
    into paid accounts if your needs continue.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has only dusted the surface of what is available to you as an **HTML5**
    developer. What has been presented here is a collection of some of the most popular
    libraries and frameworks currently available. The vast amount of amazing code
    that has been publicly released and actively developed on by developers all around
    the world is growing at what seems beyond an exponential rate. Allocating and
    utilizing external assets like those listed in this chapter require you, the developer,
    to understand the implications and benefits of using the library or framework
    prior to implementing them into a publicly available website.
  prefs: []
  type: TYPE_NORMAL
- en: Spending the time to dig around, test, and contribute too many of these projects
    that interest you will not only benefit your existing development skill set, but
    allow you to utilize the best tool for the job at hand. As time passes and the
    landscape of web development continues to evolve, keeping up-to-date with as many
    of these popular libraries and frameworks will always aid in keeping you updated
    with the entire **HTML5** development environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will extend this newly acquired knowledge of HTML5 frameworks
    and libraries into the realm of directly porting your preexisting Flash applications
    into HTML5 web-ready projects.
  prefs: []
  type: TYPE_NORMAL
