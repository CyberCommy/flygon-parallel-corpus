- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building and Consuming Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about learning how to build web services (aka HTTP or REST services)
    using the ASP.NET Core Web API and consuming web services using HTTP clients that
    could be any other type of .NET app, including a website or a mobile or desktop
    app.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter requires knowledge and skills that you learned in *Chapter 10*
    , *Working with Data Using Entity Framework Core* , and *Chapters* *13* to *15*
    , about practical applications of C# and .NET and building websites using ASP.NET
    Core.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building web services using ASP.NET Core Web API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting and testing web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming web services using HTTP clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing advanced features for web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building web services using minimal APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building web services using ASP.NET Core Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we build a modern web service, we need to cover some background to set
    the context for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding web service acronyms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although HTTP was designed originally to request and respond with HTML and other
    resources for humans to look at, it is also good for building services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Roy Fielding stated in his doctoral dissertation, describing the **Representational
    State Transfer** (**REST** ) architectural style, that the HTTP standard would
    be good for building services because it defines the following:'
  prefs: []
  type: TYPE_NORMAL
- en: URIs to uniquely identify resources, like `https://localhost:5001/api/products/23`
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods to perform common tasks on those resources, like `GET` , `POST` , `PUT`
    , and `DELETE` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ability to negotiate the media type of content exchanged in requests and
    responses, such as XML and JSON. Content negotiation happens when the client specifies
    a request header like `Accept: application/xml,*/*;q=0.8` . The default response
    format used by the ASP.NET Core Web API is JSON, which means one of the response
    headers would be `Content-Type: application/json; charset=utf-8` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web services** use the HTTP communication standard, so they are sometimes
    called HTTP or RESTful services. HTTP or RESTful services are what this chapter
    is about.'
  prefs: []
  type: TYPE_NORMAL
- en: Web services can also mean **Simple Object Access Protocol** (**SOAP** ) services
    that implement some of the **WS-* standards** . These standards enable clients
    and services implemented on different systems to communicate with each other.
    The WS-* standards were originally defined by IBM with input from other companies
    like Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Windows Communication Foundation (WCF)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: .NET Framework 3.0 and later includes a **remote procedure call** (**RPC** )
    technology named **Windows Communication Foundation** (**WCF** ). RPC technologies
    enable code on one system to execute code on another over a network.
  prefs: []
  type: TYPE_NORMAL
- en: WCF makes it easy for developers to create services, including SOAP services
    that implement WS-* standards. It later also supported building Web/HTTP/REST-style
    services, but it was rather over-engineered if that was all you needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have existing WCF services and you would like to port them to modern
    .NET, then there is an open-source project that had its first **General Availability**
    (**GA** ) release in February 2021\. You can read about it at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release](https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release)'
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to WCF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Microsoft recommended alternative to WCF is **gRPC** . gRPC is a modern
    cross-platform open-source RPC framework created by Google (unofficially the "g"
    in gRPC). You will learn more about gRPC in *Chapter 18* , *Building and Consuming
    Specialized Services* (available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ) .
  prefs: []
  type: TYPE_NORMAL
- en: Understanding HTTP requests and responses for Web APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTTP defines standard types of requests and standard codes to indicate a type
    of response. Most of them can be used to implement Web API services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common type of request is `GET` , to retrieve a resource identified
    by a unique path, with additional options like what media type is acceptable,
    set as request headers, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: GET /path/to/resource
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept: application/json'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Common responses include success and multiple types of failure, as shown in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Status code | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `200 OK` | The path was correctly formed, the resource was successfully found,
    serialized into an acceptable media type, and then returned in the response body.
    The response headers specify the `Content-Type` , `Content-Length` , and `Content-Encoding`
    , for example, GZIP. |'
  prefs: []
  type: TYPE_TB
- en: '| `301 Moved Permanently` | Over time a web service may change its resource
    model including the path used to identify an existing resource. The web service
    can indicate the new path by returning this status code and a response header
    named `Location` that has the new path. |'
  prefs: []
  type: TYPE_TB
- en: '| `302 Found` | Similar to `301` . |'
  prefs: []
  type: TYPE_TB
- en: '| `304 Not Modified` | If the request included the `If-Modified-Since` header,
    then the web service can respond with this status code. The response body is empty
    because the client should use its cached copy of the resource. |'
  prefs: []
  type: TYPE_TB
- en: '| `400 Bad Request` | The request was invalid, for example, it used a path
    for a product using an integer ID where the ID value is missing. |'
  prefs: []
  type: TYPE_TB
- en: '| `401 Unauthorized` | The request was valid, the resource was found, but the
    client did not supply credentials or is not authorized to access that resource.
    Re-authenticating may enable access, for example, by adding or changing the `Authorization`
    request header. |'
  prefs: []
  type: TYPE_TB
- en: '| `403 Forbidden` | The request was valid, the resource was found, but the
    client is not authorized to access that resource. Re-authenticating will not fix
    the issue. |'
  prefs: []
  type: TYPE_TB
- en: '| `404 Not Found` | The request was valid, but the resource was not found.
    The resource may be found if the request is repeated later. To indicate that a
    resource will never be found, return `410 Gone` . |'
  prefs: []
  type: TYPE_TB
- en: '| `406 Not Acceptable` | If the request has an `Accept` header that only lists
    media types that the web service does not support. For example, if the client
    requests JSON but the web service can only return XML. |'
  prefs: []
  type: TYPE_TB
- en: '| `451 Unavailable for Legal Reasons` | A website hosted in the USA might return
    this for requests coming from Europe to avoid having to comply with the General
    Data Protection Regulation (GDPR). The number was chosen as a reference to the
    novel Fahrenheit 451 in which books are banned and burned. |'
  prefs: []
  type: TYPE_TB
- en: '| `500 Server Error` | The request was valid, but something went wrong on the
    server side while processing the request. Retrying again later might work. |'
  prefs: []
  type: TYPE_TB
- en: '| `503 Service Unavailable` | The web service is busy and cannot handle the
    request. Trying again later might work. |'
  prefs: []
  type: TYPE_TB
- en: Other common types of HTTP requests include `POST` , `PUT` , `PATCH` , or `DELETE`
    that create, modify, or delete resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new resource, you might make a `POST` request with a body that
    contains the new resource, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: POST /path/to/resource
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Length: 123'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Type: application/json'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new resource or update an existing resource, you might make a `PUT`
    request with a body that contains a whole new version of the existing resource,
    and if the resource does not exist, it is created, or if it does exist, it is
    replaced (sometimes called an **upsert** operation), as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: PUT /path/to/resource
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Length: 123'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Type: application/json'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'To update an existing resource more efficiently, you might make a `PATCH` request
    with a body that contains an object with only the properties that need changing,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: PATCH /path/to/resource
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Length: 123'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Type: application/json'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete an existing resource, you might make a `DELETE` request, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: DELETE /path/to/resource
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'As well as the responses shown in the table above for a `GET` request, all
    the types of requests that create, modify, or delete a resource have additional
    possible common responses, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Status code | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `201 Created` | The new resource was created successfully, the response header
    named `Location` contains its path, and the response body contains the newly created
    resource. Immediately `GET` -ing the resource should return `200` . |'
  prefs: []
  type: TYPE_TB
- en: '| `202 Accepted` | The new resource cannot be created immediately so the request
    is queued for later processing and immediately `GET` -ing the resource might return
    `404` . The body can contain a resource that points to some form of status checker
    or an estimate of when the resource will become available. |'
  prefs: []
  type: TYPE_TB
- en: '| `204 No Content` | Commonly used in response to a `DELETE` request since
    returning the resource in the body after deleting it does not usually make sense!
    Sometimes used in response to `POST` , `PUT` , or `PATCH` requests if the client
    does not need to confirm that the request was processed correctly. |'
  prefs: []
  type: TYPE_TB
- en: '| `405 Method Not Allowed` | Returned when the request used a method that is
    not supported. For example, a web service designed to be read-only may explicitly
    disallow `PUT` , `DELETE` , and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `415 Unsupported Media Type` | Returned when the resource in the request
    body uses a media type that the web service cannot handle. For example, if the
    body contains a resource in XML format but the web service can only process JSON.
    |'
  prefs: []
  type: TYPE_TB
- en: Creating an ASP.NET Core Web API project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will build a web service that provides a way to work with data in the Northwind
    database using ASP.NET Core so that the data can be used by any client application
    on any platform that can make HTTP requests and receive HTTP responses:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web API** / `webapi`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.WebApi`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other Visual Studio options: **Authentication Type** : None, **Configure for
    HTTPS** : selected, **Enable Docker** : cleared, **Enable** **OpenAPI support**
    : selected.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `Northwind.WebApi` as the active OmniSharp project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the `Northwind.WebApi` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Controllers` folder, open and review `WeatherForecastController.cs`
    , as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.Mvc;
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.WebApi.Controllers
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '[ApiController'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[Route('
  prefs: []
  type: TYPE_NORMAL
- en: '"[controller]"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecastController
  prefs: []
  type: TYPE_NORMAL
- en: ': ControllerBase'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '[] Summaries = new'
  prefs: []
  type: TYPE_NORMAL
- en: '[]'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Freezing"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Bracing"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Chilly"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Cool"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Mild"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"Warm"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Balmy"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Hot"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Sweltering"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Scorching"'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: ILogger<WeatherForecastController> _logger;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecastController
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: ILogger<WeatherForecastController> logger
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: _logger = logger;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: IEnumerable<WeatherForecast>
  prefs: []
  type: TYPE_NORMAL
- en: Get
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Enumerable.Range(1
  prefs: []
  type: TYPE_NORMAL
- en: ', 5'
  prefs: []
  type: TYPE_NORMAL
- en: ).Select(index =>
  prefs: []
  type: TYPE_NORMAL
- en: new
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecast
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Date = DateTime.Now.AddDays(index),
  prefs: []
  type: TYPE_NORMAL
- en: TemperatureC = Random.Shared.Next(-20
  prefs: []
  type: TYPE_NORMAL
- en: ', 55'
  prefs: []
  type: TYPE_NORMAL
- en: ),
  prefs: []
  type: TYPE_NORMAL
- en: Summary = Summaries[Random.Shared.Next(Summaries.Length)]
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .ToArray();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'While reviewing the preceding code, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Controller` class inherits from `ControllerBase` . This is simpler than
    the `Controller` class used in MVC because it does not have methods like `View`
    to generate HTML responses by passing a view model to a Razor file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `[Route]` attribute registers the `/weatherforecast` relative URL for clients
    to use to make HTTP requests that will be handled by this controller. For example,
    an HTTP request for `https://localhost:5001/weatherforecast/` would be handled
    by this controller. Some developers like to prefix the controller name with `api/`
    , which is a convention to differentiate between MVC and Web API in mixed projects.
    If you use `[controller]` as shown, it uses the characters before `Controller`
    in the class name, in this case, `WeatherForecast` , or you can simply enter a
    different name without the square brackets, for example, `[Route("api/forecast")]`
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `[ApiController]` attribute was introduced with ASP.NET Core 2.1 and it
    enables REST-specific behavior for controllers, like automatic HTTP `400` responses
    for invalid models, as you will see later in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `[HttpGet]` attribute registers the `Get` method in the `Controller` class
    to respond to HTTP `GET` requests, and its implementation uses the shared `Random`
    object to return an array of `WeatherForecast` objects with random temperatures
    and summaries like `Bracing` or `Balmy` for the next five days of weather.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a second `Get` method that allows the call to specify how many days ahead
    the forecast should be by implementing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a comment above the original method to show the action method and URL path
    that it responds to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a new method with an integer parameter named `days` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cut and paste the original `Get` method implementation code statements into
    the new `Get` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the new method to create an `IEnumerable` of integers up to the number
    of days requested, and modify the original `Get` method to call the new `Get`
    method and pass the value `5` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your methods should be as shown highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '**// GET /weatherforecast**'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: IEnumerable<WeatherForecast>
  prefs: []
  type: TYPE_NORMAL
- en: Get
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '**// original method**'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '**return**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Get(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: '**// five day forecast**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '**// GET /weatherforecast/7**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HttpGet(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"{days:int}"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**public**'
  prefs: []
  type: TYPE_NORMAL
- en: '**IEnumerable<WeatherForecast>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Get**'
  prefs: []
  type: TYPE_NORMAL
- en: '**(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**int**'
  prefs: []
  type: TYPE_NORMAL
- en: '**days**'
  prefs: []
  type: TYPE_NORMAL
- en: '**)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**// new method**'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '**return**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enumerable.Range(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**, days).Select(index =>**'
  prefs: []
  type: TYPE_NORMAL
- en: new
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecast
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Date = DateTime.Now.AddDays(index),
  prefs: []
  type: TYPE_NORMAL
- en: TemperatureC = Random.Shared.Next(-20
  prefs: []
  type: TYPE_NORMAL
- en: ', 55'
  prefs: []
  type: TYPE_NORMAL
- en: ),
  prefs: []
  type: TYPE_NORMAL
- en: Summary = Summaries[Random.Shared.Next(Summaries.Length)]
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .ToArray();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the `[HttpGet]` attribute, note the route format pattern `{days:int}` that
    constrains the `days` parameter to `int` values.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the web service's functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will test the web service''s functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio, in **Properties** , open the `launchSettings.json`
    file, and note that by default, it will launch the browser and navigate to the
    `/swagger` relative URL path, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '"profiles"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Northwind.WebApi"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"commandName"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Project"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"dotnetRunMessages"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "true"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '**"launchBrowser"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"launchUrl"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"swagger"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '"applicationUrl"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "https://localhost:5001;http://localhost:5000"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"environmentVariables"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"ASPNETCORE_ENVIRONMENT"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Development"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the profile named `Northwind.WebApi` to set `launchBrowser` to `false`
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the `applicationUrl` , change the random port number for `HTTP` to `5000`
    and for `HTTPS` to `5001` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the web service project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` and note you will get a `404` status code
    response because we have not enabled static files and there is not an `index.html`
    , nor is there an MVC controller with a route configured, either. Remember that
    this project is not designed for a human to view and interact with, so this is
    expected behavior for a web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The solution on GitHub is configured to use port `5002` because we will change
    its configuration later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: In Chrome, show **Developer tools** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/weatherforecast` and note the Web API service
    should return a JSON document with five random weather forecast objects in an
    array, as shown in *Figure 16.1* :![](img/Image00129.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.1: A request and response from a weather forecast web service'
  prefs: []
  type: TYPE_NORMAL
- en: Close **Developer tools** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/weatherforecast/14` and note the response
    when requesting a two-week weather forecast, as shown in *Figure 16.2* :![](img/Image00130.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.2: A two-week weather forecast as a JSON document'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a web service for the Northwind database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike MVC controllers, Web API controllers do not call Razor views to return
    HTML responses for website visitors to see in browsers. Instead, they use content
    negotiation with the client application that made the HTTP request to return data
    in formats such as XML, JSON, or X-WWW-FORM-URLENCODED in their HTTP response.
  prefs: []
  type: TYPE_NORMAL
- en: The client application must then deserialize the data from the negotiated format.
    The most commonly used format for modern web services is **JavaScript Object Notation**
    (**JSON** ) because it is compact and works natively with JavaScript in a browser
    when building **Single-Page Applications** (**SPAs** ) with client-side technologies
    like Angular, React, and Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will reference the Entity Framework Core entity data model for the Northwind
    database that you created in *Chapter 13* , *Introducing Practical Applications
    of C# and .NET* :'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi` project, add a project reference to `Northwind.Common.DataContext`
    for either SQLite or SQL Server, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- change Sqlite to SqlServer if
  prefs: []
  type: TYPE_NORMAL
- en: you prefer -->
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include=
  prefs: []
  type: TYPE_NORMAL
- en: '"..\Northwind.Common.DataContext.Sqlite\Northwind.Common.DataContext.Sqlite.csproj"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Build the project and fix any compile errors in your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Program.cs` and import namespaces for working with web media formatters
    and the shared Packt classes, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.Mvc.Formatters;
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared; // AddNorthwindContext extension method
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs: []
  type: TYPE_NORMAL
- en: System.Console;
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a statement before the call to `AddControllers` to register the `Northwind`
    database context class (it will use either SQLite or SQL Server depending on which
    database provider you referenced in the project file), as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: // Add services to the container.
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddNorthwindContext();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the call to `AddControllers` , add a lambda block with statements to write
    the names and supported media types of the default output formatters to the console,
    and then add XML serializer formatters, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddControllers(options =>
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine("Default output formatters:"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: foreach
  prefs: []
  type: TYPE_NORMAL
- en: (IOutputFormatter formatter in
  prefs: []
  type: TYPE_NORMAL
- en: options.OutputFormatters)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: OutputFormatter? mediaFormatter = formatter as
  prefs: []
  type: TYPE_NORMAL
- en: OutputFormatter;
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (mediaFormatter == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: WriteLine($"
  prefs: []
  type: TYPE_NORMAL
- en: '{formatter.GetType().Name}'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: // OutputFormatter class has SupportedMediaTypes
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'WriteLine("  {0}, Media types: {1}"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: 'arg0: mediaFormatter.GetType().Name,'
  prefs: []
  type: TYPE_NORMAL
- en: 'arg1: string'
  prefs: []
  type: TYPE_NORMAL
- en: .Join(", "
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: mediaFormatter.SupportedMediaTypes));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .AddXmlDataContractSerializerFormatters()
  prefs: []
  type: TYPE_NORMAL
- en: .AddXmlSerializerFormatters();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a command prompt or terminal, note that there are four default output formatters,
    including ones that convert `null` values into `204 No Content` and ones to support
    responses that are plain text, byte streams, and JSON, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'Default output formatters:'
  prefs: []
  type: TYPE_NORMAL
- en: HttpNoContentOutputFormatter
  prefs: []
  type: TYPE_NORMAL
- en: 'StringOutputFormatter, Media types: text/plain'
  prefs: []
  type: TYPE_NORMAL
- en: StreamOutputFormatter
  prefs: []
  type: TYPE_NORMAL
- en: 'SystemTextJsonOutputFormatter, Media types: application/json, text/json, application/*+json'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating data repositories for entities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Defining and implementing a data repository to provide CRUD operations is good
    practice. The CRUD acronym includes the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: C for Create
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R for Retrieve (or Read)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: U for Update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D for Delete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will create a data repository for the `Customers` table in Northwind. There
    are only 91 customers in this table, so we will store a copy of the whole table
    in memory to improve scalability and performance when reading customer records.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : In a real web service, you should use a distributed cache
    like Redis, an open-source data structure store that can be used as a high-performance,
    high-availability database, cache, or message broker.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will follow modern good practice and make the repository API asynchronous.
    It will be instantiated by a `Controller` class using constructor parameter injection,
    so a new instance is created to handle every HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.WebApi` project, create a folder named `Repositories` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two class files to the `Repositories` folder named `ICustomerRepository.cs`
    and `CustomerRepository.cs` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `ICustomerRepository` interface will define five methods, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared; // Customer
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.WebApi.Repositories
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: interface
  prefs: []
  type: TYPE_NORMAL
- en: ICustomerRepository
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> CreateAsync(Customer c);
  prefs: []
  type: TYPE_NORMAL
- en: Task<IEnumerable<Customer>> RetrieveAllAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> RetrieveAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id);
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> UpdateAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id, Customer c);
  prefs: []
  type: TYPE_NORMAL
- en: Task<bool
  prefs: []
  type: TYPE_NORMAL
- en: ?> DeleteAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CustomerRepository` class will implement the five methods, remembering
    that methods that use `await` inside them must be marked as `async` , as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.EntityFrameworkCore.ChangeTracking; // EntityEntry<T>
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared; // Customer
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: System.Collections.Concurrent; // ConcurrentDictionary
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.WebApi.Repositories
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: CustomerRepository
  prefs: []
  type: TYPE_NORMAL
- en: ': ICustomerRepository'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // use a static thread-safe dictionary field to cache the customers
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs: []
  type: TYPE_NORMAL
- en: ConcurrentDictionary
  prefs: []
  type: TYPE_NORMAL
- en: <string
  prefs: []
  type: TYPE_NORMAL
- en: ', Customer>? customersCache;'
  prefs: []
  type: TYPE_NORMAL
- en: // use an instance data context field because it should not be
  prefs: []
  type: TYPE_NORMAL
- en: // cached due to their internal caching
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindContext db;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: CustomerRepository
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindContext injectedContext
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: db = injectedContext;
  prefs: []
  type: TYPE_NORMAL
- en: // pre-load customers from database as a normal
  prefs: []
  type: TYPE_NORMAL
- en: // Dictionary with CustomerId as the key,
  prefs: []
  type: TYPE_NORMAL
- en: // then convert to a thread-safe ConcurrentDictionary
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customersCache is
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: customersCache = new
  prefs: []
  type: TYPE_NORMAL
- en: ConcurrentDictionary<string
  prefs: []
  type: TYPE_NORMAL
- en: ', Customer>('
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.ToDictionary(c => c.CustomerId));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?>
  prefs: []
  type: TYPE_NORMAL
- en: CreateAsync
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // normalize CustomerId into uppercase
  prefs: []
  type: TYPE_NORMAL
- en: c.CustomerId = c.CustomerId.ToUpper();
  prefs: []
  type: TYPE_NORMAL
- en: // add to database using EF Core
  prefs: []
  type: TYPE_NORMAL
- en: EntityEntry<Customer> added = await
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.AddAsync(c);
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: affected = await
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (affected == 1
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customersCache is
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ) return
  prefs: []
  type: TYPE_NORMAL
- en: c;
  prefs: []
  type: TYPE_NORMAL
- en: // if the customer is new, add it to cache, else
  prefs: []
  type: TYPE_NORMAL
- en: // call UpdateCache method
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: customersCache.AddOrUpdate(c.CustomerId, c, UpdateCache);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<IEnumerable<Customer>> RetrieveAllAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // for performance, get from cache
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Task.FromResult(customersCache is
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: '? Enumerable.Empty<Customer>() : customersCache.Values);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> RetrieveAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // for performance, get from cache
  prefs: []
  type: TYPE_NORMAL
- en: id = id.ToUpper();
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customersCache is
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ) return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: '!;'
  prefs: []
  type: TYPE_NORMAL
- en: customersCache.TryGetValue(id, out
  prefs: []
  type: TYPE_NORMAL
- en: Customer? c);
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Task.FromResult(c);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: Customer
  prefs: []
  type: TYPE_NORMAL
- en: UpdateCache
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id, Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? old;
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customersCache is
  prefs: []
  type: TYPE_NORMAL
- en: not
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customersCache.TryGetValue(id, out
  prefs: []
  type: TYPE_NORMAL
- en: old))
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customersCache.TryUpdate(id, c, old))
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: c;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: '!;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<Customer?> UpdateAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id, Customer c)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // normalize customer Id
  prefs: []
  type: TYPE_NORMAL
- en: id = id.ToUpper();
  prefs: []
  type: TYPE_NORMAL
- en: c.CustomerId = c.CustomerId.ToUpper();
  prefs: []
  type: TYPE_NORMAL
- en: // update in database
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.Update(c);
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: affected = await
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (affected == 1
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // update in cache
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: UpdateCache(id, c);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<bool
  prefs: []
  type: TYPE_NORMAL
- en: ?> DeleteAsync(string
  prefs: []
  type: TYPE_NORMAL
- en: id)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: id = id.ToUpper();
  prefs: []
  type: TYPE_NORMAL
- en: // remove from database
  prefs: []
  type: TYPE_NORMAL
- en: Customer? c = db.Customers.Find(id);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (c is
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ) return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: db.Customers.Remove(c);
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: affected = await
  prefs: []
  type: TYPE_NORMAL
- en: db.SaveChangesAsync();
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (affected == 1
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (customersCache is
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ) return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: // remove from cache
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: customersCache.TryRemove(id, out
  prefs: []
  type: TYPE_NORMAL
- en: c);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: 'null'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a Web API controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some useful attributes and methods for implementing a controller that
    returns data instead of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: With MVC controllers, a route like `/home/index` tells us the controller class
    name and the action method name, for example, the `HomeController` class and the
    `Index` action method.
  prefs: []
  type: TYPE_NORMAL
- en: With Web API controllers, a route like `/weatherforecast` only tells us the
    controller class name, for example, `WeatherForecastController` . To determine
    the action method name to execute, we must map HTTP methods like `GET` and `POST`
    to methods in the controller class.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should decorate controller methods with the following attributes to indicate
    the HTTP method that they will respond to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[HttpGet]` , `[HttpHead]` : These action methods respond to `GET` or `HEAD`
    requests to retrieve a resource and return either the resource and its response
    headers or just the response headers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[HttpPost]` : This action method responds to `POST` requests to create a new
    resource or perform some other action defined by the service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[HttpPut]` , `[HttpPatch]` : These action methods respond to `PUT` or `PATCH`
    requests to update an existing resource either by replacing it or updating a subset
    of its properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[HttpDelete]` : This action method responds to `DELETE` requests to remove
    a resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[HttpOptions]` : This action method responds to `OPTIONS` requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding action method return types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An action method can return .NET types like a single `string` value, complex
    objects defined by a `class` , `record` , or `struct` , or collections of complex
    objects. The ASP.NET Core Web API will serialize them into the requested data
    format set in the HTTP request `Accept` header, for example, JSON, if a suitable
    serializer has been registered.
  prefs: []
  type: TYPE_NORMAL
- en: For more control over the response, there are helper methods that return an
    `ActionResult` wrapper around the .NET type.
  prefs: []
  type: TYPE_NORMAL
- en: Declare the action method's return type to be `IActionResult` if it could return
    different return types based on inputs or other variables. Declare the action
    method's return type to be `ActionResult<T>` if it will only return a single type
    but with different status codes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : Decorate action methods with the `[ProducesResponseType]`
    attribute to indicate all the known types and HTTP status codes that the client
    should expect in a response. This information can then be publicly exposed to
    document how a client should interact with your web service. Think of it as part
    of your formal documentation. Later in this chapter, you will learn how you can
    install a code analyzer to give you warnings when you do not decorate your action
    methods like this.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, an action method that gets a product based on an id parameter
    would be decorated with three attributes – one to indicate that it responds to
    `GET` requests and has an id parameter, and two to indicate what happens when
    it succeeds and when the client has supplied an invalid product ID, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet('
  prefs: []
  type: TYPE_NORMAL
- en: '"{id}"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(200, Type = typeof(Product))'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(404)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: IActionResult
  prefs: []
  type: TYPE_NORMAL
- en: Get
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ControllerBase` class has methods to make it easy to return different
    responses, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `Ok` | Returns a `200` status code and a resource converted to the client''s
    preferred format, like JSON or XML. Commonly used in response to a `GET` request.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `CreatedAtRoute` | Returns a `201` status code and the path to the new resource.
    Commonly used in response to a `POST` request to create a resource that can be
    performed quickly. |'
  prefs: []
  type: TYPE_TB
- en: '| `Accepted` | Returns a `202` status code to indicate the request is being
    processed but has not completed. Commonly used in response to a `POST` , `PUT`
    , `PATCH` , or `DELETE` request that triggers a background process that takes
    a long time to complete. |'
  prefs: []
  type: TYPE_TB
- en: '| `NoContentResult` | Returns a `204` status code and an empty response body.
    Commonly used in response to a `PUT` , `PATCH` , or `DELETE` request when the
    response does not need to contain the affected resource. |'
  prefs: []
  type: TYPE_TB
- en: '| `BadRequest` | Returns a `400` status code and an optional message string
    with more details. |'
  prefs: []
  type: TYPE_TB
- en: '| `NotFound` | Returns a `404` status code and an automatically populated `ProblemDetails`
    body (requires a compatibility version of 2.2 or later). |'
  prefs: []
  type: TYPE_TB
- en: Configuring the customer repository and Web API controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you will configure the repository so that it can be called from within a
    Web API controller.
  prefs: []
  type: TYPE_NORMAL
- en: You will register a scoped dependency service implementation for the repository
    when the web service starts up and then use constructor parameter injection to
    get it in a new Web API controller for working with customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show an example of differentiating between MVC and Web API controllers using
    routes, we will use the common `/api` URL prefix convention for the customers
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Program.cs` and import the `Northwind.WebApi.Repositories` namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a statement before the call to the `Build` method, which will register
    the `CustomerRepository` for use at runtime as a scoped dependency, as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '**builder.Services.AddScoped<ICustomerRepository, CustomerRepository>();**'
  prefs: []
  type: TYPE_NORMAL
- en: var
  prefs: []
  type: TYPE_NORMAL
- en: app = builder.Build();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : Our repository uses a database context that is registered
    as a scoped dependency. You can only use scoped dependencies inside other scoped
    dependencies, so we cannot register the repository as a singleton. You can read
    more about this at the following link: [https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped](https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped)'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Controllers` folder, add a new class named `CustomersController.cs`
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `CustomersController` class file, add statements to define a Web API
    controller class to work with customers, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.Mvc; // [Route], [ApiController], ControllerBase
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Packt.Shared; // Customer
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.WebApi.Repositories; // ICustomerRepository
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.WebApi.Controllers
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '// base address: api/customers'
  prefs: []
  type: TYPE_NORMAL
- en: '[Route('
  prefs: []
  type: TYPE_NORMAL
- en: '"api/[controller]"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ApiController'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: CustomersController
  prefs: []
  type: TYPE_NORMAL
- en: ': ControllerBase'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: ICustomerRepository repo;
  prefs: []
  type: TYPE_NORMAL
- en: // constructor injects repository registered in Startup
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: CustomersController
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: ICustomerRepository repo
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: this
  prefs: []
  type: TYPE_NORMAL
- en: .repo = repo;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// GET: api/customers'
  prefs: []
  type: TYPE_NORMAL
- en: '// GET: api/customers/?country=[country]'
  prefs: []
  type: TYPE_NORMAL
- en: // this will always return a list of customers (but it might be empty)
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(200, Type = typeof(IEnumerable<Customer>))'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<IEnumerable<Customer>> GetCustomers(string
  prefs: []
  type: TYPE_NORMAL
- en: '? country)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (string
  prefs: []
  type: TYPE_NORMAL
- en: .IsNullOrWhiteSpace(country))
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: repo.RetrieveAllAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: (await
  prefs: []
  type: TYPE_NORMAL
- en: repo.RetrieveAllAsync())
  prefs: []
  type: TYPE_NORMAL
- en: .Where(customer => customer.Country == country);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// GET: api/customers/[id]'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpGet('
  prefs: []
  type: TYPE_NORMAL
- en: '"{id}"'
  prefs: []
  type: TYPE_NORMAL
- en: ', Name = nameof(GetCustomer))'
  prefs: []
  type: TYPE_NORMAL
- en: '] // named route'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(200, Type = typeof(Customer))'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(404)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<IActionResult>
  prefs: []
  type: TYPE_NORMAL
- en: GetCustomer
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? c = await
  prefs: []
  type: TYPE_NORMAL
- en: repo.RetrieveAsync(id);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (c == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: NotFound(); // 404 Resource not found
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: Ok(c); // 200 OK with customer in body
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// POST: api/customers'
  prefs: []
  type: TYPE_NORMAL
- en: '// BODY: Customer (JSON, XML)'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpPost'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(201, Type = typeof(Customer))'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(400)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<IActionResult>
  prefs: []
  type: TYPE_NORMAL
- en: Create
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: '[FromBody] Customer c'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (c == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: BadRequest(); // 400 Bad request
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? addedCustomer = await
  prefs: []
  type: TYPE_NORMAL
- en: repo.CreateAsync(c);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (addedCustomer == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: BadRequest("Repository failed to create customer."
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: CreatedAtRoute( // 201 Created
  prefs: []
  type: TYPE_NORMAL
- en: 'routeName: nameof'
  prefs: []
  type: TYPE_NORMAL
- en: (GetCustomer),
  prefs: []
  type: TYPE_NORMAL
- en: 'routeValues: new'
  prefs: []
  type: TYPE_NORMAL
- en: '{ id = addedCustomer.CustomerId.ToLower() },'
  prefs: []
  type: TYPE_NORMAL
- en: value
  prefs: []
  type: TYPE_NORMAL
- en: ': addedCustomer);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// PUT: api/customers/[id]'
  prefs: []
  type: TYPE_NORMAL
- en: '// BODY: Customer (JSON, XML)'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpPut('
  prefs: []
  type: TYPE_NORMAL
- en: '"{id}"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(204)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(400)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(404)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<IActionResult>
  prefs: []
  type: TYPE_NORMAL
- en: Update
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id, [FromBody] Customer c
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: id = id.ToUpper();
  prefs: []
  type: TYPE_NORMAL
- en: c.CustomerId = c.CustomerId.ToUpper();
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (c == null
  prefs: []
  type: TYPE_NORMAL
- en: '|| c.CustomerId != id)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: BadRequest(); // 400 Bad request
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? existing = await
  prefs: []
  type: TYPE_NORMAL
- en: repo.RetrieveAsync(id);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (existing == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: NotFound(); // 404 Resource not found
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: await
  prefs: []
  type: TYPE_NORMAL
- en: repo.UpdateAsync(id, c);
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: new
  prefs: []
  type: TYPE_NORMAL
- en: NoContentResult(); // 204 No content
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// DELETE: api/customers/[id]'
  prefs: []
  type: TYPE_NORMAL
- en: '[HttpDelete('
  prefs: []
  type: TYPE_NORMAL
- en: '"{id}"'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(204)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(400)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[ProducesResponseType(404)'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<IActionResult>
  prefs: []
  type: TYPE_NORMAL
- en: Delete
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: id
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Customer? existing = await
  prefs: []
  type: TYPE_NORMAL
- en: repo.RetrieveAsync(id);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (existing == null
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: NotFound(); // 404 Resource not found
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '? deleted = await'
  prefs: []
  type: TYPE_NORMAL
- en: repo.DeleteAsync(id);
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (deleted.HasValue && deleted.Value) // short circuit AND
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: new
  prefs: []
  type: TYPE_NORMAL
- en: NoContentResult(); // 204 No content
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: BadRequest( // 400 Bad request
  prefs: []
  type: TYPE_NORMAL
- en: $"Customer
  prefs: []
  type: TYPE_NORMAL
- en: '{id}'
  prefs: []
  type: TYPE_NORMAL
- en: was found but failed to delete."
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'While reviewing this Web API controller class, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Controller` class registers a route that starts with `api/` and includes
    the name of the controller, that is, `api/customers` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The constructor uses dependency injection to get the registered repository for
    working with customers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are five action methods to perform CRUD operations on customers—two `GET`
    methods (for all customers or one customer), `POST` (create), `PUT` (update),
    and `DELETE` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `GetCustomers` method can have a `string` parameter passed with a country
    name. If it is missing, all customers are returned. If it is present, it is used
    to filter customers by country.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `GetCustomer` method has a route explicitly named `GetCustomer` so that
    it can be used to generate a URL after inserting a new customer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Create` and `Update` methods both decorate the `customer` parameter with
    `[FromBody]` to tell the model binder to populate it with values from the body
    of the `POST` request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Create` method returns a response that uses the `GetCustomer` route so
    that the client knows how to get the newly created resource in the future. We
    are matching up two methods to create and then get a customer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Create` and `Update` methods do not need to check the model state of the
    customer passed in the body of the HTTP request and return a `400 Bad Request`
    containing details of the model validation errors if it is not valid because the
    controller is decorated with `[ApiController]` , which does this for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When an HTTP request is received by the service, then it will create an instance
    of the `Controller` class, call the appropriate action method, return the response
    in the format preferred by the client, and release the resources used by the controller,
    including the repository and its data context.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying problem details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A feature added in ASP.NET Core 2.1 and later is an implementation of a web
    standard for specifying problem details.
  prefs: []
  type: TYPE_NORMAL
- en: In Web API controllers decorated with `[ApiController]` in a project with ASP.NET
    Core 2.2 or later compatibility enabled, action methods that return `IActionResult`
    and return a client error status code, that is, `4xx` , will automatically include
    a serialized instance of the `ProblemDetails` class in the response body.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to take control, then you can create a `ProblemDetails` instance
    yourself and include additional information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s simulate a bad request that needs custom data returned to the client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the implementation of the `Delete` method, add statements to
    check if the `id` matches the literal string value `"bad"` , and if so, then return
    a custom problem details object, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: // take control of problem details
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (id == "bad"
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: ProblemDetails problemDetails = new
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Status = StatusCodes.Status400BadRequest,
  prefs: []
  type: TYPE_NORMAL
- en: Type = "https://localhost:5001/customers/failed-to-delete"
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: Title = $"Customer ID
  prefs: []
  type: TYPE_NORMAL
- en: '{id}'
  prefs: []
  type: TYPE_NORMAL
- en: found but failed to delete."
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: Detail = "More details like Company Name, Country and so on."
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: Instance = HttpContext.Request.Path
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: BadRequest(problemDetails); // 400 Bad Request
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: You will test this functionality later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Controlling XML serialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `Program.cs` , we added the `XmlSerializer` so that our Web API service can
    return XML as well as JSON if the client requests that.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the `XmlSerializer` cannot serialize interfaces, and our entity classes
    use `ICollection<T>` to define related child entities. This causes a warning at
    runtime, for example, for the `Customer` class and its `Orders` property, as shown
    in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'warn: Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter[1]'
  prefs: []
  type: TYPE_NORMAL
- en: An error occurred while trying to create an XmlSerializer for the type 'Packt.Shared.Customer'.
  prefs: []
  type: TYPE_NORMAL
- en: 'System.InvalidOperationException: There was an error reflecting type ''Packt.Shared.Customer''.'
  prefs: []
  type: TYPE_NORMAL
- en: '--->'
  prefs: []
  type: TYPE_NORMAL
- en: 'System.InvalidOperationException: Cannot serialize member'
  prefs: []
  type: TYPE_NORMAL
- en: '''Packt.'
  prefs: []
  type: TYPE_NORMAL
- en: Shared.Customer.Orders' of type 'System.Collections.Generic.ICollection`1[[Packt.
    Shared.Order, Northwind.Common.EntityModels, Version=1.0.0.0, Culture=neutral,
    PublicKeyToken=null]]', see inner exception for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can prevent this warning by excluding the `Orders` property when serializing
    a `Customer` to XML:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Common.EntityModels.Sqlite` and the `Northwind.Common.EntityModels.SqlServer`
    projects, open `Customers.cs` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `System.Xml.Serialization` namespace so that we can use the `[XmlIgnore]`
    attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Decorate the `Orders` property with an attribute to ignore it when serializing,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '[InverseProperty(nameof(Order.Customer))'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '**[**'
  prefs: []
  type: TYPE_NORMAL
- en: '**XmlIgnore**'
  prefs: []
  type: TYPE_NORMAL
- en: '**]**'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: virtual
  prefs: []
  type: TYPE_NORMAL
- en: ICollection<Order> Orders { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Common.EntityModels.SqlServer` project, decorate the `CustomerCustomerDemos`
    property with `[XmlIgnore]` too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Documenting and testing web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can easily test a web service by making HTTP `GET` requests using a browser.
    To test other HTTP methods, we need a more advanced tool.
  prefs: []
  type: TYPE_NORMAL
- en: Testing GET requests using a browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will use Chrome to test the three implementations of a `GET` request –
    for all customers, for customers in a specified country, and for a single customer
    using their unique customer ID:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi` web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/api/customers` and note the JSON document
    returned, containing all 91 customers in the Northwind database (unsorted), as
    shown in *Figure 16.3* :![](img/Image00131.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.3: Customers from the Northwind database as a JSON document'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/api/customers/?country=Germany` and note
    the JSON document returned, containing only the customers in Germany, as shown
    in *Figure 16.4* :![](img/Image00132.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.4: A list of customers from Germany as a JSON document'
  prefs: []
  type: TYPE_NORMAL
- en: If you get an empty array returned, then make sure you have entered the country
    name using the correct casing because the database query is case-sensitive. For
    example, compare the results of `uk` and `UK` .
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/api/customers/alfki` and note the JSON document
    returned containing only the customer named **Alfreds Futterkiste** , as shown
    in *Figure 16.5* :![](img/Image00133.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.5: Specific customer information as a JSON document'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike with country names, we do not need to worry about casing for the customer
    `id` value because inside the controller class, we normalized the `string` value
    to uppercase in code.
  prefs: []
  type: TYPE_NORMAL
- en: But how can we test the other HTTP methods, such as `POST` , `PUT` , and `DELETE`
    ? And how can we document our web service so it's easy for anyone to understand
    how to interact with it?
  prefs: []
  type: TYPE_NORMAL
- en: To solve the first problem, we can install a Visual Studio Code extension named
    **REST Client** . To solve the second, we can use **Swagger** , the world's most
    popular technology for documenting and testing HTTP APIs. But first, let's see
    what is possible with the Visual Studio Code extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many tools for testing Web APIs, for example, **Postman** . Although
    Postman is popular, I prefer **REST Client** because it does not hide what is
    actually happening. I feel Postman is too GUI-y. But I encourage you to explore
    different tools and find the ones that fit your style. You can learn more about
    Postman at the following link: [https://www.postman.com/](https://www.postman.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Testing HTTP requests with the REST Client extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: REST Client is an extension that allows you to send any type of HTTP request
    and view the response in Visual Studio Code. Even if you prefer to use Visual
    Studio as your code editor, it is useful to install Visual Studio Code to use
    an extension like REST Client.
  prefs: []
  type: TYPE_NORMAL
- en: Making GET requests using REST Client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will start by creating a file for testing `GET` requests:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have not already installed REST Client by Huachao Mao (`humao.rest-client`
    ), then install it in Visual Studio Code now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your preferred code editor, start the `Northwind.WebApi` project web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, in the `PracticalApps` folder, create a `RestClientTests`
    folder, and then open the folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `RestClientTests` folder, create a file named `get-customers.http` ,
    and modify its contents to contain an HTTP `GET` request to retrieve all customers,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: GET https://localhost:5001/api/customers/ HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio Code, navigate to **View** | **Command Palette** , enter `rest
    client` , select the command **Rest Client: Send Request** , and press Enter ,
    as shown in *Figure 16.6* :![](img/Image00134.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.6: Sending an HTTP GET request using REST Client'
  prefs: []
  type: TYPE_NORMAL
- en: Note the **Response** is shown in a new tabbed window pane vertically and that
    you can rearrange the open tabs to a horizontal layout by dragging and dropping
    tabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter more `GET` requests, each separated by three hash symbols, to test getting
    customers in various countries and getting a single customer using their ID, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '###'
  prefs: []
  type: TYPE_NORMAL
- en: GET https://localhost:5001/api/customers/?country=Germany HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: '###'
  prefs: []
  type: TYPE_NORMAL
- en: GET https://localhost:5001/api/customers/?country=USA HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: Accept
  prefs: []
  type: TYPE_NORMAL
- en: ': application/xml'
  prefs: []
  type: TYPE_NORMAL
- en: '###'
  prefs: []
  type: TYPE_NORMAL
- en: GET https://localhost:5001/api/customers/ALFKI HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: '###'
  prefs: []
  type: TYPE_NORMAL
- en: GET https://localhost:5001/api/customers/abcxy HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Send Request** link above each request to send it; for example,
    the `GET` that has a request header to request customers in the USA as XML instead
    of JSON, as shown in *Figure 16.7* :![](img/Image00135.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.7: Sending a request for XML and getting a response using REST Client'
  prefs: []
  type: TYPE_NORMAL
- en: Making other requests using REST Client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we will create a file for testing other requests like `POST` :'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `RestClientTests` folder, create a file named `create-customer.http`
    and modify its contents to define a `POST` request to create a new customer, noting
    that REST Client will provide IntelliSense while you type common HTTP requests,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: POST https://localhost:5001/api/customers/ HTTP/1.1
  prefs: []
  type: TYPE_NORMAL
- en: Content-Type
  prefs: []
  type: TYPE_NORMAL
- en: ': application/json'
  prefs: []
  type: TYPE_NORMAL
- en: Content-Length
  prefs: []
  type: TYPE_NORMAL
- en: ': 301'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"customerID": "ABCXY",'
  prefs: []
  type: TYPE_NORMAL
- en: '"companyName": "ABC Corp",'
  prefs: []
  type: TYPE_NORMAL
- en: '"contactName": "John Smith",'
  prefs: []
  type: TYPE_NORMAL
- en: '"contactTitle": "Sir",'
  prefs: []
  type: TYPE_NORMAL
- en: '"address": "Main Street",'
  prefs: []
  type: TYPE_NORMAL
- en: '"city": "New York",'
  prefs: []
  type: TYPE_NORMAL
- en: '"region": "NY",'
  prefs: []
  type: TYPE_NORMAL
- en: '"postalCode": "90210",'
  prefs: []
  type: TYPE_NORMAL
- en: '"country":  "USA",'
  prefs: []
  type: TYPE_NORMAL
- en: '"phone": "(123) 555-1234",'
  prefs: []
  type: TYPE_NORMAL
- en: '"fax": null,'
  prefs: []
  type: TYPE_NORMAL
- en: '"orders": null'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Due to different line endings in different operating systems, the value for
    the `Content-Length` header will be different on Windows and macOS or Linux. If
    the value is wrong, then the request will fail. To discover the correct content
    length, select the body of the request and then look in the status bar for the
    number of characters, as shown in *Figure 16.8* :![](img/Image00136.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.8: Checking the correct content length'
  prefs: []
  type: TYPE_NORMAL
- en: Send the request and note the response is `201 Created` . Also note the location
    (that is, the URL) of the newly created customer is `https://localhost:5001/api/Customers/abcxy`
    , and includes the newly created customer in the response body, as shown in *Figure
    16.9* :![](img/Image00137.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.9: Adding a new customer'
  prefs: []
  type: TYPE_NORMAL
- en: I will leave you an optional challenge to create REST Client files that test
    updating a customer (using `PUT` ) and deleting a customer (using `DELETE` ).
    Try them on customers that do exist as well as customers that do not. Solutions
    are in the GitHub repository for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen a quick and easy way to test our service, which also happens
    to be a great way to learn HTTP, what about external developers? We want it to
    be as easy as possible for them to learn and then call our service. For that purpose,
    we will use Swagger.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Swagger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most important part of Swagger is the **OpenAPI Specification** , which
    defines a REST-style contract for your API, detailing all its resources and operations
    in a human- and machine-readable format for easy development, discovery, and integration.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can use the OpenAPI Specification for a Web API to automatically
    generate strongly-typed client-side code in their preferred language or library.
  prefs: []
  type: TYPE_NORMAL
- en: For us, another useful feature is **Swagger UI** , because it automatically
    generates documentation for your API with built-in visual testing capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review how Swagger is enabled for our web service using the `Swashbuckle`
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: If the web service is running, shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Northwind.WebApi.csproj` and note the package reference for `Swashbuckle.AspNetCore`
    , as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include="Swashbuckle.AspNetCore"
  prefs: []
  type: TYPE_NORMAL
- en: Version="6.1.5"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Update the version of the `Swashbuckle.AspNetCore` package to the latest, for
    example, at the time of writing in September 2021, it is `6.2.1` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs` , note the import for Microsoft''s OpenAPI models namespace,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.OpenApi.Models;
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import Swashbuckle''s SwaggerUI namespace, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Swashbuckle.AspNetCore.SwaggerUI; // SubmitMethod
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'About halfway down `Program.cs` , note the statement to add Swagger support
    including documentation for the Northwind service, indicating that this is the
    first version of your service, and change the title, as shown highlighted in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddSwaggerGen(c =>
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: c.SwaggerDoc("v1"
  prefs: []
  type: TYPE_NORMAL
- en: ', new'
  prefs: []
  type: TYPE_NORMAL
- en: ()
  prefs: []
  type: TYPE_NORMAL
- en: '{ Title = "'
  prefs: []
  type: TYPE_NORMAL
- en: '**Northwind Service API**'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: ', Version = "v1"'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the section that configures the HTTP request pipeline, note the statements
    to use Swagger and Swagger UI when in development mode, and define an endpoint
    for the OpenAPI specification JSON document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add code to explicitly list the HTTP methods that we want to support in our
    web service and change the endpoint name, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: var
  prefs: []
  type: TYPE_NORMAL
- en: app = builder.Build();
  prefs: []
  type: TYPE_NORMAL
- en: // Configure the HTTP request pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (builder.Environment.IsDevelopment())
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: app.UseSwagger();
  prefs: []
  type: TYPE_NORMAL
- en: app.UseSwaggerUI(c =>
  prefs: []
  type: TYPE_NORMAL
- en: '**{**'
  prefs: []
  type: TYPE_NORMAL
- en: '**c.SwaggerEndpoint(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"/swagger/v1/swagger.json"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"Northwind Service API Version 1"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: '**c.SupportedSubmitMethods(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**new**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[] {**'
  prefs: []
  type: TYPE_NORMAL
- en: '**SubmitMethod.Get, SubmitMethod.Post,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**SubmitMethod.Put, SubmitMethod.Delete });**'
  prefs: []
  type: TYPE_NORMAL
- en: '**});**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Testing requests with Swagger UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You are now ready to test an HTTP request using Swagger:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi` web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, navigate to `https://localhost:5001/swagger/` and note that both
    the **Customers** and **WeatherForecast** Web API controllers have been discovered
    and documented, as well as **Schemas** used by the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **GET /api/Customers/{id}** to expand that endpoint and note the required
    parameter for the **id** of a customer, as shown in *Figure 16.10* :![](img/Image00138.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.10: Checking the parameters for a GET request in Swagger'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Try it out** , enter an **id** of `ALFKI` , and then click the wide
    blue **Execute** button, as shown in *Figure 16.11* :![](img/Image00139.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.11: Inputting a customer id before clicking the Execute button'
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down and note the **Request URL** , **Server response** with **Code**
    , and **Details** including **Response body** and **Response headers** , as shown
    in *Figure 16.12* :![](img/Image00140.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.12: Information on ALFKI in a successful Swagger request'
  prefs: []
  type: TYPE_NORMAL
- en: Scroll back up to the top of the page, click **POST /api/Customers** to expand
    that section, and then click **Try it out** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click inside the **Request body** box, and modify the JSON to define a new
    customer, as shown in the following JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"customerID"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "SUPER"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"companyName"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Super Company"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"contactName"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Rasmus Ibensen"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"contactTitle"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Sales Leader"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"address"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Rotterslef 23"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"city"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Billund"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"region"'
  prefs: []
  type: TYPE_NORMAL
- en: ': null'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"postalCode"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "4371"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"country"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Denmark"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"phone"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "31 21 43 21"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"fax"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "31 21 43 22"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Execute** , and note the **Request URL** , **Server response** with
    **Code** , and **Details** including **Response body** and **Response headers**
    , noting that a response code of `201` means the customer was successfully created,
    as shown in *Figure 16.13* :![](img/Image00141.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.13: Successfully adding a new customer'
  prefs: []
  type: TYPE_NORMAL
- en: Scroll back up to the top of the page, click **GET /api/Customers** , click
    **Try it out** , enter `Denmark` for the country parameter, and click **Execute**
    , to confirm that the new customer was added to the database, as shown in *Figure
    16.14* :![](img/Image00142.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.14: Successfully getting customers in Denmark including the newly
    added customer'
  prefs: []
  type: TYPE_NORMAL
- en: Click **DELETE /api/Customers/{id}** , click **Try it out** , enter `super`
    for the **id** , click **Execute** , and note that the **Server response Code**
    is `204` , indicating that it was successfully deleted, as shown in *Figure 16.15*
    :![](img/Image00143.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.15: Successfully deleting a customer'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Execute** again, and note that the **Server response Code** is `404`
    , indicating that the customer does not exist anymore, and the **Response body**
    contains a problem details JSON document, as shown in *Figure 16.16* :![](img/Image00144.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.16: The deleted customer does not exist anymore'
  prefs: []
  type: TYPE_NORMAL
- en: Enter `bad` for the **id** , click **Execute** again, and note that the **Server
    response Code** is `400` , indicating that the customer did exist but failed to
    be deleted (in this case, because the web service is simulating this error), and
    the **Response body** contains a custom problem details JSON document, as shown
    in *Figure 16.17* :![](img/Image00145.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.17: The customer did exist but failed to be deleted'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `GET` methods to confirm that the new customer has been deleted from
    the database (there were originally only two customers in Denmark).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I will leave testing updates to an existing customer by using `PUT` to the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling HTTP logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTTP logging is an optional middleware component that logs information about
    HTTP requests and HTTP responses including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Information about the HTTP request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Body
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about the HTTP response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is valuable in web services for auditing and debugging scenarios but beware
    because it can negatively impact performance. You might also log **personally
    identifiable information** (**PII** ) which can cause compliance issues in some
    jurisdictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see HTTP logging in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs` , import the namespace for working with HTTP logging, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.AspNetCore.HttpLogging; // HttpLoggingFields
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the services configuration section, add a statement to configure HTTP logging,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddHttpLogging(options =>
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: options.LoggingFields = HttpLoggingFields.All;
  prefs: []
  type: TYPE_NORMAL
- en: options.RequestBodyLogLimit = 4096
  prefs: []
  type: TYPE_NORMAL
- en: ; // default is 32k
  prefs: []
  type: TYPE_NORMAL
- en: options.ResponseBodyLogLimit = 4096
  prefs: []
  type: TYPE_NORMAL
- en: ; // default is 32k
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the HTTP pipeline configuration section, add a statement to add HTTP logging
    before the call to use routing, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: app.UseHttpLogging();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi` web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/api/customers` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a command prompt or terminal, note the request and response have been logged,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Protocol: HTTP/1.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Method: GET'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scheme: https'
  prefs: []
  type: TYPE_NORMAL
- en: 'PathBase:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Path: /api/customers'
  prefs: []
  type: TYPE_NORMAL
- en: 'QueryString:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection: keep-alive'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept: */*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept-Encoding: gzip, deflate, br'
  prefs: []
  type: TYPE_NORMAL
- en: 'Host: localhost:5001'
  prefs: []
  type: TYPE_NORMAL
- en: 'info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'StatusCode: 200'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content-Type: application/json; charset=utf-8'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transfer-Encoding: chunked'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now ready to build applications that consume your web service.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming web services using HTTP clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have built and tested our Northwind service, we will learn how to
    call it from any .NET app using the `HttpClient` class and its factory.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding HttpClient
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to consume a web service is to use the `HttpClient` class. However,
    many people use it wrongly because it implements `IDisposable` and Microsoft's
    own documentation shows poor usage of it. See the book links in the GitHub repository
    for articles with more discussion of this.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, when a type implements `IDisposable` , you should create it inside
    a `using` statement to ensure that it is disposed of as soon as possible. `HttpClient`
    is different because it is shared, reentrant, and partially thread-safe.
  prefs: []
  type: TYPE_NORMAL
- en: The problem has to do with how the underlying network sockets have to be managed.
    The bottom line is that you should use a single instance of it for each HTTP endpoint
    that you consume during the life of your application. This will allow each `HttpClient`
    instance to have defaults set that are appropriate for the endpoint it works with,
    while managing the underlying network sockets efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring HTTP clients using HttpClientFactory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft is aware of the issue, and in ASP.NET Core 2.1 they introduced `HttpClientFactory`
    to encourage best practice; that is the technique we will use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we will use the Northwind MVC website as a client
    to the Northwind Web API service. Since both need to be hosted on a web server
    simultaneously, we first need to configure them to use different port numbers,
    as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: The Northwind Web API service will listen on port `5002` using `HTTPS` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Northwind MVC website will continue to listen on port `5000` using `HTTP`
    and port `5001` using `HTTPS` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s configure those ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi` project, in `Program.cs` , add an extension method
    call to `UseUrls` to specify port `5002` for `HTTPS` , as shown highlighted in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: var
  prefs: []
  type: TYPE_NORMAL
- en: builder = WebApplication.CreateBuilder(args);
  prefs: []
  type: TYPE_NORMAL
- en: '**builder.WebHost.UseUrls(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"https://localhost:5002/"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, open `Program.cs` and import the namespace
    for working with HTTP client factory, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: System.Net.Http.Headers; // MediaTypeWithQualityHeaderValue
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a statement to enable `HttpClientFactory` with a named client to make calls
    to the Northwind Web API service using HTTPS on port `5002` and request JSON as
    the default response format, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'builder.Services.AddHttpClient(name: "Northwind.WebApi"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: 'configureClient: options =>'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: options.BaseAddress = new
  prefs: []
  type: TYPE_NORMAL
- en: Uri("https://localhost:5002/"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: options.DefaultRequestHeaders.Accept.Add(
  prefs: []
  type: TYPE_NORMAL
- en: new
  prefs: []
  type: TYPE_NORMAL
- en: MediaTypeWithQualityHeaderValue(
  prefs: []
  type: TYPE_NORMAL
- en: '"application/json"'
  prefs: []
  type: TYPE_NORMAL
- en: ', 1.0'
  prefs: []
  type: TYPE_NORMAL
- en: ));
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Getting customers as JSON in the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now create an MVC controller action method that uses the factory to
    create an HTTP client, makes a `GET` request for customers, and deserializes the
    JSON response using convenience extension methods introduced with .NET 5 in the
    `System.Net.Http.Json` assembly and namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Controllers/HomeController.cs` and declare a field to store the HTTP
    client factory, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: IHttpClientFactory clientFactory;
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the field in the constructor, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: HomeController
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: ILogger<HomeController> logger,
  prefs: []
  type: TYPE_NORMAL
- en: NorthwindContext injectedContext
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**IHttpClientFactory httpClientFactory**'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: _logger = logger;
  prefs: []
  type: TYPE_NORMAL
- en: db = injectedContext;
  prefs: []
  type: TYPE_NORMAL
- en: '**clientFactory = httpClientFactory;**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new action method for calling the Northwind Web API service, fetching
    all customers, and passing them to a view, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: async
  prefs: []
  type: TYPE_NORMAL
- en: Task<IActionResult>
  prefs: []
  type: TYPE_NORMAL
- en: Customers
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: country
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: uri;
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs: []
  type: TYPE_NORMAL
- en: (string
  prefs: []
  type: TYPE_NORMAL
- en: .IsNullOrEmpty(country))
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: ViewData["Title"
  prefs: []
  type: TYPE_NORMAL
- en: '] = "All Customers Worldwide"'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: uri = "api/customers/"
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: ViewData["Title"
  prefs: []
  type: TYPE_NORMAL
- en: '] = $"Customers in'
  prefs: []
  type: TYPE_NORMAL
- en: '{country}'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: uri = $"api/customers/?country=
  prefs: []
  type: TYPE_NORMAL
- en: '{country}'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: HttpClient client = clientFactory.CreateClient(
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Northwind.WebApi"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: HttpRequestMessage request = new
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: 'method: HttpMethod.Get, requestUri: uri);'
  prefs: []
  type: TYPE_NORMAL
- en: HttpResponseMessage response = await
  prefs: []
  type: TYPE_NORMAL
- en: client.SendAsync(request);
  prefs: []
  type: TYPE_NORMAL
- en: IEnumerable<Customer>? model = await
  prefs: []
  type: TYPE_NORMAL
- en: response.Content
  prefs: []
  type: TYPE_NORMAL
- en: .ReadFromJsonAsync<IEnumerable<Customer>>();
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: View(model);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Views/Home` folder, create a Razor file named `Customers.cshtml` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the Razor file to render the customers, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@using Packt.Shared'
  prefs: []
  type: TYPE_NORMAL
- en: '@model IEnumerable<Customer>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: h2
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@ViewData["Title"]</'
  prefs: []
  type: TYPE_NORMAL
- en: h2
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"table"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: thead
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Company Name</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Contact Name</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Address</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Phone</
  prefs: []
  type: TYPE_NORMAL
- en: th
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: thead
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tbody
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@if (Model is not null)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '@foreach (Customer c in Model)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.CompanyName)'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.ContactName)'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.Address)'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.City)'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.Region)'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.Country)'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.PostalCode)'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@Html.DisplayFor(modelItem => c.Phone)'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tbody
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Views/Home/Index.cshtml` , add a form after rendering the visitor count
    to allow visitors to enter a country and see the customers, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: h3
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Query customers from a service</
  prefs: []
  type: TYPE_NORMAL
- en: h3
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: form
  prefs: []
  type: TYPE_NORMAL
- en: asp-action
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Customers"'
  prefs: []
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"get"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: input
  prefs: []
  type: TYPE_NORMAL
- en: name
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"country"'
  prefs: []
  type: TYPE_NORMAL
- en: placeholder
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"Enter a country"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: input
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"submit"'
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: form
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Cross-Origin Resource Sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS** ) is an HTTP-header-based standard
    for protecting web resources when the client and server are on different domains
    (origins). It allows a server to indicate which origins (defined by a combination
    of domain, scheme, or port) other than its own it will permit the loading of resources
    from.'
  prefs: []
  type: TYPE_NORMAL
- en: Since our web service is hosted on port `5002` and our MVC website is hosted
    on ports `5000` and `5001` , they are considered different origins and so resources
    cannot be shared.
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be useful to enable CORS on the server and configure our web service
    to only allow requests that originate from the MVC website:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.WebApi` project, open `Program.cs` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a statement in the services configuration section to add support for CORS,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddCors();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a statement in the HTTP pipeline configuration section, before calling
    `UseEndpoints` , to use CORS and allow `GET` , `POST` , `PUT` , and `DELETE` requests
    from any website like Northwind MVC that has an origin of `https://localhost:5001`
    , as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'app.UseCors(configurePolicy: options =>'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: options.WithMethods("GET"
  prefs: []
  type: TYPE_NORMAL
- en: ', "POST"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "PUT"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "DELETE"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: options.WithOrigins(
  prefs: []
  type: TYPE_NORMAL
- en: '"https://localhost:5001"'
  prefs: []
  type: TYPE_NORMAL
- en: // allow requests from the MVC client
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `Northwind.WebApi` project and confirm that the web service is listening
    only on port `5002` , as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'info: Microsoft.Hosting.Lifetime[14]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now listening on: https://localhost:5002'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `Northwind.Mvc` project and confirm that the website is listening
    on ports `5000` and `5002` , as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'info: Microsoft.Hosting.Lifetime[14]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now listening on: https://localhost:5001'
  prefs: []
  type: TYPE_NORMAL
- en: 'info: Microsoft.Hosting.Lifetime[14]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now listening on: http://localhost:5000'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the customer form, enter a country like `Germany` , `UK` , or `USA` , click
    **Submit** , and note the list of customers, as shown in *Figure 16.18* :![](img/Image00146.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.18: Customers in the UK'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Back** button in your browser, clear the country textbox, click
    **Submit** , and note the worldwide list of customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a command prompt or terminal, note the `HttpClient` writes each HTTP request
    that it makes and HTTP response that it receives, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[100]'
  prefs: []
  type: TYPE_NORMAL
- en: Sending HTTP request GET https://localhost:5002/api/customers/?country=UK
  prefs: []
  type: TYPE_NORMAL
- en: 'info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[101]'
  prefs: []
  type: TYPE_NORMAL
- en: Received HTTP response headers after 931.864ms - 200
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have successfully built a web service and called it from an MVC website.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing advanced features for web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have seen the fundamentals of building a web service and then calling
    it from a client, let's look at some more advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a Health Check API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many paid services that perform site availability tests that are basic
    pings, some with more advanced analysis of the HTTP response.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core 2.2 and later makes it easy to implement more detailed website
    health checks. For example, your website might be live, but is it ready? Can it
    retrieve data from its database?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add basic health check capabilities to our web service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi` project, add a project reference to enable Entity
    Framework Core database health checks, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <PackageReference Include=
  prefs: []
  type: TYPE_NORMAL
- en: '"Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore"'
  prefs: []
  type: TYPE_NORMAL
- en: Version="6.0.0"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Build the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs` , at the bottom of the services configuration section, add
    a statement to add health checks, including to the Northwind database context,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddHealthChecks()
  prefs: []
  type: TYPE_NORMAL
- en: .AddDbContextCheck<NorthwindContext>();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the database context check calls EF Core's `CanConnectAsync` method.
    You can customize what operation is run by calling the `AddDbContextCheck` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the HTTP pipeline configuration section, before the call to `MapControllers`
    , add a statement to use basic health checks, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'app.UseHealthChecks(path: "/howdoyoufeel"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to `https://localhost:5002/howdoyoufeel` and note that the web service
    responds with a plain text response: `Healthy` .'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, note the SQL statement that was executed
    to test the health of the database, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType=''Text'',
    CommandTimeout=''30'']'
  prefs: []
  type: TYPE_NORMAL
- en: SELECT 1
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing Open API analyzers and conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to enable Swagger to document a web service
    by manually decorating a controller class with attributes.
  prefs: []
  type: TYPE_NORMAL
- en: In ASP.NET Core 2.2 or later, there are API analyzers that reflect over controller
    classes that have been annotated with the `[ApiController]` attribute to document
    it automatically. The analyzer assumes some API conventions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use it, your project must enable the OpenAPI Analyzers, as shown highlighted
    in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <TargetFramework>net6.0
  prefs: []
  type: TYPE_NORMAL
- en: </TargetFramework>
  prefs: []
  type: TYPE_NORMAL
- en: <Nullable>enable</Nullable>
  prefs: []
  type: TYPE_NORMAL
- en: <ImplicitUsings>enable</ImplicitUsings>
  prefs: []
  type: TYPE_NORMAL
- en: '**<IncludeOpenAPIAnalyzers>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**</IncludeOpenAPIAnalyzers>**'
  prefs: []
  type: TYPE_NORMAL
- en: </PropertyGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: After installing, controllers that have not been properly decorated should have
    warnings (green squiggles) and warnings when you compile the source code. For
    example, the `WeatherForecastController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic code fixes can then add the appropriate `[Produces]` and `[ProducesResponseType]`
    attributes, although this only currently works in Visual Studio. In Visual Studio
    Code, you will see warnings about where the analyzer thinks you should add attributes,
    but you must add them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing transient fault handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a client app or website calls a web service, it could be from across the
    other side of the world. Network problems between the client and the server could
    cause issues that are nothing to do with your implementation code. If a client
    makes a call and it fails, the app should not just give up. If it tries again,
    the issue may now have been resolved. We need a way to handle these temporary
    faults.
  prefs: []
  type: TYPE_NORMAL
- en: To handle these transient faults, Microsoft recommends that you use the third-party
    library Polly to implement automatic retries with exponential backoff. You define
    a policy, and the library handles everything else.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : You can read more about how Polly can make your web services
    more reliable at the following link: [https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding security HTTP headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ASP.NET Core has built-in support for common security HTTP headers like HSTS.
    But there are many more HTTP headers that you should consider implementing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to add these headers is using a middleware class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi` project/folder, create a file named `SecurityHeadersMiddleware.cs`
    and modify its statements, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: using
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft.Extensions.Primitives; // StringValues
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: SecurityHeaders
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: RequestDelegate next;
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: SecurityHeaders
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: RequestDelegate next
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: this
  prefs: []
  type: TYPE_NORMAL
- en: .next = next;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: Task
  prefs: []
  type: TYPE_NORMAL
- en: Invoke
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: HttpContext context
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: // add any HTTP response headers you want here
  prefs: []
  type: TYPE_NORMAL
- en: context.Response.Headers.Add(
  prefs: []
  type: TYPE_NORMAL
- en: '"super-secure"'
  prefs: []
  type: TYPE_NORMAL
- en: ', new'
  prefs: []
  type: TYPE_NORMAL
- en: StringValues("enable"
  prefs: []
  type: TYPE_NORMAL
- en: ));
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: next(context);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs` , in the HTTP pipeline configuration section, add a statement
    to register the middleware before the call to `UseEndpoints` , as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: app.UseMiddleware<SecurityHeaders>();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show **Developer tools** and its **Network** tab to record requests and responses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5002/weatherforecast` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the custom HTTP response header that we added named `super-secure` , as
    shown in *Figure 16.19* :![](img/Image00147.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.19: Adding a custom HTTP header named super-secure'
  prefs: []
  type: TYPE_NORMAL
- en: Building web services using minimal APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For .NET 6, Microsoft put a lot of effort into adding new features to the C#
    10 language and simplifying the ASP.NET Core libraries to enable the creation
    of web services using minimal APIs.
  prefs: []
  type: TYPE_NORMAL
- en: You might remember the weather forecast service that is provided in the Web
    API project template. It shows the use of a controller class to return a five-day
    weather forecast using faked data. We will now recreate that weather service using
    minimal APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the weather service has a class to represent a single weather forecast.
    We will need to use this class in multiple projects, so let''s create a class
    library for that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Class Library** / `classlib`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Common`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename `Class1.cs` to `WeatherForecast.cs` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `WeatherForecast.cs` , as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  prefs: []
  type: TYPE_NORMAL
- en: Northwind.Common
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: WeatherForecast
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs: []
  type: TYPE_NORMAL
- en: readonly
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '[] Summaries = new'
  prefs: []
  type: TYPE_NORMAL
- en: '[]'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Freezing"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Bracing"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Chilly"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Cool"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Mild"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"Warm"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Balmy"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Hot"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Sweltering"'
  prefs: []
  type: TYPE_NORMAL
- en: ', "Scorching"'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: DateTime Date { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: TemperatureC { get
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: TemperatureF => 32
  prefs: []
  type: TYPE_NORMAL
- en: + (int
  prefs: []
  type: TYPE_NORMAL
- en: )(TemperatureC / 0.5556
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: public
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '? Summary { get'
  prefs: []
  type: TYPE_NORMAL
- en: ; set
  prefs: []
  type: TYPE_NORMAL
- en: ; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Building a weather service using minimal APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s recreate that weather service using minimal APIs. It will listen
    on port `5003` and have CORS support enabled so that requests can only come from
    the MVC website and only `GET` requests are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Empty** / `web`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Workspace/solution file and folder: `PracticalApps`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Minimal.WebApi`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other Visual Studio options: **Authentication Type** : None, **Configure for
    HTTPS** : selected, **Enable Docker** : cleared, **Enable OpenAPI support** :
    selected.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, select `Minimal.WebApi` as the active OmniSharp project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Minimal.WebApi` project, add a project reference to the `Northwind.Common`
    project, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include="..\Northwind.Common\Northwind.Common.csproj"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Build the `Minimal.WebApi` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `Program.cs` , as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '**using**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Northwind.Common;**'
  prefs: []
  type: TYPE_NORMAL
- en: '**// WeatherForecast**'
  prefs: []
  type: TYPE_NORMAL
- en: var
  prefs: []
  type: TYPE_NORMAL
- en: builder = WebApplication.CreateBuilder(args);
  prefs: []
  type: TYPE_NORMAL
- en: '**builder.WebHost.UseUrls(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"https://localhost:5003"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: '**builder.Services.AddCors();**'
  prefs: []
  type: TYPE_NORMAL
- en: var
  prefs: []
  type: TYPE_NORMAL
- en: app = builder.Build();
  prefs: []
  type: TYPE_NORMAL
- en: '**// only allow the MVC client and only GET requests**'
  prefs: []
  type: TYPE_NORMAL
- en: '**app.UseCors(configurePolicy: options =>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**{**'
  prefs: []
  type: TYPE_NORMAL
- en: '**options.WithMethods(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"GET"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: '**options.WithOrigins(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"https://localhost:5001"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**);**'
  prefs: []
  type: TYPE_NORMAL
- en: '**});**'
  prefs: []
  type: TYPE_NORMAL
- en: '**app.MapGet(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"/api/weather"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**, () =>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**{**'
  prefs: []
  type: TYPE_NORMAL
- en: '**return**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enumerable.Range(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**5**'
  prefs: []
  type: TYPE_NORMAL
- en: '**).Select(index =>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**new**'
  prefs: []
  type: TYPE_NORMAL
- en: '**WeatherForecast**'
  prefs: []
  type: TYPE_NORMAL
- en: '**{**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date = DateTime.Now.AddDays(index),**'
  prefs: []
  type: TYPE_NORMAL
- en: '**TemperatureC = Random.Shared.Next(**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-20**'
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '**55**'
  prefs: []
  type: TYPE_NORMAL
- en: '**),**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary = WeatherForecast.Summaries[**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Random.Shared.Next(WeatherForecast.Summaries.Length)]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**})**'
  prefs: []
  type: TYPE_NORMAL
- en: '**.ToArray();**'
  prefs: []
  type: TYPE_NORMAL
- en: '**});**'
  prefs: []
  type: TYPE_NORMAL
- en: app.Run();
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : For simple web services, avoid creating a controller class,
    and instead use minimal APIs to put all the configuration and implementation in
    one place, `Program.cs` .'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Properties** , modify `launchSettings.json` to configure the `Minimal.WebApi`
    profile to launch the browser using port `5003` in the URL, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '"profiles"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"Minimal.WebApi"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"commandName"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Project"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"dotnetRunMessages"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "true"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '"launchBrowser"'
  prefs: []
  type: TYPE_NORMAL
- en: ': true'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: '**"applicationUrl"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"https://localhost:5003/api/weather"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**,**'
  prefs: []
  type: TYPE_NORMAL
- en: '"environmentVariables"'
  prefs: []
  type: TYPE_NORMAL
- en: ': {'
  prefs: []
  type: TYPE_NORMAL
- en: '"ASPNETCORE_ENVIRONMENT"'
  prefs: []
  type: TYPE_NORMAL
- en: ': "Development"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the minimal weather service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before creating a client to the service, let''s test that it returns forecasts
    as JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the web service project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are not using Visual Studio 2022, start Chrome and navigate to `https://localhost:5003/api/weather`
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the Web API service should return a JSON document with five random weather
    forecast objects in an array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding weather forecasts to the Northwind website home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, let''s add an HTTP client to the Northwind website so that it can
    call the weather service and show forecasts on the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, add a project reference to `Northwind.Common`
    , as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- change Sqlite to SqlServer if
  prefs: []
  type: TYPE_NORMAL
- en: you prefer -->
  prefs: []
  type: TYPE_NORMAL
- en: <ProjectReference Include="..\Northwind.Common.DataContext.Sqlite\Northwind.Common.DataContext.Sqlite.csproj"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: '**<ProjectReference Include=**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"..\Northwind.Common\Northwind.Common.csproj"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**/>**'
  prefs: []
  type: TYPE_NORMAL
- en: </ItemGroup>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs` , add a statement to configure an HTTP client to call the minimal
    service on port `5003` , as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'builder.Services.AddHttpClient(name: "Minimal.WebApi"'
  prefs: []
  type: TYPE_NORMAL
- en: ','
  prefs: []
  type: TYPE_NORMAL
- en: 'configureClient: options =>'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: options.BaseAddress = new
  prefs: []
  type: TYPE_NORMAL
- en: Uri("https://localhost:5003/"
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: options.DefaultRequestHeaders.Accept.Add(
  prefs: []
  type: TYPE_NORMAL
- en: new
  prefs: []
  type: TYPE_NORMAL
- en: MediaTypeWithQualityHeaderValue(
  prefs: []
  type: TYPE_NORMAL
- en: '"application/json"'
  prefs: []
  type: TYPE_NORMAL
- en: ', 1.0'
  prefs: []
  type: TYPE_NORMAL
- en: ));
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `HomeController.cs` , import the `Northwind.Common` namespace, and in the
    `Index` method, add statements to get and use an HTTP client to call the weather
    service to get forecasts and store them in `ViewData` , as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: try
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: HttpClient client = clientFactory.CreateClient(
  prefs: []
  type: TYPE_NORMAL
- en: 'name: "Minimal.WebApi"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: HttpRequestMessage request = new
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs: []
  type: TYPE_NORMAL
- en: 'method: HttpMethod.Get, requestUri: "api/weather"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: HttpResponseMessage response = await
  prefs: []
  type: TYPE_NORMAL
- en: client.SendAsync(request);
  prefs: []
  type: TYPE_NORMAL
- en: ViewData["weather"
  prefs: []
  type: TYPE_NORMAL
- en: '] = await'
  prefs: []
  type: TYPE_NORMAL
- en: response.Content
  prefs: []
  type: TYPE_NORMAL
- en: .ReadFromJsonAsync<WeatherForecast[]>();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: catch (Exception ex)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '_logger.LogWarning($"The Minimal.WebApi service is not responding. Exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '{ex.Message}'
  prefs: []
  type: TYPE_NORMAL
- en: '"'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: ViewData["weather"
  prefs: []
  type: TYPE_NORMAL
- en: '] = Enumerable.Empty<WeatherForecast>().ToArray();'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Views/Home` , in `Index.cshtml` , import the `Northwind.Common` namespace
    and then in the top code block get the weather forecasts from the `ViewData` dictionary,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: '@{'
  prefs: []
  type: TYPE_NORMAL
- en: ViewData["Title"
  prefs: []
  type: TYPE_NORMAL
- en: '] = "Home Page"'
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: currentItem = ""
  prefs: []
  type: TYPE_NORMAL
- en: ;
  prefs: []
  type: TYPE_NORMAL
- en: '**WeatherForecast[]? weather = ViewData[**'
  prefs: []
  type: TYPE_NORMAL
- en: '**"weather"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**as**'
  prefs: []
  type: TYPE_NORMAL
- en: '**WeatherForecast[];**'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first `<div>` , after rendering the current time, add markup to enumerate
    the weather forecasts unless there aren''t any, and render them in a table, as
    shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: h4
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: Five-Day Weather Forecast</
  prefs: []
  type: TYPE_NORMAL
- en: h4
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@if ((weather is null) || (!weather.Any()))'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: No weather forecasts found.</
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: class
  prefs: []
  type: TYPE_NORMAL
- en: '='
  prefs: []
  type: TYPE_NORMAL
- en: '"table table-info"'
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@foreach (WeatherForecast w in weather)'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '@w.Date.ToString("ddd d MMM") will be @w.Summary</'
  prefs: []
  type: TYPE_NORMAL
- en: td
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: tr
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: table
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: </
  prefs: []
  type: TYPE_NORMAL
- en: p
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Minimal.WebApi` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Mvc` website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5001/` , and note the weather forecast, as shown
    in *Figure 16.20* :![](img/Image00148.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.20: A five-day weather forecast on the home page of the Northwind
    website'
  prefs: []
  type: TYPE_NORMAL
- en: 'View the command prompt or terminal for the MVC website and note the info messages
    that indicate a request was sent to the minimal API web service `api/weather`
    endpoint in about 83ms, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  prefs: []
  type: TYPE_NORMAL
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[100]'
  prefs: []
  type: TYPE_NORMAL
- en: Start processing HTTP request GET https://localhost:5003/api/weather
  prefs: []
  type: TYPE_NORMAL
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[100]'
  prefs: []
  type: TYPE_NORMAL
- en: Sending HTTP request GET https://localhost:5003/api/weather
  prefs: []
  type: TYPE_NORMAL
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[101]'
  prefs: []
  type: TYPE_NORMAL
- en: Received HTTP response headers after 76.8963ms - 200
  prefs: []
  type: TYPE_NORMAL
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[101]'
  prefs: []
  type: TYPE_NORMAL
- en: End processing HTTP request after 82.9515ms – 200
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Stop the `Minimal.WebApi` service, refresh the browser, and note that after
    a few seconds the MVC website home page appears without weather forecasts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which class should you inherit from to create a controller class for an ASP.NET
    Core Web API service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you decorate your controller class with the `[ApiController]` attribute to
    get default behavior like automatic `400` responses for invalid models, what else
    must you do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What must you do to specify which controller action method will be executed
    in response to an HTTP request?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What must you do to specify what responses should be expected when calling an
    action method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List three methods that can be called to return responses with different status
    codes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List four ways that you can test a web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you not wrap your use of `HttpClient` in a `using` statement to dispose
    of it when you are finished even though it implements the `IDisposable` interface,
    and what should you use instead?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the acronym CORS stand for and why is it important to enable it in
    a web service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you enable clients to detect if your web service is healthy with ASP.NET
    Core 2.2 and later?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What benefits does endpoint routing provide?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 16.2 – Practice creating and deleting customers with HttpClient
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extend the `Northwind.Mvc` website project to have pages where a visitor can
    fill in a form to create a new customer, or search for a customer and then delete
    them. The MVC controller should make calls to the Northwind web service to create
    and delete customers.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.3 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build an ASP.NET Core Web API service that
    can be called by any app on any platform that can make an HTTP request and process
    an HTTP response.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to test and document web service APIs with Swagger, as
    well as how to consume services efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn to build user interfaces using Blazor, Microsoft's
    cool new component technology that enables developers to build client-side, single-page
    applications (SPAs) for websites using C# instead of JavaScript, hybrid apps for
    desktop, and potentially mobile apps.
  prefs: []
  type: TYPE_NORMAL
