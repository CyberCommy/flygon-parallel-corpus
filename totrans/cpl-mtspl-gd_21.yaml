- en: Visualizing with Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered how Metasploit can help law enforcement agencies in the previous
    chapter. Let's continue with a great tool that can not only speed up exploitation
    but also provide an extensive red teaming environment for the testing teams.
  prefs: []
  type: TYPE_NORMAL
- en: '**Armitage** is a GUI tool that acts as an attack manager for Metasploit. Armitage
    visualizes Metasploit operations and recommends exploits as well. Armitage is
    capable of providing shared access and team management to Metasploit.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at Armitage and its features. We will also look
    at how we can conduct penetration testing with this GUI-enabled tool for Metasploit.
    In the later half of this chapter, we will work on Cortana scripting for Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we will cover the following key points:'
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing with Armitage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning networks and host management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation with Armitage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red teaming using the team server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of Cortana scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking with Cortana scripts in Armitage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's begin our journey of penetration testing with this great visual interface.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals of Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Armitage is an attack manager tool that graphically automates Metasploit. Armitage
    is built in Java, and it was created by Raphael Mudge. It is a cross-platform
    tool, and it can run on both Linux and Windows OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we will use Armitage in Kali Linux. To start Armitage,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal and type in the `armitage` command, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af461320-7762-4253-82d8-b5b32a9b3b46.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Connect button in the pop-up box to set up a connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the `armitage` command to run, Metasploit''s **Remote Procedure Call**
    (**RPC**) server should be running. As soon as we click on the Connect button
    in the previous pop-up, a new pop-up will occur and ask if we want to start Metasploit''s
    RPC server. Click on Yes, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3af11f8c-1231-4443-b981-641c756dba75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It takes a little time to get the Metasploit RPC server up and running. During
    this process, we will see messages such as Connection refused time and again.
    These errors are due to Armitage keeping checks on connection and testing if it''s
    established or not. We can see such errors, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c54a8575-b5b1-4281-b91c-50753df51589.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the essential points to keep in mind while starting Armitage are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you are the root user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Kali Linux users, if Armitage isn't installed, install it by using the `apt-get
    install armitage` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In cases where Armitage fails to find the database file, make sure that the
    Metasploit database is initialized and running. The database can be initialized
    using the `msfdb init` command and started with the `msfdb start` command.
  prefs: []
  type: TYPE_NORMAL
- en: Touring the user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If a connection is established correctly, we will see the Armitage interface
    panel. It will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f986f67-a2cd-4917-8c61-c50fb92fdfaa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Armitage''s interface is straightforward, and it primarily contains three different
    panes, as marked in the preceding screenshot. Let''s see what these three panes
    are supposed to do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first pane from the top left contains references to all the various modules
    offered by Metasploit: auxiliary, exploit, payload, and post. We can browse and
    double-click a module to launch it instantly. Also, just following the first pane,
    there lies a small input box that we can use to search for the modules immediately
    without exploring the hierarchy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second pane shows all the hosts that are present in the network. This pane
    generally displays the hosts in a graphical format. For example, it will display
    systems running Windows as monitors with a Windows logo. Similarly, a Linux logo
    for Linux and other logos are displayed for other systems running on MAC and so
    on. It will also show printers with a printer symbol, which is an excellent feature
    of Armitage as it helps us recognize the devices on the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third pane shows all the operations performed, the post-exploitation process,
    scanning process, Metasploit's console, and results from the post-exploitation
    modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already seen in the previous chapters, workspaces are used to maintain
    various attack profiles without merging the results. Suppose that we are working
    on a single range and, for some reason, we need to stop our testing and test another
    range. In this instance, we would create a new workspace and use that workspace
    to test the new range to keep the results clean and organized. However, after
    we complete our work in this workspace, we can switch to a different workspace.
    Switching workspaces will load all the relevant data from a workspace automatically.
    This feature will help keep the data separate for all the scans made, preventing
    data from being merged from various scans.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new workspace, navigate to the Workspaces tab and click on Manage.
    This will present us with the Workspaces tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d4163ea-5193-4487-845e-c10de2c62e72.png)'
  prefs: []
  type: TYPE_IMG
- en: A new tab will open in the third pane of Armitage, which will help display all
    the information about workspaces. We will not see anything listed here because
    we have not created any workspaces yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create a workspace by clicking on Add, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c2cc7cc-1dfc-4a90-941d-59b9a89450ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can add workspace with any name we want. Suppose that we added an internal
    range of `192.168.10.0/24`. Let''s see what the Workspaces tab looks like after
    adding the range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b6030d1-c559-4fca-96e0-55063fceb2db.png)'
  prefs: []
  type: TYPE_IMG
- en: We can switch between workspaces at any time by selecting the desired workspace
    and clicking on the Activate button.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning networks and host management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Armitage has a separate tab named Hosts to manage and scan hosts. We can import
    hosts to Armitage via file by clicking on Import Host from the Hosts tab, or we
    can manually add a host by clicking on the Add Host option from the Hosts tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Armitage also provides options to scan for hosts. There are two types of scan:
    **Nmap scan** and **MSF scan**. MSF scan makes use of various port and service-scanning
    modules in Metasploit, whereas the Nmap scan makes use of the popular port scanner
    tool, which is **Network Mapper** (**Nmap**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s scan the network by selecting the MSF scan option from the Hosts tab.
    However, after clicking on MSF scan, Armitage will display a pop-up that asks
    for the target range, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c5d2d7b-8426-4b0c-95b5-479d2a995954.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we enter the target range, Metasploit will start scanning the network
    to identify ports, services, and operating systems. We can view the scan details
    in the third pane of the interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0d56ce7-eac8-4881-97b4-88c6df9d5661.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the scan has completed, every host on the target network will be present
    in the second pane of the interface in the form of icons representing the operating
    system of the host, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/626f0772-2489-41ea-8c46-8196794eb533.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we have a Windows Server 2008, Windows Server 2012,
    and a Windows 10 system. Let's see what services are running on the target.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling out vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see what services are running on the hosts in the target range by right-clicking
    on the desired host and clicking on Services. The results should look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4a9346c-4753-4b6b-b518-89f3cf00cd6e.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see many services running on the `192.168.10.109` host, such as Microsoft
    IIS httpd 7.0, Microsoft Windows RPC, HttpFileServer httpd 2.3, and much more.
    Let's target one of these services by instructing Armitage to find a matching
    exploit for these services.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the match
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can find the matching exploits for a target by selecting a host and then
    browsing the Attacks tab and clicking on the Find Attack option. The Find Attack
    option will match the exploit database against the services running on the target
    host. Armitage generates a pop-up after matching all of the services against the
    exploit database, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1722499f-f824-4a69-ac44-6306fce700f9.png)'
  prefs: []
  type: TYPE_IMG
- en: After we click on OK, we will be able to notice that whenever we right-click
    on a host, a new option named Attack is available on the menu. The Attack submenu
    will display all the matching exploit modules that we can launch at the target
    host.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation with Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the Attack menu becomes available to a host, we are all set to exploit
    the target. Let''s target the HttpFileServer httpd 2.3 with the Rejetto HTTPFileServer
    Remote Command Execution exploit from the Attack menu. Clicking on the Exploit
    option will present a new pop-up that displays all the settings. Let''s set all
    the required options as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94a67f31-b4dc-4122-9b48-118079587696.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After setting all the options, click on Launch to run the exploit module against
    the target. We will be able to see exploitation being carried out on the target
    in the third pane of the interface after we launch the `exploit` module, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b91d639-a6a6-437b-aea1-ff0bdad70c9c.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see Meterpreter launching, which denotes the successful exploitation
    of the target. Also, the icon of the target host changes to the possessed system
    icon with red lightning.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation with Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Armitage makes post-exploitation as easy as clicking on a button. To execute
    post-exploitation modules, right-click on the exploited host and choose Meterpreter
    4 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/492fcd22-b7d2-4c85-831d-0b0c8ab20dfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing Meterpreter will present all the post-exploitation modules in sections.
    If we want to elevate privileges or gain system-level access, we will navigate
    to the Access submenu and click on the appropriate button, depending on our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The Interact submenu will provide options for getting a command prompt, another
    Meterpreter, and so on. The Explore submenu will offer options such as Browse
    Files, Show Processes, Log Keystrokes, Screenshot, Webcam Shot, and Post Modules,
    which are used to launch other post-exploitation modules that are not present
    in this submenu.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4256f110-7ed2-4bea-bffb-ecd9fd036212.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s run a simple post-exploitation module by clicking on Browse Files, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9082c863-794d-4ae1-bd6a-578ca07d5ed3.png)'
  prefs: []
  type: TYPE_IMG
- en: We can easily upload, download, and view any files we want on the target system
    by clicking on the appropriate button. This is the beauty of Armitage; it keeps
    commands far away and presents everything in a graphical format.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our remote-exploitation attack with Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: Red teaming with Armitage team server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For a large penetration testing environment, red teaming is often required,
    where a group of penetration testers can work on a project collectively so that
    better results can be yielded. Armitage offers a team server that can be used
    to share operations with members of the penetration testing team efficiently.
    We can quickly start a team server using the `teamserver` command followed by
    the accessible IP address and a password of our choice, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b08fc56-4dbb-4220-a073-a4c5a03e27f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have started an instance of the team server on IP address
    `192.168.10.107` and used the password hackers for authentication. We can see
    that on successful initialization, we have the credential details that we need
    to spread between the team members. Now, let''s connect to this team server by
    initializing Armitage from the command line using the `armitage` command and typing
    in the connection details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4289974-cba1-4f36-b98a-41b27b431e19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as a successful connection is established, we will see a screen similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65136d4b-80ba-4c61-a52f-7ff9ce8ae8a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the fingerprint is identical to the one presented by our team
    server. Let''s choose Yes to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5ea2553-e86a-400b-b527-c79b4759abd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can select a nickname to join the team server. Let''s press OK to get connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a71b0b64-4dcf-4342-a621-b3164e31ee8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we are successfully connected to the team server from our local
    instance of Armitage. Also, all the connected users can chat with each other through
    the event log window. Consider that we have another user who joined the team server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6efadf21-30e8-429c-99c5-1eb085286862.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see two different users talking to each other and connected from their
    respective instances. Let''s initialize a port scan and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74ce3220-9e8d-4767-97d8-95f3aecf8038.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the user `Nipun` started a portscan, and it was immediately
    populated for the other user as well, and he can view the targets. Consider that `Nipun`
    adds a host to the test and exploits it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8bb8e67-ee1b-4903-90be-929bedbb458a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the user `Kislay` is also able to view all the activity of
    the scan. However, for user `Kislay` to access the Meterpreter, he needs to shift
    to the console space and type in the `sessions` command followed by the identifier,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8218027f-00c6-475a-829b-0ae2a630698d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that Armitage has enabled us to work in a team environment much more
    efficiently than using a single instance of Metasploit. Let's see how we can script
    Armitage in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting Armitage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cortana is a scripting language that is used to create attack vectors in Armitage.
    Penetration testers use Cortana for red teaming and virtually cloning attack vectors
    so that they act like bots. However, a red team is an independent group that challenges
    an organization to improve its effectiveness and security.
  prefs: []
  type: TYPE_NORMAL
- en: Cortana uses Metasploit's remote procedure client by making use of a scripting
    language. It provides flexibility in controlling Metasploit's operations and managing
    the database automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Also, Cortana scripts automate the responses of the penetration tester when
    a particular event occurs. Suppose we are performing a penetration test on a network
    of 100 systems, where 29 systems run on Windows Server 2012 and the other system
    run on the Linux OS, and we need a mechanism that will automatically exploit every
    Windows Server 2012 system, which is running HttpFileServer httpd 2.3 on port
    `8081` with the Rejetto HTTPFileServer Remote Command Execution exploit.
  prefs: []
  type: TYPE_NORMAL
- en: We can quickly develop a simple script that will automate this entire task and
    save us a great deal of time. A script to automate this task will exploit each
    system as soon as they appear on the network with the `rejetto_hfs_exec` exploit,
    and it will perform predestinated post-exploitation functions on them too.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals of Cortana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scripting a basic attack with Cortana will help us understand Cortana with
    a much wider approach. So, let''s see an example script that automates the exploitation
    on port `8081` for a Windows OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding script will execute when an Nmap or MSF scan finds port `8081`
    open. The script will check whether the target is running on a Windows 7 system
    upon which Cortana will automatically attack the host with the `rejetto_hfs_exec`
    exploit on port `8081`.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding script, `$1` specifies the IP address of the host. `print_ln`
    prints out the strings and variables. `host_os` is a function in Cortana that
    returns the operating system of the host. The `exploit` function launches an exploit
    module at the address specified by the `$1` parameter, and `%` signifies options
    that it can be set for an exploit in case a service is running on a different
    port or requires additional details. `service_add_8081` specifies an event that
    is to be triggered when port `8081` is found open on a particular client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s save the earlier-mentioned script and load this script into Armitage
    by navigating to the Armitage tab and clicking on Scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/584bf0a6-cd82-4782-bde6-2de4eae73c52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run the script against a target, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Load button to load a Cortana script into Armitage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77a4eb4f-ef34-451f-9395-527561f9b591.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the script and click on Open. The action will load the script into Armitage
    forever:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/140a0537-2c19-461c-a5f3-6b0ae464a308.png)'
  prefs: []
  type: TYPE_IMG
- en: Move on to the Cortana console and type the `help` command to list the various
    options that Cortana can make use of while dealing with scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, to see the various operations that are performed when a Cortana script
    run, we will use the `logon` command followed by the name of the script. The `logon`
    command will provide logging features to a script and will log every operation
    performed by the script, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3932965-f2b2-4e18-9458-22c372f6d9f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's perform an intense scan of the target by browsing the Hosts tab and
    selecting Intense Scan from the Nmap submenu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we can see, we found a host with port `8081` open. Let''s move back on to
    our `Cortana` console and see whether some activity has occurred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b097d26-cb9d-4d41-b308-307cecae4d34.png)'
  prefs: []
  type: TYPE_IMG
- en: Bang! Cortana has already taken over the host by launching the exploit automatically
    on the target host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, Cortana made penetration testing very easy for us by performing
    the operations automatically. In the next few sections, we will look at how we
    can automate post-exploitation and handle further operations of Metasploit with
    Cortana.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cortana controls Metasploit functions very well. We can send any command to
    Metasploit using Cortana. Let''s see an example script to help us understand more
    about controlling Metasploit functions from Cortana:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding script, the `cmd_async` command sends the `hosts` and `services`
    commands to Metasploit and ensures that they are executed. Also, the `console_*`
    functions are used to print the output of the command sent by `cmd_async`. Metasploit
    will execute these commands; however, in order to print the output, we need to
    define the `console_*` function. Also, `$3` is the argument that holds the output
    of the commands executed by Metasploit. After loading the `ready.cna` script,
    let''s open the Cortana console to view the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/217527e6-be8f-4d29-bce9-fc01ff464459.png)'
  prefs: []
  type: TYPE_IMG
- en: Clearly, the output of the commands is shown in the preceding screenshot, which
    concludes our current discussion. However, more information on Cortana scripts
    and controlling Metasploit through Armitage can be gained at: [http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation with Cortana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Post-exploitation with Cortana is also simple. Cortana''s built-in functions
    can make post-exploitation easy to tackle. Let''s understand this using the following
    example script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we used a function named `heartbeat_15s`. This function
    repeats its execution every `15` seconds. Hence, it is called a **heart beat**
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The `local` function will denote that `$sid` is local to the current function.
    The next `foreach` statement is a loop that hops over every open session. The
    `if` statement will check whether the session type is a Windows Meterpreter and
    that it is ready to interact and accept commands.
  prefs: []
  type: TYPE_NORMAL
- en: The `m_cmd` function sends the command to the Meterpreter session with parameters
    such as `$sid,` which is the session ID, and the command to execute. Next, we
    define a function with `meterpreter_*`, where `*` denotes the command sent to
    the Meterpreter session. This function will print the output of the `sent` command,
    as we did in the previous exercise for `console_hosts` and `console_services`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run this script and analyze the results, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a34370a-ad60-44c1-9130-df5be248b91e.png)'
  prefs: []
  type: TYPE_IMG
- en: As soon as we load the script, it will display the user ID and the current process
    ID of the target after every `15` seconds.
  prefs: []
  type: TYPE_NORMAL
- en: For further information on post-exploitation, scripts, and functions in Cortana,
    refer to [http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom menu in Cortana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cortana also delivers an exceptional output when it comes to building custom
    pop-up menus that attach to a host after getting the Meterpreter session and other
    types of session as well. Let''s build a custom key logger menu with Cortana and
    understand its workings by analyzing the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example shows the creation of a pop-up in the Meterpreter submenu.
    However, this pop-up will only be available if we are able to exploit the target
    host and get a Meterpreter shell successfully.
  prefs: []
  type: TYPE_NORMAL
- en: The `popup` keyword will denote the creation of a pop-up. The `meterpreter_bottom`
    function will signify that Armitage will display this menu at the bottom whenever
    a user right-clicks on an exploited host and chooses the `Meterpreter` option.
    The `item` keyword specifies various items in the menu. The `m_cmd` command is
    the command that will send the Meterpreter commands to Metasploit with their respective
    session IDs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, in the preceding script, we have three items: Start Key Logger,
    Stop Key Logger, and Show Keylogs. They are used to start keylogging, stop keylogging,
    and display the data that is present in the logs, respectively. We have also declared
    three functions that will handle the output of the commands sent to the Meterpreter.
    Let''s load this script into Cortana, exploit the host, and right-click on the
    compromised host, which will present us with the following menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/957b1aa2-bf28-492c-ba8f-c1db6e7d5da8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that whenever we right-click on an exploited host and browse the
    Meterpreter 3 menu, we will see a new menu named My Key Logger listed at the bottom
    of all the menus. This menu will contain all the items that we declared in the
    script. Whenever we select an option from this menu, the corresponding command
    runs and displays its output on the Cortana console. Let''s select the first option,
    Start Key Logger. Wait for a few seconds for the target to type something and
    click on the third option, Show Keylogs, from the menu, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec6a305a-960e-42b0-896f-546d7f7ca93f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we click on the Show Keylogs option, we will see the characters typed
    by the person working on the compromised host in the Cortana console, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/437df24b-fe7f-47f2-9c1d-ac313072dcda.png)'
  prefs: []
  type: TYPE_IMG
- en: Working with interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cortana also provides a flexible approach while working with interfaces. Cortana
    provides options and functions to create shortcuts, tables, switching tabs, and
    various other operations. Suppose we want to add custom functionality, such as
    when we press the *F1* key from the keyboard; Cortana displays the `UID` of the
    target host. Let''s see an example of a script that will enable us to achieve
    this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The previous script will add a shortcut key, `F1`, that will display the `UID`
    of the target system when pressed. The `bind` keyword in the script denotes binding
    of the functionality with the *F1* key. Next, we define the value of the `$sid`
    variable as `3` (this is the value of the session ID which we'll be interacting
    with).
  prefs: []
  type: TYPE_NORMAL
- en: The `spawn` function will create a new instance of Cortana, execute the `gu`
    function, and install the value `$sid` to the global scope of the new instance.
    The `gu` function will send the `getuid` command to the Meterpreter. The `meterpreter_getuid`
    command will handle the output of the `getuid` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `show_message` command will show a message displaying the output from the
    `getuid` command. Let''s load the script into Armitage and press the *F1* key
    to check and see whether our current script executes correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7bf4358-85b6-456c-a08f-d488d89452fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Bang! We got the `UID` of the target system easily, which is WIN-SWIKKOTKSHXmm.
    This concludes our discussion on Cortana scripting using Armitage.
  prefs: []
  type: TYPE_NORMAL
- en: For further information about Cortana scripting and its various functions, refer
    to: [http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf](http://www.fastandeasyhacking.com/download/cortana/cortana_tutorial.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we had a good look at Armitage and its multiple features. We
    kicked off by looking at the interface and building up workspaces. We also saw
    how we could exploit a host with Armitage. We looked at remote as well as client-side
    exploitation and post-exploitation. Furthermore, we jumped into Cortana and discussed
    about its fundamentals, using it to control Metasploit, writing post-exploitation
    scripts, custom menus, and interfaces as well.
  prefs: []
  type: TYPE_NORMAL
