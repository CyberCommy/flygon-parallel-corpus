- en: Chapter 5. Using Controllers and Routes for URLs and APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a route using a closure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a RESTful controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using advanced routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a filter on the route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using route groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a RESTful API with routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using named routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a subdomain in your route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll go through some ways to use Laravel''s routing system.
    There are two basic ways to route our application: either setting the routes in
    the `routes.php` file with closures or using controllers. We''ll see the power
    that each of these methods holds and show how they can be used in our application.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Model-View-Controller** (**MVC**) patterns are very popular in PHP frameworks.
    In this recipe, we''ll create a simple controller that extends another base controller.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, we just need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/controllers` directory, create a file named `UsersController.php`
    and type the following code in to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `routes.php` file, add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Test the controller by going to `http://your-server/users` and `http://your-server/users/about`,
    where `your-server` is the URL to your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our User controller (and pretty much in any other controller that we create),
    we start by extending the base controller. If we look in the `BaseController.php`
    file, we see only one method, the `setupLayout()` method, which is used for our
    layout views. The base controller could also be used if there's some code that
    we want to run on every page of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Back in the User controller, we define two methods for our Index and About page,
    with each method prefixed by `action`. For our purposes, we're just returning
    a single string, but this would be where all of our controller logic would go
    and where we would set the view to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: So that Laravel is able to parse the URL and determine which controller and
    methods to use, we need to register the routes in our `routes` file. Now, in our
    browser, when we go to `/users` (or `/users/index`), we'll be taken to our Index
    page, while `/users/about` will take us to our About page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a route using a closure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we decide not to use an MVC pattern, we can create our routes by using a
    closure, or anonymous function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we just need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/routes.php` file, add a route as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Open your browser and test the route by visiting `http://your-server/hello/world`,
    where `your-server` is the URL to your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Routes in Laravel are considered RESTful, which means they respond to various
    different HTTP verbs. Most of the time, when simply viewing web pages, we use
    the `GET` verb, as in `Route::get`. Our first parameter is the URL that we're
    using for the route, and it can be pretty much any valid URL string. In our case,
    when a user goes to `hello/world`, it will use this route. After that is our closure,
    or anonymous function.
  prefs: []
  type: TYPE_NORMAL
- en: In the closure, we can pull in any data from our model, do whatever logic we
    want, and call the views we want to use. In our example case, we're just setting
    a couple of variables and returning their concatenated value.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a RESTful controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be a time when we want to have a RESTful web application, such as
    when building an API. To accomplish this, we need our routes to respond to various
    HTTP requests. The routes with closures are already set up this way, but in this
    recipe, we'll stay in the MVC pattern and create a controller that is RESTful.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation and the code from the
    *Creating a basic controller* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the User controller, replace the code with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, add the route to our controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In your browser, go to `http://your-server/users` (where `your-server` is the
    URL of your web server) and click on the **Submit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, go to `http://your-server/users/about`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The two main differences between a RESTful and non-RESTful controller are renaming
    the methods to have the HTTP request they respond to as a prefix and registering
    our routes with `Route::controller()`.
  prefs: []
  type: TYPE_NORMAL
- en: Our `getIndex()` method is the default method when we go to `/users`, since
    most page views are `GET` requests. In this example, we're returning a very simple
    form that will post the input back to itself. However, since the form is using
    a `POST` request, it will trigger the `postIndex()` method, and that's where the
    form can be processed. In our example, we're just using the `dd()` helper of Laravel
    to display the submitted form input.
  prefs: []
  type: TYPE_NORMAL
- en: Using advanced routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating routes that require parameters, we may need to use more advanced
    features. Using Laravel and regular expressions, we can make sure that our routes
    only respond to certain URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `routes.php` file, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Open a browser and test the route by typing something such as `http://your-server/tvshow/MASH/1981`
    (where `your-server` is the URL for your server) in the address bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by having our route respond to a `GET` request for `tvshow`. If we
    want to pass parameters to the route, we need to set up wildcards. We can use
    as many parameters as we'd like and name them whatever we'd like as long as we
    pass the same name to the function. For this recipe, we want to get a show title,
    and to make this parameter optional, we add the question mark at the end.
  prefs: []
  type: TYPE_NORMAL
- en: For our second parameter, we want a `year`. In this case, it has to be a four
    digit number. To use a regular expression, we chain the `where()` method to our
    route with the name of the parameter and the expression. In this example, we want
    only numbers, (`\d`), and there have to be four of them, (`{4}`). The question
    mark in the route's parameter makes the field optional.
  prefs: []
  type: TYPE_NORMAL
- en: In our closure, we set variables for each wildcard using the same name we set.
    To make them optional, we set each variable default to `null`. Then we check to
    see if the parameters were set, and if so, return an appropriate message.
  prefs: []
  type: TYPE_NORMAL
- en: Using a filter on the route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A powerful feature of Laravel is adding filters that can run both before and
    after a request is made to our application. In this recipe, we'll explore these
    filters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we just need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `routes.php` file, add a route only accessible to admins with filters
    attached:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add in the two filters in our `filters.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route where we can set the admin session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Test the route by going to `http://your-server/admin-only` (where `your-server`
    is the URL for your server) and notice the results. Then, go to `set-admin` and
    see those results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `app/storage/logs` directory and view the logfiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our `admin-only` route, instead of just adding the closure, we add an array
    with the closure as the last parameter. For our purposes, we want to check that
    the `user_type` session is set to `admin` before accessing the route. We also
    want to log each time someone accesses the route, but only after the page is processed.
  prefs: []
  type: TYPE_NORMAL
- en: In our `before` filter, we do a simple check of a session, and if that session
    doesn't equal `admin`, we return a notice and stop the route from returning its
    message. If the session does equal `admin`, the route proceeds as normal.
  prefs: []
  type: TYPE_NORMAL
- en: After the route is accessed, we create a log of the visit along with the date
    the route was accessed.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, if we went to `admin-only` in our browser, the `before` filter
    would kick in and display the error message. Then, if we went to our logs directory
    and looked at the log, it would show the time of the attempt, the name of the
    log message, and the response. For us, it would show **You are not an Admin. Go
    Away!**.
  prefs: []
  type: TYPE_NORMAL
- en: To make the route accessible, we create another route that simply sets the session
    we want and redirect back to our `admin-only` page. If we visit `set-admin`, it
    should automatically direct us to `admin-only` and display the success page. Also,
    if we look in our logs, we'll see the line for our successful attempt.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very rudimentary authentication method simply to show the usefulness
    of filters. For better authentication, use Laravel's built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: Using route groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating a web app, we may find a few routes that need the same URL prefix
    or filter. Using Laravel's route groups, we can easily apply these to multiple
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we just need a standard installation of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `app/filters.php` file, create a filter to check for a user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/routes.php` file, create a route that can set our profile session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, create our route group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In our browser, we then go to `http://path/to/our/server/profile/user`, where
    we will get an error. If we then go to `http://path/to/our/server/set-profile`,
    it will redirect us and show the correct page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do is create a filter. This simple filter will check
    a session name, `profile`, to see if it equals `user`. If not, it won't let us
    proceed any further.
  prefs: []
  type: TYPE_NORMAL
- en: Back in our routes, we then create a route that will set the `profile` session
    for us and then redirect us to the route group. Setting the session would normally
    be done after logging in, but here we're just testing to make sure it works.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we create our route group. For this group, we want every route within
    it to run through the `checkUser` filter before allowing access. We also want
    these routes to have `profile/` come before them. We do this by adding them to
    the array just before we call the group's closure. Now, any route we create inside
    this group must pass the filter and will be accessible using the `profile` prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Building a RESTful API with routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common need for a modern web application is having an API that third-parties
    can run queries against. Since Laravel is built with RESTful patterns as a focus,
    it's quite easy to build a full API with very little work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation with a properly configured
    MySQL database tied into our application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command line, go to the root directory of the Laravel installation,
    and create a migration for our table using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/database/migrations` directory, find the file similar to `2012_12_01_222821_create_shows_table.php`
    and create the schema for our table as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the command line, run the migration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another migration to add some test data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/database/migrations` folder, open the `add_shows_data` file and
    add the query as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, run the migration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/models` directory, create a file named `Show.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, create a route to return a JSON of all the shows or a single
    show as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route that will add in new shows as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route that will delete a record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route to update a record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to hold our add and edit `show form`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to show a list so we can delete a show:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/views` folder, create a file named `show-form.php` and add the
    following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in `app/views`, create a file named `show-delete.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Test it out by going to the `show-form` and `show-delete` routes in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step is to create our tables with the data we want to use. Using artisan
    and migrations, we create a shows table and then add in some test data.
  prefs: []
  type: TYPE_NORMAL
- en: For our routes, we're going to respond to four different HTTP verbs, `GET`,
    `POST`, `PUT`, and `DELETE`, but all at the same URL, `show`. The `GET` request
    will serve two purposes. First, if no ID is passed in the URL, it will display
    the entire list from the database. Second, if there is an ID, it will display
    the single record. By returning the eloquent object directly, it will automatically
    take our object and display it as JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Our next route responds to the `POST` request and will add a new record in the
    database. It will then display the record that was saved as JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we add a route that responds to the `DELETE` request. It takes the `id`
    parameter, deletes the record, and displays JSON that the deletion was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we have a route responding to a `PUT` request with an `id` parameter.
    This route will load in the record for the passed in ID and then edit the values.
    If it updates correctly, it displays a JSON of the updated record.
  prefs: []
  type: TYPE_NORMAL
- en: To show the API in action, we need to create a form to add and update the records.
    Our `show-form` route checks to see if an ID was passed in, and if so, it creates
    a form using the `PUT` method and loads the record's values into the fields. If
    no ID is set, we create a blank form using the `POST` method.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to delete a record, our `show-delete` route will display a list of
    shows and a delete button next to each one. Those buttons are actually part of
    a form that uses the `DELETE` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could also test the routes using `curl` in the command line. For example,
    to get the full list, use the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To post to the API, use the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keep in mind that this API example is very basic. To make it better, we would
    need to add in some validation whenever we add or update a record. It would also
    be a good idea to add in some kind of authentication so that the public wouldn't
    be able to alter our table and delete records.
  prefs: []
  type: TYPE_NORMAL
- en: We could also use Laravel's resourceful controllers to accomplish something
    similar. More information about those can be found in the documentation at [http://laravel.com/docs/controllers#resource-controllers](http://laravel.com/docs/controllers#resource-controllers).
  prefs: []
  type: TYPE_NORMAL
- en: Using named routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when we need to change our route's name. On a large site,
    this could cause a lot of problems if we have multiple links to an incorrect route.
    Laravel provides an easy-to-use way of assigning names to our routes, so we never
    have to worry if they change.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `routes.php` file, create a named route as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route that performs a simple redirect to the named route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route that displays a link to the named route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, visit `http://your-server/redirect` and `http://your-server/link`
    (where `your-server` is the URL for the server) and notice that they send us to
    the `main-route` route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, rename the `main-route` route to `new-route`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, visit the **redirect** and **link** routes and see where they
    send us now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There may be times when your route will need to change; for example, if a client
    has a blog but wants the route "posts" to become "articles". If we have links
    to the "posts" route throughout our site, it would mean we need to find every
    file and make sure they're changed. By using a named route, we can rename the
    route to anything we want, and as long as all our links point to the name, everything
    will stay updated.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we have route `main-route` and have it named `named`. Now, if
    we want to link or redirect to the route, we can use `route()` pointing to the
    named route. Then, if we change the route to `new-route` and recheck those links,
    it will automatically go to the changed route.
  prefs: []
  type: TYPE_NORMAL
- en: Using a subdomain in your route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many modern web applications offer customized content to their users, including
    giving them a custom subdomain where they can access their content. For example,
    instead of a user's profile page being `http://example.com/users/37`, we might
    want to offer `http://username.example.com`. By changing some DNS and Apache settings,
    we can easily provide the same functionality in Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need access to our DNS settings and our server's Apache
    configurations. We'll also need a properly configured MySQL database and a standard
    Laravel installation. Throughout the recipe, we'll be using `example.com` as the
    domain name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the DNS for our domain name, we need to add an "A" record using a wildcard
    for the subdomain, such as `*.example.com`, and then point it to our server's
    IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up Apache''s `httpd.conf` file and add a virtual host to it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, go to our application route and create a migration for
    our `names` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `migrations` directory, open the `create_names_table` file and add our
    schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the command line, create another migration to add some test data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `add_names_data` file in the `migrations` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, run the migration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route to get information from the `names` table based on the subdomain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, visit our domain with a relevant subdomain such as `http://ted.example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start off, we need to update our DNS and our server. In our DNS, we create
    a wildcard subdomain and create a virtual host in our Apache configuration. This
    makes sure that any subdomains used will go to our main application.
  prefs: []
  type: TYPE_NORMAL
- en: For our default route, we use the `parse_url` function of PHP to get the domain
    name, explode it into an array, and use only the first element. We can then query
    the database using the subdomain and create a customized experience for the user.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe allows for a single route to process the subdomains, but if we
    would like to use more routes with a subdomain, we could use a route group similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
