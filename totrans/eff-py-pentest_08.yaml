- en: Chapter 8. Keylogging and Screen Grabbing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Python, we can programmatically do tasks such as catch all keystrokes,
    capture the screen, log the programs being run, close them, monitor clipboard
    content, and much more. Hackers may use these techniques to maliciously gain access
    to a victim's private information, while employers might use them to monitor employee
    activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Keylogging with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen grabbing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyloggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **keylogger** is a software or hardware device that logs or records keystrokes
    in real time. They are used to troubleshoot technical problems with computers
    and networks. They could also be used to monitor the network and computer usage
    of people without their direct knowledge. So, this can also be misused on public
    computers to steal passwords or credit card information.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware keyloggers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hardware-based keyloggers can monitor victims' activities without any software
    being installed. They can be easily detected since, is a physical device that
    may be connected somewhere between the computer keyboard and the USB/PS2 port.
    There are more advanced hardware keyloggers that are not externally visible and
    are not dependent on any software. So, they cannot be detected by any software.
    But, a hardware keylogger requires physical access to the victim.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of wireless keyboards, it is possible to intercept the signals sent
    from the keyboard to its receiver with a wireless sniffer.
  prefs: []
  type: TYPE_NORMAL
- en: Software keyloggers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With a software keylogger, we can provide access to the locally recorded keystrokes
    from a remote system. This can be done by uploading the recorded keystrokes to
    a database or FTP server. We can also send this as an email attachment periodically.
  prefs: []
  type: TYPE_NORMAL
- en: Keyloggers with pyhook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a simple keylogger script to record keystroke activities on a computer
    and to store it in a text file, we could use the `pyhook` module. This will provide
    callback for global mouse and keyboard events in Windows systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the required modules. Here, we are importing the `pyhook` and pythoncom
    modules from ActivePython Package. The `pythoncom` module is used in this script
    to pump all messages for the current thread:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the file where to save the logging data. (Windows filenames use a backslash
    as a separator. But, in Python, backslash is an escape character, so we have to
    put a double slash "`\\`" in path. Otherwise, we can use rawstring to define the
    file name.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can define the function that handles each keyboard event. Here, we can
    make use of logging modules to log each character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we instantiate the `pyhook` manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Call a keyboard event function on each keystroke:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will work in a Windows system. To work with Linux we have to depend on
    another module: `pyxhook`. You can get this module from [https://github.com/JeffHoogland/pyxhook](https://github.com/JeffHoogland/pyxhook).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With `pyxhook`, you can rewrite the preceding script to work with Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can improve the script to log the keystrokes to a remote server or to handle
    specific keystrokes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To send the logged keystrokes to an e-mail, we can use the `smtplib` module.
    We need to import the required modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can define the method to send an e-mail by connecting to our SMTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can pass the data and address to this method. This will send the keystrokes
    to the specified address. Now we can rewrite the `OnKeyboardEvent` method to send
    the keystrokes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now this will send the keystrokes to the specified e-mail ID when the log file
    has 1000 characters in it. Likewise, we can add a method to upload the file to
    an FTP server. Here, we have to import the `ftplib` module and the `os` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then, define the method to upload the file to  an FTP server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now we can use this method in the `OnKeyboardEvent` function to upload keystrokes
    to the FTP server.
  prefs: []
  type: TYPE_NORMAL
- en: The output from the keylogger will be a huge file, with megabytes of text in
    which the data is hidden. We can use regular expressions to scan this file to
    get the required data. For instance, two regexes that would match the usernames
    and passwords from a pile of text.
  prefs: []
  type: TYPE_NORMAL
- en: 'To identify e-mail IDs the following regex can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To identify password like patterns that are longer than six letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With regex we can search for any data that has a pattern and can be built into
    a regex expression. Some examples of such data are social security numbers, credit
    card numbers, bank accounts, phone numbers, names, passwords, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Screen grabbing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Screen grabber captures the victim's desktop and sends the images to a remote
    server. There are many Python modules that can be used to grab a raster image
    of the screen programmatically. We could make use of the **Python Image Library**
    (**PIL**) for Windows and OSX. The PIL package contains the `ImageGrab` module
    that can be used to grab screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the modules, here we also import the time module to sleep the execution
    for three seconds—allowing the user to switch the screen display before the grab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Sleep three seconds and take a screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also take a screenshot of a specific area on screen by providing the
    area as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot illustrates the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screen grabbing](img/image_08_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To grab a screenshot on a Linux system, we have to use the `wxPython` library,
    which has cross-platform compatibility. We can download wxPython from [http://wxpython.org/download.php](http://wxpython.org/download.php)
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the wx module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'First, create the app instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `wx.ScreenDC` method provides access to the entire desktop, which also
    includes any extended desktop monitor screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new empty bitmap with the size of the screen as destination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the screen bitmap into the returned capture bitmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the bitmap as an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we could send this screenshot to a remote location, with minimal changes
    to the script. For instance, we can use the `scp` protocol to send it to another
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we could use `ftplib` to upload the file with the FTP protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the module `ftplib`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Start a new session with the remote server credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the file using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Send the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the file and FTP session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed the basic modules which you could use for keylogging and screen
    grabbing with Python. Now you can create customized versions of these scripts
    to log keys and grab screenshots. We will look at some attack automation techniques
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
