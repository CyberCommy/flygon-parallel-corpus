- en: Murano – Containerized Application Deployment on OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will explain the OpenStack project, Murano, which is the application
    catalog to OpenStack that enables application developers and cloud administrators
    to publish various cloud-ready applications in a browsable categorized catalog.
    Murano greatly eases the application deployment on the OpenStack infrastructure
    with just a click. In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Murano
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Murano concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Murano components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk-through
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Murano DevStack installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying containerized application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Murano
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano is the OpenStack application catalog service, which provides various
    cloud-ready applications to be easily deployed on OpenStack, abstracting all the
    complexities behind. It simplifies the packaging and deployment of various applications
    on top of OpenStack IaaS. It is an integration point for external applications
    and OpenStack with the support of complete life cycle management of applications. Murano
    applications can be run inside Docker containers or Kubernetes Pod.
  prefs: []
  type: TYPE_NORMAL
- en: Murano is a powerful solution for end users, looking for application deployment
    on top of OpenStack, who don't want to worry about deployment complexities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of features provided by Murano:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides production ready applications and dynamic UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports running containerized application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports provisioning applications on both Windows and Linux systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secures data with Barbican
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports running application packages using **Heat Orchestration Templates**
    (**HOT**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploys multiregion application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows attaching of Cinder volumes to the VMs in an application and storing
    of packages in Glare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages similar packages in a bundle, such as container-based apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides statistics related to the environment and applications for billing
    purpose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Murano concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the different concepts used in Murano.
  prefs: []
  type: TYPE_NORMAL
- en: Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An environment in Murano represents a set of applications, which is managed
    by a single tenant. No two tenants can share the applications in an environment.
    Also an application in one environment is independent of other environments. Multiple
    applications, that are logically related in an environment, can together form
    a more complex application.
  prefs: []
  type: TYPE_NORMAL
- en: Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A package in Murano is a ZIP archive that contains all the installation scripts,
    class definitions, dynamic UI forms, image lists, and the instruction of an application
    deployment. This package is imported by Murano and used for deploying an application.
    Various packages can be uploaded to Murano for different applications.
  prefs: []
  type: TYPE_NORMAL
- en: Session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano allows modification to an environment from multiple users who are from
    different locations. To allow modification from multiple users at the same time,
    Murano uses sessions that stores local modification from all users. A session
    is created when any application is added to an environment, and after the deployment
    is started, the session becomes invalid. A session can't be shared among multiple
    users.
  prefs: []
  type: TYPE_NORMAL
- en: The environment template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A set of applications can form a complex application. To define such applications,
    Murano uses the concept of **environment template**. Each application in the template
    is managed by a single tenant. This template can be deployed by translating it
    into an environment.
  prefs: []
  type: TYPE_NORMAL
- en: Deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A deployment is used to represent a process of installing an application. It
    stores information such as environment status, events, and errors in any application
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bundle in Murano represents a group of similar applications. Applications
    in a bundle need not to be closely related. They are sorted according to usage.
  prefs: []
  type: TYPE_NORMAL
- en: An example for this is, creating a bundle of database apps consisting of a MySQL
    or Oracle application. A bundle can be imported directly in Murano, which will
    in turn import all the applications in the bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications can be grouped into different categories, based on their types,
    such as application servers, big data, and databases.
  prefs: []
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano has many advanced features that makes it a strong solution for application
    management on OpenStack. In this section, we will talk about some of the advanced
    features in Murano.
  prefs: []
  type: TYPE_NORMAL
- en: Production-ready applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano has various cloud-ready applications that can be configured very easily
    on either VM or baremetal. This doesn't need any knowledge of installation, infrastructure
    management, and so on, making deployment of complex applications an easy task
    for OpenStack users. Users can choose to run their application on Docker Host
    or Kubernetes Pod.
  prefs: []
  type: TYPE_NORMAL
- en: Application catalog UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano provides a UI for end users to easily browse the applications available.
    Users can deploy any complex application with just a push of a button. The UI
    is dynamic, in the sense that it provides forms for user input while an application
    is provisioned. It also allows application tagging, provides information about
    each application, shows recent activities, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing workloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano allows its users to select regions while provisioning any application.
    This way, your application can be distributed in cross-regions for achieving scalability
    and high availability while any disaster recovery.
  prefs: []
  type: TYPE_NORMAL
- en: Application development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Murano Programming Language** (**MuranoPL**) can be used to define an application.
    It uses YAML and YAQL for application definition. It also has some core libraries
    that define the common function used in several applications. MuranoPL also supports
    garbage collection, which means it deallocates all the resources of an application.'
  prefs: []
  type: TYPE_NORMAL
- en: Murano repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano supports installing packages from different sources such as a file, URL,
    and repository. Murano can import an application package from a custom repository.
    It downloads all the dependent packages and images, if defined from the repository
    for application deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.openstack.org/murano/latest/admin/appdev-guide/muranopackages/repository.html](https://docs.openstack.org/murano/latest/admin/appdev-guide/muranopackages/repository.html)
    for setting up a custom repository.
  prefs: []
  type: TYPE_NORMAL
- en: Cinder volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano supports the attaching of Cinder volumes to the VMs in an application
    and also supports the booting of these VMs from a Cinder volume. Multiple volumes
    can be attached to an application for storage purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.openstack.org/murano/latest/admin/appdev-guide/cinder_volume_supporting.html](https://docs.openstack.org/murano/latest/admin/appdev-guide/cinder_volume_supporting.html)
    for the detailed step of using Cinder volumes with Murano.
  prefs: []
  type: TYPE_NORMAL
- en: Barbican support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Barbican is the OpenStack project to support sensitive data such as password
    and certificates. Murano ensures that your data is secured by storing it in Barbican.
    You need to install Barbican, and configure Murano to use Barbican as the backend
    storage solution.
  prefs: []
  type: TYPE_NORMAL
- en: HOT packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Murano supports the composing of an application package from the Heat template.
    You can add any Heat template to Murano as a new package for deployment. Murano
    supports both the automatic and manual way of composing an application package
    from the Heat template.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.openstack.org/murano/latest/admin/appdev-guide/hot_packages.html](https://docs.openstack.org/murano/latest/admin/appdev-guide/hot_packages.html)
    for details on using Heat templates with Murano.
  prefs: []
  type: TYPE_NORMAL
- en: Murano components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The figure in *The Murano dashboard* section explains the architecture of Murano.
    Murano has a similar architecture to other OpenStack components. It also has the
    API service and an engine as the main components. There are other components as
    well, such as `murano-agent`, Murano dashboard, and the python client, that is,
    `murano-pythonclient`. Let's take a look at each component in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The Murano API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Murano API (`murano-api`) is a WSGI server that serves the API requests
    of users. The Murano API has different controllers for each resource type. Each
    controller handles a request for specific resources. They validate the request
    for permissions, validate the data provided in the request, and create a DB object
    for the resource with the input data. The request is forwarded to the `murano-engine`
    service. Upon receiving a response from `murano-engine`, the `murano-api` service
    returns the response to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The Murano engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Murano engine (`murano-engine`) is the service where most of the orchestration
    happens. It makes a series of calls to Heat, the OpenStack Orchestration service,
    to create the infrastructural resources, such as VMs and volumes, required for
    the deployment of the application. It also starts an agent known as `murano-agent`
    inside the VMs, to do the installation of external applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Murano agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Murano agent (`murano-agent`) is a service that runs inside the VMs of a
    deployment. It does the software configuration and installation on the VMs. VM
    images are built using this agent.
  prefs: []
  type: TYPE_NORMAL
- en: The Murano dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Murano dashboard provides the Web UI to the users for easy, browsable access
    to the application available in Murano. It supports role-based access control
    for it users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will do a walk-through on how an application is deployed
    by Murano. Murano interacts with multiple OpenStack services for resources needed
    for application deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The request flow for deploying an application in Murano is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user sends a REST API call to the `murano-api` service for deploying an
    environment via a CLI or Horizon when an authentication token is received from
    KeyStone
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `murano-api` service receives the request and sends the request for validation
    token and access permission to KeyStone
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: KeyStone validates the token and sends updated authentications headers with
    roles and permissions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `murano-api` service checks whether the session is valid or not. If the
    session is not valid or already deployed, the request fails with a `403` HTTP
    status
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A check is done to check if the environment was deleted previously or not. If
    not deleted, an entry is made in the task table to store the information of this
    action
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `murano-api` service sends the request to the `murano-engine` service via
    an RPC asynchronous call with the JSON object containing class types, application
    details, and the user data, if any
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `murano-engine` service picks the request from the message queue
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It creates a KeyStone trust, which is to be used with the application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It downloads the needed packages, and also validates if the required class are
    available and accessible
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `murano-engine` service then creates all the classes defined in the model
    sent to it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then the deploy method for each application is called. In this stage, `murano-engine`
    interacts with Heat to create networks, VMs, and other resources needed for the
    application to run
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the instance is running, a userdata script is run to install and run `murano-agent`
    on the VM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `murano-agent` service does the software configuration and installation
    steps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation is done, `murano-engine` sends a response to the API
    service about the completion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `murano-api` service then marks the environment as deployed in the database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Murano DevStack installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now see how to install a development setup of Murano using DevStack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a root directory for DevStack if needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone DevStack repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a minimal `local.conf` for running the DevStack setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run DevStack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Murano should be installed now. To verify the installation, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see that both the `murano-api` and `murano-engine` services are up and
    running.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a containerized application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you learned how to install Murano with DevStack. Now
    we will see how to use Murano in order to install an application on OpenStack.
    As Murano is all about the ease that it provides with the browsable, dynamic UI,
    we will use the Application Catalog tab in Horizon to run our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will install an NGINX containerized application inside Docker in this example.
    We will need the following packages for running this application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Interface Library: This library defines a framework for building Docker
    applications. It provides the data structures and common interfaces used by all
    the applications and hosting services backed by Docker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Standalone Host: This is a regular Docker host application. All the
    container applications are run inside a dedicated VM running image built with
    Docker and `murano-agent`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kubernetes Pod: This application provides an infrastructure for running containerized
    applications with Kubernetes. Kubernetes is installed on OpenStack VMs. This is
    optional for the Docker Standalone Host application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nginx applications: Nginx is a web server application that will be run using
    either Docker Standalone Host or Kubernetes Pod application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the container applications for Murano can be found at [https://github.com/openstack/k8s-docker-suite-app-murano](https://github.com/openstack/k8s-docker-suite-app-murano).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s start using the Murano dashboard to run our container application.
    Log in to your Horizon dashboard by entering your credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the packages from [https://github.com/openstack/k8s-docker-suite-app-murano](https://github.com/openstack/k8s-docker-suite-app-murano)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `.zip` archive for each of the preceding listed applications
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now navigate to App Catalogue | Manage | Packages on the dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Import Package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select File as Package Source, and browse to upload the ZIP file of your application.
    Fill in the UI form with necessary details for each application and click on Click
    to finish uploading a package. You can now browse the available application by
    navigating to App Catalogue | Browse | Browse Local. You will see a page like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Build the VM image by following the steps provided at [https://github.com/openstack/k8s-docker-suite-app-murano/tree/master/DockerStandaloneHost/elements](https://github.com/openstack/k8s-docker-suite-app-murano/tree/master/DockerStandaloneHost/elements)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mark the image to be used by Murano. Navigate to App Catalogue | Manage | Marked
    Images, click on Mark Image, and fill the details exactly as provided in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deploy an application by clicking on Quick Deploy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see in the following screenshot that we are given two options to choose
    for our container host: Kubernetes Pod and Docker Standalone Host. We will choose
    the latter one as the option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the details for the VM to be created for running our application, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Create to create the environment for our deployment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be automatically redirected to the newly created environment in App
    Catalogue | Applications | Environment.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Deploy Environment to start the installation of your application and
    the necessary infrastructure required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following screenshot, which shows that it started creating
    the VM on which Docker will run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon the successful completion of the preceding deployment, you will be able
    to see that a new VM will be created, as shown in the following screenshot, and
    your Nginx application running in a Docker container inside the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can log in to the VM and access the Nginx application. We have now successfully
    installed a containerized Nginx application on OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about Murano, which is the application catalog
    service for OpenStack, in detail. We looked into the different concepts available
    in Murano. Then, you also learned about the components and architecture of Murano.
    The chapter also gave a detailed overview of the workflow of a user request for
    deploying an application with Murano. Then we saw how to install a development
    setup of Murano using DevStack, and we did a hands-on on using the Murano dashboard
    to create an environment, add applications to it, and deploy the environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about Kolla, which provides production ready
    containers and tools for deployment of the OpenStack services.
  prefs: []
  type: TYPE_NORMAL
