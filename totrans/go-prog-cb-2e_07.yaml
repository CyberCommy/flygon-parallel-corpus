- en: Web Clients and APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with APIs and writing web clients can be a tricky business. Different
    APIs have different types of authorization, authentication, and protocol. We'll
    explore the `http.Client` structure object, work with OAuth2 clients and long-term
    token storage, and finish off with GRPC and an additional REST interface.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have an idea of how to interface with
    third-party or in-house APIs and have some patterns for common operations, such
    as async requests to APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing, storing, and passing http.Client structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a client for a REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing parallel and async client requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making use of OAuth2 clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing an OAuth2 token storage interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping a client in added functionality and function composition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding GRPC clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using twitchtv/twirp for RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or higher on your operating system at [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application, create a project directory such as `~/projects/go-programming-cookbook`, and
    navigate to this directory. All code will be run and modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    optionally work from that directory rather than typing the examples manually,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Initializing, storing, and passing http.Client structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Go `net/http` package exposes a flexible `http.Client` structure for working
    with HTTP APIs. This structure has separate transport functionality and makes
    it relatively simple to short-circuit requests, modify headers for each client
    operation, and handle any REST operations. Creating clients is a very common operation,
    and this recipe will start with the basics of working and creating an `http.Client`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/client`,
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/client`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `store.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `net/http` package exposes a `DefaultClient` package variable, which is
    used by the following internal operations: `Do`, `GET`, `POST`, and so on. Our
    `Setup()` function returns a client and sets the default client to be the same
    client. When setting up a client, most of your modifications will take place in
    the transport, which only needs to implement the `RoundTripper` interface.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe gives an example of a no-op round tripper that always returns a
    418 status code. You can imagine how this might be useful for testing. It also
    demonstrates passing in clients as function arguments, using them as structure
    parameters, and using the default client to process requests.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a client for a REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a client for a REST API will not only help you better understand the
    API in question, it will also give you a useful tool for all future applications
    using that API. This recipe will explore structuring a client and show some strategies
    that you can immediately take advantage of.
  prefs: []
  type: TYPE_NORMAL
- en: For this client, we'll assume that the authentication is handled by the basic
    auth, but it should also be possible to hit an endpoint to retrieve a token, and
    so on. For the sake of simplicity, we'll assume that our API exposes one endpoint,
    `GetGoogle()`, which returns that status code returned from doing a `GET` request
    to [https://www.google.com](https://www.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/rest`,
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/rest`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `transport.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This code demonstrates how to hide logic such as authentication, and performing
    a token refresh using the `Transport` interface. It also demonstrates how to expose
    an API call via a method. Had we been implementing against something such as a
    user API, we would expect methods such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you've read Chapter 5, *All ab**out Databases and Storage*, this may look
    similar to the recipe entitled *Executing a database transaction interface*. This
    composition through interfaces, especially common interfaces such as the `RoundTripper`
    interface, provides a lot of flexibility for writing APIs. In addition, it may
    be useful to write a top-level interface as we did earlier and pass the interface
    around instead of to the client directly. We'll explore this in more detail in
    the next recipe as we explore writing an OAuth2 client.
  prefs: []
  type: TYPE_NORMAL
- en: Executing parallel and async client requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performing client requests in parallel is relatively simple in Go. In the following
    recipe, we'll use a client to retrieve multiple URLs using Go buffered channels.
    Responses and errors will both go to a separate channel that is readily accessible
    by anyone with access to the client.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of this recipe, creating the client, reading the channels, and handling
    responses and errors will all be done in the `main.go` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/async`,
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/async`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe creates a framework for processing requests in a fan-out `async`
    way using a single client. It will attempt to retrieve as many URLs as you specify
    as quickly as it can. In many cases, you'll want to restrict this further with
    something such as a worker pool. It may also make sense to handle these `async`
    Go routines outside the client and for specific storage or retrieval interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also explores using a case statement to switch on multiple channels.
    Because the fetches are being executed asynchronously, there must be some mechanism
    to wait for them to complete. In this case, the program will only terminate when
    the main function has read the same number of responses and errors as there were
    URLs in the original list. In cases such as this, it's also important to consider
    whether your application should time-out or whether there is some other way to
    cancel its operation early.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of OAuth2 clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth2 is a relatively common protocol for speaking with APIs. The `golang.org/x/oauth2`
    package provides a pretty flexible client for working with OAuth2\. It has subpackages
    that specify endpoints for various providers such as Facebook, Google, and GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will demonstrate how to create a new GitHub OAuth2 client and some
    of its basic usages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After completing the initial setup steps mentioned in the *Technical requirements*
    section at the beginning of this chapter, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure an OAuth Client at [https://github.com/settings/applications/new](https://github.com/settings/applications/new).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the environment variables with your client ID and secret:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`export GITHUB_CLIENT="your_client"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`export GITHUB_SECRET="your_secret"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brush up on the GitHub API documentation at [https://developer.github.com/v3/](https://developer.github.com/v3/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/oauthcli`,
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/oauthcli`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard OAuth2 flow is redirect-based and ends with the server redirecting
    to an endpoint you specify. Your server is then responsible for grabbing the code
    and exchanging it for a token. This recipe bypasses that requirement by allowing
    us to use a URL such as `https://localhost` or `https://a-domain-you-own`, manually
    copying/pasting the code, and then hitting *Enter*. Once the token has been exchanged,
    the client will intelligently refresh the token as required.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that we're not storing the token in any way. If the program
    crashes, it must re-exchange for the token. It's also important to note that we
    need to retrieve the token explicitly only once unless the refresh token expires,
    is lost, or is corrupted. Once the client is configured, it should be able to
    perform all typical HTTP operations for the API as long as the appropriate scopes
    were requested during the OAuth2 flow. This recipe requests the `"repo"` and `"user"`
    scopes, but more or less can be added as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an OAuth2 token storage interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we retrieved a token for our client and performed API
    requests. The downside of this approach is that we have no long-term storage for
    our token. In an HTTP server, for example, we'd like to have consistent storage
    of the token between requests.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore modifying the OAuth2 client to store a token between
    requests and retrieve it as required using a key. For the sake of simplicity,
    this key will be a file, but it could also be a database, Redis, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Getting ready* section in the *Making use of OAuth2 clients* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/oauthstore`,
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/oauthstore`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `tokensource.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `storage.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `filestorage.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe takes care of storing and retrieving the contents of a token to/from
    a file. If it's a first run, it must execute the entire code exchange, but subsequent
    runs will reuse the access token, and, if one is available, it will refresh using
    the refresh token.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is currently no way in this code to differentiate between users/tokens,
    but that could be accomplished with cookies as a key for a filename or a row in
    the database as well. Let''s walk through what this code does:'
  prefs: []
  type: TYPE_NORMAL
- en: The `config.go` file wraps the standard OAuth2 config. For every method that
    involves retrieving a token, we first check whether we have a valid token in local
    storage. If not, we retrieve one using the standard config and then store it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tokensource.go` file implements our custom `TokenSource` interface, which
    pairs with `Config`. Similar to `Config`, we always first try to retrieve our
    token from a file; failing this, we set it with the new token.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `storage.go` file is the `storage` interface used by `Config` and `TokenSource`.
    It only defines two methods and we also include a helper function to bootstrap
    the OAuth2 code-based flow similar to what we did in the previous recipe, but
    if a file with a valid token already exists, it will be used instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `filestorage.go` file implements the `storage` interface. When we store
    a new token, we first truncate the file and write a JSON representation of the
    `token` struct. Otherwise, we decode the file and return `token`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping a client in added functionality and function composition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2015, Tomás Senart gave an excellent talk on wrapping an `http.Client` structure
    with an interface, allowing you to take advantage of middleware and function composition.
    You can find out more on this at [https://github.com/gophercon/2015-talks](https://github.com/gophercon/2015-talks).
    This recipe borrows from his ideas and demonstrates an example of performing the
    same action on the `Transport` interface of the `http.Client` structure, in a
    similar way to our earlier recipe, *Writing a client for a REST API.*
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe will implement logging and basic auth middleware for a
    standard `http.Client` structure. It also includes a `decorate` function that
    can be used when required with a large variety of middleware.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/decorator`,
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/decorator`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `config.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `decorator.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `middleware.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `exec.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Run `go run main.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe takes advantage of closures as first-class citizens and interfaces.
    The main trick in achieving this is having a function implement an interface.
    This allows us to wrap an interface implemented by a structure with an interface
    implemented by a function.
  prefs: []
  type: TYPE_NORMAL
- en: The `middleware.go` file contains two example client middleware functions. These
    could be extended to contain additional middleware, such as a more sophisticated
    auth, and metrics. This recipe can also be combined with the previous recipe to
    produce an OAuth2 client that can be extended by additional middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Decorator` function is a convenience function that allows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of this approach compared to wrapping the client is that we can
    keep the interface sparse. If you want a fully featured client, you'll also need
    to implement methods such as `GET`, `POST`, and `PostForm`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GRPC clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GRPC is a high-performance RPC framework that is built using protocol buffers
    ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers))
    and HTTP/2 ([https://http2.github.io](https://http2.github.io)). Creating a GRPC
    client in Go involves many of the same intricacies as working with Go HTTP clients.
    In order to demonstrate basic client usage, it's easiest to also implement a server.
    This recipe will create a `greeter` service, which takes a greeting and a name
    and returns the sentence `<greeting> <name>!`. In addition, the server can specify
    whether to exclaim `!` or not `.` (full stop).
  prefs: []
  type: TYPE_NORMAL
- en: There are some details about GRPC, such as streaming, that this recipe won't
    explore; however, it will hopefully serve as an introduction to creating a very
    basic server and client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After completing the initial setup steps mentioned in the *Technical requirements*
    section at the beginning of this chapter, install GRPC ([https://grpc.io/docs/quickstart/go/](https://grpc.io/docs/quickstart/go/))
    and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go get -u google.golang.org/grpc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/grpc`,
    and navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/grpc`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory called `greeter` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `greeter.proto` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory to `grpc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `server` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `greeter.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `server.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory to `grpc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `client` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory to `grpc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `go run ./server`, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate Terminal, run `go run ./client` from the `grpc` directory, and
    you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GRPC server is set up to listen on port `4444`. Once the client connects,
    it can send requests and receive responses from the server. The structure of the
    requests, responses, and supported methods is dictated by the `.proto` file we
    created in step 4\. In practice, when integrating against GRPC servers, they should
    provide the `.proto` file, which can be used to automatically generate a client.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the client, the `protoc` command generates the stubs for the
    server, and all that's required is to fill in the implementation details. The
    generated Go code also has JSON tags and the same structures could be reused for
    JSON REST services. Our code sets up an insecure client. To handle GRPC securely,
    you need to use an SSL certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Using twitchtv/twirp for RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `twitchtv/twirp` RPC framework affords many of the benefits of GRPC, including
    building models with protocol buffers ([https://developers.google.com/protocol-buffers](https://developers.google.com/protocol-buffers)),
    and allows for communication over HTTP 1.1\. It can also communicate using JSON,
    so it's possible to use the `curl` command to communicate with a `twirp` RPC service.
    This recipe will implement the same `greeter` as the GRPC section before it. This
    service takes a greeting and a name and returns the sentence `<greeting> <name>!`.
    In addition, the server can specify whether to exclaim `!` or not `.`.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe won't explore the other features of `twitchtv/twirp`, and will focus
    primarily on basic client-server communication. For more information on what is
    supported, visit their GitHub page ([https://github.com/twitchtv/twirp](https://github.com/twitchtv/twirp)).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After completing the initial setup steps mentioned in the *Technical requirements*
    section at the beginning of this chapter, install twirp [https://twitchtv.github.io/twirp/docs/install.html](https://twitchtv.github.io/twirp/docs/install.html) and
    run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go get github.com/twitchtv/twirp/protoc-gen-twirp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter7/twirp`, and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter7/twirp`,
    or use this as an exercise to write some code of your own!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory called `rpc/greeter` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `greeter.proto` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory to `twirp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory called `server` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `greeter.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `server.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory to `twirp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `client` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `client.go` with the following content. Ensure that you
    modify the `greeter` import to use the path you set up in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Navigate back up a directory to `twirp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `go run ./server`, and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate Terminal, run `go run ./client` from the `twirp` directory. You
    should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and `go.sum` file should now be present in
    the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We set up the `twitchtv/twirp` RPC server to listen on port `4444`. Like GRPC,
    `protoc` can be used to generate clients for a number of languages and, for example,
    generate Swagger ([https://swagger.io/](https://swagger.io/)) documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Like GRPC, we define our models first as `.proto` files, generate Go bindings,
    and finally implement the interface generated. Thanks to the use of `.proto` files,
    the code is relatively portable between GRPC and `twitchtv/twirp` as long as you're
    not relying on more advanced features of either framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, because the `twitchtv/twirp` server supports HTTP 1.1, we can
    `curl` it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
