- en: Chapter 1. Getting Started with Shell Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is a brief introduction to shell scripting. It will assume the
    reader is mostly familiar with script basics and will serve as a refresher.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The general format of a script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make a file executable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a good Usage message and handling return codes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show how to pass parameters from the command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show how to validate parameters by using conditional statements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how to determine the attributes of files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will always be able to create these scripts under a guest account, and most
    will run from there. It will be clearly stated when root access is needed to run
    a particular script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The book will assume that the user has put a (`.`) at the beginning of the
    path for that account. If not, to run a script prepend `./` to the filename. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The scripts will be made executable using the `chmod` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is suggested that the user create a directory under his guest account specifically
    for the examples in this book. For example, something like this works well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Of course, feel free to use whatever works best for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the general format of a bash script the very first line will contain
    this and nothing else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that in every other case text following the `#` sign is treated as comments.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: This entire line is a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use comments however you deem appropriate. Some people comment every line, some
    don't comment anything. I try to strike a balance somewhere in the middle of those
    two extremes.
  prefs: []
  type: TYPE_NORMAL
- en: Using a good text editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have found that most people are comfortable using vi to create and edit text
    documents under a UNIX/Linux environment. This is fine as vi is a very dependable
    application. I would suggest not using any type of word processing program, even
    if it claims to have a code development option. These programs might still put
    invisible control characters in the file which will probably cause the script
    to fail. This can take hours or even days to figure out unless you are good at
    looking at binary files.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in my opinion, if you plan to do a lot of script and/or code development
    I suggest looking at some other text editor other than vi. You will almost certainly
    become more productive.
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrating the use of scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is an example of a very simple script. It might not look like much but
    this is the basis for every script:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 - Script 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By convention, in this book the script lines will usually be numbered. This
    is for teaching purposes only, in an actual script the lines are not numbered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the same script with the lines numbered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an explanation for each line:'
  prefs: []
  type: TYPE_NORMAL
- en: Line 1 tells the operating system which shell interpreter to use. Note that
    on some distributions `/bin/sh` is actually a symbolic link to the interpreter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines that begin with a `#` are comments. Also, anything after a `#` is also
    treated as a comment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is good practice to include a date in your scripts, either here in the comments
    section and/or in the `Usage` section (covered next).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 5 is the return code from this script. This is optional but highly recommended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line 6 is a blank line and is the last line of the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using your favorite text editor, edit a new file named `script1` and copy the
    preceding script without the line numbers into it. Save the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the file into an executable script run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you did not prepend a `.` to your path as mentioned in the introduction
    then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now check the return code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a script that does something a little more useful:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 - Script 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `ping` command returns a zero on success and non-zero on failure. As you
    can see, `echoing $?` shows the return value of the command preceding it. More
    on this later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s pass a parameter and include a `Usage` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 - Script 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an explanation for each line:'
  prefs: []
  type: TYPE_NORMAL
- en: Line `5` checks to see if a parameter was given. If not, lines `6` through `9`
    are executed. Note that is it usually a good idea to include an informative `Usage`
    statement in your script. It is also good to provide a meaningful return code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `11` checks to see if the file exists and if so lines `12`-`13` are executed.
    Otherwise lines `14`-`17` are run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A word about return codes: It is standard practice under Linux/UNIX to return
    zero if the command was successful, and non-zero if not. In this way the code
    returned can mean something useful, not only to humans, but to other scripts and
    programs as well. However, it is not mandatory to do this. If you want your script
    to return codes that are not errors but indicate some other condition by all means
    do so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This next script expands on this topic:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 - Script 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an explanation for each line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lines `5`-`9`: If the script is not run with a parameter display the `Usage`
    message and exit with a return code of `255`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `11` shows how to `echo` a string of text but still stay on the line (no
    linefeed).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `13` shows how to determine if the parameter given is an existing file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line `15` leaves the script as there is no reason to continue if the file doesn't
    exist.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The meaning of the remaining lines can be determined by the script itself. Note
    that there are many other checks that can be performed on a file, these are just
    a few.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of running `script4` on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This next script shows how to determine the number of parameters that were
    passed to it:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 - Script 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that a quoted string is counted as 1 parameter. This is a way to pass
    strings that contain blank characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'This next script shows how to handle multiple parameters in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 - Script 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The lines of this script were not numbered as it is rather simple. The `$#`
    contains the number of parameters that were passed to the script.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we looked at the basics of script design. How to make a script
    executable was shown as was creating an informative `Usage` message. The importance
    of return codes was also covered as was the use and validation of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will go into more detail about variables and conditional statements.
  prefs: []
  type: TYPE_NORMAL
