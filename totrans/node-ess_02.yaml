- en: Chapter 2. Simple HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have understood the basics, we can move on to something a bit more
    useful. In this chapter, we will look at creating an HTTP server and routing requests.
    While working with Node.js you will come across HTTP very often, as server side
    scripting is one of the common uses of Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js comes with a built in HTTP server; all you need to do is require the
    included `http` package and create a server. You can read more about the package
    at [https://nodejs.org/api/http.html](https://nodejs.org/api/http.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create your very own HTTP server that is ready to roll. In this state,
    though, it won''t be listening for any requests. We can start listening on any
    port or socket we wish, as long as it is available, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save the preceding code to `server.js` and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: By navigating to `http://localhost:8080/` on your browser you will see that
    the request has been accepted but the server isn't responding; this is because
    we haven't handled the requests yet, we are just listening for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create the server we can pass a callback that will be called each time
    there is a request. The parameters passed will be: `request`, `response`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now each time we get a request we can do something:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the script and request the page from the browser; you should see
    `Visitor count: 1` returned to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Something weird has happened though: an extra request gets generated. Who is
    visitor 2?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `http.IncomingMessage` (the parameter `request`) *exposes* a few properties
    that can be used to figure this out. The property we are most interested in right
    now is `url`. We are expecting just `/` to be requested, so let''s add this to
    our message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can run the code and see what''s going on. You will notice that `/favicon.ico`
    has been requested as well. If you are not able to see this then you must be wondering
    what I have been going on about or if your browser has been to `http://localhost:8080`
    recently and has a cached icon already. If this is the case, then you can request
    the icon manually, for example from `http://localhost:8080/favicon.ico`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also see that if we request any other page we will get the correct path,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This isn''t the desired outcome though, for everything but a few routes we
    want to return `404: Not Found`.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing is essential for almost all Node.js servers. First, we will implement
    our own simple version and then move on to the more complex rounting.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can implement our own simple router using a `switch` statement, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the count increasing with each request; however, it isn''t returned
    each time. If we haven''t defined a case specifically for that route, we return
    `404: Not Found`.'
  prefs: []
  type: TYPE_NORMAL
- en: For services that implement a RESTful interface, we want to be able to route
    requests based on the HTTP method as well. The request object exposes this using
    the `method` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding this to the log we can see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the example and execute your requests, you can use a REST client to invoke
    a POST request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can implement a router to route based on a method, but there are packages
    that do this for us already out there. For now we will use a simple package called
    `router`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can do some more complex routing of our requests:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a simple RESTful interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create the server, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Running the server should show that the server is listening.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We want to define a simple interface to read, save, and delete messages. We
    might want to read individual messages as well as a list of messages; this essentially
    defines a set of RESTful endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: REST stands for **R**epresentational **S**tate **T**ransfer; it is a very simple
    and common style used by many HTTP programming interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'The endpoints we want to define are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| HTTP Method | Endpoint | Used to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/message` | Create message |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/message/:id` | Read message |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | `/message/:id` | Delete message |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/message` | Read multiple messages |'
  prefs: []
  type: TYPE_TB
- en: 'For each HTTP method, the router has a method to use for mapping a route. This
    interface is in the form of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We can define multiple handlers for each route, but we will come back to that
    in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: We will go through each route, create an implementation, and append the code
    to the end of `server.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to store our messages somewhere, and in the real world we will store
    them in a database; however, for simplicity we will use an array with a simple
    counter, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Our first route will be used to create messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We can ensure that this route works by running the server and doing a POST request
    to `http://localhost:8000/message`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We can also confirm that the counter is incrementing, as the id increases each
    time we make a request. We will do this to keep a track of the count of messages
    and to give a *unique* id to each message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that this is working, we need to be able to read the message text and to
    do this we need to be able to read the request body that was sent by the client.
    This is where multiple handlers come into play. We could tackle this in two different
    ways, if we were reading the body in only one route or if we were doing some other
    action specific to a route, for instance authorization, we will add an additional
    handler to the route, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The other way we could do it is by adding a handler for all methods and routes;
    this will be executed first before the route handlers, these are commonly referred
    to as middleware. You can think of handlers as being a chain of functions where
    each one is calling the next, once it is finished with its tasks. With this in
    mind you should note that the order in which you add a handler, both middleware
    and route, will dictate the order of operations. This means that, if we are registering
    a handler that is executed for all methods, we must do this first.
  prefs: []
  type: TYPE_NORMAL
- en: 'The router *exposes* a function to add the following handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add this code just above your implementation of `createMessage`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have done that, run the server and make the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the middleware gets executed before the route handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know how middleware works, we can use them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace our custom middleware with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: At this stage, we just want to read all requests as plain text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can retrieve the message in `createMessage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `server.js` and `POST` a couple of messages to `http://localhost:8080/message`;
    you will see something similar to these messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If you notice, you will see that a header returns with a new location of the
    message and its id, If we request `http://localhost:8080/message/1`, the content
    from the first message should be returned.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is something different with this route; it has a key that is
    generated each time a message is created. We don't want to set up a new route
    for each new message as it will be highly inefficient. Instead, we create a route
    that matches a pattern, such as `/message/:id`. This is a common way to define
    a dynamic route in Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: The `id` part of the route is called a parameter. We can define as many of these
    as we want in our route and refer them using the request; for example we can have
    a route similar to `/user/:id/profile/:attribute`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind we can create our `readMessage` handler, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s save the preceding code in the `server.js` file and run the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We can see it's working by sending a few requests to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deleting messages is almost the same as reading them; but we don''t return
    anything and null out the original message value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'First, run the server, then create, read, and delete a message, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'That looks good; however, we have run into a problem. We shouldn''t be able
    to read a message again after deleting it; we will return `404` in both the read
    and delete handlers if we can''t find a message. We can do this by adding the
    following code to our read and delete handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s save the preceding code in the `server.js` file and run the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we want to be able to read all messages and return a list of all message
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s save the preceding code in the `server.js` file and run the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Awesome; now we have a full RESTful interface to read and write messages. But,
    we don't want everyone to be able to read our messages; they should be secure
    and we also want to know who is creating the messages, we will cover this in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have everything we need to make some pretty cool services. We can now
    create an HTTP from scratch, route our requests, and create a RESTful interface.
  prefs: []
  type: TYPE_NORMAL
- en: This will help you with the creation of complete Node.JS services. In the next
    chapter, we will cover authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  prefs: []
  type: TYPE_NORMAL
