- en: 'Chapter 5: Storage Management'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Disk Management and Partitioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linux offers various tools and commands for disk management and partitioning.
    Here are some commonly used tools and techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: 'fdisk: fdisk is a command-line tool used for partitioning disks. It allows
    you to create, delete, and manage partitions on your storage devices. For example,
    you can run sudo fdisk -l to list available disks and partitions, and sudo fdisk
    /dev/sdX (replace ''X'' with the appropriate disk identifier) to start partitioning
    a specific disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'parted: parted is another command-line utility for disk partitioning. It provides
    a more user-friendly interface compared to fdisk. With parted, you can create,
    delete, resize, and manage partitions. The syntax is similar to fdisk. For example,
    sudo parted /dev/sdX will start the interactive parted session for a particular
    disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GParted: GParted is a graphical partition editor available for Linux distributions.
    It provides a user-friendly interface for managing partitions. GParted allows
    you to create, resize, move, and delete partitions easily. You can install GParted
    using your distribution''s package manager, such as sudo apt install gparted on
    Debian-based systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'lsblk: lsblk is a command-line tool that lists information about all available
    block devices, including disks and partitions. Running lsblk will display a tree-like
    view of your devices and their partitions, along with additional details like
    sizes and mount points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'mkfs: mkfs is used to create file systems on partitions. It is followed by
    the file system type and the device name. For example, sudo mkfs.ext4 /dev/sdXY
    will create an ext4 file system on the partition /dev/sdXY.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'mount: mount is used to attach a file system to the directory tree of the Linux
    filesystem. For example, sudo mount /dev/sdXY /mnt will mount the partition /dev/sdXY
    to the /mnt directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'blkid: blkid command displays information about block devices, including their
    UUIDs (Universally Unique Identifiers) and file system types. It can be used to
    identify devices and partitions uniquely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LVM (Logical Volume Manager): LVM is a flexible system for managing logical
    volumes in Linux. It allows you to dynamically create, resize, and manage logical
    volumes, which can span multiple disks. The key LVM commands include pvcreate,
    vgcreate, lvcreate, and their respective counterparts for modifying or removing
    logical volumes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember to exercise caution when working with disk management tools, as manipulating
    partitions can lead to data loss if not done correctly. Always make sure to have
    backups of important data before performing any disk operations.
  prefs: []
  type: TYPE_NORMAL
- en: Filesystem Types and Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linux supports various file system types, each with its own features and characteristics.
    Here are some commonly used Linux file system types:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ext4: This is the default and most widely used file system for Linux. It offers
    good performance, scalability, and reliability. It supports large file sizes and
    can handle file systems up to 1 exabyte in size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ext3: The predecessor to ext4, ext3 is a journaled file system that provides
    improved reliability and faster file system checks after an unclean shutdown.
    It is still widely used but is being gradually replaced by ext4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XFS: XFS is a high-performance file system designed for scalability and parallelism.
    It is known for its efficient handling of large files and file systems, making
    it suitable for data-intensive applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Btrfs: Btrfs (B-tree file system) is a modern copy-on-write file system that
    offers features such as data integrity, snapshots, and support for advanced storage
    management techniques like RAID and subvolumes. It is designed to be a general-purpose
    file system with built-in support for both solid-state drives (SSDs) and hard
    disk drives (HDDs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ZFS: While not natively supported by the mainline Linux kernel, ZFS is a popular
    and advanced file system that provides features like data integrity, volume management,
    snapshots, and easy administration. It is commonly used in storage servers and
    is known for its robustness and scalability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JFS: JFS (Journaled File System) is a high-performance file system initially
    developed by IBM. It offers good scalability, quick recovery after crashes, and
    efficient storage allocation. JFS is less commonly used today but is still available
    and supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ReiserFS: ReiserFS is a file system that uses a B+ tree structure for efficient
    file storage. It was designed to optimize small file performance and has historically
    been used for some specific use cases. However, its usage has declined in recent
    years.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just a few examples of file system types available on Linux. Other
    file systems like NILFS, F2FS, and more may also be used for specific purposes
    or in specialized environments.
  prefs: []
  type: TYPE_NORMAL
- en: RAID and Logical Volume Management (LVM)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux RAID (Redundant Array of Independent Disks) and LVM (Logical Volume Manager)
    are two separate technologies that can be used together to provide flexible and
    reliable storage management in Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux RAID:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux RAID allows you to combine multiple physical disks into a single logical
    unit to improve performance, data redundancy, or both. The most common RAID levels
    used in Linux are RAID 0, RAID 1, RAID 5, and RAID 6, although there are other
    levels as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'RAID 0: This level provides striping without any redundancy, which means data
    is split across multiple disks to improve performance but offers no data protection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RAID 1: It provides mirroring, where data is duplicated on two or more disks.
    This level offers data redundancy but doesn''t offer performance improvements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RAID 5: It uses striping with distributed parity. Data is spread across multiple
    disks, and parity information is distributed among them. It offers a balance between
    performance and redundancy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RAID 6: Similar to RAID 5, but it uses double parity to provide redundancy
    even if two disks fail simultaneously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux RAID can be configured using either hardware RAID controllers or software
    RAID. Software RAID is generally more flexible and commonly used in Linux systems.
    The mdadm utility is widely used to manage software RAID arrays in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'LVM (Logical Volume Manager):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LVM is a flexible disk management system that allows you to manage storage volumes
    independently of the underlying physical disks. It provides features like logical
    volumes, volume groups, and physical volumes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Physical Volume (PV): It represents a physical disk or partition and is initialized
    as an LVM physical volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volume Group (VG): It is created by combining one or more physical volumes.
    It acts as a pool of disk space from which logical volumes are created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Logical Volume (LV): It represents a flexible, resizable block device created
    from free space in a volume group. Logical volumes can be easily resized and moved
    between physical volumes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LVM provides advantages such as dynamic volume resizing, snapshotting, and the
    ability to span multiple disks. It allows for greater flexibility in managing
    storage, such as resizing volumes on-the-fly without unmounting filesystems.
  prefs: []
  type: TYPE_NORMAL
- en: Linux RAID and LVM can be used together by creating RAID arrays using Linux
    RAID and then creating logical volumes on top of the RAID arrays using LVM. This
    combination provides both the redundancy and flexibility of managing logical volumes
    independently.
  prefs: []
  type: TYPE_NORMAL
- en: Network File Systems (NFS) and File Sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux NFS (Network File System) is a distributed file system protocol that allows
    a user on a client computer to access files over a network as if they were stored
    locally. NFS is commonly used for sharing files and directories between Unix-like
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the basic steps involved in setting up NFS and file sharing in Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install NFS: Start by installing the NFS package on both the server and client
    machines. The package names may vary depending on your Linux distribution. For
    example, on Ubuntu, you can install the NFS server package with the command: sudo
    apt-get install nfs-kernel-server, and the NFS client package with: sudo apt-get
    install nfs-common.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure the NFS Server: On the server machine, you need to define the directories
    you want to share and configure the NFS server. The configuration file is usually
    located at /etc/exports. Open the file with a text editor and add entries specifying
    the directories to be shared, along with the permissions and access options. For
    example, to share the /shared directory with read-write access to a specific client,
    you can add a line like this: /shared client_ip(rw). Save the file after making
    the necessary changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Export the Directories: After configuring the NFS server, you need to export
    the directories to make them available to clients. Use the following command to
    export the directories specified in the /etc/exports file: sudo exportfs -a. This
    command reads the exports file and makes the specified directories available for
    remote access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Start the NFS Server: Enable and start the NFS server on the server machine.
    The exact method varies depending on your Linux distribution. On Ubuntu, you can
    use the following command: sudo systemctl enable nfs-kernel-server followed by
    sudo systemctl start nfs-kernel-server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure the NFS Client: On the client machine, you need to mount the NFS
    shared directories. Create a mount point directory where you want to access the
    shared files. For example, sudo mkdir /mnt/nfs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mount the NFS Share: Use the mount command to mount the NFS share on the client
    machine. The command syntax is as follows: sudo mount server_ip:/shared /mnt/nfs,
    where server_ip is the IP address of the NFS server and /shared is the directory
    you want to access. After running the mount command, you should be able to access
    the shared files in /mnt/nfs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test the File Sharing: Verify that the file sharing is working correctly by
    creating, modifying, or deleting files on the NFS share from the client machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the basic steps to set up NFS and enable file sharing between Linux
    machines. Keep in mind that there are additional configuration options and security
    considerations that you may need to take into account, depending on your specific
    requirements and network environment.
  prefs: []
  type: TYPE_NORMAL
