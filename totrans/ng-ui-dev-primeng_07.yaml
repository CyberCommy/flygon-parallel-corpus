- en: Endless Menu Variations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about several menu variations. PrimeNG's menus
    fulfill all major requirements. These days, every website contains menus. Usually,
    a menu is presented to a user as a list of links to be navigated or commands to
    be executed. Menus are sometimes organized hierarchically, allowing navigation
    through different levels of the menu structure.
  prefs: []
  type: TYPE_NORMAL
- en: Arranging menu items in logical groups makes it easy for users to quickly locate
    the related tasks. They come with various facets such as static, dynamic, tiered,
    hybrid, iPod-styled, and so on, and leave nothing to be desired. Readers will
    face a lot of recipes that discuss the menu's structure, configuration options,
    customizations, and integration with other components. Menu-like components helping
    in wizards and workflows will be explained as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating programmatic menus with the MenuModel API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statically and dynamically positioned menus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing commands via MenuBar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ContextMenu with nested items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SlideMenu - menu in the iPod style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TieredMenu - sub-menus in nested Overlays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MegaMenu - the multicolumn menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PanelMenu - hybrid of Accordion and Tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TabMenu - menu items as tabs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breadcrumb - providing contextual information about page hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating programmatic menus using the MenuModel API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG provides a `MenuModel` API, which will be shared by all menu components
    to specify menu items and sub-menus. The core item of the `MenuModel` API is the
    `MenuItem` class with options such as `label`, `icon`, `url`, child menu items
    with the `items` option, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example of the Menu component to represent a common toolbar
    user interface. The Menu component is binding an array of the `MenuItem` classes
    as items through the `model` property as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`MenuItem` is the key item in the `MenuModel` API. It has the following list
    of properties. Each property is described with the type, default value, and its
    description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Type** | **Default** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `label` | `string` | `null` | Text of the item. |'
  prefs: []
  type: TYPE_TB
- en: '| `icon` | `string` | `null` | Icon of the item. |'
  prefs: []
  type: TYPE_TB
- en: '| `command` | `function` | `null` | Callback to execute when the item is clicked.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `url` | `string` | `null` | External link to navigate when the item is clicked.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `routerLink` | `array` | `null` | RouterLink definition for internal navigation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `items` | `array` | `null` | An array of children menu items. |'
  prefs: []
  type: TYPE_TB
- en: '| `expanded` | `boolean` | `false` | Visibility of sub-menu. |'
  prefs: []
  type: TYPE_TB
- en: '| `disabled` | `boolean` | `false` | When set as `true`, disables the menu
    item. |'
  prefs: []
  type: TYPE_TB
- en: '| `visible` | `boolean` | `true` | Whether the DOM element of menu item is
    created or not. |'
  prefs: []
  type: TYPE_TB
- en: '| `target` | `string` | `null` | Specifies where to open the linked document.
    |'
  prefs: []
  type: TYPE_TB
- en: Table 1.0
  prefs: []
  type: TYPE_NORMAL
- en: Menu actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The menu items with plain read-only labels and icons are not really useful.
    The Menu component with user actions need to perform business implementations
    or navigations to other resources. The major components of menu actions are command
    invocation and navigations. This can be achieved through the `url` and `routerLink`
    properties of the `MenuItem` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example usage of URL and router link options of the `MenuItem` API would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the following sections, you will see how this `MenuModel` API is going to
    be used in various kinds of Menu components.
  prefs: []
  type: TYPE_NORMAL
- en: Statically and dynamically positioned menus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menu is a navigation or command component that supports dynamic and static positioning.
    This is a basic Menu component among all variations of Menu components. The menus
    are statically positioned by default, but they are made dynamic by providing the
    `target` attribute. The static positioned menus are attached to the page body
    as target (that is, `appendTo="body"` ), whereas assigning to other elements create
    dynamic-positioned menus.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic menu example, which holds project document or file types of menu items,
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items needs to be organized within a component class. For
    example, the root menu item titled `Edit` will have nested items as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic menu (with all
    menu items) example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/075dec88-b8b0-43b3-b3e7-1510ddec1bb1.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding snapshot, you can observe that the Menu component is displayed
    in the inline format. But, this behavior can be changed by enabling the `popup`
    property in order to display as overlay.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Menu component defines `toggle`, `show`, and `hide` methods for the `Menu`
    API. The detailed description of each method listed in tabular format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `toggle` | `event: browser event` | Toggles the visibility of the pop-up
    menu. |'
  prefs: []
  type: TYPE_TB
- en: '| `show` | `event: browser event` | Displays the pop-up menu. |'
  prefs: []
  type: TYPE_TB
- en: '| `hide` | - | Hides the pop-up menu. |'
  prefs: []
  type: TYPE_TB
- en: Table 2.0The complete demo application with instructions is available on GitHub
    at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menu).'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing commands via MenuBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MenuBar component is a group of horizontal menu components with nested sub-menus
    (or a component with group of drop-down menus for page navigations). Like any
    other Menu component, MenuBar uses a common menu model API which holds a list
    of the `MenuItem` interfaces. There is no limit for nested levels of sub-menus.
    Let''s see a basic MenuBar example for window or application-specific menus. This
    provides an access for common functions such as opening files, edit operations,
    interacting with an application, displaying help documentation, and so on, and
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items needs to be organized within a component class. For
    example, a root menu item titled `Edit` will have nested items as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic MenuBar (with
    all menu items) example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c3fbf422-2a5b-4d58-8d1c-0e4e60f02b44.png)'
  prefs: []
  type: TYPE_IMG
- en: The component skinning can be achieved through the `style` and `styleClass`
    properties. PrimeNG 4.1 allows custom content (form controls) by placing them
    inside the MenuBar tags.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menubar](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menubar).'
  prefs: []
  type: TYPE_NORMAL
- en: ContextMenu with nested items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ContextMenu is a menu with **Graphical User Interface** **(GUI)** representation
    that appears on top of your page just by right-clicking. By right-clicking, an
    Overlay menu is displayed on the target element. There are two types of Context
    menus, one for the document and the other for the specific component. Apart from
    these two, there is also a special integration with components such as DataTable.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the ContextMenu is attached to the document with the global setting.
    A basic Context menu example, which displays a document or file type menu, would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items needs to be organized within a component class. For
    example, a root menu item titled `File` will have nested items as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic Context menu
    (with all menu items) example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a208bbd-9fa6-4fc7-8ace-415efde36062.png)'
  prefs: []
  type: TYPE_IMG
- en: The Context menu will disappear once you click on the outside of this component.
  prefs: []
  type: TYPE_NORMAL
- en: Customized target for ContextMenu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default global settings of the Context menu can be changed using the `target`
    attribute (that is, the Context menu will be displayed on other elements other
    than the global document target). Let''s take a Context menu example where the
    Overlay or popup appears on top of the image element on right-click as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this case, both next and previous operations can be performed from the Context
    menu just by defining the menu items array.
  prefs: []
  type: TYPE_NORMAL
- en: DataTable integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you have seen how to integrate the context menu with
    other elements using the `target` property. But integration with the DataTable
    component is a different case which needs a special treatment. This combination
    is one of the frequently used use cases in web development.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DataTable provides reference to a Context menu using the `contextMenu`
    property (that is, the template reference variable of the Context menu should
    be assigned to DataTable''s `contextMenu` attribute). The Context menu integration
    with DataTable would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The Context menu model is bounded to an array of menu items such as `View`
    and `Delete` options as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we performed command actions which notify the user
    with messages. But in real time, all CRUD operations are in sync with the database.
    The following screenshot shows a snapshot result of the Context menu integration
    with DataTable component as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0797425e-5793-40b3-bcd5-339753234bf1.png)'
  prefs: []
  type: TYPE_IMG
- en: As per the preceding snapshot, the table row is selected on a right-click and
    Overlay appears on the row. The menu item selection can either do business logic
    or navigation to various web pages.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/contextmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/contextmenu).'
  prefs: []
  type: TYPE_NORMAL
- en: SlideMenu – menu in the iPod style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SlideMenu is a component which displays sub-menus with slide animation effects.
    This kind of slide menu component is the best example of iPod style menu widgets.
    By default, the slide menu is displayed as an inline menu component. A basic slide
    menu example which displays a document or file type menu would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items needs to be organized with in a component class. For
    example, a root menu item titled `File` will have nested items as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic slide menu, which
    displays file menu items on the click of the File menu item as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1bd4f028-7ae4-419f-949a-64a45e994549.png)'
  prefs: []
  type: TYPE_IMG
- en: As seen in the preceding snapshot, the slide menu is displayed in an inline
    format. It will be displayed in pop-up mode by enabling the `popup` property.
    At the bottom of the slide menu popup, a back button appears with the Back label,
    but this can also be customized using the `backLabel` property.
  prefs: []
  type: TYPE_NORMAL
- en: The slide menu is accessed using API methods such as `toggle`, `show`, and `hide`
    methods. The slide menu provides various animation effects with the default effect
    `easing-out`. This default behavior can changed using the `effect` property. Similarly,
    the default effect duration of a slide menu is 500 milliseconds, but this can
    be customized using the `effectDuration` property.
  prefs: []
  type: TYPE_NORMAL
- en: The dimensions for any visual component is much needed and must be configured.
    Considering this standard, dimensions of Menu dimensions are configurable. The
    sub-menu width is controlled through the `menuWidth` property, which defaults
    to 180 (normally measured in pixels). Also the height of the scrollable area is
    controlled through the `viewportHeight` property with a default value of 175 pixels
    (that is, the scroll bar appears if the menu height is more than this default
    value).
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/slidemenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/slidemenu).'
  prefs: []
  type: TYPE_NORMAL
- en: TieredMenu – sub-menus in nested overlays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The TieredMenu component displays the sub-menus in a nested Overlays mode.
    By default, the slide menu is displayed as an inline menu component. A basic tiered
    menu example, which displays the document or file type menu would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items needs to be organized with in a component class. For
    example, a root menu item titled `File` will have nested items as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic tiered menu example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/64eb76e8-e9d2-46fe-8b0d-c76751eba177.png)'
  prefs: []
  type: TYPE_IMG
- en: As seen in the preceding snapshot, the slide menu is displayed in an inline
    format. It will be displayed in pop-up mode by enabling the `popup` property.
    PrimeNG 4.1 introduced the `appendTo` property to attach the Overlay. The slide
    menu is accessed using the API methods such as `toggle`, `show`, and `hide`.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between slide menu and tiered menu components is that a
    slide menu displays the sub-menu by replacing the parent menu whereas a tiered
    menu displays the sub-menus in an Overlay mode. The API methods for both a slide
    menu and tiered menu with more details in a tabular format is explained in menu
    section *Table 2.0*.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tieredmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tieredmenu).'
  prefs: []
  type: TYPE_NORMAL
- en: MegaMenu – the multicolumn menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MegaMenu is like a drop-down menu that expands into a relatively large and complex
    interface rather than a simple list of commands. It displays the sub-menus of
    root items together. MegaMenu is formed with the nested menu items where each
    item's root item is a two-dimensional array which define columns in an Overlay
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic MegaMenu example of a retailer application to purchase clothing items
    would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items needs to be organized with in a component class. For
    example, a root menu item titled Home & Furniture will have nested items as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic MegaMenu (with
    all menu items) example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fdfeabdf-f978-427a-8536-2341726aef75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The default orientation of MegaMenu is horizontal. This can also be positioned
    in a vertical manner using the `orientation` attribute (that is, `orientation="vertical"`).
    The vertical MegaMenu looks like as the following snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ecc6ecc5-94ad-4f88-8694-e8b5559bf42c.png)'
  prefs: []
  type: TYPE_IMG
- en: PrimeNG 4.1 allows custom content (form controls) by placing them inside MegaMenu
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/megamenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/megamenu).'
  prefs: []
  type: TYPE_NORMAL
- en: PanelMenu – hybrid of Accordion and Tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PanelMenu is a hybrid of vertical stacked Accordion and hierarchical Tree components.
    Each parent menu item has a toggleable panel; with the panel, it shows child menu
    items in a hierarchical Tree format. A basic panel menu example, which displays
    the document or file type menu would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items needs to be organized within a component class. For
    example, a root menu item titled Help will have nested items as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic panel menu example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d465a7d3-8147-42c3-b3e8-db4f1fcf8358.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial state of each menu item is controlled through the `expanded` attribute
    (that is, `expanded="true"`), which is available on the `MenuItem` interface level.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/panelmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/panelmenu).'
  prefs: []
  type: TYPE_NORMAL
- en: TabMenu - menu items as tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TabMenu is a navigation/command component that displays the items as tab headers
    (that is, the parent root items are represented in the form of horizontal stacked
    tabs). On the click of each tab, you can perform all kinds of menu actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic tabbed menu example, which displays the PrimeNG website information
    in the form of various tabs, would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of menu items need to be organized within a component class. For example,
    PrimeNG''s various details are explained in different horizontal tabs using menu
    items as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the tabbed panel menu example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5385a16-c2b4-4f4e-8568-754c9545bfcd.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the TabMenu displays or activates on the first tab. But the default
    visibility or initial display of a tab can be changed with the help of the `activeItem`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tabmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tabmenu).'
  prefs: []
  type: TYPE_NORMAL
- en: Breadcrumb – providing contextual information about the page hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Breadcrumb component provides contextual information about the page hierarchy.
    It allows you to keep track of their locations in programs, documents, and websites.
    This typically appears as horizontal on top of the web page separated by a greater
    than operator (>) as a hierarchy separator. This menu variation consists of a
    common menu model API to define its items. These menu items (collection of menu
    items) are connected to a `model` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic Breadcrumb example of an e-commerce application to purchase electrical
    items would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The item''s `model` property is an array of the `MenuItem` type. The possible
    options or properties for the `MenuModel` API are described in the beginning of
    the section. In this example, we define both label and command actions for menu
    items. The list of menu items need to be organized to display items as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snapshot result of the basic Breadcrumb as
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/001b9beb-a621-49aa-b994-9a023816d7ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Home icon is also part of the menu items and this can be customized using
    the `home` property of the `MenuItem` type. So, all features of the menu items
    apply to the Home menu item as well. The `home` property has to be defined for
    the Breadcrumb component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The component class holds the Home menu item as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This is a component supported customized icon property, which can be defined
    from `MenuItem`.
  prefs: []
  type: TYPE_NORMAL
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/breadcrumb](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/breadcrumb).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, you now know how to deal with various menu components
    and how to put them on a page for a particular use case. At first, we started
    with the MenuModel API to create an array of items, after that the menu component
    was introduced as the basic component, then MenuBar is moved to MegaMenu components
    with nested complex sub-menus, and followed by other menu variations such as slide
    menu, tiered menu, and panel menu.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we moved to the Context menu and Breadcrumb components as another kind
    of menu operations. In the next chapter, you will see a chart model as an API,
    and how to create awesome charts and maps for a visual representation of the data.
    All these components are explained with all possible features in a step-by-step
    approach.
  prefs: []
  type: TYPE_NORMAL
