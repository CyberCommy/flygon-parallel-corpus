- en: Controlling the Population
  prefs: []
  type: TYPE_NORMAL
- en: Linux is a multiuser operating system, which means that many users are allowed
    to access the system at the same time. In real life, you barely find a Linux server
    with just one user. On the contrary, you see a lot of users on one server. So
    let's get real and populate our system with various users and groups. In this
    chapter, you will learn how to add users and groups to your Linux system. You
    will also learn how to manage user and group accounts in all sorts of ways. Furthermore,
    you will also learn how to manage Linux file permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The /etc/passwd file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Linux, user information is stored in the `/etc/passwd` file. Every line
    in `/etc/passwd` corresponds to exactly one user. When you first open `/etc/passwd`,
    you will see a lot of users, and you will wonder, *where are all these users coming
    from?* The answer is simple: most of these users are service users, and they are
    used by your system to start up various applications and services. However, our
    main focus of this chapter will be system users; those are real people like you
    and me!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every line in `/etc/passwd` consists of 7 fields, each separated by a colon,
    and each field represents a user attribute. For example, the entry for user `elliot`
    will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88acbe14-424a-4da1-90fc-6ea1e8522129.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: The 7 fields in /etc/passwd'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table breaks down those seven fields in `/etc/passwd` and explains
    each one of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **What does it store?** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | This field stores the username. |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | This field usually has an `X` in it, which means the user''s password
    is encrypted and stored in the file `/etc/shadow`. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | This field stores the **UID** (**User ID**) number. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | This field stores the primary **GID** (**Group ID**) of the user. |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | This field stores a comment on the user, which is usually the user''s
    first and last name. |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | This field stores the path of the user''s home directory. |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | This field stores the user''s default shell. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 10: Understanding /etc/passwd'
  prefs: []
  type: TYPE_NORMAL
- en: Adding users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can add a user on your system, you have to become `root`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to add users. We all love Tom & Jerry, so let''s begin by
    adding user `tom`. To do that, you need to run the command `useradd -m tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And just like that, the user `tom` is now added to our system. You will also
    see a new line added to the end of the `/etc/passwd` file for the new user `tom`;
    let''s view it with the lovely `tail` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We used the `-m` option with the `useradd` command to ensure that a new home
    directory will be created for user `tom`. So let''s try to change to the `/home/tom`
    directory to make sure it''s indeed created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! We verified that `/home/tom` is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you may want to do after creating a new user is to set the
    user''s password. You can set `tom`''s password by running the command `passwd
    tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create user `jerry`. But this time, we will choose the following
    attributes for user `jerry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| UID | `777` |'
  prefs: []
  type: TYPE_TB
- en: '| Comment | `Jerry the Mouse` |'
  prefs: []
  type: TYPE_TB
- en: '| Shell | `/bin/bash` |'
  prefs: []
  type: TYPE_TB
- en: 'This is easy to do with the `useradd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `-u` option is used to set the UID for `jerry`. We also used the `-c` option
    to add a comment for user `jerry`, and finally we used the `-s` option to set
    the default shell for `jerry`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s view the last two lines of the `/etc/passwd` file to make some
    comparisons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the comment field for user `tom` is empty as we didn't add any comments
    while creating user `tom`, and notice how the UID for user `tom` was chosen by
    the system, but we have chosen `777` for user `jerry`. Also, notice that the default
    shell for user `tom` is chosen by the system to be `/bin/sh`, which is an older
    version of `/bin/bash`. However, we chose the newer shell `/bin/bash` for user
    `jerry`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s set the password for user `jerry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Amazing! We have now created two users: `tom` and `jerry`. Now, let''s switch
    to user `tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We were able to switch to user `tom`, but as you can see, the shell looks so
    much different as the command prompt doesn''t display the username or the hostname.
    That''s because the default shell for user `tom` is `/bin/sh`. You can use the
    `echo $SHELL` command to display the user''s default shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it displayed `/bin/sh`. Now, let''s exit and switch to user
    `jerry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything looks better with user `jerry` as we did set his default shell to
    be `/bin/bash`. Alright, now let''s switch back to the `root` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Modifying user attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So we are not happy that the default shell for user `tom` is `/bin/sh`, and
    we want to change it to `/bin/bash`. We can use the `usermod` command to modify
    user attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to change the default shell for user `tom` to be `/bin/bash`,
    you can run the command `usermod -s /bin/bash tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that you can also use the full name for the command option; so you can
    use `--shell` instead of `-s`. Anyways, let''s see if we successfully changed
    the default shell for user `tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! We successfully did it. You can also change the UID of `tom` to `444`
    by running the command `usermod -u 444 tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And we can indeed check that the UID of `tom` has changed by taking a peek
    at the `/etc/passwd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even modify the comment field of user `tom`. Right now, it''s empty,
    but you can set the comment field of user `tom` to `"Tom the Cat"` by running
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And again, we can verify that the comment is changed by looking at the `/etc/passwd`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Defining the skeleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you list the contents of `/home/jerry` and `/home/tom`, you will see that
    they are empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason that both `/home/jerry` and `/home/tom` are empty is that the skeleton
    file `/etc/skel` is also empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**WHAT IS /etc/skel?**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the skeleton file. Any file or directory you create in `/etc/skel` will
    be copied to the home directory of any new user created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with your favorite text editor, create the file `welcome.txt` in `/etc/skel`
    and insert the line `"Hello Friend!"` in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Alright, so now you have created the file `welcome.txt` in `/etc/skel`, which
    means that any new user created will now have the file `welcome.txt` in their
    home directory. To demonstrate, let''s create a new user named `edward` and then
    we will take a peek at his home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s set the password for user `edward`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the moment of truth comes! Let''s switch to user `edward` and list the
    contents of his home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the file `welcome.txt` is copied to `edward`'s home directory.
    Every new user created on the system will now have a cool greeting message! Notice
    that old users like `tom` and `jerry` will not have the file `welcome.txt` in
    their home directory as they were created before we added the file `welcome.txt`
    in `/etc/skel`.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are too tired of specifying the default shell every time we create a new
    user. But luckily, there is a file where you can specify the default shell for
    any new user created. This amazing file is `/etc/default/useradd`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the file `/etc/default/useradd` and look for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Now, any new user created will have `/bin/bash` as the default shell.
    Let''s test it by creating a new user named `spy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, set the password for user `spy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s switch to user `spy` and check the default shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Hooray! We can see that `bash` is the default shell for user `spy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that `/bin/sh` and `/bin/bash` are not the only two valid shells
    on your system; there are more! Check out the file `/etc/shells` to see a complete
    list of all the valid shells on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can change other user defaults in `/etc/default/useradd`, including:'
  prefs: []
  type: TYPE_NORMAL
- en: The default `home` directory (`HOME=/home`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default `skel` directory (`SKEL=/etc/skel`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will leave that for you to do as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Removing users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes a user is no longer needed to be on the system, for example, an employee
    leaving the company or a user that only needed temporary access to a server. In
    any case, you need to know how to delete users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last user we created was `spy`, right? Well, we don''t need any spies on
    our system, so let''s delete the user `spy`; you can delete user `spy` by running
    the command `userdel spy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'And just like that, user `spy` is deleted. However, the home directory of `spy`
    still exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We would have to manually delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: But this is inconvenient. Imagine after every user you delete, you then have
    to go and manually remove their home directory. Luckily, there is a better solution;
    you can use the `-r` option to automatically remove the user's home directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s give it a try with user `edward`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s check to see if the home directory for user `edward` still exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: And as you can see, `edward`'s home directory is removed.
  prefs: []
  type: TYPE_NORMAL
- en: The /etc/group file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In schools, kids are usually grouped into different groups. For example, kids
    who like dancing will be part of the dance group. The geeky kids will form the
    science group. In case you are wondering, I used to be part of the sports group
    because I was pretty damn fast!
  prefs: []
  type: TYPE_NORMAL
- en: We have the same concept in Linux as users who share similar characteristics
    are placed in the same group.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT IS A GROUP?**'
  prefs: []
  type: TYPE_NORMAL
- en: A group is a collection of users who share the same role or purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'All groups have their information stored in the file `/etc/group`. And just
    like with the `/etc/passwd` file, every line in `/etc/group` corresponds to exactly
    one group, and each line consists of `4` fields. For example, one of the most
    famous groups in Linux is the `sudo` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93e2c12d-c25a-4a51-a415-bc252f582ca1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: The 4 fields in /etc/group'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table breaks down those four fields in `/etc/group` and explains
    each one of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **What does it store?** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | This field stores the group name. |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | This field usually has an `X` in it, which means the group password is
    encrypted and stored in the file `/etc/gshadow`. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | This field stores the **GID** (**Group ID**) number. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | This field stores the usernames of the group members. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11: Understanding /etc/group'
  prefs: []
  type: TYPE_NORMAL
- en: Adding groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a group named `cartoon`. To do that, you need to run the command
    `groupadd cartoon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that a new line with the group information will be added to the end
    of the file `/etc/group`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the group `cartoon` currently has no members, and that's why the
    fourth field is currently empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create another group named `developers`, but this time, we will specify
    a GID of `888`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the `developers` group entry in `/etc/group`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: And it looks just like we expect it to be. Cool!
  prefs: []
  type: TYPE_NORMAL
- en: Adding group members
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users `tom` and `jerry` are both cartoon characters, so it makes sense to add
    them both to the `cartoon` group.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add `tom` to the `cartoon` group, you simply run the command `usermod -aG
    cartoon tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, you can add `jerry` to the `cartoon` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s have a peek at the `/etc/group` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, both `tom` and `jerry` are now listed as members of the `cartoon`
    group.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `id` command to view the group memberships of any user on the
    system. For example, if you want to check which groups `tom` belongs to, you can
    run the command `id tom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do some more practice by creating three new users – `sara`, `peter`,
    and `rachel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And remember to set the password for each user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now imagine if all the three new users are software developers; this means
    that they have the same role, and so they should be members of the same group.
    So let''s add all three users to the `developers` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s have a peek at the `/etc/group` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the group `developers` now has the three members – `sara`, `peter`,
    and `rachel`. But there is something strange! It seems like when we have created
    the users `sara`, `peter`, and `rachel`, it also created them as groups! But why
    did this happen? Well, let me explain it to you in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Primary versus secondary groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every user in Linux must be a member of a primary group. Primary groups are
    also referred to as login groups. By default, whenever a new user is created,
    a group is also created with the same name as the user, and this group becomes
    the primary group of the new user.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a user may or may not be a member of a secondary group. Secondary
    groups are also sometimes referred to as supplementary groups. You can think of
    a secondary group as any group that a user is a member of aside from the user's
    primary group.
  prefs: []
  type: TYPE_NORMAL
- en: Do not worry if you don't understand the concept of primary and secondary groups
    just yet; it will become crystal clear by the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new user named `dummy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you look at the last line of the `/etc/group` file, you will see that
    a group named `dummy` is also created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This `dummy` group is the primary group of user `dummy`; and if you run the
    `id` command on user `dummy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that user `dummy` is indeed a member of the `dummy` group. Now,
    let''s add user `dummy` to the `cartoon` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the `id` command on user `dummy` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that user `dummy` is a member of two groups: `dummy` and `cartoon`.
    However, `dummy` is the primary group and `cartoon` is the secondary group.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary group is always preceded by `gid=` in the output of the `id` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bd2ceec-8da8-4c6f-a814-bfafe9f97945.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Primary versus secondary group'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add user `dummy` to the `developers` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the `id` command on user `dummy` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, user `dummy` is a member of two secondary groups: `cartoon`
    and `developers`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright! Enough with all this dummy stuff. Let''s remove the user `dummy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Every user must be a member of only one primary group; however, there are no
    restrictions on the choice of the primary group!
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, let''s create a user named `smurf` with `cartoon` being the
    primary group of user `smurf`. This can easily be done by using the `--gid` option
    with the `useradd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, take a peek at the `/etc/group` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You will see that there is no group created with the name `smurf`. Amazing!
    That's because we already specified another primary group for user `smurf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s check user `smurf`''s group memberships:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `smurf` is only a member of the group `cartoon`, which is also
    his primary group, of course.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also change the primary group of existing users. For example, you can
    set the `developers` group to be the primary group of user `smurf` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Removing groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can remove a group if it is no longer needed. To demonstrate, let''s create
    a group named `temp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use the `groupdel` command to remove the `temp` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try removing the group `sara`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We get an error message as we are not allowed to remove primary groups of existing
    users.
  prefs: []
  type: TYPE_NORMAL
- en: File ownership and permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every file in Linux is owned by a specific user and a specific group. To demonstrate,
    let''s switch to user `smurf`, and create a file named `mysmurf` in `smurf`''s
    home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now do a long listing on the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61c1ebc2-7c65-47fc-aae3-f6775ddc3448.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: User and group owners'
  prefs: []
  type: TYPE_NORMAL
- en: You will see the name of the user (the user owner) who owns the file in the
    third column of the output, which is, by default, the user who created the file.
  prefs: []
  type: TYPE_NORMAL
- en: On the fourth column of the output, you will see the name of the group (the
    group owner) of the file, which is, by default, the primary group of the user
    owner.
  prefs: []
  type: TYPE_NORMAL
- en: The `developers` group is the primary group of user `smurf`, and hence `developers`
    became the group owner of the file `mysmurf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do a long listing on the `sports` directory that''s inside `elliot`''s
    home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: You will see that user `elliot` is the user owner, and the group `elliot` is
    the group owner; that's because the group `elliot` is the primary group of user
    `elliot`.
  prefs: []
  type: TYPE_NORMAL
- en: Changing file ownership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `chown` command to change a file''s ownership. In general,
    the syntax of the `chown` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you can change the ownership of the file `mysmurf`, so that user
    `elliot` is the owner, and group `cartoon` is the group owner, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Oh! Only the `root` user can do it; let''s switch to the `root` user and try
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Success! Now let''s view the ownership of the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have successfully changed the ownership of `mysmurf`. Also,
    you can change the user owner without changing the group owner. For example, if
    you want the user `root` to be the owner of `mysmurf`, you can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, only the user owner is changed to `root`, but `cartoon` remains
    the group owner.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also change the group owner without changing the user owner. For example,
    if you want the group `developers` to be the group owner of `mysmurf`, then you
    can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '**FOR YOUR INFORMATION**'
  prefs: []
  type: TYPE_NORMAL
- en: '`chgrp` can also be used to change the group owner of a file. I will leave
    that for you to do as an exercise!'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Linux, every file is assigned access permissions for three different entities;
    these entities are:'
  prefs: []
  type: TYPE_NORMAL
- en: The user owner of the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The group owner of the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everyone else (also referred to as others/world)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are already familiar with the user owner and the group owner; everyone else
    refers to any user on the system who is not the user owner and not the group owner.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of these three entities like you, your friends, and everyone else.
    There are some things that you don't like to share with anyone, other things you
    like to share with your friends, and things you may like to share with everyone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each file has three types of access permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: Read
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The meaning of each of these access permissions is not the same for files and
    directories. The following diagram explains the differences between access permissions
    for files versus directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea2e97b3-f43d-49c3-9310-4346e1389bbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: File versus directory permissions'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the permissions of a file by doing a long listing. For example,
    to see the current permissions set on the `mysmurf` file, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Now pay attention to the first column of the output, which is `-rw-r--r--`.
    Notice that it consists of ten slots; the first slot determines the type of the
    file. The remaining nine slots are divided into three sets, each with three slots,
    just like in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82df07a6-cba1-4bb5-8bc7-e4e7a413aad4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Understanding permissions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the first slot determines the file type; it can be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-` for regular files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d` for directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l` for soft links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b` for block devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c` for character devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next three slots determine the permissions granted for the owner of the
    file. The first of these slots determines the read permission; it can either be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r` for read access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-` for no read access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second of these slots determines the write permission; it can either be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`w` for write access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-` for no write access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The third slot determines the execute permission; it can either be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x` for execute access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-` for no execute access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same logic is applied to the next three slots, which determine the permissions
    for the group owner, and lastly, the final three slots, which determine the permissions
    for everyone else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s get our hands dirty and do some examples to reinforce our understanding
    of file permissions. Let''s first edit the `mysmurf` file and add the following
    line `Smurfs are blue!` so it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now switch to user `smurf` and try reading the contents of the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool! User `smurf` can read the contents of the file `mysmurf`. Keep in mind
    that user `smurf` is not the owner of the file, but he is a member of the group
    `developers`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'So `smurf` can read the file because the group permission of `mysmurf` is `r--`.
    But can he edit the file? Let''s see what will happen if user `smurf` tried to
    add the line `I am smurf!` to the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Permission denied! Yup, that''s because there is no write permission for the
    group owner (or others). Only the user owner has read and write permissions to
    the file `mysmurf`, and the owner happens to be `root` in this case. Now, if we
    changed the file ownership and made `smurf` the owner of the file `mysmurf`, then
    he will be able to edit the file; so let''s change the file ownership first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s switch back to user `smurf` and reattempt to edit the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool! So user `smurf` has successfully edited the file. Now let''s switch to
    user `elliot` and attempt to add the line `I am not smurf!` to the `mysmurf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Permission denied! Notice that `elliot` is not the user owner and is not even
    a member of the `developers` group, so he is regarded as everyone else (others).
    However, he can read the file because others have read permission `r--`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Changing file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, what if we want to give `elliot` permission to edit the file `mysmurf`
    without changing file ownership as we did before? Well! This is very simple; you
    can use the `chmod` command to change file permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first switch to the `root` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can add the write permission for others (everyone else) by running
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `o+w` means **others+write**, which means adding the write permission
    to others. Now do a long listing on `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, others can now read and write `rw-` to the `mysmurf` file.
    Now, switch back to user `elliot` and try to add the line `I am not smurf!` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Success! User `elliot` can edit the file `mysmurf`. Now it''s time to discuss
    the execute permission; let''s go to `elliot`''s home directory, and create a
    file named `mydate.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following two lines to the file `mydate.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add both lines by running the following two `echo` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Do not worry about the meaning of the line `''#/bin/bash''` now; I will explain
    it in a later chapter. Anyways, let''s view the content of the file `mydate.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now do a long listing on the file `mydate.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the absence of the execute permission here for everyone (the user owner,
    group owner, and others). Let''s add the execute permission to everyone; you can
    do that by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Here `a+x` means **all+execute**, which means add the execute permission to
    everyone. Also, notice that we were able to run the `chmod` command as user `elliot`
    only because he is the owner of the file `mydate.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, just enter the full path of `mydate.sh` and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Wow! The current date is displayed! You have created your first Bash script
    and have run it! Bash scripting will be covered in detail in a later chapter.
    But now at least you know what it means for a file to be executable. Now remove
    the execute permission by running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `a-x` means **all-execute**, which means remove the execute permission
    from everyone. Now try to run the script again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'We get a permission denied error! This is because the file `mydate.sh` is no
    longer executable. Most Linux commands are executable files. For example, take
    a look at the `date` command. First, we run the `which` command to get the location
    of the `date` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Now do a long listing on `/bin/date`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it has execute permissions for everyone. Now watch what happens
    when you remove the execute permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try running the `date` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'The `date` command is no longer working! Please let''s fix that by adding the
    execute permission back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s remove the user owner read permission on the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `u-r` means **user-read**, which means remove the read permission from
    the user owner. Now let''s switch to user `smurf` and try to read the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Poor `smurf`. He can''t even read his own file. But since he is the file owner;
    he can get the read permission back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'You have seen how to add (`+`) and remove (`-`) permissions with the `chmod`
    command. You can also use the equal sign `=` to set permissions. For example,
    if you want the group owner (`developers`) of the file `mysmurf` to only have
    write permission, you can run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, the `developers` group members only has write permission `-w-` to the
    file `mysmurf`. Here are more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chmod ug=rwx mysmurf`: This will give the user owner and group owner full
    permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod o-rw mysmurf`: This will remove read and write permissions from others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod a= mysmurf`: This will give zero (no) permissions to everyone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod go= mysmurf`: This will give zero permissions to the group owner and
    others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod u+rx mysmurf`: This will add read and execute permissions to the user
    owner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s give zero permissions to everyone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'So now user `smurf` can''t read, write, or execute the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'How about the `root` user? Well let''s switch to `root` to find out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `root` user can do anything! That's because `root` can bypass
    file permissions! In other words, file permissions don't apply to the `root` user.
  prefs: []
  type: TYPE_NORMAL
- en: Directory permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s see how read, write, and execute permissions work on a directory.
    The easiest example will be the `root`''s home directory `/root`. Let''s do a
    long listing on `/root`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, full permissions are given to the owner `root` and zero permissions
    for everyone else. Let''s create a file inside `/root` named `gold`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s switch to user `smurf` and try to list the contents of the `/root`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: User `smurf` gets a permission denied error as he's got no read permissions
    on the directory `/root`. Now, can `smurf` create a file inside `/root`?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: He cannot since he has no write permissions on `/root`. Can he delete a file
    inside `/root`?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Again, no write permissions, so he can't delete a file in `/root`. Finally,
    can user `smurf` change to the `/root` directory?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'He cannot because `smurf` needs the execute permission to be able to change
    to the `/root` directory. Now, let''s switch back to the `root` user and start
    adding some permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we added the read and execute permissions to others, so user `smurf`
    can now list the contents of the `/root` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'He can even change to the `/root` directory as we have added the execute permission
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'But he still has no write permissions, so he can''t create or delete files
    in `/root`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the write permission to others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, switch to user `smurf` and try to create or remove a file in `/root`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: So `smurf` can now create and delete files in `/root` as he has the write permission.
  prefs: []
  type: TYPE_NORMAL
- en: Using octal notation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of the letters `r`, `w`, and `x`, you can use the numbers `4`, `2`,
    and `1` to set file permissions. Take a look at the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/781e3f37-978e-435b-b053-d927a1b3ac16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Understanding octal notation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the first number, `7`, is basically the addition of the three numbers:
    `4 (r) + 2 (w) + 1 (x)`, which sets full permissions to the file owner. The second
    number, `6`, is the addition of the two numbers: `4 (r) + 2(w)`, which sets the
    read and write permissions to the group owner. Finally, the third number, `4`,
    which sets the read permission to others.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I know what you are thinking: "Why would I want to do math when I can just
    use the literal notation `rwx`?" And trust me, I feel you. A lot of people prefer
    the literal notation over the numeric notation, but some people just love numbers
    way too much!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do some practice with the octal notation. There are currently zero permissions
    on the file `mysmurf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use `777` to give full permissions to everyone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Cool! Now you can use the triplet `421` to give read permission for the owner,
    write permission for the group owner, and execute permission for others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s do one more example. What if you want to give full permissions to the
    owner, read permission for the group owner, and zero permissions for others? That''s
    easy; the correct triplet will be `740`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbers are easy to work with once you get the hang of it. Just remember that:'
  prefs: []
  type: TYPE_NORMAL
- en: '`4`: Read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: Write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: Execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0`: Zero permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table summarizes all the possible permissions combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Number** | **Meaning** | **Literal Equivalence** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Zero/No Permissions | `---` |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Execute | `--x` |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Write | `-w-` |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Write + Execute | `-wx` |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Read | `r--` |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Read + Execute | `r-x` |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Read + Write | `rw-` |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Read + Write + Execute | `rwx` |'
  prefs: []
  type: TYPE_TB
- en: 'Table 12: Octal notation versus literal notation'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter was a bit lengthy. Go take a break and then come back and attack
    the knowledge check exercises!
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new user `abraham` with a user ID of `333`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new group `admins`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add user `abraham` to the `admins` group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make `admins` the group owner of the directory `/home/abraham`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Members of the `admins` group can only list the contents of the directory `/home/abraham`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`chmod a=rxw facts.txt` will have the same result as `chmod 777 facts.txt`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chmod a=rw facts.txt` will have the same result as `chmod 665 facts.txt`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User `elliot` can have more than one primary group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
