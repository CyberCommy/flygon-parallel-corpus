- en: Using LXML, XPath, and CSS Selectors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LXML、XPath和CSS选择器
- en: So far, we have learned about web-development technologies, data-finding techniques,
    and accessing web content using the Python programming language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了Web开发技术、数据查找技术以及使用Python编程语言访问Web内容。
- en: Web-based content exists in parts or elements using some predefined document
    expressions. Analyzing these parts for patterns is a major task for processing
    convenient scraping. Elements can be searched and identified with XPath and CSS
    selectors that are processed with scraping logic for required content. lxml will
    be used to process elements inside markup documents. We will be using browser-based
    development tools for content reading and element identification.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Web的内容以一些预定义的文档表达式存在于部分或元素中。分析这些部分的模式是处理方便的抓取的主要任务。元素可以使用XPath和CSS选择器进行搜索和识别，这些选择器会根据抓取逻辑处理所需的内容。lxml将用于处理标记文档中的元素。我们将使用基于浏览器的开发工具进行内容阅读和元素识别。
- en: 'In this chapter, we will learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Introduction to XPath and CSS selectors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XPath和CSS选择器简介
- en: Using browser developer tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览器开发者工具
- en: Learning and scraping using the Python lxml library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习并使用Python lxml库进行抓取
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A web browser (Google Chrome or Mozilla Firefox) is required and we will be
    using the following Python libraries:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个Web浏览器（Google Chrome或Mozilla Firefox），我们将使用以下Python库：
- en: lxml
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lxml
- en: Requests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求
- en: If the preceding libraries do not exist with the current Python setup, for setting
    up or installation, refer to the *Setting things up* section in the last chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前Python设置中不存在上述库，可以参考上一章的*设置*部分进行设置或安装。
- en: 'Code files are available online on GitHub: [https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter03](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter03).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 代码文件可在GitHub上找到：[https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter03](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter03)。
- en: Introduction to XPath and CSS selector
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XPath和CSS选择器简介
- en: In the *Understanding web development and technologies* section in [Chapter
    1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml), *Web Scraping Fundamentals*, we
    introduced XML as a document that contains data that is exchangeable and distributable
    across various technologies related to the web and documents. XML carries user-defined
    tags, also known as nodes, which hold data in a tree-like structure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml)的*了解Web开发和技术*部分，*Web抓取基础*中，我们介绍了XML作为一个包含可在Web和文档相关技术中交换和分发的数据的文档。XML包含用户定义的标签，也称为节点，它们以树状结构保存数据。
- en: A tree-type structure (also known as an element-tree) is a base model for most
    markup languages and is often referred to as the **Document Object Model** (**DOM**).
    With the help of the DOM and its defined conventions, we can access, traverse,
    and manipulate elements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 树状结构（也称为元素树）是大多数标记语言的基本模型，并经常被称为**文档对象模型**（**DOM**）。借助DOM及其定义的约定，我们可以访问、遍历和操作元素。
- en: Elements are structured inside some parent elements, which are inside their
    own parent and so on; this describes a parent-child relationship that is the most
    significant feature of markup language. Many applications that support XML or
    markup language supports the DOM and even contain a parser to use.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 元素被结构化在一些父元素内部，这些父元素又位于它们自己的父元素内部，依此类推；这描述了标记语言最重要的特征，即父子关系。许多支持XML或标记语言的应用程序支持DOM，甚至包含解析器来使用。
- en: For extraction, it is necessary to identify the exact location of information.
    Information can be found nested inside a tree structure and could possess some
    additional attributes to represent the content. XPath and CSS selectors are both
    used to navigate along the DOM and search for desired elements or nodes found
    in the document.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取信息，有必要确定信息的确切位置。信息可能嵌套在树状结构内，并可能具有一些额外的属性来表示内容。XPath和CSS选择器都用于沿着DOM导航并搜索文档中的所需元素或节点。
- en: In the following sections, we will introduce both XPath and CSS selectors, and
    use them for a web-scraping purpose with a supportive Python library.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将介绍XPath和CSS选择器，并使用它们来进行Web抓取，并使用支持的Python库。
- en: XPath
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XPath
- en: The **XML Path** (**XPath**) language is a part of XML-based technologies (XML,
    XSLT, and XQuery), which deal with navigating through DOM elements or locating
    nodes in XML (or HTML) documents using expressions also known as XPath expressions.
    XPath is normally a path that identifies nodes in documents. XPath is also a **W3C**
    (short for **World Wide Web Consortium**) recommendation ([https://www.w3.org/TR/xpath/all/](https://www.w3.org/TR/xpath/all/))[.](https://www.w3.org/TR/xpath/all/)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**XML Path**（**XPath**）语言是基于XML的技术（XML、XSLT和XQuery）的一部分，用于通过表达式导航DOM元素或在XML（或HTML）文档中定位节点。XPath通常是标识文档中节点的路径。XPath也是**W3C**（**万维网联盟**）的推荐（[https://www.w3.org/TR/xpath/all/](https://www.w3.org/TR/xpath/all/)）。'
- en: 'XPath or XPath expressions are also identified as absolute and relative:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: XPath或XPath表达式也被识别为绝对和相对：
- en: The absolute path is an expression that represents a complete path from the
    root element to the desired element. It begins with `/html` and looks like `/html/body/div[1]/div/div[1]/div/div[1]/div[2]/div[2]/div/span/b[1]`.
    Individual elements are identified with their position and represented by an index
    number.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对路径是表示从根元素到所需元素的完整路径的表达式。它以`/html`开头，看起来像`/html/body/div[1]/div/div[1]/div/div[1]/div[2]/div[2]/div/span/b[1]`。单个元素通过其位置进行识别，并由索引号表示。
- en: The relative path represents an expression chosen from certain selected elements
    to the desired element. Relative paths are shorter and readable in comparison
    to absolute paths and look like `//*[@id="answer"]/div/span/b[@class="text"]`*.*
    A relative path is often preferred over an absolute path as element indexes, attributes,
    logical expressions, and so on can be combined and articulated in a single expression.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对路径表示从某些选定的元素中选择的表达式到所需的元素。相对路径比绝对路径更短，更易读，并且看起来像`//*[@id="answer"]/div/span/b[@class="text"]`。相对路径通常优先于绝对路径，因为元素索引、属性、逻辑表达式等可以组合在一个表达式中。
- en: With XPath expressions, we can navigate hierarchically through elements and
    reach the targeted one. XPath is also implemented by various programming languages,
    such as JavaScript, Java, PHP, Python, and C++. Web applications and browsers
    also have built-in support to XPath.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XPath表达式，我们可以在元素之间进行层次导航并达到目标元素。XPath也由各种编程语言实现，例如JavaScript、Java、PHP、Python和C++。Web应用程序和浏览器也内置了对XPath的支持。
- en: Expressions can be built using a number of built-in functions available for
    various data types. Operations related to general math (+, -, *, /), comparison
    (<, >, =, !=, >=, <=), and combination operators (`and`, `or`, and `mod`) can
    also be used to build expression. XPath is also a core block for XML technologies
    such as XQuery and **eXtensible Stylesheet Language Transformations** (**XSLT**).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用各种内置函数来构建表达式，这些函数适用于各种数据类型。与一般数学相关的操作（+、-、*、/）、比较（<、>、=、!=、>=、<=）和组合运算符（`and`、`or`和`mod`）也可以用于构建表达式。XPath也是XML技术（如XQuery和**eXtensible
    Stylesheet Language Transformations**（**XSLT**））的核心组成部分。
- en: '**XML Query** (**XQuery**) is a query language that uses XPath expressions
    to extract data from XML document.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**XML查询**（**XQuery**）是一种使用XPath表达式从XML文档中提取数据的查询语言。'
- en: XSLT is used to render XML in a more readable format.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: XSLT用于以更易读的格式呈现XML。
- en: 'Let''s explore a few XPath expressions from the XML content as seen in the
    following from the `food.xml` file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`food.xml`文件中的XML内容中探索一些XPath表达式：
- en: '![](assets/84e3a184-9a6f-49a1-a378-0de23cc11d41.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84e3a184-9a6f-49a1-a378-0de23cc11d41.png)'
- en: XML content
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: XML内容
- en: In the following example, we will be using XPath-Tester from Code Beautify ([https://codebeautify.org/Xpath-Tester](https://codebeautify.org/Xpath-Tester)).
    Use the XML source URL provided earlier to fetch the XML content and use it with
    the Code Beautify XPath-Tester.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将使用Code Beautify的XPath-Tester（[https://codebeautify.org/Xpath-Tester](https://codebeautify.org/Xpath-Tester)）。使用前面提供的XML源URL获取XML内容，并将其与Code
    Beautify XPath-Tester一起使用。
- en: You can use [https://codebeautify.org/Xpath-Tester](https://codebeautify.org/Xpath-Tester), [https://www.freeformatter.com/xpath-tester.htm](https://www.freeformatter.com/xpath-tester.html),
    or any other XPath tester tools that are available free on the web.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[https://codebeautify.org/Xpath-Tester](https://codebeautify.org/Xpath-Tester)、[https://www.freeformatter.com/xpath-tester.htm](https://www.freeformatter.com/xpath-tester.html)或任何其他免费提供的XPath测试工具。
- en: Everything is a node in an XML document, for example, `menus`, `food`, and `price`.
    An XML node can be an element itself (elements are types or entities that have
    start and end tags).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在XML文档中，一切都是一个节点，例如`menus`、`food`和`price`。XML节点本身可以是一个元素（元素是具有开始和结束标记的类型或实体）。
- en: 'The preceding XML document can also be read as inherited element blocks. Parent
    node `menus` contain multiple child nodes `food`, which distinguishes child elements
    for appropriate values and proper data types. The XPath expression, `//food`,
    as shown in the following screenshot, displays the result for the selected node
    `food`. Node selection also retrieves the child nodes within the parents, as seen
    in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的XML文档也可以被视为继承的元素块。父节点`menus`包含多个子节点`food`，这些子节点区分适当的值和适当的数据类型。如下截图所示，XPath表达式`//food`显示了所选节点`food`的结果。节点选择还检索了父节点中的子节点，如下截图所示：
- en: '![](assets/595692c6-3dd2-4fad-bd74-d17dd48e3a45.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/595692c6-3dd2-4fad-bd74-d17dd48e3a45.png)'
- en: Result for XPath //food (using https://codebeautify.org/Xpath-Tester)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: XPath //food的结果（使用https://codebeautify.org/Xpath-Tester）
- en: 'The XPath expression in the following screenshot selects the child node, `price`,
    found inside all parent nodes `food`. There are six child `food` nodes available,
    each of them containing `price`*,* `name`*,* `description`, `feedback`, and `rating`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图中的XPath表达式选择了所有父节点`food`中找到的子节点`price`。有六个可用的子`food`节点，每个节点都包含`price`、`name`、`description`、`feedback`和`rating`：
- en: '![](assets/b527b33b-10c7-46e0-ac56-29da6549590c.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b527b33b-10c7-46e0-ac56-29da6549590c.png)'
- en: Result for XPath //food/price (using https://codebeautify.org/Xpath-Tester)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: XPath //food/price的结果（使用https://codebeautify.org/Xpath-Tester）
- en: As we can see from the two preceding XPaths tested, expressions are created
    almost like a filesystem (command line or Terminal path), which we use in various
    OS. XPath expressions contain code patterns, functions, and conditional statements
    and support the use of predicates.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面测试的两个XPath可以看出，表达式几乎像文件系统（命令行或终端路径）一样创建，我们在各种操作系统中使用。XPath表达式包含代码模式、函数和条件语句，并支持使用谓词。
- en: Predicates are used to identify a specific node or element. Predicate expressions
    are written using square brackets that are similar to Python lists or array expressions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词用于识别特定的节点或元素。谓词表达式使用方括号编写，类似于Python列表或数组表达式。
- en: 'A brief explanation of the XPath expression given in the preceding XML is listed
    in the following table:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的XML中给出的XPath表达式的简要解释列在以下表中：
- en: '| **XPath expression** | **Description** |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **XPath表达式** | **描述** |'
- en: '| `//` | Selects nodes in the document, no matter where they are located |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `//` | 选择文档中的节点，无论它们位于何处 |'
- en: '| `//*` | Selects all elements in the document |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `//*` | 选择文档中的所有元素 |'
- en: '| `//food` | Selects the element `food` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `//food` | 选择元素`food` |'
- en: '| `*` | Selects all elements |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 选择所有元素 |'
- en: '| `//food/name &#124; //food/price` | Selects the `name` and `price` elements
    found in the `food` node:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '| `//food/name &#124; //food/price` | 选择在`food`节点中找到的`name`和`price`元素：'
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `//food/name` | Selects all the `name` elements inside `food`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food/name/text()` | Selects the `text` only for all `food/name` elements:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food/name &#124; //rating` | Selects all `name` elements from `food` and
    `rating` found in document:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food[1]/name` | Selects the `name` element for the first `food` node:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food[feedback<9]` | Select the `food` node and all of its elements where
    the predicate condition, `feedback<9`, is true:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food[feedback<9]/name` | Selects the `food` node and the `name` element
    that matches the condition:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food[last()]/name` | Selects the `name` element from the last `food` node:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food[last()]/name/text()` | Selects `text` for the `name` element from
    the last `food` node:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '| `sum(//food/feedback)` | Provides the sum of feedback found in all `food`:nodes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food[rating>3 and rating<5]/name` | Selects the `name` of `food` that
    fulfills the predicate condition:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food/name[contains(.,"Juice")]` | Selects the `name` of `food` that contains
    the `Juice` string:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food/description[starts-with(.,"Fresh")]/text()` | Selects the node description
    that starts with `Fresh`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food/description[starts-with(.,"Fresh")]` | Selects `text` from `description` node
    that starts with `Fresh`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '| `//food[position()<3]` | Selects the first and second food according to its
    position:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: XPath predicates can contain a numeric index that starts from `1` (not `0`)
    and conditional statements, for example, `//food[1]` or `//food[last()]/price`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have tested the preceding XML with various XPath expressions, let''s
    consider a simple XML with some attributes. Attributes are extra properties that
    identify certain parameters for a given node or element. A single element can
    contain a unique attributes set. Attributes found in XML nodes or HTML elements
    help to identify the unique element with the value it contains. As we can see
    in the code in the following XML, attributes are found as a `key=value` pair of
    information, for example `id="1491946008"`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: XPath expression accepts `key` attributes by adding the `@` character in front
    of the key name. Listed in the following table are a few examples of XPath using
    attributes with a brief description.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '| **XPath** **e****xpression** | **Description** |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
- en: '| `//book/@price` | Selects the `price` attribute for a `book`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '| `//book` | Selects the `book` field and its elements:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '| `//book[@price>30]` | Selects all elements in `book` the `price` attribute
    of which is greater than `30`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '| `//book[@price<30]/title` | Selects `title` from books where the `price`
    attribute is less than `30`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '| `//book/@id` | Selects the `id` attribute and its value. The `//@id` expression
    also results in the same output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '| `//book[@id=1491939362]/author` | Selects `author` from `book` where `id=1491939362`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: We have tried to explore and learn a few basic features about XPath and writing
    expressions to retrieve the desired content. In the *Scraping using lxml - a Python
    library* section, we will use Python programming libraries to further explore
    deploying code using XPath to scrape provided documents (XML or HTML) and learn
    to generate or create XPath expressions using browser tools. For more information
    on XPaths please refer to the links in the *Further reading* section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: CSS selectors
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml), *Web Scraping Fundamentals*,
    under the *Understanding web development and technologies* section, we learned
    about CSS and its use to style HTML elements plus we learned about using global
    attributes. CSS is normally used to style HTML and there are various ways to apply
    CSS to the HTML.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: CSS selectors (also referred to as CSS query or CSS selector query) are defined
    patterns used by CSS to select HTML elements, using the element name or global
    attributes (`ID`, and `Class`). CSS selectors, as the name suggests, select or
    provide the option to select HTML elements in various ways.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example code, we can visualize a few elements found in `<body>`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例代码中，我们可以看到在`<body>`中找到的一些元素：
- en: '`<h1>` is an element and a selector.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1>`是一个元素和选择器。'
- en: The `<p>` element or selector has the `class` attribute with the `header` style
    type. When it comes to selecting, `<p>` we can use either the element name, the
    attribute name, or just the type name.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p>`元素或选择器具有`class`属性和`header`样式类型。在选择`<p>`时，我们可以使用元素名称、属性名称或类型名称。'
- en: 'Multiple `<a>` are found inside `<div>`, but they differ with their `class`
    attribute, `id`, and value for the `href` property:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个`<a>`在`<div>`中找到，但它们的`class`属性、`id`和`href`属性的值不同：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The distinguishable patterns we have identified in the preceding code can be
    used to select those particular elements individually or in groups. Numbers of
    DOM parsers are available online, which provide a CSS query-related facility.
    One of them, as shown in the following screenshot, is [https://try.jsoup.org/](https://try.jsoup.org/):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中识别出的可区分的模式可以用于单独或分组选择这些特定元素。在线上有许多DOM解析器，它们提供了与CSS查询相关的功能。其中一个，如下面的屏幕截图所示，是[https://try.jsoup.org/](https://try.jsoup.org/)：
- en: '![](assets/c543073e-d7dd-4219-a1ce-fa384b2f66b8.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c543073e-d7dd-4219-a1ce-fa384b2f66b8.png)'
- en: Evaluating CSS query from https://try.jsoup.org/The DOM parser converts provided
    XML or HTML into a DOM object or tree type of structure, which facilitates accessing
    and manipulating element or tree nodes. For more detail information on the DOM,
    please visit [https://dom.spec.whatwg.org/](https://dom.spec.whatwg.org/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从https://try.jsoup.org/评估CSS查询DOM解析器将提供的XML或HTML转换为DOM对象或树类型的结构，从而便于访问和操作元素或树节点。有关DOM的更多详细信息，请访问[https://dom.spec.whatwg.org/](https://dom.spec.whatwg.org/)。
- en: 'In a CSS query, various symbols, as listed in the following code text, represent
    certain characteristics and can be used inside a CSS query:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS查询中，以下代码文本中列出的各种符号代表特定的特征，并且可以在CSS查询中使用：
- en: 'The global `id` attribute and `class` are represented by `#` and `.`, respectively,
    as seen in this query:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局`id`属性和`class`由`#`和`.`表示，如此查询所示：
- en: '`a#link`: `<a id="link" href="mailto:xyz@domain.com">Email Link1!</a>`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a#link`: `<a id="link" href="mailto:xyz@domain.com">Email Link1!</a>`'
- en: '`a.plan`: `<a class="plan" href="*.pdf">Document Places</a>`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.plan`: `<a class="plan" href="*.pdf">Document Places</a>`'
- en: 'Combinators (showing the relationship between elements) are also used, such
    as `+`, `>`, `~`, and the space character, as seen in the query here:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合符（显示元素之间的关系）也被使用，例如`+`、`>`、`~`和空格字符，如此查询所示：
- en: '`h1 + p`: `<p class=”header”>Page Header</p>`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1 + p`: `<p class=”header”>Page Header</p>`'
- en: '`div.links a.plan`: `<a class="plan" href="*.pdf">Document Places</a>`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`div.links a.plan`: `<a class="plan" href="*.pdf">Document Places</a>`'
- en: 'Operators, such as `^`, `*`, `$` are used for positioning and selecting, as
    seen in this query:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如`^`、`*`、`$`之类的运算符用于定位和选择，如此查询所示：
- en: '`a[href$="pdf"]`: `<a class="plan" href="*.pdf">Document Places</a>`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[href$="pdf"]`: `<a class="plan" href="*.pdf">Document Places</a>`'
- en: '`a[href^="mailto"]`: `<a id="link" href="mailto:xyz@domain.com">Email Link1!</a><a
    href="mailto:abc@domain.com">Email Link2!</a>`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[href^="mailto"]`: `<a id="link" href="mailto:xyz@domain.com">Email Link1!</a><a
    href="mailto:abc@domain.com">Email Link2!</a>`'
- en: These symbols are used and explained side-by-side, referring to the preceding
    HTML code with various types of selectors, in the following sections.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些符号在以下各节中并排使用和解释，参考前面HTML代码中各种类型的选择器。
- en: Element selectors
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元素选择器
- en: 'Element selectors are basic selectors that choose elements from HTML. Most
    often, these elements are the basic tags of HTML. The following table lists some
    of the selectors and their usage for this category:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 元素选择器是从HTML中选择元素的基本选择器。通常，这些元素是HTML的基本标签。以下表格列出了此类别的一些选择器及其用法：
- en: '| **CSS query** | **Description** |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| **CSS查询** | **描述** |'
- en: '| `h1` | Selects `<h1>` elements |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `h1` | 选择`<h1>`元素 |'
- en: '| `a` | Selects all of the `<a>` elements |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 选择所有`<a>`元素 |'
- en: '| `*` | Selects all elements in the HTML code |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 选择HTML代码中的所有元素 |'
- en: '| `body *` | Selects all `<h1>`, `<p>`, `<div>`, and `<a>` elements inside
    `<body>` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `body *` | 选择`<body>`中的所有`<h1>`、`<p>`、`<div>`和`<a>`元素 |'
- en: '| `div a` | Selects all `<a>` inside `<div>` (using space character in between)
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `div a` | 选择`<div>`中的所有`<a>`（使用空格字符之间） |'
- en: '| `h1 + p` | Selects immediate `<p>` elements after `<h1>` |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `h1 + p` | 选择`<h1>`后面的直接`<p>`元素 |'
- en: '| `h1 ~ p` | Selects every `<p>` elements preceded by `<h1>` |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `h1 ~ p` | 选择`<h1>`之前的每个`<p>`元素 |'
- en: '| `h1,p` | Selects all `<h1>` and `<p>` elements |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `h1,p` | 选择所有`<h1>`和`<p>`元素 |'
- en: '| `div > a` | Selects all `<a>` elements that are a direct child of `<div>`
    |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `div > a` | 选择所有是`<div>`的直接子元素的`<a>`元素 |'
- en: ID and class selectors
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ID和类选择器
- en: ID and class selectors are additional features available with element selectors.
    We can find HTML tags with the `class` and `id` attributes. These are also known
    as global attributes. These attributes are mostly preferred over other attributes
    as they define the tags for structure and with identification.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ID和类选择器是元素选择器的附加功能。我们可以找到具有`class`和`id`属性的HTML标签。这些也被称为全局属性。这些属性通常优先于其他属性，因为它们定义了结构和标识的标签。
- en: 'For more details on global attributes, please refer to [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml),
    *Web Scraping Fundamentals*, the *Global attributes* section. The following table
    lists the usage of this category of selectors:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有关全局属性的更多详细信息，请参阅[第1章](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml)，*Web Scraping
    Fundamentals*，*全局属性*部分。以下表格列出了此类选择器的用法：
- en: '| **CSS query** | **Description** |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| **CSS查询** | **描述** |'
- en: '| `.header` | Selects an element with `class=header` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `.header` | 选择具有`class=header`的元素 |'
- en: '| `.plan` | Selects `<a>` with `class=plan` |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `.plan` | 选择具有`class=plan`的`<a>` |'
- en: '| `div.links` | Selects `<div>` with `class=plan` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `div.links` | 选择`class=plan`的`<div>` |'
- en: '| `#link` | Selects an element with `id=link` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `#link` | 选择具有`id=link`的元素 |'
- en: '| `a#link` | Selects `<a>` elements with `id=link` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `a#link` | 选择具有`id=link`的`<a>`元素 |'
- en: '| `a.plan` | Selects `<a>` elements with `class=plan` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `a.plan` | 选择具有`class=plan`的`<a>`元素 |'
- en: Attribute selectors
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性选择器
- en: Attribute selectors are used to define selectors with the available attributes.
    HTML tags contain an attribute that helps to identify a particular element with
    the attribute and the value that it carries.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists a few ways to show the usage of attribute selectors:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '| **CSS query** | **Description** |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| `a[href*="domain"]` | Selects `<a>` elements that contain the `domain` substring
    in its `href`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '| `a[href^="mailto"]` | Selects `<a>` elements that start with the `mailto`
    substring of the `href` attributes:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '| `a[href$="pdf"]` | Selects `<a>` elements that have a `pdf` substring at
    the end of its `href` attribute:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '| `[href~=do]` | Selects all elements with the `href` attribute and matches
    `do` in values. The two `<a>` elements listed in the following both contain `do`
    inside of their `href` value:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '| `[class]` | Selects all elements or `<p>`, `<div>`, and `<a>` with the `class`
    attribute:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '| `[class=plan]` | Selects `<a>` with `class=plan`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Pseudo selectors
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pseudo selectors are a set of handy choices when it comes to identifying or
    selecting the elements based on their position.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists some of the ways these types of selectors might be
    used, with a brief description:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '| **CSS query** | **Description** |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
- en: '| `a:gt(0)` | Selects all `<a>` elements except those indexed at a `0` position:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '| `a:eq(2)` | Selects `<a>` element which are indexed at `2`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '| `a:first-child` | Selects every `<a>` element that is the first child of
    its parent:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '| `a:last-child` | Selects every `<a>` element that is the last child of its
    parent:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '| `a:last-of-type` | Selects the last element `<a>` of its parent:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '| `:not(p)` | Selects all elements except `<p>`. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
- en: '| `a:nth-child(1)` | Selects every `<a>` from the first child of its parent:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '| `a:nth-last-child(3)` | Selects every third `<a>` from the last child of
    its parent:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '| `a:nth-of-type(3)` | Selects every third `<a>` element of its parent:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '| `a:nth-last-of-type(3)` | Selects every `<a>` element, at the third position
    from last, of its parent:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: CSS selectors are used as a convenient alternative to XPath expressions for
    selecting elements, as they are shorter in length compared to absolute XPath and
    use simple patterns in expressions that are easy to read and manage. CSS selectors
    can be converted into XPath expressions, but not vice versa.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also a number of tools available online, which allow the conversion
    of a CSS selector query into an XPath expression; one of these is [https://css-selector-to-xpath.appspot.com/](https://css-selector-to-xpath.appspot.com/),
    as seen in the following screenshot; we shouldn''t always trust the tools available
    and results should be tested before applying them in code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c7f2e6a1-0110-4135-822c-97efabd35133.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
- en: CSS selector to XPath converter
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: As described in the preceding screenshot, CSS selectors are used to select elements
    from a data extraction perspective and can be used in `Scraper` codes or even
    while applying styles to selected elements from a styling perspective.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about the most popular web-related pattern-finding
    techniques of XPath and CSS selectors. In the next section, we will explore browser-based
    developer tools (DevTools) and learn to use the features inside DevTools. DevTools
    can be used to search, analyze, identify, and select elements and obtain XPath
    expressions and CSS selectors.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Using web browser developer tools for accessing web content
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml), *Web Scraping Fundamentals*,
    under the *Data finding techniques* (s*eeking data from the web)* section and
    inside *Developer tools (DevTools),* we introduced browser-based DevTools to locate
    content and explore the various panels found. DevTools offers various functional
    panels, which provide us with supportive tools to manage related resources.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: In this particular section, our motive will be specific to identifying the particular
    elements that hold the content we are looking for. This identification-based information,
    such as XPath expression, CSS query, or even DOM-based navigation flow will be
    beneficial while coding `Scraper`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的部分，我们的目的将是特定地识别持有我们正在寻找的内容的特定元素。这种基于标识的信息，比如XPath表达式、CSS查询，甚至是基于DOM的导航流，在编写`Scraper`时将会很有帮助。
- en: We will explore web pages using Google Chrome. Chrome has a built-in developer
    tool with plenty of features (available for element identification, selection,
    DOM navigation, and so on). In the following sections, we will explore and use
    these features.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Google Chrome浏览网页。Chrome内置了开发者工具，具有许多功能（用于元素识别、选择、DOM导航等）。在接下来的部分，我们将探索并使用这些功能。
- en: HTML elements and DOM navigation
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML元素和DOM导航
- en: We will be using [http://books.toscrape.com/](http://books.toscrape.com/) from
    [http://toscrape.com/](http://toscrape.com/). `toscrape` provides resources related
    to web scraping for beginners and developers to learn and implement `Scraper`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[http://books.toscrape.com/](http://books.toscrape.com/)来自[http://toscrape.com/](http://toscrape.com/)。`toscrape`提供了与网页抓取相关的资源，供初学者和开发人员学习和实施`Scraper`。
- en: 'Let''s open the [http://books.toscrape.com](http://books.toscrape.com) URL
    using the web browser, Google Chrome, as shown here:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用网页浏览器Google Chrome打开[http://books.toscrape.com](http://books.toscrape.com)的URL，如下所示：
- en: '![](assets/55b6f040-3c78-4824-857a-b759ba4254d6.png)Inspect view of books.toscrape.com'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/55b6f040-3c78-4824-857a-b759ba4254d6.png)books.toscrape.com的检查视图'
- en: As the page content is successfully loaded, we can load DevTools with a right-click
    on the page and press the option Inspect or by pressing *Ctrl* + *Shift* + *I*.
    If accessing through the Chrome menu, click More Tools and Developer Tools. The
    browser should look similar to the content in the preceding screenshot.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面内容成功加载后，我们可以右键单击页面并选择选项检查，或者按*Ctrl* + *Shift* + *I*来加载DevTools。如果通过Chrome菜单访问，点击更多工具和开发者工具。浏览器应该看起来与前面的屏幕截图中的内容类似。
- en: 'As you can see in the preceding screenshot, in inspect mode, the following
    is loaded:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所看到的，在检查模式下，加载了以下内容：
- en: Panel elements are default on the left-hand side.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板元素默认位于左侧。
- en: CSS styles-based content is on the right-hand side.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于CSS样式的内容位于右侧。
- en: We notice the DOM navigation or elements path in the bottom left-hand corner,
    for example, `html.no-js body .... div.page_inner div.row`.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们注意到在左下角有DOM导航或元素路径，例如，`html.no-js body .... div.page_inner div.row`。
- en: 'We have covered a basic overview of such panels in [Chapter 1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml),
    *Web Scraping Fundamentals*, in the *Developer Tools* section. As developer tools
    get loaded, we can find a pointer-icon listed, at first, from the left; this is
    used for selecting elements from the page, as shown in the following screenshot;
    this element selector (inspector) can be turned ON/OFF using *Ctrl* + *Shift*
    + *C*:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml)中已经对这些面板进行了基本概述，*Web Scraping
    Fundamentals*，在*Developer Tools*部分。随着开发者工具的加载，我们可以首先找到一个指针图标，这是用于从页面中选择元素的，如下图所示；这个元素选择器（检查器）可以使用*Ctrl*
    + *Shift* + *C*打开/关闭：
- en: '![](assets/5a5ec3a7-22fb-4e7e-bdf1-86827e38dd81.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5a5ec3a7-22fb-4e7e-bdf1-86827e38dd81.png)'
- en: Element selector (inspector) on inspect bar
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 检查栏上的元素选择器（检查器）
- en: 'We can move the mouse on the page loaded after turning ON the element selector.
    Basically, we are searching for the exact HTML element that we are pointing to
    using the mouse:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 打开元素选择器后，我们可以在页面上移动鼠标。基本上，我们正在使用鼠标搜索我们指向的确切HTML元素：
- en: '![](assets/a9235959-772d-4060-b3f5-e1735651d65b.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9235959-772d-4060-b3f5-e1735651d65b.png)'
- en: Using element selector on the book image
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在书籍图片上使用元素选择器
- en: 'As seen in the preceding screenshot, the element has been selected and, as
    we move the mouse over the first book picture available, this action results in
    the following:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，该元素已被选中，当我们将鼠标移动到第一本书的图片上时，这个动作会导致以下结果：
- en: The `div.image_container` element is displayed and selected in the page itself.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`div.image_container`元素在页面中显示并被选中。'
- en: Inside the elements panel source, we can find the particular HTML code, `<div
    class="image_container">`, being highlighted too. This information (where the
    book picture is located) can also be found using right-click + page source or
    *Ctrl* + *U* and searching for the specific content.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在元素面板源中，我们可以找到特定的HTML代码`<div class="image_container">`，也被突出显示。这些信息（书籍图片的位置）也可以通过右键单击+页面源或*Ctrl*
    + *U*，然后搜索特定内容来找到。
- en: 'The same action can be repeated for various sections of HTML content that we
    wish to scrape, as in the following examples:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重复对我们希望抓取的HTML内容的各个部分执行相同的操作，就像以下示例中所示的那样：
- en: The price for a listed book is found inside the `div.product_price` element.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出的书籍价格位于`div.product_price`元素内。
- en: The star-rating is found inside `p.star-rating`.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 星级评分位于`p.star-rating`内。
- en: The book title is found inside `*<*h3>`, found before `div.product_price` or
    after `p.star-rating`.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书名位于`*<*h3>`内，在`div.product_price`之前或在`p.star-rating`之后。
- en: The book detail link is found inside `<a>`, which exists inside `<h3>`.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书籍详细链接位于`<a>`内，该链接存在于`<h3>`内。
- en: 'From the following screenshot, it''s also clear that the previously listed
    elements are all found inside `article.product_prod`. Also, at the bottom of the
    following screenshot, we can identify the DOM path as `article.product_prod`:'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从下面的屏幕截图中，也清楚地看到了先前列出的元素都位于`article.product_prod`内。此外，在下面的屏幕截图底部，我们可以确定DOM路径为`article.product_prod`：
- en: '![](assets/be32e5d0-f89c-4306-9df6-88b96ef47857.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/be32e5d0-f89c-4306-9df6-88b96ef47857.png)'
- en: Element selection under inspect mode
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 检查模式下的元素选择
- en: DOM navigation, as found in the preceding screenshots, can be beneficial while
    dealing with XPath expressions, and can verify the content using the page source,
    if the path or element displayed by the element inspector actually exists (inside
    the obtained page source).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中找到的DOM导航在处理XPath表达式时可能会有所帮助，并且可以使用页面源代码验证内容，如果元素检查器显示的路径或元素实际存在于获取的页面源代码中。
- en: DOM elements, navigation paths, and elements found using the elements inspector
    or selectors should be cross-verified for their existence in page sources or inside
    resources that are found in Network panels, to be sure.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: DOM元素、导航路径和使用元素检查器或选择器找到的元素应该进行交叉验证，以确保它们在页面源代码或网络面板中存在。
- en: XPath and CSS selectors using DevTools
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DevTools获取XPath和CSS选择器
- en: 'In this section, we will be collecting XPath expressions and CSS queries for
    the required element. In a similar way to how we explored the Page Inspector and
    Elements panel in the preceding section, let''s proceed with the following steps
    to obtain an XPath expression and CSS query for the selected element:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将收集所需元素的XPath表达式和CSS查询。与我们在前一节中探索页面检查和元素面板的方式类似，让我们继续以下步骤，获取所选元素的XPath表达式和CSS查询：
- en: Choose the Element Selector and obtain the element code
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择元素选择器并获取元素代码
- en: Right-click the mouse on the element code obtained
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击鼠标获取元素代码
- en: Choose the Copy option from the menu
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择复制选项
- en: From the sub-menu options, choose Copy XPath for XPath expression for chosen
    element
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从子菜单选项中，选择复制XPath以获取所选元素的XPath表达式
- en: Or choose Copy selector for the CSS selector (query)
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或选择CSS选择器（查询）的复制选择器
- en: 'As seen in the following screenshot, we select various sections of a single
    book item and obtain respective CSS selectors or XPath expressions, accessing
    the menu options:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，我们选择单个图书项目的各个部分，并获取相应的CSS选择器或XPath表达式，访问菜单选项：
- en: '![](assets/7f53f2c4-ef0a-4b88-ba6d-56beb60c066f.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f53f2c4-ef0a-4b88-ba6d-56beb60c066f.png)'
- en: Copying XPath and CSS selector using page inspect
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用页面检查复制XPath和CSS选择器
- en: The following are some XPath and CSS selectors collected using DevTools for
    items available with products such as book title and price.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用DevTools收集的一些XPath和CSS选择器，用于产品的可用项目，如图书标题和价格。
- en: '**XPath selectors** using DevTools:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用DevTools获取XPath选择器**：'
- en: 'Book title: `//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/h3/a`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书标题：`//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/h3/a`
- en: 'Price: `//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/div[2]`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格：`//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/div[2]`
- en: 'Image: `//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/div[1]`'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片：`//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/div[1]`
- en: 'Stock information: `//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/div[2]/p[2]`'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存信息：`//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/div[2]/p[2]`
- en: 'Star rating: `//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/p`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 星级评分：`//*[@id="default"]/div/div/div/div/section/div[2]/ol/li[1]/article/p`
- en: '**CSS query selectors** using DevTools:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用DevTools获取CSS查询选择器**：'
- en: 'Book title: `#default > div > div > div > div > section > div:nth-child(2)
    > ol > li:nth-child(1) > article > h3 > a`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书标题：`#default > div > div > div > div > section > div:nth-child(2) > ol > li:nth-child(1)
    > article > h3 > a`
- en: 'Price: `#default > div > div > div > div > section > div:nth-child(2) > ol
    > li:nth-child(1) > article > div.product_price`'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格：`#default > div > div > div > div > section > div:nth-child(2) > ol > li:nth-child(1)
    > article > div.product_price`
- en: 'Image: `#default > div > div > div > div > section > div:nth-child(2) > ol
    > li:nth-child(1) > article > div.image_container`'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片：`#default > div > div > div > div > section > div:nth-child(2) > ol > li:nth-child(1)
    > article > div.image_container`
- en: 'Stock info: `#default > div > div > div > div > section > div:nth-child(2)
    > ol > li:nth-child(1) > article > div.product_price > p.instock.availability`'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存信息：`#default > div > div > div > div > section > div:nth-child(2) > ol > li:nth-child(1)
    > article > div.product_price > p.instock.availability`
- en: 'Star rating: `#default > div > div > div > div > section > div:nth-child(2)
    > ol > li:nth-child(1) > article > p.star-rating`'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 星级评分：`#default > div > div > div > div > section > div:nth-child(2) > ol > li:nth-child(1)
    > article > p.star-rating`
- en: Similarly other essential XPath or CSS selectors will also be collected as required.
    After collection and verification or cleaning (shortening) of these expressions
    and queries, scraping logic is applied using Python programming to automate the
    data collection.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，其他必要的XPath或CSS选择器也将根据需要收集。在收集和验证或清理（缩短）这些表达式和查询之后，使用Python编程应用爬虫逻辑来自动化数据收集。
- en: Again, there's no particular way out of following the steps as discussed in
    the previous section. The XPath or CSS selector can also be determined or formed
    revealing the HTML source or page source; there are also lots of browser-based
    extensions that support similar tasks. It's the developer's choice to be comfortable
    with any way out that we have discussed to deal with the XPath and CSS selectors.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，没有特定的方法可以避开前一节中讨论的步骤。XPath或CSS选择器也可以通过显示HTML源代码或页面源代码来确定或形成；还有许多支持类似任务的基于浏览器的扩展。开发人员可以选择任何我们讨论过的处理XPath和CSS选择器的方法来感到舒适。
- en: One of the recently listed browser-based extensions to generate XPath and CSS
    selectors for Google Chrome is ChroPath ([https://autonomiq.io/chropath/](https://autonomiq.io/chropath/)[)](https://autonomiq.io/chropath/).
    Writing customized expressions and queries is advised for self-practice and knowledge.
    Extensions and other similar applications should be used while processing a large
    information source.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 最近列出的基于浏览器的扩展之一，用于生成Google Chrome的XPath和CSS选择器是ChroPath ([https://autonomiq.io/chropath/](https://autonomiq.io/chropath/)[)](https://autonomiq.io/chropath/)。建议自行练习和了解编写自定义表达式和查询。在处理大量信息源时，应使用扩展和其他类似应用程序。
- en: 'In this section, we inspected and explored the Elements panel for element identification
    and DOM navigation: modifying, removing elements, altering scripts, and so on.
    Related options also exist in the Elements panel. In the following section, we
    will be using the Python library, `lxml`, to code `Scraper` and collect data from
    the chosen website using XPath and CSS selector.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们检查和探索了元素面板，用于元素识别和DOM导航：修改、删除元素、修改脚本等。元素面板中也存在相关选项。在接下来的部分中，我们将使用Python库`lxml`来编写`Scraper`，并使用XPath和CSS选择器从选择的网站收集数据。
- en: Scraping using lxml, a Python library
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用lxml，一个Python库
- en: lxml is a XML toolkit, with a rich library set to process XML and HTML. lxml
    is preferred over other XML-based libraries in Python for its high speed and effective
    memory management. It also contains various other features to handle both small
    or large XML files. Python programmers use lxml to process XML and HTML documents.
    For more detailed information on lxml and its library support, please visit [https://lxml.de/.](https://lxml.de/)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: lxml是一个XML工具包，具有丰富的库集来处理XML和HTML。lxml在Python中比其他基于XML的库更受青睐，因为它具有高速和有效的内存管理。它还包含各种其他功能，用于处理小型或大型XML文件。Python程序员使用lxml来处理XML和HTML文档。有关lxml及其库支持的更详细信息，请访问[https://lxml.de/.](https://lxml.de/)
- en: lxml provides native support to XPath and XSLT and is built on powerful C libraries: `libxml2`
    and `libxslt`. Its library set is used normally with XML or HTML to access XPath,
    parsing, validating, serializing, transforming, and extending features from ElementTree
    ([http://effbot.org/zone/element-index.htm#documentation](http://effbot.org/zone/element-index.htm#documentation)).
    Parsing, traversing ElementTree, XPath, and CSS selector-like features from lxml makes
    it handy enough for a task such as web scraping. lxml is also used as a parser
    engine in Python Beautiful Soup ([https://www.crummy.com/software/BeautifulSoup/bs4/doc/](https://www.crummy.com/software/BeautifulSoup/bs4/doc/))
    and pandas ([https://pandas.pydata.org/](https://pandas.pydata.org/)).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: lxml提供了对XPath和XSLT的本机支持，并构建在强大的C库`libxml2`和`libxslt`之上。它的库集通常与XML或HTML一起使用，用于访问XPath、解析、验证、序列化、转换和扩展ElementTree的功能([http://effbot.org/zone/element-index.htm#documentation](http://effbot.org/zone/element-index.htm#documentation))。从lxml中解析、遍历ElementTree、XPath和类似CSS选择器的功能使其足够方便用于诸如网络抓取之类的任务。lxml还用作Python
    Beautiful Soup ([https://www.crummy.com/software/BeautifulSoup/bs4/doc/](https://www.crummy.com/software/BeautifulSoup/bs4/doc/))和pandas
    ([https://pandas.pydata.org/](https://pandas.pydata.org/))中的解析引擎。
- en: Elements of a markup language such as XML and HTML have start and close tags;
    tags can also have attributes and contain other elements. ElementTree is a wrapper
    that loads XML files as trees of elements. The Python built-in library, ElementTree
    (etree), is used to search, parse elements, and build a document tree. Element
    objects also exhibit various accessible properties related to Python lists and
    dictionaries.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 标记语言的元素，如XML和HTML，具有开始和结束标记；标记也可以具有属性并包含其他元素。ElementTree是一个加载XML文件为元素树的包装器。Python内置库ElementTree
    (etree) 用于搜索、解析元素和构建文档树。元素对象还具有与Python列表和字典相关的各种可访问属性。
- en: XSLT is a language to transform an XML document into HTML, XHML, text, and so
    on. XSLT uses XPath to navigate in XML documents. XSLT is a template type of structure
    that is used to transform XML document into new documents.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: XSLT是一种将XML文档转换为HTML、XHML、文本等的语言。XSLT使用XPath在XML文档中导航。XSLT是一种模板类型的结构，用于将XML文档转换为新文档。
- en: 'The lxml library contains important modules, as listed here:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: lxml库包含以下重要模块：
- en: '`lxml.etree` ([https://lxml.de/api/lxml.etree-module.html](https://lxml.de/api/lxml.etree-module.html)):
    Parsing and implementing ElementTree; supports XPath, iterations, and more'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxml.etree` ([https://lxml.de/api/lxml.etree-module.html](https://lxml.de/api/lxml.etree-module.html))：解析和实现ElementTree；支持XPath、迭代等'
- en: '`lxml.html` ([https://lxml.de/api/lxml.html-module.html](https://lxml.de/api/lxml.html-module.html)):
    Parses HTML, supports XPath, CSSSelect, HTML form, and form submission'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxml.html` ([https://lxml.de/api/lxml.html-module.html](https://lxml.de/api/lxml.html-module.html))：解析HTML，支持XPath、CSSSelect、HTML表单和表单提交'
- en: '`lxml.cssselect` ([https://lxml.de/api/lxml.cssselect-module.html](https://lxml.de/api/lxml.cssselect-module.html)):
    Converts CSS selectors into XPath expressions; accepts a CSS selector or CSS Query
    as an expression'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lxml.cssselect` ([https://lxml.de/api/lxml.cssselect-module.html](https://lxml.de/api/lxml.cssselect-module.html))：将CSS选择器转换为XPath表达式；接受CSS选择器或CSS查询作为表达式'
- en: lxml by examples
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过示例学习lxml
- en: lxml has a large module set, and, in this section, we will learn to explore
    lxml using most of its features with examples before moving into scraping tasks.
    The examples are geared toward extraction activity rather than development.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: lxml具有大量的模块集，在本节中，我们将学习使用大部分功能的示例来探索lxml，然后再进行抓取任务。这些示例旨在进行提取活动，而不是开发。
- en: Example 1 – reading XML from file and traversing through its elements
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例1 - 从文件中读取XML并遍历其元素
- en: 'In this example, we will be reading the XML content available from the `food.xml` file.
    We will use XML content:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将读取`food.xml`文件中可用的XML内容。我们将使用XML内容：
- en: '[PRE38]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The XML response obtained from the preceding code needs to be parsed and traversed
    using `lxml.etree.XML()`. The `XML()` function parses the XML document and returns
    the `menus` root node, in this case. Please refer to [https://lxml.de/api/lxml.etree-module.html](https://lxml.de/api/lxml.etree-module.html)
    for more detailed information on `lxml.etree`:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中获得的XML响应需要使用`lxml.etree.XML()`进行解析和遍历。`XML()`函数解析XML文档并返回`menus`根节点，在这种情况下。有关`lxml.etree`的更详细信息，请参阅[https://lxml.de/api/lxml.etree-module.html](https://lxml.de/api/lxml.etree-module.html)：
- en: '[PRE39]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The functions `fromstring()` and `parse()` functions, found in the preceding
    code, also provide content to a default or chosen parser used by `lxml.etree`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中找到的`fromstring()`和`parse()`函数也提供了内容给`lxml.etree`使用的默认或选择的解析器。
- en: A number of parsers are provided by lxml (XMLParser and HTMLParser) and the
    default one used in code can be found using `>>> etree.get_default_parser()`.
    In the preceding case, it results in `<lxml.etree.XMLParser>`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s verify `tree` received after parsing:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The preceding two statements confirm that `tree` is an XML root element of the
    `lxml.etree._Element` type. For traversing through all elements inside a tree,
    tree iteration can be used, which results in elements in their found order.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'Tree iteration is performed using the `iter()` function*.* The elements'' tag
    name can be accessed using the element property, `tag`; similarly, elements''
    text can be accessed by the `text` property, as shown in the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The preceding tree iteration will result in the following output:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We, too, can pass child elements as an argument to the tree iterator (`price`
    and `name`) to obtain selected element-based responses. After passing the child
    element to `tree.iter()`*,* we can obtain `Tag` and `Text` or `Content` child
    elements using `element.tag` and `element.text`, respectively, as shown in the
    following code:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Also to be noted is that the `food.xml` file has been opened in `rb` mode and
    not in `r` mode. While dealing with local file-based content and files having
    encoding declarations, such as `<?xml version="1.0" encoding="UTF-8"?>`*,* there''s
    a possibility of encountering the error as `ValueError: Unicode strings with encoding
    declaration are not supported. Please use bytes input or XML fragments without
    declaration`***.*** Encoding/decoding the content might solve the issue mentioned,
    which is also based on the file mode.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'To deal with the preceding condition or reading the content from file, HTTP
    URL, or FTP, `parse()` is a really effective approach. It uses the default parser
    unless specified; one is supplied to it as an extra argument. The following code
    demonstrates the use of the `parse()` function, which is being iterated for the
    element name to obtain its text:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The preceding code results in the following output: `Butter Milk with Vanilla`,
    `Fish and Chips`, and so on, which are obtained from the `name` element and from
    the `food.xml` file:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'A multiple-tree element can also be iterated, as seen here:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Example 2 – reading HTML documents using lxml.html
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will be using the `lxml.html` module to traverse through
    the elements from [http://httpbin.org/forms/post](http://httpbin.org/forms/post):'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We are using `parse()` from `lxml.html` to load the given URL content. `parse()`
    acts similarly to `lxml.etree` but, in this case, `root` obtained is of the HTML
    type. The `getroot()` method returns the document root. The object type can be
    compared for `root` and `tree`, as shown in the preceding code. We are interested
    in `root` or HTMLElement for this example. The content parsed as `root` is shown
    in the following screenshot:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/59036331-0920-4468-84a4-9a59392938a4.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
- en: 'Page source: http://httpbin.org/forms/post'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: 'HTMLElement `root` has various properties, as listed here:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s find `<p>` from `root`; `find()` can be used to locate the first element
    by the path. Text can be retrieved using the `text_content()` function. The `findtext()`
    function can also be used for similar cases, as shown here:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'As we can see in the following code*,* `findall()` is used to find and iterate
    through all of the elements in `root`:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The preceding code lists the text from finding all `p` tags, as seen here:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The HTMLElement `root` also supports XPath and CSSSelect:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This will result in the output seen here:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'CSSSelect translates CSS selectors into XPath expressions and is used with
    a related object:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following code demonstrates the HTML `<form>` element being explored for
    its attributes and properties. We are targeting the `<form>` element first, which
    is found in `root`, that is, `<form method="post" action="/post">`:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As we can see from the preceding code, outputs are displayed as in-line comments:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`action` returns the URL value for the `key` attribute, `action`. The URL obtained
    is actually a link that will process the information submitted or options chosen.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`items()` returns the list of tuples containing the element''s key and value.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys()` returns the list of element keys.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method` returns the value for the attribute method, that is, HTTP request
    or HTTP methods. For more information on HTTP methods, please refer to [Chapter
    1](af7787bb-7fcf-4101-8680-9bad14bf22e1.xhtml), *Web Scraping Fundamentals*, the *Understanding
    web development and technologies* section.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example 3 – reading and parsing HTML for retrieving HTML form type element attributes
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will be reading HTML from the [http://httpbin.org/forms/post](http://httpbin.org/forms/post) URL,
    which contains HTML-based form elements. Form elements have various predefined
    attributes such as type, value, and name and can exist with manual attributes.
    In the preceding examples, we tried to implement various functions—XPath and CSSSelect—to
    retrieve content from the desired element.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will try to collect the attributes and their values found in HTML-form
    elements:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In the preceding code, the `response.text` and a `str` type object is obtained
    for the given URL. The `fromstring()` function parses the provided string object
    and returns the root node or the HTMLElement `tree` type.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are iterating the `input` element or `<input...>` and are
    looking to identify the attributes each input possesses.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code results in the output shown here:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'There are a number of functions and properties used with the `<input>` element
    in the code resulting from the output. Listed in the following in some of the
    code used in the example with an explanation:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '`element.tag`: This r'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: eturns the element `tag` name (for example, `input`).
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`element.values()`: The attributes of HTML form element exist as a `key:value`
    pair. The `value` attribute holds the exact data for the particular element. `values()`
    returns the `value` attribute for the chosen element in the `List` object.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`element.attrib`: `attrib` returns a `Dict` type object (dictionary) with a `key:value`
    pair.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`element.items()`: `items()` returns a `List` object with a tuple possessing
    a key and value.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`element.keys()`: Similar to'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`items()`, `keys()` returns the attributes `key` in the `List` object.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a general overview on lxml and its features explained through the preceding
    examples, we will now perform a few web scraping tasks.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Web scraping using lxml
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will utilize most of the techniques and concepts learned
    throughout the chapters so far and implement some scraping tasks.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: For the task ahead, we will first select the URLs required. In this case, it
    will be [http://books.toscrape.com/](http://books.toscrape.com/), but by targeting
    a music category, which is [http://books.toscrape.com/catalogue/category/books/music_14/index.html](http://books.toscrape.com/catalogue/category/books/music_14/index.html).
    With the chosen target URL, its time now to explore the web page and identify
    the content that we are willing to extract.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: We are willing to collect certain information such as the title, price, availability,
    `imageUrl`, and rating found for each individual item (that is, the `Article`
    element) listed in the page. We will attempt different techniques using lxml and
    XPath to scrape data from single and multiple pages, plus the use of CSS selectors.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Regarding element identification, XPath, CSS selectors and using DevTools, please
    refer to the *Using web browser developer tools for accessing web content* section.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – extracting selected data from a single page using lxml.html.xpath
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use XPath to collect information from the provided
    URL and use lxml features.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, a `musicUrl` string object contains a link to the page.
    `musicUrl` is parsed using the `parse()` function, which results in the `doc`
    and `lxml.etree.ElementTree` objects:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，`musicUrl`字符串对象包含一个指向页面的链接。`musicUrl`使用`parse()`函数进行解析，结果是`doc`和`lxml.etree.ElementTree`对象：
- en: '[PRE58]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We now have an ElementTree `doc` available; we will be collecting the XPath
    expressions for the chosen fields such as title and price, found on the `musicUrl`
    page. For generating XPath expressions, please refer to the *XPath and CSS selectors
    using DevTools* section:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个可用的ElementTree `doc`；我们将收集`musicUrl`页面上找到的标题和价格等字段的XPath表达式。有关生成XPath表达式，请参考*使用DevTools的XPath和CSS选择器*部分。
- en: '[PRE59]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The XPath for the preceding `articles` posseses all of the fields that are available
    inside  `<article>`, such as `title`, `price`, `availability`, `imageUrl`, and
    `starRating`. The `articles` field is an expression of a type of parent element
    with child elements. Also, individual XPath expressions for child elements are
    also declared, such as the `title` field, that is, `title = articles.xpath("//h3/a/text()")`*.*
    We can notice the use of `articles` in the expression.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`articles`的XPath包含了`<article>`内所有可用字段，例如`title`、`price`、`availability`、`imageUrl`和`starRating`。`articles`字段是一种具有子元素的父元素的表达式类型。此外，还声明了子元素的单独XPath表达式，例如`title`字段，即`title
    = articles.xpath("//h3/a/text()")`。我们可以注意到表达式中使用了`articles`。
- en: It is also to be noticed in child expressions that element attributes or key
    names such as `class` or `src` can also be used as `@class` and `@src`, respectively.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，在子表达式中，元素属性或键名，如`class`或`src`也可以分别使用`@class`和`@src`。
- en: 'Now that the individual expressions have been set up, we can print the items
    that collect all of the found information for available expressions and return
    those in the Python list. The cleaning and formatting for data received has also
    been done with the `map()`, `replace()`, and `strip()` Python functions and Lambda
    operator, as seen in the following code:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦设置了单独的表达式，我们就可以打印收集到的所有表达式的信息，并将其返回到Python列表中。收到的数据也已经使用`map()`、`replace()`和`strip()`
    Python函数以及Lambda运算符进行了清理和格式化，如下面的代码所示：
- en: '[PRE60]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Collected or extracted data might require the additional task of cleaning, that
    is, removing unwanted characters, white spaces, and so on. It might also require
    formatting or transforming data into the desired format such as converting string
    date and time into numerical values, and so on. These two actions help to maintain
    some predefined or same-structured data.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 收集或提取的数据可能需要额外的清理任务，即删除不需要的字符、空格等。它可能还需要格式化或将数据转换为所需的格式，例如将字符串日期和时间转换为数值，等等。这两个操作有助于保持一些预定义或相同结构的数据。
- en: 'The final output for the preceding code is shown in the following screenshot:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的最终输出如下截图所示：
- en: '![](assets/12cb33b8-3a35-4e8d-aa7e-64ccc854f962.png)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/12cb33b8-3a35-4e8d-aa7e-64ccc854f962.png)
- en: Python lists with various data from the selected page
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 从所选页面获取各种数据的Python列表
- en: 'As we can see from the preceding screenshot, there is an individual collection
    of targeted data. Data collected in such a way can be merged into a single Python
    object as shown in the following code or can be written into external files such
    as CSV or JSON for further processing:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述截图中可以看出，有一个针对目标数据的单独收集。以这种方式收集的数据可以合并到单个Python对象中，如下面的代码所示，也可以写入外部文件，例如CSV或JSON，以进行进一步处理：
- en: '[PRE61]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '`dataSet` in the preceding code is generated using the `zip()` Python function.
    `zip()` collects individual indexes from all provided list objects and appends
    them as a tuple. The final output from `dataSet` has particular values for each
    `<article>`, as shown in the previous code.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的`dataSet`是使用`zip()` Python函数生成的。`zip()`收集所有提供的列表对象的单个索引，并将它们附加为元组。`dataSet`的最终输出对于每个`<article>`都有特定的值，就像前面的代码中所示的那样。
- en: Example 2 – looping with XPath and scraping data from multiple pages
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 - 使用XPath循环并从多个页面抓取数据
- en: In example 1, we tried the simple XPath-based technique for a URL with a limited
    number of results on a single page. In this case, we will be targeting a *food
    and drink* category, that is, [http://books.toscrape.com/catalogue/category/books/food-and-drink_33/index.html](http://books.toscrape.com/catalogue/category/books/food-and-drink_33/index.html),
    which has its content across pages. An XPath-based looping operation will be used
    in this example, which supports a more effective collection of data.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例1中，我们尝试了基于简单XPath的技术，用于单个页面上有限数量的结果的URL。在这种情况下，我们将针对*食品和饮料*类别进行操作，即[http://books.toscrape.com/catalogue/category/books/food-and-drink_33/index.html](http://books.toscrape.com/catalogue/category/books/food-and-drink_33/index.html)，该类别的内容跨页面存在。在本例中将使用基于XPath的循环操作，这支持更有效地收集数据。
- en: 'As we will be dealing with multiple pages, it''s good practice to check for
    a few individual page URLs that can be found in the browser while moving through
    the listed pages. Most of the time, it might contain some patterns that can solve
    the puzzle easily, as used in the following code:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将处理多个页面，因此最好的做法是在浏览器中查找一些单独页面的URL，以便在浏览列出的页面时找到这些URL。大多数情况下，它可能包含一些模式，可以轻松解决难题，就像以下代码中使用的那样：
- en: '[PRE62]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '`bookUrl` is the main URL we are interested in; it also contains the page link
    for the next page, which contains a pattern, as found in `pageUrl`, for example,
    `page-2.html`:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`bookUrl`是我们感兴趣的主要URL；它还包含下一页的页面链接，其中包含一个模式，如`pageUrl`中所找到的那样，例如`page-2.html`：'
- en: '[PRE63]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: An empty `dataSet` list is defined to hold data found from each article across
    pages.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了一个空的`dataSet`列表，用于保存跨页面找到的每篇文章的数据。
- en: 'An individual page URL is obtained by concatenating `pageUrl` with a page number,
    and `.html`. `totalPages` is found after calculating `totalArticles` and `perPageArticles`
    as traced from the page itself. `totalPages` obtained will give an exact loop
    count and is more manageable to apply in the loop (the `while` loop is found in
    the code):'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: As we can see in the previous code, `articles` is the major XPath expression
    used to loop for finding individual elements inside the `<article>` field. The
    expression should contain a certain condition that can be fulfilled to preform
    a loop; in this case, we identified that the `<article>` field exists inside of
    the `<ol><li>` element.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we can perform a loop with `li[position()>0]` that identifies each `<article>`
    field found inside `<li>` until it exists in `<ol>` with its traced position,
    that is, `articles = XPath("//*[@id=''default'']//ol/li[position()>0]")`:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Individual elements of the XPath expression are defined as the `titlePath`
    element, the `imagePath` element, and so on, targeting particular elements whose
    data is to be obtained. Finally, the expression set for articles is looped into
    the HTMLElement obtained for each page, that is, the `doc` element and collects
    the first occurrence of each `title` and `image` element and the other elements
    found. These collected data are appended to the `dataSet` field as a list with
    the cleaning and formatting done, which results in the output shown in the following
    screenshot:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/059c3514-4cf0-4d47-ae5e-c51f3cba78f3.png)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
- en: Output with paging information and dataSet contents
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: Example 3 – using lxml.cssselect to scrape content from a page
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS selectors have a broad range of query options as described in the *Introduction
    to XPath and CSS selector* section, and is often used as an easy alternative to
    XPath. In the two preceding examples, we explored the XPath to collect the desired
    information. In this example, we will be using `cssselect` from lxml to collect
    relevant data from a single page available on [https://developer.ibm.com/announcements/category/data-science/?fa=date%3ADESC&fb=](https://developer.ibm.com/announcements/category/data-science/?fa=date%3ADESC&fb=).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: 'To identify a CSS query, we can browse through the page source or use the DevTools.
    For more detail on using DevTools, refer to the *XPath and CSS selectors using
    DevTools* section. In this case, we are identifying and collecting CSS Query using
    DevTools, as shown in the following screenshot:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f06876ef-04f3-4456-aa83-13e9d499b882.png)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
- en: Using DevTools and selecting selector from https://developer.ibm.com/announcements
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding screenshot, we can see that the individual announcements
    are a block identified by `a.ibm--card__block_link` found inside `div.ibm--card`,
    which possesses HTML elements with classes, such as `ibm--card__body`, and `ibm--card__type`.
    The CSS selector is copied using the described process and will result in the
    following list for `a.ibm--card__block_link` and `div.ibm--card__body`, respectively:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '`#content > div > div.code_main > div > div.cpt-content > div > div.bx--grid.no-pad.cpt--item__row
    > div:nth-child(1) > div:nth-child(1) > div > a`'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`#content > div > div.code_main > div > div.cpt-content > div > div.bx--grid.no-pad.cpt--item__row
    > div:nth-child(1) > div:nth-child(1) > div > a > div.ibm--card__body`'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s deploy the preceding concept using Python code, as shown in the following
    snippet:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The required Python library and URLs are declared and the page content `url_get`
    is parsed with `lxml.html`. With `lxml.html.HTMLElement` obtained, we can now
    select and navigate to the desired element in the tree with the XPath or CSS selector:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`articles` is a defined main CSS query and is looped for all available `articles`
    found in the page as `article`. Each article has different elements for type,
    date, title, category, and so on. Element data or attributes are collected using
    `text`, `text_content()`, and `get()`. `cssselect` returns the Python list objects,
    hence, indexing, such as `[0]`, is used to collect particular element content.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '`category` in the preceding code doesn''t have any indexing, as it contains
    a multiple `<span>` element whose value is being extracted using a list comprehension
    technique, while appending or using indexing as shown in the comments. Output
    obtained for the code is shown in the following screenshot. Minor cleaning of
    data has been attempted, but the final list still contains the obtained raw data:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3cfdddb1-72ed-4663-8f8e-bce9310f1c49.png)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
- en: Output from list announcements obtained using lxml.cssselectIt's also to be
    noted that CSS selector queries copied or obtained using DevTools and used in
    the example code seem to be different in expression and length. DevTools-provided
    queries contain details and linked expressions from the parent element found for
    all chosen elements. In code, we have used the CSS query for only the particular
    elements identified.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Element identification, DOM-based navigation, using browser-based developer
    tools, deploying data-extraction techniques, and an overview on XPath and CSS
    selectors, plus the use of lxml in a Python library, were the main topics explored
    in this chapter.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: We have also explored various examples using lxml, implementing different techniques
    plus library features to deal with the element and ElementTree. Finally, web Scraping
    techniques were explored through examples focusing on different situations that
    might arise in real cases.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn more about web scraping techniques and some
    new Python libraries deploying these techniques.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DOM: [https://dom.spec.whatwg.org/](https://dom.spec.whatwg.org/)
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XPath: [https://www.w3.org/TR/xpath/](https://www.w3.org/TR/xpath/), [https://www.w3.org/TR/2017/REC-xpath-31-20170321/](https://www.w3.org/TR/2017/REC-xpath-31-20170321/)
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML DOM: [https://www.w3schools.com/xml/dom_intro.asp](https://www.w3schools.com/xml/dom_intro.asp)
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XPath introduction: [https://www.w3schools.com/xml/xpath_intro.asp](https://www.w3schools.com/xml/xpath_intro.asp)
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XPath tester: [https://freeformatter.com/xpath-tester.html](https://freeformatter.com/xpath-tester.html),
    [http://www.xpathtester.com/xslt](http://www.xpathtester.com/xslt), [https://codebeautify.org/Xpath-Tester](https://codebeautify.org/Xpath-Tester)
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XPath tutorial: [https://doc.scrapy.org/en/xpath-tutorial/topics/xpath-tutorial.html](https://doc.scrapy.org/en/xpath-tutorial/topics/xpath-tutorial.html)
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS Selector reference: [https://www.w3schools.com/cssref/css_selectors.asp](https://www.w3schools.com/cssref/css_selectors.asp)
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS pseudo class and elements: [https://www.w3schools.com/css/css_pseudo_elements.asp](https://www.w3schools.com/css/css_pseudo_elements.asp)
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS information: [http://www.css3.info/](http://www.css3.info/), [https://developer.mozilla.org/en-US/docs/Web/CSS](https://developer.mozilla.org/en-US/docs/Web/CSS)
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS query parser: [https://try.jsoup.org/](https://try.jsoup.org/)
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS Selector to XPath: [https://css-selector-to-xpath.appspot.com](https://css-selector-to-xpath.appspot.com)
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ElementTree overview: [http://effbot.org/zone/element-index.htm](http://effbot.org/zone/element-index.htm)
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
