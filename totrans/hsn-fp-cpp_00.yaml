- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to a hands-on tour of functional programming in C++! This book is about
    an old idea, that is, functional programming, and a classic programming language,
    that is, C++, finally uniting forces.
  prefs: []
  type: TYPE_NORMAL
- en: Functional programming has been around since the 1950s; however, due to its
    mathematical underpinnings, it has been of limited interest to mainstream software
    development for many years. With the advent of multicore CPUs and big data leading
    to the need for parallelization, and with programming language designers becoming
    more interested in immutability and lambdas, functional programming concepts have
    been gradually introduced in all major programming languages, including C#, Java,
    PHP, JavaScript, Python, and Ruby. C++ has never been far from functional programming,
    with features such as function pointers, functors, and the algorithms from STL
    allowing many programmers to take advantage of certain constructs. However, starting
    with C++ 11, we see the introduction of lambdas, and of higher-order functions
    such as `all_of`, `any_of`, and `none_of`. In C++ 17, we see more progress, with
    the introduction of `map` (implemented as `transform`). Additionally, the features
    coming in C++ 20 are very exciting; for example, the ranges library, which allows
    composable, lightweight, and lazily evaluated transformations, is a great addition
    to the standard.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to what you will learn from this book. Whether you are a seasoned
    programmer or a C++ beginner, you will learn about functional programming concepts,
    how to use them in C++, and why they are useful for managing and improving existing
    code bases. Every idea will be showcased with clear code samples and verified
    with unit tests; we highly encourage you to take these code samples and play around
    with them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Special effort has been put into ensuring that every idea is presented in a
    clear manner, and that a flow of understanding is followed; in other words, we've
    been looking at optimizing your learning experience. In order to do that, we have
    decided to exaggerate the use of certain constructs. For example, the sample code
    uses a lot of lambdas since we wanted to show how they can be used. We believe
    that the best way to learn functional programming is to fully dive into the world
    of lambdas and operations on lambdas. We expect the reader to separate this approach
    from a production approach; in fact, I advise you to experiment with these concepts
    on your own, then on small parts of production code, and only then use those that
    are promising to their full extent. To support this goal, we have documented multiple
    ways of using operations on functions so that you will possess enough tools to
    use in various contexts.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that we made a calculated decision to present the C++
    17 standard in most of the book. We don't use external libraries (other than the
    unit testing library), and we stick to the standard features of the language and
    of **Standard Template Library** (**STL**). The focus is on functional programming
    concepts and on how to implement them using a minimalistic approach. The only
    exception is the last section of the book that looks at the future of C++ and
    STL. We did this because we believe that it's more important for you to understand
    the concepts and be ready to apply them with minimal tooling than to provide a
    multitude of implementation options. This has left out the ranges library for
    most of the book, the Boost library support for functional programming, and, most
    likely, other useful libraries that can extend or simplify the code. I will leave
    it to the reader to try them out for themselves and let us know how they worked.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for programmers who already know C++ (including the language syntax,
    STL containers, and elements of templates) and who want to add more tools to their
    toolkit. You don't need to know anything about functional programming to read
    the book; we took care to explain every idea in a clear and practical manner.
  prefs: []
  type: TYPE_NORMAL
- en: You do, however, need to be curious about the set of tools coming from the world
    of functional programming. A hefty dose of experimentation will help you to make
    the most of this book, so I encourage you to play around with the code and to
    let us know what you find.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](04c66ecc-bfe4-4e93-a32f-c2e0a51a9fd9.xhtml), *An Introduction to
    Functional Programming*, introduces you to the fundamental ideas of functional
    programming.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](79295589-e861-4722-96a5-d131b429aac0.xhtml), *Understanding Pure
    Functions*, teaches you the fundamental building blocks of functional programming,
    functions that focus on immutability, and how to write them in C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](c4cdce72-828b-4cb8-b904-481315999c60.xhtml), *Deep Dive into Lambdas*,
    focuses on lambdas and how to write them in C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](d361a3f0-acc7-4e77-9387-2b563fac2f09.xhtml), *The Idea of Functional
    Composition*, looks at how to compose functions with a higher order operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](daf883d3-a1ab-4969-8c81-7d3f33ed1934.xhtml), *Partial Application
    and Currying*, teaches you how to use two fundamental operations on functions—partial
    application and currying in C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](0b87d535-3c52-44cd-a6df-ba6d03fc37cf.xhtml), *Thinking in Functions –
    from Data in to Data out*, introduces you to another way of organizing your code,
    enabling function-centric design.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](9d86d296-6caf-4b65-9020-4307c85f3acd.xhtml), *Removing Duplication
    with Functional Operations*, is an overview of the **Don''t Repeat Yourself** (**DRY**)
    principle, the types of code duplication and code similarities, and how to write
    more DRY code using functional operations such as composition, partial application,
    and currying.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](2adc86fe-d4df-4b55-b8bf-bb1319faeba6.xhtml), *Improving Cohesion
    Using Classes*, demonstrates how functions can evolve into classes and how classes
    can be turned into functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](f3b31186-dfef-496e-bc6e-82a55eeb0cba.xhtml), *Test-Driven Development
    for Functional Programming*, looks at how to use **Test-Driven Development** (**TDD**)
    with functional programming and at how immutability and pure functions simplify
    tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance Optimization*,
    dives into specific methods of how to optimize the performance of function-centric
    design, including memoization, tail recursion optimization, and parallel execution.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml), *Property-Based Testing*,
    looks at how functional programming enables a new paradigm of writing automated
    tests that enhances example-based testing with data generation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](3b3ccc61-d5b6-4e3c-b142-cf32355f6229.xhtml), *Refactoring to and
    through Pure Functions*, explains how any existing code can be refactored to pure
    functions and then back into classes with minimal risk. It also looks at classic
    design patterns and a few functional design patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](03d5f0b0-bfc9-4526-992e-8e4f23cec30b.xhtml), *Immutability and
    Architecture – Event Sourcing*, explains that immutability can move at the data
    storage level, looks at how to use event sourcing, and discusses its advantages
    and disadvantages.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](1edd5963-94e4-48dc-830f-8f201b3a39c7.xhtml), *Lazy Evaluation
    Using the Ranges Library*, dives into the awesome ranges library and demonstrates
    how to use it in C++ 17 and C++ 20.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](f33810ab-9028-4f3c-b457-0e8039d8f52c.xhtml), *STL Support and
    Proposals*, looks at STL functional features in the C++ 17 standard and at a few
    interesting additions to C++ 20.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](f621e2cb-9b72-475b-9694-fc1b308a05ce.xhtml), *Standard Language
    Support and Proposals*, closes the book with an overview of the fundamental building
    blocks of functional programming and the various options for using them in the
    C++ 17 standard.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes a good knowledge of the C++ syntax and of basic STL containers. However,
    it does not assume any knowledge of functional programming, functional constructs,
    category theory, or math. We've gone to great lengths to ensure that each concept
    is explained clearly and from a practical, programmer-centric perspective.
  prefs: []
  type: TYPE_NORMAL
- en: We strongly encourage you to play around with the code after reading the chapters
    or try to replicate the code from the samples after finishing a chapter. Even
    better, pick a coding kata (for example, from [http://codingdojo.org/kata/](http://codingdojo.org/kata/))
    problem and try to solve it using the techniques from this book. You will learn
    much more by combining reading with toying with code than by simply reading the
    theory on its own.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the content in this book requires you to think differently about the
    code structure and, sometimes, this will be contrary to what you are used to.
    However, we see functional programming as another tool in your toolkit; it doesn't
    contradict what you already know, instead, it just provides you with additional
    instruments to use with your production code. When and how you use them is your
    decision.
  prefs: []
  type: TYPE_NORMAL
- en: To run the code samples from the book, you will need `g++` and the `make` command.
    Alternatively, you can run the samples using any compiler that supports C++ 17,
    but you will need to manually run each file. All the code samples compile and
    automatically run with `make` or `make [specific example]`, and provide the output
    on the console with a few caveats that follow.
  prefs: []
  type: TYPE_NORMAL
- en: The memory optimization samples from [Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance
    Optimization*, need to run with `make allMemoryLogs` or a specific target, require
    a keyboard press after each target run, and will create log files in the `out/`
    folder, showing the evolution of allocated memory for the process. This will only
    work on Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: The reactive programming sample from [Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance
    Optimization* and requires user input. Just input numbers and the program will
    compute in a reactive way whether they are prime or not. The program should receive
    inputs even while computing. The code samples from [Chapter 16](f621e2cb-9b72-475b-9694-fc1b308a05ce.xhtml), *Standard
    Language Support and Proposals*, require a compiler that supports C++20; at this
    point, `g++-8` is used. You will need to install `g++-8` separately.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following link to see the code being executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2ZPw0KH](http://bit.ly/2ZPw0KH)'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "In STL, it''s implemented with the `find_if` function. Let''s
    see it in action."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packt.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
