- en: Efficiently Bootstrapping React Applications with Create React App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first React tool you''ll learn about in this book is *Create React App*.
    It is a command-line utility that helps you, surprisingly, create a React application.
    This might sound like something that you shouldn''t need much help doing, but
    when you use this tool, there''s a lot of configuration that you no longer have
    to think about. In this chapter, you''ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the *Create React App* tool on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstraping the creation of your React app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What packages are installed when you create a new application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The directory organization and files created with your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Create React App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is installing *Create React App*, which is an npm package: `create-react-app`.
    This package should be installed globally because it installs a command on your
    system that''s used to create your React projects. In other words, `create-react-app`
    isn''t actually part of your React project—it''s used to initialize your React
    project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how you can install *Create React App* globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the `-g` flag in the command—this makes sure that the `create-react-app`
    command is installed globally. Once the installation is complete, you can make
    sure that the command is good to go by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now you're ready to use this tool to create your first React app!
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll spend the remainder of the chapter creating your first React application
    with *Create React App*. Don't worry, this is super easy to do, so it'll be a
    short chapter. The goal of *Create React App* is to start building features for
    your application as soon as possible. You cannot do this if you're sinking time
    into configuring your system.
  prefs: []
  type: TYPE_NORMAL
- en: '*Create React App* provides what''s called a **zero configuration app**. This
    means that we supply the name of the app, then it''ll go install the dependencies
    that we need, and create the boilerplate directory structure and files for us.
    Let''s get started.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a project name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The only configuration value that you need to supply to *Create React App*
    so that it can bootstrap your project is the name. This is specified as an argument
    to the `create-react-app` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a `my-react-app` directory in your current directory, if it
    doesn''t already exist. If it already exists, the directory will be used. This
    is where you''ll find everything to do with your application. Once the directory
    is created, it installs package dependencies and creates project directories and
    files. Here''s a shortened version of what the `create-react-app` command output
    might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This output shows you a number of interesting things. First, it shows which
    things were installed. Second, it shows you the commands available for you to
    run in your project. You'll learn how to use each of these commands throughout
    this book, starting with the next chapter. For now, let's take a look at the project
    that you just created and see what it contains.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic dependency handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the dependencies that were installed as part of the bootstrapping
    process. You can list your projects packages by running `npm ls --depth=0`. The
    `--depth=0` option means that you only want to see the top-level dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There isn't much here, just the two core React libraries that you need, and
    something called `react-scripts`. This latter package contains the scripts that
    you'll want to run with this project such as starting the development server and
    making a production build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s look at the `package.json` file that was created by *Create React
    App*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here is where dependencies are tracked, so that you can install your app on
    different machines that don't have *Create React App* on them. You can see that
    the `dependencies` section matches the output of the `npm ls --depth=0` command.
    The `scripts` section specifies the commands available to run with this project.
    These are all `react-scripts` commands—`react-scripts` is installed as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: One of the more powerful aspects of *Create React App* is that it simplifies
    this `package.json` configuration for you. Instead of having dozens of dependencies
    that you have to maintain yourself, you have less than a handful of dependencies.
    The `react-scripts` package handles the dynamic configuration aspect for you.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when you run a React development server, you typically have to
    spend a lot of time messing around with Webpack configuration and making sure
    that the appropriate Babel plugins are installed. Since `react-scripts` creates
    a standard configuration for these things on the fly, you don't have to worry
    about it. Instead, you can start writing application code write away.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `react-scripts` package also handles much of the dependencies that you
    would normally have to handle yourself. You can use `npm ls --depth=1` to get
    an idea of what dependencies this package takes care of for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Typically, you wouldn't interact with most of these packages in your application
    code. When you have to actively manage dependencies that you don't directly use,
    it can feel like a huge time sink. *Create React App* helps squash this feeling.
  prefs: []
  type: TYPE_NORMAL
- en: Directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you have an understanding of the dependencies that are installed
    as part of your project when you create it using *Create React App*. In addition
    to the dependencies, *Create React App* sets up some other boilerplate files and
    directories. Let's go over these quickly so that you can start coding in the following
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Top-level files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are only two files created in the top level of your application that
    you need to worry about:'
  prefs: []
  type: TYPE_NORMAL
- en: '`README.md`: This Markdown file is used to describe the project. It''s a great
    place to explain why your project exists and how people can get started with it,
    especially if you plan on making your app a GitHub project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This file is used to configure all aspects of distributing
    your application as an npm package. For example, this is where you can add new
    dependencies or remove obsolete dependencies. This file is key if you plan on
    publishing your app to the main npm registry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Create React App* creates a public directory for you with a few files in it.
    This is where static application assets go. It contains the following by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '`favion.ico`: This is the React logo that gets displayed in browser tabs. You''ll
    want to replace this with something representative of your application before
    you ship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`: This is the HTML file that''s served to browsers and the entry
    point of your React application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manifest.json`: This is used by some mobile operating systems when the application
    is added to the home screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `src` directory created by `create-react-app` is the most important part
    of your application. This is where any React components you create will live.
    Out of the box, this directory has some source files in it to get you on your
    way, though you''ll obviously replace the majority of them as you move forward.
    Here''s what you''ll find by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '`App.css`: This defines some simple CSS to style the `App` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.js`: This is the default component that renders the application HTML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.test.js`: This is a basic test for the `App` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.css`: This defines application-wide styles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.js`: This is the entry point into your application—renders the `App`
    component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logo.svg`: An animated React logo that''s rendered by the `App` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`registerServiceWorker.js`: In production builds, this enables loading components
    from an offline cache'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two benefits to having these default source files created for you.
    First, you can quickly start the application to make sure everything is working
    and that you didn't make any basic mistakes. Second, it sets a basic pattern for
    you to follow with your components. Throughout this book, you'll see how applying
    patterns to components actually aids with tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install the *Create React App* tool on your
    system. *Create React App* is the tool of choice for bootstrapping modern React
    applications. The goal of *Create React App* is to have developers go from nothing
    to creating React components in minimal time.
  prefs: []
  type: TYPE_NORMAL
- en: Once this tool was installed, you created your first React app using it. The
    only piece of configuration you had to provide was the application name. Once
    the tool finished installing dependencies and creating boilerplate files and directories,
    you were ready to start writing code.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we looked at `react-scripts` and the dependencies that this package takes
    care of for you. You were then taken on a whirlwind tour of the overall structure
    of the application that was created for you.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we'll start developing some React components. To do
    this, we'll fire up the development server. You'll also learn how to get up and
    running with a `create-react-app` development environment.
  prefs: []
  type: TYPE_NORMAL
