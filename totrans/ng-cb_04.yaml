- en: '*Chapter 4*: Understanding Angular Animations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about working with animations in Angular. You'll
    learn about multi-state animations, staggering animations, keyframe animations,
    and how to implement animations for switching routes in your Angular apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the recipes that we''re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first two-state Angular animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with multi-state animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating complex Angular animations using keyframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating lists in Angular using stagger animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using animation callbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic route animations in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex route animations in Angular using keyframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the recipes in this chapter, make sure you have **Git** and **Node.js**
    installed on your machine. You also need to have the `@angular/cli` package installed,
    which you can install by using `npm install -g @angular/cli` from your terminal.
    The code for this chapter can be found at [https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter04](https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first two-state Angular animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll create a basic two-state Angular animation using a fading
    effect. We'll start with a fresh Angular project with some UI already built into
    it, enable animations within the app, and then move toward creating our first
    animation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter04/start_here/ng-basic-animation`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab and you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – ng-basic-animation app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.1_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – ng-basic-animation app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, we will move on to the steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an app that doesn''t have Angular animations configured at all. So,
    we''ll begin by enabling Angular animations. Then, we''ll replace the CSS animations
    with Angular animations. Let''s continue with the steps as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll inject `BrowserAnimationsModule` from the `@angular/platform-browser/animations`
    package in our `app.module.ts`, so we can use animations within our Angular applications.
    We''ll also import `BrowserAnimationsModule` in the `imports` array as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll remove the CSS style transitions so we can see the full button
    (icon and text) by default for both the Facebook and Twitter buttons. Let''s remove
    the styles from `app.component.scss` as highlighted in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also remove the `&--active` selector under `&__btn` in the `app.component.scss`
    file, and move the styles for `[class^="icon-"], [class*=" icon-"]` inside the
    `&__btn` selector. This is done so that there is a right-hand margin for all icons.
    Your code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the animation to be created to the template now. We''ll apply the
    animation to the text elements of both buttons. Modify `app.component.html` as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, we'll start creating our animation named `socialBtnText`, and for that,
    we'll import some functions from the `@angular/animations` package in our `app.component.ts`
    so we can create the two states for the button text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following imports to your `app.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add an animation named `socialBtnText` using the `trigger` method
    to the `animations` array in the `AppComponent` metadata as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll create the two states named `btn-active-text` and `btn-inactive-text`.
    We''ll set `width` and `visibility` for these states as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the states configured, we can start writing the transitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first implement the `''btn-inactive-text => btn-active-text''` transition,
    which triggers upon clicking either of the buttons. Since this transition is going
    to be displaying the text, we''ll first increase the `width` value of the text
    element, and then we''ll set the text to `visible`. The content in the `animations[]`
    array should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You should see a smooth animation now for the button's active state. Let's implement
    the inactive state in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll implement the `''btn-active-text => btn-inactive-text''` transition.
    This should turn the visibility to `''hidden''` and set the width back to `''0px''`
    again. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll notice that there''s a slight jerk/lag when the button becomes inactive.
    That''s because the animation for width triggers first, and then it triggers the
    animation for `visibility: ''hidden''`. Therefore, we see both of them happening
    in sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To have both animations work together, we''ll use the `group` method from the
    `@angular/animations` package. We''ll group together our `animate()` methods for
    the transition. The update in the `app.components.ts` file should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we want this to be really quick, the time we''ll set for the `animate()`
    methods for the `''btn-active-text => btn-inactive-text''` transition will be
    zero seconds (`0s`). Change it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Toward the end, we can remove the extra `margin-right` from the button icon
    when the button is not active. We'll do it by moving the code for the `[class^="icon-"],
    [class*=" icon-"]` selector inside another selector named `&--active` so it only
    applies when the button is active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the following styles in the `&__btn` selector in the `app.component.scss`
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Great! You now have implemented some good-looking animation buttons in the app.
    See the next section to understand how the recipe works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular provides its own Animation API that allows you to animate any property
    that the CSS transitions work on. The benefit is that you can configure them dynamically
    based on the requirements. We first used the `trigger` method to register the
    animation with the states and transitions. We then defined those states and transitions
    using the `state` and `transition` methods respectively. And we also saw how to
    run animations in parallel using the `group` method. If we didn't group the animations,
    they'd run sequentially. Finally, we applied the states using some flags in the
    component to reflect the changes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might have noticed that the Twitter button somehow looks bigger than it
    should be. This is because we have the width of the text set to a constant `80px`
    for our states and animations so far. While this looks good for the Facebook button,
    it doesn''t look good for the Twitter one. So, we can actually make it configurable
    by providing two different transitions based on different widths for the buttons.
    Here''s what you''ll do:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file in the app folder and name it `animations.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the code from the animations array in the `app.component.ts` file to this
    new file; it should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, we''ll add the transitions as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll use this `buttonTextAnimation` method for both our Facebook and
    Twitter buttons in `app.component.ts` as follows. Notice that we''ll create two
    different animations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll use the respective animations for the Facebook and Twitter
    buttons in `app.component.html` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animations in Angular ([https://angular.io/guide/animations](https://angular.io/guide/animations))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Angular Animations Explained with Examples* ([https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with multi-state animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll work with Angular animations containing multiple states.
    This means that we'll work with more than two states for a particular item. We'll
    be using the same Facebook and Twitter cards example for this recipe as well.
    But we'll configure the state of the cards for their state before they appear
    on screen, when they're on screen, and when they're about to disappear from the
    screen again.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter04/start_here/ng-multi-state-animations`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see the app as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – ng-multi-state-animations app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.2_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – ng-multi-state-animations app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let's look at the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We already have a working app that has a single animation built for the reach
    of social cards. When you tap either the Facebook or Twitter button, you''ll see
    the respective card appearing with a slide-in animation from left to right. To
    keep the recipe simple, we''ll implement two more states and animations for when
    the user moves the mouse cursor on the card and when the user moves away from
    the card. Let''s add the relevant code in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start with adding two `@HostListener` instances to `FbCardComponent`
    in the `components/fb-card/fb-card.component.ts` file, one for the `mouseenter`
    event on the card and one for the `mouseleave` event. We''ll name the states `hovered`
    and `active` respectively. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll do the same for `TwitterCardComponent` in the `twitter-card-component.ts`
    file. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There should be no visual change so far since we're only updating the `cardState`
    variable to have the hover and active states. We haven't defined the transitions
    yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll now define our state for when the user''s cursor enters the card, that
    is, the `mouseenter` event. The state is called `hovered` and should look as follows
    in the `animation.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you refresh the app now, tap either the Facebook or Twitter button, and hover
    the cursor over the card, you'll see the card's UI changing. That's because we
    changed the state to `hovered`. However, there's no animation yet. Let's add one
    in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add the `active => hovered` transition now in the `animations.ts` file
    so that we can smoothly navigate from `active` to the `hovered` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You should now see the smooth transition on the `mouseenter` event if you refresh
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we''ll add the final transition, `hovered => active`, so when the
    user leaves the card, we revert to the active state with a smooth animation. The
    code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Ta-da! You now know how to implement different states and different animations
    on a single element using `@angular/animations`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Angular uses triggers for understanding what state the animation is in. An
    example syntax looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`expression` can be a valid JavaScript expression, and it evaluates to the
    name of the state. In our case, we bind it to the `cardState` property, which
    either contains `''active''` or `''hovered''`. Therefore, we end up with three
    transitions for our cards:'
  prefs: []
  type: TYPE_NORMAL
- en: '`void => active` (when the element is added to the DOM and is rendered)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`active => hovered` (when the `mouseenter` event triggers on the card)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hovered => active` (when the `mouseleave` event triggers on the card)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Triggering the animation* ([https://angular.io/guide/animations#triggering-the-animation](https://angular.io/guide/animations#triggering-the-animation))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reusable* *animations* ([https://angular.io/guide/reusable-animations](https://angular.io/guide/reusable-animations))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating complex Angular animations using keyframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you already know about Angular animations from the previous recipes, you
    might be thinking, "Well, that's easy enough." Well, time to level up your animation
    skills in this recipe. You'll create a complex Angular animation using keyframes
    in this recipe to get started with writing some advanced animations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter04/start_here/animations-using-keyframes`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab and you should see the app as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – animations-using-keyframes app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.3_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – animations-using-keyframes app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let's look at the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an app right now that has a single transition, that is, `void => *`,
    which triggers when the element is rendered on DOM. Right now, the animation is
    pretty simple and uses the `animate` function to define the animation. We''ll
    first convert it to keyframes, and then we''ll make it a bit complex:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with adding the `keyframes` method from `@angular/animations`
    to the `animations.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll convert the single style animation to keyframes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that in this code block, we''ve removed the `state(''active'', …)` part
    because we don''t need it anymore. Also, we moved the `style({transform: ''translateX(-200px)'',
    opacity: 0})` inside the `keyframes` array because it is now part of the keyframes
    animation itself. If you refresh the app now and try it, you''ll still see the
    same animation as before. But now we have it using `keyframes`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s start adding some complex animations. Let''s start the animation
    with a scaled-down card by adding `scale3d` to the `transform` property of `style`
    at `offset: 0`. We''ll also increase the animation time to `1.5s`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You should now see that the card animation starts with a small card that slides
    from the left and moves toward the right, increasing in size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll implement a zig-zag-ish animation for the appearance of the card
    instead of the slide-in animation. Let''s add the following keyframe elements
    to the `keyframes` array to add a bumpy effect to our animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you refresh the app and tap any of the buttons, you should see the card
    bumping to the right wall, and then to the left wall of the card, before returning
    to the normal state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Card bumping to right and then the left wall'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.04_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Card bumping to right and then the left wall
  prefs: []
  type: TYPE_NORMAL
- en: 'As the last step, we''ll spin the card clockwise before it returns to its original
    position. For that, we''ll use `offset: 0.75`, using the `rotate` method with
    some additional angles. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! You now know how to implement complex animations in Angular using the
    `keyframes` method from the `@angular/common` package. See in the next section
    how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For complex animations in Angular, the `keyframes` method is a really good way
    of defining different offsets of the animation throughout its journey. We can
    define the offsets using the `styles` method, which takes `AnimationStyleMetadata`
    as a parameter. `AnimationStyleMetadata` also allows us to pass the `offset` property,
    which can have a value between `0` and `1`. Thus, we can define different styles
    for different offsets to create advanced animations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Animations in Angular* ([https://angular.io/guide/animations](https://angular.io/guide/animations))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Angular Animations Explained with Examples* ([https://www.freecodecamp.org/news/angular-animations-explained-with-examples/](https://www.freecodecamp.org/news/angular-animations-explained-with-examples/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating lists in Angular using stagger animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No matter what web application you build today, you are going to implement some
    sort of list most likely. And to make those lists even better, why not implement
    an elegant animation with them? In this recipe, you'll learn how to animate lists
    in Angular using stagger animations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter04/start_here/animating-lists`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab. Log in to the app as an employee,
    and you should see the app as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – animating-lists app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.05_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – animating-lists app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let's see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have an app right now that has a list of bucket items. We need to animate
    the list using staggering animations. We'll be doing this step by step. I'm excited
    – are you?
  prefs: []
  type: TYPE_NORMAL
- en: 'Cool. We''ll go through the following steps for the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add `BrowserAnimationsModule` from the `@angular/platform-browser/animations`
    package in our `app.module.ts` so that we can enable animations for the app. The
    code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a file named `animations.ts` inside the `constants` folder and
    add the following code to register a basic list item animation named `listItemAnimation`
    with Angular:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `void => *` transition is for when the list item enters the
    view (or appears). The `* => void` transition is for when the item leaves the
    view (or disappears).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''ll add the animation to `BucketComponent` in the `app/shared/bucket/bucket.component.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Since we have the animation imported in the component, we can use it in the
    template now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the animation to the list item as follows in `bucket.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If you now refresh the app and add an item to the bucket list, you should see
    it appear with a fade-in effect. And if you delete an item, you should see it
    disappear with the animation as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One thing that you'll notice is that when you refresh the app, all the list
    items appear together simultaneously. We can, however, make them appear one by
    one, using `stagger` animations. We'll do that in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll modify `LIST_ITEM_ANIMATION` now to use the `stagger` method. This is
    because we can make each list item appear one after the other. First, we need
    to import the `stagger` method from `@angular/animations`, and then we need to
    wrap our `animate` methods within `stagger` methods. Update the `animations.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This, however, *will not work*. And that's because the `stagger` method can
    only be used within a `query` method. Therefore, we need to modify our code a
    bit to use the `query` methods in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Let's import the `query` method from `@angular/animations` and modify our code
    a bit so it can be used with the `stagger` method. We're going to make a couple
    of changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll rename the animation to `listAnimation` since the animation will now apply
    to the list instead of the individual list items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll wrap our `stagger` methods inside the appropriate `query` methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll use only one transition, that is, `* => *`, for both queries, `:enter`
    and `:leave`, so whenever the list items change, the animation is triggered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll move `style({ opacity: 0 })` inside the `query('':enter'')` chunk as
    it needs to hide the items before the stagger animation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to fix the import of the animation in `shared/components/bucket/bucket.component.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we''ve changed the name of the animation, let''s fix in the template
    of the bucket component as well. Update `shared/components/bucket/bucket.component.html`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we're binding the `[@listAnimation]` property to `bucket.length`.
    This will make sure that the animation triggers whenever the length of the bucket
    changes, that is, when an item is added or removed from the bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! You now know how to implement staggering animations for lists in Angular.
    See in the next section how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Stagger animations only work inside `query` methods. This is because of the
    fact that staggering animations usually are applied to the list itself and not
    to individual items. In order to search or query the items, we first use the `query`
    method. Then we use the `stagger` method to define how many milliseconds of staggering
    we want before the animation starts for the next list item. We also provide `animation`
    as well in the `stagger` method to define the animation for each element found
    with the query. Notice that we''re using `{ optional: true }` for both the `:enter`
    query and the `:leave` query. This is because if the list binding changes (`bucket.length`),
    we don''t get an error if no new element has entered the DOM or no element has
    left the DOM.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Animations in Angular* ([https://angular.io/guide/animations](https://angular.io/guide/animations))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular animations stagger docs ([https://angular.io/api/animations/stagger](https://angular.io/api/animations/stagger))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using animation callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to be notified and act upon animation state
    changes in Angular. As a simple example, we'll use the same bucket list app, and
    we'll reset the `item-to-add` option whenever the animation completes for adding
    an item.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter04/start_here/animation-callbacks`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should open the app in a new browser tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Login as Admin** button, and you should see something like the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – animation-callbacks app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.06_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – animation-callbacks app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let's see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have the same bucket app for this recipe that we used in the previous recipes.
    To see how to use animation callbacks, we''ll simply perform an action once the
    animation of a list item entering the DOM is finished and have one action for
    when a list item leaves the DOM. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first create two methods named `onAnimationStarted` and `onAnimationDone`
    in `BucketComponent` inside the `shared/components/bucket/bucket.component.ts`
    file. These methods will be triggered for the respective phases of animations
    in the later steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll bind the animation''s `start` and `done` events to the `onAnimateEvent`
    method in the template. Modify the `shared/components/bucket/bucket.component.html`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Notice that both the `.start` and`.done` events are associated with the trigger
    name, `listAnimation`. If you refresh the app now, you should see the logs on
    the console as follows:![Figure 4.7 – Logs on the console reflecting the .start
    and .done animation events
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_4.07_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Logs on the console reflecting the .start and .done animation events
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have the events in place now, we''ll replace the `shopping_cart` icon
    with the save icon during the animation. This is similar to simulating what would
    happen if we needed to do an HTTP call to save the data. Let''s modify `shared/components/bucket/bucket.component.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can modify our template to show the appropriate icon based on the
    value of the `isSaving` property. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: And boom! The recipe is finished now. If you refresh the page or add/delete
    an item, you'll notice that the bucket icon is replaced with the save icon during
    the entire animation, all thanks to the animation callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an animation is registered with Angular using the `trigger` method, Angular
    itself creates a local property within the scope with the name of the trigger
    set as `@triggerName`. It also creates the `.start` and `.done` sub-properties
    as `EventEmitter` instances for the animation. Therefore, we can easily use them
    in the templates to capture the `AnimationEvent` instance passed by Angular. Each
    `AnimationEvent` contains the `phaseName` property, using which we can also identify
    whether it is the `start` event or the `done` event. We can also tell from `AnimationEvent`
    which state the animation started from and which state it ended on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animations in Angular ([https://angular.io/guide/animations](https://angular.io/guide/animations))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AnimationEvent docs ([https://angular.io/api/animations/AnimationEvent](https://angular.io/api/animations/AnimationEvent))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic route animations in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to implement basic route animations in Angular.
    Although these are basic animations, they require a bit of a setup to be executed
    properly. You'll learn how to configure route animations by passing the transition
    state name to the route as a data property. You'll also learn how to use the `RouterOutlet`
    API to get the transition name and apply it to the animation to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter04/start_here/route-animations`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab, and you should see something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – route-animations app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.08_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – route-animations app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let's see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a really simple app with two lazy-loaded routes at the moment. The
    routes are for the **Home** and the **About** pages, and we''ll now start configuring
    the animations for the app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import `BrowserAnimationsModule` into `app.module.ts` as
    an import. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll now create a new folder inside the `app` folder named `constants`. We''ll
    also create a file inside the `constants` folder named `animations.ts`. Let''s
    put the following code in the `animations.ts` file to register a simple trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll now register our queries and our states for the animations. Let''s add
    the following items in the `transition()` method''s array as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Alright! We have the `routeAnimation` trigger registered now for transition
    from every route to every other route. Now, let's provide those transition states
    in the routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can provide the states for the transitions using a unique identifier for
    each route. There are many ways to do it, but the easiest way is to provide it
    using the `data` attribute in the route configuration as follows in `app-routing.module.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to provide this `transitionState` property from the current route
    to the `@routeAnimation` trigger somehow in `app.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this, create a `@ViewChild` instance for the `<router-outlet>` element
    used in `app.component.html` so we can get the current route''s `data` and the
    `transitionState` value provided. The code in the `app.component.ts` file should
    look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also import `ROUTE_ANIMATION` from the `animations.ts` file into `app.component.ts`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll now create a function named `getRouteAnimationTransition()`, which will
    get the current route''s data and the `transitionState` value and return it back.
    This function will later be used in `app.component.html`. Modify your code in
    `app.component.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s use the `getRouteAnimationState()` method with the `@routeAnimation`
    trigger in `app.component.html` so we can see the animation in play:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Voila! Refresh the app and see the magic in place. You should now see the fade-out
    and fade-in animations happening as you navigate from the **Home** page to the
    **About** page and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `animations.ts` file, we first defined our animation trigger named `routeAnimation`.
    Then we made sure that by default, the HTML element to which the trigger is assigned
    has `position: ''relative''` set as a style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we apply the styled `position: ''absolute''` to the children, as mentioned,
    using `:enter` and `:leave` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes sure that these elements, that is, the routes to be loaded, have
    the `position: ''absolute''` style and a full width using `width: ''100%''` so
    they can appear on top of each other. You can always fiddle around by commenting
    either of the styles to see what happens (at your own risk, though!).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, once the styles are set, we define what will happen to the route that''ll
    enter the view using the `:enter` query. We set the style to have `opacity: 0`
    so it seems like the route is fading in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we defined our route transitions as a combination of two sequential
    animations, the first for `query :leave` and the second for `query :enter`. For
    the route leaving the view, we set the opacity to `0` via animation, and for the
    route entering the view, we set the opacity to `1` via animation as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animations in Angular ([https://angular.io/guide/animations](https://angular.io/guide/animations))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular route transition animations ([https://angular.io/guide/route-animations](https://angular.io/guide/route-animations))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex route animations in Angular using keyframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you learned how to create basic route animations, and
    in this one, we're going to level up our animation game. In this recipe, you'll
    learn how to implement some complex route animations in Angular using keyframes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter04/start_here/complex-route-animations`
    inside the cloned repository. It is in the same state as the final code of the
    *Basic route animations in Angular* recipe, except we don''t have any animations
    configured yet:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open the app in a new browser tab and you should see something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – complex-route-animations app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_4.09_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – complex-route-animations app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let's see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a basic app with two routes, the `HomePage` route and the `AboutPage`
    route. Similar to the previous recipe, *Basic route animations in Angular*, we
    have this configured using the route data parameters. But we don''t just have
    any animations written yet. Also, we already have `BrowserAnimationsModule` imported
    in the `app.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll start by writing a simple animation for the route entering the
    view and for the route leaving the view, as follows, in the `animations.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: You'll notice that we now have fade-in/fade-out animations for the entering
    and leaving routes. However, you'll notice that the entering route doesn't appear
    until the current route has left the view. This is because both our animations
    are running in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll group the animations for the `:enter` and `:leave` queries using the
    `group` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now, you should see both animations triggering together. Although it doesn't
    look great yet, trust me, it will!
  prefs: []
  type: TYPE_NORMAL
- en: 'Stepping up the game, we''ll write a complex animation for our route entering
    the view. We''d like to create a **3D animation**, and therefore, we''ll work
    with some `translateZ()` transformations as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: If you refresh the app now, you'll be like, "Pffttt, is that 3D, Ahsan? What?"
    Well, it is. However, we only see a sliding animation from left to right. And
    that's because we need to change our *perspective*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view all the elements being translated into 3D, we need to apply the `perspective`
    style to the host element for the animation. We''ll do it by adding the `perspective:
    ''1000px''` style in our first `style` definition in the `animations.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: And boom! Now we have the `:enter` query animation in 3D.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s update the animation for the `:leave` query as follows so we can
    see it leaving the view sliding backward in the *z* axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Woot woot! We now have a 3D animation for our routes that looks absolutely stunning.
    And this is, of course, not the end. The sky's the limit when it comes to what
    you can do with keyframes and animations in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we wanted to implement a 3D animation in this recipe, we first made sure
    that the animation host element had a value for the `perspective` style, so we
    can see all the magic in 3D. Then we defined our animations using the `keyframes`
    method with an animation state for each offset so we could set different angles
    and rotations at those states, just so it all looks cool. One important thing
    that we did was group our `:enter` and `:leave` queries using the `group` method,
    where we defined the animations. This made sure that we had the route entering
    and leaving the view simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fireship.io's tutorial on Angular route animations ([https://fireship.io/lessons/angular-router-animations/](https://fireship.io/lessons/angular-router-animations/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular complex animation sequences ([https://angular.io/guide/complex-animation-sequences](https://angular.io/guide/complex-animation-sequences))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
