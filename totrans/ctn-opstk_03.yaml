- en: OpenStack Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will start with an introduction to OpenStack. Then this chapter
    will explain the architecture of OpenStack and further explain each core project
    in OpenStack. Finally, the chapter will demonstrate DevStack installation and
    use it for doing some operations with OpenStack. This chapter will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to KeyStone, the OpenStack identity service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Nova, the OpenStack compute service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Neutron, the OpenStack network service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Cinder, the OpenStack block storage service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Glance, the OpenStack image service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Swift, the OpenStack object service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevStack installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack is a free and open source software for creating private and public
    clouds. It provides interrelated sets of components to manage and access large
    pools of compute, networking and storage resources spanned across a datacenter.
    Users can manage it either using web-based user interfaces and command lines or
    REST APIs. OpenStack was open sourced in 2010 by Rackspace and NASA. Currently,
    it is managed by The OpenStack Foundation, a non-profit entity.
  prefs: []
  type: TYPE_NORMAL
- en: OpenStack architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following figure (from: [https://docs.openstack.org/arch-design/design.html](https://docs.openstack.org/arch-design/design.html))
    represents the logical architecture of OpenStack and how users can connect to
    various services. OpenStack has multiple components for different purposes such
    as Nova for managing compute resources, Glance for managing OS images, and so
    on. We will learn about each component in detail in the upcoming sections.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In very simple terms, if a user requests to provision a VM using CLI or the
    APIs, the request is handled by Nova. Nova then talks to KeyStone to authenticate
    the request, Glance for the OS image, and Neutron for setting up the network resources.
    Then, after receiving responses from each component, it boots the VM and returns
    a response to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to KeyStone, the OpenStack identity service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'KeyStone is an OpenStack identity service which provides the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity provider**: In OpenStack, identity is represented as a user in the
    form of a name and password. In simple setups, KeyStone stores the identity of
    a user in its database. But it is recommended you use third-party identity providers
    such as LDAP in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API client authentication**: Authentication is validating a user''s identity.
    KeyStone can do it by using many third-party backends such as LDAP and AD. Once
    authenticated, the user gets a token which he/she can use to access other OpenStack
    service APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multitenant authorization**: KeyStone provides the authorization to access
    a particular resource by adding a role to every user in every tenant. When a user
    access any OpenStack service, the service verifies the role of the user and whether
    he/she can access the resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service discovery**: KeyStone manages a service catalog in which other services
    can register their endpoints. Whenever any other service wants to interact to
    any particular service, it can refer to the service catalog and can get the address
    of that service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'KeyStone contains the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**KeyStone****API**: KeyStone API is a WSGI application which handles all the
    incoming requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: KeyStone is comprised of many internal services exposed over
    an API endpoint. These services are consumed by a frontend API in a combined fashion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity**: The identity service handles requests related to user credential
    validation and CRUD operations associated with users and group data. In production
    environments, third-party entities such as LDAP can be used as an identity service
    backend'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource**: The resource service is responsible for managing data related
    to projects and domains'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assignment**: The assignment service is responsible for roles and assigning
    roles to users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token**: The token service is responsible for managing and validating tokens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Catalog**: The catalog service is responsible for managing service endpoints
    and providing discovery services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy**: The policy service is responsible for providing rule-based authorization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure represents the architecture of KeyStone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to Nova, the OpenStack compute service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nova is a compute service for OpenStack which provides a way to provision compute
    instances, also known as virtual machines. Nova has capabilities to create and
    manage the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bare metal servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nova contains multiple services, each performing different functions. They internally
    communicate via RPC message-passing mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nova consists of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nova API**: The Nova API service processes incoming REST requests to create
    and manage virtual servers. The API service mainly deals with database reads and
    writes, and communicates over RPC with other services to generate responses to
    the REST requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Placement API**: Nova Placement API service was introduced in 14.0.0 Newton
    release. This service tracks the resource provider inventories and usages of each
    provider. A resource provider can be a shared storage pool, compute node and so
    on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduler**: The scheduler service decides which compute host gets instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute**: The compute service is responsible for communicating with hypervisors
    and virtual machines. It runs on each compute node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conductor**: The conductor service acts as a database proxy, handles object
    conversion and helps with request coordination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: The database is an SQL database for data storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Messaging queue**: This route''s information is moved between different Nova
    services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network**: The network service manages IP forwarding, bridges, VLANs and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure represents the architecture of Nova:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to Neutron, the OpenStack network service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Neutron is network service for OpenStack which provides a variety of networking
    options in an OpenStack cloud. Its old name was Quantum and it was later renamed
    to Neutron. Neutron uses a vast array of plugins to provide different network
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Neutron contains the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Neutron server** (`neutron-server` and `neutron-*-plugin`): The Neutron server
    handles incoming REST API requests. It communicates to the database using plugins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin agent** (`neutron-*-agent`): The plugin agent runs on each compute
    node to manage the local virtual switch (vswitch) configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DHCP agent** (`neutron-dhcp-agent`): The DHCP agent provides DHCP services
    to tenant networks. This agent is responsible for maintaining all DHCP configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L3 agent** (`neutron-l3-agent`): The L3 agent provides L3/NAT forwarding
    for the external network access of VMs on tenant networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network provider services (SDN server/services)**: This service provides
    additional networking services to tenant networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Messaging queue**: Routes information between the Neutron processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: The database is an SQL database for data storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure represents the architecture of Neutron:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to Cinder, the OpenStack block storage service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cinder is a block storage service for OpenStack which provides persistent block
    storage resources for VMs in Nova. Cinder uses LVM or other plugin drivers to
    provide storage. Users can use Cinder to create, delete, and attach a volume.
    Also, more advanced features such as clone, extend volumes, snapshots, and write
    images can be used as bootable persistent instances for VMs and bare metals. Cinder
    can also be used independently of other OpenStack services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The block storage service consists of the following components and provides
    a highly available, fault tolerant and recoverable solution for managing volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cinder-api**: A WSGI app that authenticates and routes requests to the cinder-volume
    service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cinder-scheduler**: Schedules requests for the optimal storage provider node
    to create volume on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cinder-volume**: Interacts with a variety of storage providers and also handles
    the read and write requests to maintain states. It also interacts with cinder-scheduler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cinder-backup**: Backs up volumes to OpenStack object storage (Swift). It
    also interacts with a variety of storage providers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Messaging queue routes information between the block storage processes. The
    following figure is the architecture diagram of Cinder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to Glance, the OpenStack image service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Glance is the image service project for OpenStack which provides discovering,
    registering, and retrieving abilities for disk and server images. Users can upload
    and discover data images and metadata definitions that are meant to be used with
    other services. In short, Glance is a central repository for managing images for
    VMs, containers and bare metals. Glance has a RESTful API that allows for the
    querying of image metadata as well as the retrieval of the actual image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenStack image service, Glance, includes the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**glance-api**: A WSGI app that accepts image API calls for image discovery,
    retrieval and storage. It authenticates it with Keystone and forwards the request
    to the glance-registry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**glance-registry**: A private internal service that stores, processes and
    retrieves metadata about images. Metadata includes items such as size and type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: It stores image metadata. You can choose MySQL or SQLite according
    to your preferences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage repository for image files**: Various repository types are supported
    for storing images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metadata definition service**: A common API for vendors, admins, services
    and users to meaningfully define their own custom metadata. This metadata can
    be used for different types of resources such as images, artifacts, volumes, flavors
    and aggregates. A definition includes the new property''s key, description, constraints,
    and the resource type it can be associated with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure is the architecture diagram of Glance. Glance also has
    a client-server architecture that provides a REST API to the user, through which
    requests to the server can be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to Swift, the OpenStack object store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swift is the object store service for OpenStack which can be used to store redundant,
    scalable data on clusters of servers that are capable of storing petabytes of
    data. It provides a fully distributed, API-accessible storage platform that can
    be integrated directly into applications or used for backup, archiving and data
    retention. Swift uses a distributed architecture with no central point of control,
    which makes it highly available, distributed and eventually a consistent object
    storage solution. It is ideal for storing unstructured data which can grow without
    bounds and can be retrieved and updated.
  prefs: []
  type: TYPE_NORMAL
- en: Data is written to multiple nodes that extend to different zones for ensuring
    data replication and integrity across the cluster. Clusters can scale horizontally
    by adding new nodes. In case of node failure, the data is replicated to other
    active nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Swift organizes data in a hierarchy. It accounts for the stored list of containers,
    containers for storing lists of objects and objects for storing the actual data
    with metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'Swift has the following major components in order to deliver high availability,
    high durability, and high concurrency. Swift has many other services such as updaters,
    auditors, and replicators which handle housekeeping tasks to deliver a consistent
    object storage solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '**proxy-servers**: The public API is exposed through the proxy server. It handles
    all of the incoming API requests and routes the request to appropriate services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rings**: Ring maps the logical names of data to locations on particular disks.
    There are separate rings for different resources in Swift.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zones**: A zone isolates data from other zones. If a failure happens in one
    zone, the cluster is not impacted as the data is replicated across zones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accounts**: An account is a database that stores the list of containers in
    an account. It is distributed across the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containers**: A container is a database that stores the list of objects in
    a container. It is distributed across the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objects**: The data itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partitions**: It stores objects, account databases and container databases
    and helps manage locations in which data lives in the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows an architecture diagram for Swift:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: DevStack installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevStack is a set of extensible scripts used to quickly bring up a complete
    development OpenStack environment. DevStack is meant for only development and
    testing purposes. Please note that it should not be used in a production environment.
    DevStack installs all the core components by default which are Nova, Neutron,
    Cinder, Glance, Keystone, and Horizon.
  prefs: []
  type: TYPE_NORMAL
- en: Devstack is able to run on Ubuntu 16.04/17.04, Fedora 24/25, and CentOS/RHEL
    7, as well as Debian and OpenSUSE.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will set up a basic OpenStack environment on Ubuntu 16.04
    and try out some commands to test various components in OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a stack user using the following method. You should run DevStack as a non-root
    user with `sudo` enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now add the `sudo` privilege to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Download DevStack. DevStack by defaults installs the master version of the
    project from Git. You can specify the use of stable branches also:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `local.conf` file. This is a `config` file used by DevStack for installation.
    Here is the minimum configuration required by DevStack to get started (please
    refer to [https://docs.openstack.org/devstack/latest/](https://docs.openstack.org/devstack/latest/)
    for more configurations):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the installation. This may take around 15 to 20 minutes depending on
    your internet connectivity and your host capacity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can access Horizon to experience the web interface with OpenStack, or you
    can source `openrc` in your shell, and then use the OpenStack command-line tool
    to manage vms, networks, volumes, and images from there. Here''s how you do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Creating a KeyStone user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create a user and then assign it an admin role. These actions will
    be handled by KeyStone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Assign role to the user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will assign an admin role to our user `my-new-user`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating a VM using Nova
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a VM using Nova. We will use the cirros image from Glance, and
    the network from Neutron.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available list of images in Glance are created by DevStack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Also check the network list in Neutron created by the DevStack installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Nova provides a flavor that specifies the VM resources. Here is the list of
    flavors created by DevStack in Nova:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create a keypair to be used to SSH to the VM created in Nova:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a VM using all the resources we listed previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the server list to verify whether the VM was launched successfully or
    not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Attach volume to VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that our VM is running, let''s try to do something more ambitious. We will
    now create a volume in Cinder and attach it to our running VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the list of volumes in Cinder. We will see that our volume is
    created and is in an available state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s attach this volume to our VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify whether the volume was attached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can see here that the volume is attached to our `test-vm` vm.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading an image to Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will try to upload an image to Swift. First, check the account details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create an images container to store all our images. Similarly, we can
    create multiple containers inside an account with any logical name to store different
    types of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a container, let''s upload an image to the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the image was successfully uploaded to the Swift object store.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more features that are available in OpenStack, which you can
    read about in the user guides available for each project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gave you a basic introduction to OpenStack and the components
    available in OpenStack. We discussed the components and the architecture of individual
    projects. Then we completed a DevStack installation to set up a development environment
    for running OpenStack. We then did some hands-on provisioning for a VM using Nova.
    This included adding a KeyStone user, assigning a role to them and attaching a
    volume to the VM after it was provisioned. Also, we looked at how we can use Swift
    to upload and download files. In the next chapter, we will look at the state of
    containerization in OpenStack.
  prefs: []
  type: TYPE_NORMAL
