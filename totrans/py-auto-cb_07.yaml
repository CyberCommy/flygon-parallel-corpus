- en: Developing Stunning Graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting a simple sales graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing stacked bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting pie charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying multiple lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a scatter plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding legends and annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Graphs and images are fantastic ways of presenting complex data in a way that's
    easily understandable. In this chapter, we will make use of the powerful `matplotlib` library
    to learn how to create all kinds of graphs. `matplotlib` is a library that's aimed
    at displaying data in multiple ways, and it can create absolute stunning plots
    that will help transmit and display information in the best way.
  prefs: []
  type: TYPE_NORMAL
- en: The graphs we'll cover will go from simple bar graphs to line or pie charts,
    and combine multiple plots in the same graph, annotate them, or even draw geographical
    maps.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting a simple sales graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to draw a sales graph by drawing bars proportional
    to sales in different periods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install `matplotlib` in our virtual environment using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In some OSes, this may require us to install additional packages; for example,
    in Ubuntu it may require us to run `apt-get install python3-tk`. Check the `matplolib`
    docs for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using macOS, it''s possible that you''ll get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data to be displayed on the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Split the data into usable formats for the graph. This is a preparation step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a bar graph with the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed as follows in a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bd9e3f18-0570-48cd-8817-7a9d8dca9732.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After importing the module, the data is presented in step 2 from the *How to
    do it…* section in a convenient way, which will likely be similar to the way the
    data was originally stored.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the way `matplotlib` works, it requires an *X* component as well
    as a *Y* component. In this case, our *X* component is just a sequence of integers,
    as many as data points. We create that in `POS`. In `VALUES`, we store the numeric
    value of the sales as a sequence, and in `LABELS` the associated label for each
    data point. All that preparation work is done in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 creates the bar graph, with the sequences *X* (`POS`) and *Y* (`VALUES`).
    These define our bars. To specify the period it refers to, we put labels on the
    *x* axis for each value with `.xticks` in the same way. To clarify the meaning,
    we add a label with `.ylabel`.
  prefs: []
  type: TYPE_NORMAL
- en: To display the resulting  graph, step 5 calls `.show`, which opens a new window
    with the result.
  prefs: []
  type: TYPE_NORMAL
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may want to change the format in which the values are presented. In our
    example, maybe the numbers represent millions of dollars. To do so, you can add
    a formatter to the *y* axis, so the values represented there will have it applied
    to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`value_format` is a function that returns a value based on the value and position
    of the data. Here, it will return the value 100 as `$ 100 M`.'
  prefs: []
  type: TYPE_NORMAL
- en: Values will be retrieved as floats, requiring you to transform them into integers
    for display.
  prefs: []
  type: TYPE_NORMAL
- en: To apply the formatter, we need to retrieve the `axis` object with `.gca` (get
    current axes). Then, the `.yaxis` gets the formatter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The color of the bars can also be determined with the `color` parameter. Colors
    can be specified in multiple formats, as described in [https://matplotlib.org/api/colors_api.html](https://matplotlib.org/api/colors_api.html),
    but my favorite is following the XKCD color survey, using the `xkcd:` prefix (no
    space after the colon):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The full survey can be found here: [https://xkcd.com/color/rgb/](https://xkcd.com/color/rgb/).
  prefs: []
  type: TYPE_NORMAL
- en: Most common colors, such as blue or red, are also available for quick tests.
    They tend to be a little bright to be used in good-looking reports, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'Combining the color with formatting the axis gives the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2487d3fa-1b81-4594-97ba-1b5dfafbd44e.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar graphs don't need to display information in a temporal way. As we've seen, `matplotlib` requires
    us to specify the *X* parameter of each bar. That's a powerful tool to generate
    all kinds of graphs.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the bars can be arranged to display a histogram, such as for displaying
    people of a certain height. The bars will start at a low height, increase to the
    average size, and then drop back. Don't limit yourself to just spreadsheet charts!
  prefs: []
  type: TYPE_NORMAL
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Drawing stacked bars* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding legends and annotations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Combining graphs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing stacked bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A powerful way of displaying different categories is to present them as stacked
    bars, so each of the categories and the total are displayed. We'll see in this
    recipe how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` in our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this: `RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data. This represents two products'' sales, one established, and
    a new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Process the data to prepare the expected format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the bar plot. Two plots are required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed in a new window as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6d97abab-342a-4cee-b175-3786b4ae9dd5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After importing the module, the data is presented in step 2 in a convenient
    way, which will likely be similar to the way the data was originally stored.
  prefs: []
  type: TYPE_NORMAL
- en: In step 3, the data is prepared in three sequences, `VALUESA`, `VALUEB`, and
    `LABELS`. A `POS` sequence to correctly position the bars is added.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 creates the bar graph, with the sequences *X* (`POS`) and *Y* (`VALUESB`).
    The second bar sequence, `VALUESA`, is added on top of the previous one, using
    the `bottom` parameter. This stacks the bars.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we stack the second value, `VALUESB`, first. The second value represents
    a new product introduced in the market, while `VALUESA` is more stable. This better shows
    the growth of the new product.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the periods is labeled on the *X* axis with `.xticks`. To clarify the
    meaning, we add a label with `.ylabel`.
  prefs: []
  type: TYPE_NORMAL
- en: To display the resulting graph, step 5 calls `.show`, which opens a new window
    with the result.
  prefs: []
  type: TYPE_NORMAL
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way of presenting stacked bars is adding them as percentages, so the
    total doesn't change, only the relative sizes compared to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, `VALUESA` and `VALUEB` need to be calculated relative to the percentages
    in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes each value equal to the percentage of the total, and the total always
    adds up to `100`. This produces the following graphic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f1270a74-2f03-49e2-b731-c2a539e6a774.png)'
  prefs: []
  type: TYPE_IMG
- en: The bars doesn't necessarily need to be stacked. Sometimes, it may be interesting
    to present the bars one against the other for comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we need to move the position of the second bar sequence. We''ll
    need also to set thinner bars to allow space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note how the width of the bar is set to a third of the space, as our reference
    space is `1` between the bars. The first bar is moved to the left and the second
    to the right to center them. The `bottom` argument has been deleted to not stack
    the bars:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7cd52074-9e8e-4407-ae9f-e751c8e64e3f.png)'
  prefs: []
  type: TYPE_IMG
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Plotting a simple sales graph* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding legends and annotations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Combining graphs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting pie charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pie charts! A Business 101 favorite, and a common way of presenting percentages.
    We'll see in this recipe how to plot a pie chart, with different slices representing
    proportions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` in our virtual environment using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplotlib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data. This represents several lines of products:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Process the data to prepare the expected format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the pie chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed in a new window as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d11a4172-49d1-4df0-a0a9-df33e6bb7c10.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The module is imported in step 1 of the *How to do it…* section, and the data
    to present is imported in step 2\. The data is separated into two components,
    a list of `VALUES` and a list of `LABELS`, in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: The creation of the chart happens in step 4\. The pie chart is created by adding
    `VALUES` and `LABELS`. The `autopct` parameter formats the value so it displays
    it as a percentage to a single decimal place.
  prefs: []
  type: TYPE_NORMAL
- en: The call to `axis` ensure the pie chart will look round, instead of having a
    bit of perspective and appearing as an oval.
  prefs: []
  type: TYPE_NORMAL
- en: To display the resulting  graph, step 5 calls `.show`, which opens a new window
    with the result.
  prefs: []
  type: TYPE_NORMAL
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pie charts are a little overused in business graphs. Most of the time, a bar
    chart with percentages or values will be a better way of visualizing the data,
    especially if more than two or three options are displayed. Try to limit the use
    of pie charts in your reports and data presentations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rotating the start of the wedges is possible with the `startangle` parameter,
    and the direction to set up the wedges is defined by `counterclock` (defaults
    to  `True`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The format inside the label can be set by a function. As the value inside the
    pie is defined as a percentage, finding the original value can be a little tricky.
    The following snippet creates a dictionary indexing by its percentage as an integer,
    so we can retrieve the referenced value. Please note that this assumes that no
    percentage gets repeated. If that''s the case, the labels may be slightly incorrect.
    In that case, we may need to use up to the first decimal place for better precision:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'One or more wedges can also be separated by using the explode parameter. This
    specifies how separated the wedge is from the center:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Combining all these options, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/907bd5d6-c5cb-49cb-8f51-29aebf936ed1.png)'
  prefs: []
  type: TYPE_IMG
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Plotting a simple sales graph* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Drawing stacked bars* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying multiple lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show how to display multiple lines in a graph.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` in our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data. This represents two products'' sales:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Process the data to prepare the expected format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the line plot. Two lines are required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed in a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/defcbfbe-a08d-4ed8-b19d-b03b82ef8552.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *How to do it…* section, step 1 imports the module and step 2 shows the
    data to be plotted in a formatted way.
  prefs: []
  type: TYPE_NORMAL
- en: In step 3, the data is prepared in three sequences, `VALUESA`, `VALUEB`, and `LABELS`.
    A `POS` sequence to correctly position each point is added.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 creates the graph, with the sequences *X* (`POS`) and *Y* (`VALUESA`),
    and then `POS` and `VALUESB`. The value of `'o-'` is added to draw a circle on
    each of the data points and a full line between them.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the plot will display a solid line, with no marker on each point.
    If only the marker is used (that is, `'o'`), there'll be no line.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the periods is labeled on the *X* axis with `.xticks`. To clarify the
    meaning, we add a label with `.ylabel`.
  prefs: []
  type: TYPE_NORMAL
- en: To display the resulting graph, step 5 calls `.show`, which opens a new window
    with the result.
  prefs: []
  type: TYPE_NORMAL
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Graphs with lines are deceptively simple and able to create a lot of interesting
    representations. It is probably the most convenient when showing mathematical
    graphs. For example, we can display a graph showing Moore's Law in a few lines
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: Moore's Law is an observation by Gordon Moore that the number of components
    in an integrated circuit doubles every two years. It was first described in 1965
    and then corrected in 1975\. It seems to be quite close to the historic rate of
    technological advancement over the last 40 years.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first create a line describing the theoretical line, with data points from
    1970 to 2013\. Starting with 1000 transistors, we double it every two years, up
    to 2013:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Following some documentation, we extract a few examples of commercial CPUs,
    their year of release, and their number of integrated components from here: [http://www.wagnercg.com/Portals/0/FunStuff/AHistoryofMicroprocessorTransistorCount.pdf](http://www.wagnercg.com/Portals/0/FunStuff/AHistoryofMicroprocessorTransistorCount.pdf).
    Due to the big numbers, we''ll use the notation of `1_000_000` for a million,
    available in Python 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw a line with markers to display those points at the proper places. The
    `''v''` mark will display a triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'For each data point, append a label in the proper place with the name of the
    CPU:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, growth doesn''t make sense displayed in a linear graph, so we change
    the scale to be logarithmic, which makes exponential growth look like a straight
    line. But to keep the sense of dimension, add a grid. Call `.show` to display
    the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting graph will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc851b15-ef70-481c-b08e-51b3879cfb60.png)'
  prefs: []
  type: TYPE_IMG
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, check the available formats for the lines (solid, dashed, dotted,
    and so on) and markers (dot, circle, triangle, star, and so on) here: [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding legends and annotations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Combining graphs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a scatter plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A scatter plot is one where the information is only displayed as dots with *X*
    and *Y* values. They are very useful when presenting samples and to see whether
    there's any relationship between two variables. In this recipe, we'll display
    a graph plotting time spent on a website against money spent, to see whether we
    can see a pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` in our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: As data points, we'll use the `scatter.csv` file to read the data. This file
    is available on GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/scatter.csv](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/scatter.csv).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib` and `csv`. `FuncFormatter` is also imported to format the
    axes later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data, reading from the file using the `csv` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data for plotting, and then plot it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Improve the context by formatting the axes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed in a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ced40fbf-6f2b-4eb1-b8b9-f5483b9f4989.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Steps 1 and 2 of the *How to do it…* section import the modules we'll use later
    and read the data from the CSV file. The data is transformed into a list to allow
    us to iterate through it several times, as that's necessary in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 prepares the data in two arrays, and then uses `.scatter` to plot them.
    The parameters for `.scatter`, as with other methods of `matplotlib`, require
    an array of *X* and *Y* values. They both need to have the same size. The data
    is converted into `float` from the file format, to ensure the number format.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 refines the way the data is presented on each of the axis. The same operation
    is presented twice—a function is created that define how the values on that axis
    should be displayed (in dollars or in minutes). The function accepts as input
    the value to display and the position. Typically, the position will be ignored.
    The axis formatter will be overwritten with `.set_major_formatter`. Notice that
    both axes are returned with `.gca` (get current axes).
  prefs: []
  type: TYPE_NORMAL
- en: A label is added to the axes with `.xlabel` and `.ylabel`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, step 5 displays the graph in a new window. Analyzing the result, we
    can say that there seem to be two kinds of users, ones who spend less that 10
    minutes and never spend more than $10, and users who spend more time and also
    have a higher chance of spending up to $100.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the data presented is synthetic, and it has been generated with the
    result in mind. Real-life data will probably look more spread out.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A scatter plot can display not only points in two dimensions, but also add a
    third (area) and even a fourth dimension (color).
  prefs: []
  type: TYPE_NORMAL
- en: To add those elements, use the parameters `s` for *size* and `c` for *color*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Size is defined as the diameter of a ball in points squared. So, for a ball
    of diameter 10, 100 will be used. Color can use any of the usual definitions of
    color in `matplotlib`,  such as hex color, RGB, and so on. See the documentation
    for more details: [https://matplotlib.org/users/colors.html](https://matplotlib.org/users/colors.html).For
    example, we can generate a random graph using the four dimensions in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '`COLOR_SCALE` goes from green to red, and the size of each of the points will
    be between `0` and `50` points in diameter. The result should be something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ab8e4b1e-6dfa-4367-8e57-47e7557c5f45.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that it is random, so each time it will generate a different graph.
  prefs: []
  type: TYPE_NORMAL
- en: The `alpha` value makes each of the points semitransparent, allowing us to see
    where they overlap. The higher this value is, the less transparent the points
    will be. This parameter will affect the displayed color, as it will blend the
    point with the background.
  prefs: []
  type: TYPE_NORMAL
- en: Even though it's possible to display two independent values in the size and
    color, they can also be related to any of the other values. For example, making
    the color dependent on the size will make all the points of the same size the
    same color, which may help distinguish the data. Remember that the ultimate goal
    of a graph is to make data easy to understand. Try different approaches to improve
    this.
  prefs: []
  type: TYPE_NORMAL
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Displaying multiple lines* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding legends and annotations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To show information that changes from region to region, the best way is to display
    a map that presents the information, while at the same time giving a regional
    sense of position and location for the data.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `fiona` module to import GIS information,
    as well as `matplotlib` to display the information. We will display a map of Western
    Europe and display the population of each country with a color grade. The darker
    the color, the larger the population.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` and `fiona` in our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The map data needs to be downloaded. Fortunately, there's a lot of freely available
    data for geographic information. A search on Google should quickly return almost
    everything you need, including detailed information on regions, counties, rivers,
    or any other kind of data.
  prefs: []
  type: TYPE_NORMAL
- en: GIS information is available in different formats from a lot of public organizations.
    `fiona` is capable of understanding most common formats and treating them in equivalent
    ways, but there are small differences. Read the `fiona` documentation for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: The data we'll use in this recipe, covering all European countries, is available
    on GitHub at the following URL:  [https://github.com/leakyMirror/map-of-europe/blob/master/GeoJSON/europe.geojson](https://github.com/leakyMirror/map-of-europe/blob/master/GeoJSON/europe.geojson).
    Note it is in GeoJSON, which is an easy standard to work with.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the modules to be used later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the population of the countries to display. The population has been:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the `colormap`, which will determine the color each country will be
    displayed in a shade of green. Calculate which color corresponds to each country:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the file and read the data, filtering by the countries we defined the
    population of in step 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot each of the countries in the proper color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed in a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d4a76e46-e98f-4763-8e14-5658dd95e0e6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After importing the modules in step 1 from the *How to do it…* section, the
    data to be displayed is defined in step 2\. Note that the names need to be in
    the same format as they'll be in the GEO file. The minimum and maximum populations
    are calculated to properly balance the range later.
  prefs: []
  type: TYPE_NORMAL
- en: The population has been rounded to a significant number, and it's defined in
    millions. Only a few countries have been defined for the purposes of this recipe,
    but there are more available in the GIS file and the map can be extended toward
    the East.
  prefs: []
  type: TYPE_NORMAL
- en: A `colormap` defining the color range in shades of green (`Greens`) is described
    in step 3\. This is one standard `colormap` in `matplotlib`, but others described
    in the documentation can be used ([https://matplotlib.org/examples/color/colormaps_reference.html](https://matplotlib.org/examples/color/colormaps_reference.html)),
    such as oranges, reds, or plasma for a more cold-to-hot approach.
  prefs: []
  type: TYPE_NORMAL
- en: The `COUNTRY_COLOUR` dictionary stores the color defined by the `colormap` for
    each country. The population is reduced to a number from 0.0 (least population)
    to 1.0 (most), and passed to `colormap` to retrieve the color at the scale it
    corresponds to.
  prefs: []
  type: TYPE_NORMAL
- en: The GIS information is then retrieved in step 4\. The `europe.geojson` file is
    read using `fiona` and the data is copied so we can use it in the next steps.
    It also filters to only deal with the countries we defined the population of,
    so no extra countries are plotted.
  prefs: []
  type: TYPE_NORMAL
- en: The loop in step 5 goes country by country, and then we plot it using `.fill`,
    which plots a polygon. The geometry of each of the different countries is either
    a single polygon (`Polygon`) or more than one (`MultiPolygon`). In each case,
    the proper polygons are drawn, all in the same color. This means `MultiPolygon` is
    drawn several times.
  prefs: []
  type: TYPE_NORMAL
- en: GIS information is stored as points for coordinates describing the latitude
    and longitude of the point. Areas, such as countries, have a list of coordinates
    that describe an area within them. Some maps are more precise and have more points
    defining areas. Multiple polygons may be required to define a country, as some
    parts may be separated from each other, islands being the most obvious cases,
    but there are also enclaves.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the data is displayed by calling `.show`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Taking advantage of the information contained in the GIS file, we can add extra
    information to the map. The `properties` object contains information about the
    name of the country, but also its ISO name, FID code, and central location as
    `LON` and `LAT`. We can use this information to display the name of the country
    using `.text`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: This code will live inside the loop in step 6 in the *How to do it…* section.
  prefs: []
  type: TYPE_NORMAL
- en: If you analyze the file, you'll see that the `properties` object contains information
    about the population, stored as POP2005, so you can draw the population info directly
    from the map. That is left as an exercise. Different map files will contain different
    information, so be sure to play around to unleash all the possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you may notice that the map may be distorted in some cases. `matplotlib`
    will try to present it in a square box, and if the map is not roughly square,
    this will be evident. For example, try to display only Spain, Portugal, Ireland,
    and the UK. We can force the graph to present 1 point of latitude with the same
    space as 1 point of longitude, which is a good approach if we are not drawing
    something near the poles. This is achieved by calling `.set_aspect` in the axes.
    Current axes can be obtained through `.gca` (**get current axes**)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, to improve the look of the map, we can set up a background color that
    helps to differentiate between the background and the foreground, and remove the
    labels in the axes, as printing the latitude and longitude is probably distracting.
    Removing the labels on the axes is achieved by setting empty labels with `.xticks`
    and `.yticks`. The background color is mandated by the foreground color of the
    axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to better differentiate between the different regions, a line surrounding
    each area can be added. This can be done by drawing a thin line with the same
    data as `.fill`, right after. Notice that this code is repeated twice in step
    2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying all these elements to the map, it now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a57d8513-6d08-4ba4-a29c-9f03641ec34f.png)'
  prefs: []
  type: TYPE_IMG
- en: The resulting code is available on GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/visualising_maps.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/visualising_maps.py).
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen, maps are drawn as general polygons. Don't be afraid to include
    other geometrical forms. You can define your own polygons and print them with
    `.fill` or some extra labels. For example, far away regions may need to be transported
    to avoid having too big a map. Or, rectangles can be used to print extra information
    on top of parts of the map.
  prefs: []
  type: TYPE_NORMAL
- en: The full `fiona` documentation can be found here: [http://toblerity.org/fiona/](http://toblerity.org/fiona/). The
    full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding legends and annotations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Combining graphs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding legends and annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When drawing graphs with dense information, a legend may be required to determine
    the specific colors or help better understand the data presented. In `matplotlib`,
    legends can be pretty rich and have multiple ways of presenting them. Annotations
    to draw attention to specific points are also good ways to focus the message for
    the audience.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll create a graph with three different components and display
    a legend with information to better understand it, as well as annotating the most
    interesting points on our graph.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` in our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data to be displayed on the graph, and the legends that should
    be displayed. Each of the lines is composed of the time label, sales of `ProductA`,
    sales of `ProductB`, and sales of `ProductC`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Split the data into usable formats for the graph. This is a preparation step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a bar graph with the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an annotation displaying the maximum growth in the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `legend`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed in a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7284a61f-70fe-43e5-b151-152dd0086307.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Steps 1 and 2  of the *How to do it…* section prepare the imports and the data
    that will be displayed in the bar, in a format similar to what well-structured
    input data will look like. In step 3, the data is split into different arrays
    to prepare the input in `matplotlib`. Basically, each data sequence is stored
    in a different array.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 draws the data. Each data sequence gets a call to `.bar`, specifying
    its position and values. Labels do the same as `.xticks`. To separate each of
    the bars around the labels, the first one is displaced to the left and the third
    to the right.
  prefs: []
  type: TYPE_NORMAL
- en: An annotation is added above the bar for `ProductC` in the second quarter. Note
    that the annotation includes the point in `xy` and the text location in `xytext`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 6, the legend is added. Notice that the labels need to be added in the
    same order as the data was input. The legend is located automatically in an area
    that doesn't cover any data. `arroprops` details the arrow to point to the data.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the graph is drawn in step 7 by calling `.show`.
  prefs: []
  type: TYPE_NORMAL
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Legends will be display automatically in most cases with just a call to `.legend`.
    If you need to customize the order in which they appear, you may refer each label
    to a specific element. For example, this way (note it calls `ProductA` the `valueC`
    series)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The location of the legend can also be changed manually, through the `loc` parameter.
    By default, it is `best` and it will draw the legend over an area where there's
    the least overlap of data (ideally none). But values such as `right`, `upper left`,
    and so on can be used, or a specific `(X, Y)` tuple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to plot the legend outside of the graph, using the `bbox_to_anchor` option.
    In this case, the legend is attached to the (*X*, *Y*) of the bounding box, where
    `0` is the bottom-left corner of the graph and `1` is the upper-right corner.
    This may cause the legend to be clipped by the external border, so you may need
    to adjust where the graph starts and ends with `.subplots_adjust`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Adjusting the `bbox_to_anchor` parameter and `.subplots_adjust` will require
    a little bit of trial and error, until the expected result is produced.
  prefs: []
  type: TYPE_NORMAL
- en: '`.subplots_adjust` references the positions as the position of the axis where
    it will be displayed. This means that `right=0.80` will leave 20% of the screen
    on the right of the plot, while the default for left is 0.125, meaning it leaves
    12.5% of the space on the left of the plot. See the documentation for further
    details: [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The annotations can be done in different styles and can be tweaked with different
    options regarding the way to connect and so on. For example, this code will create
    an arrow with the `fancy` style connecting with a curve. The result is displayed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: In our recipe, we did not annotate to exactly the end of the bar (point (`1.2`,
    `15`)), but slightly above it, to give a little bit of breathing space.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the exact point to annotate and where to locate the text will require
    a bit of testing. The text was also positioned by looking for the best place to
    not overlap the text with the bars. The font size and color can be changed, using
    the `fontsize` and `color` parameters, in both the `.legend` and `.annotate` calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying all these elements, the graph may look similar to this. This graph
    can be replicated by calling the `legend_and_annotation.py` script available in
    GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/adding_legend_and_annotations.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/adding_legend_and_annotations.py):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cbe93454-92bf-4133-a125-e94c0269ba18.png)'
  prefs: []
  type: TYPE_IMG
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, the guide for legends is here: [https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend) and
    for annotations it is here: [https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Drawing stacked bars* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Combining graphs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More than one graph can be combined in the same graph. In this recipe, we'll
    see how to present data in the same plot, on two different axes, and how to add
    more plots to the same graph.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` in our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data to be displayed on the graph and the legends that should be
    displayed. Each of the lines is composed of the time label,  sales of `ProductA`,
    and sales of `ProductB`. Notice how `ProductB` has a much higher value than `A`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data in independent arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Note that this expands and creates a list for each of the values.
  prefs: []
  type: TYPE_NORMAL
- en: The values can also be expanded with this—`LABELS`, `VALUESA`, `VALUESB`, `VALUESC
    = ZIP(*DATA)`
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a first subplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a bar graph with information about `VALUESA`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a different *Y* axis, and add information about `VALUESB` as a line
    plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another subplot and fill it with `VALUESC`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be displayed in a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ba4d0d65-86cb-462a-a017-9b5bc32a8d21.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After importing the module, the data is presented in step 2 in the *How to do
    it…* section in a convenient way, which will likely be similar to the way the
    data was originally stored. Step 3 is a preparation step that splits the data
    into different arrays for the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 creates a new `.subplot`. This splits the full drawing into two elements.
    The parameters are number of rows, columns, and selected subplot. So, we create
    two subplots in a column and drew in the first one.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 prints a `.bar` plot in this subplot using `VALUESA` data, and labels
    the *Y* axis with `Sales A` using `.ylabel`.
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 creates a new *Y* axis with `.twinx`, drawing `VALUESB` now as a line
    plot through `.plot`. The label is marked with `.ylabel` as `Sales B`. The *X*
    axis is labeled using `.xticks`.
  prefs: []
  type: TYPE_NORMAL
- en: The `VALUESB` plot is set as red to avoid both plots having the same color.
    By default, the first color is the same in both cases, and that will lead to confusion.
    The data points are marked with the `'o'` option.
  prefs: []
  type: TYPE_NORMAL
- en: In step 7, we changed to the second subplot using `.subplot`. The plot prints `VALUESC`
    as a line, and again puts the labels on the *X* axis with `.xticker` and sets
    the minimum of the *Y* axis to `0`. The graph is then displayed in step 8.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plots with multiple axes are complicated to read as a general rule. Use them
    only when there's a good reason to do so and the data is highly correlated.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the *Y* axis in line plots will try to present information between
    the minimum and maximum *Y* values. Truncating the axis is normally not the best
    way to present information, as it can distort the perceived differences. For example,
    changing values in the range from 10 to 11 can look like a huge deal if the graph
    goes from 10 to 11, but this is less than 10%. Setting the *Y* axis minimum to
    `0` with `plt.gca().set_ylim(ymin=0)` is a good idea, especially with two different
    axes.
  prefs: []
  type: TYPE_NORMAL
- en: The call to select the subplot will first go by row, then by column, so `.subplot(2,
    2, 3)` will select the subplot in the first column, second row.
  prefs: []
  type: TYPE_NORMAL
- en: The divided subplot grid can be changed. A first call to `.subplot(2, 2, 1)`
    and `.subplot(2, 2, 2)`, and then calling `.subplot(2, 1, 2)`, will create a structure
    with two small plots in the first row and a wider one in the second. Going back
    will overwrite previously drawn subplots.
  prefs: []
  type: TYPE_NORMAL
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, the guide for legends is here: [https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend).
    For annotations, it is here: [https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Drawing multiple lines* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Visualizing maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a chart is ready, we can store it on the hard drive so it can be referenced
    in other documents. We'll see in this recipe how to save charts in different formats.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install `matplotlib` in our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the data to be displayed on the graph and split it into different arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a bar graph with the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the graph to the hard drive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After importing and preparing the data in steps 1 and 2 in the *How to do it…*
    section, the graph is generated in step 3 by calling `.bar`. A `.ylabel` is added
    and the *X* axis is labeled with the proper time description through `.xticks`.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 saves the file to the hard drive with the name `data.png`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The resolution of the image can be determined through the `dpi` parameter.
    This will affect the size of the file. Use resolutions between `72` and `300`.
    Lower ones will be difficult to read, and higher ones won''t make sense unless
    the size of the graph is humongous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '`matplotlib` understands how to store the most common file formats, such as
    JPEG, PDF, and PNG. It will be used automatically when the filename has the proper
    extension.'
  prefs: []
  type: TYPE_NORMAL
- en: Unless you have a specific requirement, use PNG. It is very efficient at storing
    graphs with limited colors when compared with other formats. If you need to find
    all the supported files, you can call `plt.gcf().canvas.get_supported_filetypes()`.
  prefs: []
  type: TYPE_NORMAL
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, the guide for legends is here: [https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend).
    For annotations, it is here: [https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Plotting a simple sales graph* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding legends and annotations* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
