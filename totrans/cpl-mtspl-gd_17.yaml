- en: Client-Side Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered coding and performed penetration tests in numerous environments in
    the earlier chapters; we are now ready to introduce client-side exploitation.
    Throughout this section and a couple more, we will learn client-side exploitation
    in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we will focus on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Attacking the target's browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sophisticated attack vectors to trick the client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking Android and using Kali NetHunter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Arduino for exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injecting payloads into various files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side exploitation sometimes requires the victim to interact with malicious
    files, which makes its success dependable on the interaction. These interactions
    could be visiting a malicious URL or downloading and executing a file, which means
    we need the help of the victims to exploit their systems successfully. Therefore,
    the dependency on the victim is a critical factor in client-side exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side systems may run different applications. Applications such as a PDF
    reader, a word processor, a media player, and web browsers are the essential software
    components of a client's system. In this chapter, we will discover the various
    flaws in these applications that can lead to the entire system being compromised,
    allowing us to use the exploited system as a launch pad to test the whole of the
    internal network.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started with exploiting the client through numerous techniques, and
    analyze the factors that can cause success or failure while exploiting a client-side
    bug.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting browsers for fun and profit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web browsers are used primarily for surfing the web; however, an outdated web
    browser can lead to the entire system being compromised. Clients may never use
    the preinstalled web browsers and instead choose one based on their preference;
    however, the default preinstalled web browser can still lead to various attacks
    on the system. Exploiting a browser by finding vulnerabilities in the browser
    components is known as **browser-based exploitation**.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Firefox vulnerabilities, refer to [https://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452](https://www.cvedetails.com/product/3264/Mozilla-Firefox.html?vendor_id=452).
  prefs: []
  type: TYPE_NORMAL
- en: Refer to Internet Explorer vulnerabilities at [https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26](https://www.cvedetails.com/product/9900/Microsoft-Internet-Explorer.html?vendor_id=26).
  prefs: []
  type: TYPE_NORMAL
- en: The browser autopwn attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit offers browser autopwn, a collection of various attack modules that
    aim to exploit the target's browser by triggering the relevant vulnerabilities.
    To understand the inner workings of this module, let's discuss the technology
    behind the attack.
  prefs: []
  type: TYPE_NORMAL
- en: The technology behind the browser autopwn attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The autopwn refers to the automatic exploitation of the target. The autopwn
    module sets up most of the browser-based exploits in listening mode by automatically
    configuring them one after the other. On an incoming request from a particular
    browser, it launches the set of matching exploits. Therefore, irrespective of
    the browser a victim is using, if there are vulnerabilities in the browser, the
    autopwn script attacks it automatically with the matching exploit modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand the workings of this attack vector in detail using the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af0e3d45-40f4-46b8-8943-71d8f3a0fe42.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding scenario, an exploit server base is up and running, with some
    browser-based exploits configured with their matching handlers. As soon as the
    victim's browser connects to the exploit server, the exploit server base checks
    for the type of browser, and tests it against the matching exploits. In the preceding
    diagram, we have Internet Explorer as the victim's browser. Therefore, exploits
    matching Internet Explorer are fired at the victim's browser. The succeeding exploits
    make a connection back to the handler, and the attacker gains shell or meterpreter
    access to the target.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking browsers with Metasploit browser autopwn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To conduct a browser exploitation attack, we will use the `browser_autopwn`
    module in Metasploit, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1898ad2e-6e22-423e-bf5e-92f8a0aa073b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we loaded the `browser_autopwn` module residing at `auxiliary/server/browser_autpown2`
    successfully in Metasploit. To launch the attack, we need to specify `LHOST`,
    `URIPATH`, and `SRVPORT`. `SRVPORT` is the port on which our exploit server base
    will run. It is recommended to use port `80` or `443`, since the addition of port
    numbers to the `URL` catch many eyes and looks fishy. `URIPATH` is the directory
    path for the various exploits, and should be kept in the root directory by specifying
    `URIPATH` as `/`. Let''s set all the required parameters and launch the module,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e91a437a-0af0-43ef-80a6-bfccc81dfb6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Starting the `browser_autopwn` module will set up browser exploits in listening
    mode, waiting for the incoming connections, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bab6c08e-2dc6-491a-8e26-bd9229dd9db5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Any target connecting on port `80` of our system will get an arsenal of exploits
    thrown at it based on his browser. Let''s analyze how a victim connects to our
    malicious exploit server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc8b15eb-e65d-4635-9714-493896c05c78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that as soon as a victim connects to our IP address, the `browser_autopwn`
    module responds with various exploits until it gains Meterpreter access, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0594259-ab91-4c3c-8095-61af4f4342f4.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the `browser_autopwn` module allows us to test and actively exploit
    the victim's browser for numerous vulnerabilities; however, client-side exploits
    may cause service interruptions. It is a good idea to acquire prior permission
    before conducting a client-side exploitation test. In the upcoming section, we
    will see how a module such as a `browser_autopwn` can be deadly against numerous
    targets.
  prefs: []
  type: TYPE_NORMAL
- en: Compromising the clients of a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will try to develop approaches using which we can convert
    common attacks into a deadly weapon of choice.
  prefs: []
  type: TYPE_NORMAL
- en: As demonstrated in the previous section, sending an IP address to the target
    can be catchy, and a victim may regret browsing the IP address you sent; however,
    if a domain address is sent to the victim instead of a bare IP address, the chances
    of evading the victim's eye becomes more probable, and the results are guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting the malicious web scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A vulnerable website can serve as a launch pad to the browser autopwn server.
    An attacker can embed a hidden iFrame into web pages of the vulnerable server,
    so that anyone visiting the server will face off against the browser autopwn attack.
    Hence, whenever a person visits the injected page, the browser autopwn exploit
    server tests their browser for vulnerabilities and, in most cases, exploits it
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Mass hacking users of a site can be achieved by using **iFrame injection**.
    Let's understand the anatomy of the attack in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking the users of a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s understand how we can hack users of a website using browser exploits
    through the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47c58f9-d31a-467b-b2e0-d36c724afc31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram makes things very clear. Let''s now find out how to do
    it. But remember, the most important requirement for this attack is access to
    a vulnerable server with appropriate permissions. Let''s understand more about
    injecting the malicious script through the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69db68ca-2c5b-42cb-bf8a-a419149329af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have an example website with a web application vulnerability that allows
    us to upload a PHP-based third-party web shell. To execute the attack, we need
    to add the following line to the `index.php` page, or any other page of our choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line of code will load the malicious browser autopwn in the iFrame
    whenever a victim visits the website. Due to this code being in an `iframe` tag,
    it will include the browser autopwn automatically from the attacker's system.
    We need to save this file and allow the visitors to view the website and browse
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as the victim browses to the infected website, browser autopwn will
    run on their browser automatically; however, make sure that the `browser_autopwn`
    module is running. If not, you can use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0a36848-5ab7-4e7c-a6a8-1685ca963f2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If everything goes well, we will be able to get Meterpreter running on the
    target system. The whole idea is to use the target site to lure the maximum number
    of victims and gain access to their systems. This method is convenient while working
    on a white box test, where the users of an internal web server are the target.
    Let''s see what happens when the victim browses to the malicious website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/871b6a25-7d7c-4dcf-accb-858c3528ace9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that a call is made to the IP `192.168.10.107`, which is our browser
    autopwn server. Let''s see the view from the attacker''s side, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/470284b3-7f5d-4d16-9853-8ab12baa9562.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that exploitation is being carried out with ease. On successful exploitation,
    we will be presented with Meterpreter access, as demonstrated in the previous
    example.
  prefs: []
  type: TYPE_NORMAL
- en: The autopwn with DNS spoofing and MITM attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary motive behind all attacks on a victim's system is to gain access
    with minimal detection, and the lowest risk of catching the eye of the victim.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have seen the traditional browser autopwn attack and its modification
    to hack into the website's target audience as well. Still, we have the constraint
    of sending the link to the victim somehow.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, in this attack, we will conduct the same browser autopwn attack
    on the victim, but in a different way. In this case, we will not send any links
    to the victim. Instead, we will wait for them to browse to their favorite websites.
  prefs: []
  type: TYPE_NORMAL
- en: This attack will work only in the LAN environment. This is because to execute
    this attack we need to perform ARP spoofing, which works on layer 2, and works
    just under the same broadcast domain; however, if we can modify the `hosts` file
    of the remote victim somehow, we can also perform this over WAN, and this is called
    a **Pharming attack**.
  prefs: []
  type: TYPE_NORMAL
- en: Tricking victims with DNS hijacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started. Here, we will conduct an ARP poisoning attack against the
    victim, and spoof the DNS queries. Therefore, if the victim tries to open a standard
    website, such as [http://google.com](http://google.com), which is most commonly
    browsed to, they will get the browser autopwn service in return, which will result
    in their system getting attacked by the browser autopwn server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first create a list of entries for poisoning the DNS, so that whenever
    a victim tries to open a domain, the name of the domain points to the IP address
    of our browser autopwn service, instead of [http://www.google.com](http://www.google.com).
    The spoofed entries for the DNS reside in the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac92e6ad-e001-436e-94f3-5cddee1b7d79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, we will use one of the most popular sets of ARP poisoning
    tools, `ettercap`. First, we will search the file and create a fake DNS entry
    in it. This is important because when a victim tries to open the website instead
    of its original IP, they will get our custom-defined IP address. To do this, we
    need to modify the entries in the `etter.dns` file, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f3fe98c-81c5-4768-bf75-35390c3901d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to make the following changes in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38c5267b-3a0e-4116-b08b-375adb388762.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This entry will send the IP address of the attacker''s machine whenever a victim
    requests [http://google.com](http://google.com). After creating an entry, save
    this file and open `ettercap`, using the command shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/280ce278-5fe7-4895-b530-aeb727208753.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding command will launch Ettercap in graphical mode, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcba4a43-ca9f-48bf-9cd7-9168eaf3949f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to select the Unified sniffing... option from the Sniff tab and choose
    the interface as the default interface, which is eth0, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eaebae02-2630-4ab9-8a74-46bbe5743ad9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to scan the range of the network to identify all the hosts
    that are present on the network, which includes the victim and the router, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c1b8166-b56a-4b7a-a1db-c1b067b8e300.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Depending on the range of addresses, all the scanned hosts are filtered upon
    their existence, and all existing hosts on the network are added to the host list,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbabecee-d538-4515-88de-29f649a5fbc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To open the host list, we need to navigate to the Hosts tab and select Host
    List, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b64c9bc6-87dd-47df-84b0-760efffb7003.png)'
  prefs: []
  type: TYPE_IMG
- en: The next step is to add the router address to **Target 2** and the victim to
    **Target 1**. We have used the router as **Target 2** and the victim as **Target
    1**, because we need to intercept information coming from the victim and going
    to the router.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to browse to the Mitm tab and select ARP Poisoning, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba297a6b-0c36-4488-9df6-0720dfbd8ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on OK and proceed to the next step, which is to browse to the Start
    tab and choose Start Sniffing. Clicking on the Start Sniffing option will notify
    us with a message saying `Starting Unified sniffing...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c114c818-adfe-4b05-8bc2-e1a4f53a30f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to activate the DNS spoofing plugin from the Plugins tab,choosing
    Manage the plugins, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a1de148-5074-420b-bf44-e7b8e73b31c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on DNS spoof plug-in to activate DNS spoofing. Now, what happens
    after activating this plugin is that it will start sending the fake DNS entries
    from the `etter.dns` file that we modified previously. Therefore, whenever a victim
    requests a particular website, the fraudulent DNS entry from the `etter.dns` file
    returns instead of the website''s original IP. This phony entry is the IP address
    of our browser autopwn service. Therefore, instead of going to the original website,
    a victim is redirected to the browser autopwn service, where their browser will
    be compromised:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8934ff24-fe87-4ac6-a09a-502c28151de8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also start our malicious `browser_autopwn` service on port `80`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d65b390-e000-4596-b44d-ce92de05b118.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s see what happens when a victim tries to open [http://google.com/](http://google.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/923abff6-f76b-4fe2-b0e2-5a78860e8ac8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also see if we got something interesting on the attacker side, or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52c01a0b-36e2-42a0-9603-4b6ebc8f9648.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Amazing! We opened Meterpreter in the background, which concludes that our
    attack has been successful, without sending any links to the victim. The advantage
    of this attack is that we never posted any links to the victim, since we poisoned
    the DNS entries on the local network; however, to execute this attack on WAN networks,
    we need to modify the host file of the victim, so that whenever a request to a
    specific URL is made, an infected entry in the host file redirects it to our malicious
    autopwn server, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95c5e863-7d54-4cc0-bd80-45bd7041b3c3.png)'
  prefs: []
  type: TYPE_IMG
- en: So, many other techniques can be reinvented using a variety of attacks supported
    in Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Using Kali NetHunter with browser exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw how we could spoof the DNS queries and use it against the target on
    the same network. We can perform a similar yet hassle-free attack with the NetHunter
    Android device as well. To evade the eyes of the victim, we won''t use any specific
    website like Google, as we did in the previous demonstration. In this attack type,
    we will inject all the sites a target is browsing using a script injection attack
    through the **cSploit** tool in Kali NetHunter. So, let''s browse through cSploit
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a219f45f-6784-487c-82e1-7eb195fb3e0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We assume that our target is `DESKTOP-PESQ21S` clicking on it will open a submenu
    containing all the options listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28e22458-77d1-44d4-b0d3-a592c98d11fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s choose MITM, followed by Script Injection and CUSTOM CODE, which will
    result in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b91ce379-7a05-41a9-9f34-965a27679df8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use a custom script attack and the default script to get started. Now,
    what this will do is that it will inject this script into all the web pages being
    browsed by the target. Let''s press OK to launch the attack. Once the target opens
    a new website, the victim will be presented with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71587fdc-23ca-4556-92d0-1e7e77b4d3cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that our attack succeeded flawlessly. We can now create some JavaScript
    that can load the browser autopwn service. I am intentionally leaving the JavaScript
    exercise for you to complete, so that while creating the script, you can research
    more techniques such as a JavaScript-based cookie logger; however, on running
    the JavaScript, which will load the browser autopwn service in the background,
    we will have the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93235454-fb60-409a-bedd-96f0d8188d91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Amazing, right? NetHunter and cSploit are the game changers. Nevertheless,
    if you somehow are unable to create JavaScript, you can redirect the target using
    the Redirect option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a27093b-9793-4e0a-a676-661c7cdc5b15.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking the OK button will force all the traffic to the preceding address on
    port `8080` which is nothing but the address of our autopwn server.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit and Arduino - the deadly combination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arduino-based microcontroller boards are tiny and unusual pieces of hardware
    that can act as lethal weapons when it comes to penetration testing. A few of
    the Arduino boards support keyboard and mouse libraries, which means that they
    can serve as HID devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/805955d7-654d-41b1-a4c5-153611bc715b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Therefore, these little Arduino boards can stealthily perform human actions
    such as typing keys, moving and clicking with a mouse, and many other things.
    In this section, we will emulate an Arduino Pro Micro board as a keyboard to download
    and execute our malicious payload from the remote site; however, these little
    boards do not have enough memory to hold the payload within their memory, so a
    download is required.
  prefs: []
  type: TYPE_NORMAL
- en: For more on exploitation using HID devices, refer to USB Rubber Ducky, or Teensy.
  prefs: []
  type: TYPE_NORMAL
- en: The **Arduino Pro Micro** costs less than $4 on popular shopping sites such
    as [https://www.aliexpress.com/](https://www.aliexpress.com/) and many others.
    Therefore, it is much cheaper to use Arduino Pro Micro rather than Teensy and
    USB Rubber Ducky.
  prefs: []
  type: TYPE_NORMAL
- en: It is effortless to configure Arduino using its compiler software. Readers who
    are well versed in programming concepts will find this exercise very easy.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://www.arduino.cc/en/Guide/Windows](https://www.arduino.cc/en/Guide/Windows) for
    more on setting up and getting started with Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what code we need to burn on the Arduino chip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have a function called `type` that takes two arguments, which are the name
    of the key to press and release, which determines if we need to release a particular
    key. The next function is `print`, which overwrites the default `print` function
    by outputting text directly on the keyboard press function. Arduino has mainly
    two functions, which are `loop` and `setup`. Since we only require our payload
    to download and execute once, we will keep our code in the `setup` function. The
    `Loop` function is required when we need to repeat a block of instructions. The
    `delay` function is equivalent to the `sleep` function that halts the program
    for a number of milliseconds. `type(KEY_LEFT_GUI, false);` will press the left
    Windows key on the target, and since we need to keep it pressed, we will pass
    `false` as the release parameter. Next, in the same way, we pass the `d` key.
    Now, we have two keys pressed, which are Windows + *D* (the shortcut to show the
    desktop). As soon as we provide `Keyboard.releaseAll();`, the `Windows+d` command
    is pushed to execute on the target, which will minimize everything from the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Find out more about Arduino keyboard libraries at [https://www.arduino.cc/en/Reference/KeyboardModifiers](https://www.arduino.cc/en/Reference/KeyboardModifiers).
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we provide the next combination to show the run dialog box. Next,
    we print the PowerShell command in the run dialog box, which will download our
    payload from the remote site, which is `192.168.10.107/pay2.exe`, to the `Temp`
    directory, and will execute it from there. Providing the command, we need to press
    *Enter* to run the command. We can do this by passing `KEY_RETURN` as the key
    value. Let''s see how we write to the Arduino board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60db5ac4-e456-44a9-be61-089f6f46890f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we have to choose our board type by browsing to Tools menu, as shown
    in the preceding screenshot. Next, we need to select the communication port for
    the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48473637-2cad-4666-a1bd-e0317a13d2e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to write the program to the board by pressing the -> icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b48c16d-a8e2-4b7a-991c-88cebff09851.png)'
  prefs: []
  type: TYPE_IMG
- en: Our Arduino is now ready to be plugged into the victim's system. The good news
    is that it emulates a keyboard. Therefore, you do not have to worry about detection;
    however, the payload needs to be obfuscated well enough that it evades AV detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plug in the device like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e5af455-79e3-4533-af20-750fcbbf1590.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we plug in the device, within a few milliseconds, our payload is
    downloaded, executes on the target system, and provides us with the following
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a9f2dae-4f3e-49d8-8cf4-57e79493cbfb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at how we generated the payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3acb414-54c6-428e-84ee-ecc40da7ce96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we created a simple x64 Meterpreter payload for Windows, which will
    connect back to port `5555`. We saved the executable directly to the Apache folder,
    and initiated Apache as shown in the preceding screenshot. Next, we merely started
    an exploit handler that will listen for an incoming connection on port `5555`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9047da23-c2d0-4452-ac55-63c27bf4cfa2.png)'
  prefs: []
  type: TYPE_IMG
- en: We saw a very new attack here. Using a cheap microcontroller, we were able to
    gain access to a Windows 10 system. Arduino is fun to play with, and I would recommend
    further reading on Arduino, USB Rubber Ducky, Teensy, and Kali NetHunter. Kali
    NetHunter can emulate the same attack using any Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: For more on Teensy, go to [https://www.pjrc.com/teensy/](https://www.pjrc.com/teensy/).
  prefs: []
  type: TYPE_NORMAL
- en: For more on USB Rubber Ducky, go to [http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe](http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe).
  prefs: []
  type: TYPE_NORMAL
- en: File format-based exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be covering various attacks on the victim using malicious files in this
    section. Whenever these malicious files run, Meterpreter or shell access is provided
    to the target system. In the next section, we will cover exploitation using malicious
    documents and PDF files.
  prefs: []
  type: TYPE_NORMAL
- en: PDF-based exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PDF file format-based exploits are those that trigger vulnerabilities in various
    PDF readers and parsers, which are made to execute the payload carrying PDF files,
    presenting the attacker with complete access to the target system in the form
    of a Meterpreter shell or a command shell; however, before getting into the technique,
    let''s see what vulnerability we are targeting, and what the environment details
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Test cases** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerability | This module exploits an unsafe JavaScript API implemented
    in Nitro and Nitro Pro PDF Reader version 11\. The `saveAs()` Javascript API function
    allows for writing arbitrary files to the filesystem. Additionally, the `launchURL()`
    function allows an attacker to execute local files on the filesystem, and bypass
    the security dialog. |'
  prefs: []
  type: TYPE_TB
- en: '| Exploited on the operating system | Windows 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Software version | Nitro Pro 11.0.3.173 |'
  prefs: []
  type: TYPE_TB
- en: '| CVE details | [https://www.cvedetails.com/cve/CVE-2017-7442/](https://www.cvedetails.com/cve/CVE-2017-7442/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Exploit details | `exploit/windows/fileformat/nitro_reader_jsapi` |'
  prefs: []
  type: TYPE_TB
- en: 'To exploit the vulnerability, we will create a PDF file and send it to the
    victim. When the victim tries to open our malicious PDF file, we will be able
    to get the Meterpreter shell or the command shell based on the payload used. Let''s
    take a step further, and try to build the malicious PDF file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3020904-f84d-48b1-b77f-8769dde6541a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will need to set `LHOST` to our IP address, and the `LPORT` and `SRVPORT`
    of our choice. For demonstration purposes, we will choose to leave the port set
    default to `8080` and `LPORT` to `4444`. Let''s run the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/505520d9-05a4-409e-aaad-d4c2ffde20ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to send the `msf.pdf` file to the victim through one of many means,
    such as uploading the file and sending the link to the victim, dropping the file
    in a USB stick, or maybe sending a compressed ZIP file format through an email;
    however, for demonstration purposes, we have hosted the file on our Apache server.
    Once the victim downloads and executes the file, they will see something similar
    to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1deb1462-865f-4d77-98af-ae64aa9b6c63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Within a fraction of a second, the overlayed window will disappear, and will
    result in a successful Meterpreter shell, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ea1162a-a9e8-4015-a241-b6386f513749.png)'
  prefs: []
  type: TYPE_IMG
- en: Word-based exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Word-based exploits focus on various file formats that we can load into Microsoft
    Word; however, a few file formats execute malicious code, and can let the attacker
    gain access to the target system. We can take advantage of Word-based vulnerabilities
    in the same way as we did for PDF files. Let''s quickly see some basic facts related
    to this vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Test cases** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerability | This module creates a malicious RTF file which, when opened
    in vulnerable versions of Microsoft Word, will lead to code execution. The flaw
    exists in how an **olelink** object can make an HTTP(s) request and execute HTA
    code in response. |'
  prefs: []
  type: TYPE_TB
- en: '| Exploited on the operating system | Windows 7 32-bit |'
  prefs: []
  type: TYPE_TB
- en: '| Software version in our environment | Microsoft Word 2013 |'
  prefs: []
  type: TYPE_TB
- en: '| CVE details | [https://www.cvedetails.com/cve/cve-2017-0199](https://www.cvedetails.com/cve/cve-2017-0199)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Exploit details | `exploit/windows/fileformat/office_word_hta` |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s try gaining access to the vulnerable system with the use of this vulnerability.
    So, let''s quickly launch Metasploit and create the file, as demonstrated in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c8845b2-71db-4f51-9e19-10f9d2e3e99d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set the `FILENAME` and `SRVHOST` parameters to `Report.doc` and our
    IP address respectively, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0698f567-a9c4-454b-a423-7f54b66e54ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The generated file is stored in the `/root/.msf4/local/Report.doc` path. Let''s
    move this file to our Apache `htdocs` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce9289e2-89a4-4269-aa05-c9628e20aa43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to send the `Report.doc` file to the victim through one of many means,
    such as uploading the file and sending the link to the victim, dropping the file
    in a USB stick, or maybe sending a compressed ZIP file format through an email;
    however, for demonstration purposes, we have hosted the file on our Apache server.
    Let''s download it on the victim machine as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62a25f69-a9c3-4d83-872a-7d6967238dce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s open this file and check whether something happens or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfa24d6a-0d90-4b1f-b4b4-21b4cc699ab0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see nothing much has happened here. Let''s go back to our Metasploit
    console, and see if we got something:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a219fea-6305-4fa8-9b08-92bd2fd18f04.png)'
  prefs: []
  type: TYPE_IMG
- en: Bang bang! We got Meterpreter access to the target with ease. We just saw how
    easy it is to create a malicious Word document, and to gain access to target machines.
    But wait! Is it this easy? Nope, we have not taken the security of the target
    system into account yet! In real-world scenarios, we have plenty of antivirus
    solutions and firewalls running on the target machines, which will eventually
    ruin our party. We will tackle such defenses in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking Android with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android platform can be attacked either by creating a simple APK file,
    or by injecting the payload into the existing APK. We will cover the first one.
    Let''s get started by generating an APK file with `msfvenom`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6c135fd-7c18-4d05-aede-dcaec72610bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On producing the APK file, all we need to do is either convince the victim
    (perform social engineering) to install the APK, or physically gain access to
    the phone. Let''s see what happens on the phone as soon as a victim downloads
    the malicious APK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7eaa041d-4e0e-4115-9ccb-c9f6a7910c4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the download is complete, the user installs the file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9ebb820-b4b5-4318-b360-500c999f7004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Most people never notice what permissions an app asks for while installing
    a new application on the smartphone. So, an attacker gains complete access to
    the phone and steals personal data. The preceding screenshot lists the required
    permissions an application needs to operate correctly. Once the install happens
    successfully, the attacker gains complete access to the target phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46575e06-9f78-4eac-a0e0-bd57c55b21e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Whoa! We got Meterpreter access easily. Post-exploitation is widely covered
    in the next chapter; however, let''s see some of the basic functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39e3fc1b-9ac2-41db-936b-b780e749d90f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that running the `check_root` command states that the device is
    rooted. Let''s see some other functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16336ba2-8434-4dcb-9f86-0743f0c1c8d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use the `send_sms` command to send an SMS to any number from the exploited
    phone. Let''s see if the message was delivered or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d515fdf6-33e4-4bac-9c00-0d68772e17e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! The message was delivered successfully. Meanwhile, let''s see what system
    we broke into using the `sysinfo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a68d758a-139e-4f60-871b-4ba04ae54042.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s geolocate the mobile phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57c4bd84-9e55-4cd6-8957-60ff7555654a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Browsing to the Google Maps link, we can get the exact location of the mobile
    phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0879a63b-aed1-4a9b-aa99-f640e3435960.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take some pictures with the exploited phone''s camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64f00608-de17-4222-8901-45ca7e320564.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see we got the picture from the camera. Let''s view the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51d63ae1-66b8-43d9-b720-714248135412.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explained a hands-on approach to client-based exploitation. Learning
    client-based exploitation will ease a penetration tester into internal audits,
    or into a situation where internal attacks can be more impactful than external
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we looked at a variety of techniques that can help us attack
    client-based systems. We looked at browser-based exploitation and its variants.
    We exploited Windows-based systems using Arduino. We learned how we could create
    various file format-based exploits, and how to use Metasploit with DNS-spoofing
    attack vectors. Lastly, we also learned how to exploit Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can feel free to perform the following exercises in order to enhance your
    skills:'
  prefs: []
  type: TYPE_NORMAL
- en: Try performing the DNS spoofing exercise with BetterCAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating PDF and Word exploit documents from Metasploit and try evading signature
    detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try binding the generated APK for Android with some other legit APK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will look at post-exploitation in detail. We will cover
    some advance post-exploitation modules which will allow us to harvest tons of
    useful information from the target systems.
  prefs: []
  type: TYPE_NORMAL
