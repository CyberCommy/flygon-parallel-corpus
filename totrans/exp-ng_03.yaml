- en: Using Angular CLI to Generate Angular Apps with Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular CLI is a command-line interface for Angular that helps you kick-start
    your application development with the boilerplate code that follows all the necessary
    best practices. By executing the commands in Angular CLI, you can generate services,
    components, routes, and pipes for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and setting up Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating code for new applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating components and routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating directives and pipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating builds targeting various environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests for your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular CLI is a command-line interface available as a node package. Angular
    CLI, introduced with Angular, helps you develop applications faster by generating
    the boilerplate code for a new application and adding features such as services,
    pipes, components, and directives to existing applications. Angular CLI is very
    powerful and handy in scaffolding your application easily. With the help of Angular
    CLI, we can create, build, test, and run our application, which will be a great
    relief to the developers.
  prefs: []
  type: TYPE_NORMAL
- en: Angular CLI runs under node and is dependent on many packages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Angular CLI, we must have the latest version of node and npm installed
    in our system. Make sure the required packages are installed already and then
    start installing Angular CLI globally. The minimum required npm version is 3.x.x
    and the node version is 4.x.x. Sometimes, you may get an error when installing
    Angular CLI. In such cases, make sure you have the latest version of node.js installed.
    We can verify the version of node by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check the version of npm by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we know the versions of node and npm installed in our development machine.
    Let''s install Angular CLI globally by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Angular CLI has been installed and is available globally to use in our development
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Generating code for a new application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have Angular CLI ready to use now. Let''s generate a boilerplate code for
    an Angular application that displays the list of books. We will call the name
    of the application as `BookList`. Execute the following command in the node.js
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a folder named `BookList` and generate the boilerplate
    code to get started with the Angular application. The following image shows the
    file structure organized in the generated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb0c2311-7712-431d-afa5-5751739e71c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To make sure the generated code works fine, let''s run the application by executing
    the following commands. First navigate to the application folder by executing
    this statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute the following code to launch the application in the development
    server :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s browse to `http://localhost:4200/` and the following page will
    be rendered in the browser with the default text if the generated code is fine.
    If you get an error, make sure the firewall is not blocking the port 4200 and
    Angular CLI did not throw any error while generating the boilerplate code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8829f1e-1720-4523-a364-5b49c5c2d77d.png)'
  prefs: []
  type: TYPE_IMG
- en: Generating components and routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A component is a logical grouping of functionalities, views, and styles applicable
    to the view and a class associated to the component that deals with these artifacts.
    Components take responsibility for rendering the view as per the business logical
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generate code for components using Angular CLI. This tool is very handy
    in scaffolding the components. Let''s generate a component named `booklist` for
    our application by executing the following statement. Navigate to the Angular
    project folder by executing the command here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute the following Angular CLI command to generate the component `Booklist`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the preceding statement creates the `booklist.component.css`, `booklist.component.html`,
    `booklist.component.spec.ts` and the `booklist.component.ts`, as shown in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e3923ee1-aa83-4bde-802d-4bfd2ba9db35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `booklist.component.ts` file takes care of rendering the associated view
    according to the business logic needs. The code snippet generated by the book
    component is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `BooklistComponent` class is decorated with the `@Component`
    directive along with the metadata such as the selector, `templateUrl`, and `styleUrls`.
    The metadata selector enables Angular to instantiate the component `BooklistComponent`
    when it encounters the `app-booklist` selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular CLI also generated the template file `booklist.component.html`
    with the following content. Angular will parse and render this content according
    to the instructions given in the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We can also add styles specific to this template in the generated file `booklist.component.css`
    and the component will pick these styles, as the metadata `styleUrls` is mapped
    with the path of `booklist.component.css`.
  prefs: []
  type: TYPE_NORMAL
- en: '`booklist.component.spec.ts` is generated to add the test methods to assert
    the functionalities of `BooklistComponent`. The code snippet of `booklist.component.spec.ts`
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routes instruct Angular on navigating the application. Routing enables Angular
    to load only the views specific to routes without reloading the entire page or
    application. At the time of writing this chapter, generating a route using Angular
    CLI is disabled and will be enabled soon.
  prefs: []
  type: TYPE_NORMAL
- en: Generating services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Services are user-defined classes to solve some purposes. Angular recommends
    having only template-specific codes in components. A component's responsibility
    is to enrich the UI/UX in an Angular application and it delegates business logic
    to services. Components are the consumers of services.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the component in place that helps render the `Booklist` template. Now,
    let''s run a CLI command to generate a service to serve the list of books. Execute
    the following command to generate `booklist.services.ts` and `booklist.services.spec.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/859ac249-25ad-4414-bb59-2f676782f5d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code snippet of the generated `booklist.service.ts` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `BooklistService` is decorated with `@Injectible` so that this booklist
    service will be available to the components. Also there is a warning message,
    Service is generated but not provided, it must be provided to be used. It means
    that to consume `BooklistService`; it needs to be provided to a component that
    is going to consume it. Providers in Angular will be discussed in detail in the
    [Chapter 13](2636ff55-fe1e-4e22-995c-ce0f83eea7f8.xhtml), *Applying Dependency
    Injection*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular CLI also generated a file to write test methods to assert `BooklistService`
    and the code snippet of `booklist.service.spec.ts` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Generating directives and pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A class decorated with `@Directive` to attach metadata is called a directive.
    It is an instruction or guideline to render the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have seen generating components and services. Now, let''s generate directives
    and pipes using Angular CLI. We will start with creating a directive named book.
    Run the following command to generate the directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The outcome of executing the command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8dda0309-762f-45d9-9aac-17c4ec73c6f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Executing this command creates two files, namely, `book.directive.spec.ts`
    and `book.directive.ts` respectively. Here is the code snippet of `book.directive.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The code snippet of `book.directive.spec.ts` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pipe instructs Angular in filtering or rendering the input data. A pipe transforms
    the input data according to the logic given in the pipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s generate a pipe using Angular CLI by executing the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3abd8478-f105-4d2d-9c08-c00603b70577.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, I created a pipe named `bookfilter` using Angular CLI. Note that it also
    created a test file, `bookfilter.pipe.spec.ts`, for writing test methods to assert
    the pipes. The code snippet of the `bookfilter.pipe.ts` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The code snippet generated for the test file `bookfilter.pipe.spec.ts` is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating builds targeting various environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Angular CLI, we can also create builds for our application targeting various
    environments, such as development and production. The application will be configured
    specific to environments. For example, an application may be configured to use
    staging URLs for APIs in development or staging environments and production URLs
    of APIs will be configured in a LIVE or production environment. Developers will
    be manually updating the configuration of the URL as per the environment the application
    is built on. Angular facilitates to automate this process of creating builds by
    targeting various environments.
  prefs: []
  type: TYPE_NORMAL
- en: A constant variable environment is maintained in a file named `environment.ts`.
    This file will help to override the default values as per the parameter passed
    when executing the build command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the production file, we need to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will make use of the settings in `environment.prod.ts`. The mapping
    to identify the environment file is instructed in `angular-cli.json`, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Running tests for your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing the application is the essential process to be carried out before moving
    it to production. Developers can write tests to assert the behavior of the application.
    Writing proper tests will protect the application from deviating away from the
    requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine is a test framework that facilitates to write tests to assert the behavior
    of the application and execute the tests in the browser using the HTML test runner.
    Karma is a test runner, which enables the developer to write unit tests simultaneously
    during the development phase. Once the build process is completed, tests will
    be executed using Karma. Protractor can be used to run end-to-end tests that assert
    the workflow of the application as an end-user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command runs the tests in the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The end-to-end test can be executed by running the command here, and it will
    run successfully only when the application is served by the command ng serve.
    This end-to-end test is run by Protractor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: I am not going into detail on the content of each of files generated as there
    are chapters to explain in detail about them.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can update the Angular CLI version in a global package and in your local
    project. To update the Angular CLI package globally, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the CLI in your local project folder, run the command here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That was smooth and easy, wasn't it? Angular CLI makes the life of the developer
    easier by generating the boilerplate code for various artifacts of an Angular
    application. You started learning about the powerful tool Angular CLI and how
    it helps you to kick-start your application with the boilerplate code. Then, you
    learned to generate components, directives, pipes, routes, and services using
    the Angular command line interface. Finally, you also learned about building an
    Angular application using the Angular CLI. In the next chapter, we will discuss
    about working with Angular components.
  prefs: []
  type: TYPE_NORMAL
