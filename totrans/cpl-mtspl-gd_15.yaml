- en: Testing Services with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s talk about testing various specialized services. It is likely during
    your career as a penetration tester that you will come across a testable environment
    that only requires testing to be performed within a service such as databases,
    VOIP, or SCADA. In this chapter, we will look at various developing strategies
    to use while carrying out penetration tests on these services. In this chapter,
    we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding SCADA exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fundamentals of ICS and their critical nature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carrying out database penetration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing VOIP services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service-based penetration testing requires sharp skills and a good understanding
    of services that we can successfully exploit. Therefore, in this chapter, we will
    look at both the theoretical and the practical challenges we might face during
    a service-oriented penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of testing SCADA systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Supervisory Control and Data Acquisition** (**SCADA**) is a composition of
    software along with hardware elements that are required to control activities
    in dams, power stations, oil refineries, large server control services, and so
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: SCADA systems are built for highly specific tasks, such as controlling the level
    of dispatched water, controlling the gas lines, controlling the electric power
    grid to manage power in a particular city, and various other operations.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals of ICS and its components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SCADA systems are **Industrial Control System** (**ICS**) systems, which are
    used in critical environments or where life is at stake if anything goes wrong.
    The industrial control systems are the systems that are responsible for controlling
    various processes, such as mixing two chemicals in a definite ratio, inserting
    carbon dioxide in a particular environment, putting the proper amount of water
    in the boiler, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The components of such SCADA systems are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Component** | **Use** |'
  prefs: []
  type: TYPE_TB
- en: '| **Remote Terminal Unit** (**RTU**) | RTU is the device that converts analog
    measurements into digital information. Additionally, the most widely used protocol
    for communication is **ModBus****.** |'
  prefs: []
  type: TYPE_TB
- en: '| **Programmable Logic Controller** (**PLC**) | PLCs are integrated with I/O
    servers and real-time operating systems; it works exactly like RTU. It also uses
    protocols such as FTP and SSH. |'
  prefs: []
  type: TYPE_TB
- en: '| **Human Machine Interface** (**HMI**) | HMI is the graphical representation
    of the environment, which is under observation or is being controlled by the SCADA
    system. HMI is the GUI interface and one of the areas that is exploited by attackers.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Intelligent Electronic Device** (**IED**) | IED is a microchip, or more
    specifically a controller, that can send commands to perform a particular action,
    such as closing the valve after a specific amount of a specific substance is mixed
    with another. |'
  prefs: []
  type: TYPE_TB
- en: The significance of ICS-SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ICS systems are very critical, and if the control of them were to be placed
    into the wrong hands, a disastrous situation could occur. Just imagine a situation
    where ICS control for a gas line was hacked by a malicious actorâ€”denial of service
    is not the only thing we could expect; damage to some SCADA systems could even
    lead to loss of life. You might have seen the movie *Die Hard 4.0*, in which the
    hackers redirecting the gas lines to the particular station look cool, and traffic
    chaos seems like a source of fun. However, in reality, when a situation like this
    arises, it will cause severe damage to property and can cause loss of life.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in the past, with the advent of the **Stuxnet worm**, the conversation
    about the security of ICS and SCADA systems has been severely violated. Let's
    take a further step and discuss how we can break into SCADA systems or test them
    out so that we can secure them for a better future.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting HMI in SCADA servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss how we can test the safety of SCADA systems.
    We have plenty of frameworks that can test SCADA systems, but considering all
    of them will push us beyond the scope of this book. Therefore, to keep it simple,
    we will continue our discussion specific to SCADA HMI exploitation carried out
    using Metasploit only.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of testing SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's understand the basics of exploiting SCADA systems. SCADA systems can be
    compromised using a variety of exploits in Metasploit, which were added recently
    to the framework. Some of the SCADA servers located on the internet may have a
    default username and password. However, due to advances in security, finding one
    with default credentials is highly unlikely, but it may be a possibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Popular internet scanner websites such as [https://shodan.io](https://shodan.io)
    are an excellent resource for finding SCADA servers that are internet facing;
    let''s see the steps we need to perform to integrate Shodan with Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create an account on the [https://shodan.io](https://shodan.io)
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: After registering, we can simply find our API key within our account. Obtaining
    the API key, we can search various services in Metasploit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up Metasploit and load the `auxiliary/gather/shodan_search` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `SHODAN_API` key option in the module to the API key of your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s try finding SCADA servers using systems developed by Rockwell Automation
    by setting the `QUERY` option to `Rockwell`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ecdd59a9-8596-472a-a3f0-d5e176839209.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the required `SHODAN_APIKEY` option and `QUERY` option, as shown in
    the preceding screenshot. Let''s analyze the results by running the module as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1fa57e7f-7617-4803-80ac-8a90f1f992db.png)'
  prefs: []
  type: TYPE_IMG
- en: We have found a large number of systems on the internet running SCADA services
    via Rockwell Automation using the Metasploit module with ease. However, it is
    always better to not try any attacks on networks you know nothing about, especially
    the ones you don't have the authority for.
  prefs: []
  type: TYPE_NORMAL
- en: SCADA-based exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In recent times, we have seen that SCADA systems are exploited at much higher
    rates than in the past. SCADA systems may suffer from various kinds of vulnerabilities,
    such as stack-based overflow, integer overflow, cross-site scripting, and SQL
    injection.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the impact of these vulnerabilities may cause danger to life and property,
    as we have discussed before. The reason why the hacking of SCADA devices is a
    possibility lies mostly in the careless programming and poor operating procedures
    of SCADA developers and operators.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see an example of a SCADA service and try to exploit it with Metasploit.
    In the following case, we will exploit a DATAC RealWin SCADA Server 2.0 system
    based on a Windows XP system using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: The service runs on port `912`, which is vulnerable to buffer overflow in the
    `sprintf` C function. The `sprintf` function is used in the DATAC RealWin SCADA
    server's source code to display a particular string constructed from the user's
    input. The vulnerable function, when abused by the attacker, can lead to full
    compromise of the target system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try exploiting the DATAC RealWin SCADA Server 2.0 with Metasploit using
    the `exploit/windows/scada/realwin_scpc_initialize` exploit as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42dd3f26-9db1-498c-867a-70c4525394d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the RHOST as `192.168.10.108` and the payload as `windows/meterpreter/bind_tcp`.
    The default port for DATAC RealWin SCADA is `912`. Let''s exploit the target and
    check if we can exploit the vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01da61da-eebd-44a0-9ede-97fd66c8a114.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! We successfully exploited the target. Let''s load the `mimikatz` module
    to find the system''s password in clear text as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1dbabff-f1c4-4bb0-94dd-eaccc397d720.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that by issuing the `kerberos` command, we can find the password
    in clear text. We will discuss the `mimikatz` functionality and additional libraries
    further in the latter half of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking the Modbus protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the SCADA servers are on the internal/air-gapped networks. However,
    consider a possibility where an attacker has gained initial access to an internet
    facing server and pivoting from the same; he can alter the state of PLCs, read
    and write values to the controller, and cause havoc. Let''s see an example demonstrating
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ac27c2d-4e6f-4e7c-a687-0244a8de2b3b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the preceding screenshot that an attacker has gained access to
    a system on IP range `192.168.174.0` and has already identified and added a route
    to an internal network range, which is `192.168.116.0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, an attacker would perform a port scan on the hosts in the internal
    network. Suppose we found a system with an IP of `192.168.116.131` up on the internal
    network. An extensive port scan is required as bad practices here may cause severe
    problems. Let''s see how we can perform a port scan in such scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65587dae-230f-4d26-88f1-aa8519b66277.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the preceding scan is not a conventional scan. We used the
    `-n` switch to disable DNS resolution. The `-sT` switch denotes a TCP connect
    scan with a scan delay of 1 second, which means that the ports will be scanned
    sequentially and one at a time. The Nmap scan yields the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fba33e9a-df61-476f-a50b-bc1054622eb8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The port number `502` is a standard Modbus/TCP server port, allowing communication
    with the PLCs from the SCADA software. Interestingly, we have a Metasploit `modbusclient`
    module that can communicate with the Modbus port and may allow us to alter values
    of the registers in the PLC. Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e80eb993-c4be-4871-8428-3d3c8742d703.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the default action of the auxiliary module is to read registers.
    Setting four registers as `DATA_ADDRESS` will yield the value residing in data
    register number four. We can see that the value is `0`. Let''s try it on a different
    register which is at `DATA_ADDRESS 3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f95befd-0291-4bac-8d1d-c03744e61ab8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Well, setting the value to `3` reads `56` as the output which means that the
    value in the third data register is `56`. We can visualize this value as the temperature,
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0a56d37-81c2-42e4-a37f-a67cc572683b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An attacker can alter these values by changing the action of the auxiliary
    module to `WRITE_REGISTERS`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03ff06a1-e6ba-43b7-867c-63367677e804.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see whether we can write the value to the register or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b79f2234-b0bc-4879-a3c1-3918122849cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the value was altered successfully, which also means that on
    the HMI there could be an inevitable increase in the readings of the temperature,
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7b24cb0-72c8-4071-88bc-825346190b7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding example interface is just used for illustration purposes and
    to demonstrate how critical SCADA and ICS systems are. We can also manipulate
    the values in coils by setting the action to `READ_COILS`. Also, we can read/write
    data in a number of registers and coils by setting the `NUMBER` option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09873bb7-5da1-41d1-9fe3-5bb43e5586fa.png)'
  prefs: []
  type: TYPE_IMG
- en: We have plenty of exploits in Metasploit, which specifically target vulnerabilities
    in SCADA systems. To find out more information about these vulnerabilities, you
    can refer to the most significant resource on the web for SCADA hacking and security
    at:Â [http://www.scadahacker.com](http://www.scadahacker.com). You should be able
    to see many exploits listed under the *msf-scada* section at:Â [http://scadahacker.com/resources/msf-scada.html](http://scadahacker.com/resources/msf-scada.html).
  prefs: []
  type: TYPE_NORMAL
- en: Securing SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing the SCADA network is the primary goal for any penetration tester on
    the job. Let's move on to the next section and learn how we can implement SCADA
    services securely and impose a restriction on it.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing secure SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Securing SCADA is a tough job when it has to be performed practically; however,
    we can look for some of the following key points when securing SCADA systems:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep an eye on every connection to the SCADA network and check if any unauthorized
    attempts were made
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure all the network connections are disconnected when they are not required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement all the security features provided by the system vendors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement IDPS technologies for both internal and external systems and apply
    incident monitoring for 24 hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document all the network infrastructure and define individual roles to administrators
    and editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish IR teams and blue teams for identifying attack vectors on a regular
    basis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Networks can be regulated in the event of attacks related to unauthorized access,
    unwanted open services, and so on. Implementing the cure by removing or uninstalling
    services is the best possible defense against various SCADA attacks.
  prefs: []
  type: TYPE_NORMAL
- en: SCADA systems are implemented on Windows XP boxes mostly, and this increases
    the attack surface significantly. If you are deploying a SCADA system, make sure
    your Windows boxes are up to date to prevent the more common attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Database exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After covering the basics of SCADA exploitation, let's move on to testing database
    services. In this section, our primary goal will be to test the databases and
    check for various vulnerabilities. Databases contain critical business data. Therefore,
    if there are vulnerabilities in the database management system, it can lead to
    remote code execution or full network compromise, which may lead to the exposure
    of a company's confidential data. Data related to financial transactions, medical
    records, criminal records, products, sales, marketing, and so on could be beneficial
    to the buyers of these databases in the underground community.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that the databases are fully secure, we need to develop methodologies
    for testing these services against various types of attack. Now, let's start testing
    databases and look at the different phases of conducting a penetration test on
    a database.
  prefs: []
  type: TYPE_NORMAL
- en: SQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft launched its database server back in 1989\. Today, a significant share
    of the websites run on the latest version of MSSQL serverâ€“the backend for the
    sites. However, if the website is extensive or handles many transactions in a
    day, it is crucial that the database is free from any vulnerabilities and problems.
  prefs: []
  type: TYPE_NORMAL
- en: In this section on testing databases, we will focus on the strategies to test
    database management systems efficiently. By default, MSSQL runs on TCP port number
    `1433` and the UDP service runs on port `1434`. So, let's start testing MSSQL
    Server 2008 running on Windows 8.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning MSSQL with Metasploit modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's jump into Metasploit-specific modules for testing the MSSQL server and
    see what kind of information we can gain by using them. The very first auxiliary
    module we will be using is `mssql_ping`. This module will gather additional service
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s load the module and start the scanning process as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75c3300b-d82a-4fbb-bf86-9c4eac540772.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see from the previous results that we got a good amount of information
    from the scan. Nmap offers a similar module to scan MSSQL database. However, Metasploit
    auxiliaries have a competitive edge of readability over the output from Nmap.
    Let's see what other modules can be used to test the MSSQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Brute forcing passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step in penetration testing a database is to check authentication precisely.
    Metasploit has a built-in module named `mssql_login`, which we can use as an authentication
    tester to brute force the username and password of an MSSQL server database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s load the module and analyze the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a7b5425-8417-4274-8bff-c9ccc237c022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we run this module, it tests for the default credentials at the
    very first step, that is, with the username `sa` and password blank, and finds
    that the login was successful. Therefore, we can conclude that the default credentials
    are still being used. Additionally, we must try testing for more credentials in
    case the `sa` account is not immediately found. To achieve this, we will set the
    `USER_FILE` and `PASS_FILE` parameters with the name of the files that contain
    dictionaries to brute force the username and password of the DBMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25e443e6-5601-4961-90c7-d58d2f8931b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set the required parameters, which are the `USER_FILE` list, the `PASS_FILE`
    list, and `RHOSTS` for running this module successfully as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5753db0-fb80-428e-b724-68b2683ba0bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When running this module against the target database server, we will have an
    output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdf50004-6927-4548-93e1-1e125e34be90.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding result, we have two entries that correspond
    to the successful login of the user in the database. We found a default user,
    `sa`, with a blank password, and another user, `nipun`, whose password is `12345`.
  prefs: []
  type: TYPE_NORMAL
- en: Locating/capturing server passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We know that we have two users: `sa` and `nipun`. Let''s use one of them and
    try finding the other user credentials. We can achieve this with the help of the
    `mssql_hashdump` module. Let''s check it''s working and investigate all other
    hashes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28465756-6f26-4a99-944e-f7841631aa53.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have gained access to the password hashes for other accounts
    on the database server. We can now crack them using a third-party tool and can
    elevate or gain access to additional databases and tables as well.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing the SQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We found the users and their corresponding passwords in the previous section.
    Now, let's log in to the server and gather essential information about the database
    server, such as stored procedures, the number and name of the databases, Windows
    groups that can log in to the database server, the files in the database, and
    the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The module that we are going to use is `mssql_enum`. Let''s see how we can
    run this module on the target database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbe68e99-fd1f-4522-a65d-9fe847434074.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After running the `mssql_enum` module, we will be able to gather a lot of information
    about the database server. Let''s see what kind of information it presents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95fe963a-6f16-46e9-a2a4-b77e0da837cf.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the module presents us with almost all the information about
    the database server, such as stored procedures, names, the number of databases
    present, disabled accounts, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also see in the upcoming *Reloading the xp_cmdshell functionality*
    section that we can bypass some disabled stored procedures. Also, procedures such
    as `xp_cmdshell` can lead to the the entire server being compromised. We can see
    in the previous screenshot that `xp_cmdshell` is enabled on the server. Let''s
    see what other information the `mssql_enum` module has got for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/376c5726-3867-4631-bc1e-ee1be64414a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the module, we have a list of stored procedures, accounts with an empty
    password, window logins for the database, and admin logins.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploiting/executing system commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After gathering enough information about the target database, let's perform
    some post-exploitation. To achieve post-exploitation, we have two different modules
    that can be very handy. The first one is `mssql_sql`, which will allow us to run
    SQL queries on to the database, and the second one is `msssql_exec`, which will
    enable us to run system-level commands by enabling the `xp_cmdshell` procedure
    in case it's disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Reloading the xp_cmdshell functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `mssql_exec` module will try running the system-level commands by reloading
    the disabled `xp_cmdshell` functionality. This module will require us to set the
    `CMD` option to the `system` command that we want to execute. Let''s see how it
    works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6f38bd2-aeff-4de0-b493-910bcaf4ad01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we finish running the `mssql_exec` module, the results will flash
    onto the screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d2d0415-d10a-4f66-87d7-607bec59f08e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The resultant window shows the successful execution of the `system` command
    against the target database server.
  prefs: []
  type: TYPE_NORMAL
- en: Running SQL-based queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also run SQL-based queries against the target database server using
    the `mssql_sql` module. Setting the `SQL` option to any valid database query will
    execute it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6edb5a01-899c-4e20-8c4f-88a551d3385c.png)'
  prefs: []
  type: TYPE_IMG
- en: We set the `SQL` parameter to `select @@version`. The database server ran the
    query successfully, and we got the version of the database.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, following the preceding procedures, we can test out various databases
    for vulnerabilities using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Testing MySQL database is covered in my other book,Â *Metasploit Bootcamp* ([https://www.packtpub.com/networking-and-servers/metasploit-bootcamp](https://www.packtpub.com/networking-and-servers/metasploit-bootcamp));
    give it a try.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following resources for securing MSSQL databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mssqltips.com/sql-server-tip-category/19/security/](https://www.mssqltips.com/sql-server-tip-category/19/security/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.hexatier.com/mysql-database-security-best-practices-2/](http://www.hexatier.com/mysql-database-security-best-practices-2/).'
  prefs: []
  type: TYPE_NORMAL
- en: Testing VOIP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's focus on testing VOIP-enabled services and see how we can check for
    various flaws that might affect VOIP services.
  prefs: []
  type: TYPE_NORMAL
- en: VOIP fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Voice Over Internet Protocol** (**VOIP**) is a much less costly technology
    when compared to traditional telephonic services. VOIP provides much more flexibility
    than the traditional ones regarding telecommunication and offers various features,
    such as multiple extensions, caller ID services, logging, recording of each call
    made, and so on. Multiple companies have launched their **Private Branch Exchange**
    (**PBX**) on IP-enabled phones.'
  prefs: []
  type: TYPE_NORMAL
- en: The traditional and the present telephonic systems are still vulnerable to interception
    through physical access, so if an attacker alters the connection of a phone line
    and attaches their transmitter, they will be able to make and receive calls on
    the victim's device and enjoy internet and fax services.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the case of VOIP services, we can compromise security without going
    on to the wires. Nevertheless, attacking VOIP services is a tedious task if you
    do not have basic knowledge of how it works. This section sheds light on how we
    can compromise VOIP in a network without intercepting the wires.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to PBX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PBX is a cost-effective solution to telephony services in small and medium-sized
    companies because it provides much more flexibility and intercommunication between
    the company cabins and floors. A large company may also prefer PBX because connecting
    each telephone line to the external line becomes very cumbersome in large organizations.
    PBX includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Telephone trunk lines that terminate at the PBX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer that manages the switching of calls within the PBX and in and out
    of it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network of communication lines within the PBX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A console or switchboard for a human operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of VOIP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can classify VOIP technologies into three different categories. Let's see
    what they are.
  prefs: []
  type: TYPE_NORMAL
- en: Self-hosted network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this type of network, a PBX is installed at the client''s site and is further
    connected to an **Internet Service Provider** (**ISP**). Such systems send VOIP
    traffic flows through numerous virtual LANs to the PBX device, which then sends
    it to the **Public Switched Telephone Network** (**PSTN**) for circuit switching
    and the ISP of the internet connection as well. The following diagram demonstrates
    this network well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea016a02-b5d4-4688-94df-f3a256e56829.png)'
  prefs: []
  type: TYPE_IMG
- en: Hosted services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the hosted services-type VOIP technology, there is no PBX at the client's
    premises. However, all the devices at the client's premises are connected to the
    PBX of the service provider via the internet, that is, via **Session Initiation
    Protocol** (**SIP**) lines using IP/VPN technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how this technology works with the help of the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce73a6f0-e29d-42c5-80dc-97fed0a47bdf.png)'
  prefs: []
  type: TYPE_IMG
- en: SIP service providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many SIP service providers on the internet provide connectivity for softphones,
    which can be used directly to enjoy VOIP services. Also, we can use any client
    softphone to access the VOIP services, such as Xlite, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/597f6eba-0c6e-4562-bdb0-2ac62768f561.png)'
  prefs: []
  type: TYPE_IMG
- en: Fingerprinting VOIP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can fingerprint VOIP devices over a network using the SIP scanner modules
    that are built in to Metasploit. A commonly known SIP scanner is the **SIP endpoint
    scanner**. We can use this scanner to identify devices that are SIP-enabled by
    issuing the request for options from various SIP devices in the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s carry on with scanning VOIP using the `options` auxiliary module under
    `/auxiliary/scanner/sip` and analyze the results. The target here is a Windows
    XP system with the Asterisk PBX VOIP client running. We start by loading the auxiliary
    module for scanning SIP services over a network, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa2d1967-06be-4a07-87ec-0c2ac70b1658.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have plenty of options that we can use with the `auxiliary/scanner/sip/options`
    auxiliary module. We need to configure only the `RHOSTS` option. However, for
    a large network, we can define the IP ranges with the **Classless Inter-Domain
    Routing** (**CIDR**) identifier. Once run, the module will start scanning for
    IPs that may be using SIP services. Let''s run this module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4178a740-3262-4ad6-bab9-f7a852cd86f8.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, when this module runs, it returns a lot of information related
    to the systems that are running SIP services. The information contains the response
    called **agent**, which denotes the name and version of the PBX and verbs, which
    define the types of request supported by the PBX. Hence, we can use this module
    to gather a lot of knowledge about the SIP services on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning VOIP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After finding out information about the various option requests supported by
    the target, let''s now scan and enumerate users for the VOIP services using another
    Metasploit module, that is, `auxiliary/scanner/sip/enumerator`. This module will
    examine VOIP services over a target range and will try to enumerate its users.
    Let''s see how we can achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e7b87db-02c1-44cb-a631-f405d8c7151f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the preceding options to use with this module. We will set some of
    the following options to run this module successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d01ed57-2395-41fc-a652-2c1cc351cfb6.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, we have set the `MAXEXT`, `MINEXT`, `PADLEN`, and `RHOSTS` options.
  prefs: []
  type: TYPE_NORMAL
- en: In the enumerator module used in the preceding screenshot, we defined `MINEXT`
    and `MAXEXT` as `3000` and `3005`, respectively. `MINEXT` is the extension number
    from which the searching will begin, and `MAXEXT` refers to the last extension
    number where the search will end. These options can be set for a vast range, such
    as `MINEXT` to `0` and `MAXEXT` to `9999`, to find out the various users using
    VOIP services on extension numbersÂ `0` to `9999`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run this module on a target range by setting the RHOSTS variable to
    the CIDR value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20d3f874-fbdf-4e42-acaf-5d75ed1e91d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Placing `RHOSTS` as `192.168.65.0/24` will scan the entire subnet. Now, let''s
    run this module and see what output it presents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e10bcd63-6a06-4f2b-ae2c-30cdaf94b9d2.png)'
  prefs: []
  type: TYPE_IMG
- en: This search returned many users using SIP services. Also, the effect of `MAXEXT`
    and `MINEXT` only scanned the users from the extensions `3000` to `3005`. An extension
    can be thought of as a universal address for some user in a particular network.
  prefs: []
  type: TYPE_NORMAL
- en: Spoofing a VOIP call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having gained enough knowledge about the various users using SIP services,
    let''s try making a fake call to the user using Metasploit. While a user is running
    SipXphone 2.0.6.27 on a Windows XP platform, let''s send the user a phony invite
    request, utilizing the `auxiliary/voip/sip_invite_spoof` module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c3ee936-5ebe-430b-8a4f-fb3eaab75839.png)'
  prefs: []
  type: TYPE_IMG
- en: We will set the `RHOSTS` option with the IP address of the target and theÂ `EXTENSION`
    as `4444` for the target. Let's keep `SRCADDR` set to `192.168.1.1`, which will
    spoof the address source making the call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, let''s run the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25014672-607d-4e9e-9f74-70e010b014bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what is happening on the victim''s side as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc0f7d19-1e6b-49c2-a4de-552e8c3cde10.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the softphone is ringing, displaying the caller as 192.168.1.1,
    and displaying the predefined message from Metasploit as well.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting VOIP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To gain complete access to the system, we can try exploiting the softphone
    software as well. From the previous scenarios, we have the target''s IP address.
    Let''s scan and exploit it with Metasploit. However, there are specialized VOIP
    scanning tools available within Kali operating systems that are specifically designed
    to test VOIP services only. The following is a list of tools that we can use to
    exploit VOIP services:'
  prefs: []
  type: TYPE_NORMAL
- en: Smap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sipscan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sipsak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voipong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Svmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coming back to the exploitation part, we have some of the exploits in Metasploit
    that can be used on softphones. Let's look at an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application that we are going to exploit here is SipXphone version 2.0.6.27\.
    This application''s interface may look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/889203a3-4c8d-4ec5-bf6e-2fe1aa1358ed.png)'
  prefs: []
  type: TYPE_IMG
- en: About the vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vulnerability lies in the handling of the `Cseq` value by the application.
    Sending an overlong string causes the app to crash, and in most cases, it will
    allow the attacker to run malicious code and gain access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s exploit the SipXphone version 2.0.6.27 application with Metasploit.
    The exploit that we are going to use here is `exploit/windows/sip/sipxphone_cseq`.
    Let''s load this module into Metasploit and set the required options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3cb31b2-f346-48aa-8264-1ca111d1ea08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to set the values for `RHOST`, `LHOST`, and `payload`. Let''s exploit
    the target application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5147c26e-034e-48d7-aa45-cd33c71186fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Voila! We got the meterpreter in no time at all. Hence, exploiting VOIP can
    be easy in cases of buggy software using Metasploit. However, when testing VOIP
    devices and other service-related flaws, we can use third-party tools for efficient
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'An excellent resource for testing VOIP can be found at: [http://www.viproy.com/](http://www.viproy.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to these excellent guides for more on securing VOIP networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://searchsecurity.techtarget.com/feature/Securing-VoIP-Keeping-Your-VoIP-Networks-Safe](https://searchsecurity.techtarget.com/feature/Securing-VoIP-Keeping-Your-VoIP-Networks-Safe)Â and
    [https://www.sans.org/reading-room/whitepapers/voip/security-issues-countermeasure-voip-1701](https://www.sans.org/reading-room/whitepapers/voip/security-issues-countermeasure-voip-1701).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we saw some exploitations and penetration testing scenarios
    that have enabled us to test various services, such as databases, VOIP, and SCADA.
    Throughout this chapter, we learned about SCADA and its fundamentals. We saw how
    we can gain a variety of information about a database server and how to gain complete
    control over it. We also saw how we could test VOIP services by scanning the network
    for VOIP clients and spoofing VOIP calls as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should perform the following exercises before moving on to the next chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up and test MySQL, Oracle, and PostgreSQL using Metasploit, and find and
    develop the modules for missing modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try automating a SQL injection bug in Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in SCADA and ICS, try getting your hands on Samurai STFU
    ([http://www.samuraistfu.org/](http://www.samuraistfu.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit at least one VOIP software other than the one we used in the demo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can perform a complete penetration test
    using Metasploit and integrate various other popular scanning tools used in penetration
    testing in Metasploit. We will cover how to proceed systematically while carrying
    out penetration testing on a given subject. We will also look at how we can create
    reports and what should be included in or excluded from those reports.
  prefs: []
  type: TYPE_NORMAL
