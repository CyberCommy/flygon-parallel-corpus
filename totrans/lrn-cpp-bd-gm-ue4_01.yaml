- en: Getting Started with C++17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Academics often describe programming concepts in theory but like to leave implementation
    to someone else, preferably someone from the industry. In this book, we cover
    it all: we will describe the theory behind C++ concepts and implement our own
    game as well. If you''re a first-time programmer, you have a lot to learn!'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing I will recommend is that you do the exercises. You cannot learn
    to program simply by reading. You must apply the theory in the exercises to absorb
    it and be able to use it in the future.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to get started by programming very simple programs in C++. I know
    that you want to start playing your finished game right now. However, you have
    to start at the beginning to get to that end (if you really want to, skip over
    to [Chapter 13](f01eeded-ad93-4d9f-af89-8eb96b6cd66d.xhtml)*,* *Spell Book*, or
    open some of the samples to get a feel for where we are going).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new project (in Visual Studio or Xcode)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your first C++ project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are building and compiling?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our first C++ program will be written outside of UE4\. To start with, I will
    provide steps for both Xcode and Visual Studio 2017, but after this chapter, I
    will try to talk about just the C++ code without reference to whether you're using
    Microsoft Windows or macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Using Microsoft Visual Studio on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will install an **integrated development environment** (**IDE**)
    that will allow you to edit code for Windows, Microsoft's Visual Studio. Please
    skip to the next section if you are using a Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and Installing Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start, download and install Microsoft Visual Studio Community 2017.
  prefs: []
  type: TYPE_NORMAL
- en: The Community edition of Visual Studio is the free version of Visual Studio
    that Microsoft provides on their website. Go to [https://www.visualstudio.com/downloads/](http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx)
    to download and then start the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find complete installation instructions here: [https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2017).
    When you get to the section on workloads, you will want to choose Desktop Development
    with C++.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Visual Studio Community 2017, open it. This is how the icon for
    the software looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/265876f5-f04d-466c-95f3-f8a59af9665b.png)'
  prefs: []
  type: TYPE_IMG
- en: Starting a New Project in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Work through the following steps to get to a point where you can actually type
    in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the File menu, select New | Project..., as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/669cecd1-75e3-4245-8948-c4b972d1887e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will get the following dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3b51d0a-eedc-44d2-95c5-322e25267b91.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that there is a small box at the bottom with the text Solution name. In
    general, Visual Studio Solutions might contain many projects. However, this book
    only works with a single project, but at times you might find it useful to integrate
    many projects into the same solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five things to take care of now, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Online | Templates | Visual C++ from the left-hand side panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Console App (Universal) Project Templates from the right-hand side panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your app (I used `MyFirstApp`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a folder to save your code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the OK button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have never used this template before, it will open the VSIX Installer
    and show this dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b03f1e7-944b-4a00-ba2f-f5116cbb77dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Modify. It will install and close down Visual Studio. You might need
    to click End Tasks if you get this dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e023a532-033d-4c40-bd80-49bb437d461c.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, it will install the project templates for you. It will take a long time,
    but you should only need to do this once. When it's done, click Close and restart
    Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to start over with the previous steps from File | New | Project....
    This time, Visual C++ will show up under Installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54cb942c-bc59-40da-85f6-81f31104ea0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose Empty Project and you can change the name from Project1 to whatever you
    want to name it, in my case MyFirstApp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you are in the Visual Studio 2017 environment. This is the place where
    you will do all your work and code.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we need a file to write our code into. So, we will add a C++ code
    file to our project by right-clicking on the project name in the Solution Explorer
    and choosing Add | **New Item**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92b4196f-85b6-4a5f-baa0-5786a1603754.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add your new C++ (`.cpp`) source code file as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/526bf3b2-f0ca-4ac1-a65f-66e8ab1f2fe3.png)'
  prefs: []
  type: TYPE_IMG
- en: '`Source.cpp` is now open and ready for you to add your code. Skip to the *Creating
    your first C++ program* section and get started.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Xcode on a Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will talk about how to install Xcode on a Mac. Please skip
    to the next section if you are using Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode is available (for free!) on all Mac computers from the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: You should get the latest version, if possible. As of this writing it is Xcode
    10, but it requires at least macOS Sierra or (preferably) High Sierra. If your
    Mac is older and running an older operating system, you can download the OS update
    for free, as long as you're using a machine recent enough to support it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just search for Xcode on the Apple App Store, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd16b214-46c1-44d2-9d00-c308094aa746.png)'
  prefs: []
  type: TYPE_IMG
- en: Just click the Get button and wait for it to download and install.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a new project in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have Xcode installed, open it. Then, either choose Create a new Xcode
    project from the opening splash screen or navigate to File | New | Project...
    from the system''s menu bar at the top of your screen, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b711f1db-82e5-4bad-9263-468d15c9d89d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the New Project dialog, in the Application section under macOS at the top
    of the screen, select Command Line Tool. Then, click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6719fad2-0b15-4df3-9733-92d228725f81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next dialog, name your project. Be sure to fill in all the fields or
    Xcode won''t let you proceed. Make sure that the project''s Type is set to C++
    and then click on the Next button, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96c9388b-1d41-450e-a571-77acbf282617.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next popup will ask you to choose a location in order to save your project.
    Pick a spot on your hard drive and save it there. Xcode, by default, creates a
    Git repository for every project you create. You can uncheck Create git repository
    as we won''t cover Git in this chapter, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99a90ba0-9ea9-4dd6-a96b-d250c142808d.png)'
  prefs: []
  type: TYPE_IMG
- en: Git is a **version control system**. This basically means that Git takes and
    keeps snapshots of all the code in your project every so often (every time you
    *commit* to the repository). Other popular **source control management** (**SCM**)
    tools are Mercurial, Perforce, and Subversion. When multiple people are collaborating
    on the same project, the scm tool has the ability to automatically merge and copy
    other people's changes from the repository to your local code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay! You are all set up. Click on the `main.cpp` file in the left-hand side
    panel of Xcode. If the file doesn''t appear, ensure that the folder icon at the
    top of the left-hand side panel is selected first, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d168111-aab2-4b3b-a1c9-61328c4b675f.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating your first C++ program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now going to write some C++ source code. There is a very good reason
    why we are calling it the source code: it is the source from which the binary
    executable code is built. The same C++ source code can be built on different platforms
    such as Mac, Windows, and mobile platforms, and in theory executable code doing
    the exact same things on each respective platform should result.'
  prefs: []
  type: TYPE_NORMAL
- en: In the not-so-distant past, before the introduction of C and C++, programmers
    wrote code for each specific machine they were targeting individually. They wrote
    code in a language called assembly language. But now, with C and C++ available,
    a programmer only has to write code once, and it can be deployed to a number of
    different machines simply by using different compilers to build the same source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, there are some differences between Visual Studio's flavor of C++
    and Xcode's flavor of C++, but these differences mostly appear when working with
    advanced C++ concepts, such as templates. UE4 is very helpful when working with
    multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Epic Games put in a lot of work in order to get the same code to work on both
    Windows and Mac, along with many other platforms such as mobile and game consoles.
  prefs: []
  type: TYPE_NORMAL
- en: A real-world tip
  prefs: []
  type: TYPE_NORMAL
- en: It is important for the code to run in the same way on all machines, especially
    for networked games or games that allow things such as shareable replays. This
    can be achieved using standards. For example, the IEEE floating-point standard
    is used to implement decimal math on all C++ compilers. This means that the result
    of computations such as 200 * 3.14159 should be the same on all machines. Without
    standards, different compilers might (for example) round numbers differently,
    and where there are many calculations and the code needs to be precise, this could
    cause unacceptable differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the following code in Microsoft Visual Studio or in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To explain what's going on, here is the same code but with comments added (anything
    after `//` on the same line will be ignored by the compiler, but can help explain
    what is going on).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Press *Ctrl* + *F5* (or use the Debug | Start Without Debugging menu) to run
    the preceding code in Visual Studio, or press *Command* + *R* (Product | Run)
    to run in Xcode. The first time you press *Ctrl* + *F5* in Visual Studio, you
    will see this dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa80783c-d71f-4fb8-8804-cf43911cff55.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Yes and Do not show this dialog again if you don't want to see this every
    time you run the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what you should see in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c3809e7-173f-4e56-b212-7e3688928c01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'and here it is on Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1442d579-e93d-420a-80a0-be030bfef8ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you''re on Windows, you will probably notice that the window closes automatically
    when you run it so you can''t see the results. There are various ways around this,
    including changing the settings to pause and make you press a key to continue.
    You can get more information here: [https://stackoverflow.com/questions/454681/how-to-keep-the-console-window-open-in-visual-c/1152873#1152873](https://stackoverflow.com/questions/454681/how-to-keep-the-console-window-open-in-visual-c/1152873#1152873)'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that might come to your mind is *"my! A whole lot of gibberish!"*
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, you rarely see the use of the hash (#) symbol (unless you use Twitter)
    and curly brace pairs `{``}` in normal English text. However, in C++ code, these
    strange symbols abound. You just have to get used to them.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's interpret this program, starting from the first line.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the first line of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This line has two important points to be noted:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we see is an `#include` statement. We are asking C++ to copy
    and paste the contents of another C++ source file, called `<iostream>`, directly
    into our code file. `<iostream>` is a standard C++ library that handles all the
    code that lets us print text to the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second thing we notice is a `//` comment. As mentioned earlier, C++ ignores
    any text after a double slash (`//`) until the end of that line. Comments are
    very useful to add in plain text explanations of what some code does. You might
    also see `/* */` multiline C-style comments in the source. Surrounding any text
    (even over multiple lines) in C or C++ with slash-star `/*` and star-slash `*/`
    gives an instruction to have that code removed by the compiler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the next line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The comments beside this line explain what the `using` statement does: it just
    lets you use a shorthand (for example, `cout`) instead of the fully qualified
    name (which, in this case, would be `std::cout`) for a lot of our C++ code commands.
    Some people don''t like a `using namespace std;` statement; they prefer to write
    the `std::cout` longhand every time they want to use `cout`. You can get into
    long arguments over things like this. In this section of the text, we prefer the
    brevity that we get with the `using namespace` `std;` statement.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, note the comments on the second line of this section are lined up with
    the ones on the previous line. This is good programming practice because it shows
    visually that it is a continuation of the previous comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the application's starting point. You can think of `main` as the start
    line in a race. The `int main()` statement is how your C++ program knows where
    to start.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have an `int main()` program marker or if `main` is spelled incorrectly,
    then your program just won't work because the program won't know where to start.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next line is a character you don''t see often:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This `{` character is not a sideways mustache. It is called a curly brace, and
    it denotes the starting point of your program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next two lines print text to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `cout` statement stands for console output. Text between double quotes will
    get an output to the console exactly as it appears between the quotes. You can
    write anything you want between double quotes, except a double quote, and it will
    still be valid code. Also, note that `endl` tells `cout` to add an end line (carriage
    return) character, which is very useful for formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter a double quote between double quotes, you need to stick a backslash
    () in front of the double quote character that you want inside the string, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `\"` symbol is an example of an escape sequence. There are other escape
    sequences that you can use; the most common escape sequence you will find is `\n`,
    which is used to jump the text output to the next line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last line of the program is the `return` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This line of code indicates that the C++ program is quitting. You can think
    of the `return` statement as returning to the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the end of your program is denoted by the closing curly brace, which
    is an opposite-facing sideways mustache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Semicolons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Semicolons (;) are important in C++ programming. Notice in the preceding code
    example that most lines of code end in a semicolon. If you don't end each line
    with a semicolon, your code will not compile, and if that happens, your employer
    won't be very happy (of course, once you've been doing this for a while you'll
    find and fix these issues well before they even find out about it).
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you make a mistake while entering code, then you will have a syntax error.
    In the face of syntax errors, C++ will scream bloody murder and your program will
    not even compile; also, it will not run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to insert a couple of errors into our C++ code from earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fca0dff-5690-4455-8896-87da9e078a6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Warning! This code listing contains errors. It is a good exercise to find all
    the errors and fix them!
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, try to find and fix all the errors in this program.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you are extremely new to C++, this might be a hard exercise. However,
    this will show you how careful you need to be when writing C++ code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixing compilation errors can be a nasty business. However, if you input the
    text of this program into your code editor and try to compile it, it will cause
    the compiler to report all the errors to you. Fix the errors, one at a time, and
    then try to recompile (start with the first one on the list, because it could
    be causing some of the later errors). A new error will pop up or the program will
    just work, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e745745-442b-422b-8382-56d4f5f364e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Your compiler shows you the errors in your code when you try to compile it (although
    if you're using Visual Studio, it will ask if you want to run the previous successful
    build first).
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason I am showing you this sample program is to encourage the following
    workflow as long as you are new to C++:'
  prefs: []
  type: TYPE_NORMAL
- en: Always start with a working C++ code example. You can fork off a bunch of new
    C++ programs from the *Creating* *your first C++ program* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make your code modifications in small steps. When you are new, compile after
    writing each new line of code. Do not code for one to two hours and then compile
    all that new code at once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can expect it to be a couple of months before you can write code that performs
    as expected the first time you write it. Don't get discouraged. Learning to code
    is fun.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Warnings in C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The compiler will flag things that it thinks might be mistakes. These are another
    class of compiler notices known as warnings. Warnings are problems in your code
    that you do not have to fix for your code to run but are simply recommended to
    be fixed by the compiler. Warnings are often indications of code that is not quite
    perfect, and fixing warnings in code is generally considered good practice.
  prefs: []
  type: TYPE_NORMAL
- en: However, not all warnings are going to cause problems in your code. Some programmers
    prefer to disable the warnings that they do not consider to be an issue (for example,
    warning 4018 warns against asigned/unsigned mismatch, which you will most likely
    see later).
  prefs: []
  type: TYPE_NORMAL
- en: What is building and compiling?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have heard of a computer process term called compiling. Compiling
    is the process of converting your C++ program into code that can run on a CPU.
    Building your source code means the same thing as compiling it.
  prefs: []
  type: TYPE_NORMAL
- en: See, your source `code.cpp` file will not actually run on a computer. It has
    to be compiled first for it to run.
  prefs: []
  type: TYPE_NORMAL
- en: This is the whole point of using Microsoft Visual Studio Community or Xcode.
    Visual Studio and Xcode are both compilers. You can write C++ source code in any
    text editing program—even in Notepad. But you need a compiler to run it on your
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Every operating system typically has one or more C++ compilers that can compile
    C++ code to run on that platform. On Windows, you have Visual Studio and Intel
    C++ Studio compiler. On Mac, there is Xcode, and on all of Windows, Mac, and Linux,
    there is the **GNU Compiler Collection** (**GCC**).
  prefs: []
  type: TYPE_NORMAL
- en: The same C++ code that we write (source) can be compiled using different compilers
    for different operating systems, and in theory they should produce the same result.
    The ability to compile the same code on different platforms is called portability.
    In general, portability is a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: Example output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the screenshot is of your first C++ program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65ae7f80-3457-4436-acbc-94b35c03c77f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the following screenshot is of its output, your first victory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/921550c8-8ed5-4817-a15b-fbe91ac1bd6e.png)'
  prefs: []
  type: TYPE_IMG
- en: There is another class of programming languages called scripting languages.
    These include languages such as PHP, Python, and `ActionScript.` Scripted languages
    are not compiled; for JavaScript, PHP, and ActionScript, there is no compilation
    step. Rather, they are interpreted from the source as the program is run. The
    good thing about scripting languages is that they are usually platform-independent
    from the word go, because interpreters are very carefully designed to be platform-independent.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise - ASCII art
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Game programmers love ASCII art. You can draw a picture using only characters.
    Here''s an example of an ASCII art maze:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Construct your own maze in C++ code or draw a picture using characters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To sum up, we learned how to write our first program in the C++ programming
    language in our integrated development environment (IDE, Visual Studio, or Xcode).
    This was a simple program, but you should count getting your first program to
    compile and run as your first victory. In the upcoming chapters, we'll put together
    more complex programs and start using Unreal Engine for our games.
  prefs: []
  type: TYPE_NORMAL
