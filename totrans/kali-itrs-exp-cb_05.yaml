- en: Chapter 5. Web Application Information Gathering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Setting up API keys for recon-ng
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using recon-ng for reconnaissance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gathering information using theharvester
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using DNS protocol for information gathering
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web application firewall detection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP and DNS load balancer detection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hidden files/directories using DirBuster
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CMS and plugins detection using WhatWeb and p0f
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding SSL cipher vulnerabilities
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important phases of an attack is information gathering.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: To be able to launch a successful attack, we need to gather as much as information
    as possible about our target. So, the more information we get, the higher the
    probability of a successful attack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to note that not only gathering information but documenting
    it with clarity is of utmost importance. The Kali Linux release has several tools
    for documenting, collating and organizing information from various target machines,
    enabling a better reconnaissance. Tools such as **Dradis**, **CaseFile**, and
    **KeepNote** are some examples of it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Setting up API keys for recon-ng
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how we need to set up API keys before starting to
    use recon-ng. Recon-ng is one of the most powerful information gathering tools;
    if used properly, it can help pentesters gather a fairly good amount of information
    from public sources. With the latest version available, recon-ng provides the
    flexibility to set it up as your own app/clients in various social networking
    websites.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection and a web browser.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up recon-ng API Keys, open the terminal, launch recon-ng, and type the
    commands shown in the following screenshot:![How to do it...](img/image_05_001.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, type `keys list`, as shown in the following screenshot:![How to do it...](img/image_05_002.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start by adding `twitter_api` and `twitter_secret`. Log in to Twitter,
    go to [https://apps.twitter.com/](https://apps.twitter.com/) , and create a new
    application, as shown in the following screenshot:![How to do it...](img/image_05_003.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create Application**; once the application is created, navigate to
    the **Keys and Access Tokens** tab and copy the secret key and API key, as shown
    in the following screenshot:![How to do it...](img/image_05_004.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the API key, re-open the terminal window, and run the following command
    to add the key:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now use the following command to enter the `twitter_secret` in recon-ng:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you have added the keys, you can see the keys added in the recon-ng tool
    by entering the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, let's add the Shodan API key. Adding the Shodan API key is fairly simple;
    all you need to do is create an account at [https://shodan.io](https://shodan.io)
    and click on **My Account** in the top-right corner. You will see the **Account
    Overview** page, where you can see a QR code image and API key, as shown in the
    following screenshot:![How to do it...](img/image_05_005.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the API key shown in your account and add that in recon-ng using the following
    command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have learned how we can add API keys into the recon-ng tool.
    Here, to demonstrate this, we have created a Twitter application, used `twitter_api`
    and `twitter_secret`, and added them into the recon-ng tool. The result is as
    shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_05_006.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: Similarly, you will need to include all the API keys here in recon-ng if you
    want to gather information from these sources.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will learn how to use recon-ng for information gathering.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Using recon-ng for reconnaissance
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use recon-ng for reconnaissance. Recon-ng is
    a full-featured web reconnaissance framework written in Python. Complete with
    independent modules, database interaction, built-in convenience functions, interactive
    help, and command completion, recon-ng provides a powerful environment in which
    open source web-based reconnaissance can be conducted quickly and thoroughly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before installing Kali Linux, you will require an Internet connection.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal and start the recon-ng framework, as shown in the following
    screenshot:![How to do it...](img/image_05_007.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Recon-ng has a look and feel like Metasploit. To see all the available modules,
    enter the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Recon-ng will list all the available modules, as shown in the following screenshot:![How
    to do it...](img/image_05_008.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s go ahead and use our first module for information gathering; enter the
    following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, enter the commands shown in the following screenshot:![How to do it...](img/image_05_009.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, there have been some vulnerabilities discovered and they are
    available publically.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s use another module that fetches any known and reported vulnerabilities
    from [xssed.com](http://xssed.com/) . The XSSed project was created in early February
    2007 by KF and DP. It provides information on all things related to cross-site
    scripting vulnerabilities and is the largest online archive of XSS vulnerable
    websites. It''s a good repository of XSS to gather information. To begin with,
    enter the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will see the output shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_05_010.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: As you can see, recon-ng has aggregated publically available vulnerabilities
    from XSSed, as shown in the following screenshot:![How to do it...](img/image_05_011.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, you can keep using the different modules until and unless you get
    the required information regarding your target.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gathering information using theharvester
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use theharvester. The objective of this program
    is to gather e-mails, subdomains, hosts, employee names, open ports, and banners
    from different public sources, such as search engines, PGP key servers, and the
    Shodan computer database.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the terminal and start theharvester, as shown in the following screenshot:![How
    to do it...](img/image_05_012.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Theharvester help shows the example syntax also. For the purpose of our demonstration,
    we will be using the following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Successful execution of the preceding command gives the following information:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, theharvester searches different sources such as search engines,
    PGP key servers, and the Shodan computer database for information. It is also
    useful for anyone who wants to know what an attacker can see about their organization.
    You can visit [http://tools.kali.org/information-gathering/theharvester](http://tools.kali.org/information-gathering/theharvester)
    for more information, such as the project home page and GitHub code repository.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, `-d` stands for domain, `-l` limits the number of results, and `-b`
    stands for data source. In our case, we have `-b` as a means to look for e-mails
    and public hosts available in data sources.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Using DNS protocol for information gathering
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use the various tools/scripts available to
    gather information regarding your web application domain. **DNS** stands for **Domain
    Name System** and can provide you with a great deal of information if you are
    performing black-box testing.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use DNSenum for DNS enumeration. To start DNS enumeration, open the
    terminal and enter the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We should get an output with information such as host, name server(s), e-mail
    server(s), and if we are lucky, a zone transfer:![How to do it...](img/image_05_013.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, the DNSRecon tool is also available in Kali Linux. DNSRecon is usually
    the preferred choice over any other tool as it is more reliable, results are properly
    parsed, and it can be easily imported into other vulnerability assessment and
    exploitation tools.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To use DNSRecon, open the terminal and enter the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The enumeration results output is as follows:![How to do it...](img/image_05_014.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have used DNSenum to enumerate various DNS records, such
    as NS, MX, SOA, and PTR records. DNSenum also tries to perform DNS zone transfer,
    if vulnerable. However, DNSRecon is a more powerful DNS tool. It has highly reliable,
    better result parsing and better integration of results in other VA/exploitation
    tools.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, command `-d` is used for scan domain switch, capital `-D` is used
    to perform dictionary brute force on hostnames, parameters of the `-D` should
    point to a wordlist, for example `/usr/share/wordlists/dnsmap.txt`, to specify
    this is a standard scan we used the (`-t std`) switch and saved the output to
    a file (`-xml dnsrecon.xml`).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are multiple scripts available in Kali Linux, some of them more or less
    do the same thing. Based on your assessment type and time available, you should
    consider using the following DNS tools:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '**DNSMap**: DNSmap is mainly meant to be used by pen testers during the information
    gathering/enumeration phase of infrastructure security assessments. During the
    enumeration stage, the security consultant would typically discover the target
    company''s IP netblocks, domain names, phone numbers, and so on.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNSTracer**: This determines where a given DNS gets its information from
    and follows the chain of DNS servers back to the servers which know the data.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fierce**: This is meant specifically to locate likely targets, both inside
    and outside a corporate network. Only those targets are listed (unless the `-nopattern`
    switch is used). No exploitation is performed (unless you do something intentionally
    malicious with the `-connect` switch). Fierce is a reconnaissance tool. Fierce
    is a Perl script that quickly scans domains (usually in just a few minutes, assuming
    no network lag) using several tactics.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web application firewall detection
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use a tool called **WAFW00F**. WAFW00F identifies
    and fingerprints **web application firewall** (**WAF**) products.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WAFW00F is fairly simple and easy to use. Just open the terminal and enter
    the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_05_015.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can just keep changing the target domain to find the existence
    of the web application firewall.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have used WAFW00F to identify if we do have any web application
    firewall running. Detecting a web application firewall accurately can help you
    save a lot of hours later, during penetration testing.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'WAFW00F works in the following way:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: It sends a normal HTTP request and analyzes the response; this identifies a
    number of WAF solutions
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If that is not successful, it sends a number of (potentially malicious) HTTP
    requests and uses simple logic to deduce which WAF it is
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If that is also unsuccessful, it analyzes the responses previously returned
    and uses another simple algorithm to guess whether a WAF or security solution
    is actively responding to our attacks
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For further details, check out the source code on the main site, [github.com/sandrogauci/wafw00f](http://github.com/sandrogauci/wafw00f)
    .
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: HTTP and DNS load balancer detection
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to detect HTTP and DNS load balancer using
    lbd. **Lbd** (**load balancing detector**) detects whether a given domain uses
    DNS and/or HTTP load-balancing (via server and date: header and diffs between
    server answers).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the terminal and enter the following command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Successful detection of HTTP and DNS load balancer results in the following
    output:![How to do it...](img/image_05_016.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another example where DNS load balancer was detected and HTTP load balancing
    was detected is shown in the following screenshot:![How to do it...](img/image_05_017.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One thing that needs to be understood here is that lbd is not completely reliable;
    it is just a proof of concept to check whether load balancing is done. One can
    read on the terminal that it may generate false positives, but it is a great tool
    to have.![How to do it...](img/image_05_018.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another tool that can help us understand whether a DNS-based load balancer
    is actually present or not is the dig tool. Let''s look at it in more detail;
    enter the following command:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_05_019.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: 'The `ANSWER SECTION` shows the different DNS-based load balancers available
    for [microsoft.com](http://microsoft.com). A tool for testing a HTTP-based load
    balancer is Halberd. In order to check how Halberd works, type the following in
    the Kali terminal:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_05_020.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have used lbd to find DNS and HTTP load balancers. Having
    this information in the early stages of a pen test can save many hours, as you
    would choose your tools and methodology appropriately, finding web application
    security issues.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'This command `lbd kali.org` is very simple. Ldb is the tool name and it takes
    one parameter, that is, the domain or IP name which needs to be checked. The workings
    of the preceding tools are explained as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '**Lbd**: This tool performs load balancing based on two parameters: DNS and
    HTTP. For DNS, it generally works on the round-robin technique to determine whether
    there are multiple load balancers. For HTTP, load balancing is checked via cookies;
    it checks via the session state whether different requests are sent and received
    by the actual servers residing behind the load balancer. The other HTTP method
    is the timestamp; it tries to detect differences in the timestamp to help us detect
    whether there is a presence of load balancer. In the preceding example, we see
    that the load balancer is differentiated on the basis of content length.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DIG**: This stands for **Domain Information Groper**, which is a Linux command
    that enumerates details of the given domain. We make use of the A record to check
    the available DNS servers on the groper to determine whether there is a presence
    of DNS-based load balancer. Multiple entries of A records generally suggest that
    there is a presence of DNS load balancer.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Halberd**: This is an HTTP-based load balancer detector. It checks for differences
    in the HTTP response headers, cookies, timestamps, and so on. Any difference in
    the mentioned parameters will prove that there is an HTTP-based load balancer
    present. In the preceding example, we check whether there is an HTTP-based load
    balancer on VMware and, if we see there are two different instances detected,
    one having an Akamai header and the other not having the same.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hidden files/directories using DirBuster
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use the DirBuster tool. The DirBuster tool
    looks for hidden directories and files on the web server. Sometimes, developers
    will leave a page accessible but unlinked; DirBuster is meant to find these files,
    which might have potential vulnerabilities. This is a Java-based application developed
    by awesome contributors at OWASP.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch DirBuster from the **Kali Linux** | **Web Application Analysis** | **Web
    Crawlers and Directory Brute** | **Dirbuster**, as shown in the following screenshot:![How
    to do it...](img/image_05_021.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open DirBuster and enter your target URL; in our case, we will enter `http://demo.testfire.net`
    for the purpose of demonstration, as shown in the following screenshot:![How to
    do it...](img/image_05_022.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select list based brute force. Browse and navigate to `/usr/share/dirbuster/wordlists`
    and select `directory_list_medium.txt`, as shown in the following screenshot:![How
    to do it...](img/image_05_023.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Select List** and enter `php` (based on the technology used by target)
    in the file extension column, as shown in the following screenshot:![How to do
    it...](img/image_05_024.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Start** and DirBuster will start brute forcing directories and files,
    as shown in the following screenshot:![How to do it...](img/image_05_025.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, DirBuster has started brute forcing files and directories. You
    can click on the **Response** column to sort all files/folders with **200** HTTP
    code, as shown in the following screenshot:![How to do it...](img/image_05_026.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can spend some time going to each of these links and investigating which
    ones look interesting and could be used for further attacks. For example, in our
    case file, the `/pr/docs.xml` file seems to be the standalone file sitting on
    the server which isn't being mentioned in sitemap or `robots.txt` file. Right-click
    on that entry and select **Open In Browser**, as shown in the following screenshot:![How
    to do it...](img/image_05_027.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file has been opened in the browser; as you can see, this is an XML file,
    which wasn't supposed to be a public file and it's not linked anywhere in the
    application but is accessible, as shown in the following screenshot:![How to do
    it...](img/image_05_028.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, you can keep investigating other files and folders which can divulge
    a good amount of information, or some backup files or development pages, which
    may have vulnerabilities.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have used DirBuster to locate hidden directories and files
    available on the web server. DirBuster has a dictionary file generated of the
    most common web server directories and it reads values from the dictionary and
    makes a request to the webserver to check its existence. If the server returns
    200 HTTP header code, it means the directory exists; if the server returns a 404
    HTTP header code, it means the directory does not exist. However, it is important
    to note that HTTP status codes of 401 and 403 may also point to a file or directory
    being present, but not allowed to be opened unless authenticated.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, a few applications which have been architected well also return
    200 OK for unknown files and folders, just to mess with tools such as DirBuster.
    Therefore, it is important to understand how the application is behaving, based
    on which you could further tune your scans policies and configurations.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: This way, we were able to locate certain files and folders which were not linked
    within the application but were available on the web server.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: CMS and plugins detection using WhatWeb and p0f
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use different tools available in Kali, which
    we can use to determine the plugins that are installed. If applications are built
    based on CMSes, it is very likely that they would be using certain plugins. Major
    vulnerabilities that exist are usually in third-party plugins that developers
    use in these CMSes. Finding out the installed plugins and their versions can help
    you to look for exploits available for vulnerable plugins.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with our first tool in Kali Linux which is **WhatWeb**. WhatWeb
    identifies websites. Its goal is to answer the question, "What is that Website?"
    WhatWeb recognizes web technologies, including **content management systems**
    (**CMS**), blogging platforms, statistic/analytics packages, JavaScript libraries,
    web servers, and embedded devices. WhatWeb has over 900 plugins, each to recognize
    something different. WhatWeb also identifies version numbers, e-mail addresses,
    account IDs, web framework modules, SQL errors, and more. WhatWeb is very easy
    to use. Open the terminal and enter the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_05_029.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: As you can see, it has been very accurate in finding that it is a WordPress
    installation. It has also detected common plugins used by DNS and HTTP load balancer.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's say you have figured out that one of your targets is using WordPress or
    Drupal as a CMS and you want to go a step ahead and look for the installed plugins,
    their version, and the latest available version of that plugin.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plecost is another popular tool in Kali for detecting CMS plugins and a WordPress
    fingerprinting tool.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following commands:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This syntax means use 100 plugins (`-n 100`), sleep for 10 seconds between probes
    (`-s 10`), but no more than 15 (`-M 15`), and use the plugin list (`-i /usr/share/plecost/wp_plugin_list.txt`)
    to scan the given URL (`ishangirdhar.com`).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned to use WhatWeb, which very accurately fingerprints
    the server and provides detailed information of CMS, plugins, web server version,
    and programming languages used, and HTTP and DNS load balancers. Later in this
    recipe, we also learned to use plecost to scan WordPress installations to fingerprint
    the installed WordPress plugins.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Most WhatWeb plugins are thorough and recognize a range of cues from the subtle
    to the obvious. For example, most WordPress websites can be identified by the
    meta HTML tag, but a minority of WordPress websites remove this identifying tag,
    although this does not thwart WhatWeb. The WordPress WhatWeb plugin has over 15
    tests, which include checking the favicon, default installation files, login pages,
    and checking for `/wp-content/` within relative links.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress fingerprinting tool called **plecost**, searches and retrieves
    information about the plugins and their version on a WordPress running server..
    It can analyze a single URL or perform an analysis based on the results indexed
    by Google. Additionally, it displays CVE code associated with each plugin, if
    there is any. Plecost retrieves the information contained on websites supported
    by WordPress and also allows a search on the results indexed by Google.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other than what we have just seen, there are other tools available as well.
    For example, for scanning WordPress, Drupal, and Joomla, there are tools available
    as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '**WpScan**: [http://wpscan.org/](http://wpscan.org/)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DrupalScan**: [https://github.com/rverton/DrupalScan](https://github.com/rverton/DrupalScan)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Joomscan**: [http://sourceforge.net/projects/joomscan/](http://sourceforge.net/projects/joomscan/)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding SSL cipher vulnerabilities
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use tools to scan for vulnerable SSL ciphers
    and SSL-related vulnerabilities.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will require an Internet connection.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the terminal and launch the SSLScan tool, as shown in the following screenshot:![How
    to do it...](img/image_05_030.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To scan your target using SSLScan, run the following command:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'SSLScan will test the SSL certificate for the all the ciphers it supports.
    Weak ciphers will be shown in red and yellow. Strong ciphers will be shown in
    green:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Our next tool is SSLyze, which is developed by iSEC Partners.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and invoke SSLyze help, as shown in the following screenshot:![How
    to do it...](img/image_05_031.jpg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To test a domain for a comprehensive list of supported ciphers, enter the following
    command in the terminal:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试一个域的支持密码的全面列表，请在终端中输入以下命令：
- en: '[PRE19]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If the server is running SSL on port `443`, the output should be like this:![How
    to do it...](img/image_05_032.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果服务器在端口`443`上运行SSL，输出应该像这样：![操作步骤...](img/image_05_032.jpg)
- en: The last tool in this recipe is TLSSLed. Open a terminal and invoke the tool,
    as shown in the following screenshot:![How to do it...](img/image_05_033.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个教程中的最后一个工具是TLSSLed。打开终端并调用该工具，如下面的屏幕截图所示：![操作步骤...](img/image_05_033.jpg)
- en: 'Now start TLSSLed using the following command:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用以下命令启动TLSSLed：
- en: '[PRE20]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: TLSSEled also shows all the cookies, which have secure and HttpOnly flags set
    or not, which can be useful information later while exploiting the application
    using XSS.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TLSSEled还显示了所有的cookie，其中是否设置了安全和HttpOnly标志，这在以后利用XSS攻击应用程序时可能是有用的信息。
- en: How it works...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we have used three tools for scanning SSL certificates on target
    domains for weak ciphers and SSL vulnerabilities, such as Heartbleed. Each of
    these tools has their unique way of representing information. SSLScan looks to
    check whether the target is vulnerable to Heartbleed or not, in addition to scanning
    it for weak ciphers. SSLyze specializes in speed and it supports StartTLS handshake
    on SMTP, XMPP, LDAP, POP, IMAP, RDP, and FTP protocols also. TLSSLed is a tool
    created to use SSLScan, but it provides more information.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们使用了三种工具来扫描目标域上的SSL证书，以查找弱密码和SSL漏洞，比如Heartbleed。这些工具中的每一个都有它们独特的信息表示方式。SSLScan试图检查目标是否容易受到Heartbleed的攻击，同时还会扫描弱密码。SSLyze专注于速度，并且还支持SMTP、XMPP、LDAP、POP、IMAP、RDP和FTP协议上的StartTLS握手。TLSSLed是一个使用SSLScan创建的工具，但它提供了更多信息。
- en: SSLyze is a Python tool that can analyze the SSL configuration of a server by
    connecting to it. It is designed to be fast and comprehensive, and should help
    organizations and testers identify misconfigurations affecting their SSL servers.
    SSLyze is developed by iSEC Partners.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: SSLyze是一个Python工具，可以通过连接到服务器来分析服务器的SSL配置。它旨在快速全面，应该有助于组织和测试人员识别影响其SSL服务器的错误配置。SSLyze由iSEC
    Partners开发。
- en: TLSSLed is a Linux shell script whose purpose is to evaluate the security of
    a target SSL/TLS (HTTPS) web server implementation. It is based on SSLScan, a
    thorough SSL/TLS scanner that is based on the OpenSSL library, and on the `openssl
    s_client` command-line tool. The current tests include checking whether the target
    supports the SSLv2 protocol, the null cipher, and weak ciphers based on their
    key length (40 or 56 bits), the availability of strong ciphers (such as AES),
    whether the digital certificate is MD5 signed, and the current SSL/TLS renegotiation
    capabilities.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: TLSSLed是一个Linux shell脚本，其目的是评估目标SSL/TLS（HTTPS）Web服务器实现的安全性。它基于SSLScan，这是一个基于OpenSSL库和`openssl
    s_client`命令行工具的彻底的SSL/TLS扫描程序。当前的测试包括检查目标是否支持SSLv2协议，空密码，以及基于密钥长度（40或56位）的弱密码，强密码的可用性（如AES），数字证书是否是MD5签名的，以及当前的SSL/TLS重新协商能力。
- en: Occasionally, you should also thoroughly look out for certificate errors. You
    could also discover associated domains and subdomains belonging to the same organization
    based on certificate errors as, at times, organizations buy SSL certificates for
    different domains but reuse them, which would also cause an invalid certificate
    name error.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，您还应该彻底查看证书错误。您还可以根据证书错误发现属于同一组织的相关域和子域，因为有时组织会为不同的域购买SSL证书，但会重用它们，这也会导致无效的证书名称错误。
