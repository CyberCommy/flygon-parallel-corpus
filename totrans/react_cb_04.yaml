- en: Adding Routes to Our Application with React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing React Router v4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating nested routes and adding parameters to our paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to add dynamic routes in our project
    using React Router v4.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing React Router v4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React, unlike Angular, is a library instead of a framework, meaning specific
    functionalities, for example, routing or the `propTypes`, are not part of the
    React core. Instead, routing is handled by a third-party library called React
    Router.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the code that we did in the *Implementing Airbnb React/JSX Style
    G**uide *recipe in [Chapter 3](2a859e8f-7f11-4696-9e31-7443484a23af.xhtml)*, Handling
    Events, Binding, and Useful React Packages *(`Repository:` `Chapter03/Recipe4/airbnb`)
    to enable linter validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to install React Router v4, and we can do
    it with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You probably are confused about why we are installing `react-router-dom` instead
    of `react-router`. React Router contains all the common components of `react-router-dom`
    and `react-router-native`. That means that if you are using React for the web,
    you should use `react-router-dom`, and if you are using React Native, you need
    to use `react-router-native`. The `react-router-dom` package was created originally
    to contain version 4, and `react-router` was using version 3\. `react-router-dom`
    has some improvements over `react-router`. They are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Improved `<Link>` component (which renders an `<a>`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes `<BrowserRouter>`, which interacts with the browser's `window.history`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes `<NavLink>`, which is a `<Link>` wrapper that knows whether it's active
    or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes `<HashRouter>`, which uses the hash in the URL to render the components.
    If you have one static page, you should use this component instead of `<BrowserRouter>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to display some components based on the routes:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to create four functional components (`About`, `Contact`, `Home`, and
    `Error 404`) and name them as `index.jsx` in their directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `Home` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `About` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/About/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Contact` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Contact/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Error 404` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Error/404.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `src/index.js` file, we need to include our routes, which we are going
    to create in the next step. We need to import the `BrowserRouter` object from
    `react-router-dom`, and we can rename it Router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create our `src/routes.jsx` file, to which we are going to import
    our `App` and `Home` components, and, using the `Route` component, we are going
    to add a route to execute our `Home` component when the user accesses root (/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/routes.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we need to modify our `App.jsx` file to render the route components
    as children:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run your application, you will see the `Home` component in the root
    (`/`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/87f4c682-e1d0-4b4c-8f68-63b72a9368f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s add our `Error 404` when the user tries to access to any other
    route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/routes.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application, you will see that it is rendering both components
    (`Home` and `Error 404`). You are probably wondering why:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/734a8cf8-4f44-4787-99ad-262483be57aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s because we need to use the `<Switch>` component to execute just one component
    if it matches the path. For this, we need to import the `Switch` component and
    add it as a wrapper in our routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/routes.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we go to the root (`/`) we will see our `Home` component, and the `Error404`
    won''t be executed at the same time (it will just be executed the `Home` component),
    but if we go to `/somefakeurl`, we will see that the `Home` component is executed
    as well, and this is an issue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/36df8ae5-0ef3-4ab7-8a11-fbb6d9f72d49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To fix this problem, we need to add the exact prop in the route that we want
    to match exactly. The problem is that `/somefakeurl` will match our root (`/`),
    but if we want to be very specific about the paths, we need to add the exact prop
    to our `Home` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you go to `/somefakeurl`, you will be able to see the `Error404` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9abed89f-2445-4d52-b9f5-0e08c7c53b9e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, it is very easy to implement the React Router library. Now
    we can add more routes for our `About` (`/about`) and `Contact` (`/contact`) components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you go to `/about`, you will see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b00156d8-be3d-4bd3-a999-989102fd8bf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go to `/contact`, you will see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6cd7a18d-a5f1-4318-b9fd-7a9f8e7142ef.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned how to create simple routes in our project, but in the
    next recipe, we will learn how to include parameters within our routes, how to
    add nested routes, and how to navigate through our site using the `<Link>` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding parameters to our routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we are going to use the same code as the last recipe, and we
    are going to add some parameters and show how to get them into our components.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to create a simple `Notes` component to display
    all our notes when we visit the `/notes` route, but we will show one note when
    the user visits `/notes/:noteId`(we will filter the note using `noteId`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a new component called Notes (`src/components/Notes/index.jsx`),
    and this is the skeleton of our `Notes` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Notes/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Notes/Notes.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have created our `Notes` component, we need to import it into our `src/routes.jsx`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/routes.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can see our Notes component if we go to the `/notes` URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/28ddd133-d99f-48a0-8552-563e0edf56e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that our `Notes` component is connected to React Router, let''s render
    our notes as a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Notes/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that we are using `<Link>` (this will generate an `<a>`
    tag) component that points to `/notes/notes.id`, and this is because we are going
    to add a new nested route into our `src/routes.jsx` file to match the `id` of
    the note:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/routes.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'React Router has a special prop called `match`, which is an object that includes
    all the information about our executed route, and if we have parameters, we are
    going to be able to see them in the `match` object, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Notes/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: The `match` prop looks like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d677a7d5-47e2-450a-bd95-d7b7b6ed1b66.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `match` object contains a lot of useful information. React Router also includes
    the object's history and location. As you can see, we can get all the parameters
    we pass within our routes in the `match` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application and go to `/notes` URL, you will see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d4d34cf-550e-4e4f-87ca-81941c259710.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on any link (I clicked on My note 2), you will see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a3ba6075-4521-435a-a40b-a10f5e5f6dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, we can add a menu in our `Header` component to access all our routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Header.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we need to modify our `src/components/App.css`file to style our
    menu. Just add the following code at the end of the CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.cssNow you can see the menu like this: ![](assets/ee4bffaa-aa35-4ea5-a602-85c01efc83b2.png)'
  prefs: []
  type: TYPE_NORMAL
