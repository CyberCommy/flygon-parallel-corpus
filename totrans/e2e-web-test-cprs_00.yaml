- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cypress is a JavaScript automation testing framework created with the sole purpose
    of performing frontend testing. Cypress excels at re-inventing how testing is
    carried out, especially for the modern web. Unlike other testing frameworks, such
    as Selenium WebDriver, Cypress is much faster as it runs in the browser and also
    has a lower learning curve compared to other testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Developers working with frontend applications will be able to put their knowledge
    to use with this practical guide and develop their skills in end-to-end testing.
    This book takes a hands-on approach to implementation and associated methodologies
    that will have you up and running and productive in no time.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is for testing professionals, software and web testers, and web developers
    who are well-versed in JavaScript and might or might not be familiar with the
    concepts of automation testing. The first three chapters offer a quick introductory
    guide that will help you familiarize yourself with how Cypress works and how to
    get started if you are a complete Cypress newbie. If you are a Selenium tester
    who wants to migrate to Cypress and uncover its capabilities, you’ll find this
    book very useful. A good understanding of web testing and JavaScript is required.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B15616_01_Final_NM_ePUB.xhtml#_idTextAnchor025), *Installing
    and Setting Up Cypress*, takes you through the essentials of getting started with
    Cypress, including the installation of the Cypress package, the default configurations,
    and the customization of settings. In this chapter, you will learn about how Cypress
    works, what modules it requires to run, the test file naming recommendations,
    and how to get started with using Cypress. Understanding how Cypress works will
    ensure that you are able to grasp the internal workings of Cypress and will be
    able to install and set up the subsequent projects on your own with a full understanding
    of the Cypress framework''s structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B15616_02_Final_NM_ePUB.xhtml#_idTextAnchor055), *Differences
    between Selenium WebDriver and Cypress,* is where we will explore how Cypress
    is different from the Selenium WebDriver and highlight some of the pros and the
    cons of choosing Cypress to run end-to-end tests. In this chapter, we will also
    explore elements that make Cypress more suitable to testing than Selenium and
    how users can extend its functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B15616_03_Final_NM_ePUB.xhtml#_idTextAnchor074), *Working with
    Cypress Command-Line Tools*, exposes you to the different Cypress commands that
    you can use to execute Cypress commands. The chapter will explain how to run the
    commands and also how to debug the application using Cypress commands.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B15616_04_Final_NM_ePUB.xhtml#_idTextAnchor090), *Writing Your
    First Test*, will see you write your first test using Cypress. We will start with
    a passing test to check that everything works correctly, then move on to a failing
    test, and then we''ll see how Cypress behaves and how the auto-reload feature
    works. In the second section of this chapter, we will focus on more advanced scenarios
    of getting you up to speed with how to properly write Cypress tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B15616_05_Final_NM_ePUB.xhtml#_idTextAnchor119), *Debugging Cypress
    Tests*, dives into the different kinds of tools that Cypress includes to aid in
    debugging applications. Using Cypress'' debugging tools, you will learn how to
    travel back to the snapshot of each command, see different page events that happened
    during execution, and visualize different commands and the times when elements
    were hidden and found. You will also learn how you can step forward and backward between
    command snapshots and pause and step through command snapshots in an iterative
    manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B15616_06_Final_NM_ePUB.xhtml#_idTextAnchor148), *Writing Cypress
    Tests Using TDD Approach*, introduces you to **Test-Driven Development** (**TDD**)
    concepts and how you can apply them to writing Cypress tests. You will learn how
    to write tests using a TDD approach and also dive deep into how you can practically
    apply TDD in an application that is yet to be developed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15616_07_Final_NM_ePUB.xhtml#_idTextAnchor167), *Understanding
    Element Interaction in Cypress*, covers how to interact with various elements
    of the DOM. The chapter will also teach you how to interact with animations, how
    to hover over elements, and how to check whether elements are disabled. By the
    end of this chapter, you will be comfortable with navigating through the DOM elements
    and writing meaningful tests for elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15616_08_Final_NM_ePUB.xhtml#_idTextAnchor183), *Understanding
    Variables and Aliases in Cypress*, explores how to deal with asynchronous commands
    through the use of aliases. We will also identify ways in which we can simplify
    our tests by using aliases. Finally, we will identify how to use aliases with
    routes and requests.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15616_09_Final_NM_ePUB.xhtml#_idTextAnchor196), *Advanced Uses
    of Cypress Test Runner*, looks at how to utilize the Cypress test runner to write
    better tests. Our focus will be on the instrument panel and the selector playground.
    We will learn how to use the instrument panel to understand the concepts of spying
    and stubbing and how Cypress interprets them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15616_10_Final_NM_ePUB.xhtml#_idTextAnchor211), *Exercise –
    Navigation and Network Requests*, exposes you to practical examples and exercises
    aimed at practicing how to use and make navigation of network requests. The exercise
    will also combine concepts such as aliasing and use of variables to ensure that
    you are able to chain the different concepts learned about in the second section
    of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B15616_11_Final_NM_ePUB.xhtml#_idTextAnchor232), *Exercise –
    Stubbing and Spying XHR Requests*, looks at understanding what XHR requests are
    and how Cypress can assist in stubbing requests that take too long or that are
    complicated to receive responses from. Cypress stubbing will be important to ensuring
    that implemented tests are not flaky and that we can have custom responses instead
    of waiting for server responses from a request.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B15616_12_Final_NM_ePUB.xhtml#_idTextAnchor251), *Visual Testing
    in Cypress*, covers how visual testing works in Cypress. We will explore what
    visual testing is, different types of testing, and how critical visual testing
    is to the modern web. We will also look at viewports and how they influence the
    process of visual testing and finally look at visual testing automated tools such
    as Applitools and Percy that we can use to carry out visual validation.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need some understanding of JavaScript and you will need Node.js and
    the Yarn and npm package managers installed on your machine. All the code examples
    given have been tested on macOS and should work okay with all Linux OSes too.
    For Windows OSes, especially for the last three chapters, kindly read the additional
    notes in the callout box, in the *Technical requirements* section on how to run
    the commands on Windows. At the time of writing, all the examples have been tested
    with Cypress version 6.2.1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/B15616_Preface_Table_1_AM.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of publication, this book was written with Cypress version 6.2.1,
    and some features may have been broken or deprecated. Kindly check our GitHub
    repository for the latest code updates and changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Always try out the exercises; they are not just for fun but are crafted to
    help you learn and grasp the content of the chapters.*'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Support** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Downloads**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "The `cy.intercept()` command listens to XHR responses
    and knows when Cypress has returned a response for a specific XHR request."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "To do this, open the browser console in your browser and click
    the **Network** tab, and then select the **XHR filter** option."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
