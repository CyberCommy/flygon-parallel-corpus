- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Progressive Web Apps with React aims to give you everything you need to know
    about the future of web development. **Progressive Web Apps** (**PWA**s) are becoming
    more and more common for companies looking to leverage the best the web can offer,
    powered by cutting-edge technologies that bridge the gap between web apps and
    native apps.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we'll leverage the power of the popular JavaScript library React.js
    to create a fast and functional UI. Then, we'll add Progressive Web App features
    such as push notifications and instant loading, using revolutionary new web technology.
    Finally, we'll streamline our app's performance and look at how to best measure
    its speed.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will feel comfortable with both React and PWAs,
    and be ready for the future of the web.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0021.html#K0RQ0-7dd7c66301294003b85168009fe95fa4), *Creating
    Our App Structure*, gives a brief overview of what exactly you will be learning
    to build-- a real-time chat application with push notifications and offline support.
    You will get to learn about the challenges that such an app presents, and get
    a brief overview of the technologies that will be discussed in this book. By the
    end of the chapter, you will set up the application structure of a chat app, with
    HTML and CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0048.html#1DOR00-7dd7c66301294003b85168009fe95fa4), *Getting
    Started with Webpack*, says that before you write any React code, you need to
    set up the webpack build process. In this chapter, you will be introduced to webpack;
    you will learn to install the package and set up some basic configuration as well
    as get the development server running. This chapter will get you ready to jump
    into React.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0063.html#1S2JE0-7dd7c66301294003b85168009fe95fa4),*  Our App''s
    Login Page*, introduces you to React time! In this chapter, you will learn to
    write the first two components: an App wrapper to contain the application and
    a LoginContainer. Learn about rendering with ReactDOM and JSX, and write a basic
    form to allow the users to log in. By the end of this chapter, you will be familiar
    and comfortable with the React syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0071.html#23MNU0-7dd7c66301294003b85168009fe95fa4), *Easy Backend
    Setup With Firebase*, informs that the login form looks great, but is lacking
    actual functionality. To move forward, you will need a backend database and authentication
    solution to communicate with it. This chapter will introduce you to Firebase by
    Google. Set up the application on the Firebase console, and then program the login
    and signup functionality for the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0086.html#2I0GC0-7dd7c66301294003b85168009fe95fa4), *Routing
    with React*, lets you know that once the user logs in, you want to redirect them
    to the main chat view. Therefore, in this chapter, you will learn to build that
    main view and then set up the React Router that allows the users to move between
    the pages. Lastly, learn to add a third view the individual user view--and explore
    parameter matching in URLs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0099.html#2UD7M0-7dd7c66301294003b85168009fe95fa4), *Completing
    Our App*, takes you through the last step in building the basic application, adding
    functionality to the chat and user views. You will learn to write and read data
    from Firebase, taking advantage of React life cycle methods to do so. Once that’s
    done, your web application will be complete, but it’s not quite progressive yet!'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0116.html#3EK180-7dd7c66301294003b85168009fe95fa4), *Adding
    a Service Worker*, covers service workers and how they work. Here, you''ll understand
    how to register a custom service worker and learn about its life cycle, and then
    hook into the default Firebase messaging service worker.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0128.html#3Q2800-7dd7c66301294003b85168009fe95fa4),* Using
    a Service Worker to Send Push Notifications*, teaches you to configure the app
    now that our service worker is ready, to be able to send the push notifications.
    You will use Firebase Cloud Messaging to manage sending these notifications, and
    add customization to control how and when they are sent on desktop and mobile.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0144.html#49AH00-7dd7c66301294003b85168009fe95fa4), *Making
    Our App Installable with a Manifest*, teaches that a manifest is a JSON file that
    allows users to save your app to their home screen. You will learn to create the
    manifest and understand the best practices as well as iOS-specific considerations.
    You will also learn to customize your splash screen and icons.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](part0156.html#4KONO0-7dd7c66301294003b85168009fe95fa4), *The App
    Shell*, puts across the point of the App Shell pattern being a key concept in
    PWAs, but what advantages does it bring? You will be introduced to both the shell
    and the RAIL system of progressive enhancement, and then move some of you app''s
    layout out of React for optimal rendering.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](part0175.html#56SIE0-7dd7c66301294003b85168009fe95fa4), *Chunking
    JavaScript to Optimize Performance with Webpack*, explores the PRPL pattern, its
    goals and methods, as well as an overview of how to achieve it in your app. Then,
    you will dive in, splitting up the JavaScript into chunks based on routes, and
    then lazy loading the secondary routes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](part0190.html#5L6AS0-7dd7c66301294003b85168009fe95fa4), *Ready
    to Cache*, walks through how you can leverage the service worker to achieve offline
    capability, by understanding the new Cache API, and how to use it with your service
    worker to cache the JavaScript chunks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](part0208.html#66BL00-7dd7c66301294003b85168009fe95fa4), *Auditing
    Our App*, says it''s now time to check our work! In this chapter, you will be
    introduced to Lighthouse and understand how to audit PWAs with Lighthouse.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](part0219.html#6GRB60-7dd7c66301294003b85168009fe95fa4), *Conclusion
    and Next Steps*, Your first PWA is complete! In the development process, you built
    most of the PWA infrastructure manually. In this chapter, you will get to learn
    about the helper libraries and shortcuts to save time, and you''ll also explore
    the future of PWA development. Additionally, you will come across suggestions
    about the future project ideas and improvements that can be made to your chat
    app, as an extra challenge.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All you require is a computer that can run Node.js ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)),
    a text editor for writing code, and the latest version of the Chrome browser.
    If you want to test your application on mobile, you'll also need an Android or
    iOS phone.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for JavaScript developers who want to develop high-performance
    Web User interfaces. This book requires basic knowledge of HTML, CSS and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning. Code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles are shown as follows: Inside `App.js`, we first import the `LoginContainer`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: Flip back to the app, and you should see the Hello from LoginContainer of
    our new component.'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
