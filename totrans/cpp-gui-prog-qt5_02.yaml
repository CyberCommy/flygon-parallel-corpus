- en: Qt Widgets and Style Sheets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the advantages of using Qt for software development is that it's very
    easy to design a program's **graphical user interface** (**GUI **) using the tools
    provided by Qt. Throughout this book, we will try and create a single project
    that involves many different components and modules of Qt. We will go through
    each section of the project in each chapter, so that you will eventually be able
    to grasp the entire Qt Framework and at the same time complete demo projects,
    which is a really valuable item to add to your portfolio. You can find all the
    source code at [https://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5](https://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Qt Designer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Qt widgets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Style Sheets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will take a deep look into what Qt can offer us when it
    comes to designing sleek-looking GUIs with ease. At the beginning of this chapter,
    you will be introduced to the types of widgets provided by Qt and their functionalities.
    After that, we will walk through a series of steps and design our first form application
    using Qt.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Qt Designer
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of GUI applications in Qt, namely Qt Quick Application
    and Qt Widgets Application. In this book, we will cover mostly the latter, as
    it is the standard way of designing a GUI for desktop applications, and Qt Quick
    is more widely used for mobile and embedded systems:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to open up Qt Creator and create a new project.
    You can do so by either going to File | New File or Project, or by clicking the
    New Project button located at the welcome screen:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d6b9538-0ada-4bb2-89f9-17caebfb9a74.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'After that, a new window will pop up and ask you to pick the type of project
    you want to create. Choose Qt Widgets Application under the Application category
    and click Choose..., Then, create a name for your project (I have chosen `Chapter2`
    for mine) and select the project directory by clicking the Browse... button:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e7a8d84-01bf-4955-845d-8aa6561f1888.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will be asked to select a kit for your project. If you are running
    this on a Windows system and you have Microsoft Visual Studio installed, you can
    pick the relevant kit with the MSVC compiler; otherwise, choose the one running
    MinGW compiler. Qt normally comes with MinGW compiler pre-installed so you don''t
    need to download it separately. If you''re running this on a Linux system, then
    you will see the GCC kit, or the Clang kit if you''re running this on macOS. To
    learn more about *Kits and Builds Settings*, please check out [Chapter 15](dfd404c4-78cc-459f-8a4c-34a4972f072f.xhtml), *Cross-Platform
    Development*:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27f4cfa6-475e-4f42-b565-9b1032f053dc.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'After that, the new project wizard will ask you to name your main window class.
    We''ll just go with the default settings and click the Next button to proceed:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/807a7eff-6385-4e4b-bb7f-152a098a229e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you will be asked to link your version control tool to your project.
    By linking a version control tool to your project, you will be able to keep every
    revision of your code on a remote server and keep track of all the changes being
    made to the project. This is especially useful if you''re working in a team. In
    this tutorial, however, we will not be using any version control, so let''s just
    proceed by clicking the Finish button:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de7bb5f9-296f-4f14-9e74-3585be29dc2d.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'Once you''re done with that, Qt Creator will open up your new project and you
    will be able to see your project directory displayed at the top left corner, like
    so:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36036ee1-58f6-4813-92e1-f96125abb552.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: 'Now, open up `mainwindow.ui` by double-clicking on it on the project directory
    panel. Qt Creator will then switch to another mode, called Qt Designer, which
    is essentially a tool used to design widget-based GUIs for your program. Once
    Qt Designer is activated, you will see a list of widgets available on the left
    panel and a place for you to design your GUI on the right. Let''s take a bit of
    time to get ourselves familiar with Qt Designer''s interface before we start learning
    how to design our own UI:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e7c7455-3546-4bdd-ad91-6e405747afe6.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: 'The following numbers represent the UI shown in the preceding screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**Menu bar**: The menu bar is where you find all the basic functions of Qt
    Creator, such as to create new projects, save files, change compiler settings,
    and so on.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Widget box**: The widget box is sort of like a toolbox, where all the different
    widgets provided by Qt Designer are being displayed and are ready to be used.
    You can drag-and-drop any of the widgets from the widget box directly onto the
    canvas in the form editor and they will appear in your program.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mode selector**: The mode selector is where you can quickly and easily switch
    between source code editing or UI design by clicking the Edit or Design buttons.
    You can also easily navigate to the debugger and profiler tools by clicking on
    their respective buttons located on the mode selector panel.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build shortcuts**: There are three different shortcut buttons being displayed
    here—Build, Run, and Debug. You can easily build and test run your application
    by pressing the buttons here instead of doing so on the menu bar.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Form editor**: This is where you apply your creative idea and design your
    application''s UI. You can drag and drop any of the widgets from the Widget Box
    onto the canvas in the Form Editor for it to appear in your program.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Form toolbar**: The form toolbar is where you can quickly select a different
    form to edit. You can change to a different form by clicking on the drop-down
    box located above the widget box and selecting the UI file you want to open with
    Qt Designer. There are also buttons that allow you to switch between different
    modes for the form editor and layout of your UI.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Object inspector**: This is where all the widgets in your current `.ui` file
    are being listed in a hierarchical fashion. The widgets are being arranged in
    the tree list in accordance to its parent-child relationship with other widgets.
    The widgets'' hierarchy can be easily re-arranged by moving it in the form editor.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Property editor**: When you select a widget from the object inspector window
    (or from the form editor window), the properties of that particular widget will
    be displayed on the property editor. You can change any of the properties here
    and the result will instantly show up on the form editor.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action editor and signals and slots editor**: Both the action editor and
    signals and slots editor are located in this window. You can create actions that
    are linked to your menu bar and toolbar buttons by using the action editor. The
    signal and slots editor is where you'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Output panes**: The output panes are where you look for issues or debugging
    information when testing your application. It consists of several windows that
    display different information, such as Issues, Search Results, Application Output,
    and so on.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a nutshell, Qt provides an all-in-one editor called Qt Creator. Qt Creator
    works hand-in-hand with several different tools that come with Qt, such as the
    script editor, compiler, debugger, profiler, and UI editor. The UI editor, which
    you can see in the preceding screenshot, is called Qt Designer. Qt Designer is
    the perfect tool for designers to design their program's UI without writing any
    code. This is because Qt Designer adopted the **WYSIWYG** (**what you see is what
    you get**) approach by providing an accurate visual representation of the final
    result, which means whatever you design with Qt Designer will turn out exactly
    the same when the program is compiled and run. Do note that each tool that comes
    with Qt can, in fact, be run individually, but if you're a beginner or just doing
    a simple project, it's recommended to just use the Qt Creator, which connects
    all those tools together in one interface.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Qt提供了一个名为Qt Creator的多合一编辑器。Qt Creator与Qt附带的几种不同工具紧密配合，例如脚本编辑器、编译器、调试器、分析器和UI编辑器。您在上面的截图中看到的UI编辑器称为Qt
    Designer。Qt Designer是设计师设计其程序UI的完美工具，而无需编写任何代码。这是因为Qt Designer采用了所见即所得的方法，通过提供最终结果的准确视觉表示，意味着您在Qt
    Designer中设计的任何内容在编译和运行程序时都会完全相同。请注意，Qt附带的每个工具实际上都可以单独运行，但如果您是初学者或只是做一个简单的项目，建议只使用Qt
    Creator，它将所有这些工具连接在一个界面中。
- en: Basic Qt widgets
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的Qt小部件
- en: 'Now, we will take a look at the default set of widgets available in Qt Designer.
    You can actually create custom widgets by yourself, but that''s an advanced topic
    which is out of the scope of this book. Let''s take a look at the first two categories
    listed on the widget box—Layouts and Spacers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下Qt Designer中默认的小部件集。实际上，您可以自己创建自定义小部件，但这是本书范围之外的高级主题。让我们来看看小部件框中列出的第一和第二类别——布局和间隔：
- en: '![](img/b0c9740b-923c-42a5-8f99-7becc72dd3f7.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0c9740b-923c-42a5-8f99-7becc72dd3f7.png)'
- en: 'Layouts and Spacers are not really something that you can directly observe,
    but they can affect the positions and orientations of your widgets:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 布局和间隔实际上并不是您可以直接观察到的东西，但它们可以影响小部件的位置和方向：
- en: 'Vertical Layout: A vertical layout widget lays out widgets in a vertical column,
    from top to bottom.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垂直布局：垂直布局小部件以垂直列从上到下布置小部件。
- en: 'Horizontal Layout: A horizontal layout widget lays out widgets in a horizontal
    row, from left to right (or right to left for right-to-left languages).'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 水平布局：水平布局小部件以水平行从左到右（或从右到左的从右到左语言）布置小部件。
- en: 'Grid Layout: A grid layout widget lays out widgets in a two-dimensional grid.
    Each widget can occupy more than one cell.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网格布局：网格布局小部件以二维网格布局放置小部件。每个小部件可以占据多个单元格。
- en: 'Form Layout: A form layout widget lays out widgets in a two-column field style.
    Just as the name implies, this type of layout is best suited for forms of input
    widgets.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表单布局：表单布局小部件以两列字段样式放置小部件。正如其名称所示，这种类型的布局最适合输入小部件的表单。
- en: Layouts provided by Qt are very important for creating quality applications
    and are really powerful. Qt programs don't typically lay elements out using the
    fixed position because layouts allow dialogs and windows to be dynamically resized
    in a sensible manner while handling a varying length of text when it's localized
    in different languages. If you don't make use of layouts in your Qt programs,
    its UI may very look very different on different computers or devices, which in
    most cases will create an unpleasant user experience.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供的布局对于创建高质量的应用程序非常重要，而且非常强大。Qt程序通常不使用固定位置来布置元素，因为布局允许对话框和窗口以合理的方式动态调整大小，同时处理不同语言中本地化的文本长度。如果您在Qt程序中不使用布局，其UI在不同计算机或设备上可能会看起来非常不同，这在大多数情况下会导致不愉快的用户体验。
- en: Next, let's take a look at the spacer widget. A spacer is a non-visible widget
    that pushes widgets along a specific direction until it reaches the limit of the
    layout container. Spacers must be used within a layout, otherwise they will not
    carry any effect.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看间隔小部件。间隔是一个不可见的小部件，它沿特定方向推动小部件，直到达到布局容器的限制。间隔必须在布局内使用，否则它们将不会产生任何效果。
- en: 'There are two types of spacer, namely the Horizontal Spacer and Vertical Spacer:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的间隔，即水平间隔和垂直间隔：
- en: 'Horizontal Spacer: A horizontal spacer widget is a widget that occupies the
    space within a layout and pushes other widgets within the layout along a horizontal
    space.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 水平间隔：水平间隔小部件是一个占据布局内空间并将布局内其他小部件推动沿水平空间移动的小部件。
- en: 'Vertical Spacer: A vertical spacer is similar to a horizontal spacer, except
    it pushes the widgets along the vertical space.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垂直间隔：垂直间隔与水平间隔类似，只是它将小部件沿垂直空间推动。
- en: It's kind of hard to imagine how the Layouts and Spacers work without actually
    working with them. Don't worry about that, as we will be trying it out in a moment.
    One of the most powerful features of Qt Designer is that you can experiment with
    and test your layouts without have to change and compile your code after each
    change.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有实际使用它们的情况下，很难想象布局和间隔是如何工作的。不用担心，我们马上就会尝试它。Qt Designer最强大的功能之一是您可以在每次更改后无需更改和编译代码即可实验和测试布局。
- en: 'Besides Layouts and Spacers, there are a few more categories, namely Buttons,
    Item Views, Containers, Input Widgets, and Display Widgets. I won''t go and explain
    every single one of them as their names are pretty much self-explanatory. You
    can also drag and drop the widget on the Form Editor to see what it does. Let''s
    do it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了布局和间隔之外，还有几个类别，包括按钮、项目视图、容器、输入小部件和显示小部件。我不会解释它们中的每一个，因为它们的名称基本上是不言自明的。您也可以将小部件拖放到表单编辑器中以查看其功能。让我们来试一试：
- en: 'Click and drag the Push Button widget from the Widget Box to the Form Editor,
    as shown in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从小部件框中将“推按钮”小部件拖放到表单编辑器中，如下截图所示：
- en: '![](img/b08ee4fd-99be-4cc4-b9ea-05ff5ebcc182.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b08ee4fd-99be-4cc4-b9ea-05ff5ebcc182.png)'
- en: 'Then, select the newly added Push Button widget, and you will see that all
    the information related to this particular widget is now appearing on the Properties
    Editor panel:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e37a02f-3c9f-4105-8f8e-c9c5adc6a2c9.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: 'You can change the properties of the widget, such as appearance, focus policy,
    tooltip, and so on programmatically in C++ code. Some properties can also be edited
    directly in the Form Editor. Let''s double-click on the Push Button and change
    the text of the button, and then resize the button by dragging its edge:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/66b379d7-9073-4de9-9ac0-4c67809f03e4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: 'Once you''re done with that, let''s drag and drop a Horizontal Layout to the
    Form Editor. Then, drag the Push Button to the newly added layout. You will now
    see that the button automatically fits into the layout:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46d70ffd-ef5a-40d5-886e-3d909a82504b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: 'By default, the main window does not carry any layout effect, and therefore
    the widgets will stay where they were originally placed, even when the window
    is being resized, which does not look very good. To add a layout effect to the
    main window, right-click on the window in the Form Editor, select Lay out, and
    finally select Lay Out Vertically. You will now see the Horizontal Layout widget
    we added previously is now automatically expanding to fit the entire window. This
    is the correct behavior of a layout in Qt:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7df2925b-fe74-48f6-9624-923afa4de14b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'Next, we can play around with the spacer and see what effect it has. We will
    drag and drop a Vertical Spacer to the top of the layout containing the Push Button,
    and then we''ll place two Horizontal Spacers on both sides of the button, within
    its layout:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b786e4c5-9668-4c30-ac42-3ad74bade19c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: The spacers will push all of the widgets located on both of their ends and occupy
    the space itself. In this example, the Submit button will always stay at the bottom
    of the window and keep its middle position, regardless of the size of the window.
    This makes the GUI look good, even on different screen sizes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Ever since we added the spacers to the window, our Push Button has been squeezed
    to its minimum size. Let''s enlarge the button by setting its `minimumSize` property
    to 120 x 40, and you''ll see that the button appears a lot bigger now:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10f7a183-c62d-4c25-bf11-16e2e9784767.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'After that, let''s add a Form Layout above the layout of the Push Button and
    a Vertical Spacer below it. You will now see that the Form Layout is really thin
    because it has been squeezed by the Vertical Spacers we placed earlier onto the
    main window, which can be troublesome when you want to drag and drop a widget
    into the Form Layout. To solve this problem, temporarily set the `layoutTopMargin`
    property to `20` or higher:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/190414c4-4b1b-4b30-b24c-940dc11f5e7e.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'Then, drag and drop two Labels to the left side of the Form Layout and two Line
    Edits to its right side. Double click on both of the labels and change their display
    texts to `Username:` and `Password:`, respectively. Once you''re done with that,
    set the `layoutTopMargin` property of the Form Layout back to `0`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80a44e78-2571-458f-b9db-adbae4d956fa.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: 'Currently, the GUI looks pretty great, but the Form Layout is now occupying
    the entire spacing in the middle, which is not very pleasant when the main window
    is maximized. To keep the form compact, we''ll do the following steps, which are
    a little tricky:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'First, drag and drop a Horizontal Layout above the form, and set its `layoutTopMargin`
    and `layoutBottomMargin` to `20` so that the widgets that we place in it, later
    on, are not too close to the Submit button. Next, drag and drop the entire Form
    Layout, which we placed earlier into the Horizontal Layout. Then, place Horizontal
    Spacers on both sides of the form to keep it centered. The following screenshot
    illustrates these steps:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e87bdb1a-9eab-4ffc-bad2-59b8bf8a76af.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: After that, we can make further adjustments to the GUI to make it look tidy
    before we proceed to the next section, where we will be customizing the widgets'
    style. Let's start off by setting the `minimumSize` property of the two Line Edit
    widgets to 150 x 25\. Then, set the `layoutLeftMargin`, `layoutRightMargin`, `layoutTopMargin`,
    and `layoutBottomMargin` properties of the Form Layout to `25`. The reason why
    we want to do this is that we will be adding an outline to the Form Layout in
    the following section.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since the Push Button is now way too distanced from the Form Layout, let''s
    set the `layoutBottomMargin` property of the Horizontal Layout, which sets the
    Form Layout to `0`. This will make the Push Button move slightly above and closer
    to the Form Layout. After that, we''ll adjust the size of the Push Button to make
    it align with the Form Layout. Let''s set the `minimumSize` property of the Push
    Button to 260 x 35, and we''re done!:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc448268-3595-446c-a1cb-1fb416824a36.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: You can also preview your GUI without building your program by going to Tools
    | Form Editor | Preview. Qt Designer is a very handy tool when it comes to designing
    sleek GUIs for Qt programs without a steep learning curve. In the following section,
    we will learn how to customize the appearance of the widgets using Qt Style Sheets.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Qt Style Sheets
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt's Widgets Application uses a styling system called Qt Style Sheets, which
    is similar to the web technology's styling system—**CSS** (**Cascading Style Sheet**).
    All you need to do is write the style description of the widget and Qt will render
    it accordingly. The syntax of Qt Style Sheets is pretty much the same as CSS.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt Style Sheets has been inspired by CSS and thus they are both very similar
    to each other:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt Style Sheets:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'CSS:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, both Qt Style Sheet and CSS contain a declaration
    block and a selector. Each declaration consists of a property and value, which
    are separated by a colon.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change a widget''s style sheet by using two methods—using C++ code
    directly or by using the properties editor. If you''re using C++ code, you can
    call the `QObject::setStyleSheet()` function, like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code changes the background color of our push button widget to
    green. You can also achieve the same result by writing the same declaration into
    the `styleSheet` property of the widget in Qt Designer:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To learn more about the syntax and properties of Qt Style Sheets, please refer
    to the following link: [http://doc.qt.io/qt-5/stylesheet-reference.html](http://doc.qt.io/qt-5/stylesheet-reference.html)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue with our project and apply a custom Qt Style Sheet to our GUI!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'First, right-click on the Submit button and select Change styleSheet... A window
    will pop up for you to edit the widget''s Style Sheet:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26ee01cd-38ad-4ec7-a8d5-907c466e4c39.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: 'Then, add the following to the Style Sheet Editor window:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you''re done, click the OK button and you should be able to see that the
    Submit button changes its appearance to this:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e14883aa-10c4-4615-93c4-30d02a0923c4.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: The Style Sheet we used earlier is pretty much self-explanatory. It enables
    the borderline of the Push Button and sets the border color to dark blue using
    RGB values. Then, it also applies a rounded corner effect to the button and changes
    its background color to light blue. Finally, the Submit text has also been changed
    to white.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to apply a custom Style Sheet to the Form Layout. However, you
    will notice that there is no Change styleSheet... option when right clicking on
    it. This is because layouts do not carry that property with it. In order to apply
    styling to the Form Layout, we must first convert it into a QWidget or QFrame
    object. To do so, right-click on the Form Layout and select Morph into | QFrame:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3634c2e1-b183-4dd3-ab0e-845d8041d60c.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: 'Once you''re done with that, you will notice it is now carrying the `styleSheet`
    property and thus we are now able to customize its appearance. Let''s right-click
    on it and select Change styleSheet... to open up the Style Sheet Editor window.
    Then, insert the following script:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您会注意到它现在具有`styleSheet`属性，因此我们现在可以自定义其外观。让我们右键单击它，然后选择“Change styleSheet...”打开样式表编辑器窗口。然后，插入以下脚本：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The word `formFrame` is referring to the widget''s `objectName` property and
    it must match the exact name of the widget, otherwise the style will not be applied
    to it. The reason why we define the widget name for this example (which we didn''t
    do in the previous one) is because the style will also be applied to all its children
    if we don''t specify the widget name. You can try and remove `#formFrame {}` from
    the preceding script and see what happens—now, even the Labels and Line Edits
    have borderlines, and that is not what we intended to do. The GUI now looks like
    this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 单词`formFrame`指的是小部件的`objectName`属性，它必须与小部件的确切名称匹配，否则样式将不会应用于它。我们为这个例子定义小部件名称的原因（这是我们在上一个例子中没有做的）是因为如果我们不指定小部件名称，样式也将应用于其所有子级。您可以尝试从前面的脚本中删除`#formFrame
    {}`，然后看看会发生什么——现在，即使标签和行编辑也有边框线，这不是我们打算做的。GUI现在看起来像这样：
- en: '![](img/120838d2-fa4d-46c0-8ef9-fd47c956e19b.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/120838d2-fa4d-46c0-8ef9-fd47c956e19b.png)'
- en: Lastly, we want to have a nice-looking background, and we can do this by attaching
    a background image. To do so, we first need to import the image into Qt's resource
    system. Go to File | New File or Project...Then, select Qt under the Files and
    Classes category. After that, pick the Qt Resource File and click the Choose...
    button. The Qt resource system is a platform-independent mechanism for storing
    binary files in the application's executable. You can basically store all of those
    important files here, such as icon images or language files, directly into your
    executable by using the Qt resource file. These important files will be directly
    embedded into your program during the compilation process.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们想要一个漂亮的背景，我们可以通过附加背景图像来实现这一点。为此，我们首先需要将图像导入到Qt的资源系统中。转到“文件”|“新建文件或项目...”，然后在“文件和类别”类别下选择Qt。之后，选择Qt资源文件并单击“选择...”按钮。Qt资源系统是一种存储二进制文件的平台无关机制，这些文件存储在应用程序的可执行文件中。您可以基本上将所有这些重要文件存储在这里，例如图标图像或语言文件，直接通过使用Qt资源文件将这些重要文件直接嵌入到编译过程中的程序中。
- en: 'Then, key in the file name and set its location before pressing the Next button,
    and follow this by clicking the Finish button. Now, you will see a new resource
    file being created, which I named `resource.qrc`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在按下“下一步”按钮之前，键入文件名并设置其位置，然后点击“完成”按钮。现在，您将看到一个新的资源文件被创建，我命名为`resource.qrc`：
- en: '![](img/50822283-7c7e-4793-8d0b-b8aecd132fbd.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50822283-7c7e-4793-8d0b-b8aecd132fbd.png)'
- en: 'Open up `resource.qrc` with Qt Creator and select Add | Add Prefix. After that,
    key in your preferred prefix, for example, `/images`. Once you''re done with that,
    select Add again and this time, pick Add Files. Add the image file provided by
    the sample project called `login_bg.png`. Then, save `resource.qrc` and right-click
    on the image and select Copy Resource Path to Clipboard. After that, close `resource.qrc`
    and open up `mainwindow.ui` again:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用Qt Creator打开`resource.qrc`，然后选择“添加”|“添加前缀”。之后，键入您喜欢的前缀，例如`/images`。完成后，再次选择“添加”，这次选择“添加文件”。添加样本项目提供的图像文件`login_bg.png`。然后，保存`resource.qrc`，右键单击图像，选择“复制资源路径到剪贴板”。之后，关闭`resource.qrc`，再次打开`mainwindow.ui`：
- en: '![](img/6dd73f49-ae5b-4203-b622-73a4a5516060.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6dd73f49-ae5b-4203-b622-73a4a5516060.png)'
- en: 'The next thing we need to do is to right-click on the `centralWidget` object
    from the Object Inspector and select Change styleSheet..., and then insert the
    following script:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是右键单击“Object Inspector”中的“centralWidget”对象，然后选择“Change styleSheet...”，然后插入以下脚本：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The text within `url()` can be inserted by pressing *Ctrl* + *V* (or paste)
    because it was copied to the clipboard when we selected Copy Resource Path to
    Clipboard in the previous step. The final outcome looks like this:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`url()`中的文本可以通过按*Ctrl* + *V*（或粘贴）插入，因为在上一步中选择“复制资源路径到剪贴板”时已将其复制到剪贴板。最终结果如下：
- en: '![](img/7234cdb9-3537-4851-94f0-2f498ad43a0e.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7234cdb9-3537-4851-94f0-2f498ad43a0e.png)'
- en: Please make sure that you also build and run the application, and then check
    whether the final outcome looks the same, as intended. There are a lot more things
    to tweak in order to make it look truly professional, but so far it's looking
    pretty great!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您还构建和运行应用程序，然后检查最终结果是否与预期相同。还有很多东西可以调整，以使其看起来真正专业，但到目前为止，它看起来相当不错！
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Qt Designer really revolutionized the way we design program GUIs. Not only does
    it include all the common widgets but it also has handy stuff like the layout
    and spacer, which makes our program run perfectly fine on different types of monitors
    and screen sizes. Also, notice that we have successfully created a working application
    with a beautiful user interface without writing a single line of C++ code!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer真正改变了我们设计程序GUI的方式。它不仅包括所有常见的小部件，还有像布局和间隔这样方便的东西，这使我们的程序在不同类型的监视器和屏幕尺寸上运行得非常好。还要注意，我们已成功创建了一个具有漂亮用户界面的工作应用程序，而没有编写一行C++代码！
- en: What we've learned in this chapter merely scratches the surface of Qt, as there
    are many more features that we are yet to cover! Join us in the next chapter to
    learn how we can make our program truly functional!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们学到的只是Qt的冰山一角，因为还有许多功能我们尚未涵盖！在下一章中加入我们，学习如何使我们的程序真正功能强大！
