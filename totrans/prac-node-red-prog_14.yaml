- en: '*Chapter 11*: Visualize Data by Creating a Server-Side Application in the IBM
    Cloud'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a server application to visualize data that
    has been sent from an edge device in the IoT, using Node-RED. For a server-side
    application, I would like to use the IBM Cloud here. By following the tutorials
    in this chapter, you will master how to visualize sensor data on a server application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a public MQTT broker service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing the data from Node-RED on an edge device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscribing and visualizing data on the cloud-side Node-RED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have mastered how to visualize sensor data
    on cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To progress in this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'An IBM Cloud account: [https://cloud.ibm.com/](https://cloud.ibm.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A CloudMQTT account: [https://cloudmqtt.com/](https://cloudmqtt.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used in this chapter can be found in `Chapter11` folder at [https://github.com/PacktPublishing/-Practical-Node-RED-Programming](https://github.com/PacktPublishing/-Practical-Node-RED-Programming).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a public MQTT broker service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recall the previous chapter, [*Chapter 10*](B16353_10_ePub_AM.xhtml#_idTextAnchor121),
    *Handling Sensor Data on the Raspberry Pi*. We sent the data of the temperature/humidity
    sensor, which was connected to the edge device (Raspberry Pi), to the cloud and
    confirmed that the data could be observed on the cloud side.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we checked how to operate an MQTT broker using a service
    called **Mosquitto**. This was in order to focus on *sending data from edge devices*
    to an MQTT broker.
  prefs: []
  type: TYPE_NORMAL
- en: However, this was a mechanism where everything was done locally on the Raspberry
    Pi. Essentially, when trying to implement an IoT mechanism, MQTT brokers should
    be in a public location and accessible from anywhere via the internet.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to host your own **Mosquitto** MQTT broker in the public cloud,
    but that adds some extra complexity in terms of setting up and maintaining it.
    There are a number of public MQTT services available that can make it easier to
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will use a service called **CloudMQTT** for the MQTT broker,
    but you can replace the MQTT broker part with your favorite service. You can also
    publish your own MQTT broker, such as **Mosquitto**, on IaaS instead of using
    SaaS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – CloudMQTT overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.1_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – CloudMQTT overview
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: An MQTT broker is a server that receives messages from the publisher and sends
    them to subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: The server that delivers messages in PubSub is called the MQTT broker.
  prefs: []
  type: TYPE_NORMAL
- en: 'PubSub is an amalgamation of the words *Publisher* and *Subscriber*:'
  prefs: []
  type: TYPE_NORMAL
- en: a) A publisher is a person who delivers a message.
  prefs: []
  type: TYPE_NORMAL
- en: b) A subscriber is a person who subscribes to a message.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of it as a server that receives messages from clients and distributes
    them to clients.
  prefs: []
  type: TYPE_NORMAL
- en: MQTT differs from ordinary socket communication in that it communicates on a
    one-to-many basis. In other words, it has a mechanism to distribute the message
    of one client to many people. This system allows us to deliver messages to many
    people simultaneously in real time.
  prefs: []
  type: TYPE_NORMAL
- en: We will now learn how to prepare for **CloudMQTT**. As mentioned previously,
    **CloudMQTT** is an MQTT broker published as SaaS. If you don't use **CloudMQTT**
    and want to use another SaaS MQTT broker or publish an MQTT broker on IaaS, you
    can skip this step. However, the basic configuration information for using an
    MQTT broker remains the same, so I believe this step will help you configure any
    MQTT broker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an MQTT broker service on **CloudMQTT**:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to **CloudMQTT** at [https://cloudmqtt.com/](https://cloudmqtt.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you access the website, click the **Log in** button at the top right of
    the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – CloudMQTT website'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.2_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – CloudMQTT website
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have your CloudMQTT account, log in to your account by entering
    your email address and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Logging in to CloudMQTT'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.3_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Logging in to CloudMQTT
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t yet have your account, please create a new account via the **Sign
    up** button at the bottom of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Creating your account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.4_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – Creating your account
  prefs: []
  type: TYPE_NORMAL
- en: Create an instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After logging in, click the **Create New Instance** button in the top-right
    corner of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Creating a new instance'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.5_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – Creating a new instance
  prefs: []
  type: TYPE_NORMAL
- en: Select a name and payment plan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This name is for your MQTT broker service. You can give it any name you want.
    I have used `Packt MQTT Broker`.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the free plan, **Cute Cat**, is no longer available. So, we will
    select the cheapest plan, **Humble Hedgehog**, here. This plan costs $5/month.
  prefs: []
  type: TYPE_NORMAL
- en: It's up to you to use this paid service. If you want to avoid billing, you need
    to look for a free MQTT broker service.
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting the name and payment plan, click the **Select Region** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Selecting a name and payment plan'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.6_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – Selecting a name and payment plan
  prefs: []
  type: TYPE_NORMAL
- en: Select a region and data center.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This service is running on **AWS**. So, you can select a region where the data
    center is placed. You can select any region. Here, we are using **US-East-1**.
  prefs: []
  type: TYPE_NORMAL
- en: After making the selection, click the **Review** button:![Figure 11.7 – Selecting
    a region and data center
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.7_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – Selecting a region and data center
  prefs: []
  type: TYPE_NORMAL
- en: Next, finalize creation of the MQTT broker instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Please check the payment plan, service name, service provider, and data center
    region. After that, click the **Create instance** button to finalize creation
    of this instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Finalizing MQTT broker instance creation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.8_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.8 – Finalizing MQTT broker instance creation
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the data from Node-RED on an edge device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will configure our Raspberry Pi. To get started, launch
    the Raspberry Pi and open the Node-RED flow editor. This Node-RED flow editor
    should still have a flow to send the sensor data implemented in [*Chapter 10*](B16353_10_ePub_AM.xhtml#_idTextAnchor121),
    *Handling Sensor Data on the Raspberry Pi*, to the server. If you have deleted
    this flow, or if you have not created it, please re-execute it by referring to
    [*Chapter 10*](B16353_10_ePub_AM.xhtml#_idTextAnchor121), *Handling Sensor Data
    on the Raspberry Pi*. Double-click the **mqtt out** node that makes up the flow
    to open the settings window. We used **Mosquitto** last time, but this time we
    will connect to **CloudMQTT**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure Node-RED on the Raspberry Pi to connect
    to CloudMQTT:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the flow you created in [*Chapter 10*](B16353_10_ePub_AM.xhtml#_idTextAnchor121),
    *Handling Sensor Data on the Raspberry Pi*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this chapter, we only use a flow with the **mqtt out** node because this
    scenario is just for sending data to a Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Accessing the flow we created in the previous chapter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Image86736.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.9 – Accessing the flow we created in the previous chapter
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `packt`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`true`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit** button (pencil mark) to the right of **Server** to open the
    credential properties:![Figure 11.11 – Clicking the Edit button to open the Properties
    settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.11 – Clicking the Edit button to open the Properties settings
  prefs: []
  type: TYPE_NORMAL
- en: On the Server settings panel, select the `driver.cloudmqtt.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`18913`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other properties in the **Connection** tab are not supposed to be changed
    and must be kept at their default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can refer to the following screenshot for the **Connection** tab settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – MQTT broker server settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.12 – MQTT broker server settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select the **Security** tab to edit the configuration to connect the
    MQTT broker and fill in each property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Username**: The user that you got from CloudMQTT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: The password that you got from CloudMQTT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can refer to the following screenshot for the **Security** tab settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – MQTT broker user and password settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.13 – MQTT broker user and password settings
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check these properties at the CloudMQTT admin menu. This menu can be
    accessed via the Instances list of the CloudMQTT dashboard: [https://customer.cloudmqtt.com/instance](https://customer.cloudmqtt.com/instance)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.14 – CloudMQTT Instances list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.14_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.14 – CloudMQTT Instances list
  prefs: []
  type: TYPE_NORMAL
- en: This completes the settings on the Raspberry Pi side. Next, let's set up the
    Node-RED flow editor so that data can be acquired (subscribed) with Node-RED on
    the cloud side.
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing and visualizing data on the cloud-side Node-RED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to visualize the received data with Node-RED
    on the cloud side. This uses one of the dashboard nodes as we learned in [*Chapter
    6*](B16353_06_ePub_AM.xhtml#_idTextAnchor073), *Implementing Node-RED in the Cloud*,
    but this time, we'll choose Gauge's UI to make it look a little better.
  prefs: []
  type: TYPE_NORMAL
- en: The cloud-side Node-RED used this time runs on the IBM Cloud (PaaS), but CloudMQTT,
    which created the service as an MQTT broker earlier, is a cloud service that differs
    from the IBM Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn that an MQTT broker exists so that it can be
    accessed from various places, and that both publishers (data distributors) and
    subscribers (data receivers) can use it without being aware of where it is.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing Node-RED on the IBM Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s create a Node-RED flow connected to CloudMQTT by performing the
    following steps. Here, we will use Node-RED on the IBM Cloud. Please note that
    it is not Node-RED on the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Node-RED flow editor, log in to your IBM Cloud, and call the Node-RED
    service you have already created from your dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either click on **View all** or **Cloud Foundry services** on the **Resource
    summary** tile on the dashboard. Clicking on either option will take you to a
    list of resources on the IBM Cloud you created:![Figure 11.15 – Opening the resource
    list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.15_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.15 – Opening the resource list
  prefs: []
  type: TYPE_NORMAL
- en: If you have not created a Node-RED service on your IBM Cloud, please refer to
    [*Chapter 6*](B16353_06_ePub_AM.xhtml#_idTextAnchor073), *Implementing Node-RED
    in the Cloud*, to create one before moving ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Cloud Foundry apps** displayed on the **Resource list** screen,
    click on the Node-RED service you created to open the Node-RED flow editor:![Figure
    11.16 – Selecting the Node-RED service you created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.16_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.16 – Selecting the Node-RED service you created
  prefs: []
  type: TYPE_NORMAL
- en: Then, click **Visit App URL** to access the Node-RED flow editor:![Figure 11.17
    – Clicking Visit App URL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.17_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.17 – Clicking Visit App URL
  prefs: []
  type: TYPE_NORMAL
- en: When the top screen of the Node-RED flow editor is displayed, click the **Go
    to your Node-RED flow editor** button to open the Node-RED flow editor:![Figure
    11.18 – Clicking the Go to your Node-RED flow editor button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.18_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.18 – Clicking the Go to your Node-RED flow editor button
  prefs: []
  type: TYPE_NORMAL
- en: Make a flow to visualize the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you accessed your Node-RED flow editor on your IBM Cloud, create a flow
    as follows. Place the **mqtt in** node, **json** node, two **change** nodes, and
    **gauge** node after each **change** node. If you want to get the debug log for
    this flow, please add the **debug** node after any node. In this example, two
    **debug** nodes are placed after the **mqtt in** node and the first **change**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: 'You already have the **dashboard** nodes, including the **gauge** node. If
    you don''t have them, please go back to the *Make a flow for use case 2 – visualizing
    data* tutorial in [*Chapter 6*](B16353_06_ePub_AM.xhtml#_idTextAnchor073), *Implementing
    Node-RED in the Cloud*, to get the **dashboard** nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Making a flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.19_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.19 – Making a flow
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `packt`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`auto-detect` (string or buffer)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit** button (pencil icon) to the right of **Server** to open the
    credential properties:![Figure 11.20 – Clicking the Edit button to open the Properties
    settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.20_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.20 – Clicking the Edit button to open the Properties settings
  prefs: []
  type: TYPE_NORMAL
- en: On the Server settings panel, select the `driver.cloudmqtt.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`18913`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other properties of the **Connection** tab are not supposed to be changed
    and must be kept at their default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can refer to the following screenshot for the **Connection** tab settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – MQTT broker server settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.21_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.21 – MQTT broker server settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select the **Security** tab to edit the configuration to connect the
    MQTT server and fill in each property with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Username**: The user that you got from CloudMQTT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: The password that you got from CloudMQTT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can refer to the following screenshot for the **Security** tab settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.22 – MQTT broker user and password settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.22_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.22 – MQTT broker user and password settings
  prefs: []
  type: TYPE_NORMAL
- en: As you may have already noticed, these properties have the same values that
    you set for the **mqtt out** node on the Raspberry Pi Node-RED. Please refer to
    the CloudMQTT dashboard if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Now, edit the json node. Double-click on the `msg.payload` on **Property**:![Figure
    11.23 – Setting the json node properties
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.23_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.23 – Setting the json node properties
  prefs: []
  type: TYPE_NORMAL
- en: Edit the settings of the `msg.payload.temperature` in the box entitled **to**
    under the **Rules** area. Then, click the **Done** button to close the settings
    window:![Figure 11.24 – Setting the properties of the first change node
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.24_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.24 – Setting the properties of the first change node
  prefs: []
  type: TYPE_NORMAL
- en: Also, edit the settings of the second `msg.payload.humidity` in the box entitled
    **to** in the **Rules** area and then click the **Done** button to close the settings
    window:![Figure 11.25 – Setting the properties of the second change node
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.25_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.25 – Setting the properties of the second change node
  prefs: []
  type: TYPE_NORMAL
- en: Edit the settings of the first **gauge** node. Double-click on the first **gauge**
    node to open the **Settings** window and then click the **Edit** button (pencil
    icon) to the right of **Group** to open the properties:![Figure 11.26 – Clicking
    the Edit button to open the Properties settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.26_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.26 – Clicking the Edit button to open the Properties settings
  prefs: []
  type: TYPE_NORMAL
- en: 'In the dashboard''s group setting panel, fill in each property with the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Raspberry Pi Sensor data`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* It''s OK to provide any name here. This name will be displayed on the chart
    web page that we''ll create.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other properties are not supposed to be changed and must be kept at their default
    values. You can refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.27 – Setting the group name'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.27_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.27 – Setting the group name
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the main panel of the `Temperature`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`°C` (if you prefer to use Fahrenheit, please use °F)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Range**: -**15 ~ 50** (if you prefer to use Fahrenheit, please adjust the
    range accordingly)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other properties are not supposed to be changed from their default values.
    You can refer to the following screenshot for the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.28 – Setting the gauge node properties'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.28_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.28 – Setting the gauge node properties
  prefs: []
  type: TYPE_NORMAL
- en: Edit the settings of the second `Humidity`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Range**: **0 ~ 100**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other properties are not supposed to be changed from their default values.
    You can refer to the following screenshot for the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.29 – Setting the gauge node properties'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.29_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.29 – Setting the gauge node properties
  prefs: []
  type: TYPE_NORMAL
- en: Please make sure to deploy the flow on your Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the Node-RED configuration on the IBM Cloud. This means that
    this flow is already subscribing (awaiting the data) with the topic `packt` for
    the CloudMQTT service. Next, it's time to publish and subscribe to the data.
  prefs: []
  type: TYPE_NORMAL
- en: Visualization of the data on the IBM Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the edge device side, on the Raspberry Pi, we are ready to publish the sensor
    data to CloudMQTT with the topic `packt`. On the cloud side, the flow is already
    with the `packt` topic for the CloudMQTT service.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Raspberry Pi, perform the following steps to publish your data:'
  prefs: []
  type: TYPE_NORMAL
- en: Publish the data from your Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access your Node-RED flow editor on your Raspberry Pi. Click the button of
    the **inject** node to run this flow for publishing grove temperature and humidity
    sensor data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.30 – Running the flow for publishing data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.30_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.30 – Running the flow for publishing data
  prefs: []
  type: TYPE_NORMAL
- en: Check receipt of the data on the IBM Cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be able to receive (subscribe) the data via CloudMQTT. You can check
    it on the **debug** tab on your Node-RED flow editor on the IBM Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.31 – Checking the subscribing of the data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.31_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.31 – Checking the subscribing of the data
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the chart web page via the **chart** tab on your Node-RED flow editor
    on the IBM Cloud and then click the **open** button (diagonal arrow icon) to open
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.32 – Opening the chart web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.32_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.32 – Opening the chart web page
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the web page gauge chart with the data displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.33 – The chart web page is displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.33_B16353.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.33 – The chart web page is displayed
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Now you know how to observe the data sent from the Raspberry
    Pi on the server and visualize it as a chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want the flow configuration file to make this flow on your Node-RED,
    you can get it here: [https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter11/getting-sensordata-with-iotplatform.json](https://github.com/PacktPublishing/-Practical-Node-RED-Programming/blob/master/Chapter11/getting-sensordata-with-iotplatform.json).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we experienced how to receive the sensor data sent from an
    edge device and visualize it on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we used CloudMQTT and Node-RED on the IBM Cloud. Node-RED can
    run on any cloud platform and on-premises, and you can try to make this kind of
    application in any environment. That's why remembering this pattern will definitely
    be useful for your future development with other cloud IoT platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at a hands-on scenario of making a chatbot
    application with Node-RED. This will introduce you to a new way of using Node-RED.
  prefs: []
  type: TYPE_NORMAL
