- en: Chapter 7. Custom Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GWT provides a wide variety of widgets—such as labels, text boxes, trees, etc.,
    out of the box for you to use in your applications. These widgets provide a good
    starting point for building user interfaces, but will almost always not provide
    you with everything you need. This is where the concept of creating custom widgets
    by either combining the existing ones in newer and innovative ways, or writing
    new widgets from scratch comes in handy. In this chapter, we are going to tackle
    two things commonly used in web pages—a calendar display and a weather conditions
    display. Since these two functions are not provided by anything currently shipped
    in GWT, we will create these two widgets. We will also learn how to package them
    so that we can reuse them on a different GWT project if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks that we will address are:'
  prefs: []
  type: TYPE_NORMAL
- en: Calendar widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weather widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calendar Widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a reusable calendar widget, which can be easily used in multiple
    GWT applications. This widget is based on Alexei Sokolov's simple calendar widget
    ([http://gwt.components.googlepages.com/calendar](http://gwt.components.googlepages.com/calendar)).
    We will adapt it to suit our requirements. The calendar will display the current
    date along with a listing for the current month and will enable navigation either
    forward or backward through the calendar. We will also provide a way to get back
    to the current day, no matter where we have navigated in the calendar.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Creating a Calendar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now create a calendar widget. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new widget project to contain the artifacts for our custom widgets.
    We will create our widget in this project and then use it inside an application
    in our original `Samples` project. When we create the new project, the `Widgets.gwt.xml`
    file will be automatically created for us, and by default it will contain the
    following entry for inheriting from the `User` module. This is the one module
    that every GWT module needs to inherit from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Java file named `CalendarWidget.java` in the `com.packtpub.gwtbook.widgets.client`
    package that extends the `com.google.gwt.user.client.ui.Composite` class and implements
    the `com.google.gwt.user.client.ui.ClickListener` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the elements needed for creating a navigation bar to go forward and
    backward in the calendar, along with a `DockPanel` class that will be the container
    for the calendar itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create string arrays to store the weekday names and the names of the months
    in a year. We will retrieve the names from these arrays to display in the user
    interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a variable for holding the HTML used to display the title of the calendar.
    Create labels for displaying the week day and the date for the current day. Also,
    create and initialize a private variable that contains the current date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `Grid` object that overrides the `clearCell()` method to set the
    text for the column cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a private static class named `CalendarCell` that extends the `HTML`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: An instance of this class will be added to the `grid` object we created earlier,
    to display a single calendar element in a cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add accessors to the `CalendarWidget` class for getting the current date, along
    with the day, month, and year components of the current date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These methods will be used to retrieve the individual data for a given calendar
    date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add mutators to the `CalendarWidget` class for modifying the day, month, and
    year components of the `currentDate` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a method for computing the calendar for a month previous to the current
    month:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We will use this when the user clicks on the button for navigating to the previous
    month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a method for computing the calendar for a month after to the current
    month:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We will use this when the user clicks on the button for navigating to the next
    month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a method for computing the number of days in a given month. There is
    no simple method for getting this information currently; so we need to calculate
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `renderCalendar()` method that can draw the calendar and all of its
    elements. Get the various components of the currently set `date` object, set the
    calendar title, and format the calendar grid. Also compute the number of days
    in the month and the current day, and set the date and weekday label values. Finally,
    set the values of the `grid` cells to the computed calendar values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the constructor `CalendarWidget()` to initialize and lay out all the
    various elements that compose our calendar widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, round the container panel that will hold all of the widget
    elements using the `Rico` class that we created in[Chapter 6](ch06.html "Chapter 6. Browser
    Effects with JSNI and JavaScript Libraries"). As we learned in[Chapter 6](ch06.html
    "Chapter 6. Browser Effects with JSNI and JavaScript Libraries"), the `Rico` class
    has static methods that can be used to get access to the rounding method. We are
    directly using the `Rico` class created earlier to keep things simple, but another
    way would be to split off the `Rico`-related functionality into its own separate
    module and then use it here. Initialize the widget with this container panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in the constructor add the navigation bar, the calendar grid, and the
    **today** button to the vertical panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Register an event handler to listen for clicks on the **today** button, and
    to redraw the calendar to the current date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the styles for the day and weekday labels and add the widgets to the vertical
    panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the two panels to the main panel for the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the calendar and also register to sink all click events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create a JAR file that contains the widget that we have created. You can export
    a JAR file by using the JAR Packager tool built into Eclipse. Select **Export**
    from the **File** menu and you will have a similar screen to this:![Time for Action—Creating
    a Calendar](img/1007_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the information, as it appears in the next screenshot, for creating
    the JAR, and select the resources that will be included in it:![Time for Action—Creating
    a Calendar](img/1007_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \Create the JAR file and save as `widgets_jar_desc.jardesc`, so that we can
    recreate the JAR easily whenever we need to. This is shown in the following screenshot:![Time
    for Action—Creating a Calendar](img/1007_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have successfully created the JAR file named `widgets.jar` that
    contains our calendar widget, let us actually use it in a different project. Add
    this JAR to the `buildpath` for our `Samples` Eclipse project, so that the classes
    we need can be found on the `classpath` for the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also need to add the `widgets.jar` file to the scripts for running in hosted
    mode and web mode. Modify the `Samples-shell.cmd` file and the `Samples-compile.cmd`
    file to add the path to this JAR file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the module XML file for the `Samples` project—`Samples.gwt.xml`—to inherit
    from the widgets module. Add the following entry to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This entry is an indicator to the GWT framework that the current module will
    use resources from the `com.packtpub.gwtbook.widgets`.`Widgets` module. GWT also
    provides an automatic resource injection mechanism to automatically load resources
    used by a module. This is accomplished by creating the modules with references
    to the external JavaScript and CSS files used by the module, and is particularly
    useful when you create reusable modules, and want to ensure that the users of
    the module have access to the particular stylesheets or JavaScript files used
    by the module.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we can probably rewrite and split off our `Rico` support, which
    we added in Chapter 6, into its own module, but for the sake of simplicity we
    are using it as it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the user interface for the calendar widget application in a new Java
    file named `CalendarWidgetPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package in the `Samples` project. Create a work panel for holding the calendar
    sample:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, create a new class `CalendarWidget` and add it to the panel.
    Create a little info panel that displays descriptive text about this application,
    so that we can display the text when this sample is selected in the list of available
    samples in our `Samples` application. Add the info panel and the work panel to
    a dock panel, and initialize the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the application to see the calendar widget in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Creating a Calendar](img/1007_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A custom widget encapsulates functionality and enables reuse across multiple
    projects. There are three ways to create a custom GWT widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Composite:** `Composite` is a special GWT class that is itself a widget,
    and can act as a container for other widgets. This lets us easily compose a complex
    widget comprising any number of components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java:** Create a widget from scratch similar to the way all the basic widgets
    of GWT, such as `Button` are written.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript:** Implement a widget whose methods call JavaScript. This method
    should be chosen carefully, as the code will need to be written to carefully consider
    the cross-browser implications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normal GWT widgets are just wrappers around HTML elements. A composite widget
    is a complex widget composed of several simple widgets. It controls the methods
    that are publicly accessible to the clients of the widget. You can, thus, expose
    only the events that you want. `Composite` is the simplest and quickest way to
    build a widget. In this example, we create a calendar widget by extending the
    `Composite` class, and adding various components to it. The calendar consists
    of two main panels—the one on the left displays the weekday and the actual date,
    while the panel on the right displays the actual calendar along with the buttons
    for navigating forward and backward through the calendar. You can use these buttons
    to go to a different date. Anytime you want to return to the calendar for today's
    date, click on the **Today** button, and the calendar will again be rendered for
    the current date.
  prefs: []
  type: TYPE_NORMAL
- en: We created a container named `HorizontalPanel` that contains the various components
    of the calendar widget. This panel is given a nice rounded corner effect by using
    the `Rico` library that we created in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For the calendar, we used a `Grid` object with seven rows and seven columns.
    We overrode its `clearCell()` method to clear the contents of the cell by setting
    the text for the `TD` element to an empty string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This grid was created by populating each of its cells with `CalendarCell`. This
    is a custom class that we created where each of the cells can take an HTML snippet
    as the text, and lets us lay out a much better grid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `renderCalendar()` method does the bulk of the work in this widget. It
    sets the values for the weekday and the date, and also draws the calendar itself.
    When we create the calendar grid, we set the styles for each individual cell.
    If the cell happens to be the current date, we set it to a different style; so
    visually we can immediately discern the current date by just looking at the grid.
    When the calendar widget is initialized, it automatically draws the calendar for
    the current date. The navigation bar contains two buttons—one for navigating forward
    to go to the next month, and the other button for navigating backward to the previous
    month. When one of the two navigation buttons is clicked, we redraw the calendar.
    So, for instance, when we click on the previous button, we compute the previous
    month and redraw the calendar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We also added a button to the calendar so as to let us redraw the calendar
    to the current date. After navigating either forward or backward in the calendar,
    we can click on the **Today** button, and have the calendar rendered for the current
    date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We utilized the built-in functionality in Eclipse to export our widget resources
    as a JAR file. This JAR file can be shared among teams or projects, and reused.
    We used this exported `widgets.jar` file in our `Samples` project, by creating
    a simple panel, instantiating the calendar widget, and adding it to the panel.
    The file also needs to be added to the `compile` and `shell` batch files for the
    project; so that it can be found on the `classpath` when either of these commands
    is run. We could have done some of the date manipulation in a simpler way by using
    the `Calendar` class that is available in the JDK 1.4 + versions. However, we
    could not use the `Calendar` class as it is not one of the JRE classes that are
    provided by the GWT framework currently. So if we would have used it, we had had
    compilation errors. If in the future this class is supported by GWT, it should
    be quite simple to switch it out to use the functionality provided by the `Calendar`
    class to perform some of the date manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: Weather Widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a weather widget that uses the Yahoo Weather RSS service to retrieve
    the weather information and display the current weather conditions. We will create
    an RPC service that provides this functionality, and then use the RPC in our widget
    to display the weather information for a given US ZIP code. The user interface
    for this widget will contain an image for the current weather condition, along
    with all the other weather-related information that is available via the Yahoo
    weather service.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Creating a Weather Information Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This widget will also be created in the same widgets project that we used to
    create the calendar widget in the previous section. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Java file named `Weather.java` in the `com.packtpub.gwtbook.widgets.client`
    package. This class will encapsulate all the weather-related information for a
    given ZIP code, and will be used as the return parameter in the RPC service that
    we will create later on in this example. We can also use the recently added GWT
    support for client-side XML parsing to read an XML string returned to the client.
    We are going to learn about GWT''s XML support in[Chapter 9](ch09.html "Chapter 9. I18N
    and XML"). For now, we are going to use a simple object to encapsulate the returned
    weather information. This will enable us to focus on the custom widget functionality
    and keeps things simple. Create variables for each of the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add methods for getting and setting the various weather-related properties
    for this class. Here are the methods to get and set chill, city, current condition,
    and current temperature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add methods to get and set direction, error, humidity, and image URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add methods to get and set latitude, longitude, pressure, and barometer rising:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add methods to get and set speed, state, sunrise, and sunset values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Add methods to get and set the visibility and the ZIP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `Weather()` constructor to create a `weather` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Java file named `WeatherService.java` in the `com.packtpub.gwtbook.widgets.client`
    package. This is the service definition for the weather service. Define one method
    to retrieve the weather data by providing a ZIP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the asynchronous version of this service definition interface in a new
    Java file named `WeatherServiceAsync.java` in the `com.packtpub.gwtbook.widgets.client`
    package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Create the implementation of the weather service in a new Java file named `WeatherServiceImpl.java`
    in the `com.packtpub.gwtbook.widgets.server` package. We are going to use two
    third-party libraries from the `Dom4j` ([http://www.dom4j.org/](http://www.dom4j.org/))
    and `Jaxen` ([http://jaxen.codehaus.org/](http://jaxen.codehaus.org/)) projects
    in this sample, to make it easier for us to parse the Yahoo RSS feed. Download
    the current versions of these libraries to the `lib` folder. Add `dom4j-xxx.jar`
    and `jaxen-xxx.jar` in the `lib` folder to the `buildpath` for Eclipse. Add the
    necessary code to retrieve the weather data for a given ZIP code by accessing
    the Yahoo Weather RSS service in the `getWeather()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a SAX parser first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieve the RSS document for the provided ZIP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new XPath expression and add the namespaces that we are interested
    in to the expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We will later on use this expression to access the data we need from the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the root node in the retrieved XML document, and check for any errors.
    Return a `weather` object with an error message set, if any errors are found in
    the XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the description section using XPath, and then parse it to determine
    the URL for the image that pertains to the returned weather data. Set this information
    in the `ImageUrl` property of the `weather` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Use XPath expressions to select all the data that we are interested in from
    the XML document, and set the various properties of the `weather` object. Finally,
    return the object as the return value from our service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Our server-side implementation is now complete. Create a new Java file named
    `WeatherWidget.java` in the `com.packtpub.gwtbook.widgets.client` package that
    extends the `com.google.gwt.user.client.ui.Composite` class and implements the
    `com.google.gwt.user.client.ui.ChangeListener` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `WeatherWidget` class, create panels for displaying the current weather
    image, conditions, along with atmospheric, wind, astronomical, and geographic
    measurements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create labels for displaying all of this information, along with a textbox
    to allow users to enter the ZIP code of the place whose weather is to be displayed
    in the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and initialize the `WeatherService` object and set the entry-point URL
    for the weather service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `WeatherWidget()` constructor. In the constructor, create the work
    panel; initialize the widget with our main panel and register to receive all change
    events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Set `id` for the work panel, and use the `Rico` library, as in the previous
    example, to round the corner for the panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the requisite styles for each element and add the element to the various
    panels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all the panels to the main work panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a small panel for inputting the ZIP code and a buffer panel to separate
    it from the rest of the panels that compose this widget. Finally invoke the `getAndRenderWeather()`
    method to get the weather information. Create this method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a private method named `getAndRenderWeather()` for getting the weather
    information from the service and displaying it in our user interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a private method that returns the display text based on the integer value
    of the rising attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event handler to get and render the new weather information when the
    user types in a new ZIP code in the textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Rebuild the `widgets.jar` file to contain the new weather widget. Now we can
    use our new JAR file to create a user interface that instantiates and uses this
    widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the user interface for the weather widget application in a new Java
    file named `WeatherWidgetPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package in the `Samples` project. Create a work panel for holding the weather
    widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, create a new `WeatherWidget` and add it to the panel. Since
    we are already inheriting from the widgets module in the `Samples.gwt.xml` file,
    all the requisite classes should be resolved correctly. Create a little info panel
    that displays descriptive text about this application, so that we can display
    the text when this sample is selected in the list of available samples in our
    `Samples` application. Add the info panel and the work panel to a dock panel,
    and initialize the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a screenshot of the weather widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Creating a Weather Information Service](img/1007_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Type a new US ZIP code to see the weather conditions for that area.
  prefs: []
  type: TYPE_NORMAL
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yahoo! Weather provides weather data and information for a provided US ZIP code
    via RSS. **Really Simple Syndication** (**RSS**) is a lightweight XML format that
    was primarily designed for distributing web content such as headlines. The service
    provided can be accessed via a URL-based format and by providing the ZIP code
    as a parameter to the URL. The response is an XML message that can be parsed and
    searched for the required data.
  prefs: []
  type: TYPE_NORMAL
- en: We create an RPC `WeatherService` that accesses the Yahoo service, parses the
    data, and provides it to us in the form of a simple `weather` object. This `Weather`
    class models the weather for a single ZIP code. Each instance of the `Weather`
    class contains the following attributes that are set by our `WeatherService:`
  prefs: []
  type: TYPE_NORMAL
- en: '`zipCode:` The ZIP code whose weather needs to be retrieved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentTemp:` The current temperature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentConditions:` The text that reflects the current weather conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chill:` The wind chill for this location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction:` The wind direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speed:` The current wind speed for this location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`humidity:` The current humidity for this location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visibility:` The current visibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pressure:` The current barometric pressure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rising:` Indicator to inform if the barometric pressure is rising, falling,
    or steady.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sunrise:` Time of sunrise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sunset:` Time of sunset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`latitude:` Latitude of this location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`longitude:` Longitude of this location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`city:` The city that corresponds to this ZIP code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state:` The state that corresponds to this ZIP code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imageUrl:` The URL for the image that represents the current weather conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error:` If there is any error encountered while retrieving the weather information
    for a given ZIP code, this attribute is set. This enables the UI to display a
    message box with this error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We implement the `getWeather()` method in the `WeatherServiceImpl` class. We
    use classes from the `Dom4j` and `Jaxen` libraries in this service. This also
    means that we need to add the two JAR files for these projects to the `buildpath`
    for our Eclipse project. `Dom4j` is a fast and easy-to-use XML parser, which supports
    searching XML via XPath expressions. The XPath support is itself provided by classes
    from the `Jaxen` project. We retrieve the response XML document by calling the
    Yahoo weather service URL with a ZIP code parameter. The returned XML is searched
    using XPath expressions. We add namespaces for `yweather` and `geo` to the XPath
    expression, as some of the elements in the response XML are under this different
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We then search the response using XPath, get the value we are interested in,
    and set the appropriate attribute for the `weather` object. So for instance, here
    is how we get the value for the city and state for this location, and set those
    properties for the `weather` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to do something different for getting the image URL with the image
    for the current conditions. This URL is embedded in a CDATA section in the response.
    So we use an XPath expression to get the text for this node, and then access the
    substring that contains the `IMG` tag that we are looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The `weather` object with all these properties set is returned as the response
    from a call to this service. We now create our actual widget that will utilize
    and call this service. The user interface consists of a nice rounded panel that
    contains the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: An image for the current conditions—the image URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual text for the current condition—such as cloudy, sunny, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current temperature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A section for displaying the current wind conditions—chill, direction, and speed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A section for displaying the current atmospheric conditions—humidity, visibility,
    and the barometric pressure and its direction of change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A section for displaying the current astronomical data—sunrise and sunset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A section for displaying the current geographic data—latitude and longitude
    for this location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A textbox for entering a new ZIP code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The temperature is displayed in degrees, and the degrees symbol is shown by
    using the entity version—`&deg;`—in the code. So we display the current temperature
    in the widget like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The service is invoked asynchronously when this widget is initialized, and
    the corresponding display elements are set with their values when the response
    is received from the `WeatherService`. We recreate the JAR file, to contain this
    widget too, and then use this widget in the `Samples` project by instantiating
    it and adding it to a panel. Since we had already added the `widgets.jar` file
    to the `classpath` in the previous section, it should already be available to
    use in the `Samples` project. This sample is more complex than the calendar widget
    because it also includes an RPC service, in addition to the user interface. So
    when we use it, we need to add an entry for the service from this widget to the
    module XML file of the project, where the widget will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about creating and reusing custom widgets.
    We created a calendar widget, where we could navigate forward and backward, and
    come back to the present date.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created a weather widget, which provided a weather information service
    for a particular place.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to create and run unit tests for testing
    GWT applications and RPC services.
  prefs: []
  type: TYPE_NORMAL
