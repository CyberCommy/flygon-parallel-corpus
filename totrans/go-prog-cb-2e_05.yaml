- en: Network Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Go standard library provides a lot of support for network operations. It
    includes packages that allow you to manage TCP/IP, UDP, DNS, mail, and RPC using
    HTTP. Third-party packages can also fill in the gaps from what's included in the
    standard library, including `gorilla/websockets` ([https://github.com/gorilla/websocket/](https://github.com/gorilla/websocket/))
    for a WebSocket implementation that can be used in a normal HTTP handler. This
    chapter explores these libraries and demonstrates some simple recipes for how
    you can make use of each of them. These recipes will assist developers who are
    unable to use a higher-level abstraction such as REST or GRPC, but need network
    connectivity. It's also useful for DevOps applications that need to perform DNS
    lookups or work with raw emails. After reading this chapter, you should've gained
    some mastery of basic networking programming and be prepared to dive deeper.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing a TCP/IP echo server and client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a UDP server and client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with domain name resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with WebSockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with net/rpc for calling remote methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using net/mail for parsing emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed with all the recipes in this chapter, configure your environment
    according to these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Go 1.12.6 or greater on your operating system from [https://golang.org/doc/install](https://golang.org/doc/install).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Terminal or console application, and then create and navigate to a project
    directory such as `~/projects/go-programming-cookbook`. All code will be run and
    modified from this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the latest code into `~/projects/go-programming-cookbook-original` and
    you have the option to work from that directory rather than typing the examples
    manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Writing a TCP/IP echo server and client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TCP/IP is a common network protocol and the HTTP protocol was built on top of
    it. TCP requires a client to connect to a server in order to send and receive
    data. This recipe will use the `net` package to make a TCP connection between
    a client and a server. The client will send user input to the server and the server
    will respond with the same string inputted, but converted to uppercase using the
    results of `strings.ToUpper()`. The client will print any messages received from
    the server so it should output the uppercase version of our input.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/tcp` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/tcp` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `server` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `client` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `go run ./server` and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate Terminal, run `go run ./client` from the `tcp` directory and
    you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Type `this is a test` and hit *Enter*. You will see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *C* to exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The server is listening on port `8888`. Whenever a request comes in, the server
    must pick up the request and manage the client connection. In the case of this
    program, it dispatches a Goroutine that reads the request from the client, capitalizes
    the data it receives, sends it back to the client, and, lastly, closes the connection.
    The server immediately loops again, waiting to receive new client connections
    while the previous connection is handled separately.
  prefs: []
  type: TYPE_NORMAL
- en: The client reads input from `STDIN`, connects to the address via a TCP connection,
    writes the message that was read from the input, and then prints back the response
    from the server. Afterward, it closes the connection and loops the reading once
    again from `STDIN`. It's also possible for you to rework this example to have
    the client stay connected until the program exits rather than on each request.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a UDP server and client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UDP protocol is often used for games and in places where speed is more important
    than reliability. UDP servers and clients do not need to connect with one another.
    This recipe will create a UDP server that will listen for messages from clients,
    add their IPs to its list, and broadcast messages to each of the previously seen
    clients.
  prefs: []
  type: TYPE_NORMAL
- en: The server will write a message to `STDOUT` whenever a client connects and it
    will broadcast the same message to all of its clients. The text of this message
    should be `Sent <count>`, where `<count>` will increment each time the server
    broadcasts to all of its clients. As a result, `count` may have different values
    depending on how long it takes you to connect to your client as the server will
    broadcast regardless of the number of clients it sends a message to.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover the process of writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/udp` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/udp` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `server` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `broadcast.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `client` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `go run ./server` and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate Terminal, run `go run ./client` from the `udp` directory and
    you will see the following output, although the counts may differ:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the Terminal that is running the server and you should see something
    similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *C* to exit both the server and client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The server is listening on port `8888` just like in the previous recipe. If
    a client starts, it sends a message to the server and the server adds its address
    to a list of addresses. Because clients can connect asynchronously, the server
    must use a mutex before modifying or reading from the list.
  prefs: []
  type: TYPE_NORMAL
- en: A separate broadcast Goroutine runs separately and sends the same message to
    all client addresses that have previously sent it messages. Assuming they're still
    listening, they'll receive the same message from the server at roughly the same
    time. You may also connect with more clients to see this in effect.
  prefs: []
  type: TYPE_NORMAL
- en: Working with domain name resolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `net` package provides a number of useful functions around DNS lookup. This
    information is comparable to what you might get from using the Unix `dig` command.
    This information can be extremely useful for you to implement any kind of network
    programming that requires dynamically determining IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore how you might gather this data. To demonstrate this,
    we'll implement a simplified `dig` command. We'll seek to map a URL to all of
    its IPv4 and IPv6 addresses. By modifying `GODEBUG=netdns=` to be set to `go`
    or `cgo`, it will either use the pure Go DNS resolver or the `cgo` resolver. By
    default, the pure Go DNS resolver is used.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/dns` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/dns` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `dns.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Create a new directory named `example` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Run the `go run main.go golang.org` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe performed a `CNAME` and host lookup of the address provided. In
    our case, we used `golang.org`. We store the result in a lookup structure that
    prints the output results using the `String()` method. This method will be called
    automatically when we print our object as a string, or we can call the method
    directly. We implement some basic argument checking in `main.go` to ensure that
    an address is provided when the program is run.
  prefs: []
  type: TYPE_NORMAL
- en: Working with WebSockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebSockets allow a server application to connect to a web-based client written
    in JavaScript. This allows you to create web applications with two-way communication
    and to create updates such as chat rooms and more.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore writing a WebSocket server in Go and also demonstrate
    the process of a client consuming and communicating with a WebSocket server. It
    uses `github.com/gorilla/websocket` to upgrade a standard handler into a WebSocket
    handler and also to create the client application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/websocket` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/websocket` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `server` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `handler.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `client` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `process.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `go run ./server` and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate Terminal, run `go run ./client` from the `websocket` directory
    and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the `test` string and you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the Terminal running the server and you should see something similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *C* to exit both the server and client. You may also have to
    hit *Enter* after pressing *Ctrl* + *C* on the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `go.mod` file may be updated and the `go.sum` file should now be present
    in the top-level recipe directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The server is listening on port `8000` for WebSocket connections. When a request
    comes in, the `github.com/gorilla/websocket` package is used to upgrade the request
    to a WebSocket connection. Similar to earlier echo server examples, the server
    waits for a message on the WebSocket connection and responds with the same message
    back to the client. Because it's a handler, it can handle many WebSocket connections
    asynchronously and they will remain connected until the client terminates.
  prefs: []
  type: TYPE_NORMAL
- en: In the client, we added a `catchsig` function to handle the *Ctrl* + *C* event.
    This allows us to cleanly terminate the connection with the server when the client
    exits. Otherwise, the client just takes user input on `STDIN` and sends it to
    the server, logs the response, and then repeats.
  prefs: []
  type: TYPE_NORMAL
- en: Working with net/rpc for calling remote methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go provides your system with basic RPC functionality with the `net/rpc` package.
    This is a potential alternative to making RPC calls without relying on GRPC or
    other more complex RPC packages. However, its functionality is rather limited
    and any function you may wish to export must conform to a very specific function
    signature.
  prefs: []
  type: TYPE_NORMAL
- en: The comments in the code note some of these restrictions for a method that can
    be called remotely. This recipe demonstrates how to create a shared function that
    has a number of parameters passed in via a structure and can be called remotely.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/rpc` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/rpc` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `tweak` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `tweak.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `server` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `client` and navigate to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `main.go` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the previous directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `go run ./server` and you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In a separate Terminal, run `go run ./client` from the `rpc` directory and
    you will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *C* to exit the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `StringTweaker` structure is put into a separate library so that its exported
    types can be accessed by the client (to set arguments) and the server (to register
    the RPC and start the server). It also conforms to the rules mentioned at the
    start of this recipe in order to work with `net/rpc`.
  prefs: []
  type: TYPE_NORMAL
- en: '`StringTweaker` can be used to take an input string and, optionally, reverse
    and uppercase all the characters contained within it, depending on the options
    passed. This pattern can be extended to create far more complex functions and
    you can also use extra functions to make the code more readable as it grows.'
  prefs: []
  type: TYPE_NORMAL
- en: Using net/mail for parsing emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `net/mail` package provides a number of useful functions that assist you
    when working with email. If you have the raw text of the email, it can be parsed
    into extract headers, information about the send date, and much more. This recipe
    will demonstrate a number of these functions by parsing a raw email hardcoded
    as a string.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These steps cover writing and running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: From your Terminal or console application, create a new directory called `~/projects/go-programming-cookbook/chapter5/mail` and
    navigate to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a file called `go.mod` that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Copy tests from `~/projects/go-programming-cookbook-original/chapter5/mail` or
    use this as an exercise to write some of your own code!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `header.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Run the `go run .` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may also run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you copied or wrote your own tests, go up one directory and run `go test`.
    Ensure that all the tests pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `printHeaderInfo` function does the majority of the work for this recipe.
    It parses the addresses from the header into a `*mail.Address` structure and parses
    the date header into a date object. Then, it takes all of the information in the
    message and formats it into a readable format. The main function parses the initial
    email and passes this header along.
  prefs: []
  type: TYPE_NORMAL
