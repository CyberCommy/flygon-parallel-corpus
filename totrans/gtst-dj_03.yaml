- en: Chapter 3. Hello World! with Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will not actually start with the development phase. Instead,
    we will study the basics of websites to learn Django, namely, the project and
    application creation. In this chapter, we will also:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use regular expressions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your first URLs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your first view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test your application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we will have created our first web page that will
    display `Hello World!`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Routing in Django
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we edited the `settings.py` file to configure our
    Django project. We will edit `settings.py` again to add a new parameter. The following
    line must be present in `settings.py`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This parameter will define the Python file that will contain all the URLs of
    our site. We have already spoken about the previous file as it is in the `Work_manager`
    folder. The syntax that is used to define the `ROOT_URLCONF` variable means that
    Django takes the URLs in the `urls.py` file contained in the `Workmanager` package
    to the root of the project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The routing of our application will be based on this file. The routing defines
    how the client request will be treated based on the URL sent.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: In fact, when the controller receives the client request, it will go in the
    `urls.py` file and check whether the URL is a customer's request and use the corresponding
    view.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the following URL, Django will look for the `search` string
    in `urls.py` to know what action to take: `http://localhost/search`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the `urls.py` file looks like, as it is created by Django when
    creating the project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will detail the components of this file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The first line imports the functions commonly used in the management of URLs.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next two lines are useful to the administration module. We will comment
    by adding `#` at the beginning of the line. These lines will be explained in a
    later chapter.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remaining lines define the URLs in the `urlpatterns` variable. We will also
    review the URL starting with `url (r '^ admin`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After having received a request from a web client, the controller goes through
    the list of URLs linearly and checks whether the URL is correct with regular expressions.
    If it is not in conformity, the controller keeps checking the rest of the list.
    If it is in conformity, the controller will call the method of the corresponding
    view by sending the parameters in the URL. If you want to write URLs, you must
    first know the basics of regular expressions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regular expressions are like a small language in itself. Despite their complex
    and inaccessible air, they can manipulate the strings with great flexibility.
    They comprise a sequence of characters to define a pattern.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: We will not explore all the concepts of regular expressions in this book, because
    it would require several chapters and divert us from the main goal of this book.
    Practice your regular expressions before you write your first URLs; many sites
    help you train on regular expressions. Search for `Online regex matcher`, and
    you will find pages to check your regular expressions through JavaScript. You
    can further explore regular expressions through the book, *Mastering Regular Expressions
    Python*, *Packt Publishing*, written by Félix López. There is a practical tool
    to visualize regular expressions. This tool is called **Regexper** and was created
    by Jeff Avallone. We will use this to represent regular expressions as a diagram.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The following sections explore the patterns used, functions, and an example
    to help you understand regular expressions better.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The uninterpreted characters
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Uninterpreted characters, such as letters and digits, in a regular expression
    mean that they are present in the string and must be placed in exactly the same
    order.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: For example, the regular expression `test01` will validate the `test01`, `dktest01`,
    and `test0145g` strings but won't validate `test10` or `tste01`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The regular expression `test-reg` will validate `a test-regex` but not `test-aregex`
    or `testregex:`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![The uninterpreted characters](img/00007.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: A visual representation of the `test01` regular expression
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The beginning and the end of the line
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To check whether a string must be present at the beginning or the end of the
    line, you must use the `^` and `$` characters. If `^` is present at the beginning
    of the string, the validation will be done at the beginning of the chain. It works
    in the same way for `$` at the end.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The `^test` regular expression will validate `test` and `test01l` but not `dktest`
    or `ttest01`:![The beginning and the end of the line](img/00008.jpeg)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The regular expression `test$` will validate `test` and `01test,` but not `test01`:![The
    beginning and the end of the line](img/00009.jpeg)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The regular expression `^test$` will only validate `test`:![The beginning and
    the end of the line](img/00010.jpeg)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The any character regular expression
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a regular expression, the dot (`.`) means "any character". So, when you validate
    characters that cannot be inferred, the dot is used. If you try to validate a
    dot in your speech, use the escape character, `\`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are examples:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '`^te.t` validates `test` or `tept`:![The any character regular expression](img/00011.jpeg)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`^test\.me$` only validates `test.me`:![The any character regular expression](img/00012.jpeg)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character classes
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To validate the characters, you can use character classes. A character class
    is enclosed in square brackets and contains all the allowed characters. To validate
    all the numbers and letters in a location, you must use `[0123456789a]`. For example,
    `^tes[t0e]$` will only validate the three chains: `test`, `tes0`, and `tese`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the following predefined classes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '`[0-9]` is equivalent to `[0123456789]`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[a-z]` matches all the letters, `[abcdefghijklmnopqrstuvwxyz]`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[A-Z]` matches all uppercase letters'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[a-zA-Z]` matches all the letters'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the shortcuts:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`\d` is equivalent to `[0-9]`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\w` is equivalent to `[a-zA-Z0-9_]`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[0-9]` is equivalent to `[0123456789]`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating the number of characters
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Everything that we have studied until now is the elements that define one and
    only one character. To validate a character one or more times, you must use braces
    `{x, y}`, where `x` defines the minimum number of occurrences and `y` is the maximum
    number of occurrences. If one of them is not specified, you will have an undefined
    value. For example, if you forget to include an element in `{2,}`, it means that
    the character must be present at least twice.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '`^test{2, 3}$` only validates `testt` and `testtt`:![Validating the number
    of characters](img/00013.jpeg)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`^tests{0,1}$` only validates `test` and `tests`![Validating the number of
    characters](img/00014.jpeg)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`. ^ {1} $` validates all the channels except one: the empty string'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the shortcuts:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '`*` is equivalent to `{0}`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`?` is equivalent to `{0, 1}`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+` is equivalent to `{1}`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expressions are very powerful and will be very useful even outside of
    programming with Django.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first URL
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the interesting features of Django is to contain a development server.
    Indeed, during the development phase of the site, the developer does not need
    to set up a web server. However, when you put the site into production, you will
    need to install a real web server because it is not for use in production.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, the Django server is not secure and can hardly bear a heavy load. This
    does not mean that your site will be slow and full of flaws; it just means that
    you have to go through a real web server into production.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the development server, we need to use the `manage.py` runserver command
    file. We must launch the command prompt and put ourselves in the project root
    (use the `cd` command to browse folders) to execute the command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command starts the Django development server. Let''s explain the control
    step by step:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The `runserver` parameter starts the development server.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`127.0.0.1` is our internal IP address to the network adapter. This means that
    our server will listen and respond only to the computer on which it is launched.
    If we were in a local network and wanted to make our website available on computers
    other than ours, we would enter our local IP address instead of `127.0.0.1`. The
    value `127.0.0.1` is the default value of the parameter.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8000` defines the listening port of the server. This setting is useful to
    run multiple web servers on a single computer.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the command is executed correctly, the window should show us the message,
    `0 errors found`, as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first URL](img/00015.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'To see the result, we must open our browser and enter the following URL: `http://localhost:8000`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Django confirms that our development environment is functional by displaying
    the following message:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first URL](img/00016.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: 'This message also means that we have no specified URL. We will add two URLs
    to our file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You should consistently get to know about bugs in Django, especially on the
    GitHub page for Django: [https://github.com/django](https://github.com/django).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: In the URLs that we enter, we define the first parameter (regular expression)
    that will validate the URL. We will discuss the second argument in the following
    chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Let's go back to our browser and refresh the page with the *F5* key. Django
    will display a `ViewDoesNotExist at /` `error`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: This means that our module does not exist. You must study your errors; in this
    example, we had an error. With this error, we will directly fix the part that
    does not work.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Another problem that we regularly encounter is the `404 Page not found` error.
    We can generate it by typing the `http://localhost:8000/test404` URL in our browser.
    This error means that no URL has been validating the `test404` string.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: We must pay attention to errors because seeing and resolving them can save us
    a lot of time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first view
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created our URL and interpreted by the routing system, we must
    ensure that a view (which is a controller in the MVC pattern) meets the customer's
    demand.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the function of the second parameter of the URLs present in `urls.py`.
    This parameter will define the method that will play the role of a view. Take,
    for example, our first URL:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Firstly, as we have seen when studying regular expressions, this URL will be
    valid only if we browse the `http://localhost:8000` URL. The second parameter
    in the URL means that in the `index.py` file, there is a method called `page`
    that will process the request. The `index.py` file is located in the `views` package
    at the root of the `TasksManager` application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: When we want a folder to be recognized as a package by Python, we need to create
    a folder that contains the `__init__.py` file that we can leave blank.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: You can choose another structure to store your views. You must choose the structure
    that best fits your project. Have a long-term vision of your project in order
    to define quality architecture from the first line of code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `index.py` file, we will create a method called `page()`. This method
    will return an HTML page to the client. The page is being returned by the HTTP
    protocol, so we will use the `HttpResponse()` function and its importation. The
    argument of this `HttpResponse()` function returns the HTML content that we will
    return to the browser. To simplify reading this example, we do not use a proper
    HTML structure, because we just return `Hello world!` to the client, as shown
    in the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see in the previous example, we added a comment before our `page()`
    method. Comments are very important. They help you understand your code very quickly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: We also set the encoding of the UTF-8 characters. This will improve our application's
    compatibility with other languages. We do not necessarily indicate it later in
    the book, but it is advisable to use it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Testing our application
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test our first page, we will have to use the `runserver` command, which we
    saw earlier in this chapter. To do this, you must run the command and refresh
    your page, `http://localhost:8000`, in your browser.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们的第一个页面，我们将不得不使用`runserver`命令，这是我们在本章中早些时候看到的。为了做到这一点，您必须运行命令并在浏览器中刷新您的页面，`http://localhost:8000`。
- en: If you see `Hello World!` appear in your browser without an error, it means
    that you have followed the previous steps. If you have forgotten something, do
    not hesitate to find your error on the Internet; others have probably been through
    the same.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中看到`Hello World!`而没有错误出现，这意味着您已经按照之前的步骤进行了操作。如果您忘记了某些东西，请不要犹豫在互联网上找到您的错误；其他人可能也经历过同样的情况。
- en: However, we must improve our view because at the moment, we do not respect the
    MVC model. We will create a template to separate the HTML of Python code and have
    more flexibility.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们必须改善我们的观点，因为目前我们并不尊重MVC模型。我们将创建一个模板来分离Python代码的HTML，并且具有更多的灵活性。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we studied the basics of regular expressions. It is a powerful
    tool to use to manipulate strings. We learned how to manipulate the system routing
    URL. We also created our first view that returns a string to the client. In the
    next chapter, we will learn how to create maintainable templates with Django.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了正则表达式的基础知识。这是一个强大的工具，用于操作字符串。我们学会了如何操作系统路由URL。我们还创建了我们的第一个视图，将一个字符串返回给客户端。在下一章中，我们将学习如何使用Django创建可维护的模板。
