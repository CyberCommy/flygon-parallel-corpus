- en: Project 2 - Castle Duel Browser Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create an entirely different app--a browser game. It
    will consist of two players, each commanding an impressive castle and trying to
    destroy the other one by bringing either the opponent's food or damage levels
    to zero with the help of action cards.
  prefs: []
  type: TYPE_NORMAL
- en: In this project and in the following ones, we will split our app into reusable
    components. This is the heart of the framework, and all its API is built around
    this idea. We will see how to define and use components and how to make them communicate
    with each other. The result will be a better structure for our app.
  prefs: []
  type: TYPE_NORMAL
- en: Rules of the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the rules we will implement in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: Two players play turn by turn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each player starts the game with 10 health, 10 food, and a 5-card hand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The players can't have more than 10 health and 10 food
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A player loses when their food or health reaches zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the players can lose in a draw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During one player's turn, each player's only possible action is to play a card,
    which is then put in the discard pile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each player draws a card from the draw pile at the beginning of the turn (except
    for their first turn)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks to the two preceding rules, each player has exactly five cards in their
    hand when they start their turn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the draw pile is empty when the player draws a card, the draw pile is refilled
    with the discard pile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cards can modify the health and food of the player or their opponent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some cards can also make a player skip their turn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The gameplay is built around the facts that players must play one and only one
    card each turn and that most of the cards will have a negative effect on them
    (the most common one being losing food). You have to think of your strategy before
    playing.
  prefs: []
  type: TYPE_NORMAL
- en: The app will consists of two layers--the world, where game objects (such as
    the scenery and the castles) are drawn, and the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The world will have two castles facing each other, a ground, and a sky, with
    multiple animated clouds; each castle will feature two banners--the green one
    being the player food, and the red one being the player health--with a little
    bubble displaying the amount of food or health remaining:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/66e1a50b-ee36-4040-998f-f14783618466.png)'
  prefs: []
  type: TYPE_IMG
- en: For the UI, there will be a bar at the top, with a turn counter and the names
    of the two players. At the bottom of the screen, the hand will display the cards
    of the current player.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c23e599c-d371-4475-9db2-e39f306bedab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to these, a few overlays will be periodically shown, hiding the
    hand. One will show the name of the player going next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8d92822-cde6-4725-ae5b-9b2889da3c15.png)'
  prefs: []
  type: TYPE_IMG
- en: It will be followed by another overlay displaying the card that was played last
    turn by the opponent. This will allow the game to be played on the same screen
    (for example, a tablet).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f3ed8f3-ae57-404b-863a-bd3f274f1e13.png)'
  prefs: []
  type: TYPE_IMG
- en: The third overlay will be only shown when the game is over, displaying whether
    the players have won or lost. Clicking on this overlay will reload the page, allowing
    the players to start a new game.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1744d0e2-78e2-44a2-8ad8-2a6ab7656f5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the `chapter 2` files and extract the project setup into an empty
    folder. You should have the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`: The web page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.css`: The CSS file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`svg`: Contains all the SVG images of the game'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cards.js`: With all the cards data ready to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state.js`: Where we will consolidate the main data properties of the game'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`utils.js`: Where we will write useful functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`banner-template.svg`: We will use the content of this file later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with our main JavaScript file--create a new file called `main.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.html` file and add a new script tag referencing the new file,
    just after the `state.js` one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the main instance of our app in the `main.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: The calm before the storm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will introduce a few new Vue features that will help us
    build the game, such as components, props, and event emitting!
  prefs: []
  type: TYPE_NORMAL
- en: The template option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you look in the `index.html` file, you will see that the `#app` element
    is already there and empty. In fact, we won''t write anything inside. Instead,
    we will use the template option directly on the definition object. Let''s try
    it with a dumb template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used the new JavaScript strings, with the [PRE3]
  prefs: []
  type: TYPE_NORMAL
- en: new Vue({
  prefs: []
  type: TYPE_NORMAL
- en: // â€¦
  prefs: []
  type: TYPE_NORMAL
- en: 'data: state,'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: new Vue({
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''game'','
  prefs: []
  type: TYPE_NORMAL
- en: 'el: ''#app'','
  prefs: []
  type: TYPE_NORMAL
- en: 'data: state,'
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div id="#app">'
  prefs: []
  type: TYPE_NORMAL
- en: '{{ worldRatio }}'
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: // Window resize handling
  prefs: []
  type: TYPE_NORMAL
- en: window.addEventListener('resize', () => {
  prefs: []
  type: TYPE_NORMAL
- en: state.worldRatio = getWorldRatio()
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: new Vue({
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: mounted () {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(this.$data === state)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: this.worldRatio = 42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: this.$data.worldRatio = 42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: state.worldRatio = 42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: // The consolidated state of our app
  prefs: []
  type: TYPE_NORMAL
- en: var state = {
  prefs: []
  type: TYPE_NORMAL
- en: // World
  prefs: []
  type: TYPE_NORMAL
- en: 'worldRatio: getWorldRatio(),'
  prefs: []
  type: TYPE_NORMAL
- en: // Game
  prefs: []
  type: TYPE_NORMAL
- en: 'turn: 1,'
  prefs: []
  type: TYPE_NORMAL
- en: 'players: ['
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''Anne of Cleves'','
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''William the Bald'','
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'currentPlayerIndex: Math.round(Math.random()),'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <!-- Scripts -->
  prefs: []
  type: TYPE_NORMAL
- en: <script src="utils.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: <script src="cards.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: <script src="state.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: <script src="components/ui.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: <script src="main.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('top-bar', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="top-bar">'
  prefs: []
  type: TYPE_NORMAL
- en: Top bar
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: new Vue({
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div id="#app">'
  prefs: []
  type: TYPE_NORMAL
- en: <top-bar/>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('top-bar', {
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''players'', ''currentPlayerIndex'', ''turn''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <top-bar :turn="turn" :current-player-index="currentPlayerIndex"
  prefs: []
  type: TYPE_NORMAL
- en: :players="players" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('top-bar', {
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: created () {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(this.players)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div class="top-bar">'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="player p0">{{ players[0].name }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="player p1">{{ players[1].name }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div class="top-bar">'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="player p0">{{ players[0].name }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="turn-counter">
  prefs: []
  type: TYPE_NORMAL
- en: <div class="turn">Turn {{ turn }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="player p1">{{ players[1].name }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div class="top-bar" :class="''player-'' +'
  prefs: []
  type: TYPE_NORMAL
- en: currentPlayerIndex">
  prefs: []
  type: TYPE_NORMAL
- en: <div class="player p0">{{ players[0].name }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="turn-counter">
  prefs: []
  type: TYPE_NORMAL
- en: <img class="arrow" src="svg/turn.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <div class="turn">Turn {{ turn }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="player p1">{{ players[1].name }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: state.currentPlayerIndex = 1
  prefs: []
  type: TYPE_NORMAL
- en: state.currentPlayerIndex = 0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('card', {
  prefs: []
  type: TYPE_NORMAL
- en: // Definition here
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('card', {
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''def''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('card', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="card">'
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''def''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: <div class="card" :class="'type-' + def.type">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: <div class="card" :class="'type-' + def.type">
  prefs: []
  type: TYPE_NORMAL
- en: <div class="title">{{ def.title }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: <div class="title">{{ def.title }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: <img class="separator" src="svg/card-separator.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: <div class="description"><div v-html="def.description"></div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: <div class="note" v-if="def.note"><div v-html="def.note"></div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('card', {
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''def''],'
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="card" :class="''type-'' + def.type">'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="title">{{ def.title }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: <img class="separator" src="svg/card-separator.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <div class="description"><div v-html="def.description"></div></div>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="note" v-if="def.note"><div v-html="def.note"></div></div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div id="#app">'
  prefs: []
  type: TYPE_NORMAL
- en: <top-bar :turn="turn" :current-player-
  prefs: []
  type: TYPE_NORMAL
- en: index="currentPlayerIndex" :players="players" />
  prefs: []
  type: TYPE_NORMAL
- en: <card :def="testCard" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: testCard () {
  prefs: []
  type: TYPE_NORMAL
- en: return cards.archers
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: <card :def="testCard" @click="handlePlay" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: handlePlay () {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('You played a card!')
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: <card :def="testCard" @click.native="handlePlay" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: this.$emit('play')
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: this.$on('play', () => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('Caught a play event!')
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: <card v-on:play="handlePlay" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: <card @play="handlePlay" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: this.$emit('play', 'orange', 42)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: handlePlay (color, number) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('handle play event', 'color=', color, 'number=', number)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: play () {
  prefs: []
  type: TYPE_NORMAL
- en: this.$emit('play')
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: <div class="card" :class="'type-' + def.type" @click="play">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: <card :def="testCard" @play="handlePlay" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('hand', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="hand">'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="wrapper">
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Cards -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('hand', {
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''cards''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: <div class="wrapper">
  prefs: []
  type: TYPE_NORMAL
- en: <card v-for="card of cards" :def="card.def" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: var state = {
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: 'testHand: [],'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: createTestHand () {
  prefs: []
  type: TYPE_NORMAL
- en: const cards = []
  prefs: []
  type: TYPE_NORMAL
- en: // Get the possible ids
  prefs: []
  type: TYPE_NORMAL
- en: const ids = Object.keys(cards)
  prefs: []
  type: TYPE_NORMAL
- en: // Draw 5 cards
  prefs: []
  type: TYPE_NORMAL
- en: for (let i = 0; i < 5; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: cards.push(testDrawCard())
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return cards
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: testDrawCard () {
  prefs: []
  type: TYPE_NORMAL
- en: // Choose a card at random with the ids
  prefs: []
  type: TYPE_NORMAL
- en: const ids = Object.keys(cards)
  prefs: []
  type: TYPE_NORMAL
- en: const randomId = ids[Math.floor(Math.random() * ids.length)]
  prefs: []
  type: TYPE_NORMAL
- en: // Return a new card with this definition
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: // Unique id for the card
  prefs: []
  type: TYPE_NORMAL
- en: 'uid: cardUid++,'
  prefs: []
  type: TYPE_NORMAL
- en: // Id of the definition
  prefs: []
  type: TYPE_NORMAL
- en: 'id: randomId,'
  prefs: []
  type: TYPE_NORMAL
- en: // Definition object
  prefs: []
  type: TYPE_NORMAL
- en: 'def: cards[randomId],'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: created () {
  prefs: []
  type: TYPE_NORMAL
- en: this.testHand = this.createTestHand()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div id="#app">'
  prefs: []
  type: TYPE_NORMAL
- en: <top-bar :turn="turn" :current-player-
  prefs: []
  type: TYPE_NORMAL
- en: index="currentPlayerIndex" :players="players" />
  prefs: []
  type: TYPE_NORMAL
- en: <hand :cards="testHand" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: // The consolidated state of our app
  prefs: []
  type: TYPE_NORMAL
- en: var state = {
  prefs: []
  type: TYPE_NORMAL
- en: // UI
  prefs: []
  type: TYPE_NORMAL
- en: 'activeOverlay: null,'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: <hand :cards="testHand" v-if="!activeOverlay" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: state.activeOverlay = 'player-turn'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: state.activeOverlay = null
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: <transition>
  prefs: []
  type: TYPE_NORMAL
- en: <hand v-if="!activeOverlay" />
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: <transition>
  prefs: []
  type: TYPE_NORMAL
- en: <h1 v-if="showTitle">Title</h1>
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: <link rel="stylesheet" href="transitions.css" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: .hand.v-enter-active,
  prefs: []
  type: TYPE_NORMAL
- en: .hand.v-leave-active {
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: opacity 1s;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: .hand.v-enter,
  prefs: []
  type: TYPE_NORMAL
- en: .hand.v-leave-to {
  prefs: []
  type: TYPE_NORMAL
- en: 'opacity: 0;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: <transition>
  prefs: []
  type: TYPE_NORMAL
- en: <hand v-if="!activeOverlay" :cards="testHand" />
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: <transition name="fade">
  prefs: []
  type: TYPE_NORMAL
- en: <hand v-if="!activeOverlay" :cards="testHand" />
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: .fade-enter-active,
  prefs: []
  type: TYPE_NORMAL
- en: .fade-leave-active {
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: opacity 1s;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .fade-enter,
  prefs: []
  type: TYPE_NORMAL
- en: .fade-leave-to {
  prefs: []
  type: TYPE_NORMAL
- en: 'opacity: 0;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: .hand-enter-active,
  prefs: []
  type: TYPE_NORMAL
- en: .hand-leave-active {
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: opacity .5s;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .hand-enter,
  prefs: []
  type: TYPE_NORMAL
- en: .hand-leave-to {
  prefs: []
  type: TYPE_NORMAL
- en: 'opacity: 0;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: <transition name="hand">
  prefs: []
  type: TYPE_NORMAL
- en: <hand v-if="!activeOverlay" :cards="testHand" />
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: .hand-enter-active .wrapper,
  prefs: []
  type: TYPE_NORMAL
- en: .hand-leave-active .wrapper {
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: transform .8s cubic-bezier(.08,.74,.34,1);'
  prefs: []
  type: TYPE_NORMAL
- en: 'transform-origin: bottom center;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .hand-enter .wrapper,
  prefs: []
  type: TYPE_NORMAL
- en: .hand-leave-to .wrapper {
  prefs: []
  type: TYPE_NORMAL
- en: 'transform: rotateX(90deg);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: .hand-enter-active .card,
  prefs: []
  type: TYPE_NORMAL
- en: .hand-leave-active .card {
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: margin .8s cubic-bezier(.08,.74,.34,1);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .hand-enter .card,
  prefs: []
  type: TYPE_NORMAL
- en: .hand-leave-to .card {
  prefs: []
  type: TYPE_NORMAL
- en: 'margin: 0 -100px;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: handlePlay (card) {
  prefs: []
  type: TYPE_NORMAL
- en: this.$emit('card-play', card)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: <card v-for="card of cards" :def="card.def"
  prefs: []
  type: TYPE_NORMAL
- en: '@play="handlePlay(card) />'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: testPlayCard (card) {
  prefs: []
  type: TYPE_NORMAL
- en: // Remove the card from player hand
  prefs: []
  type: TYPE_NORMAL
- en: const index = this.testHand.indexOf(card)
  prefs: []
  type: TYPE_NORMAL
- en: this.testHand.splice(index, 1)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: <hand v-if="!activeOverlay" :cards="testHand" @card-play="testPlayCard" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: <transition-group>
  prefs: []
  type: TYPE_NORMAL
- en: <div v-for="item of items" />
  prefs: []
  type: TYPE_NORMAL
- en: </transition-group>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: <transition-group tag="ul">
  prefs: []
  type: TYPE_NORMAL
- en: <li v-for="item of items" />
  prefs: []
  type: TYPE_NORMAL
- en: </transition-group>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: <transition-group name="card" tag="div" class="cards">
  prefs: []
  type: TYPE_NORMAL
- en: <card v-for="card of cards" :def="card.def" @play="handlePlay(card) />
  prefs: []
  type: TYPE_NORMAL
- en: </transition-group>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: <card v-for="card of cards" :def="card.def" :key="card.uid" @play="handlePlay(card)
    />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: .card-move {
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: transform .3s;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: state.testHand.push($vm.testDrawCard())
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: .card {
  prefs: []
  type: TYPE_NORMAL
- en: /* Used for enter, move and mouse over animations */
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: all .3s;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: .card-enter {
  prefs: []
  type: TYPE_NORMAL
- en: 'opacity: 0;'
  prefs: []
  type: TYPE_NORMAL
- en: /* Slide from the right */
  prefs: []
  type: TYPE_NORMAL
- en: 'transform: scale(.8) translateX(100px);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: .card-leave-active {
  prefs: []
  type: TYPE_NORMAL
- en: /* We need different timings for the leave transition */
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: all 1s, opacity .5s .5s;'
  prefs: []
  type: TYPE_NORMAL
- en: /* Keep it in the same horizontal position */
  prefs: []
  type: TYPE_NORMAL
- en: 'position: absolute !important;'
  prefs: []
  type: TYPE_NORMAL
- en: /* Make it painted over the other cards */
  prefs: []
  type: TYPE_NORMAL
- en: 'z-index: 10;'
  prefs: []
  type: TYPE_NORMAL
- en: /* Unclickable during the transition */
  prefs: []
  type: TYPE_NORMAL
- en: 'pointer-events: none;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .card-leave-to {
  prefs: []
  type: TYPE_NORMAL
- en: 'opacity: 0;'
  prefs: []
  type: TYPE_NORMAL
- en: /* Zoom the card upwards */
  prefs: []
  type: TYPE_NORMAL
- en: 'transform: translateX(-106px) translateY(-300px) scale(1.5);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: // The consolidated state of our app
  prefs: []
  type: TYPE_NORMAL
- en: var state = {
  prefs: []
  type: TYPE_NORMAL
- en: // UI
  prefs: []
  type: TYPE_NORMAL
- en: 'activeOverlay: null,'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: <overlay>
  prefs: []
  type: TYPE_NORMAL
- en: <overlay-content-player-turn />
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('overlay', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="overlay">'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="content">
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Our slot will be there -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: <div class="overlay" @click="handleClick">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: handleClick () {
  prefs: []
  type: TYPE_NORMAL
- en: this.$emit('close')
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div class="overlay" @click="handleClick">'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="content">
  prefs: []
  type: TYPE_NORMAL
- en: <slot />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: <overlay>
  prefs: []
  type: TYPE_NORMAL
- en: Hello world!
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: <div class="overlay">
  prefs: []
  type: TYPE_NORMAL
- en: <div class="content">
  prefs: []
  type: TYPE_NORMAL
- en: Hello world!
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: <overlay>
  prefs: []
  type: TYPE_NORMAL
- en: Hello world!
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: // Starting stats
  prefs: []
  type: TYPE_NORMAL
- en: 'food: 10,'
  prefs: []
  type: TYPE_NORMAL
- en: 'health: 10,'
  prefs: []
  type: TYPE_NORMAL
- en: // Is skipping is next turn
  prefs: []
  type: TYPE_NORMAL
- en: 'skipTurn: false,'
  prefs: []
  type: TYPE_NORMAL
- en: // Skiped turn last time
  prefs: []
  type: TYPE_NORMAL
- en: 'skippedTurn: false,'
  prefs: []
  type: TYPE_NORMAL
- en: 'hand: [],'
  prefs: []
  type: TYPE_NORMAL
- en: 'lastPlayedCardId: null,'
  prefs: []
  type: TYPE_NORMAL
- en: 'dead: false,'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('overlay-content-player-turn', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div>'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="big" v-if="player.skipTurn">{{ player.name }},      <br>your turn
    is skipped!</div>
  prefs: []
  type: TYPE_NORMAL
- en: <div class="big" v-else>{{ player.name }},<br>your turn has       come!</div>
  prefs: []
  type: TYPE_NORMAL
- en: <div>Tap to continue</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''player''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: function getLastPlayedCard (player) {
  prefs: []
  type: TYPE_NORMAL
- en: return cards[player.lastPlayedCardId]
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('overlay-content-last-play', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div>'
  prefs: []
  type: TYPE_NORMAL
- en: <div v-if="opponent.skippedTurn">{{ opponent.name }} turn was skipped!</div>
  prefs: []
  type: TYPE_NORMAL
- en: <template v-else>
  prefs: []
  type: TYPE_NORMAL
- en: <div>{{ opponent.name }} just played:</div>
  prefs: []
  type: TYPE_NORMAL
- en: <card :def="lastPlayedCard" />
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''opponent''],'
  prefs: []
  type: TYPE_NORMAL
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: lastPlayedCard () {
  prefs: []
  type: TYPE_NORMAL
- en: return getLastPlayedCard(this.opponent)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('player-result', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="player-result" :class="result">'
  prefs: []
  type: TYPE_NORMAL
- en: <span class="name">{{ player.name }}</span> is
  prefs: []
  type: TYPE_NORMAL
- en: <span class="result">{{ result }}</span>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''player''],'
  prefs: []
  type: TYPE_NORMAL
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: result () {
  prefs: []
  type: TYPE_NORMAL
- en: 'return this.player.dead ? ''defeated'' : ''victorious'''
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('overlay-content-game-over', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div>'
  prefs: []
  type: TYPE_NORMAL
- en: <div class="big">Game Over</div>
  prefs: []
  type: TYPE_NORMAL
- en: <player-result v-for="player in players" :player="player" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''players''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: <overlay v-if="activeOverlay">
  prefs: []
  type: TYPE_NORMAL
- en: <overlay-content-player-turn
  prefs: []
  type: TYPE_NORMAL
- en: v-if="activeOverlay === 'player-turn'" />
  prefs: []
  type: TYPE_NORMAL
- en: <overlay-content-last-play
  prefs: []
  type: TYPE_NORMAL
- en: v-else-if="activeOverlay === 'last-play'" />
  prefs: []
  type: TYPE_NORMAL
- en: <overlay-content-game-over
  prefs: []
  type: TYPE_NORMAL
- en: v-else-if="activeOverlay === 'game-over'" />
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: get currentPlayer () {
  prefs: []
  type: TYPE_NORMAL
- en: return state.players[state.currentPlayerIndex]
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: get currentOpponentId () {
  prefs: []
  type: TYPE_NORMAL
- en: 'return state.currentPlayerIndex === 0 ? 1 : 0'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: get currentOpponent () {
  prefs: []
  type: TYPE_NORMAL
- en: return state.players[state.currentOpponentId]
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: <overlay v-if="activeOverlay">
  prefs: []
  type: TYPE_NORMAL
- en: <overlay-content-player-turn
  prefs: []
  type: TYPE_NORMAL
- en: v-if="activeOverlay === 'player-turn'"
  prefs: []
  type: TYPE_NORMAL
- en: :player="currentPlayer" />
  prefs: []
  type: TYPE_NORMAL
- en: <overlay-content-last-play
  prefs: []
  type: TYPE_NORMAL
- en: v-else-if="activeOverlay === 'last-play'"
  prefs: []
  type: TYPE_NORMAL
- en: :opponent="currentOpponent" />
  prefs: []
  type: TYPE_NORMAL
- en: <overlay-content-game-over
  prefs: []
  type: TYPE_NORMAL
- en: v-else-if="activeOverlay === 'game-over'"
  prefs: []
  type: TYPE_NORMAL
- en: :players="players" />
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: state.activeOverlay = 'player-turn'
  prefs: []
  type: TYPE_NORMAL
- en: state.activeOverlay = 'last-play'
  prefs: []
  type: TYPE_NORMAL
- en: state.activeOverlay = 'game-over'
  prefs: []
  type: TYPE_NORMAL
- en: state.activeOverlay = null
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: <component is="h1">Title</component>
  prefs: []
  type: TYPE_NORMAL
- en: <component is="overlay-content-player-turn" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: <component :is="'overlay-content-' + activeOverlay" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: <overlay v-if="activeOverlay">
  prefs: []
  type: TYPE_NORMAL
- en: <component :is="'overlay-content-' + activeOverlay"
  prefs: []
  type: TYPE_NORMAL
- en: :player="currentPlayer" :opponent="currentOpponent"
  prefs: []
  type: TYPE_NORMAL
- en: :players="players" />
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: <transition name="zoom">
  prefs: []
  type: TYPE_NORMAL
- en: <overlay v-if="activeOverlay">
  prefs: []
  type: TYPE_NORMAL
- en: <component :is="'overlay-content-' + activeOverlay"
  prefs: []
  type: TYPE_NORMAL
- en: :player="currentPlayer" :opponent="currentOpponent"
  prefs: []
  type: TYPE_NORMAL
- en: :players="players" />
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: .zoom-enter-active,
  prefs: []
  type: TYPE_NORMAL
- en: .zoom-leave-active {
  prefs: []
  type: TYPE_NORMAL
- en: 'transition: opacity .3s, transform .3s;'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: .zoom-enter,
  prefs: []
  type: TYPE_NORMAL
- en: .zoom-leave-to {
  prefs: []
  type: TYPE_NORMAL
- en: 'opacity: 0;'
  prefs: []
  type: TYPE_NORMAL
- en: 'transform: scale(.7);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: <transition name="zoom">
  prefs: []
  type: TYPE_NORMAL
- en: <overlay v-if="activeOverlay" :key="activeOverlay">
  prefs: []
  type: TYPE_NORMAL
- en: <component :is="'overlay-content-' + activeOverlay" :player="currentPlayer"
    :opponent="currentOpponent" :players="players" />
  prefs: []
  type: TYPE_NORMAL
- en: </overlay>
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: <transition name="fade">
  prefs: []
  type: TYPE_NORMAL
- en: <div class="overlay-background" v-if="activeOverlay" />
  prefs: []
  type: TYPE_NORMAL
- en: </transition>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: <!-- ... -->
  prefs: []
  type: TYPE_NORMAL
- en: <script src="components/ui.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: <script src="components/world.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: <script src="main.js"></script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('castle', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="castle" :class="''player-'' + index">'
  prefs: []
  type: TYPE_NORMAL
- en: <img class="building" :src="'svg/castle' + index + '.svg'" />
  prefs: []
  type: TYPE_NORMAL
- en: <img class="ground" :src="'svg/ground' + index + '.svg'" />
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Later, we will add a castle-banners component here -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''player'', ''index''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: <div class="world">
  prefs: []
  type: TYPE_NORMAL
- en: <castle v-for="(player, index) in players" :player="player"
  prefs: []
  type: TYPE_NORMAL
- en: :index="index" />
  prefs: []
  type: TYPE_NORMAL
- en: <div class="land" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('castle-banners', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="banners">'
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Food -->
  prefs: []
  type: TYPE_NORMAL
- en: <img class="food-icon" src="svg/food-icon.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Bubble here -->
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Banner bar here -->
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Health -->
  prefs: []
  type: TYPE_NORMAL
- en: <img class="health-icon" src="svg/health-icon.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Bubble here -->
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Banner bar here -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''player''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: foodRatio () {
  prefs: []
  type: TYPE_NORMAL
- en: return this.player.food / maxFood
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: healthRatio () {
  prefs: []
  type: TYPE_NORMAL
- en: return this.player.health / maxHealth
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div class="castle" :class="''player-'' + index">'
  prefs: []
  type: TYPE_NORMAL
- en: <img class="building" :src="'svg/castle' + index + '.svg'" />
  prefs: []
  type: TYPE_NORMAL
- en: <img class="ground" :src="'svg/ground' + index + '.svg'" />
  prefs: []
  type: TYPE_NORMAL
- en: <castle-banners :player="player" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: (this.ratio * 220 + 40) * state.worldRatio + 'px'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('bubble', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="stat-bubble" :class="type + ''-bubble''"'
  prefs: []
  type: TYPE_NORMAL
- en: :style="bubbleStyle">
  prefs: []
  type: TYPE_NORMAL
- en: <img :src="'svg/' + type + '-bubble.svg'" />
  prefs: []
  type: TYPE_NORMAL
- en: <div class="counter">{{ value }}</div>
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''type'', ''value'', ''ratio''],'
  prefs: []
  type: TYPE_NORMAL
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: bubbleStyle () {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: 'top: (this.ratio * 220 + 40) * state.worldRatio + ''px'','
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div class="banners">'
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Food -->
  prefs: []
  type: TYPE_NORMAL
- en: <img class="food-icon" src="svg/food-icon.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <bubble type="food" :value="player.food" :ratio="foodRatio" />
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Banner bar here -->
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Health -->
  prefs: []
  type: TYPE_NORMAL
- en: <img class="health-icon" src="svg/health-icon.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <bubble type="health" :value="player.health"
  prefs: []
  type: TYPE_NORMAL
- en: :ratio="healthRatio" />
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Banner bar here -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('banner-bar', {
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''color'', ''ratio''],'
  prefs: []
  type: TYPE_NORMAL
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: height () {
  prefs: []
  type: TYPE_NORMAL
- en: return 220 * this.ratio + 40
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: <script type="text/x-template" id="banner">
  prefs: []
  type: TYPE_NORMAL
- en: <svg viewBox="0 0 20 260">
  prefs: []
  type: TYPE_NORMAL
- en: <path :d="`m 0,0 20,0 0,${height} -10,-10 -10,10 z`"
  prefs: []
  type: TYPE_NORMAL
- en: :style="`fill:${color};stroke:none;`" />
  prefs: []
  type: TYPE_NORMAL
- en: </svg>
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('banner-bar', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: ''#banner'','
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'template: `<div class="banners">'
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Food -->
  prefs: []
  type: TYPE_NORMAL
- en: <img class="food-icon" src="svg/food-icon.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <bubble type="food" :value="player.food" :ratio="foodRatio" />
  prefs: []
  type: TYPE_NORMAL
- en: <banner-bar class="food-bar" color="#288339" :ratio="foodRatio"
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Health -->
  prefs: []
  type: TYPE_NORMAL
- en: <img class="health-icon" src="svg/health-icon.svg" />
  prefs: []
  type: TYPE_NORMAL
- en: <bubble type="health" :value="player.health"
  prefs: []
  type: TYPE_NORMAL
- en: :ratio="healthRatio" />
  prefs: []
  type: TYPE_NORMAL
- en: <banner-bar class="health-bar" color="#9b2e2e"
  prefs: []
  type: TYPE_NORMAL
- en: :ratio="healthRatio" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: targetHeight () {
  prefs: []
  type: TYPE_NORMAL
- en: return 220 * this.ratio + 40
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: data () {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: 'height: 0,'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: created () {
  prefs: []
  type: TYPE_NORMAL
- en: this.height = this.targetHeight
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'watch: {'
  prefs: []
  type: TYPE_NORMAL
- en: targetHeight (newValue, oldValue) {
  prefs: []
  type: TYPE_NORMAL
- en: const vm = this
  prefs: []
  type: TYPE_NORMAL
- en: 'new TWEEN.Tween({ value: oldValue })'
  prefs: []
  type: TYPE_NORMAL
- en: .easing(TWEEN.Easing.Cubic.InOut)
  prefs: []
  type: TYPE_NORMAL
- en: '.to({ value: newValue }, 500)'
  prefs: []
  type: TYPE_NORMAL
- en: .onUpdate(function () {
  prefs: []
  type: TYPE_NORMAL
- en: vm.height = this.value.toFixed(0)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .start()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: // Tween.js
  prefs: []
  type: TYPE_NORMAL
- en: requestAnimationFrame(animate);
  prefs: []
  type: TYPE_NORMAL
- en: function animate(time) {
  prefs: []
  type: TYPE_NORMAL
- en: requestAnimationFrame(animate);
  prefs: []
  type: TYPE_NORMAL
- en: TWEEN.update(time);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: const cloudAnimationDurations = {
  prefs: []
  type: TYPE_NORMAL
- en: 'min: 10000, // 10 sec'
  prefs: []
  type: TYPE_NORMAL
- en: 'max: 50000, // 50 sec'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Vue.component('cloud', {
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `<div class="cloud" :class="''cloud-'' + type" >'
  prefs: []
  type: TYPE_NORMAL
- en: <img :src="'svg/cloud' + type + '.svg'" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>`,
  prefs: []
  type: TYPE_NORMAL
- en: 'props: [''type''],'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: data () {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: 'style: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'transform: ''none'','
  prefs: []
  type: TYPE_NORMAL
- en: 'zIndex: 0,'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: <div class="cloud" :class="'cloud-' + type" :style="style">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: setPosition (left, top) {
  prefs: []
  type: TYPE_NORMAL
- en: // Use transform for better performance
  prefs: []
  type: TYPE_NORMAL
- en: this.style.transform = `translate(${left}px, ${top}px)`
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: initPosition () {
  prefs: []
  type: TYPE_NORMAL
- en: // Element width
  prefs: []
  type: TYPE_NORMAL
- en: const width = this.$el.clientWidth
  prefs: []
  type: TYPE_NORMAL
- en: this.setPosition(-width, 0)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: <img :src="'svg/cloud' + type + '.svg'" @load="initPosition" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: startAnimation (delay = 0) {
  prefs: []
  type: TYPE_NORMAL
- en: const vm = this
  prefs: []
  type: TYPE_NORMAL
- en: // Element width
  prefs: []
  type: TYPE_NORMAL
- en: const width = this.$el.clientWidth
  prefs: []
  type: TYPE_NORMAL
- en: // Random animation duration
  prefs: []
  type: TYPE_NORMAL
- en: const { min, max } = cloudAnimationDurations
  prefs: []
  type: TYPE_NORMAL
- en: const animationDuration = Math.random() * (max - min) + min
  prefs: []
  type: TYPE_NORMAL
- en: // Bing faster clouds forward
  prefs: []
  type: TYPE_NORMAL
- en: this.style.zIndex = Math.round(max - animationDuration)
  prefs: []
  type: TYPE_NORMAL
- en: // Animation will be there
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: // Random position
  prefs: []
  type: TYPE_NORMAL
- en: const top = Math.random() * (window.innerHeight * 0.3)
  prefs: []
  type: TYPE_NORMAL
- en: 'new TWEEN.Tween({ value: -width })'
  prefs: []
  type: TYPE_NORMAL
- en: '.to({ value: window.innerWidth }, animationDuration)'
  prefs: []
  type: TYPE_NORMAL
- en: .delay(delay)
  prefs: []
  type: TYPE_NORMAL
- en: .onUpdate(function () {
  prefs: []
  type: TYPE_NORMAL
- en: vm.setPosition(this.value, top)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .onComplete(() => {
  prefs: []
  type: TYPE_NORMAL
- en: // With a random delay
  prefs: []
  type: TYPE_NORMAL
- en: this.startAnimation(Math.random() * 10000)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .start()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: mounted () {
  prefs: []
  type: TYPE_NORMAL
- en: // We start the animation with a negative delay
  prefs: []
  type: TYPE_NORMAL
- en: // So it begins midway
  prefs: []
  type: TYPE_NORMAL
- en: this.startAnimation(-Math.random() *
  prefs: []
  type: TYPE_NORMAL
- en: cloudAnimationDurations.min)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: <div class="clouds">
  prefs: []
  type: TYPE_NORMAL
- en: <cloud v-for="index in 10" :type="(index - 1) % 5 + 1" />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: var state = {
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: 'drawPile: pile,'
  prefs: []
  type: TYPE_NORMAL
- en: 'discardPile: {},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: drawInitialHand(player)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: function beginGame () {
  prefs: []
  type: TYPE_NORMAL
- en: state.players.forEach(drawInitialHand)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: mounted () {
  prefs: []
  type: TYPE_NORMAL
- en: beginGame()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: get currentHand () {
  prefs: []
  type: TYPE_NORMAL
- en: return state.currentPlayer.hand
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: <hand v-if="!activeOverlay" :cards="currentHand" @card-
  prefs: []
  type: TYPE_NORMAL
- en: play="testPlayCard" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: created () {
  prefs: []
  type: TYPE_NORMAL
- en: this.testHand = this.createTestHand()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: var state = {
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: 'canPlay: false,'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: cssClass () {
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: '''can-play'': this.canPlay,'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: <div id="#app" :class="cssClass">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: function playCard (card) {
  prefs: []
  type: TYPE_NORMAL
- en: if (state.canPlay) {
  prefs: []
  type: TYPE_NORMAL
- en: state.canPlay = false
  prefs: []
  type: TYPE_NORMAL
- en: currentPlayingCard = card
  prefs: []
  type: TYPE_NORMAL
- en: // Remove the card from player hand
  prefs: []
  type: TYPE_NORMAL
- en: const index = state.currentPlayer.hand.indexOf(card)
  prefs: []
  type: TYPE_NORMAL
- en: state.currentPlayer.hand.splice(index, 1)
  prefs: []
  type: TYPE_NORMAL
- en: // Add the card to the discard pile
  prefs: []
  type: TYPE_NORMAL
- en: addCardToPile(state.discardPile, card.id)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: handlePlayCard (card) {
  prefs: []
  type: TYPE_NORMAL
- en: playCard(card)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: <hand v-if="!activeOverlay" :cards="currentHand" @card-
  prefs: []
  type: TYPE_NORMAL
- en: play="handlePlayCard" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: <transition-group name="card" tag="div" class="cards" @after-
  prefs: []
  type: TYPE_NORMAL
- en: leave="handleLeaveTransitionEnd">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: handleLeaveTransitionEnd () {
  prefs: []
  type: TYPE_NORMAL
- en: this.$emit('card-leave-end')
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: <hand v-if="!activeOverlay" :cards="currentHand" @card-
  prefs: []
  type: TYPE_NORMAL
- en: play="handlePlayCard" @card-leave-end="handleCardLeaveEnd" />
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: handleCardLeaveEnd () {
  prefs: []
  type: TYPE_NORMAL
- en: console.log('card leave end')
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: function applyCard () {
  prefs: []
  type: TYPE_NORMAL
- en: const card = currentPlayingCard
  prefs: []
  type: TYPE_NORMAL
- en: applyCardEffect(card)
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: // Wait a bit for the player to see what's going on
  prefs: []
  type: TYPE_NORMAL
- en: setTimeout(() => {
  prefs: []
  type: TYPE_NORMAL
- en: // Check if the players are dead
  prefs: []
  type: TYPE_NORMAL
- en: state.players.forEach(checkPlayerLost)
  prefs: []
  type: TYPE_NORMAL
- en: if (isOnePlayerDead()) {
  prefs: []
  type: TYPE_NORMAL
- en: endGame()
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: nextTurn()
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}, 700)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: function nextTurn () {
  prefs: []
  type: TYPE_NORMAL
- en: // TODO
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: function endGame () {
  prefs: []
  type: TYPE_NORMAL
- en: // TODO
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: handleCardLeaveEnd () {
  prefs: []
  type: TYPE_NORMAL
- en: applyCard()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: function nextTurn () {
  prefs: []
  type: TYPE_NORMAL
- en: state.turn ++
  prefs: []
  type: TYPE_NORMAL
- en: state.currentPlayerIndex = state.currentOpponentId
  prefs: []
  type: TYPE_NORMAL
- en: state.activeOverlay = 'player-turn'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: function newTurn () {
  prefs: []
  type: TYPE_NORMAL
- en: state.activeOverlay = null
  prefs: []
  type: TYPE_NORMAL
- en: if (state.currentPlayer.skipTurn) {
  prefs: []
  type: TYPE_NORMAL
- en: skipTurn()
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: startTurn()
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: function skipTurn () {
  prefs: []
  type: TYPE_NORMAL
- en: state.currentPlayer.skippedTurn = true
  prefs: []
  type: TYPE_NORMAL
- en: state.currentPlayer.skipTurn = false
  prefs: []
  type: TYPE_NORMAL
- en: nextTurn()
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: function startTurn () {
  prefs: []
  type: TYPE_NORMAL
- en: state.currentPlayer.skippedTurn = false
  prefs: []
  type: TYPE_NORMAL
- en: // If both player already had a first turn
  prefs: []
  type: TYPE_NORMAL
- en: if (state.turn > 2) {
  prefs: []
  type: TYPE_NORMAL
- en: // Draw new card
  prefs: []
  type: TYPE_NORMAL
- en: setTimeout(() => {
  prefs: []
  type: TYPE_NORMAL
- en: state.currentPlayer.hand.push(drawCard())
  prefs: []
  type: TYPE_NORMAL
- en: state.canPlay = true
  prefs: []
  type: TYPE_NORMAL
- en: '}, 800)'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: state.canPlay = true
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: var overlayCloseHandlers = {
  prefs: []
  type: TYPE_NORMAL
- en: '''player-turn'' () {'
  prefs: []
  type: TYPE_NORMAL
- en: if (state.turn > 1) {
  prefs: []
  type: TYPE_NORMAL
- en: state.activeOverlay = 'last-play'
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: newTurn()
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '''last-play'' () {'
  prefs: []
  type: TYPE_NORMAL
- en: newTurn()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '''game-over'' () {'
  prefs: []
  type: TYPE_NORMAL
- en: // Reload the game
  prefs: []
  type: TYPE_NORMAL
- en: document.location.reload()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'methods: {'
  prefs: []
  type: TYPE_NORMAL
- en: // ...
  prefs: []
  type: TYPE_NORMAL
- en: handleOverlayClose () {
  prefs: []
  type: TYPE_NORMAL
- en: overlayCloseHandlers[this.activeOverlay]()
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: <overlay v-if="activeOverlay" :key="activeOverlay"
  prefs: []
  type: TYPE_NORMAL
- en: '@close="handleOverlayClose">'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: function endGame () {
  prefs: []
  type: TYPE_NORMAL
- en: state.activeOverlay = 'game-over'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: This will display the `game-over` overlay if at least one player is dead.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our card game is finished. We saw a lot of new features provided by Vue that
    enable us to create rich and interactive experiences easily. However, the one
    most important thing we introduced and used in this chapter is the component-based
    approach to web application development. This helps us develop larger applications
    by splitting our frontend logic into small, isolated, and reusable components.
    We covered how to make components communicate with each other, from parent to
    children with props and from child to parent with custom events. We also added
    animations and transitions (with the `<transition>` and `<transition-group>` special
    components) to the game to make it more alive. We even manipulated SVG inside
    our templates and dynamically displayed a component with the special `<component>`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will set up a more advanced application with Vue component
    files, among other features that will help us build even larger applications.
  prefs: []
  type: TYPE_NORMAL
