- en: Giving Voice to Jarvis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ever wondered whether using robots to get our work done is possible? Well yes!
    Certainly in some high-tech fiction or Marvel movies or even comic books. So,
    get your seat belt tight and get ready for this amazing chapter where you will
    actually be implementing what I just mentioned.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Basic installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic delivery answering machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an interactive door answering robot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making Jarvis understand our voice
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic installation
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various ways and methods through which we can control our smart home
    Jarvis, some of which we have explored earlier such as controlling it through. So,
    to start with, we need to prepare our system to be able to do speech synthesis;
    to do that, let's perform the following process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to the terminal and enter the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What this will do is install the dependency `alsa-utils`. The `alsa-utils` package
    contains various utilities that are useful for controlling your sound drivers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is done, you need to edit the file. To do it, we need to open the
    file. Use the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once that is done, a file will open; at the bottom of that file, you need to
    add the following line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You don't need to get too much into why we are doing it. It's just there to
    set things up. I can give you an explanation; however, I do not wish to bore you
    at this exciting moment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you are lucky, then sometimes, you might find the line to be already
    present. If that is the case, then let it be there and don't touch it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Now, to play the sounds that we need the Jarvis to say, we need an audio player.
    No, not the one that you have at your home. We are talking about the software
    that would play it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the player, we need to run the following commands:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All right, we are done with audio player; let''s see what we have next. Now,
    again, we need to edit the file of the media player. We will use the same steps
    to open the file and edit it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will open the file. As before, simply add the following line:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we need to give it some voice, so run the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will install a 16 kHz, British, male, voice to Jarvis. We love British
    accents, don't we?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Perfect. Once we have done all of the steps mentioned previously, we would
    be good to go. To test the voice, simply connect a USB speaker to the Raspberry
    Pi and run the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'All right then, let''s see what we have actually done:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you might have figured out, we are importing the library named `os`. This
    library provides a way of using operating-system-dependent functionality:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we are using a method called `system()`; what this does is that it executes
    a shell command. You might be wondering what this is. A shell command is a command
    used by the user to access the functionality of a system to interact with it.
    So now that we want to convert our text to voice, we would be providing two arguments
    to this function. First, what is the text? In our case, it is `Hello from the
    other side`; the second argument that we have here is `festival --tts`. Now `festival`
    is a library, and `tts` stands for text to speech conversion. So when we pass
    it on to the argument, the system will know that the text passed on to the argument
    has to be converted from text to speech.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: And that's it! Yes, that's it. That's all we have to do to make your Raspberry
    speak.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Automatic delivery answering machine
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These days, we all order things online. Yet no matter how automated the process
    of Amazon is, when talking about 2018, we still have humans delivering the packages
    to our doorsteps. Sometimes, you want them to know a few things about where to
    leave the parcel. Now that we are becoming more and more automated, gone are the
    days when you might leave a note outside your gate. It''s time to make something
    really interesting with our technology. To do that, we hardly need to do anything
    serious. All we need to do is to wire up the components as shown in the following
    diagram:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b7b909b5-f145-40fc-bdb1-3d49aa5ffab9.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: The PIR sensor must be placed so that it gives a logic high whenever there is
    movement around the gate.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that is done, go ahead and upload the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now what we have done is very simple. As soon as the PIR sensor gives a logic
    high, a certain instruction is spoken. There is no need of an explanation. You
    can refer to the previous code if you need any clarification.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Making an interactive door – answering robot
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we have used a PIR sensor to sense any human activity,
    however the problem with the sensor is, that no matter who comes or leaves it
    would deliver the same message. That basically means that even when you come home
    after a long day, it would end up asking the same question. Pretty dumb huh?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: So in this chapter we would use the previous repository and integrate the vision
    and the voice together to make an amazing duo. In this, the camera would identify
    who is on the gate and would recognize if it is a human and a stranger, if so
    then, it would deliver the message you intend to give. On the other hand if its
    you then it would simply let you pass with a simple greeting. However if the face
    is detected but not recognized then it would give a set of instructions to the
    person standing in-front of the camera.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement it all you need to do is to set up a camera on the gate of your
    door along with the PIR. The PIR is basically to activate the camera. In other
    words the camera would not get activated till the time no movement is detected.
    This set up is very straight forward and does not need any GPIO to be used. Simply
    fix the camera and PIR and upload the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we are creating a cascade classifier using the method
    `CascadeClassifier` so that faces can be detected by the camera.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code, we are reading the frames from the camera using `VideoCapture(0)`
    method of `cv2`. Also, the face recognizer is being created to recognize a particular
    face.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now read the data from the camera using `cam.read()` as done in the previous
    code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The images are converted into gray color. Then, `faceDetect.detectMultiScale()`
    will be using the gray color-converted images.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As the face is detected, the part of the image containing the face will be
    converted into gray and passed to a predict function. This method will tell if
    the face is known or not, it also returns the ID if the face is identified. Suppose
    the person is `BEN`, then Jarvis would say `Hello, welcome to my house BEN`. Now
    `BEN` can tell the Jarvis to turn on the lights, and the Jarvis would respond
    as the wake word Jarvis gets activated. And if the person is not recognized, then
    maybe it was a delivery boy. Then, the following commands get executed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Making Jarvis understand our voice
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Voice is an essence of communication. It helps us transfer huge amounts of data
    in a very short period of time. It is certainly faster and easier than typing.
    Hence, more and more companies are working toward making systems that understands
    human voice and language and work according to them. It is certainly not easy
    because of the huge variations that are present in the language; however, we have
    come a considerable distance. So without much time, let's make our system get
    ready to recognize our voice.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: So here, we would be using an API from Google Voice. As you may know, Google
    is really good at understanding what you say. Like, very literally. So it makes
    sense to use their API. Now, the way it works is very simple. We capture the voice,
    and we convert it into the text. Then, we compare if the text is similar to something
    we have defined in the configuration file. If it matches with anything, the bash
    command associated with it will be executed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to check whether the microphone is connected. To do that, run
    the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This command will show you a list of devices connected on USB. If you see yours
    on the list, then thumbs up, you are on the right track. Otherwise, try finding
    it with the connection or maybe try another hardware.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to set the recording volume to high. To do this, go ahead and
    type the following command on the serial:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now once the GUI pops on to the screen, toggle the volume using the arrow keys.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s best to hear the sound recorded by yourself rather than directly giving
    it down to the Raspberry. To do that first, we need to record our voice, so we
    need to run the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will check whether the webcam is on the list. Then, write the following
    command to record:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The sound will be recorded with the following name, `First.wav`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we would also like to listen to what we just recorded. The simple way to
    do that is by typing the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Check whether the voice is correct. If not, then you are free to make any adjustments
    to the system.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are done with checking the sound and the microphone, it''s time to
    install the real software for the job. There are simple ways with which you can
    do it. The following is a list of commands that you need to run:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now when you run this, very interesting things will start to happen. It will
    start to ask you various questions. Some of them will be straightforward. You
    can use your right mind to give the answers to it in the form of yes or no. Others
    could be very technical. As these questions might change over time, there seems
    to be no need to explicitly mention the answers that you need to fill, but as
    a general rule of thumb—Give it a yes unless it's something you really want to
    say no to.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Perfect then, we have installed the software. Now before you go any further
    in that software, let''s go ahead and write the following programs:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Whenever this program runs, the light that is connected on PIN number `2` will
    be turned on. Also, it will read out `LIGHTS TURNED ON`. Save this file with the
    name `lighton.py`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Similarly, in this program, the light would be turned off and it would read
    out `LIGHTS TURNED OFF`. Save it by the name `lightoff.py`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now we are doing the same thing for the fan as well. In this one, the fan will
    be switched on; save it with the name `fanon.py`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: I don't need to explain the same thing for this do I? As you will have guessed,
    save it with the name `fanoff.py`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'All right! When all of this is done, then type the following command to check
    whether the software is installed properly:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Raspberry Pi responds to the wake word `pi`; let''s change it to `jarvis`.
    All these changes can be made after opening the configuration file using the following
    command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In that file, enter the commands of your own. Here, let''s add the following
    code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now for each command, define the action. The action would be to run the Python
    file that contains the code for switching the lights and fan on or off. The code
    is basic and simple to understand. Add the following to the file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now, let's see what we have done. Whenever you say <q>Jarvis, light on</q>, it
    will convert your speed to text, compare it with the program that it has to run
    corresponding to it and will do whatever is there in the program. Hence, in this
    program, whenever we say <q>Light on,</q> the lights will be turned on and similarly
    for the rest of the commands as well. Remember to make it listen to what you are
    saying. You would have to say the word, <q>Jarvis,</q> which will make it attentive
    to the commands and ready to listen.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们做了什么。每当你说“贾维斯，开灯”，它会将你的语速转换成文本，将其与相应的程序进行比较，并执行程序中的操作。因此，在这个程序中，每当我们说“开灯”，灯就会亮起，其他命令也是类似。记得让它听到你说的话。你必须说“贾维斯”这个词，这样它才会听从命令并准备倾听。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we understood how to interact and make the Jarvis work according
    to our needs. If this chapter was about verbal communication, then the next chapter
    is about gesture recognition where, using advanced capacitive techniques, you
    will be able to control your automation system just by waving at it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们了解了如何与贾维斯互动，并根据我们的需求让它工作。如果这一章是关于口头交流，那么下一章将是关于手势识别，利用先进的电容技术，你将能够通过挥手来控制你的自动化系统。
