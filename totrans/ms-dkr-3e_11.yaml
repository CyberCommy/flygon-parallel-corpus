- en: Portainer - A GUI for Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at Portainer. **Portainer** is a tool
    that allows you to manage Docker resources from a web interface. The topics that
    will be covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The road to Portainer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Portainer up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Portainer and Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in previous chapters, we will continue to use our local Docker installations.
    Also, the screenshots in this chapter will be from my preferred operating system,
    macOS. Towards the end of the chapter, we will use Docker Machine and VirtualBox
    to launch a local Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: As before, the Docker commands we will be running will work on all three of
    the operating systems have installed Docker on so far—however some of the supporting
    commands, which will be few and far between, may only apply to macOS and Linux
    based operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2yWAdQV](http://bit.ly/2yWAdQV)'
  prefs: []
  type: TYPE_NORMAL
- en: The road to Portainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we roll up our sleeves and dive into installing and using Portainer,
    we should discuss the background of the project. The first edition of this book
    covered Docker UI. Docker UI was written by Michael Crosby, who handed the project
    over to Kevan Ahlquist after about a year of development. It was at this stage,
    due to trademark concerns, that the project was renamed UI for Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Development of UI for Docker continued up until the point Docker started to
    accelerate the introduction of features such as Swarm mode into the core Docker
    Engine. It was around this time that the UI for Docker project was forked into
    the project that would become Portainer, which had its first major release in
    June 2016.
  prefs: []
  type: TYPE_NORMAL
- en: Since their first public release, the team behind Portainer estimate the majority
    of the code has already been updated or rewritten, and by mid-2017, new features
    were added, such as role-based controls and Docker Compose support.
  prefs: []
  type: TYPE_NORMAL
- en: In December 2016, a notice was committed to the UI for Docker GitHub repository
    stating that the project is now deprecated and that Portainer should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Portainer up and running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are first going to be looking at using Portainer to manage a single Docker
    instance running locally. I am running Docker for Mac so I will be using that,
    but these instructions should also work with other Docker installations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, to grab the container image from the Docker Hub we just need
    to run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see when we ran the `docker image ls` command, the Portainer image
    is only 58.7MB. To launch Portainer, we simply have to run the following command
    if you are running macOS or Linux:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows users will have to run the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the command we have just run, we are mounting the socket
    file for the Docker Engine on our Docker Host machine. Doing this will allow Portainer
    full unrestricted access to the Docker Engine on our host machine. It needs this
    so it can manage Docker on the host; however, it does mean that your Portainer
    container has full access to your host machine, so be careful in how you give
    access to it and also when publicly exposing Portainer on remote hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screenshot below shows this being executed on macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f63b2904-5c6a-44d2-a8ab-b8c16cbc2d7d.png)'
  prefs: []
  type: TYPE_IMG
- en: For the most basic type of installation, that is all we need to run. There are
    a few more steps to complete the installation; they are all performed in the browser.
    To complete them, go to [http://localhost:9000/](http://localhost:9000/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first screen you will be greeted by asks you to set a password for the admin
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set the password, you will be taken to a login page: enter the
    username `admin` and the password you just configured. Once logged in, you will
    be asked about the Docker instance you wish to manage. There are two options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manage the Docker instance where Portainer is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage a remote Docker instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the moment, we want to manage the instance where Portainer is running,
    which is the Local option, rather than the default Remote one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/033eadfb-a669-42ea-adb8-ee1b7dd00bdf.png)'
  prefs: []
  type: TYPE_IMG
- en: As we have already taken mounting the Docker socket file into account when launching
    our Portainer container, we can click on **Connect** to complete our installation.
    This will take us straight into Portainer itself, showing us the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Using Portainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have Portainer running and configured to communicate with our Docker
    installation, we can start to work through the features listed in the left-hand
    side menu, starting at the top with the Dashboard, which is also the default landing
    page of your Portainer installation.
  prefs: []
  type: TYPE_NORMAL
- en: The Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see from the following screenshot, the **Dashboard** gives us an
    overview of the current state of the Docker instance that Portainer is configured
    to communicate with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1dd6011f-fe9c-43e5-aad4-3d00627cf26e.png)'
  prefs: []
  type: TYPE_IMG
- en: In my case, this shows how many **Containers** I have running, which at the
    moment is just the already running Portainer container, as well as the number
    of images I have downloaded. We can also see the number of **Volumes** and **Networks**
    available on the Docker instance, also it will show the number of running **Stacks**.
  prefs: []
  type: TYPE_NORMAL
- en: It also shows basic information on the Docker instance itself; as you can see,
    the Docker instance is running Moby Linux, has two CPUs and 2 GB of RAM. This
    is the default configuration for Docker for Mac.
  prefs: []
  type: TYPE_NORMAL
- en: The **Dashboard** will adapt to the environment you have Portainer running in,
    so we will revisit it when we look at attaching Portainer to a Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Application templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, we have **App Templates**. This section is probably the only feature
    not to be a direct feature available in the core Docker Engine; it is instead
    a way of launching common applications using containers downloaded from the Docker
    Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/81d8277b-9f6f-41da-8882-0a5a4061dab4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are around 25 templates that ship with Portainer by default. The templates
    are defined in JSON format. For example, the nginx template looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are more options you can add, for example the MariaDB template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the templates look similar to a Docker Compose file; however,
    this format is only used by Portainer. For the most part, the options are pretty
    self-explanatory, but we should touch upon the **Name** and **Label** options.
  prefs: []
  type: TYPE_NORMAL
- en: 'For containers that typically require options defined by passing custom values
    via environment variables, the **Name** and **Label** options allow you present
    the user with custom form fields that need to be completed before the container
    is launched, as demonstrated by the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/81479591-d561-413e-9abe-d744fe3e71af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we have a field where we can enter the root password we would
    like to use for our MariaDB container. Filling this in will take that value and
    pass it as an environment variable, building the following command to launch the
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For more information on app templates, I recommend reviewing the documentation,
    a link to this can be found in the further reading section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next thing we are going to look at in the left-hand menu is **Containers**.
    This is where you launch and interact with the containers running on your Docker
    instance. Clicking on the **Containers** menu entry will bring up a list of all
    of the containers, both running and stopped, on your Docker instance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/28f3d88f-f07c-4c7a-8b83-c97cc5a739b5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, I currently have only a single container running, and that just
    happens to be the Portainer one. Rather than interacting with that, let's press
    the **+ Add container** button to launch a container running the cluster application
    we used in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several options on the **Create container** page; these should be
    filled in as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: `russmckendrick/cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always pull the image**: On'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Publish all exposed ports**: On'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, add a port mapping from port `8080` on the host to port `80` on the
    container by clicking on **+ map additional port**. Your completed form should
    look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/994969a3-833f-4080-902b-aa4b924c5ea9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once that''s done, click on **Deploy the container**, and after a few seconds,
    you will be returned the list of running containers, where you should see your
    newly launched container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/df751dbc-16d2-4f8b-8dc6-1abba5022868.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the tick box on the left of each container in the list will enable the
    buttons at the top, where you can control the status of your containers - make
    sure not to **Kill** or **Remove** the Portainer container. Clicking on the name
    of the container, in our case **cluster**, will bring up more information on the
    container itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cd68e95c-2580-4dfa-ac5e-41af1c5dcf3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the information about the container is the same information
    you would get if you were to run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can see the full output of this command by click on **Inspect**. You will
    also notice that there are buttons for **Stats**, **Logs**, and **Console**.
  prefs: []
  type: TYPE_NORMAL
- en: Stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Stats** page shows the CPU, memory, and network utilization, as well
    as a list of the processes for the container you are inspecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9e874f94-8dfd-4f46-82d4-b06e9f9ce701.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The graphs will automatically refresh if you leave the page open, and refreshing
    the page will zero the graphs and start afresh. This is because Portainer is receiving
    this information from the Docker API using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Each time the page is refreshed, the command is started from scratch as Portainer
    currently does not poll Docker in the background to keep a record of statistics
    for each of the running containers.
  prefs: []
  type: TYPE_NORMAL
- en: Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, we have the **Logs** page. This shows you the results of running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It displays both the `STDOUT` and `STDERR` logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/85131733-5b8c-45a0-a519-70b57c460ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You also have the option of adding timestamps to the output; this is the equivalent
    of running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we have **Console**. This will open an HTML5 terminal and allow you
    to log in to your running container. Before you connect to your container, you
    need to choose a shell. You have the option of three shells to use: `/bin/bash`
    , `/bin/sh `or `/bin/ash` and also which user to connect as, root is the default.
    While the cluster image has both shells installed, I choose to use `/bin/bash`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a1a2535d-fb95-4cca-badd-1c84c17f5c45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the equivalent of running the following command to gain access to your
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the screenshot, the `bash` process has a PID of `15`. This
    process was created by the `docker container exec` command, and that will be the
    only process which is terminated once you disconnect from your shell session.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up in the left-hand menu is **Images**. From here, you can manage, download,
    and upload images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e2b3db1c-dcb7-4b2d-949b-84a7d2bdd4c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the top of the page, you have the option of pulling an image. For example,
    simply entering `amazonlinux` into the box and then clicking on **Pull** will
    download a copy of the Amazon Linux container image from Docker Hub. The command
    executed by Portainer would be this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find more information about each image by clicking on the image ID;
    this will take you to a page that nicely renders the output of running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0e6e4323-5fae-4de1-8c74-47c357492212.png)'
  prefs: []
  type: TYPE_IMG
- en: Not only do you get all of the information about the image, but you also get
    options to push a copy of the image to your chosen registry or, by default, the
    Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: You also get a complete break down of each of the layers contained within the
    image, showing the command which was executed during the build and size of each
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: Networks and volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next two items in the menu allow you to manage networks and volumes; I am
    not going to go into too much detail here as there is not much to them.
  prefs: []
  type: TYPE_NORMAL
- en: Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you can quickly add a network using the default bridge driver. Clicking
    on **Advanced settings** will take you to a page with more options. These include
    using other drivers, defining the subnets, adding labels, and restricting external
    access to the network. As with other sections, you can also remove networks and
    inspect existing networks.
  prefs: []
  type: TYPE_NORMAL
- en: Volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are not many options here other than adding or removing a volume. When
    adding a volume, you get a choice of drivers as well as being able to fill in
    options to pass to the driver, which allows the use of third-party driver plugins.
    Other than that, there is not much to see here, not even an inspect option.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The events page shows you all of the events from the last 24 hours; you also
    have an option of filtering the results, meaning you can quickly find the information
    you are after:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1f6b826a-dd7c-437a-bd0b-4e03e23c0e74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the equivalent of running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final entry simply shows you the output of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the output of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7322577c-78c1-4836-b290-5f95e5b3e4bd.png)'
  prefs: []
  type: TYPE_IMG
- en: This can be useful if you are targeting multiple Docker instance endpoints and
    need information on the environment the endpoint is running on.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point we are move onto looking at Portainer running on Docker Swarm
    so now would be a good time to remove the running containers and also the volume
    which was created when we first launched Portainer, you can remove the volume
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Portainer and Docker Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we looked at how to use Portainer on a standalone Docker
    instance. Portainer also supports Docker Swarm clusters, and the options in the
    interface adapt to the clustered environment. We should look at spinning up a
    Swarm and then launching Portainer as a service and see what changes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As in the Docker Swarm chapter, we are going to be creating the Swarm locally
    using Docker Machine; to do this, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the three instances have launched, run the following command to initialize
    the Swarm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the following commands, inserting your own token, to add the worker
    nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our cluster formed, run the following to point your local
    Docker client to the manager node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, check the status of the Swarm using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The Portainer service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now what we have a Docker Swarm cluster and our local client is configured
    to communicate with the manager node, we can launch the Portainer service by simply
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this will launch Portainer as a service on the manager node
    and make the service mount the manager nodes socket file so that it has visibility
    of the rest of the Swarm. You can check that the service has launched without
    any errors using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/53d7a673-1fe4-482c-9525-50f925aaf3c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the service has launched, you can access Portainer on port `9000`
    on any of the IP addresses of the nodes in your cluster, or run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When the page opens, you will be once again be asked to set a password for the
    admin user; once set, you will be greeted with a login prompt. Once you have been
    logged in, you will be taken straight to the Dashboard. The reason for this is
    that when we launched Portainer this time, we passed it the argument `-H unix:///var/run/docker.sock`,
    which told Portainer to select the option we manually chose when we launched Portainer
    on our single host.
  prefs: []
  type: TYPE_NORMAL
- en: Swarm differences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As already mentioned, there are a few changes to the Portainer interface when
    it is connected to a Docker Swarm cluster. In this section, we will cover them.
    If a part of the interface is not mentioned, then there is no difference between
    running Portainer in single-host mode.
  prefs: []
  type: TYPE_NORMAL
- en: Endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing you will have to do when you log in is select an endpoints, as
    you can see from the following screen, there is a single one called **primary**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f73d75d1-6f79-4794-a20e-6bebdce83c3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the endpoint will take you the **Dashboard**, we will look at **Endpoints**
    again at the end of the section.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard and Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the first changes you will notice is that the Dashboard now displays
    information on the Swarm cluster, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fd4d1e74-0ad4-4dbf-a2c3-5a34b91ee1bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the CPU says 3 and the total RAM is 3.1 GB, each node within the
    cluster has 1 GB of RAM and 1 CPU, so these values are the cluster totals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **Go to cluster vizualizer** will take you to the Swam page, this
    gives you a visual overview of the cluster, where the only running service is
    currently Portainer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a13868d7-88bf-40ae-9c9c-b01ba405b27d.png)'
  prefs: []
  type: TYPE_IMG
- en: Stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The one item we didn''t cover in the left-hand menu is **Stacks**, from here
    you can launch stacks as we did when we looked at Docker Swarm. In-fact, let''s
    take the Docker Compose file we used, which looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **+ Add stack** button and then paste the contents above into the
    web-editor, enter a name of `MobyCounter`, do not add any spaces or special characters
    to the name as this is used by Docker for and then click on **Deploy the stack**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once deployed you will be able to click on **MobyCounter** and manage the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f6b6017d-3a92-44d3-8c19-2720e6115860.png)'
  prefs: []
  type: TYPE_IMG
- en: Stacks are a collection of services, so let's take a look at them next.
  prefs: []
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This page is where you can create and manage services; it should already be
    showing several services including Portainer. So that we don''t cause any problems
    with the running Portainer container, we are going to create a new service. To
    do this, click on the **+ Add Service** button. On the page that loads, enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: `russmckendrick/cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduling mode**: **Replicated**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Replicas** : **1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This time we need to add a port mapping for port `8000` on the host to map
    to port `80` to the container, this is because the stack we launched in the last
    section is already using port `8080` on the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/098c7993-08e7-4248-94de-46effda21158.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have entered the information, click on the **Create the service** button.
    You will be taken back to the list of services, which should now contain the cluster
    service we just added. You may have noticed that in the scheduling mode column,
    there is an option to scale. Click on it and increase the number of replicas to
    **6** for our **cluster** service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **cluster** in the **Name** column takes us to an overview of the
    service. As you can see, there is a lot of information on the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a9e27419-518a-475d-ba8b-0e4204160578.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can make a lot of changes to the **Service** on the fly, including placement
    constraints, the restart policy, adding service labels, and more. Right at the
    bottom of the page is a list of the tasks associated with the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e5341775-3d05-45d8-8f58-9cf92908c2fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we have six running tasks, two on each of our three nodes.
    Clicking on **Containers** in the left-hand menu may show something different
    than you expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d60f20dd-8806-4bfd-bc7a-fa44f6973644.png)'
  prefs: []
  type: TYPE_IMG
- en: There are only three containers listed, and one of them is for the Portainer
    service. Why is that?
  prefs: []
  type: TYPE_NORMAL
- en: Well, if you remember in the Docker Swarm chapter, we learned that `docker container`
    commands only really apply to the node you are running them against, and as Portainer
    is only talking to our manager node, that is the only node which the Docker container
    commands are executed against. Remember that Portainer is only a web interface
    for the Docker API, so it mirrors the same results as you get running `docker
    container ls` on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Adding endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: However, we can add our two remaining cluster nodes to Portainer. To do this,
    click on the **Endpoint** entry in the left-hand menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the endpoint, we will need to know the endpoint URL and have access
    to the certificates so that Portainer can authenticate itself against the Docker
    daemon running on the node. Luckily, as we launched the hosts using Docker Machine,
    this is a simple task. To get the endpoint URLs, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For me, the two endpoint URLs were `192.168.99.101:2376` and `192.168.99.102:2376`;
    yours may be different. The certificates we need to upload can be found in the
    `~/.docker/machine/certs/` folder on your machine. I recommend running the following
    commands to open the folder in your finder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Once you have added the node, you will be able to change to it using the **+
    Add Endpoint** button in the **Settings / Endpoints** page.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here enter the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `swarm-worker01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endpoint URL**: `192.168.99.101:2376`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public IP:** `192.168.99.101`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TLS**: On'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TLS with server and client verification**: Ticked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the certs from `~/.docker/machine/certs/`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then click on the **+ Add endpoint** button, clicking on **Home** will take
    you to the Endpoint overview screen we first saw at the start of this section
    of the chapter. As you can see from the following screenshot, we can see that
    the workers are running three containers each and that they are marked as standalone
    rather than Swarm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e367b2ca-bca4-4833-82c5-22682805ecce.png)'
  prefs: []
  type: TYPE_IMG
- en: You will also notice that other than the Swarm being mention in the Endpoint,
    there's no mention of Swarm services. Again, this is because Portainer only knows
    as much as your Docker nodes, and Swarm mode only allows nodes with the role of
    manager to launch services and tasks and interact with the other nodes in your
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget to remove your local Docker Swarm cluster by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That concludes our deep dive with Portainer. As you can see, Portainer is very
    powerful, yet simple to use, and will only continue to grow and integrate more
    of the Docker ecosystem as features are released. With Portainer, you can do a
    lot of manipulation with not only your hosts but also the containers and services
    running on single or cluster hosts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we are going to take a look at how to secure your Docker
    host as well as how to run scans against your container images.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On a macOS or Linux machine, what is the path to mount the Docker socket file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default port Portainer runs on?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: You can use Docker Compose files as application templates?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: The stats shown in Portainer are only real time, you can’t view
    historical data?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find more information on Portainer at here:'
  prefs: []
  type: TYPE_NORMAL
- en: Main website: [https://portainer.io/](https://portainer.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portainter on GitHub: [https://github.com/portainer/](https://github.com/portainer/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Latest documentation: [https://portainer.readthedocs.io/en/latest/index.html](https://portainer.readthedocs.io/en/latest/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template documentation: [http://portainer.readthedocs.io/en/latest/templates.html](https://portainer.readthedocs.io/en/latest/templates.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
