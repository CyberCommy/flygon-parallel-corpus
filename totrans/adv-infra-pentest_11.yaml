- en: Routing and Router Vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routers are the major devices in every modern organization. In a connected world,
    routing is the backbone of exchanging information, and we know that valuable information
    is a target for attackers on a daily basis. This chapter will take you through
    a learning experience that begins by exploring routing operations and guides you
    through real-world demonstrations of exploiting routing protocols and routers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will discover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Routing fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting routing protocols—RIP, OSPF, EIGRP, and BGP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting modern routers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to defend against level 3 attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapters, we discussed switches. Routers and switches are both
    required to forward information. Switches work in layer 2 even if there are some
    layer 3 switches. Routers operate in layer 3, which is the **Network Layer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00342.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to exchange information, routers use IP addresses. They are maintaining 
    a routing table. When it comes to routing, we have two different categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static routing**: In static routing, all the routes are set manually by the
    network administrator. It is a good decision for small networks where we have
    fewer unnecessary routing updates, but it will be a problem when a link goes down.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic routing**: In dynamic routing, routers adapt quickly while they learn
    the network topology from neighbors, even if a link goes down, but the network
    traffic is greater than during static routing. Thus, networking overhead could
    occur.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Routing can be classified further as classful or classless routing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Classful routing**: You can''t send the subnet mask along routing updates.
    In networking, we have five IP classes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Class** | **First range** | **Default subnet mask** |'
  prefs: []
  type: TYPE_TB
- en: '| A | 1 – 126 | `255.0.0.0` |'
  prefs: []
  type: TYPE_TB
- en: '| B | 128 – 191 | `255.255.0.0` |'
  prefs: []
  type: TYPE_TB
- en: '| C | 192 – 223 | `255.255.255.0` |'
  prefs: []
  type: TYPE_TB
- en: '| D | 224 – 239 | Multicasting |'
  prefs: []
  type: TYPE_TB
- en: '| E | 240 – 254 | Experimental uses |'
  prefs: []
  type: TYPE_TB
- en: '**Classless routing**: You can send the subnet mask along routing updates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To route information over the internet, router protocols are used to perform
    this information routing from a network to another network. However, we need to
    distinguish between two different terms: routing protocols and routed protocols.
    Routing protocols are used to route information from a source to a destination
    but routed protocols are the payload that carries information. In other words,
    routing protocols determine the path, update the routing table, and route a routed
    protocol. There are many routed protocols, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internet Protocol** (**IP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internetwork Packet eXchange** (**IPX**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00343.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Routers use various algorithms to select the path of routed information to
    provide an efficient, reliable, rapid convergence, and a simple data exchange.
    Routing protocols are there to do the job based on many parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Bandwidth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reliability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of hops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum transmission units** (**MTU**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table describes some of the routing protocols based on their
    metrics. We will discuss every routing protocol later in more detail. We use this
    table to have a better understanding of how to choose a routing protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Routing protocol** | **Metrics ** |'
  prefs: []
  type: TYPE_TB
- en: '| EIGRP | Bandwidth, delay, load, reliability, and MTU  |'
  prefs: []
  type: TYPE_TB
- en: '| RIPv2 | Hop count  |'
  prefs: []
  type: TYPE_TB
- en: '| OSPF | Cost (higher bandwidth indicates lower cost)    |'
  prefs: []
  type: TYPE_TB
- en: 'Routing protocols can be divided into three main categories based on the preceding
    metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Distance vector protocols**: They are used when the routers are sending their
    routing tables to their neighbors during a specific time period'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link state protocols**: They maintain an overall picture of the network;
    they only exchange routing changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid protocols**: They are a combination of link state protocols and distance
    vector protocols'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are important terminologies in routing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Autonomous System (AS)**: AS is a set of networking devices moderated by
    a common entity or a routing policy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interior gateway protocols (IGP)**: When using IGP, routers exchange information
    within an autonomous system with other routers that share the same routing protocol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exterior gateway protocols (EGP)**: If you need to move from a network to
    another network such as the internet, you need to use an EGP between different
    autonomous systems:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00344.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exploiting routing protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore many routing protocols and how to exploit each
    one of them, and we will learn the required defenses to protect your network.
  prefs: []
  type: TYPE_NORMAL
- en: Routing Information Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Routing Information Protocol** (**RIP**) v1 is a distance vector protocol.
    It sends a routing table every 30 seconds. RIP uses the hop count as a decision
    metric. This is an old protocol, and it can''t reach more than 15 hops in its
    first version, RIPv1\. To reach a destination, RIP uses the path with the lowest
    number of hops, but this is not that efficient because in some cases, there are
    many routes with more hop counts but with better bandwidth. For example, in the
    following network when using RIPv1, the traffic will be forwarded via **Route
    1,** and even **Route 2** has a greater bandwidth:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00345.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Many revisions are taken into consideration in the successor of RIPv1\. RIPv2
    is an enhanced version of RIPv1\. Although RIP is a classful routing protocol,
    RIPv2 is classless, which means it includes the mask in every routing entry. Thus,
    it supports **variable-length subnet masking** (**VLSM**). RIPv2 also provides a
    simple authentication mechanism, so a router accepts a packet from a neighbor
    router only if it checks its authenticity. A tag is also added, which is additional
    information to distinguish between the routes learned by RIP and other routes
    from other protocols. All these enhancements are great, but the hop count is still
    a present issue, whereas in RIPv2 the max number of reachable hops is 15.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure RIP on a router, just enter the RIP configuration mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In a RIP operation and a distance vector routing in general, a routing loop
    can occur. A routing loop happens when the packet goes through the routers repeatedly
    over and over. This loop could disable the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent routing loops, we can use many methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Split horizon**: This prevents a router from sending a packet back to an
    interface from which that packet was learned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Route poisoning**: This prevents sending packets toaroute that has become
    invalid within the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poison reverse**: This notifies the neighbor gateways that a gateway is no
    longer connected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hold down timers**: These are set to allow routers to recover without updating
    their routing tables when the route goes offline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggered update**: This sends a partial update when a metric change occurs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RIPv1 reflection DDoS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RIPv1, as I mentioned previously, is an old routing protocol, but attackers
    revived it. For example, in 2015, researchers at Akamai's Prolexic Security Engineering
    and Research Team (PLXsert) spotted a huge DDoS attack with 12.9 Gbps peak. Attackers
    used an amplified and reflected DDoS attack. In this attack, hackers craft a normal
    RIPv1 request query and used spoofed IP addresses which are same as that of the
    target. In order to defend against this type of attack, it is recommended to use
    RIPv2 instead of the older version. Also, you need to use access lists and block
    UDP packets from port `520`.
  prefs: []
  type: TYPE_NORMAL
- en: Open Shortest Path First
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Open Shortest Path First** (**OSPF**) is an open standard link state protocol
    based on RFC 1247\. In an OSPF operation, routers send information to all the
    routers in the same area using **link-state advertisements** (**LSA**). Routers
    calculate the path using the **Shortest Path First** (**SPF**) algorithm. This
    algorithm is sometimes named the Dijkstra algorithm. It requires great processing
    power. OSPF also supports VLSM.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For better administration, OSPF uses a hierarchical topology. OSPF is composed
    by a backbone named **Area 0** that connects with the other smaller areas. When
    a change occurs, routers get notified, get a copy of the LSA, and update the **link
    state database** (**LSDB**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before diving into how OSPF works, let''s look at some important router terminology:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal router:** All OSPF interfaces belong to the same area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backbone router:** An interface at least belongs to the same area 0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autonomous System Boundary Router (ASBR):** This connects autonomous systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designated Router (DR):** Thismaintains the database for the subnet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Area Border Router (ABR):** At least one OSPF interface belongs to area 0
    while another OSPF interface doesn''t'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backup Designated Router (BDR):** This provides redundancy for the designated
    router:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00347.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three OSPF tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Neighbor table**: This gives information about the neighbors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Topology table**: This gives information about the routes on the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routing table**: This is considered forwarding information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following process describes how OSPF works:'
  prefs: []
  type: TYPE_NORMAL
- en: Each OSPF router chooses its Router-ID (IP address for identification) by assigning
    the highest IP to the loopback interface. If it is not the case (logical interface
    is not defined), the highest IP address physical interfaces will be chosen as
    a Router-ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both routers send Hello packets to the multicast address `224.0.0.5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the packets have the same hello interval, dead interval, and area number
    then a neighbor adjacency will be formed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Routers send Database Description packets. The router with the highest Router-ID
    will become the master router and start the database packet exchange.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the routers requests LSA from the other router.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OSPF attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous years, many research has shown that routers with OSPF are open to
    various types of attack. This is a serious problem because OSPF is the most commonly
    used protocol in many autonomous systems, including many enterprises. Let's discover
    some of the attacks against the OSPF protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Disguised LSA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This attack exploits a condition in RFC 2328 to check whether two instances
    of LSA are identical based on three criteria: the sequence number, the checksum
    value, and the age. So, an attacker can advertise a fake LSA using these fields,
    but in the next valid instance, because the router will consider the LSA as a
    duplicated one, it will ignore it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform a disguised LSA attack, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker sends a spoofed LSA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker sends a disguised LSA with the same three fields discussed before
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Router 1 sends a fight-back LSA and they will be received by router 2, but it
    won't update the LSA database, whereas the received LSA is the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Router 2 triggers another fight back
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00348.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: MaxAge LSAs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attackers try to modify the MaxAge of LSAs to poison the route table, flood
    the network with LSAs, and even black hole the network traffic. To defend against
    MaxAge LSAs, make sure that the fight-back trap is available.
  prefs: []
  type: TYPE_NORMAL
- en: Remote false adjacency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During a remote false adjacency attack, the attacker plays the role of a router
    and exploits the fact that routers can successfully complete the adjacency setup.
    This attack can be avoided by enabling TTL security:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00349.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Seq++ attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A seq++ attack is done when an attacker compromises a router by abusing routers
    and sending LSAs fake information and a sequence number higher than the current
    sequence. To defend against this attack, you can use the fight-back traps.
  prefs: []
  type: TYPE_NORMAL
- en: Persistent poisoning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Persistent poisoning is mentioned in CVE 2013-0149, and forces the routers to
    calculate the routes based on the fake LSAs.
  prefs: []
  type: TYPE_NORMAL
- en: Defenses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many other defense mechanisms to avoid OSPF attacks; the following
    are some of the defense layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transit-Only Networks**: These configure routers to suppress the suffixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Using hidden interfaces**: These are sometimes called unnumbered interfaces:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Enable TTL Security**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Enable MD5 crypto support**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Anti-spoofing-Ingress Filtering**: This blocks malicious traffic by ensuring
    that the traffic is coming from trusted sources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '** Link State Database Checksums**:This makes sure that the OSPF LSDB is consistent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interior Gateway Routing Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Interior Gateway Routing Protocol** (**IGRP**) is a classful distance
    vector routing protocol. Like RIP, the routing decisions in IGRP are based on
    the Bellman-Ford algorithm, using the hop counts. It is not an open standard.
    It is a Cisco proprietary. The maximum supported hops are 255 with a default value
    of 100\. So, it is more scalable for large companies, more than RIP. Also, it
    is easy to configure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: IGRP sends information every 90 seconds periodically in the same autonomous
    system. This timer is named the **update timer**. If an update takes more than
    270 seconds (invalid timer), then it will be invalid, and it will be removed from
    routing table if it surpasses 360 seconds (flush timer). IGRP does not support
    authentication, and its packets can be spoofed.
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced Interior Gateway Routing Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Enhanced Interior Gateway Routing Protocol** (**EIGRP**) is an enhanced
    version of IGRP. It uses the dual algorithm. Routers use neighbors using **Hello**
    requests, while there are five message types (hello, update, ack, query, and reply).
    The following diagram shows how EIGRP works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00350.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'EIGRP maintains the following three tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Neighbor table**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Topology table**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routing table**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EIGRP calculates the cost to choose the routes using the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*metric = bandwidth + delay*'
  prefs: []
  type: TYPE_NORMAL
- en: Although IGRP does not support authentication, EIGRP has added two major security
    features—plaintext and MD5 authentication forms. If the MD5 authentication is
    not set, the packets can be sniffed easily.
  prefs: []
  type: TYPE_NORMAL
- en: Border Gateway Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Border Gateway Protocol** (**BGP**) is basically how the internet works. It's
    a highly scalable routing protocol, and its current version is based on RFC 4271\.
    It stores information in a **Routing Information Base** (**RIB**).
  prefs: []
  type: TYPE_NORMAL
- en: 'If your company needs to connect to an internet service provider, it can use
    one of many possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Single homed connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dual homed connection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00351.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also connect to multiple service providers using many types of connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single multi-homed**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00352.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Dual multi-homed**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00353.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: BGP attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'BGP is a target of many attacks. Let''s discover some BGP threats:'
  prefs: []
  type: TYPE_NORMAL
- en: '**False updates and prefix hijacking**: This attack, sometimes named BGP hijacking,
    occurs when an autonomous system routes traffic to a hijacked autonomous system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**De-aggregation**: During this attack, an address block is divided into more
    specific blocks and prefixes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contradictory advertisements**: During this attack, the attacker redirects
    the traffic to another autonomous system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instability**: This attack occurs when BGP sessions are repeatedly time out'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting routers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, we saw how to exploit routing protocols. Now it is time to learn
    how to exploit modern routers.
  prefs: []
  type: TYPE_NORMAL
- en: Router components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like every major networking device, a router is composed of many internal components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CPU**: Executes system operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAM**: Used to store instructions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ROM**: Contains boot instructions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flash**: Contains the IOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NVRAM**: Contains the startup configuration file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00354.gif)'
  prefs: []
  type: TYPE_IMG
- en: Router bootup process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To boot up, every major router goes through multiple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the router performs a POST.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It loads the bootstrap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It locates and loads the operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can choose between entering setup mode or loading the configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00355.gif)'
  prefs: []
  type: TYPE_IMG
- en: Router attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You learned about routing protocol threats, and now we will discuss attacks
    against routers; even the hardware faces many challenging threats:'
  prefs: []
  type: TYPE_NORMAL
- en: DDoS attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Man-in-the-middle attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Router firmware attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The router exploitation framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Routersploit framework is an open source tool to exploit router-embedded
    systems. You can clone it from this link using the `git clone` command as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Before using it, you need to install some dependencies, such as `python-pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00356.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clone the repository from GitHub to your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00357.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After cloning it, you can run the script by running it in your CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00358.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check the scanners, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00359.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To check credentials, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00360.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a complete guide to learning how to exploit routing protocols
    and routers. It showed real-world attacking techniques after giving you an insight
    into the basics and fundamentals of routing protocols. By reading this chapter,
    you have gained the required knowledge to perform layer 2 and layer 3 attacks
    and have the right mindset and tools to secure modern company networks. In the
    next chapter, we will expand our knowledge. Also, you will learn how to secure
    IoT projects.
  prefs: []
  type: TYPE_NORMAL
