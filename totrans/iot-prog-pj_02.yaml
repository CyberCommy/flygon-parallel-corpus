- en: Writing Python Programs Using Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start writing python programs with Raspberry Pi. Python
    is the official programming language for Raspberry Pi and is represented by the
    Pi in the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python tools for Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Python command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a simple Python program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python comes pre-installed on Raspbian in two versions, versions 2.7.14 and
    3.6.5 (as of this writing) representing Python 2 and Python 3, respectively. The
    differences between the two versions are beyond the scope of this book. We will
    use Python 3 in this book unless otherwise stated.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will become comfortable with Python development on Raspberry
    Pi. You may be used to development tools or **Integrated Development Environments**
    (**IDEs**) on other systems such as Windows, macOS, and Linux. In this chapter,
    we will get our feet wet in terms of using Raspberry Pi as a development machine.
    We will start off slowly with Python as we get our development juices flowing.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python tools for Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are pre-installed tools that we may use for Python development
    on Raspberry Pi using Raspbian. This list is by no means the only tools that we
    may use for development.
  prefs: []
  type: TYPE_NORMAL
- en: The Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As Python comes pre-installed with Raspbian, an easy way to launch it is to
    use the Terminal. As we can see in the following screenshot, the Python interpreter
    can be accessed by simply typing `python` as the command prompt in a Terminal
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4b9ce0a3-278d-47ca-9aca-63a575d7e3e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We may test it out by running the simplest of programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the Python version in the line after the command, 2.7.13\. The `python`
    command in Raspbian is tied to Python 2\. In order to access Python 3, we must
    type the `python3` command in a Terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6dde2f30-1b0d-4210-8bff-83f5fbea886a.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrated Development and Learning Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Integrated Development and Learning Environment** (**IDLE**) has been
    the default IDE for Python since version 1.5.2\. It is written in Python itself
    using the Tkinter GUI toolkit and is intended to be a simple IDE for beginners:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/93dcbe0c-8693-4603-9673-9117625b9595.png)'
  prefs: []
  type: TYPE_IMG
- en: IDLE features a multi-window text editor with auto-completion, syntax highlighting,
    and smart indent. IDLE should be familiar to anyone that has used Python. There
    are two versions of IDLE in Raspbian, one for Python 2 and the other for Python
    3\. Both programs are accessed from Application Menu | Programming.
  prefs: []
  type: TYPE_NORMAL
- en: Thonny
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thonny is an IDE that comes packaged with Raspbian. With Thonny, we may evaluate
    expressions by using the `debug` function. Thonny is also available for macOS
    and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load Thonny, go to Application Menu | Programming | Thonny:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/787c8d31-e199-4c97-9f77-c2e83215cc25.png)'
  prefs: []
  type: TYPE_IMG
- en: Above is the default screen for Thonny. Panels to view variables in your program,
    as well as a panel to view the filesystem, are toggled on and off from the View
    menu. Thonny's compact structure makes it ideal for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: We will be learning a bit more about Thonny as we go through the rest of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Python command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start doing some coding. Whenever I start using a new operating system
    for development, I like to go through some basics just to get my mind back into
    it (I'm speaking particularly to those of us who are all too familiar with coding
    into the wee hours of the morning).
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to access Python is from the Terminal. We will run a simple
    program to get started. Load the Terminal from the main toolbar and type `python3`
    at the prompt. Type the following line and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This line loads the `datetime` object from the `datetime` module into our instance
    of Python. Next type the following and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the current date and time printed to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dd45f391-4029-4246-a3f4-808a3d876518.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try another example. Type the following into the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/1a8ba55f-024a-41ef-a400-76b6e612d81c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a library that''s used to tell programming jokes. To have a joke printed
    out, type the following and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/59f16162-12c6-497a-8ccb-c9219b2aae76.png)'
  prefs: []
  type: TYPE_IMG
- en: OK, so this may not be your cup of tea (or coffee, for the Java programmers
    out there). However, this example demonstrates how easy it is to import a Python module
    and utilize it.
  prefs: []
  type: TYPE_NORMAL
- en: If you receive an `ImportError`, it is because `pyjokes` did not come pre-installed
    with your version of the OS. Similar to the following example, typing `sudo pip3
    install pyjokes` will install `pyjokes` onto your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: What these Python modules have in common is their availability for our use.
    We simply need to import them directly into the shell in order to use them, as
    they are pre-installed with our Raspbian operating system. However, what about
    libraries that are not installed?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try an example. In the Python shell, type the following and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0ef83036-57f0-4bf2-a46a-233b37f9ea3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the `weather` package is not installed on our Raspberry Pi we get an
    error when trying to import. In order to install the package, we use the Python
    command-line utility `pip`, or in our case, `pip3` for Python 3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a new Terminal (make sure that you''re in a Terminal session and not
    a Python shell). Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Hit *Enter. *You will see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6f8c804a-290a-4a93-9d6d-37b67658a21e.png)'
  prefs: []
  type: TYPE_IMG
- en: After the process is finished, we will have the `weather-api` package installed
    on our Raspberry Pi. This package will allow us to access weather information
    from Yahoo! Weather.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s try out a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `python3` and hit *Enter*. You should now be back in the Python shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'What we have done is imported `Weather` and `Unit` from `weather`. Type the
    following and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This instantiates a `weather` object called `weather`. Now, let''s make use
    of this object. Type the following and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a variable named `lookup` that''s been created with the code `4118`,
    that corresponds to the city Toronto, Canada. Type the following and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a variable called `condition` that contains the current weather
    information for the city of Toronto, Canada via the `lookup` variable. To view
    this information, type the following and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a description of the weather conditions in Toronto, Canada.
    When I ran it, the following was returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've seen that writing Python code on the Raspberry Pi is just as
    easy as writing it on other operating systems, let's take it a step further and
    write a simple program. We will use Thonny for this.
  prefs: []
  type: TYPE_NORMAL
- en: A Python module is a single Python file containing code that may be imported
    for use. A Python package is a collection of Python modules.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a simple Python program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will write a simple Python program that contains a class. To facilitate this,
    we will use Thonny, a Python IDE that comes pre-installed with Raspbian and has
    excellent debug and variable introspection functionalities. You will find that
    its ease of use makes it ideal for the development of our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will begin our program by creating a class. A class may be seen as a template
    for creating objects. A class contains methods and variables. To create a class
    in Python with Thonny, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load Thonny through Application Menu | Programming | Thonny. Select New from
    the top left and type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we've created a class called `CurrentWeather` that will hold
    weather conditions for whichever city we instantiated the class for. We are using
    a class as it will allow us to keep our code clean and prepare us for using outside
    classes later on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now create an object from our `CurrentWeather` class. We will use `London`
    as our city:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Run Current Script button (a green circle with a white arrow) in
    the top menu to load our code into the Python interpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command line of the Thonny shell, type the following and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We have just created an object in our code called `londonWeather` from our `CurrentWeather` class.
    By passing `'London'` to the constructor (`init`), we set our new object to only
    send weather information for the city of `London`. This is done through the class
    attribute city (`self.city`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following at the shell command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You should get the answer `'12'` on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the weather conditions for `London`, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You should see `'mostly cloudy'` on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the wind speed, type the following and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You should get `8 km/h NW` on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: Our `CurrentWeather` class simulates data coming from a web service for weather
    data. The actual data in our class is stored in the `weather_data` variable.
  prefs: []
  type: TYPE_NORMAL
- en: In future code, whenever possible, we will wrap calls to web services in classes
    in order to keep things organized and make the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: Using the object inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s do a little analysis of our code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the View menu, select Object inspector and Variables. You should see the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/28a96595-39e3-41ba-bfec-573038792cfd.png)'
  prefs: []
  type: TYPE_IMG
- en: Highlight the `londonWeather` variable under the Variables tab. We can see that
    `londonWeather` is an object of type `CurrentWeather`. In the Object inspector, we
    can also see that the attribute city is set to `'London'`. This type of variable
    inspection is invaluable in troubleshooting code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing your class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is very important to test your code as you write it so that you can catch
    errors early on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function to the `CurrentWeather` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following to the bottom of `CurrentWeather.py`. The first line should
    have the same indentation as the class definition as this function is not part
    of the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code by clicking on the Run current script button. You should see the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `if __name__ == "__main__":` function allows us to test the class in the
    file directly as the `if` statement will only be true if the file is run directly.
    In other words, imports of `CurrentWeather.py` will not execute the code following
    the `if` statement. We will explore this method more as we work our way through
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Making the code flexible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code that is more generic is more flexible. The following are two examples of
    how we can make the code less specific.
  prefs: []
  type: TYPE_NORMAL
- en: Example one
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wind_dir_str_len` variable is used to determine the length of the string
    for wind direction. For example, a direction of `S` would only use one character,
    whereas NW would use two. This is done so that an extra space is not included
    in our output when the direction is represented by only one character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: By looking for a space using `[-2:-1]`, we can determine the length of this
    string and change it to `1` if there is a space (as we are parsing back two characters
    from the end of the string).
  prefs: []
  type: TYPE_NORMAL
- en: Example two
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By adding the `getCity` method to our class, we are able to create classes
    with more generic names like `currentWeather` as opposed to `torontoWeather`.
    This makes it easy to reuse our code. We can demonstrate this by changing the
    following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We will change it to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the code again by clicking on the Run button, we get different values
    for all the conditions in the sentence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this chapter by discussing the various tools that are available for
    Python development in Raspbian. The quickest and easiest way to run Python is
    from the Terminal window. Since Python comes pre-installed in Raspbian, the `python` command
    in the Terminal prompt loads Python (Python 2, in this case). There is no need
    to set environment variables in order to have the command find the program. Python
    3 is run from the Terminal by typing `python3`.
  prefs: []
  type: TYPE_NORMAL
- en: We also took a brief look at IDLE, the default IDE for Python development. IDLE
    stands for Integrated Development and Learning Environment and is an excellent
    tool for beginners to use when learning Python.
  prefs: []
  type: TYPE_NORMAL
- en: Thonny is another Python IDE that comes pre-installed with Raspbian. Thonny
    has excellent debug and variable introspection functionalities. It too is designed
    for beginning Python developers, however, its ease of use and object inspector
    make it ideal for the development of our projects. We will be using Thonny more
    as we progress through the book.
  prefs: []
  type: TYPE_NORMAL
- en: We then jumped right into programming in order to get our development juices
    flowing. We started out with simple expressions using the Terminal and concluded
    with a weather data example designed to emulate objects that are used to call
    web services.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](c4822610-2d5b-4b3a-8b29-5789ae0e7665.xhtml), *Using the GPIO
    to Connect to the Outside World*, we will jump right into the most powerful feature
    of programming on Raspberry Pi, the GPIO. The GPIO allows us to interact with
    the real world through the use of devices connected to this port on Raspberry
    Pi. GPIO programming will take our Python skills to a whole new level.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which operating systems is Thonny available for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we enter Python 2 from the Terminal command line?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which tool in Thonny do we use to view what is inside an object?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give two reasons as to why we are using an object in our weather example code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of adding a method called `getCity` to the `CurrentWeather`
    class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What language is IDLE written in?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two steps taken in order to print the current date and time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our code, how did we compensate for wind speed directions that are represented
    by only one letter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `if __name__ =="__main__"` statement do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does IDLE stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Python 3 - Object Oriented Programming* by Dusty Phillips, Packt Publishing.'
  prefs: []
  type: TYPE_NORMAL
