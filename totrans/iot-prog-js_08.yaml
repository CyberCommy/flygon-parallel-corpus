- en: Chapter 8. Monitoring and Controlling Your Devices from a Smart Phone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have seen projects that are being controlled from web
    interfaces. Now in this chapter, we will see how to control your Arduino and Raspberry
    Pi from a native application in Android, using platforms in order to create apps
    to control and monitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will see different projects and applications using Android
    tools, the topics that will be covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling a relay from a smart phone using APP Inventor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading JSON response in Android Studio using Ethernet shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling a DC motor from an Android application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling outputs from Android using your Raspberry Pi Zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling outputs with Raspberry Pi via Bluetooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling a relay from a smart phone using APP Inventor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to create an Android application using **APP
    Inventor** to control a relay connected to the Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hardware required for the project are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Relay module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arduino UNO board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethernet shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some cables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Software required for the project are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Software Arduino IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need a Gmail account activated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Inventor for Android is an open source web application originally provided
    by Google, and now maintained by the Massachusetts Institute of Technology (MIT).
    It allows newcomers to computer programming to create software applications for
    the Android operating system (OS). It uses a graphical interface, very similar
    to Scratch and the StarLogo TNG user interface, which allows users to drag-and-drop
    visual objects to create an application that can run on Android devices. In creating
    App Inventor, Google drew upon significant prior research in educational computing,
    as well as work done within Google on online development environments.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to install any software for APP inventor to execute in your computer;
    you just need your Gmail account to access the APP inventor interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter APP Inventor you just need to go to: [http://appinventor.mit.edu/explore/](http://appinventor.mit.edu/explore/).'
  prefs: []
  type: TYPE_NORMAL
- en: Go to create apps to start designing the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to have an account with Gmail; we need to create the file like
    we see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first application](graphics/B05170_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to menu **Projects** and **Start New Project**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first application](graphics/B05170_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Write the name of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first application](graphics/B05170_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we write the name of our project as **aREST**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first application](graphics/B05170_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On pressing **OK**, we will see the project created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first application](graphics/B05170_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Designing the interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it''s time to see how to create the interface of the application, after
    we create the project we click on the name of the project, and we will then see
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the interface](graphics/B05170_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the user interface that we have on the left-hand side (you can see all the
    objects), to move an object to the main screen you just drag **Web Viewer** and
    **Button**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the interface](graphics/B05170_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, we can see the interface of the app that we will
    use to control our Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating APP Inventor with Arduino ethernet shield
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will see how to communicate the application with Arduino via Ethernet
    networking.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the properties of the **Web Viewer** control, we will see the home URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Communicating APP Inventor with Arduino ethernet shield](graphics/B05170_08_08a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In both controls we have the URL of our Arduino Ethernet shield, we will make
    a request using the `RESTful` services, and we will send the following requests
    from the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://192.168.1.110/digital/7/1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://192.168.1.110/digital/7/0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code for APP Inventor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The blocks editor in the original version ran in a separate Java process, using
    the `Open Blocks Java` library for creating visual blocks programming languages
    and programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the code for APP inventor, when we click the buttons we call the web
    service, to do that you just need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the screen interface that says **Blocks**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag the `When...Do` block one per button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the block that you just dragged before, put the `Call...WebViewer.GoToUrl`
    block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the URL of the block, put the `WebViewer.HomeUrl` block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To close the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `When...Button.Click Do` block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And inside the block put the close application block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Code for APP Inventor](graphics/B05170_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will have the following results when we open a web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code for APP Inventor](graphics/B05170_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the application running on a mobile phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code for APP Inventor](graphics/B05170_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows the final results with the connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Code for APP Inventor](graphics/B05170_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reading JSON response in Android Studio using ethernet shield
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to read responses reading from the Arduino
    board and reading in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we continue with the next part, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instal the IDE of Android Studio,which can be obtained from: [https://developer.android.com/studio/index.html?hl=es-419](https://developer.android.com/studio/index.html?hl=es-419)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the latest SDK for Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we will create a project in Android Studio, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We then select the version of the API that we want to use and click the **Next**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then select a **Blank Activity** and click on the **Next** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type the name of your Activity and the Layout, and then click the **Finish**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading JSON response in Android Studio using ethernet shield](graphics/B05170_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Android application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see the android application. In your folder, open the
    file of the project about Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have here the XML code generated in the code of the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Java class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we create the project, some class are generated automatically, as we will
    see in the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name of the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Main class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this part of the code from the android application, we request for the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the objects that will be included in the main activity, in this case
    it is the `mWebView` control, it is defined in the main activity of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Permission of the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to give permission to the application to execute networking permissions,
    it''s necessary that we add the following line in the Android Manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When the application is debugged and installed on the device, we will see the
    following results on our screen, displaying the value of the `temperature`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Permission of the application](graphics/B05170_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The value of the `humidity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Permission of the application](graphics/B05170_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling a DC motor using  an Android Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will have an application to link our smart phone with the
    Bluetooth of the phone, it''s called **Amarino** and you can get it from: [http://www.amarino-toolkit.net/index.php/home.html](http://www.amarino-toolkit.net/index.php/home.html).
    We will also see how to control a DC motor from an Android application, let''s
    dive into it!'
  prefs: []
  type: TYPE_NORMAL
- en: Hardware requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following diagram, we see the following circuit (L293D) is used to control
    the speed and the turning of the motor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/B05170_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following figure, we have the final connections of the circuit to the
    Arduino board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/B05170_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final interface is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/B05170_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final results are shown in the following image with the connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/B05170_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling outputs from android using your Raspberry Pi Zero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to control our outputs connected to the Raspberry
    Pi, using the  `control.js` script running in the `Node.js` server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The request that we need to control over the LED output using the android application
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://192.168.1.111:8099/ledon`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://192.168.1.111:8099/ledoff`![Controlling outputs from android using
    your Raspberry Pi Zero](graphics/B05170_08_23.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The interface created in APP Inventor will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling outputs from android using your Raspberry Pi Zero](graphics/B05170_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final circuit connections would look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling outputs from android using your Raspberry Pi Zero](graphics/B05170_08_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling outputs with Raspberry Pi via Bluetooth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Things go a different route as soon as you’re trying to communicate with other
    electronic gadgets that uses Bluetooth modules connected to the serial port of
    the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: These modules are very cheap to buy, the actual module is the green board that
    sits on the breakout board in my model. The pure HC-05 will only work on *3.3V*
    levels, not with *5V-TTL*-levels. So one would need level shifters (again).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will communicate the Raspberry Pi Zero to the Bluetooth
    module, and connect the pins **TX** and **RX** of the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to configure the file of the system to make some changes in
    order to activate the communication of the Raspberry Pi Zero TX and RX:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling outputs with Raspberry Pi via Bluetooth](graphics/B05170_08_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling lights from an Android Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to download the Bluetooth Terminal, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling lights from an Android Application](graphics/B05170_08_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the results of sending the numbers 1, 2, 3,
    4, 5, and 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling lights from an Android Application](graphics/B05170_08_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows the final part of the project and the connections
    with the HC05 module and the Raspberry Pi Zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling lights from an Android Application](graphics/B05170_08_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to control your Arduino and Raspberry Pi Zero
    from a smartphone using Android Studio and APP inventor, via Bluetooth and Ethernet
    communication. We also looked at several projects such as controlling a motor,
    controlling a relay module, and reading humidity and temperature. For future projects
    you can now control and monitor anything you want in any area of the application
    you want.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will integrate everything from the previous chapters
    and put it all together to integrate all the knowledge applying all the things.
  prefs: []
  type: TYPE_NORMAL
