- en: Observability and Monitoring on Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the built-in Kubernetes tools and the popular
    third-party monitoring options for your containerized DevOps environment. You
    will learn how to monitor metrics for performance analysis, and also how to monitor
    and manage the real-time cost of Kubernetes resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you should have knowledge of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring in Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring using Amazon CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring using Google Stackdriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring using Azure Monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Kubernetes using Prometheus and Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and performance analysis using Sysdig
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the cost of resources using Kubecost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter assume that you have deployed a functional Kubernetes
    cluster following one of the recommended methods described in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml), *Building
    Production-Ready Kubernetes Clusters*.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes' command-line tool, `kubectl`, will be used for the rest of the recipes
    in this chapter since it's the main command-line interface for running commands
    against Kubernetes clusters. We will also use Helm where Helm charts are available
    to deploy solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring in Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will configure our Kubernetes cluster to get core metrics,
    such as CPU and memory. You will learn how to monitor Kubernetes metrics using
    the built-in Kubernetes tools both in the CLI and on the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured to manage
    the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files in the `chapter8` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The *Monitoring metrics using Kubernetes Dashboard* recipe requires Kubernetes
    Dashboard v2.0.0 or later to function. If you want to add metric functionality
    to the dashboard, make sure that you have Kubernetes Dashboard installed by following
    the instructions in the *Deploying Kubernetes Dashboard* recipe in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),* Building
    Production-Ready Kubernetes Clusters*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make the
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding metrics using Kubernetes Metrics Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring metrics using the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring metrics using Kubernetes Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Node Health
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding metrics using Kubernetes Metrics Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Getting core system metrics such as CPU and memory not only provides useful
    information, but is also required by extended Kubernetes functionality such as
    Horizontal Pod Autoscaling, which we mentioned in [Chapter 7](7b696c2a-de7c-4adc-9ecc-f5bf65c288c5.xhtml),* Scaling
    and Upgrading Applications*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the Metrics Server repository to your client by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy the Metrics Server by applying the manifest in the `metrics-server/deploy/1.8+`
    directory by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command will create the resources required in the `kube-space` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring metrics using the CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As part of the Metrics Server, the Resource Metrics API provides access to
    CPU and memory resource metrics for pods and nodes. Let''s use the Resource Metrics
    API to access the metrics data from the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s display node resource utilization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The command will return utilized CPU and memory on all your Kubernetes nodes.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of ways to use the metrics information. First of all, at
    any given time, usage of both CPU and memory should be below your desired threshold,
    otherwise new nodes need to be added to your cluster to handle services smoothly.
    Balanced utilization is also important, which means that if the percentage of
    memory usage is higher than the average percentage of CPU usage, you may need
    to consider changing your cloud instance type to use better-balanced VM instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Display pod resource utilization in any namespace. In this example, we are
    listing the pods in the `openebs` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The command should return the utilized CPU and memory on all your pods. Kubernetes
    features such as Horizontal Pod Scaler can utilize this information to scale your
    pods.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring metrics using Kubernetes Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Kubernetes Dashboard doesn't display detailed metrics unless Kubernetes
    Metrics Server is installed and the `kubernetes-metrics-scraper` sidecar container
    is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first verify that all the necessary components are running, and then
    we will see how to access the metrics data from Kubernetes Dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `kubernetes-metrics-scraper` pod is running. If not, install
    Kubernetes Dashboard by following the instructions in the *Deploying the Kubernetes
    Dashboard* recipe in [Chapte](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)[r](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)
    [1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)*, Building Production-Ready Kubernetes
    Clusters*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On Kubernetes Dashboard, select Namespaces and click on the Overview menu.
    This view shows pods in that namespace with their CPU and memory utilization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/aa6b9895-ed40-4158-a8d2-1f1658e952a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On Kubernetes Dashboard, select a namespace and click on Pods in the Overview
    menu. This view shows the overall CPU and memory utilization of the workloads
    within the selected namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7dd1d037-341d-490c-b402-32f4cd607cae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Nodes under the Cluster menu. This view shows nodes in the cluster with
    CPU and memory utilization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a7514a43-71a6-4a60-8b0e-ed2a8b3ba896.png)'
  prefs: []
  type: TYPE_IMG
- en: If the requests and limits are set very high, then they can take up more than
    their expected share of the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring node health
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to create a DaemonSet in the Kubernetes cluster
    to monitor node health. The node problem detector will collect node problems from
    daemons and will report them to the API server as NodeCondition and Event:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `/src/chapter8` folder first, inspect the content of the `node-problem-detector.yaml` file
    and create the DaemonSet to run the node problem detector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Get a list of the nodes in the cluster. This command will return both worker
    and master nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Describe a node''s status by replacing the node name in the following command
    with one of your node names and running it. In the output, examine the `Conditions`
    section for error messages. Here''s an example of the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can check for `KernelDeadlock`, `MemoryPressure`, and `DiskPressure`
    conditions by replacing the last part of the command with one of the conditions.
    Here is an example for `KernelDeadlock`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Node Problem Detector can detect unresponsive runtime daemons; hardware
    issues such as bad CPU, memory, or disk; kernel issues including kernel deadlock
    conditions; corrupted filesystems; unresponsive runtime daemons; and also infrastructure
    daemon issues such as NTP service outages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes Metrics Server Design Document: [https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/metrics-server.md](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/metrics-server.md)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and using the monitoring stack in OpenShift Container Platform: [https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html/monitoring/index](https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html/monitoring/index)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Krex, a Kubernetes Resource Explorer: [https://github.com/kris-nova/krex](https://github.com/kris-nova/krex)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will troubleshoot problems related to pods stuck in Pending,
    ImagePullBackOff, or CrashLoopBackOff states. You will learn how to inspect and
    debug pods that are having deployment problems in Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured to manage
    the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make the
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting pods in Pending status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting pods in ImagePullBackOff status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting pods in CrashLoopBackOff status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting pods in Pending status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you deploy applications on Kubernetes, it is inevitable that soon or later
    you will need to get more information on your application. In this recipe, we
    will learn to inspect common pods problem of pods stuck in Pending status:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `/src/chapter8` folder, inspect the content of the `mongo-sc.yaml` file
    and deploy it running the following command. The deployment manifest includes
    MongoDB Statefulset with three replicas, Service and will get stuck in Pending
    state due mistake with a parameter and we will inspect it to find the source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'List the pods by running the following command. You will notice that the status
    is `Pending` for the `mongo-0` pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Get additional information on the pods using the `kubectl describe pod` command
    and look for the `Events` section. In this case, `Warning` is pointing to an unbound
    `PersistentVolumeClaim`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we know that we need to look at the PVC status, thanks to the results
    of the previous step, let''s get the list of PVCs in order to inspect the issue.
    You will see that PVCs are also stuck in the `Pending` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Get additional information on the PVCs using the `kubectl describe pvc` command,
    and look where the events are described. In this case, `Warning` is pointing to
    a missing storage class named `storageclass`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'List the storage classes. You will notice that you don''t have the storage
    class named `storageclass`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now we know that the manifest file we applied in *step 1* used a storage class
    that does not exist. In this case, you can either create the missing storage class
    or edit the manifest to include an existing storage class to fix the issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create the missing storage class from an existing default storage class
    like shown in the example below `gp2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'List the pods by running the following command. You will notice that status
    is now `Running` for all pods that were previously `Pending` in *step 2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You have successfully learned how to inspect why a pod is pending and fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting pods in ImagePullBackOff status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes your manifest files may have a typo in the image name, or the image
    location may have changed. As a result, when you deploy the application, the container
    image will not be found and the deployment will get stuck. In this recipe, we
    will learn how to inspect the common problem of pods becoming stuck in `ImagePullBackOff`
    status:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `/src/chapter8` folder, inspect the contents of the `mongo-image.yaml` file
    and deploy it by running the following command. The deployment manifest includes
    MongoDB Statefulset with three replicas, Service and will get stuck in ImagePullBackOff state
    due to typo in the container image name and we will inspect it to find the source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'List the pods by running the following command. You will notice that the status
    of the `mongo-0` pod is `ImagePullBackOff`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Get additional information on the pods using the `kubectl describe pod` command
    and look for the `Events` section. In this case, `Warning` is pointing to a failure
    to pull the `mongi` image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we know that we need to confirm the container image name. The correct name
    is supposed to be `mongo`. Let''s edit the manifest file, `mongo-image.yaml`,
    and change the image name to `mongo` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete and redeploy the resource by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'List the pods by running the following command. You will notice that the status
    is now `Running` for all pods that were previously in `ImagePullBackOff` status
    in *s**tep 2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You have successfully learned to inspect a pod with a status of `ImagePullBackOff`
    and troubleshoot it.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting pods in CrashLoopBackOff status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inspecting pods in `CrashLoopBackOff` status is fundamentally similar to inspecting
    Pending pods, but might also require a bit more knowledge of the container workload
    you are creating. `CrashLoopBackOff` occurs when the application inside the container
    keeps crashing, the parameters of the pod are configured incorrectly, a liveness
    probe failed, or an error occurred when deploying on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to inspect the common problem of pods becoming
    stuck in `CrashLoopBackOff` status:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `/src/chapter8` folder, inspect the contents of the `mongo-config.yaml` file
    and deploy it running the following command. The deployment manifest includes
    a MongoDB statefulset with three replicas, Service and will get stuck in CrashLoopBackOff state
    due mistake with a missing configuration file and we will inspect it to find the
    source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'List the pods by running the following command. You will notice that the status
    is `CrashLoopBackOff` or `Error` for the `mongo-0` pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Get additional information on the pods using the `kubectl describe pod` command
    and look for the `Events` section. In this case, the `Warning` shows that the
    container has restarted, but it is not pointing to any useful information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When Events from the pods are not useful, you can use the `kubectl logs` command
    to get additional information from the pod. Check the messages in the pod''s logs
    using the following command. The log message is pointing to a missing file; further
    inspection of the manifest is needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Inspect and have a closer look at the application manifest file, `mongo-config.yaml`,
    and you will see that the environmental variable `MYFILE` is missing in this case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To fix this issue, you can add a `ConfigMap` to your deployment. Edit the `mongo-config.yaml` file
    and add the missing file by adding the `MYFILE` parameter with a `ConfigMap` resource
    to the beginning of the file similar to following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete and redeploy the resource by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: List the pods by running the following command. You will notice that the status
    is now `Running` for all pods that were previously in CrashLoopBackOff status
    in step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You have successfully learned how to inspect a pod's CrashLoopBackOff issue
    and fix it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debugging init containers: [https://kubernetes.io/docs/tasks/debug-application-cluster/debug-init-containers/](https://kubernetes.io/docs/tasks/debug-application-cluster/debug-init-containers/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging pods and ReplicationControllers [https://kubernetes.io/docs/tasks/debug-application-cluster/debug-pod-replication-controller/](https://kubernetes.io/docs/tasks/debug-application-cluster/debug-pod-replication-controller/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a statefulset: [https://kubernetes.io/docs/tasks/debug-application-cluster/debug-stateful-set/](https://kubernetes.io/docs/tasks/debug-application-cluster/debug-stateful-set/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the reason for pod failure: [https://kubernetes.io/docs/tasks/debug-application-cluster/determine-reason-pod-failure/](https://kubernetes.io/docs/tasks/debug-application-cluster/determine-reason-pod-failure/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squash, a debugger for microservices: [https://github.com/solo-io/squash](https://github.com/solo-io/squash)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring using Amazon CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Amazon CloudWatch Container Insights to monitor,
    isolate, and diagnose your containerized applications and microservices environments.
    As a DevOps or Systems Engineer, you will learn how to use Amazon ECS CloudWatch
    metrics to monitor service health status and current alarms using automated dashboards
    that summarize the performance and health of your Amazon EKS clusters by pod,
    node, namespace, and services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use manifest
    files in the `chapter8` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have an Amazon EKS Kubernetes cluster ready and `kubectl` configured
    to manage the cluster resources. If you don't already have one you can follow
    the instructions in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml), *Building
    Production-Ready Kubernetes Clusters*, in the *Configuring a Kubernetes cluster
    on Amazon Web Services* section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make the
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling  Webhook authorization mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Container Insights Agents for Amazon EKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing Container Insights metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Webhook authorization mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have a Kubernetes cluster deployed using the `kops` option running on
    AWS EC2 instances instead of using Amazon EKS, your kubelet needs to have Webhook
    authorization mode enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable `webhook` authorization mode using the two following flags. The first
    flag allows a ServiceAccount token to be used to authenticate against the kubelet. The
    second flag that allows the kubelet to perform an RBAC request and decide if the
    requesting resource, Amazon CloudWatch in this case, is allowed to access a resource
    endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You also need to add the necessary policy to the IAM role for your Kubernetes
    worker nodes. Open the Amazon EC2 console at [https://console.aws.amazon.com/ec2/](https://console.aws.amazon.com/ec2/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under Resources, click on Running Instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1cacb071-9928-4b6f-b6fc-952920da2a89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select one of the worker node instances from the list of and choose the IAM
    role on the Description tab. In our example, eksctl-adorable-rainbow-157155665-NodeInstanceRole-MOT7WBCOOOHE
    is the IAM role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/74adf21c-9ea7-4bed-9207-f2f8506cfe99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Permissions tab, click on the Attach policies button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/264d1165-f3c8-4354-a85a-f240d6d6da84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the search box, type `CloudWatchAgentServerPolicy` and select the policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/34d276bc-65d1-4a11-9067-58a07d98e4e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Attach Policy button to attach the policy to your IAM role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/72c1f9fc-5738-488a-89b1-926b8ac65dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you have successfully enabled Webhook authorization mode and added the required policies
    to the IAM role.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Container Insights Agents for Amazon EKS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we will enable CloudWatch agents to collect cluster metrics
    from our EKS Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a namespace called `amazon-cloudwatch` on your cluster using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Service account for the CloudWatch agent in the namespace `amazon-cloudwatch`
    you have created in *step 1.* The following command will also create `cloudwatch-agent-role`
    ClusterRole and ClusterRoleBinding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the name of your EKS cluster using the `eksctl` command or from the Amazon
    Container Services dashboard. Here, we will use `eksctl` to get the cluster name.
    In our example, the cluster name is `adorable-rainbow-1571556654`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a ConfigMap for the CloudWatch agent. Before you run the following command,
    replace `"cluster_name": "adorable-rainbow-1571556654"` with the name of your
    cluster from *step 3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy the CloudWatch agent as a DaemonSet. The preceding command will use
    StatsD, a network daemon that listens for statistics, such as counters and timers,
    sent over UDP or TCP and sends aggregates to CloudWatch, and also pluggable backend
    services if they''re available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that CloudWatch agent pods are created by running the following command.
    Since agents run as DaemonSets, you should be able to see one pod per worker node
    listed. In our example, we have two worker nodes and two agent pods running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: When complete, the CloudWatch agent will start sending performance log events
    to the CloudWatch Container Insights service.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Container Insights metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to use CloudWatch to monitor node and pod
    metrics in our Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the CloudWatch console at [https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8591ca4c-f964-4ece-8072-b6fc04769301.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the down arrow button next to the Overview option and choose Container
    Insights from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6de4bede-d420-4133-b405-c8afe47b9d67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the EKS node health and statistics, in the top-left corner, switch
    to EKS nodes. Graphs on the new view will show resource utilization, cluster failures,
    and the number of nodes in a historical view similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e0d639f6-1f3b-49f3-b60f-7de5cac9248c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the container performance statistics, in the top-left corner, switch
    to EKS pods. Graphs on the new view will show the total resource utilization of
    pods and list of pods with their individual CPU and memory consumption percentages
    similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/424be416-0fbf-4206-bdf2-3c28653322d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the detailed logs or AWS X-Ray traces of any resource, select the resource
    name from the list and click on the Actions button. From the drop-down menu, you
    can choose logs that you would like to review. After you select, logs will open
    in a new window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c0cd7c15-5b63-4291-bd71-20a96ea33b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you have learned how to monitor node and pod metrics in your Kubernetes
    cluster using Container Insights.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Container Insights [https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContainerInsights.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContainerInsights.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CloudWatch Anomaly Detection [https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of the metrics collected by Container Insights: [https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics-EKS.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics-EKS.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring using Google Stackdriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Google Stackdriver Kubernetes Engine Monitoring
    to monitor, isolate, and diagnose your containerized applications and microservices
    environments. You will learn how to use Stackdriver Kubernetes Engine Monitoring
    to aggregate logs, events, and metrics from your Kubernetes environment on **Google
    Kubernetes Engine** (**GKE**) to help you understand your application's behavior
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have a GKE cluster ready and `kubectl` configured to manage the
    cluster resources. If you don't already have one, you can follow the instructions
    in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),* Building Production-Ready
    Kubernetes Clusters*, in the *Configuring a Kubernetes cluster on Google Cloud
    Platform* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make the
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Stackdriver Kubernetes Engine Monitoring support for GKE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a workspace on Stackdriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring GKE metrics using Stackdriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Stackdriver Kubernetes Engine Monitoring support for GKE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installing Stackdriver monitoring support enables you to easily monitor GKE
    clusters, debug logs, and analyze your cluster performance using advanced profiling
    and tracing capabilities. In this recipe, we will enable Stackdriver Kubernetes
    Engine Monitoring support to collect cluster metrics from our GKE cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Google Kubernetes Engine Console at [https://console.cloud.google.com/kubernetes](https://console.cloud.google.com/kubernetes).
    On this console, you will see the list of your GKE clusters. In our example, we
    have only one cluster, and it is called k8s-devops-cookbook-1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c30d840b-0424-421d-aa84-182e82ef6d5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the little pen-shaped Edit icon next to your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/14e028fa-1b95-41c2-9cf4-383bf033a67b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the cluster configuration page, make sure that Legacy Stackdriver Logging
    and Legacy Stackdriver Monitoring are Disabled and the Stackdriver Kubernetes
    Engine Monitoring option is set to Enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/775f7514-c629-4e0a-bcb6-a38388106a25.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Save button to apply changes to your cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring a workspace on Stackdriver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Stackdriver Monitoring helps you to gain deeper insights into your public cloud.
    Stackdriver''s monitoring capabilities include monitoring, logging, tracing, error
    reporting, and alerting to collect performance and diagnostics data of your public
    cloud service. Kubernetes monitoring is a small part of the complete solution.
    In this recipe, you will learn how to configure the Stackdriver workspace after
    you access it for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Stackdriver Console at [https://app.google.stackdriver.com](https://app.google.stackdriver.com).
    The first time you access the console, you need to add the workspace to the console,
    otherwise you will see an empty dashboard similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9fb46066-4580-4aaa-8251-3eadf2523ffd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Add Workspace button to include your existing workspace. You will
    be asked for your Google Cloud Platform project name. Click on the empty Select
    project field and select your project from the list. In our example, it''s DevOpsCookBook.
    After you select the project, click on the Create Workspace button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/183db9a1-b5fa-4572-97d1-1386f608f675.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Stackdriver also allows you to monitor AWS accounts. For this recipe, we will
    skip this option. Click Skip AWS Setup to move to the next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/23ac9fb9-7880-409d-ae33-afbf822f0207.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Install the Stackdriver Agents window, click on the Continue button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Get Reports by Email window, select the frequency of reports to be emailed.
    Select Weekly reports. Note that you can always select No reports and enable this
    feature later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a8fba332-b774-40ec-908e-00876c324f93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, click on the Launch Monitoring button to access the Stackdriver console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3e254f3f-0a00-49d6-ba23-9e4cba3f96de.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you have configured the Stackdriver workspace to collect diagnostics data
    from your public cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring GKE metrics using Stackdriver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installing Stackdriver monitoring support enables you to easily monitor GKE
    clusters, debug logs, and analyze your cluster performance using advanced profiling
    and tracing capabilities. In this recipe, we will enable Stackdriver Kubernetes
    Engine Monitoring support to collect cluster metrics from our GKE cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After following the *Configuring a workspace on Stackdriver* recipe, open the
    Stackdriver console at [https://app.google.stackdriver.com](https://app.google.stackdriver.com):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b6f26a4c-35ad-4a59-aba0-36c13140c69e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Resources menu, click on the Kubernetes Engine option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/68af781b-54af-4e3d-8f77-8d4e7a9dadbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Kubernetes Engine view will show the list of clusters that are Stackdriver
    Kubernetes Engine Monitoring-enabled. In our example, you can see that we have
    one cluster available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2ac01aa4-5e4d-47bd-a35f-c57c40452dab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Infrastructure tab, click on the expand icon next to the cluster name.
    Stackdriver will expand the list with the individual worker nodes. In the Ready
    column, you can see the number of pods deployed and in a ready state in each node.
    In the CPU Utilization column, the value on the left-hand side shows the total
    available CPUs and the right-hand value shows the current utilization percentage.
    Similarly, in the Memory Utilization column, the value on the left-hand side shows
    the total available memory (GiB), and the right-hand value shows the current utilization
    percentage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/178051c8-51f7-447e-90a6-e7a4d7452c46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the expand icon next to a node name, and the list will expand to display
    the pods deployed on that specific node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1049ab7b-a3cb-425d-a7ed-5db45bd1dbc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on one of the pods on your cluster. Stackdriver will show a detailed
    view of pod metrics, including pod restarts, CPU, memory, storage, and network
    utilization for the pods. In our example, we can see metrics for the Prometheus
    pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/03f65bd5-6cf9-4543-a92f-2e11b2ed5086.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Logs tab to switch to the log summary view. This view will only
    show the most recent logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/77e036ee-938a-41af-9fd7-268da8a01c7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Go to console button to open a detailed log view where you can
    see older logs and use filters to create metrics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1966c05e-4835-490b-9964-6c4b83a88e75.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to use Stackdriver to monitor health, performance metrics,
    and logs for GKE clusters and resources deployed on the GKE clusters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Stackdriver documentation: [https://cloud.google.com/stackdriver/docs/](https://cloud.google.com/stackdriver/docs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Prometheus with Stackdriver Kubernetes Engine Monitoring: [https://cloud.google.com/monitoring/kubernetes-engine/prometheus](https://cloud.google.com/monitoring/kubernetes-engine/prometheus)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stackdriver Prometheus sidecar: [https://github.com/Stackdriver/stackdriver-prometheus-sidecar](https://github.com/Stackdriver/stackdriver-prometheus-sidecar)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A collection of technical articles published on Stackdriver by GCP advocates: [https://medium.com/google-cloud/tagged/stackdriv](https://medium.com/google-cloud/tagged/stackdriver)[er](https://medium.com/google-cloud/tagged/stackdriver)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring using Azure Monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Azure Monitor to monitor, isolate, and diagnose
    your containerized applications and microservices environments. You will learn
    how to use Azure Monitor to aggregate logs, events, and metrics from your Kubernetes
    environment on **Azure Kubernetes Service** (**AKS**) to help you understand your
    application's behavior in production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have an AKS cluster ready and `kubectl` configured to manage the
    cluster resources. If you don't already have one, you can follow the instructions
    in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml), *Building Production-Ready
    Kubernetes Clusters*, in the *Configuring a Kubernetes cluster on Google Cloud
    Platform* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make the
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Azure Monitor support for AKS using the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring AKS performance metrics using Azure Monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing live logs using Azure Monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Azure Monitor support for AKS using the CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enabling Azure Monitor for AKS clusters gives you performance visibility by
    collecting memory and processor metrics from controllers, nodes, and containers
    that are available in Kubernetes through the Kubernetes Metrics API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will enable monitoring from AKS Kubernetes clusters to collect
    metrics and logs through a containerized version of the Log Analytics agent:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have deployed your AKS cluster following the *Provisioning a managed
    Kubernetes Cluster on AKS* recipe in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),
    *Building Production-Ready Kubernetes Clusters*, you can use the following command
    to enable the Azure Monitor for your cluster. Replace the name `AKSCluster` with
    your AKS cluster name, and replace the resource group, `k8sdevopscookbook`, with
    the Azure resource group name you used when you created your cluster before you
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are deploying a new cluster, you can add the `--enable-addons monitoring` parameter to
    the CLI command to enable Azure Monitor functionality for your AKS cluster during
    the cluster creation as follows: **`$ az aks create --resource-group k8sdevopscookbook
    \`**'
  prefs: []
  type: TYPE_NORMAL
- en: '**`--name AKSCluster \`**'
  prefs: []
  type: TYPE_NORMAL
- en: '**`--node-count 3 \`**'
  prefs: []
  type: TYPE_NORMAL
- en: '**`--service-principal <appId> \`**'
  prefs: []
  type: TYPE_NORMAL
- en: '**`--client-secret <password> \`**'
  prefs: []
  type: TYPE_NORMAL
- en: '**`--enable-addons monitoring  \`**'
  prefs: []
  type: TYPE_NORMAL
- en: '**`--generate-ssh-keys`**'
  prefs: []
  type: TYPE_NORMAL
- en: When completed, this command will enable Azure Monitor and logs for your AKS
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring AKS performance metrics using Azure Monitor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Performance metrics of an AKS cluster can be viewed both directly from the
    AKS cluster management dashboard and also via the Azure Monitor dashboard. In
    this recipe, we will monitor AKS performance metrics through Azure Monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After following the *Enabling Azure Monitor support for AKS using the CLI* recipe,
    open the Azure portal at [https://portal.azure.com](https://portal.azure.com) and
    click on the Kubernetes Service button to go to the AKS management dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3e90313c-78a7-42b3-8b63-b8c334e67c8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Kubernetes services view, click on your cluster name. In our example,
    it is AKSCluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fcde7e75-32cc-480f-8135-ea1a3c635655.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Monitor Containers menu to open the Azure Monitor Insights view
    for your AKS cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c6b1e871-02ae-4646-9699-0913fcb0432d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Monitoring information about your AKS cluster is organized into five categories:
    Cluster, Nodes, Controllers, Containers, and Deployments. In this view, on the
    Cluster tab you will be able to see node CPU and memory utilization, AKS node
    count, and active pod count, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a217da74-4918-4284-95eb-00184ecebf4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Nodes tab to switch to the node performance metrics view. By default,
    CPU usage data is displayed for the last 6 hours for the 95th percentile. These
    options can be adjusted using the drop-down menus on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cfd57746-c26c-484e-be08-698d6fa652eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the expand icon next to a node name and a list will expand to display
    the pods and containers inside deployed on that specific node. In this view, CPU
    utilization of every resource and uptime can be viewed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7214bf0f-c795-4278-b34e-42a9f1505a7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to monitor AKS performance metrics through Azure Monitor insights.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing live logs using Azure Monitor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to the performance metrics, Azure Monitor can also help to view
    logs from the AKS cluster resources. In this recipe, we will learn how to access
    the events and logs using Azure Monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can display pod events and live metrics from your cluster, you will
    need to apply `ClusterRoleBinding`. Create a `ClusterRole` by running the following
    command on your AKS cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `ClusterRoleBinding` by running the following command on your AKS
    cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Click on the Monitor Containers menu to open the Azure Monitor insights view
    for your AKS cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the expand icon next to a node name, and a list will expand displaying
    the pods and containers deployed on that specific node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7214bf0f-c795-4278-b34e-42a9f1505a7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on one of the pods in your cluster. Insights will show a detailed view
    of pods metrics on the right-hand panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2e752e4c-bd3d-4615-9d7d-9b9729f976ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the right-hand pane, click on the View live data button. This option will
    expand the view with live events from the pods and live metrics, as shown in the
    following screenshot. Events can be used to troubleshoot the pod problems that
    we discussed in the *Inspecting containers* section of this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/73a98dc7-3ed0-4eb1-9dca-a10f22b81e55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The log and event messages you see depend on what resource type is selected
    in the view. Click on the View in analytics button to switch to the Kubernetes
    event logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/87f51ad2-f794-4613-b1d6-80a76ca2e171.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this view, you will be able to see and filter pod events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/32fd7845-c1bb-4b2a-bec6-123d24d5f853.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This time, click on one of the containers inside a pod. Insights will show
    a detailed view of container information and performance metrics in the right-hand
    panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d3669927-aa96-4e52-9acd-bf799584f3c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the right-hand pane, click on the View in analytics button to switch to
    the View container logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a0e6d41b-54b4-4bfd-afee-78aa85777c4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this view, you will be able to see and filter container logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8b2613e1-6422-47c9-b8a5-867981db4cc5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to use Azure Monitor to monitor health, performance metrics
    and logs for AKS clusters, and resources deployed on the AKS clusters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure Monitor for containers documentation: [https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-overview)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Prometheus with Azure Monitor: [https://azure.microsoft.com/en-us/blog/azure-monitor-for-containers-with-prometheus-now-in-preview/](https://azure.microsoft.com/en-us/blog/azure-monitor-for-containers-with-prometheus-now-in-preview/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Kubernetes using Prometheus and Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will deploy Prometheus and Grafana on our Kubernetes cluster.
    You will learn how to monitor a Kubernetes service with Prometheus and use Grafana
    dashboards to visualize cluster and application metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use manifest
    files in the `chapter8` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured to manage
    the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make the
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Prometheus Operator using Helm charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring metrics using Grafana dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Grafana dashboard to monitor applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Prometheus using Helm charts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Prometheus is a popular open source solution for event monitoring and alerting.
    Prometheus records real-time metrics in a time-series database, and it is one
    of the most popular components of Kubernetes clusters for monitoring. Almost all
    new managed Kubernetes solutions come with Prometheus installed in some way as
    part of the cluster deployment. In this recipe, you will learn how to deploy Prometheus
    on a Kubernetes cluster using Helm charts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the Helm repository. This command will fetch up-to-date charts locally
    from public chart repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy Prometheus Operator in the `monitoring` namespace using the `helm install`
    command. This command will deploy Prometheus along with the Alertmanager, Grafana,
    the node-exporter and kube-state-metrics addon; basically, a bundle of the components
    needed to use Prometheus on a Kubernetes cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the status of the pods deployed in the monitoring namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Now you have Prometheus installed with the bundle of components required to
    operate it on a Kubernetes environment.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring metrics using Grafana dashboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Grafana is an open source analytics and monitoring solution. By default, Grafana
    is used for querying Prometheus. Follow these instructions to expose the included
    Grafana service instance and access it through your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the list of services in the `monitoring` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a port forwarding to access the Grafana UI using the `kubectl port-forward`
    command. This command will forward the local port `8000` to port `3000` of a running
    Grafana pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: As an alternative, you can patch the `prometheus-grafana` service using the
    `kubectl edit svc prometheus-grafana -n monitoring` command and change the service
    type, `ClusterIP`, to `LoadBalancer` to expose the service externally using a
    cloud load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:8000` (or the External IP, if using LoadBalancer) in
    your web browser. You should see the Grafana login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2e980b93-4bf2-4ad2-b6d7-df69e189d97d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Log in using `admin` as the username and `prom-operator` as the password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/35e3b8b9-90a3-49ae-9909-98a5d82de501.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Home button in the upper-left corner of the dashboard to list
    the available built-in dashboards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9a9312e4-26ce-4e7f-8f1c-ffeb80641161.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As an example, select the Nodes dashboard from the list to show Kubernetes
    nodes metrics. In this view, you will see the graphical representation of node
    resources, including CPU, memory, disk, and network utilization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/df28d7ef-d7c6-4aae-b221-a4086743c484.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to navigate through dashboards in Grafana. You can use Grafana
    to visualize Kubernetes metrics and other workload metrics that provide metrics
    for Prometheus by following the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Grafana dashboard to monitor applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Grafana is used to visualize the metrics stored on Prometheus. It offers dynamic
    and reusable dashboards with template variables. In this recipe, we will learn
    how to add a new dashboard from the library of pre-built dashboards to monitor
    an application deployed on Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: Every application has different metrics that are relevant to the continuity
    of the application. First of all, an application needs to expose the metrics to
    Prometheus (additional info on Writing Prometheus exporters is available in the *See
    also* section), and Prometheus must be added as a data source to Grafana. For
    this recipe, we will use the Jenkins we deployed in [Chapter 3](811c24c7-debf-4487-91e9-81db1520c0aa.xhtml), *Building
    CI/CD Pipelines*, in the *Setting up a CI/CD pipeline in Jenkins X* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Home button in the top-left corner of the dashboard and click
    on Find dashboards on Grafana.com:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7be64ba6-bf4a-48a2-9094-9f2e4eae5384.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the search field, type `Jenkins`. You will see a couple of Jenkins-specific
    dashboards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0adfecca-dbdc-4902-9acf-4ee493e9ad49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Jenkins: Performance and health overview and copy the ID to the clipboard.
    At this point, dashboard ID 306 is all you need to add this pre-built dashboard
    to your Grafana instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2b55ebc7-9cb5-4ef1-a636-56ea5a81ad73.png)'
  prefs: []
  type: TYPE_IMG
- en: If the Dashboard is not enabled, follow the instructions in the Overview section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Grafana interface, click on Import dashboard. Paste the dashboard ID
    306 into the Grafana.com Dashboard field. Grafana will automatically detect the
    dashboard and display the details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/691e380e-e9de-4d34-a8c1-d844425b1e51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Prometheus as the data source name and click on Import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/15ac1933-d044-49ff-a2be-ff0d9008a7bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Home button to list the dashboards again, and you will find your
    new dashboard in the most recent dashboards list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cfe18365-2ee8-4595-a167-d0f496ddbca8.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can find a pre-built dashboard on Grafana for the applications
    we have used in previous chapters such as cloud provider service monitoring (AWS,
    GCP, Azure, Alibaba), GitLab CI, Minio, OpenEBS, and many additional Kubernetes
    cluster metrics.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prometheus documentation: [https://prometheus.io/docs/introduction/overview/](https://prometheus.io/docs/introduction/overview/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Writing Prometheus exporters: [https://prometheus.io/docs/instrumenting/writing_exporters/](https://prometheus.io/docs/instrumenting/writing_exporters/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub repository for Prometheus-Operator: [https://github.com/coreos/prometheus-operator](https://github.com/coreos/prometheus-operator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grafana documentation: [https://grafana.com/docs/](https://grafana.com/docs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grafana community dashboards: [https://grafana.com/grafana/dashboards](https://grafana.com/grafana/dashboards)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grafana plugins: [https://grafana.com/grafana/plugins](https://grafana.com/grafana/plugins)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the Jenkins Prometheus plugin: [https://wiki.jenkins.io/display/JENKINS/Prometheus+Plugin](https://wiki.jenkins.io/display/JENKINS/Prometheus+Plugin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Stackdriver as a data source: [https://grafana.com/grafana/plugins/stackdriver](https://grafana.com/grafana/plugins/stackdriver)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Azure Monitor as a data source: [https://grafana.com/grafana/plugins/grafana-azure-monitor-datasource](https://grafana.com/grafana/plugins/grafana-azure-monitor-datasource)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prometheus alternatives:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataDog: [https://www.datadoghq.com](https://www.datadoghq.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Relic: [https://newrelic.com](https://newrelic.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Falcon: [http://open-falcon.org](http://open-falcon.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and performance analysis using Sysdig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Sysdig Monitor to monitor and simplify Kubernetes
    troubleshooting. You will learn how to install Sysdig Monitor and extend Prometheus
    functionality to meet more advanced enterprise needs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All operations mentioned here require a Sysdig account. If you don't have one,
    go to [https://sysdig.com/sign-up/](https://sysdig.com/sign-up/) and create a
    trial or full account.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we need to have a Kubernetes cluster ready and the Kubernetes
    command-line tools `kubectl` and `helm` installed to manage the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make the
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Sysdig agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing application performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Sysdig agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sysdig Monitor is a tool for monitoring and troubleshooting applications available
    as part of the Sysdig Cloud Native Visibility and Security Platform. In this recipe,
    you will learn to deploy Sysdig Monitor and leverage Prometheus metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have your Sysdig Monitor access key ready, go to your Account
    Settings at [https://app.sysdigcloud.com/#/settings/agentInstallation](https://app.sysdigcloud.com/#/settings/agentInstallation)
    and retrieve your access key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/32c5535e-065c-4b79-9b23-f5ea7fbd414f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the Sysdig agent using the Helm chart after replacing `YourAccessKey` in
    the following command with your Sysdig Monitor access key from *step 1*. This
    command will install the Sysdig agent required for Sysdig Monitor and Sysdig Secure
    onto all your Kubernetes worker nodes in your cluster as a DaemonSet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the Sysdig agent is installed, the nodes will be detected by Sysdig Monitor.
    In this view, all the nodes should be detected. In our example, we have four nodes
    detected. Click on the Go to Next Step button to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/de244830-51e2-4271-91a3-a818cb866345.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sysdig Monitor offers deep integration with AWS. If your Kubernetes cluster
    is deployed on AWS, optionally, you can enable the integration by entering your
    AWS Access Key ID and Secret here; otherwise, click on the Skip button to skip
    the AWS integration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2c7877d2-4b1d-4f0f-b201-82fa0b22efd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Let''s Get Started to explore Sysdig Monitor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d6f58dc0-18cf-4693-b538-60c94ad211de.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to deploy Sysdig Monitor and leverage Prometheus metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing application performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Latency, traffic, errors, and saturation are considered Golden Signals by Google
    SRE teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow these instructions to learn how to navigate through the Sysdig
    Monitor interface to find the Golden Signals for your application on Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your Sysdig Cloud-Native Visibility and Security Platform dashboard
    at [https://app.sysdigcloud.com](https://app.sysdigcloud.com):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c7426a65-1d78-4f74-a875-c3cbfc7bd9f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Resources are automatically grouped in the Hosts & Containers group. Click
    on the groups dropdown and select Deployments and pods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b184c906-1d1a-45fb-8193-98f03de12259.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the dashboard and metrics dropdown and select the HTTP dashboard under
    Default Dashboards | Applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c5eb72b9-1df6-4418-b18c-71092bc0c82d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sysdig can identify and decode application protocols such as HTTP and give
    you detailed metrics. In this view, you can see the number of requests, the most
    requested URLs or endpoints, the slowest URLs, and the HTTP response codes and
    request types for the entire infrastructure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3d50d433-cec7-40fe-b638-146b2c4e0ad8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As an example of performance troubleshooting, move your mouse over the Slowest
    URLs graph to identify problems and applications with slow response times. In
    our example, we see a slow response time of 48 ms from the Kubecost Prometheus
    server we deployed earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/06993da6-8804-404e-bafb-579e1be078ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you have basic knowledge about how to navigate through Sysdig dashboards.
    Sysdig provides deep tracing capabilities that can be used when monitoring more
    than one container. We will learn more about Sysdig's security features and anomaly
    detection usage in [Chapter 9](30311229-4c2f-4b9b-8a10-36c755abddb9.xhtml), *Securing
    Applications and Clusters*. You can find the additional use cases in the *Sysdig
    examples* link in the *See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sysdig Falco – Behavioral activity monitoring tool: [https://github.com/draios/oss-falco](https://github.com/draios/oss-falco)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sysdig Inspect – Container troubleshooting and security investigation tool: [https://github.com/draios/sysdig-inspect](https://github.com/draios/sysdig-inspect)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring distributed systems (Golden Signals): [https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/](https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sysdig examples: [https://github.com/draios/sysdig/wiki/sysdig-examples](https://github.com/draios/sysdig/wiki/sysdig-examples)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the cost of resources using Kubecost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will install and configure the open source Kubecost project,
    which gives you cost-related visibility into your Kubernetes resources. You will
    learn how to monitor resource costs to reduce spending and potentially prevent
    resource-based outages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a functional Kubernetes cluster deployed on AWS or GCP.
    Currently, other cloud providers are not supported.
  prefs: []
  type: TYPE_NORMAL
- en: Before you can execute the commands in the following recipes, you need to have `kubectl`
    and `helm` installed. You can find the instructions to install Helm in [Chapter
    2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml), *Operating Applications on Kubernetes*,
    in the *Deploying workloads using Helm charts* section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to ease the
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kubecost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Kubecost dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Kubernetes resource cost allocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Kubecost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Kubecost creates Kubernetes resource-granular models of current and historical
    Kubernetes spending. These models can be used to provide monitoring of resource
    allocations and cost transparency in Kubernetes environments that support multiple
    applications, teams, and departments. In this recipe, we will take a look at the
    basic steps to get Kubecost up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Kubecost chart repository to the local Helm repository list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Kubecost into the `kubecost` namespace using the `Helm install` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that all pods are running. As you can see, this project also deploys
    its own instances of Prometheus and Grafana:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: If you have an existing Prometheus deployment, `node-exporter` pods may get
    stuck in Pending mode. In that case, you need to use different ports for Kubecost
    to be deployed; otherwise, pods will not be able to get the requested pod ports.
  prefs: []
  type: TYPE_NORMAL
- en: Now you have the Kubecost cost analyzer installed with a bundle of components
    required to operate it in a Kubernetes environment.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Kubecost dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s follow these instructions to access the Kubecost dashboard where you
    can monitor your Kubernetes resources and their costs in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the list of the services in the `kubecost` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a port forwarding to access the Kubecost UI using the `kubectl port-forward` command.
    This command will forward the local port `9090` to the Kubecost cost analyzer
    pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: As an alternative, you can patch the `kubecost-cost-analyzer` service using
    the `kubectl edit svc kubecost-cost-analyzer -nkubecost` command and change the
    service type `ClusterIP` to `LoadBalancer` to expose the service externally using
    a cloud load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the address `http://localhost:9090` (or the External IP, if using LoadBalancer)
    in your web browser. You should see the Kubecost login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b70a21da-4594-4d5c-85f7-b6d3c3302ddb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The dashboard can be expanded by adding additional Kubecost endpoints into
    one and used to monitor multiple clusters from a single dashboard. If you have
    more than one cluster, click on the add new cluster icon and add your endpoint
    URLs from the other clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2fe36cb1-7c6b-487c-a5ac-6c4eaf92d788.png)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring Kubernetes resource cost allocation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s follow these instructions to learn how to monitor Kubernetes-related
    cloud spending and find possible saving recommendations using Kubecost:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Access your Kubecost dashboard by following the previous recipe, *Accessing
    the Kubecost dashboard*. Click on your cluster name on the dashboard to access
    the detailed summary. This view will show the monthly cost and cluster efficiency
    in terms of idle resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c2342587-22dc-4e24-86da-1f1a4da0a660.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Real-time assets button. This view shows the real-time costs associated
    with the current cloud provider. In our example, it is one master, three worker
    Kubernetes clusters deployed on an AWS cluster using `kops`, each showing around
    $60 billed since they were created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/21ce2025-eef5-459f-8c13-92979fed7254.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Allocations menu. This view shows cumulative costs in the current
    namespaces. You can apply range filters to get the daily, weekly, monthly, or
    custom-range cost of the resource in the selected namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a3c40f99-8b8b-4fcc-ae0e-e3db77f3f0e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Savings menu. Information in this menu is very important, and
    points to possible optimization steps you can take. As an example, the following
    view shows that we have two underutilized nodes (utilization is below 60%) that
    can provide savings if we scale down our cluster. In this case, we can drain the
    nodes and scale down the cluster. Click on each saving category to learn more
    about the actions you can take to achieve the saving rate displayed here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5dfbbb6f-9ff7-4a36-8d9f-08def74d837e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Health menu. This view shows the assessment of reliability and
    cluster health risks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ccff73d9-7b28-491e-93ca-a74e0fe9f92a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Disable the Show all option to list problems that require your attention. In
    our example, we see one high priority pointing to Crash looping pods. You can
    follow the instructions from the *Inspecting containers* section in this chapter
    to further identify the issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/065355fd-c651-420b-b50a-d58bb056c728.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Notifications menu. From this menu, you can specify how to handle
    notifications. If you have a Slack channel, you can click on the ADD button here
    to forward notifications to it; otherwise, an email notification is available
    as an option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/27ea1986-351c-457b-9c0e-9bd59921c888.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you have the knowledge to monitor project costs and a better understanding
    of what actions to take to increase the return on the investment of your DevOps
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubecost documentation: [http://docs.kubecost.com/](http://docs.kubecost.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Kubecost as a pod only: [https://github.com/kubecost/cost-model/blob/master/deploying-as-a-pod.md](https://github.com/kubecost/cost-model/blob/master/deploying-as-a-pod.md)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
