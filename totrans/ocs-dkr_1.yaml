- en: Chapter 1. Unboxing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Docker** is a lightweight containerization technology that has gained widespread
    popularity in recent years. It uses a host of the Linux kernel''s features such
    as namespaces, cgroups, AppArmor profiles, and so on, to sandbox processes into
    configurable virtual environments.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to install Docker on various systems, both
    in development and in production. For Linux-based systems, since a kernel is already
    available, installation is as simple as the `apt-get install` or `yum install`
    commands. However, to run Docker on non-Linux operating systems such as OSX and
    Windows, you will need to install a helper application developed by Docker Inc.,
    called **Boot2Docker**. This will install a lightweight Linux VM on **VirtualBox**,
    which will make Docker available through port 2375, assigned by the **Internet**
    **Assigned** **Numbers** **Authority** (**IANA**).
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, you will have installed Docker on your system, be
    it in development or production, and verified it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu (14.04 and 12.04)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac OSX and Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inception: building Docker in Docker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Verifying installation: `Hello` `World` output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker was developed by DotCloud Inc. (Currently Docker Inc.), as the framework
    they built their **Platform** **as** **a** **Service** (**PaaS**) upon. When they
    found increasing developer interest in the technology, they released it as open
    source and have since announced that they will completely focus on the Docker
    technology's development, which is good news as it means continual support and
    improvement for the platform.
  prefs: []
  type: TYPE_NORMAL
- en: There have been many tools and technologies aimed at making distributed applications
    possible, even easy to set up, but none of them have as wide an appeal as Docker
    does, which is primarily because of its cross-platform nature and friendliness
    towards both system administrators and developers. It is possible to set up Docker
    in any OS, be it Windows, OSX, or Linux, and Docker containers work the same way
    everywhere. This is extremely powerful, as it enables a write-once-run-anywhere
    workflow. Docker containers are guaranteed to run the same way, be it on your
    development desktop, a bare-metal server, virtual machine, data center, or cloud.
    No longer do you have the situation where a program runs on the developer's laptop
    but not on the server.
  prefs: []
  type: TYPE_NORMAL
- en: The nature of the workflow that comes with Docker is such that developers can
    completely concentrate on building applications and getting them running inside
    the containers, whereas sysadmins can work on running the containers in deployment.
    This separation of roles and the presence of a single underlying tool to enable
    it simplifies the management of code and the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: But don't virtual machinesalready provide all of these features?
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual Machines** (**VMs**) are fully virtualized. This means that they
    share minimal resources amongst themselves and each VM has its own set of resources
    allocated to it. While this allows fine-grained configuration of the individual
    VMs, minimal sharing also translates into greater resource usage, redundant running
    processes (an entire operating system needs to run!), and hence a performance
    overhead.'
  prefs: []
  type: TYPE_NORMAL
- en: Docker, on the other hand, builds on a container technology that isolates a
    process and makes it believe that it is running on a standalone operating system.
    The process still runs in the same operating system as its host, sharing its kernel.
    It uses a layered copy-on-write filesystem called **Another** **Unionfs** (**AUFS**),
    which shares common portions of the operating system between containers. Greater
    sharing, of course, can only mean less isolation, but vast improvements in Linux
    process's resource management solutions such as namespaces and cgroups have allowed
    Docker to achieve VM-like sandboxing of processes and yet maintain a very small
    resource footprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Unboxing Docker](graphics/4787_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This a Docker vs VM comparison. Containers share the host's resources with other
    containers and processes, and virtual machines have to run an entire operating
    system for every instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is available in the standard repositories of most major Linux distributions.
    We will be looking at the installation procedures for Docker in Ubuntu 14.04 and
    12.04 (Trusty and Precise), Mac OSX, and Windows. If you are currently using an
    operating system not listed above, you can look up the instructions for your operating
    system at [https://docs.docker.com/installation/#installation](https://docs.docker.com/installation/#installation).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker in Ubuntu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker is supported by Ubuntu from Ubuntu 12.04 onwards. Remember that you still
    need a 64-bit operating system to run Docker. Let's take a look at the installation
    instructions for Ubuntu 14.04.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker in Ubuntu Trusty 14.04 LTS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Docker is available as a package in the Ubuntu Trusty release''s software repositories
    under the name of `docker.io`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That's it! You have now installed Docker onto your system. However, since the
    command has been renamed `docker.io`, you will have to run all Docker commands
    with `docker.io` instead of `docker`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The package is named `docker.io` because it conflicts with another KDE3/GNOME2
    package called `docker`. If you rather want to run commands as `docker`, you can
    create a symbolic link to the `/usr/local/bin` directory. The second command adds
    autocomplete rules to bash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing Docker in Ubuntu Precise 12.04 LTS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ubuntu 12.04 comes with an older kernel (3.2), which is incompatible with some
    of the dependencies of Docker. So we will have to upgrade it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The kernel that we just installed comes with AUFS built in, which is also a
    Docker requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s wrap up the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a `curl` script for easy installation. Looking at the individual pieces
    of this script will allow us to understand the process better:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the script checks whether our **Advanced** **Package** **Tool** (**APT**)
    system can deal with `https` URLs, and installs `apt-transport-https` if it cannot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then it will add the Docker repository to our local key chain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may receive a warning that the package isn't trusted. Answer `yes` to continue
    the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it adds the Docker repository to the APT sources list, and updates
    and installs the `lxc-docker` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker versions before 0.9 had a hard dependency on LXC (Linux Containers) and
    hence couldn't be installed on VMs hosted on OpenVZ. But since 0.9, the execution
    driver has been decoupled from the Docker core, which allows us to use one of
    numerous isolation tools such as LXC, OpenVZ, systemd-nspawn, libvirt-lxc, libvirt-sandbox,
    qemu/kvm, BSD Jails, Solaris Zones, and even chroot! However, it comes by default
    with an execution driver for Docker's own containerization engine, called l**ibcontainer**,
    which is a pure Go library that can access the kernel's container APIs directly,
    without any other dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use any other containerization engine, say LXC, you can use the-e flag,
    like so: `$ docker -d -e lxc`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have Docker installed, we can get going at full steam! There is
    one problem though: software repositories like **APT** are usually behind times
    and often have older versions. Docker is a fast-moving project and a lot has changed
    in the last few versions. So it is always recommended to have the latest version
    installed.'
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can upgrade Docker as and when it is updated in the APT repositories. An
    alternative (and better) method is to build from source. The tutorial for this
    method is in the section titled *Inception: Docker in Docker*. It is recommended
    to upgrade to the newest stable version as the newer versions might contain critical
    security updates and bug fixes. Also, the examples in this book assume a Docker
    version greater than 1.0, whereas Ubuntu''s standard repositories package a much
    older version.'
  prefs: []
  type: TYPE_NORMAL
- en: Mac OSX and Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Docker depends on the Linux kernel, so we need to run Linux in a VM and install
    and use Docker through it. Boot2Docker is a helper application built by Docker
    Inc. that installs a VM containing a lightweight Linux distribution made specifically
    to run Docker containers. It also comes with a client that provides the same **Application**
    **Program** **Interface** (**API**) as that of Docker, but interfaces with the
    `docker` daemon running in the VM, allowing us to run commands from within the
    OSX/Windows terminal. To install Boot2Docker, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest release of Boot2Docker for your operating system from [http://boot2docker.io/](http://boot2docker.io/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The installation image is shown as follows:![Mac OSX and Windows](graphics/4787_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer, which will install VirtualBox and the Boot2Docker management
    tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run Boot2docker. The first run will ask you for a **Secure** **Shell** (**SSH**)
    key passphrase. Subsequent runs of the script will connect you to a shell session
    in the virtual machine. If needed, the subsequent runs will initialize a new VM
    and start it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternately, to run Boot2Docker, you can also use the terminal command `boot2docker`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You will have to run `boot2docker init` only once. It will ask you for an SSH
    key passphrase. This passphrase is subsequently used by `boot2docker ssh` to authenticate
    SSH access.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have initialized Boot2Docker, you can subsequently use it with the
    `boot2docker start` and `boot2docker stop` commands.
  prefs: []
  type: TYPE_NORMAL
- en: '`DOCKER_HOST` is an environment variable that, when set, indicates to the Docker
    client the location of the `docker` daemon. A port forwarding rule is set to the
    boot2Docker VM''s port 2375 (where the `docker` daemon runs). You will have to
    set this variable in every terminal shell you want to use Docker in.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bash allows you to insert commands by enclosing subcommands within [PRE8]
  prefs: []
  type: TYPE_NORMAL
- en: '**$ boot2docker**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage: boot2docker [<options>] {help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete|download|version}
    [<args>]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**alias setdockerhost=''export DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375''**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**$ setdockerhost**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**$ boot2docker stop**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ boot2docker download**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**VIRT_DRIVER=docker**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**$ apt-get install socat**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ ./tools/docker/install_docker.sh**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**$ ./stack.sh**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo yum -y install docker-registry**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**$ export SETTINGS_FLAVOR=openstack**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ export REGISTRY_PORT=5042**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**$ source /root/keystonerc_admin**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ export OS_GLANCE_URL=http://localhost:9292**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**openstack:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**storage: glance**'
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_alternate: local**'
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_path: /var/lib/docker-registry**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**$ usermod -G docker nova**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ service openstack-nova-compute restart**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo service redis start**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo chkconfig redis on**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo service docker-registry start**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo chkconfig docker-registry on**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**[DEFAULT]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**compute_driver = docker.DockerDriver**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**docker_registry_default_port = 5042**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**[DEFAULT]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**container_formats = ami,ari,aki,bare,ovf,docker**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**$ docker search hipache**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Found 3 results matching your query ("hipache")**'
  prefs: []
  type: TYPE_NORMAL
- en: '**NAME                             DESCRIPTION**'
  prefs: []
  type: TYPE_NORMAL
- en: '**samalba/hipache                  https://github.com/dotcloud/hipache**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**$ docker pull samalba/hipache**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ docker tag samalba/hipache localhost:5042/hipache**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ docker push localhost:5042/hipache**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**[localhost:5042/hipache] (len: 1)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sending image list**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pushing repository localhost:5042/hipache (1 tags)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Push 100% complete**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**$ glance image-list**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**$ nova boot --image "docker-busybox:latest" --flavor m1.tiny test**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**$ nova list**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**$ docker ps**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**$ git clone https://git@github.com/dotcloud/docker**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**$ cd docker**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo make build**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo make binary**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo make test**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo service docker stop**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ alias wd=''which docker''**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo cp $(wd) $(wd)_**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo cp $(pwd)/bundles/<version>-dev/binary/docker-<version>-dev $(wd)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo service docker start**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**$ docker run -i -t ubuntu echo Hello World!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Unable to find image ''ubuntu'' locally**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pulling repository ubuntu**'
  prefs: []
  type: TYPE_NORMAL
- en: '**e54ca5efa2e9: Download complete**'
  prefs: []
  type: TYPE_NORMAL
- en: '**511136ea3c5a: Download complete**'
  prefs: []
  type: TYPE_NORMAL
- en: '**d7ac5e4f1812: Download complete**'
  prefs: []
  type: TYPE_NORMAL
- en: '**2f4b4d6a4a06: Download complete**'
  prefs: []
  type: TYPE_NORMAL
- en: '**83ff768040a0: Download complete**'
  prefs: []
  type: TYPE_NORMAL
- en: '**6c37f792ddac: Download complete**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hello World!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo groupadd docker # Adds the docker group**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo gpasswd -a $(whoami) docker # Adds the current user to the group**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ sudo service docker restart**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo vim /etc/default/ufw**'
  prefs: []
  type: TYPE_NORMAL
- en: '**# Change:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**# DEFAULT_FORWARD_POLICY="DROP"**'
  prefs: []
  type: TYPE_NORMAL
- en: '**# to**'
  prefs: []
  type: TYPE_NORMAL
- en: '**DEFAULT_FORWARD_POLICY="ACCEPT"**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo ufw reload**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**$ sudo ufw allow 2375/tcp**'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope this introductory chapter got you hooked to Docker. The upcoming chapters
    will take you into the Docker world and try to dazzle you with its awesomeness.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned some history and some basics on Docker and how
    it works. We saw how it is different from and advantageous over VM.
  prefs: []
  type: TYPE_NORMAL
- en: Then we proceeded to install Docker on our development setup, be it Ubuntu,
    Mac, or Windows. Then we saw how to replace OpenStack's hypervisor with Docker.
    Later, we built Docker from source, within Docker! Talk about eating your own
    dog food!
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we downloaded our first image and ran our first container. Now you
    can pat your self on the back and proceed to the next chapter, where we will cover
    the primary Docker commands in depth and see how we can create our own images.
  prefs: []
  type: TYPE_NORMAL
