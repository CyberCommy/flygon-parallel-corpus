- en: Chapter 25. Advanced UI with Paging and Swiping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Paging** is the act of moving from page to page, and, on Android, we do this
    by swiping a finger across the screen. The current page then transitions in a
    direction and speed to match the finger movement. It is a useful and practical
    way to navigate around an app, but perhaps even more than this, it is an extremely
    satisfying visual effect for the user. Also, like `RecyclerView`, we can selectively
    load just the data required for the current page and perhaps the data for the
    previous and following pages in anticipation.'
  prefs: []
  type: TYPE_NORMAL
- en: The Android API, as you would have come to expect, has a few solutions for achieving
    paging in a quite simple manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Achieve paging and swiping with images like you might find in a photo gallery
    app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement paging and swiping with `Fragment`-based layouts, giving the potential
    to offer our users the ability to swipe their way through a selection of entire
    user interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let's look at a swiping example.
  prefs: []
  type: TYPE_NORMAL
- en: The Angry Birds classic swipe menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we can see the famous Angry Birds level selection menu showing swiping/paging
    in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Angry Birds classic swipe menu](img/B12806_25_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s build two paging apps: one with images, and one with `Fragment` instances.'
  prefs: []
  type: TYPE_NORMAL
- en: Building an image gallery/slider app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in Android Studio called `Image Pager`. Use the **Empty
    Activity** template and leave the remainder of the settings at their defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'These images are located in the download bundle in the `Chapter25/Image Pager/drawable`
    folder. The following diagram shows them in Windows Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an image gallery/slider app](img/B12806_25_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add the images to the `drawable` folder in the project explorer or, of course,
    you could add more interesting images, perhaps some photos you have taken.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a simple image paging app, we use the `PagerAdapter` class. We can think
    of this as being like `RecyclerApater` but for images, as it will handle the display
    of an array of images in a `ViewPager` widget. This is much like `RecyclerAdapter`,
    which handles the display of the content of an `ArrayList` in a `RecyclerView`.
    All we need to do is override the appropriate functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement an image gallery with `PagerAdapter`, we first need a `ViewPager`
    widget in our main layout. So, you can see precisely what is required; here is
    the actual XML code for `activity_main.xml`. Edit `layout_main.xml` to look exactly
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The slightly unusually named class, `androidx.ViewPager.widget.ViewPager`, is
    the class that makes this functionality available in Android versions that were
    released prior to `ViewPager`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, a bit like where we needed a layout to represent a list item, we need
    a layout to represent an item, in this case an image, in our `ViewPager` widget.
    Create a new layout file in the usual way, and call it `pager_item.xml`. It will
    have a single `ImageView` with an `id` property of `imageView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the visual designer to achieve this, or copy the following XML into `pager_item.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can make a start on our `PagerAdapter` class.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the PagerAdapter class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to inherit from `PagerAdapter` to handle images. Create a new
    class called `ImagePagerAdapter` and make it inherit from `PagerAdapter`. This
    is what the code should look like at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Add the following imports to the top of the `ImagePagerAdapter` class. We normally
    rely on using the shortcut *Alt* + *Enter* to add imports. We are doing things
    slightly differently this time because there are some very similarly named classes
    in the Android API that will not suit our objectives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following imports to the `ImagePagerAdapter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add a constructor to the class to get a `Context` object and an array
    of `Int` (that refers to the image resource IDs) from `MainActivity` when the
    instance is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we must override the required functions of `PagerAdapter`. Inside the
    body of the `ImagePagerAdapter` class, add the overridden `getCount` function,
    which simply returns the number of image IDs in the array. This function is used
    internally by the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we must override the `isViewFromObject` function, which just returns a
    `Boolean`, depending on whether the current `View` is the same or associated with
    the current `Object` that was passed in as a parameter. Again, this is a function
    that is used internally by the class. Immediately after the previous code, add
    this overridden function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, we must override the `instantiateItem` function, and this is where we do
    most of the work that concerns us. First, we declare a new `ImageView` object,
    and then we initialize a `LayoutInflater`. Next, we use `LayoutInflater` to declare
    and initialize a new `View` from our `pager_item.xml` layout file.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we get a reference to the `ImageView` inside the `pager_item.xml`
    layout. We can now add the appropriate image as the content of the `ImageView`
    widget based on the `position` parameter of the `instantiateItem` function and
    the appropriate ID from the `images` array.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we add the layout to the `PagerAdapter` with `addView` and return from
    the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the code we have just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last function we must override is `destroyItem`, which the class can call
    when it needs to remove an appropriate item based on the value of the `position`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `destroyItem` function after the previous code and before the closing
    curly brace of the `ImagePagerAdapter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As we saw when coding `ImagePagerAdapter`, there is very little to this. It
    is just a case of properly implementing the overridden functions that the `ImagePagerAdapter`
    class uses to help make things work smoothly behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can code the `MainActivity` class, which will use the `ImagePagerAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the MainActivity class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we can code our `MainActivity` class. As with the `ImagePagerAdapter`
    class, for clarity, add the following import statements manually to the `MainActivity`
    class before the class declaration, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: All the code goes in the `onCreate` function. We initialize our `Int` array
    with each of the images that we added to the `drawable-xhdpi` folder.
  prefs: []
  type: TYPE_NORMAL
- en: We initialize a `ViewPager` widget in the usual way with the `findViewByID`
    function. We also initialize our `ImagePagerAdapter` instance by passing in a
    reference of `MainActivity` and the `images` array, as required by the constructor
    that we coded previously. Finally, we bind the adapter to the pager with `setAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code the `onCreate` function to look just like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to run the app.
  prefs: []
  type: TYPE_NORMAL
- en: Running the gallery app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we can see the first image from our `int` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the gallery app](img/B12806_25_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Swipe to the left and right a little to see the pleasing manner in which the
    images transition smoothly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the gallery app](img/B12806_25_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we will build an app with almost identical functionality, except that each
    page in the pager will be a `Fragment` instance, which could have any of the functionality
    a regular `Fragment` can have, because they are regular `Fragments`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we implement this, let's learn some more Kotlin, which will help us achieve
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin companion objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A companion object is similar in syntax to an inner class because we declare
    it inside a regular class, but note we refer to it as an object, not a class.
    This implies it is in itself an instance as opposed to a blueprint for an instance.
    This is exactly what it is. When we declare a companion object inside a class,
    its properties and functions are shared by all instances of the regular class.
    It is perfect when we want a bunch of regular classes to share one set of related
    data. We will see a companion object in action in the next app, and also in the
    Age database app in the penultimate chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Fragment Pager/slider app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can put whole `Fragment` instances as pages in a `PagerAdapter`. This is
    quite powerful because, as we know, a `Fragment` instance can have a large amount
    of functionality – even a fully-fledged UI.
  prefs: []
  type: TYPE_NORMAL
- en: To keep the code short and straightforward, we will add a single `TextView`
    to each `Fragment` layout, just to demonstrate that the pager is working. When
    we see how easy it is to get a reference to the `TextView,` however, it should
    be obvious how we could easily add any layout we have learned so far and then
    let the user interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the next project, we will see yet another way to display multiple `Fragment`
    instances, `NavigationView`, and we will actually implement multiple coded `Fragment`
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will do is build the content for the slider. In this case,
    of course, the content is an instance of `Fragment`. We will build one simple
    class called `SimpleFragment`, and one simple layout called `fragment_layout`.
  prefs: []
  type: TYPE_NORMAL
- en: You might think this implies that each slide will be identical in appearance,
    but we will use the ID that was passed in by the `FragmentManager` at instantiation
    time as the text for the `TextView`. This way, when we flip/swipe through the
    `Fragment` instances, it will be clear that each is a new distinct instance.
  prefs: []
  type: TYPE_NORMAL
- en: When we see the code that loads `Fragment` instances from a list, it will be
    easy to design completely different `Fragment` classes, as we have done before,
    and use these different classes for some or all of the slides. Each of these classes
    could, of course, also use a different layout as well.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the SimpleFragment class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the Image Pager app, it is not exactly straightforward which classes
    need to be auto-imported by Android Studio. We use the classes that we do because
    they are all compatible with each other, and it is possible that if you let Android
    Studio suggest which classes to import, it will get it "wrong." The project files
    are located in the `Chapter25/Fragment Pager` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project called `Fragment Slider` using the **Empty Activity** template,
    and leave all the settings at the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new class called `SimpleFragment`, inherit from `Fragment`, and
    add the `import` statements, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We must add two functions, the first of which is `newInstance` and will be contained
    inside a companion object, which we will call from `MainActivity` to set up and
    return a reference to the `Fragment`. The following code creates a new instance
    of the class, but it also puts a `String` into the `Bundle` object that will eventually
    be read from the `onCreateView` function. The `String` that is added to the `Bundle`,
    which is passed in as the one and only parameter of this `newInstance` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `newInstance` function inside the companion object to the `SimpleFragment`
    class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The final function for our `SimpleFragment` class needs to override `onCreateView`
    where, as usual, we will get a reference to the layout that's passed in and load
    up our `fragment_layout` XML file as the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the first line of code unpacks the `String` from the `Bundle` using `getArguments.getString`
    and the `MESSAGE` identifier of the key-value pair.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `onCreateView` function we have just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's also make a super-simple layout for the `Fragment`, which will, of course,
    contain the `TextView` we have just been using.
  prefs: []
  type: TYPE_NORMAL
- en: The fragment_layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `fragment_layout` is the simplest layout we have ever made. Right-click
    on the `layout` folder and choose **New** | **Resource layout file**. Name the
    file `fragment_layout`, and left-click **OK**. Now, add a single `TextView` and
    set its `id` property to `textView`.
  prefs: []
  type: TYPE_NORMAL
- en: We can now code the `MainActivity` class, which handles the `FragmentPager`
    and brings our `SimpleFragment` instances to life.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the MainActivity class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This class consists of two main parts; first, the changes we will make to the
    overridden `onCreate` function, and second, the implementation of an inner class
    and its overridden functions of `FragmentPagerAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the following imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next, in the `onCreate` function, we create an `ArrayList` for `Fragment` instances,
    and then create and add three instances of `SimpleFragment,` passing in a numerical
    identifier to be packed away in the `Bundle`.
  prefs: []
  type: TYPE_NORMAL
- en: We then initialize `SimpleFragmentPagerAdapter` (which we will code soon), passing
    in our list of fragments.
  prefs: []
  type: TYPE_NORMAL
- en: We get a reference to the `ViewPager` with `findViewByID` and bind our adapter
    to it with `setAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this code to the `onCreate` function of `MainActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will add our `inner` class, `SimpleFragmentPagerAdapter`. All we do
    is add an `ArrayList` for `Fragment` instances in the constructor that initializes
    it with the passed-in list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we override the `getItem` and `getCount` functions, which are used internally,
    in the same way we did in the last project. Add the following `inner` class that
    we have just discussed to the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The last thing we need to do is add the layout for `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: The activity_main layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implement the `activity_main` layout by copying the following code. It contains
    a single widget, a `ViewPager`,and it is important that it is from the correct
    hierarchy so that it is compatible with the other classes that we use in this
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the code in the `layout_main.xml` file that we have just discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Let's see our fragment slider in action.
  prefs: []
  type: TYPE_NORMAL
- en: Running the fragment slider app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the app, and then you can swipe your way, left or right, through the fragments
    in the slider. The following screenshot shows the visual effect produced by `FragmentPagerAdapter`
    when the user tries to swipe beyond the final `Fragment` in the `List`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the fragment slider app](img/B12806_25_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw that we can use pagers for simple image galleries or
    for swiping through complex pages of an entire UI, although we demonstrated this
    by means of a very simple `TextView`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at another really cool UI element that is
    used in many of the latest Android apps, probably because it looks great and is
    a real pleasure, as well as extremely practical to use. Let's take a look at `NavigationView`.
  prefs: []
  type: TYPE_NORMAL
