- en: Test-Driven Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief overview of test-driven development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common myths and questions around TDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether it takes more efforts for a developer to write unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether code coverage metrics is good or bad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether TDD would work for complex legacy projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether TDD is even applicable for embedded products or products that involve
    hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit test frameworks for C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google test framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Google test framework on Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process to build a Google test and mock together as one single static library
    without installing them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing our first test case using Google test framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google test framework in Visual Studio IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TDD in action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing legacy code that has dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's deep dive into these TDD topics.
  prefs: []
  type: TYPE_NORMAL
- en: TDD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Test-driven development** (**TDD**) is an extreme programming practice. In
    TDD, we start with a test case and incrementally write the production code that
    is required to make the test case succeed. The idea is that one should focus on
    one test case or scenario at a time and once the test case passes, they can then
    move on to the next scenario. In this process, if the new test case passes, we
    shouldn''t modify the production code. In other words, in the process of developing
    a new feature or while fixing a bug, we can modify the production code only for
    two reasons: either to ensure the test case passes or to refactor the code. The
    primary focus of TDD is unit testing; however, it can be extended to integration
    and interaction testing to some extent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure demonstrates the TDD process visually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5f04dbe-4d3b-4f54-844f-4fe142c52e71.png)'
  prefs: []
  type: TYPE_IMG
- en: When TDD is followed religiously, one can achieve both functional and structural
    quality of the code. It is very crucial that you write the test case first before
    writing the production code as opposed to writing test cases at the end of the
    development phase. This makes quite a lot of difference. For instance, when a
    developer writes unit test cases at the end of development, it is very unlikely
    that the test cases will find any defect in the code. The reason is that the developers
    will unconsciously be inclined to prove their code is doing the right thing when
    the test case is written at the end of development. Whereas, when developers write
    test cases upfront, as no code is written yet, they start thinking from the end
    user's point of view, which would encourage them to come up with numerous scenarios
    from the requirement specification point of view.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, test cases written against code that is already written will
    generally not find any bug as it tends to prove the code written is correct, instead
    of testing it against the requirement. As developers think of various scenarios
    before writing code, it helps them write better code incrementally, ensuring that
    the code does take care of those scenarios. However, when the code has loopholes,
    it is the test case that helps them find issues, as test cases will fail if they
    don't meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: TDD is not just about using some unit test framework. It requires cultural and
    mindset change while developing or fixing defects in the code. Developers' focus
    should be to make the code functionally correct. Once the code is developed in
    this fashion, it is highly recommended that the developers should also focus on
    removing any code smells by refactoring the code; this will ensure the structural
    quality of the code would be good as well. In the long run, it is the structural
    quality of the code that would make the team deliver features faster.
  prefs: []
  type: TYPE_NORMAL
- en: Common myths and questions around TDD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are lots of myths and common doubts about TDD that crosses everyone's mind
    when they are about to start their TDD journey. Let me clarify most of them that
    I came across, for while I consulted many product giants around the globe.
  prefs: []
  type: TYPE_NORMAL
- en: Does it take more efforts for a developer to write a unit test?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the common doubts that arises in the minds of most developers is, "How
    am I supposed to estimate my effort when we adapt to TDD?" As developers are supposed
    to write unit and integration test cases as part of TDD, it is no wonder you are
    concerned about how to negotiate with the customer or management for the additional
    effort required to write test cases in addition to writing code. No worries, you
    aren't alone; as a freelance software consultant myself, many developers have
    asked me this question.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, you test your code manually; instead, write automated test cases
    now. The good news is that it is a one-time effort that is guaranteed to help
    you in the long run. While a developer requires repeated manual effort to test
    their code, every time they change the code, the already existing automated test
    cases will help the developer by giving them immediate feedback when they integrate
    a new piece of code.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line is that it requires some additional effort, but in the long
    run, it helps reduce the effort required.
  prefs: []
  type: TYPE_NORMAL
- en: Does TDD work for complex legacy projects?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certainly! TDD works for any type of software project or products. TDD isn't
    meant just for new products or projects; it is also proven to be more effective
    with complex legacy projects or products. In a maintenance project, the vast majority
    of the time one has to fix defects and very rarely one has to support a new feature.
    Even in such legacy code, one can follow TDD while fixing defects.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, you would readily agree with me that once you are able to reproduce
    the issue, almost half of the problem can be considered fixed from the developer's
    point of view. Hence, you can start with a test case that reproduces the issue
    and then debug and fix the issue. When you fix the issue, the test case will start
    passing; now it's time to think of another possible test case that may reproduce
    the same defect and repeat the process.
  prefs: []
  type: TYPE_NORMAL
- en: Is TDD even applicable for embedded or products that involve hardware?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like application software can benefit from TDD, embedded projects or projects
    that involve hardware interactions can also benefit from the TDD approach. Interestingly,
    embedded projects or products that involve hardware benefit more from TDD as they
    can test most part of their code without the hardware by isolating the hardware
    dependency. TDD helps reduce time to market as most part of the software can be
    tested by the team without waiting for the hardware. As most part of the code
    is already tested thoroughly without hardware, it helps avoid last-minute surprises
    or firefighting when the board bring-up happens. This is because most of the scenarios
    would have been tested thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: As per software engineering best practices, a good design is loosely coupled
    and strongly cohesive in nature. Though we all strive to write code that is loosely
    coupled, it isn't possible to write code that is absolutely independent all the
    time. Most times, the code has some type of dependency. In the case of application
    software, the dependency could be a database or a web server; in the case of embedded
    products, the dependency could be a piece of hardware. But using dependency inversion,
    **code under test** (**CUT**) can be isolated from its dependency, enabling us
    to test the code without its dependency, which is a powerful technique. So as
    long as we are open to refactoring the code to make it more modular and atomic,
    any type of code and project or product will benefit from the TDD approach.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing frameworks for C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a C++ developer, you have quite a lot of options when choosing between unit
    testing frameworks. While there are many more frameworks, these are some of the
    popular ones: CppUnit, CppUnitLite, Boost, MSTest, Visual Studio unit test, and
    Google test framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Though older articles, I recommend you to take a look at [http://gamesfromwithin.com/exploring-the-c-unit-testing-framework-jungle](http://gamesfromwithin.com/exploring-the-c-unit-testing-framework-jungle)
    and [https://accu.org/index.php/journals/](https://accu.org/index.php/journals/).
    They might give you some insight into this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Without any second thought, Google test framework is one of the most popular
    testing frameworks for C++ as it is supported on a wide variety of platforms,
    actively developed, and above all, backed by Google.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will use the Google test and Google mock frameworks.
    However, the concepts discussed in this chapter are applicable to all unit test
    frameworks. We'll deep dive into Google test framework and its installation procedure
    in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Google test framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google test framework is an open source testing framework that works on quite
    a lot of platforms. TDD only focuses on unit testing and to some extent integration
    testing, but the Google test framework can be used for a wide variety of testing.
    It classifies test cases as small, medium, large, fidelity, resilience, precision,
    and other types of test cases. Unit test cases fall in small, integration test
    cases fall in medium, and complex functionalities and acceptance test cases fall
    in the large category.
  prefs: []
  type: TYPE_NORMAL
- en: It also bundles the Google mock framework as part of it. As they are technically
    from the same team, they play with each other seamlessly. However, the Google
    mock framework can be used with other testing frameworks, such as CppUnit.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Google test framework on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can download the Google test framework from [https://github.com/google/googletest](https://github.com/google/googletest)
    as source code. However, the best way to download it is via the Git clone from
    the terminal command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Git is an open source **distributed version control system** (**DVCS**). If
    you haven't installed it on your system, you will find more information on why
    you should, at [https://git-scm.com/](https://git-scm.com/). However, in Ubuntu,
    it can be easily installed with the `sudo apt-get install git` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the code is downloaded as shown in *Figure 7.1*,you''ll be able to locate
    the Google test framework source code in the `googletest` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b32c917-be3d-4b38-b5f6-a948915bba56.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1
  prefs: []
  type: TYPE_NORMAL
- en: 'The `googletest` folder has both the `googletest` and `googlemock` frameworks
    in separate folders. Now we can invoke the `cmake` utility to configure our build
    and autogenerate `Makefile`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b0792f8f-c9c0-4ac1-a1e3-a407b3beeb45.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2
  prefs: []
  type: TYPE_NORMAL
- en: 'When the `cmake` utility is invoked, it detects the C/C++ header''s files and
    its path that are necessary to build the Google test framework from the source
    code. Also, it will try to locate the tools required to build the source code.
    Once all the necessary headers and tools are located, it will autogenerate the
    `Makefile`. Once you have `Makefile` in place, you can use it to compile and install
    Google test and Google mock on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot demonstrates how you can install google test on your
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa68c8ee-430c-459c-9f0c-a6236c487505.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding image, the make install command has compiled and installed
    `libgmock.a` and `libgtest.a` static library files in the `/usr/local/lib` folder.
    Since the `/usr/local/lib` folder path is generally in the system's PATH environment
    variable, it can be accessed from any project within the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to build google test and mock together as one single static library without
    installing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case you don't prefer installing the `libgmock.a` and `libgtest.a` static
    library files and the respective header files on common system folders, then there
    is yet another way to build the Google test framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will create three object files, as shown in *Figure 7.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/bd4a03db-5477-4a53-b46a-11eac3a604d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to combine all the object files into a single static library
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, your folder should have the brand new `libgtest.a` static
    library, as shown in *Figure 7.5*. Let''s understand the following command instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will help us create three object files: **gtest-all.o**, **gmock-all.o**,
    and **gmock_main.o**. The `googletest` framework makes use of some C++11 features,
    and I have purposefully used c++14 to be on the safer side. The `gmock_main.cc`
    source file has a main function that will initialize the Google mock framework,
    which in turn will internally initialize the Google test framework. The best part
    about this approach is that we don''t have to supply the main function for our
    unit test application. Please note the compilation command includes the following
    `include` paths to help the g++ compiler locate the necessary header files in
    the Google test and Google mock frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the next step is to create our `libgtest.a` static library that will bundle
    both gtest and gmock frameworks into one single static library. As the Google
    test framework makes use of multiple threads, it is mandatory to link the `pthread`
    library as part of our static library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `ar` archive command helps combine all the object files into a single static
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image demonstrates the discussed procedure practically in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24a914fe-482c-49d9-affa-a963e310e2ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first test case using the Google test framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learning the Google test framework is pretty easy. Let''s create two folders:
    one for production code and the other for test code. The idea is to separate the
    production code from the test code. Once you have created both the folders, start
    with the `Math.h` header, as shown in *Figure 7.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/806d97a0-e7f7-4453-960e-5a56c85cfac1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6
  prefs: []
  type: TYPE_NORMAL
- en: The `Math` class has just one function to demonstrate the usage of the unit
    test framework. To begin with, our `Math` class has a simple add function that
    is good enough to understand the basic usage of the Google test framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the place of the Google test framework, you could use CppUnit as well and
    integrate mocking frameworks such as the Google mock framework, mockpp, or opmock.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement our simple `Math` class in the following `Math.cpp` source
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08ebccb7-7a22-413b-855e-aa8f697b6ade.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7
  prefs: []
  type: TYPE_NORMAL
- en: The preceding two files are supposed to be in the `src` folder, as shown in
    *Figure 7.8*. All of the production code gets into the `src` folder, and any number
    of files can be part of the `src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/646383e1-8841-4cea-8f06-a9229e5b42c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8
  prefs: []
  type: TYPE_NORMAL
- en: As we have written some production code, let's see how to write some basic test
    cases for the preceding production code. As a general best practice, it is recommended
    to name the test case file as either `MobileTest` or `TestMobile` so that it is
    easy for anyone to predict the purpose of the file. In C++ or in the Google test
    framework, it isn't mandatory to maintain the filename and class name as the same,
    but it is generally considered a best practice as it helps anyone locate a particular
    class just by looking at the filenames.
  prefs: []
  type: TYPE_NORMAL
- en: Both the Google test framework and Google mock framework go hand in hand as
    they are from the same team, hence this combination works pretty well in the majority
    of the platforms, including embedded platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have already compiled our Google test framework as a static library,
    let''s begin with the `MathTest.cpp` source file straight away:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/766ad4f5-c24a-4536-abd7-b58f87946592.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 7.9***,** at line number 18,we included the gtest header file from
    the Google test framework. In the Google test framework, test cases are written
    using a `TEST` macro that takes two parameters. The first parameter, namely `MathTest`,
    represents the test module name and the second parameter is the name of the test
    case. Test modules help us group a bunch of related test cases under a module.
    Hence, it is very important to name the test module and test case aptly to improve
    the readability of the test report.
  prefs: []
  type: TYPE_NORMAL
- en: As you are aware, `Math` is the class we are intending to test; we have instantiated
    an object of the `Math` object at *line 22*. In *line 25*, we invoked the add
    function on the math object, which is supposed to return the actual result. Finally,
    at *line 27*, we checked whether the expected result matches the actual result.
    The Google test macro `EXPECT_EQ` will mark the test case as passed if the expected
    and actual result match; otherwise, the framework will mark the test case outcome
    as failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cool, we are all set now. Let''s see how to compile and run our test case now.
    The following command should help you compile the test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the compilation command includes the following include path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Also, it is important to note that we also linked our Google test static library
    `libgtest.a` and the POSIX pthreads library as the Google test framework makes
    use of multiple .
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ace1d532-0d14-4853-9a53-a00201640fc8.png)**Figure 7.10**'
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! We have compiled and executed our first test case successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Using Google test framework in Visual Studio IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to download the Google test framework `.zip` file from [https://github.com/google/googletest/archive/master.zip](https://github.com/google/googletest/archive/master.zip).
    The next step is to extract the `.zip` file in some directory. In my case, I have
    extracted it into the `googletest` folder and copied all the contents of `googletest
    googletest-mastergoogletest-master` to the `googletest` folder, as shown in *Figure
    7.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c00daec6-8797-4f22-bed7-b9bff08a2eb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11
  prefs: []
  type: TYPE_NORMAL
- en: It is time to create a simple project in Visual Studio. I have used Microsoft
    Visual Studio Community 2015\. However, the procedure followed here should pretty
    much remain the same for other versions of Visual Studio, except that the options
    might be available in different menus.
  prefs: []
  type: TYPE_NORMAL
- en: You need to create a new project named `MathApp` by navigating to New Project
    | Visual Studio | Windows | Win32 | Win32 Console Application, as shown in *Figure
    7.12*. This project is going to be the production code to be tested.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5110e15b-45e8-40bc-9d8a-9c82679ea631.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12
  prefs: []
  type: TYPE_NORMAL
- en: Let's add the `MyMath` class to the `MathApp` project. The `MyMath` class is
    the production code that will be declared in `MyMath.h` and defined in `MyMath.cpp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `MyMath.h` header file shown in *Figure 7.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0dd5bc3a-c7c9-4543-bc80-b1c199347f6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition of the `MyMath` class looks as shown in *Figure 7.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cb5e1f9-a9b1-4c7c-819b-b04e4ff475a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14
  prefs: []
  type: TYPE_NORMAL
- en: 'As it is a console application, it is mandatory to supply the main function,
    as shown in *Figure 7.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d09021c7-205c-4807-9938-a2738721ded1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to add a static library project named `GoogleTestLib` to
    the same `MathApp` project solution, as shown in *Figure 7.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7123a677-1300-47f9-8877-ee7d7d6e1423.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add the following source files from the Google test framework
    to our static library project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to compile the static library, we need to include the following header
    file paths in `GoogleTestLib/Properties/VC++ Directories/Include` directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You may have to customize the paths based on where you have copied/installed
    the Google test framework in your system.
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time to add the `MathTestApp` Win32 console application to the `MathApp`
    solution. We need to make `MathTestApp` as a `StartUp` project so that we can
    directly execute this application. Let's ensure there are no source files in the
    `MathTestApp` project before we add a new source file named `MathTest.cpp` to
    the `MathTestApp` project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to configure the same set of Google test framework include paths we
    added to the `GoogleTestLib` static library. In addition to this, we must also
    add the `MathApp` project directory as the test project will refer to the header
    file in the `MathApp` project, as follows. However, customize the paths as per
    the directory structure you follow for this project in your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the `MathAppTest` project, make sure you have added references to `MathApp`
    and `GoogleTestLib` so that the `MathAppTest` project will compile the other two
    projects when it senses changes in them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! We are almost done. Now let''s implement `MathTest.cpp`, as shown in
    *Figure 7.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e95073ff-6873-4b90-b8f2-74bbb21d27a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything is ready now; let''s run the test cases and check the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bb7e110-1c85-479b-b752-c94fb2fc454d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18
  prefs: []
  type: TYPE_NORMAL
- en: TDD in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see how to develop an **Reverse Polish Notation** (**RPN**) calculator
    application that follows the TDD approach. RPN is also known as the postfix notation.
    The expectation from the RPN Calculator application is to accept a postfix math
    expression as an input and return the evaluated result as the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step by step, I would like to demonstrate how one can follow the TDD approach
    while developing an application. As the first step, I would like to explain the
    project directory structure, then we''ll move forward. Let''s create a folder
    named `Ex2` with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8f79361-8f56-4bb9-92e3-7aa286bb9afb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19
  prefs: []
  type: TYPE_NORMAL
- en: The `googletest` folder is the gtest test library that has the necessary `gtest`
    and `gmock` header files. Now `libgtest.a` is the Google test static library that
    we created in the previous exercise. We are going to use the `make` utility to
    build our project, hence I have placed a `Makefile` in the project `home` directory.
    The `src` directory will hold the production code, while the test directory will
    hold all the test cases that we are going to write.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start writing test cases, let''s take a postfix math *"2  5  *  4
     +  3  3  *  1  +  /"* and understand the standard postfix algorithm that we are
    going to apply to evaluate the RPN math expression. As per the postfix algorithm,
    we are going to parse the RPN math expression one token at a time. Whenever we
    encounter an operand (number), we are going to push that into the stack. Whenever
    we encounter an operator, we are going to pop out two values from the stack, apply
    the math operation, push back the intermediate result into the stack, and repeat
    the procedure until all the tokens are evaluated in the RPN expression. At the
    end, when no more tokens are left in the input string, we will pop out the value
    and print it as the result. The procedure is demonstrated step by step in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/451d51b6-eb60-4485-a956-9a907bfcd8eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, let''s take a simple postfix math expression and translate the
    scenario into a test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s translate the preceding test case as a Google test in the test folder,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to compile the preceding test case, let''s write the minimal production
    code that is required in the `src` folder, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As the RPN math expression will be supplied as a space-separated string, the
    evaluate method will take a string input argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `Makefile` class helps run the test cases every time we compile
    the production code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f819f7b-c23d-4cbb-9239-bce7db1f192b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s build and run the test case and check the test case''s outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec54c683-c310-4fc3-8577-b8b71d1f349d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22
  prefs: []
  type: TYPE_NORMAL
- en: In TDD, we always start with a failing test case. The root cause of the failure
    is that the expected result is 25, while the actual result is 0\. The reason is
    that we haven't implemented the evaluate method, hence we have hardcoded to return
    0, irrespective of any input. So let's implement the evaluate method in order
    to make the test case pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to modify `src/RPNCalculator.h` and `src/RPNCalculator.cpp` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b82b6739-0e1f-446b-8268-3e4278b9a435.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23
  prefs: []
  type: TYPE_NORMAL
- en: 'In the RPNCalculator.h header file, observe the new header files that are included
    to handle string tokenizing and string double conversion and copy the RPN tokens
    to the vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60edb91d-fb13-4c15-abe3-28d51fb04033.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24
  prefs: []
  type: TYPE_NORMAL
- en: As per the standard postfix algorithm, we are using a stack to hold all the
    numbers that we find in the RPN expression. Anytime we encounter the `+` math
    operator, we pop out two values from the stack and add them and push back the
    results into the stack. If the token isn't a `+` operator, we can safely assume
    that it would be a number, so we just push the value to the stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the preceding implementation in place, let''s try the test case and check
    whether the test case passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1818c63-eed8-48d8-8c34-f46b389d0983.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25
  prefs: []
  type: TYPE_NORMAL
- en: 'Cool, our first test case has passed as expected. It''s time to think of another
    test case. This time, let''s add a test case for subtraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s translate the preceding test case as a Google test in the test folder,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With the preceding test case added to `test/RPNCalculatorTest`, it should now
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc5b0b61-89a8-4f0e-b3a4-dbd6c211184f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s execute the test cases and check whether our new test case passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/693817e5-8ceb-41f4-bf67-3aee2b1f4cdf.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27
  prefs: []
  type: TYPE_NORMAL
- en: 'As expected, the new test fails as we haven''t added support for subtraction
    in our application yet. This is very evident, based on the C++ exception, as the
    code attempts to convert the subtraction `-` operator into a number. Let''s add
    support for subtraction logic in our evaluate method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50e8ab37-d576-49f8-88ef-ae73292bf0e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.28
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to test. Let''s execute the test case and check whether things are
    working:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a717a076-d04f-4e5b-ad99-c0cc64dccf11.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.29
  prefs: []
  type: TYPE_NORMAL
- en: Cool! Did you notice that our test case failed in this instance? Wait a minute.
    Why are we excited if the test case failed? The reason we should be happy is that
    our test case found a bug; after all, that is the main intent of TDD, isn't?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9040e38a-2afb-4da2-9e59-aba4a997ad03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.30
  prefs: []
  type: TYPE_NORMAL
- en: The root cause of the failure is that the Stack operates on the basis of **Last
    In First Out** (**LIFO**) whereas our code assumes FIFO. Did you notice that our
    code assumes that it will pop out the first number first while the reality is
    that it is supposed to pop out the second number first? Interesting, this bug
    was there in the addition operation too; however, since addition is associative,
    the bug was kind of suppressed but the subtraction test case detected it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c2c58af-23b1-4385-b8e9-1dd1fa0de62b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.31
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fix the bug as shown in the preceding screenshot and check whether the
    test cases will pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecfdb074-47b3-458c-9f97-b0b8492e1c70.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.32
  prefs: []
  type: TYPE_NORMAL
- en: 'Awesome! We fixed the bug and our test case seems to certify they are fixed.
    Let''s add more test cases. This time, let''s add a test case to verify multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s translate the preceding test case as a google test in the test folder,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We know this time the test case is going to fail, so let''s fast forward and
    take a look at the division test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s translate the preceding test case as a google test in the test folder,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s skip the test result and move forward with a final complex expression
    test case that involves many operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s translate the preceding test case as a google test in the test folder,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check whether our RPNCalculator application is able to evaluate a complex
    RPN expression that involves addition, subtraction, multiplication, and division
    in a single expression with the following test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding test case, we are checking whether the expected result matches
    the actual result to the approximation of up to four decimal places. If the values
    are different beyond this approximation, then the test case is supposed to fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the test case output now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7ee9b6e-a7c4-4724-ba76-248586d1042b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.33
  prefs: []
  type: TYPE_NORMAL
- en: Great! All the test cases are green.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at our production code and check whether there is any
    room for improvement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59968599-0045-46c6-a21d-c23758b35e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.34
  prefs: []
  type: TYPE_NORMAL
- en: The code is functionally good but has many code smells. It is a long method
    with the nested `if-else` condition and duplicate code. TDD is not just about
    test automation; it is also about writing good code without code smells. Hence,
    we must refactor code and make it more modular and reduce the code complexity.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply polymorphism or the strategy design pattern here instead of the
    nested `if-else` conditions. Also, we can use the factory method design pattern
    to create various subtypes. There is also scope to use the Null Object Design
    Pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The best part is we don't have to worry about the risk of breaking our code
    in the process of refactoring as we have a sufficient number of test cases to
    give us feedback in case we break our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s understand how we could refactor the RPNCalculator design shown
    in *Figure 7.35*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f4554af-6399-4958-bf1f-c652d1a40ba2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.35
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the preceding design refactoring approach, we can refactor RPNCalculator
    as shown in *Figure 7.36*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0365aef4-8679-4a68-9fa3-b1412e710b8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.36
  prefs: []
  type: TYPE_NORMAL
- en: If you compare the `RPNCalculator` code before and after refactoring, you'll
    find that code complexity has reduced to a decent amount after refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MathFactory` class can be implemented as shown in *Figure 7.37*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50ef6be4-5685-42f2-ae2a-4017ce0eb786.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.37
  prefs: []
  type: TYPE_NORMAL
- en: As much as possible, we must strive to avoid `if-else` conditions, or in general,
    we must try to avoid code branching when possible. Hence, STL map is used to avoid
    if-else conditions. This also promotes the reuse of the same Math objects, irrespective
    of the complexity of the RPN expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will get an idea of how the `MathOperator Add` class is implemented if
    you refer to *Figure 7.38*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88aa74aa-72cb-4d7d-a8c3-5f129418d4bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.38
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Add` class definition looks as shown in *Figure 7.39*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29aaf860-3fbd-4a28-adac-7baaa25fb372.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.39
  prefs: []
  type: TYPE_NORMAL
- en: The subtract, multiplication, and division classes can be implemented in the
    similar fashion, as an `Add` class. The bottom line is that after refactoring,
    we can refactor a single `RPNCalculator` class into smaller and maintainable classes
    that can be tested individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the refactored `Makefile` class in *Figure 7.40* and
    test our code after the refactoring process is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24b2be6c-d0af-43c6-ab20-f863918d589c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.40
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, we should see all the test cases pass after refactoring if
    no functionalities are broken, as shown in *Figure 7.41*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3938e73e-79d5-4970-92b0-429e8e7a5f8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.41
  prefs: []
  type: TYPE_NORMAL
- en: Cool! All the test cases have passed, hence it is guaranteed that we haven't
    broken the functionality in the process of refactoring. The main intent of TDD
    is to write testable code that is both functionally and structurally clean.
  prefs: []
  type: TYPE_NORMAL
- en: Testing a piece of legacy code that has dependency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, the CUT was independent with no dependency, hence
    the way it tested the code was straightforward. However, let''s discuss how we
    can unit test the CUT that has dependencies. For this, refer to the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64a56413-6eb2-45e0-bf2f-05337e3ebf83.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.42
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 7.42*, it is apparent that **Mobile** has a dependency on **Camera**
    and the association between **Mobile** and **Camera** is *composition*. Let''s
    see how the `Camera.h` header file is implemented in a legacy application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/561d5d0d-9c73-4d5b-835c-9a9453cdaf72.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.43
  prefs: []
  type: TYPE_NORMAL
- en: 'For demonstration purposes, let''s take this simple `Camera` class that has
    `ON()` and `OFF()` functionalities. Let''s assume that the ON/OFF functionality
    will interact with the camera hardware internally. Check out the `Camera.cpp`
    source file in *Figure 7.44*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc953aab-781d-496f-b297-3a65c20ab28e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.44
  prefs: []
  type: TYPE_NORMAL
- en: 'For debugging purposes, I have added some print statements that will come in
    handy when we test the `powerOn()` and `powerOff()` functionalities of mobile.
    Now let''s check the `Mobile` class header file in *Figure 7.45*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bc9c336-d9b7-4baa-9117-26691c11a1fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.45
  prefs: []
  type: TYPE_NORMAL
- en: 'We move on to the mobile implementation, as illustrated in *Figure 7.46*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9db6f57-11e5-4bcd-8730-adaa968f482d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.46
  prefs: []
  type: TYPE_NORMAL
- en: From the `Mobile` constructor implementation, it is evident that mobile has
    a camera or to be precise composition relationship. In other words, the `Mobile`
    class is the one that constructs the `Camera` object, as shown in *Figure 7.46*,*line
    21*, in the constructor. Let's try to see the complexity involved in testing the
    `powerOn()` functionality of Mobile; the dependency has a composition relationship
    with the CUT of Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write the `powerOn()` test case assuming camera On has succeeded, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s try to run the `Mobile` test case and check the test outcome, as
    illustrated in *Figure 7.47*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7c57ec6-dfaa-4f1c-84bd-53985d314075.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.47
  prefs: []
  type: TYPE_NORMAL
- en: From *Figure 7.47*, we can understand that the `powerOn()` test case of `Mobile` has
    passed. However, we also understand that the real `ON()` method of the `Camera`
    class also got invoked. This, in turn, will interact with the camera hardware.
    At the end of the day, it is not a unit test as the test outcome isn't completely
    dependent on the CUT. If the test case had failed, we wouldn't have been able
    to pinpoint whether the failure was due to the code in the `powerOn()` logic of
    mobile or the code in the `ON()` logic of camera, which would have defeated the
    purpose of our test case. An ideal unit test should isolate the CUT from its dependencies
    using dependency injection and test the code. This approach will help us identify
    the behavior of the CUT in normal or abnormal scenarios. Ideally, when a unit
    test case fails, we should be able to guess the root cause of the failure without
    debugging the code; this is only possible when we manage to isolate the dependencies
    of our CUT.
  prefs: []
  type: TYPE_NORMAL
- en: The key benefit of this approach is that the CUT can be tested even before the
    dependency is implemented, which helps test 60~70 percent of the code without
    the dependencies. This naturally reduces the time to market the software product.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where the Google mock or gmock comes in handy. Let''s check how we
    can refactor our code to enable dependency injection. Though it sounds very complex,
    the effort required to refactor code isn''t that complex. In reality, the effort
    required to refactor your production code could be more complex, but it is worth
    the effort. Let''s take a look at the refactored `Mobile` class shown in *Figure
    7.48*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4127e4d3-a4ba-40d4-92b6-45c55c8395b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.48
  prefs: []
  type: TYPE_NORMAL
- en: In the `Mobile` class, I have added an overloaded constructor that takes camera
    as an argument. This technique is called **constructor dependency injection**.
    Let's see how this simple yet powerful technique could help us isolate the camera
    dependency while testing the `powerOn()` functionality of Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we must refactor the `Camera.h` header file and declare the `ON()` and
    `OFF()` methods as virtual in order for the gmock framework to help us stub these
    methods, as shown in *Figure 7.49*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23fba3ac-3c81-4c0f-8832-d491579481fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.49
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s refactor our test case as shown in *Figure 7.50*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90b5acab-6142-4f68-aa83-5f99e2763a3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.50
  prefs: []
  type: TYPE_NORMAL
- en: 'We are all set to build and execute the test cases. The test outcome is expected
    as shown in *Figure 7.51*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b7bc63c-5423-404d-bc44-0df96ad748be.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.51
  prefs: []
  type: TYPE_NORMAL
- en: Cool! Not only has our test case passed, but we have also isolated our CUT from
    its camera dependency, which is evident as we don't see the print statements from
    the `ON()` method of camera. The bottom line is you have now learned how to unit
    test code by isolating its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Happy TDD!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned quite a lot about TDD, and the following is the
    summary of the key takeaway points:'
  prefs: []
  type: TYPE_NORMAL
- en: TDD is an Extreme Programming (XP) practice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TDD is a bottom-up approach that encourages us to start with a test case, hence
    it is commonly referred to as LowercaseTest-First Development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You learned how to write test cases using Google Test and Google Mock Frameworks
    in Linux and Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You also learned how to write an application that follows TDD in Linux and Visual
    Studio on the Windows platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You learned about the Dependency Inversion technique and how to unit test a
    code by isolating its dependency using the Google Mock Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Google Test Framework supports Unit Testing, Integration Testing, Regression
    Testing, Performance Testing, Functional Testing, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TDD mainly insists on Unit Testing, Integration Testing, and Interaction Testing
    while complex functional testing must be done with Behavior-Driven Development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You learned how to refactor code smells into clean code while the unit test
    cases that you wrote give continuous feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have learned TDD and how to automate Unit Test Cases, Integration Test Cases,
    and Interaction Test cases in a bottom-up approach. With BDD, you will learn the
    top-down development approach, writing end-to-end functionalities and test cases
    and other complex test scenarios that we did not cover while discussing TDD.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about Behavior-Driven Development.
  prefs: []
  type: TYPE_NORMAL
