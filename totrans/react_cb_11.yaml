- en: Implementing Server-Side Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Server-Side Rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing promises with Server-Side Rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Next.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React typically uses client-side rendering (CSR). This means that it dynamically
    injects the HTML code in the target `div` (it generally uses the `#app` or `#root` IDs), and
    that''s why if you try to see the page''s code directly (right-click—View Page
    Code) you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/76039f9f-fe36-408f-a130-57f991ed7205.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The only way to see the actual code is by inspecting the site with Chrome Dev
    Tools, or other tools, and here is the code generated by React using CSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34b17d83-a4c8-4d2e-914c-5a2402c18df3.png)'
  prefs: []
  type: TYPE_IMG
- en: By inspecting the page, you can see the code that is injected into our `#root`
    div. *Server-side rendering (SSR)* is very useful for improving the *SEO* of our
    website and be indexed by the main search engines, such as *Google*, *Yahoo*,
    and *Bing*. You probably don't need to worry about *S**SR* if you don't care too
    much about SEO. Currently, the Googlebot supports *CSR*, and it can index our
    site on *Google*, but if you care about SEO and you are worried about improving
    the SEO on other search engines, such as *Yahoo*, *Bing*, or *DuckDuckGo*, then
    using SSR is the way to go.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Server-Side Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will implement SSR in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use the code from the last recipe (*Implementing Node.js with
    React/Redux and Webpack 4)* from [Chapter 10](e95b58ed-e32c-4488-ab8e-b332e235bda8.xhtml)*, Mastering
    Webpack 4.x*, and install some other dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now go through the steps of rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add our npm scripts to our `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have to change our `webpack.config.js` file. Because we are going to
    implement SSR, we need to separate our Webpack configuration into a client configuration
    and server configuration, returning them as an array. The file should look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create a file for our client configuration inside our `webpack`
    folder. We need to call it `webpack.config.client.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/webpack.config.client.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the server config should be like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/webpack.config.server.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, in both files we are importing a common configuration file
    that contains a configuration that needs to be added to both the client and the
    server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/webpack.config.common.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add new configuration files for Webpack nodes and also modify some
    of the files we already have. The first one we need to create is `context.js`.
    In this file (and some others) we are going to export a function with a type parameter,
    which can be *client* or *server*, and depending on that value we will return
    different configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/context.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The entry file is where we will add all the files that are going to be added
    to the bundle. Our entry file now should be like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/entry.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a file called externals.js, which contains the modules we
    won''t bundle (unless they are on the whitelist):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/externals.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we need to modify our `module.js` file to return our rules based on the
    environment or the configuration type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/module.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create a node for the name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/name.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the output configuration, we need to return an object depending on the
    type of configuration (client or server):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/output.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `plugins.js` file, we are validating whether the user has sent the `ANALYZER`
    variable to display the `BundleAnalyzerPlugin` just in that case and not every
    time we run our application in development mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/plugins.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to specify our modules in our resolve file; the file should be like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/resolve.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last configuration we need to create is the `target.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/target.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have configured our Webpack, we need to modify our `App.jsx` file,
    in which we need to create our routes for the client using the `<BrowserRouter>`
    component and `<StaticRouter>` for the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/App.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to modify our server file (`index.js`) to use our *clientRender*
    and *serverRender* middleware:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to modify our `clientRender.js` file. If we detect a search bot with
    the `isBot` function,we will return the `next()` middleware. Otherwise, we render
    the HTML and we execute the app with CSR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/render/clientRender.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create our `serverRender.js` file. Here, we need to render our `App`
    component using the `renderToString` method from `react-dom/server` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/render/serverRender.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can start the application by running the `npm start` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the app at `http://localhost:3000` in your browser (Chrome, for
    example) and you right-click and then View page source, you will probably notice
    that we are not using SSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35cb0370-fc71-4da4-9af0-a7f60c764cea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because we will only use SSR for search bots. The *isBot* function will
    detect all the search bots, and just for a test I added *curl* as a bot to test
    our SSR; this is the code of that function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/utils/device.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal while you have the application running in another terminal,
    and then execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/41cfa504-72bc-456f-a9e3-bdcb9c524d4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the HTML code inside the #root div is render it using the SSR.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if you want to try to run `/about` in curl, you will see that also will
    render it using SSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/29b3774a-7a5b-4b0a-9e15-d34da262b8c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is an extension for Chrome called User-Agent Switcher for C*hrome* where
    you can specify the user agent you want to use in your browser. In this way, you
    can add a special user agent for Googlebot, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cce1b59f-6f77-4908-aecc-59ad8cc815fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, if you select Chrome | Bot in User-Agent Switcher, you can see that the
    HTML code renders it as SSR when you do View page source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0fa6e9d4-7f9e-4d11-b32e-df15a3694b29.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we are using SSR, we have to be very careful when we try to use the object
    window for the client. If you use it directly using SSR you will get a ReferenceError
    such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To solve this problem, you can validate that the window object exists, but
    this can be very repetitive. I prefer to create a function that can verify whether
    we are using a browser (client) or a server. You can do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then every time you need to use the window object, you can do something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Implementing promises with Server-Side Rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipe, we saw how SSR works, but that recipe was limited to displaying
    the SSR with simple components. In this recipe, we will learn how to implement
    promises to connect our components to Redux, use an API to get data and render
    the components using SSR.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use the same code from the last recipe, but we will make some
    changes. In this recipe, we need to install these packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to implement a basic todo list pulled from an
    API to show how to connect Redux to our application using SSR:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to add a simple API to display a to-do list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/controllers/api.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second step is to import this API controller into our `src/server/index.js`
    file and add it as middleware on the `/api` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously, in our `serverRender.js` file, we rendered our `App` component
    directly. Now we need to get the promises from the components that have a static
    method called `initialAction`, save them into a promises array, resolve them,
    and then render our `App` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/render/serverRender.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we need to change our folder structure a little bit in our
    client directory. Previously, we had a `components` directory and our components
    were inside. Now we are going to encapsulate our components as small applications,
    and inside we can create our actions, API, components, containers, and reducers.
    Our new structure should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e4c2cc9b-d2f6-42b6-b495-2d18c088157a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will create a todo application. To do this, first we need to add our actions
    folder, and inside we need to make first our `actionTypes.js` file. In this file,
    we need to add our `FETCH_TODO` actions. I prefer to create an object with two
    functions, one for requests and the other for the success; you will see the advantage
    of this when we use this on our reducer and when we dispatch our actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/actions/actionTypes.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `index.js` file, we will create a fetchTodo action to retrieve our todo
    list items from our API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/actions/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are using two particular methods (request and received)
    from our base actions. These functions will help us to dispatch our actions easily
    (do you remember that we used the request and success methods in the actions?):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/redux/baseActions.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create our `api` folder, where we need to add a `constants.js` file
    and our `index.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/api/constants.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `index.js` file, we have to create our Api class and add a static method
    called `fetchTodo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/api/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our Todo container, we need to map our todo list and add the *fetchTodo*
    action to Redux. We will export a Layout component, to which we will add our other
    components and manipulate the way we want to display the layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/container/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Layout component should be like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/components/Layout.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are not going to see the layout components (Header, Content,
    and Footer) since they are very generic and we have used them in the past recipes.
    Now let''s create our reducer file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/reducer/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Todo component will execute our fetchTodo action in the componentDidMount
    method, and then we render the Todo list into an HTML list; very simple:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/components/Todo.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to create an `index.jsx` file for our todo app, and in this
    file we are going to add our initialAction (this will return a promise) to execute
    our fetchTodo action and render this Todo list using SSR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/todo/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see in our `serverRender.js` file, we get the promises and resolve
    them, and then we render our application using SSR.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test the application, you need to go to http://localhost:3000/todo
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that in our app, we are just using SSR for search bots and curl, otherwise
    will use CSR. This is because the only reason we have to use SSR is to improve
    our SEO in Google, Yahoo, and Bing.
  prefs: []
  type: TYPE_NORMAL
- en: If we use CSR, the way we will execute our action is on the `componentDidMount()`
    method in our Todo component; and if we are using SSR, we will use the `initialAction`
    method, which returns a promise that will be resolved in `serverRender.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the page, you should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7487add2-4819-4a66-9a88-9b7742f03046.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to see whether the SSR is working, you can use the `curl` command
    and execute the same URL in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3f0d3e9b-3983-4b55-ad35-2a09ae9f9c5a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the todo list reducer has been added to `initialState` and from
    there, we can render the list using SSR.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next.js is a minimalistic framework for server-rendered React applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to implement Next.js with Sass, and
    we will also get data from a service using axios.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s create a new directory called `nextjs`, initialize `package.json`,
    and finally create a new directory inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we need to install some dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have installed the dependencies, let''s create our first Next.js
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to create some scripts in our package.json.
    In each script, we need to specify the `src` directory. Otherwise, it will try
    to start Next from the root instead of the `src` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main directory in Next is called `pages`. This is where we will include
    all the `pages` we want to render using Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The first page we need to create is `index.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/pages/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s run our application using the dev script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything works, you should see this in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f75b2344-5ab1-4d52-af63-01d928622c7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open `http://localhost:3000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d996d9a6-c555-4412-9451-dce13b0b2d21.png)'
  prefs: []
  type: TYPE_IMG
- en: Next.js has its own Webpack configuration and hot reloading enabled. That means
    if you edit the index.js file you will see the changes reflected without refreshing
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create an About page to see how the routing works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/pages/about.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: Now you will see the about page if you go to http://localhost:3000/about. As
    you can see, Next.js automatically creates a new route for each page we have created.
    This means we don't need to install React Router to handle the routing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Next pages, it is not necessary to import React because it is automatically
    handled by Next as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create a `next.config.js` file and import the withSass method
    to use Sass in our project. Unfortunately, this file needs to be written in ES5
    syntax because the babel extension to use ES6 is not supported  at the moment
    ([https://github.com/zeit/next.js/issues/2916](https://github.com/zeit/next.js/issues/2916)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/next.config.jsIn this file, we can also add custom Webpack configuration
    if we need it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we need to create a special file in the `pages` directory called `_document.js`.
    This file is automatically handled by Next.js, and here we can define the head
    and body of our document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/pages/_document.jsThe path to the CSS file (`/_next/static/style.css`)
    is by default; we should use that one to use styles in our project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create some components to wrap up our pages. The first one we need
    to create is a navbar for menu options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Navbar.jsxThe Link component is not the same as the React
    Router Link. There are a few differences; for example, the React Router Link uses
    the "to" prop and the Next Link uses "href" to specify the URL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can add Sass styles for our `navbar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Navbar.scss'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we need to create our Layout component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Layout.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'The styles for our Layout are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Layout.scss'
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you remember the recipe in [Chapter 5](dafa4ab9-3353-4faf-8af0-f3739c6d5e78.xhtml), *Mastering
    Redux*,  about listing the top 100 cryptocurrencies from CoinMarketCap (`Repository:
    Chapter05/Recipe2/coinmarketcap`)? In this recipe, we are going to do the same
    using Next.js. The first thing we need to do is to modify the page''s `index.js`
    file and do an async `axios` request in the `getInitialProps` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/pages/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create the `Coins` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Coins.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'The styles for the `Coins` component are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Coins.scss'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created all the pages and components, let''s test our Next
    application by running `npm run dev`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3fce3ceb-4c6d-44df-acdc-dcd320c4437f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now see how it is rendering it in the HTML view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34746655-239c-4230-8419-333d76ce7bd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Banzai! The HTML is rendered with SSR and is perfect for improving the SEO.
    As you can see, creating an application with Next is super fast, and we avoid
    a lot of configuration when enabling SSR.
  prefs: []
  type: TYPE_NORMAL
