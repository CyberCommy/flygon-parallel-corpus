- en: Chapter 5. Monitoring and Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a large computer infrastructure, system administrators cannot easily handle
    the monitoring of all system services and hardware issues for every machine. There
    should be a tool that helps gather the statuses of every machine in the infrastructure
    and presents them in a comprehensive way to the system administrators. Therefore,
    monitoring systems have been developed to satisfy the needs of monitoring a wide
    variety of computer infrastructure and help prevent system or hardware damage.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is an exploration of the world of monitoring and logging tools
    and the methodologies needed to better implement the right tools and configure
    them with the right parameters to guard and supervise a personalized computer
    infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through this chapter, you are going to learn these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The most common open source monitoring tools available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up Nagios as a monitoring server with some clients to monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The variety of tools used as a logging server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up and configure syslog-ng as a logging server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source monitoring tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring tools can show real-time information about the system, service, and
    hardware status. Through this information, a system administrator can tell whether
    there is something acting weirdly or showing weakness. Then, they can act and
    try to resolve the issue before it gets worse.
  prefs: []
  type: TYPE_NORMAL
- en: This section presents the most common open source monitoring tools. A monitoring
    tool is usually chosen depending on what its main need is. Some monitoring tools
    are specialized in monitoring the characteristics of a set of machines. Others
    help store and generate a graph of the history to be used for future system analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations rely on their monitoring tools to output, in order to not
    only maintain their system and prevent potential problems, but also to determine
    their system's rush hours and when the system is more idle status This helps them
    rather reinforce their system capacities and save power and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Ganglia
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by talking about one of the most common monitoring system tools.
    Ganglia is a scalable distributed monitoring system for high-performance computing
    infrastructures. It is widely used with clusters and grid architectures. It is
    a web-based tool that allows its users to visualize the history of a machine's
    statistics, such as CPU load averages, network usage, and so on. It has been developed
    to achieve a low per-node overhead and high concurrency. It is currently used
    by thousands of clusters worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: '![Ganglia](img/B04674_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://assets.digitalocean.com/](http://assets.digitalocean.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ganglia is based on two basic services, one installed on the client machine
    and one on the server. On the client-side, the service is called **gmond**. gmond
    is a multithreaded daemon that runs on the client machines that we want to monitor.
    Its services are basically related to:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring a machine's status change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Announcing the relevant changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening to the state of other Ganglia nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to requests for the XML descriptions of the machines it is running
    on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we have the Ganglia PHP web frontend, which is installed on the monitoring
    server. It provides a view of the gathered information via real-time, dynamic
    web pages. These pages are the dashboards provided by Ganglia to its users (including
    system administrators). They are well organized in a meaningful way to present
    the machine's status to the system administrators to make the diagnostics part
    much more easier for them. The Ganglia web frontend stores data about machines
    for up to 1 year, and it has a lot of customizable parameters for viewing a machine's
    status history.
  prefs: []
  type: TYPE_NORMAL
- en: Ganglia is a very useful tool for monitoring machines' statuses and has a very
    reliable dashboard for history management and all types of troubleshooting related
    issues. Still, it is not a tool that can easily monitor every single service,
    especially when working in a server environment in which system administrators
    prioritize service administration over the machine itself.
  prefs: []
  type: TYPE_NORMAL
- en: '![Ganglia](img/B04674_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://bezha.od.ua](http://bezha.od.ua)'
  prefs: []
  type: TYPE_NORMAL
- en: OpenNMS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**OpenNMS** is an open source, enterprise-grade network monitoring and management
    platform. It is a distributed and scalable management application for all aspects
    of network management. It is designed to be highly customizable to create a unique
    and integrated management solution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenNMS supports four main functional areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Event management and notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovery and provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenNMS is accessible via a web-based interface that is smart and well organized
    to create high-level reports from the databases and the collected performance
    data. It is well used for its monitoring using the SNMP protocol, alerts/notifications,
    reporting, escalations, and its well-organized and clear dashboard. Still, it
    is pretty difficult to learn how to use it and personalize it by making personalized
    scripts. Also, most of the advanced features are paid and other costs are included.
    It could take a lot of time to set up and configure to work perfectly, but the
    result is always more than satisfying.
  prefs: []
  type: TYPE_NORMAL
- en: '![OpenNMS](img/B04674_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://docs.opennms.org](http://docs.opennms.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Zabbix** is a piece of open source enterprise-level software used for the
    real-time monitoring of networks and applications. It has been designed to monitor
    and track the status of various network services, servers, and other pieces of
    network hardware. It has the capacity to monitor the main protocols (HTTP, FTP,
    SSH, POP3, SMTP, SNMP, MySQL, and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zabbix](img/B04674_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://image.slidesharecdn.com](http://image.slidesharecdn.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix features a high-performance capacity for handling hundreds of thousands
    of devices. Also, it has the capacity of auto-discovery to identify machines within
    the same network. Zabbix comes with a web-based interface meant to show the monitoring
    dashboard. This interface is accessible via a secure user's authentication, and
    it has distributed monitoring with a centralized web administration that can visualize
    and compare any value it monitors. This dashboard can be customized to the needs
    of its user.
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix has the capability to monitor just about any event on your network, from
    network traffic to how many papers are left in your printer.
  prefs: []
  type: TYPE_NORMAL
- en: However, Zabbix is more complex to set up and configure compared to other monitoring
    tools and it requires a good documentation to install it with best practices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Zabbix](img/B04674_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://dist.alternativeto.net/](http://dist.alternativeto.net/)'
  prefs: []
  type: TYPE_NORMAL
- en: Zenoss
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Zenoss**, sometimes called **Zenoss Core**, is a free open source application,
    server, and network management platform based on the Zope application server.
    It provides system administrators with a web-based interface that offers the capacity
    to monitor availability, inventory/configuration, performance, and events.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Zenoss features the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring a remote location worldwide through a nice-looking map, such as Google
    Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A beautiful web interface that is very user friendly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic discovery of client system parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work with simple and plain SNMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zenoss looks very advanced and fancy, but still it has a slightly slow web interface.
    It doesn't support real-time notification. We should always wait for it to process
    the information to have a clear view on what is happening on the environment.
    It has a single dashboard, which makes monitoring a little difficult for many
    system administrators. Also, it is a limited open source solution; for more advanced
    features, we need to pay more. However, for those willing to pay and invest in
    it, we would say that it is a very good choice.
  prefs: []
  type: TYPE_NORMAL
- en: '![Zenoss](img/B04674_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://socializedsoftware.com/](http://socializedsoftware.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Nagios
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nagios** is an open source application for monitoring systems, networks,
    and infrastructure. It offers monitoring and alerting services for servers, network
    equipment, applications, and services on large computer infrastructures. It has
    two types of alerts, one for notifying the issue and the other for notifying whether
    the issue has been resolved.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nagios](img/B04674_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://n2rrd-wiki.diglinks.com](http://n2rrd-wiki.diglinks.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Nagios monitors network services, host resources, and probes via network plugins
    and via remotely run scripts. It has a large community, which has allowed the
    development of some really powerful plugins. It is considered one of the easiest
    monitoring tools to set up and use via its web interface. Still, it has some downsides
    related to the quality of third-party plugins and some complex writing and configuring
    of self-created plugins. Finally, it triggers a lot of notifications and alerts,
    so we might need to configure it with the proper plugins to help monitor everything
    in the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Icinga
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Icinga** is an open source system and network-monitoring tool. It was originally
    created as a fork of the Nagios monitoring system. It is well developed in terms
    of its web interface, to provide something more beautiful and more interactive
    than Nagios.'
  prefs: []
  type: TYPE_NORMAL
- en: Icinga's efficacy lies in its capacity to implement really powerful plugins.
    It implements many famous preferment graphical tools, such as PNP4Nagios, inGraph,
    and Graphite. Icinga's most famous feature is its lightness, where it doesn't
    overload the system when running and it generates an information graph in real
    time. For extremely big infrastructures, Icinga is designed to run on multithreads
    to run thousands of checks every second without any overload on the system's resources.
  prefs: []
  type: TYPE_NORMAL
- en: '![Icinga](img/B04674_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://www.icinga.org/](https://www.icinga.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Icinga has a pretty large community, and they help integrate patches very quickly.
    There are two official versions of **Icinga**: one for the **Web 1 Icinga** and
    one for the **Web 2 Icinga2**. But it is still on the way to being well developed.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Icinga](img/B04674_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://www.icinga.org/](https://www.icinga.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Nagios as a monitoring server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we are going to work with Nagios as our best choice, considering
    the performance and the simplicity of its setup and configuration. As we have
    already mentioned, Nagios is open source software that can be installed on multiple
    Linux distributions. In our case, we will be installing it on CentOS 7\. It is
    a network, infrastructure, and server-monitoring tool. It will be monitoring switches,
    applications, and services. It has an alerting feature that helps inform users
    about all issues that occur while the infrastructure is being monitored. It also
    alerts the user if the issues have been fixed. Other than monitoring, Nagios also
    has the ability to identify system or network issues that could cause problems,
    with real-time problem notification. Furthermore, it has some security features,
    by virtue of which it can identify security breaches in the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to install Nagios on a machine. It will act as
    our monitoring server. We need a test client to have it monitored. The client
    will have some common services; we will try to mess with them a little to test
    the Nagios notification service.
  prefs: []
  type: TYPE_NORMAL
- en: Let's talk a bit about the things we need before we start our monitoring server
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to have the **Linux Apache MySQL PHP** (**LAMP**) services installed
    on our machine. Since Nagios will be accessible via the web interface, having
    a web server installed is something obvious. For a more detailed and secure web
    server installation, you can go back and check out [Chapter 3](ch03.html "Chapter 3. Linux
    for Different Purposes"), *Linux for Different Purposes*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nagios won''t be installed from the CentOS 7 package manager. We have to download
    it and then compile it, so we need basic compiling tools and a downloading tool
    to download the Nagios source code archive. We will install these using Yum, the
    CentOS package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We wait until the installation is done and then proceed to the next step of
    the preparation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to run the Nagios process, we need to create a Nagios user and give
    it a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We need to make sure that we are using well-secured passwords while creating
    any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create a new group called `nagcmd` to allow external commands to be
    submitted through the web interface once it''s up-and-running . Then, we need
    to add both Nagios and Apache to this group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We move on to the final step, which is downloading the source archive for the
    latest version of Nagios. To do the downloading, we will be using **Wget**, a
    tool that we have already installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'During this tutorial, we will be using Nagios 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After downloading the latest Nagios stable version, we need to extract it.
    Well, since Nagios will be installed at the position where we are going to extract
    its source, we are going to put it in an appropriate location. We have a choice
    between `/usr/local` and `/opt`, so we need to copy the source package file there
    and then extract it. For this example, we will just go with `/usr/local`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After extracting the archive, there will be a new folder created, holding the
    named Nagios and including the corresponding version. We need to go inside the
    folder to start compiling it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Just before we start the compiling process, we need to run the configuration
    script that will help run the compiling process with no error by configuring it
    to use the available compiling tools that we have installed previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This configuration process has the option to set up the latest created group
    as the one that will be running the internal commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are actually able to start the compiling process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command can take a lot of time depending on the machine's processing power.
  prefs: []
  type: TYPE_NORMAL
- en: 'After doing this, we proceed to the installation phase. We need to install
    Nagios, its initialization scripts, some sample configuration files, and the Nagios
    web interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Before moving on the next step, we need to set up our Nagios administrator
    user and password to access the web interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then, we type in the password twice to have our web interface administrator
    well created and configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'After Nagios has been installed, we can add some useful plugins. First, we
    need to download the latest stable source version of those plugins. We need to
    go to the `/usr/local` folder and download the plugin''s source archive there.
    This step installs everything there well organized for future diagnostics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we start the download using **Wget**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We used the `sudo` command because during the download, the file is written
    in a folder with no user access to write on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the download, we can start extracting the archive using the
    same command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we enter the directory we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we need to compile the source files. Just before compiling, we need
    to run the configuration script with some useful options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For the configuration option, we set the user and group Nagios as the default
    to access and use the plugins. Also, we use OpenSSL to secure the plugin usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we start compiling the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can start the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this command is executed with no errors, we can say that our Nagios Plugins
    are well installed. We can move on to set up the **Nagios Remote Plugin Executor**
    (**NRPE**). This is a Nagios agent that simplifies remote system monitoring using
    scripts that are hosted on remote systems. We need to download, configure, compile,
    and install it in the same way. We first need to find the latest stable version
    of the source package, and then we download it to `/usr/local`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we extract it at the same location, and go inside the folder to start
    the compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by running the NRPE configuration script. We define the user and the
    group using the Nagios process and the security tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we run the compiling command, followed by the installation commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we configure the `xinetd` startup script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to look for the line that starts with `only_from` and then, add the
    IP address of the monitoring server. It can be a public or a private address depending
    on where we want to make the server accessible from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we save the file to give only our Nagios server the capacity to communicate
    with NRPE. After that, we add the following line to define the port number for
    the NRPE service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To have this configuration active and running, we need to restart `xinetd`
    to launch **NRPE**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have our Nagios monitoring server officially installed. We can proceed
    with the configuration steps. We go to the Nagios main configuration file and
    activate the folder that will store all the configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we uncomment the following line, save the file, and exit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is just an example of a server. It can also be done for network equipments
    or workstations or any other type of network-connected machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the configuration folder that will store the configuration file for
    each machine that will be monitored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we move on to configure the Nagios contacts file to set the e-mail address
    associated with the Nagios administrator. Usually, it is used to receive alerts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to change the administrator e-mail address. To do so, we need
    to type in the right one after the `email` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Then, we save the file and exit it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we proceed to the `check_nrpe` command configuration. We start by adding
    a new command to our Nagios server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We add the following lines at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We save the file and exit to allow the new command to become usable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we go ahead and configure the access restriction to IP addresses that
    can access the Nagios web interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to comment these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we uncomment the following three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These lines appear twice in the configuration file, so we need to do the same
    thing twice in the same file. This step is only for reinforcing Nagios security.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can always add any network or address to allow it to have access to the
    monitoring server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We can always check whether there is any configuration error in the Nagios
    configuration file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Just before starting Nagios, we need to make the Nagios CGI accessible by changing
    SELinux actions from enforcing mode to permissive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we change this line to look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can restart the Nagios service and add it to the startup menu. We also
    need to restart the Apache service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We can now access the Nagios server, but still we need to be allowed to try
    accessing it from the server itself, or from a machine that is connected to the
    network that is allowed to access the server. So, we go to the web browser and
    type `http://Nagios_server_IP_Address/nagios`. Then, we type the admin username,
    `nagiosadmin`, and its password, which has already been defined earlier, to get
    access to the Nagios interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we move on to our client server—the one that we want to monitor using
    Nagios. First, we need to install the required packages. For CentOS 7, we need
    to have the EPEL repository installed in order to get the required packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can install the Nagios plugins and NRPE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start by updating the NRPE configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to find the line that starts with `allowed_hosts` and add the IP address
    of our monitoring server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we save and exit the file. To complete the configuration, we need to
    start the **NRPE** service and add it to the startup menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Once we are done configuring the host that we want to monitor, we go to the
    Nagios server to add it to the configuration folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Nagios server, we need to create a file with the name of the machine.
    We can take the machine hostname or put something that indicates the role of the
    machine or any other indication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the following lines, replacing `host_name` with the client hostname
    replacing the alias value with a short description of the server''s main job,
    and finally replacing address with the server IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'With this configuration saved, Nagios will only monitor whether the host is
    up or down. To make it do more, we need to add some services to monitor, such
    as HTTP and SSH. Also, we are adding the option to check whether the server is
    active. We need to open the same file and define a service block for each service
    that we want to monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we save the file and reload the Nagios service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the new server on the host list and its services on the services
    list. To test whether Nagios is doing its job, we disable the SSH service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Then, on the web interface, we can see how the service will go down from green
    to red. The red signal means that the test for that service has failed or has
    returned nothing, which means that the service is rather disabled or inaccessible.
    An error notification e-mail will be received by the Nagios administrator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Nagios as a monitoring server](img/B04674_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://thenullterminator.wordpress.com/](https://thenullterminator.wordpress.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we try the second test, to start the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To indicate that the service is back, another e-mail is received with the new
    status, where all its information will turn to green, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Nagios as a monitoring server](img/B04674_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://www.digitalocean.com](https://www.digitalocean.com)/'
  prefs: []
  type: TYPE_NORMAL
- en: Now, after setting up the first server, we can go ahead and add all the machines,
    including the switches, printers, and workstations that we need to monitor. Also,
    to be more practical, we should add only those services that we care about. So,
    if we have a server that runs a number of services and we will be using only two
    of them, it is pointless to add all of them and overload the server dashboard
    and the mailbox of the administrator with things that we don't care about, which
    are later treated as spam.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will configure the NRPE daemon to receive information from the clients
    about their status. First, at the Nagios server, we edit the Xinetd NRPE configuration
    file to add which IP address the server should listen from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add the IP address after the `only_from` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to add the NRPE service to the system services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We add the following line at the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'To have it submitted, we restart the `Xinetd` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we go to the client and make these modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: These three commands are used to activate the Nagios agent to send information
    about server load and disk storage. In our case, our disk is defined as `sda1`.
    We can check the naming of the disk using the `lsblk` command.
  prefs: []
  type: TYPE_NORMAL
- en: Tools to set up a logging server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging means collecting system and service output information. It can be simple
    information, a warning, or an error for telling the status of the concerned daemon.
    For a system administrator, the daily work load can be really heavy. Thus, they
    have always been adopting the best logging tools to monitor their infrastructure's
    behavior. Also, the relevant information should be readable and quickly understandable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many system administrators mainly use either of two open source solutions:
    **Syslog-ng** and **Rsyslog**.'
  prefs: []
  type: TYPE_NORMAL
- en: Rsyslog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rsyslog is a rocket-fast system for log processing. It offers high performance,
    great security, and a modular design. It has developed quickly and has evolved
    to be considered as a Swiss Army Knife in the logging field. It has a strong enterprise
    focus and also scales down to smaller systems. It supports MySQL, PostgreSQL,
    failover log destinations, syslog/tcp transport, fine-grained output format control,
    high-precision timestamps, queued operations, and the ability to filter parts
    of any message.
  prefs: []
  type: TYPE_NORMAL
- en: Rsyslog has the ability to listen to TCP/UDP connections, but with a downside
    due to its limitation to the log rate, where it can lose some of the log information
    during an overload. It can load a decent number of modules. It can also discriminate
    log filtering by program, source, message, PID, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Syslog-ng
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Syslog-ng is an open source implementation of the syslog protocol for Linux
    and Unix-like systems. It features content-based filtering, rich filtering compatibilities,
    and flexible configuration. It also adds some important features to `syslog`,
    such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: Using TCP for transporting logging information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to format log messages using the Unix-shell-like (bash) variable
    expansion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to send log messages to local applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to save logging information directly to a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classifying incoming log messages and, at the same time, extracting structured
    information from unstructured syslog messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing structured message formats transmitted over syslog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to correlate multiple incoming messages to form a more complex,
    correlated event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syslog-ng is the next generation successor of syslog. It is one of the best
    tools for managing logs; it treats the log entities as an object (source, destination,
    filter, and so on), and its syntax is easily understandable. It is a highly portable
    application and is available for many more platforms, which makes it very suitable
    for sites with diversity in platforms. It has the capacity to compare the contents
    of log messages to a database of predefined message patterns. Thus, Syslog-ng
    is able to identify the exact type of messages and sort them into message classes.
    Then, it can be used to classify the type of event described in the log messages.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are going to install and configure Syslog-ng in CentOS 7 to be our
    logging server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring Syslog-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, with the installation of CentOS 7, there will be `Rsyslog` installed
    for storing the log of the system and its applications. Luckily, we will have
    all our system log files stored and organized the way syslog wants. We will be
    using these log files with the installation of `Syslog-ng`, and we will have them
    organized in a more suitable way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, before starting the installation, we need to set up the EPEL repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the upcoming package repository checking and application availability
    is optional. We can always proceed with the installation of Syslog-ng.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that the EPEL repository has been added, we can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This command shows the list of repositories available for the YUM package manager
    to download and install the packages from. Now, after having the EPEL repository,
    we need to check whether any change needs to be made after adding it. So, we need
    to type in this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This command is not necessary; we wanted to use it for additional knowledge
    on how to check the Yum repository update.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to check the availability of the `syslog-ng` application in the newly
    added EPEL repository, we need to type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we go back to the installation phase. We will be using `yum` since we
    have properly verified the existence of the application package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We need to confirm the installation of these packages. Then, we wait until it
    is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'To activate `syslog-ng` and make it the default logging tool, we need to start
    by disabling rsyslog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we go to its configuration file to have it working in a proper way. We
    open the file using any text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we make the required change to make it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we can start the `syslog-ng` service and enable it to start
    during system startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: With this step, we have configured our logging server using `syslog-ng` to perform
    well-organized and useful logging.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s look at the references used throughout the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Ganglia home page, [http://ganglia.sourceforge.net/](http://ganglia.sourceforge.net/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OpenNMS home page, [http://www.opennms.org/](http://www.opennms.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Zabbix home page, [http://www.zabbix.com/](http://www.zabbix.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Zenoss home page, [http://zenoss.com/](http://zenoss.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Icinga home page, [https://www.icinga.org/](https://www.icinga.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nagios home page, [https://www.nagios.org/](https://www.nagios.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Rsyslog home page, [http://www.rsyslog.com/doc/master/index.html](http://www.rsyslog.com/doc/master/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Syslog-ng home page, [https://syslog-ng.org/](https://syslog-ng.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of this chapter, we introduced a variety of choices of open
    source monitoring and logging tools for CentOS 7 servers. Then, we discussed a
    step-by-step tutorial on how to set up and configure Nagios and Syslog-ng logging
    as our logging server. We also talked about some of these tools' major features
    that help simplify our choice.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will have a brief introduction to a variety of virtualization
    technologies. Also, we will take this opportunity to give you a step-by-step tutorial
    on establishing a small virtual machine.
  prefs: []
  type: TYPE_NORMAL
