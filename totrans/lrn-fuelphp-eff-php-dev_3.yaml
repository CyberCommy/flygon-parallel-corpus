- en: Chapter 3. The Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start building anything with our fresh-installed version of FuelPHP,
    let's first take a look at some of the main aspects of the architecture. We will
    also cover some of the places where you should put your code for the project and
    then follow this with examples in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Environments, constants, and configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FuelPHP bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Models, views, and controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environments, constants, and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As any developer will tell you, it''s never a good idea to edit files directly
    in the live production environment. To this end, FuelPHP has the notion of environments
    baked into its core. Environments allow for different configurations in each stage
    of the project''s life cycle. FuelPHP supports four environment settings, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\Fuel::DEVELOPMENT`: This is the default environment setting and also where
    you''ll start'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Fuel::TEST`: This is where you can run code with test data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Fuel::STAGING`: This is where you get client approval and acceptance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Fuel::PRODUCTION`: This is the live environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the environment is not set, the code will run in the development mode. Setting
    the environment can be done in several ways.
  prefs: []
  type: TYPE_NORMAL
- en: Server and Apache configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will teach you what probably is the easiest way of setting the
    environment variable, but only if you have access to the Apache configuration
    or virtual host file for the project domain. In the configuration or virtual host
    file, simply include the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `FUEL_ENV` code needs to be in uppercase as it's a PHP constant
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap PHP file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t have access to set the server configuration and want to get it,
    an alternative is to set the environment in the application bootstrap. This can
    be done in the `bootstrap.php` file located in `fuel/app/`, using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your environment configured, it''s worth thinking about the configuration
    for the project. FuelPHP follows a hierarchy when auto-loading configurations.
    This really comes in handy for database settings, meaning that your production
    connections can be more secure for the production and staging environments. In
    fact, the team doesn''t even need access to the database credentials for them
    to work on the project. The configuration directory structure can resemble the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The settings in the environment directories are treated as more important than
    those in the higher directories giving fine-grained configuration controls with
    a fallback. This is great for testing and ensuring that each environment can be
    configured differently, for example, third-party API connection details.
  prefs: []
  type: TYPE_NORMAL
- en: The same hierarchy is followed for package configurations. In this case, the
    package configuration in the application configuration folder is treated with
    greater importance than the configuration in the package directory. This allows
    the default options in packages to be overridden with a configuration file in
    the `app/config` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In relation to packages, the details of the path to their folders take the
    form of constants. The following are PHP constants set in the bootstrap file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`APPPATH`: The path to the application directory where your application code
    and directories sit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COREPATH`: The path to the core FuelPHP files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOCROOT`: The public folder for assets and the `index.php` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKGPATH`: The package directory path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VENDORPATH`: The path to the composer root directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Models, views, and controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No look at the architecture would be complete without mentioning the **model-view-controller**
    (**MVC**) design pattern. If you have written PHP before, or looked at any of
    the other numerous frameworks out there, you would have heard of the MVC pattern.
    It allows the logical separation of code. The controller handles the logic while
    the model ensures the consistency of data and also performs the interaction with
    the data store. The view presents the results of the controller and model to the
    user. So far, so good; why mention the MVC pattern? Well, FuelPHP introduces the
    ViewModel and some base classes to give you a head start on your project.
  prefs: []
  type: TYPE_NORMAL
- en: Views and ViewModels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Views are stored in the `views` folder within the `app` folder, for example,
    `fuel/app/views`.
  prefs: []
  type: TYPE_NORMAL
- en: They can be grouped together in subfolders and normally relate directly to a
    controller action, for example, `login.php`, which is located in `fuel/app/views/user/`,
    would relate to the `login` method within the `user` controller. It would also
    have a class name of `user/login`.
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth noting that the views can use variables passed to it from the
    controller or ViewModel. They can also use any core FuelPHP classes and native
    PHP functions. To help with the separation of the logic from the presentation
    it's recommended to only use basic `if` statements and loops.
  prefs: []
  type: TYPE_NORMAL
- en: Security is always important and, as such, all variables passed to a view will
    be sanitized using the configured output filters—usually `Security::htmlentities()`.
    This behavior can be changed or disabled from within each controller, as can the
    default functions that run from the configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the memory footprint of FuelPHP apps, views are "lazy-loaded". This
    means that they will only be rendered when called for or echoed.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned earlier about ViewModels; these act as the glue between controllers
    and views. When an application starts to get complex, it can become difficult
    to decide whether or not a piece of code should go in the controller or view.
    The code may have little to do with the application logic and more to do with
    the presentation logic. This is where ViewModels come in use.
  prefs: []
  type: TYPE_NORMAL
- en: ViewModels come into play after the user input has occurred. They then retrieve
    the data needed for the views. They don't manipulate the data, but can interact
    with the data store before the view.
  prefs: []
  type: TYPE_NORMAL
- en: Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The FuelPHP core model (`Model_Crud`) includes the basic CRUD (create, read,
    update, and delete) functions, making it quick and easy to start working with
    the data store. It is just a shortcut for working with tables and is not part
    of the ORM package. The naming conventions are the same for the `Model_Crud` and
    the `ORM` package; this makes it really easy to update to the ORM package for
    more complex data interactions. The ORM package includes many advanced pieces
    of functionalities, ranging from soft deletion to temporal historical record keeping.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ORM package will require you to define more details on the data, such
    as the relationships between database tables. We'll touch upon some of these when
    building the example application in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controllers are where the more interesting parts of the application happen.
    Like other parts of the project, the code has a logical location within the following
    folder structure. Controllers go in the `fuel/app/classes/controller` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The router takes the URL, loads the required controller, and then passes the
    request to the corresponding action or method within the controller. For example,
    navigating to the `http://project.dev/home/index` URL would call the `index` method
    in the home controller. The structure of the controller would look something like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actions or methods within the controller are prefixed with action_, this is
    to help you use the reserved PHP method names, such as `list`, and still have
    a logic name for the controller methods. Other methods can be created, but without
    the `action_` prefix, they can only be called directly rather than through the
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are building an API or setting up an AJAX system, it is possible to
    separate out the methods. In the following example, the `action_example` would
    take GET requests while POST requests would go to the `post_example` method as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This functionality comes into play with the base controller templates, which
    you can use as a starting point when creating your application. The separation
    of the `action_` and `post_` methods will only work with the hybrid or rest base
    controllers. There are four base templates—base, template, rest, and hybrid.
  prefs: []
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The template controller is an extension of the base controller mentioned previously,
    that has template support built-in using predefined `before()` and `after()` methods.
    It can be used to wrap your view in a layout with a header and footer. Your layout
    template should be stored in `fuel/app/views/template.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Rest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like the template controller, the rest controller is an extension of the base
    controller. Instead of built-in template support actions, it has RESTful support
    built into it, making it easier to build APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If, in your rest controller, you have added a `before()` or router method, you
    will need to call the parent method `parent::before()` for all of it to work.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The hybrid controller brings together the rest and template controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have run through some of the basic parts of the FuelPHP
    architecture. We have seen that FuelPHP gives a great starting point with extendable
    controllers and models. These provide a great head start to most projects and
    introduce some functionalities, which is a first for any PHP framework; for example,
    the temporal ORM model.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start using this knowledge to create a demo application.
  prefs: []
  type: TYPE_NORMAL
