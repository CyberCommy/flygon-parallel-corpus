- en: Advanced Project Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After this chapter, we will begin building more complex applications, and we
    will need some additional tools and libraries. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using vue-cli to scaffold Vue applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and using Single-File Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up our development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create more complex Single-Page Applications, it is recommended to use a
    few tools to ease the development. In this section, we will install them to have
    a good development environment ready. You need to have both Node.js and npm installed
    on your computer. Ensure that you have at least Node 8.x, but the latest Node
    version is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Installing vue-cli, the official command-line tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first package we will need is vue-cli, which is a command-line tool that
    will help us create Vue applications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter this command in the terminal, and it will install vue-cli and save it
    as a global package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You may need to run this command as an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test whether vue-cli is working, print its version with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Code editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any text editor will do, but I recommend using Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    or Atom ([https://atom.io/](https://atom.io/)). For Visual Studio Code, you need
    the `vetur` extension from octref ([https://github.com/vuejs/vetur](https://github.com/vuejs/vetur))
    and for Atom, the `language-vue` extension from hedefalk ([https://atom.io/packages/language-vue](https://atom.io/packages/language-vue)).
  prefs: []
  type: TYPE_NORMAL
- en: Recent versions of Jetbrains' WebStorm IDE support Vue out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: You can also install the extensions that add support to the preprocessor languages
    such as Sass, Less, or Stylus.
  prefs: []
  type: TYPE_NORMAL
- en: Our first full-blown Vue application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous applications were both made in quite an old-school way, with `script`
    tags and simple JavaScript. In this section, we will discover new ways of creating
    Vue applications with some powerful features and tools. In this part, we will
    create a mini project to demonstrate the new tools we will use as we move on.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The vue-cli tool enables us to create ready-to-use app skeletons to help us
    get started on a new project. It works with a project template system that can
    ask you some questions to customize the skeleton to your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the official project templates with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the list displayed in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8caaafd7-e612-44c7-b349-3375f93bc7c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three main types of official templates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'simple: Uses no build tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'webpack: Uses the very popular webpack bundler (recommended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'browserify: Uses the browserify build tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recommended official template is the `webpack` template. It features all
    you need to create a full-scale SPA with Vue. For the purpose of this book, we
    will use `webpack-simple` and introduce features progressively.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new application project using one of these templates, use the `npm
    init` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the `webpack-simple` official template in a new `demo` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This project template features a ready-to-use minimal webpack configuration.
    The command will ask a few questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Answer the questions of vue-cli like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Vue-cli should have now created a `demo` folder. It has a `package.json` file
    and other configuration files already filled for us. The `package.json` file is
    very important; it holds the main information about the project; for example,
    it lists all the packages that the project depends on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the newly created `demo` folder and install the default dependencies
    already declared in the `package.json` file added by the `webpack-simple` template
    (such as vue and webpack):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Our app is now set up!
  prefs: []
  type: TYPE_NORMAL
- en: From now on, we will fully use the ECMAScript 2015 syntax and the `import`/`export`
    keywords to use or expose modules (which means files that export JavaScript elements).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any Vue app need a JavaScript entry file where the code will start:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the content of the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new JavaScript file called `main.js` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: First, we import the Vue core library into the file. Then, we create a new root
    Vue instance that will attach to the element of `id` app in the page.
  prefs: []
  type: TYPE_NORMAL
- en: A default `index.html` file is provided by vue-cli for the page with an empty
    `<div id="app"></div>` tag. You can edit it to change the page HTML to your liking.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we display a `div` element containing the `'hello world'` text, thanks
    to the `render` option we will introduce in the "Render functions" section.
  prefs: []
  type: TYPE_NORMAL
- en: Running our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the `dev` npm script generated by vue-cli to start the app in development
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will launch a web app on a web server port. The terminal should display
    that the compilation was successful and what URL to use to access the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/70045016-b634-4ec2-a1ad-a9262aa61474.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open this URL in your browser to see the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cddefb10-81c2-4e72-aa4c-3caf893cdc3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Render functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue uses a virtual DOM implementation that consists of a tree of elements with
    JavaScript objects. It then applies the virtual DOM to the real browser DOM by
    computing the differences between the two. This helps avoid DOM operations as
    much as possible since they are usually the main performance bottleneck.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, when you use templates, Vue will compile them into render functions.
    If you need the full power and flexibility of JavaScript, you can directly write
    the render functions yourself, or write JSX, which will be discussed later.
  prefs: []
  type: TYPE_NORMAL
- en: A render function returns a small part of that tree, that is specific to its
    component. It uses the `createElement` method, which is passed as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, `h` is an alias of `createElement`, which is very common and
    needed to write JSX. It comes from the name of this technique consisting of describing
    HTML with JavaScript--Hyperscript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `createElement` (or `h`) method takes up to three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one is the type of the element. It can be an HTML tag name (such as
    `'div'`), a component name registered in the application, or directly a component
    definition object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second argument is optional. It is the data object that defines attributes,
    props, event listeners, and the like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third argument is optional too. It is either a simple plain text, or an
    array of other elements created with `h`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consider the following `render` function as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It will output the following DOM in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We will cover render functions in further detail in [Chapter 6](93f61b3d-c61f-4b98-9bab-e9906c087530.xhtml),
    *Project 4 - Geolocated Blog*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Babel is a very popular tool that compiles JavaScript code so that we can use
    new features in older and current browsers (such as JSX or arrow functions). It
    is recommended to use babel in any serious JavaScript project.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `webpack-simple` template comes with a default babel configuration,
    which uses the `env` babel preset that supports all the stable JavaScript version
    from ES2015\. It also includes another babel preset called `stage-3`, which supports
    the upcoming JavaScript features such as the `async/await` keywords and the object
    spread operator that are commonly used in the Vue community.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to add a third preset specific to Vue, which will add support for
    JSX (we will need it in the 'JSX' section later in the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: We also need to include the polyfills provided by babel so that new features
    such as `Promise` and generators work in the older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: A polyfill is code that checks whether a feature is available in the browser,
    and if not, it implements this feature so that it works like it is native.
  prefs: []
  type: TYPE_NORMAL
- en: Babel Vue preset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now install and use the `babel-preset-vue` in the Babel configuration
    of our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'So first, we need to install this new preset in the dev dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The main babel configuration is done in the `.babelrc` JSON file already present
    in the project root.
  prefs: []
  type: TYPE_NORMAL
- en: This file may be hidden in your file explorer, depending on the system (its
    name starts with a dot). However, it should be visible in your code editor if
    it has a file tree view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open this `.babelrc` file and add the `vue` preset to the corresponding list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Polyfills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's also add the Babel polyfills to use new JavaScript features in older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `babel-polyfill` package in your dev dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Import it at the beginning of the `src/main.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will enable all the necessary polyfills for the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the project has been scaffolded, you may need to update the packages that
    it uses.
  prefs: []
  type: TYPE_NORMAL
- en: Updating manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check whether there are new versions available of the packages used in the
    project, run this command in the root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If new versions are detected, a table is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b35444cf-12e8-4295-abf4-2c45b60a5fd5.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Wanted` column is the version number compatible with the version range
    specified in the `package.json` file. To learn more about this, visit the npm
    documentation at [http s://docs.npmjs.com/getting-started/semantic-versioning](https://docs.npmjs.com/getting-started/semantic-versioning).
  prefs: []
  type: TYPE_NORMAL
- en: 'To update a package manually, open the `package.json` file and locate the corresponding
    line. Change the version range and save the file. Then, run this command to apply
    the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to read the change logs of the packages you update! There might
    be breaking changes or improvement you will be happy to know about.
  prefs: []
  type: TYPE_NORMAL
- en: Updating automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To update the packages automatically, use this command in the root folder of
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This command will only update the versions compatible with those specified in
    the `package.json` file. If you want to update packages to other versions, you
    need to do it manually.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you update the `vue` package containing the core library, you should also
    update the `vue-template-compiler` package. It is the package that compiles all
    your component templates when using webpack (or another build tool).
  prefs: []
  type: TYPE_NORMAL
- en: Both of these packages must always be at the same version. For example, if you
    use `vue 2.5.3`, then `vue-template-compiler` should also be at version `2.5.3`.
  prefs: []
  type: TYPE_NORMAL
- en: Building for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it will be time to put your app into production on a real server, you
    will need to run this command to compile your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, when using the `webpack-simple` template, it will output the JavaScript
    files into a `/dist` folder in the project. You will only need to upload this
    folder and the `index.html` file that is present in the root folder. You should
    have the following file tree on your server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Single-File Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will introduce an important format widely used in the creation
    of real production Vue apps.
  prefs: []
  type: TYPE_NORMAL
- en: Vue has its own format call **Single-File Component** (**SFC**). This format
    was created by the Vue team, and the file extension is `.vue`. It allows you to
    write one component per file, with both the template, and the logic and styling
    of this component in one place. The main advantage here is that each component
    is clearly self-contained, more maintainable, and easily shared.
  prefs: []
  type: TYPE_NORMAL
- en: 'An SFC describes a Vue component with an HTML-like syntax. It can contain three
    types of root blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<template>`, which describes the template of the component with the template
    syntax we already used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<script>`, which contains the JavaScript code of the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<style>`, which contains the style used by the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example of an SFC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Let's try this component now!
  prefs: []
  type: TYPE_NORMAL
- en: Put the above component source in a new `Test.vue` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `main.js` file and import the SFC using the `import` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `render` option and instead, copy the definition of the `Test` component
    with the object spread operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, I demonstrated another way to add the root component
    to the app--using the JavaScript Spread operator--so the `...App` expression will
    copy the properties to the app definition object. The main advantage is that we
    won't have a useless top component in the dev tools anymore; it will be our direct
    root component now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and open the URL displayed in the terminal to see the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/bcd377ab-9146-4ad7-8711-97d392d83d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `<template>` tag contains the template of the component. Like earlier, it
    is HTML with the Vue special syntax (directives, text interpolation, shorthands,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a `<template>` tag in an SFC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the template of our component will consist of a `ul` element
    containing a list of `li` elements displaying the titles of the movies.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't put a `<template>` tag in your SFC, you will need to write a render
    function or your component won't be valid.
  prefs: []
  type: TYPE_NORMAL
- en: Using Pug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pug (formerly Jade) is a language that compiles to HTML. We can use it inside
    our `<template>` tag with the `lang` attribute set to "pug":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To compile the Pug code in our SFC, we need to install these packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Packages that are needed for the development are called development dependencies
    and should be installed with the `--save-dev` flag. The direct dependencies that
    the app requires to run (for example, a package to compile markdown to HTML) should
    be installed with the `--save` flag.
  prefs: []
  type: TYPE_NORMAL
- en: Script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `<script>` tag contains the JavaScript code associated with the component.
    It should export the component definition object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a `<script>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the component will have a `data` hook returning an initial
    state with a `movies` array.
  prefs: []
  type: TYPE_NORMAL
- en: The `<script>` tag is optional if you don't need any options in the component
    options, which defaults to an empty object.
  prefs: []
  type: TYPE_NORMAL
- en: JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSX is a special notation used inside the JavaScript code to express HTML markup.
    It makes the code responsible for describing the view closer to the pure HTML
    syntax, while still having the full power of JavaScript available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a render function written with JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You can use any JavaScript expression inside single brackets.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in this example, we can use any JavaScript code to compose our
    view. We can even use the `map` method of the `movies` array to return some JSX
    for each item. We also used a variable to dynamically set the CSS class of the
    movie elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the compilation, what really happened is that a special module called
    `babel-plugin-transform-vue-jsx` included in `babel-preset-vue` transformed the
    JSX code into pure JavaScript code. After compilation, the preceding render function
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, JSX is a syntax that helps write render functions. The final
    JavaScript code will be quite close to what we could have written using `h` (or
    `createElement`) manually.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover render functions in more detail in [Chapter 6](93f61b3d-c61f-4b98-9bab-e9906c087530.xhtml),
    *Project 4 - Geolocated Blog*.
  prefs: []
  type: TYPE_NORMAL
- en: Style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Single-File Component can include multiple `<style>` tags to add CSS to
    the app that is related to this component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a very simple example of component style applying some CSS rules to
    the `.movies` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Scoped styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can scope the CSS contained inside a `<style>` tag to the current component
    with the scoped attribute. It means that this CSS will only be applied to the
    elements of this component's template.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use generic class names such as movie and ensure that it
    won''t conflict with the rest of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c0c86f93-a28f-4002-8141-78469f0d8495.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This works, thanks to a special attribute applied to both the template and
    the CSS with PostCSS (a processing tool). For example, consider the following
    scoped styled component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'It is equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, a unique attribute was added to all the template elements and
    to all the CSS selectors so that it will only match this component's template
    and will not conflict with other components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scoped styles don''t eliminate the need for classes; due to the way browsers
    render CSS, there might be performance loss when selecting a plain element with
    an attribute. For example, `li { color: blue; }` will be many times slower than
    `.movie { color: blue; }` when scoped to the component.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding preprocessors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, CSS is rarely used as is. It is common to write styles with a more
    powerful and feature-rich preprocessor language.
  prefs: []
  type: TYPE_NORMAL
- en: On the `<style>` tags, we can specify one of these languages to use with the
    `lang` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will take this template as the base for our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sass is a well-known CSS preprocessor used by a lot of tech companies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable Sass in your component, install the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in your component, add a `<style>` tag with the `lang` attribute set
    to `"sass"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, test your component with the `vue build` command. You should have a result
    similar to this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a154cb93-95aa-4ac3-8734-6c1c337db551.png)If you want to use the
    SCSS syntax variant of Sass, you need to use `lang="scss"`.'
  prefs: []
  type: TYPE_NORMAL
- en: Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Less has a simpler syntax than other CSS preprocessing languages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Less, you need to install the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in your component, set the `lang` attribute to `"less"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Stylus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Stylus is more recent that Less and Sass, and is also quite popular:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, for Stylus, you need these packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `<style>` tag, set the `lang` attribute to `"stylus"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Components inside components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to write Single-File Components, we want to use them inside
    other components to compose the interface of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a component inside another component, we need to import it and expose
    it to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new component. For example, here''s a `Movie.vue` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need a `Movies.vue` component if you haven''t created it already.
    It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `Movie` SFC in the script of the `Movies` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `components` option to expose some components to the template, with
    an object (the key is the name that we will use in the template, and the value
    is the component definition):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use the component with the `Movie` tag in the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using JSX, you don''t need the `components` option, as you can use
    a component definition directly if it starts with a capital letter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed several tools that will allow us to write a real
    production-ready application using the recommended methods. Now, we can scaffold
    an entire project skeleton to start building great new apps. We can write components
    in various ways, but we can do so in a coherent and maintainable manner with the
    Single-File Components. We can use these components inside our application or
    inside other components to compose our user interface with multiple reusable components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create our third application with all we learned
    to this point, plus some new topics, such as routing!
  prefs: []
  type: TYPE_NORMAL
