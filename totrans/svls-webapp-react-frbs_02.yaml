- en: Integrate React App with Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](71a1e418-0815-400e-a3fe-7b0a26fd447b.xhtml), *Getting Started
    with Firebase and React*, we saw how we can integrate Firebase with JavaScript
    and created our first sample application, which gave us a brief idea of how Firebase
    works. Now that you've completed your first web app using JavaScript and Firebase,
    we'll build the helpdesk application with React and Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: We will start off by setting up the React environment, and then we will take
    a quick look at the JSX and React component methods. We'll also see how we can
    create form components in React using JSX and submit these form values in the
    Firebase Realtime Database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of the points that we''ll focus on this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: React Environment Setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction of JSX and React Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Form With JSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase Integration With React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save and Read the data from Realtime Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to create a folder structure similar to our Hello World app,
    which we made in [Chapter 1](71a1e418-0815-400e-a3fe-7b0a26fd447b.xhtml), *Getting
    Started with Firebase and React*. The following screenshot describes the folder
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/07f1cb0e-4dc0-4051-9e18-ee0d5db18194.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we start making an application with ReactJS, we need to do some setup,
    which just involves an HTML page and the `reactjs` library. Once we have finished
    creating the folder structure, we need to install both our frameworks: ReactJS
    and Firebase. It''s as simple as including JavaScript and CSS files in your page.
    We can do this via a **Content Delivery Network** (**CDN**), such as Google or
    Microsoft, but we will fetch the files manually in our application so that we
    don''t have to be dependent on the internet and can work offline.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we have to go to [https://reactjs.org/](https://reactjs.org/) and see
    the latest available version that we will use in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/05b3a56e-23a1-4afb-baef-4d6cb7ee64d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As of writing this book, the latest version available is v16.0.0\. We will
    use CDN React packages in this chapter to build our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding versions are only meant for development, and that is not suitable
    for production. To use minified and optimized production versions, we need to
    use these production packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use a different version, replace number `16` with the version
    that you want to use in your app. Let''s include development version CDN into
    your HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So now that we''ve got the ReactJS from where we''ve initialized our app, let''s
    start writing our first Hello World app using `ReactDOM.render()`. The first argument
    of the `ReactDOM.render` method is the component, which we want to render, and
    the second is the DOM node to which it should mount (append). Observe the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to translate it to vanilla JavaScript because all browsers don''t support
    the JSX and ES6 features. For this, we need to use transpiler Babel, which will
    compile the JSX to vanilla JavaScript before the React code runs. Add the following
    library in the head section along with React libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the script tag with React code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `<script type="text/babel">` tag is the one that actually performs the transformation
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The XML syntax for JavaScript is called **JSX**. We will explore this further
    in more detail. Let''s open the HTML page in our browser. If you see Hello, world!
    in your browser, then we are on track. Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3c8f5f0c-ecfb-4e39-9dda-e508da724a13.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can see that it shows Hello, world! in your
    browser. That looks nice. We have successfully completed our setup and built our
    first Hello World app with ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: React components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is based on a modular build with encapsulated components that manage their
    own state, so it will efficiently update and render your components when data
    changes. In React, a component's logic is written in JavaScript instead of templates,
    so you can easily pass rich data through your app and manage the state out of
    the DOM. Using the `render()` method, we are rendering a component in React that
    takes input data and returns what you want to display. It can either take HTML
    tags (strings) or React components (classes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at examples of both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we are passing HTML as a string into the `render` method that
    we used before creating the `<Navbar>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are rendering the component just to create a local
    variable that starts with an uppercase convention. Use the uppercase convention
    in JSX to avoid distinguishing between local component classes and HTML tags because
    JSX is an extension of JavaScript. In React, we can create our React elements
    or components in two ways: either we can use Plain JavaScript with `React.createElement`
    or React''s JSX. So, let''s create our first form component with JSX.'
  prefs: []
  type: TYPE_NORMAL
- en: What is JSX in React?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSX is an extension of JavaScript syntax, and if you observe the syntax or structure
    of JSX, you will find it similar to XML coding. With JSX, you can carry out preprocessor
    footsteps that add XML syntax to JavaScript. Though you can certainly use React
    without JSX, JSX makes React very clean and manageable. Similar to XML, JSX tags
    have tag names, attributes, and children, and in that, if an attribute value is
    enclosed in quotes, that value becomes a string. XML works with balanced opening
    and closing tags. JSX works similarly, and it also helps read and understand a
    huge amount of structures easier than JavaScript functions and objects.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of using JSX in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a list of a few advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: JSX is very simple to understand, compared to JavaScript functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSX code syntax is more familiar to non-programmers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using JSX, your markup becomes more semantic, organized, and significant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make your code neat and clean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I said earlier, the structure/syntax is so easy to visualize/notice, which
    is intended for cleaner and more understandable code in JSX format when we compare
    it to JavaScript syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are sample code snippets that will give you a clear idea of React
    JavaScript syntax and JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, observe the following JSX syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So here we are clear now that JSX is really so easy to understand for programmers
    who are generally not used to dealing with coding, and they can learn, execute,
    and write it as HTML language.
  prefs: []
  type: TYPE_NORMAL
- en: React Form with JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting on a creating form with JSX, we must be aware of JSX form libraries.
    Generally, HTML form element inputs take their value as display text/values, but
    in React JSX, they take property values of respective elements and display them.
    As we have already visually perceived that we can't change props' values directly,
    so the input value won't have that transmuted value as an exhibit value.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss this in detail. To change the value of a form input, you will
    use the value attribute and then you will see no change. This doesn't mean that
    we cannot change the form input value, but for that, we need to listen to the
    input events, and you will see that the value changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following exceptions are self-explanatory, but very important:'
  prefs: []
  type: TYPE_NORMAL
- en: Label content will be considered as a value prop in React. As **for** is a reserved
    keyword of JavaScript; the HTML for the attribute should be bounded like the HTML
    for a prop. You'll have a better understanding when you look at the next example.
    Now, it's time to learn that to have form elements in the output, we need to use
    the following script, and we also need to replace it with the previously written
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start on building an `Add Ticket form` for our application. Create
    a `reactForm.html` file in the root and and `react-form.js` file in <strong>js
    folder. The following code snippet is just a base HTML page that includes Bootstrap
    CSS and React.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the markup of our HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It is always a good practice to load all your scripts at the bottom of the page
    before your `<body>` tag closes, which loads the component successfully in your
    DOM, because when the script is executed in the `<head>` section, the document
    element is not available as the script itself is in the `<head>` section. The
    best way to resolve this problem is to keep scripts at the bottom of your page
    before your `<body>` tag closes, and it will be executed after loading all your
    DOM elements, which will not throw any JavaScript errors.
  prefs: []
  type: TYPE_NORMAL
- en: Since JSX is similar to JavaScript, we can't use the `class` attribute in JSX
    because it's a reserved keyword in JavaScript. We should use `className` and `htmlFor`
    as property names in the ReactDOM component.
  prefs: []
  type: TYPE_NORMAL
- en: Now, Let's create some HTML layout in this file with bootstrap
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the above code we have created the navigation and wrapped it into the bootstrap
    grid classes for responsive behavior of the component.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c879b515-17b8-4954-9452-70a2bb02dfcc.png)This is how our HTML looks
    in the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For our `Add Ticket form`  component,  we need the following form fields along
    with the label:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Email: `<input>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issue type: `<select>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign department: `<select>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments: `<textarea>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button: `<button>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, here''s the list of supported events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onChange`, `onInput`, and `onSubmit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onClick`, `onContextMenu`, `onDoubleClick`, `onDrag`, and `onDragEnd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragEnter` and `onDragExit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDragLeave`, `onDragOver`, `onDragStart`, `onDrop`, and `onMouseDown`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseEnter` and `onMouseLeave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onMouseMove`, `onMouseOut`, `onMouseOver`, and `onMouseUp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at our form''s component code in `react-form.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To apply a style or call an `onSubmit()` function in the attribute value, rather
    than using quotes (`""`), we have to use a pair of curly braces (`{}`) in the
    JavaScript expression. It means that you can embed any JavaScript expression in
    JSX by wrapping it in curly braces, even a function.
  prefs: []
  type: TYPE_NORMAL
- en: Add this script tag at the bottom of the HTML page after the react libraries
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open your browser and let''s take a look at the output of our JSX code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/23a18add-ae14-4e93-9e6d-20eea16be3dc.png)'
  prefs: []
  type: TYPE_IMG
- en: That looks awesome. We can see our form as expected.
  prefs: []
  type: TYPE_NORMAL
- en: The first character should always be capitalized when you create a component
    in React. For example, our `Add Ticket form` component is `<AddTicketForm></AddTicketForm>`.
  prefs: []
  type: TYPE_NORMAL
- en: For the large-scale application, this approach will not be recommended; we cannot
    put the whole JSX code at one place every time we create form elements. To make
    our code clean and manageable, we should create a reusable component and just
    give the reference of that component wherever we need to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s see how we can achieve this in our existing code, and we will create
    one reusable text input component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, we created one object that takes some arguments
    related to the input attribute and assigned those arguments'' values to attributes''
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now we just need to add the preceding `TextInput` component like this in our
    `render` method, as you can see in the preceding code, rather than adding the
    label and input every time in our application; that shows the power of ReactJS.
  prefs: []
  type: TYPE_NORMAL
- en: Using React-Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React-Bootstrap is an open source JavaScript framework rebuilt for React. It's
    similar to Bootstrap where we have ready-to-use components to integrate with React.
    It's purely reimplementation of Bootstrap framework components to React. React-Bootstrap
    has no dependency on any other framework, as Bootstrap JS has a dependency on
    jQuery. By using React-Bootstrap, we can ensure that there won't be external JavaScript
    calls to render the component that might be incompatible or extra efforts with
    the `ReactDOM.render`. However, we can still achieve the same functionality and
    look and feel as
  prefs: []
  type: TYPE_NORMAL
- en: Twitter Bootstrap, but with much cleaner and less code.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can create our `Add Ticket Form` component with React-Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, follow the steps mentioned here to configure React-Bootstrap in your
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the React bootstrap npm package by running this below command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: npm install --save react-bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using the create-react-app CLI, we don't need to worry about bootstrap
    CSS; it's already there, we don't need to include.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now by using import keyword we need to add the reference of react-bootstrap
    components in react application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Example:'
  prefs: []
  type: TYPE_NORMAL
- en: import Button from 'react-bootstrap/lib/Button';
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: // or
  prefs: []
  type: TYPE_NORMAL
- en: import { Button } from 'react-bootstrap';
  prefs: []
  type: TYPE_NORMAL
- en: Add Ticket Form with React-Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you may be wondering that since we have installed the React-Bootstrap and
    we have added the reference of React-Bootstrap in our project by using `import`
    statement, won't they conflict with each other? No, they will not. React-Bootstrap
    is compatible with the existing Bootstrap styles, so we don't need to worry about
    any conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at this code for the `Add Ticket` component render method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, it looks cleaner than the Twitter Bootstrap
    component, because we can import the individual component from React-Bootstrap
    rather than including the entire library, such as `import { Button } from 'react-bootstrap';`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the list of Supported Form Controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<FieldGroup>` for custom component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<FormControl>` for `<input>`, `<textarea>`, and `<select>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Checkbox>` for checkbox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Radio>` for radio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControl.Static` (For Static text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HelpBlock`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now it's up to you whether you want use React-Bootstrap or normal JSX components
    with Bootstrap styling.
  prefs: []
  type: TYPE_NORMAL
- en: For more detail, check out [https://react-bootstrap.github.io/components/forms/](https://react-bootstrap.github.io/components/forms/).
  prefs: []
  type: TYPE_NORMAL
- en: Firebase with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are done creating a React form where you can raise the ticket into Helpdesk
    and save to Firebase. For this, now we need to integrate and initialize the Firebase
    in our existing application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Added script tag at the bottom of our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the existing Firebase config code from the previous chapter into `firebase-config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add `Reactjs Form` into `react-form.js` so that our code looks clean
    and manageable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Props and state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we go into the practical, we should know what is state and what is props
    in React. In ReactJs, components translate your raw data into Rich HTML with the
    help of JSX, the props and state together build with that raw data to keep your
    UI consistent. Okay, let''s identify what exactly it is:'
  prefs: []
  type: TYPE_NORMAL
- en: Props and state are both plain JS objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are triggered by a render update.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React manages the component state by calling `setState` (data, callback). This
    method will merge data into this state and rerenders the component to keep our
    UI up to date. For example, the state of the drop-down menu (visible or hidden).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React component props (properties) that don't change over time, for example,
    drop-down menu items. Sometimes components only take some data with this props
    method and render it, which makes your component stateless.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using props and state together helps you make an interactive app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read and Write Form data to Firebase Realtime Database.
  prefs: []
  type: TYPE_NORMAL
- en: As we know, ReactJS components have their own props and state-like forms that
    support a
  prefs: []
  type: TYPE_NORMAL
- en: 'few props that are affected via user interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<input>` and `<textarea>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Components** | **Supported Props** |'
  prefs: []
  type: TYPE_TB
- en: '| `<input>` and `<textarea>` | Value, defaultValue |'
  prefs: []
  type: TYPE_TB
- en: '| `<input>` type of checkbox or radio | checked, defaultChecked |'
  prefs: []
  type: TYPE_TB
- en: '| `<select>` | selected, defaultValue |'
  prefs: []
  type: TYPE_TB
- en: In an HTML `<textarea>` component, the value is set via children, but it can
    be set by value in React. The `onChange` prop is supported by all native components,
    such as other DOM events, and can listen to all bubble change events.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen, the state and prop will give you the control to alter the value
    of the component and handle the state for that component.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, now let's add some advanced features in our `Add Ticket form`, which can
    help you get the value from user input, and with the help of Firebase, we will
    save those values in the database.
  prefs: []
  type: TYPE_NORMAL
- en: The Ref attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React provides `ref` non-DOM attributes to access the component. The ref attribute
    can be a callback function, and it will execute immediately after the component
    is mounted. So we will attach the ref attribute in our form element to fetch the
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at our component after adding the ref attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s open the browser and see how our component looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/32fcc449-e14e-4b5c-a31e-c7332613ab06.png)'
  prefs: []
  type: TYPE_IMG
- en: Firebase is working perfectly in our application as you can see the message
    displayed at the bottom of title "Hello world! This is My First JavaScript Firebase
    App"; it's coming from Firebase Realtime Database
  prefs: []
  type: TYPE_NORMAL
- en: Also, in the console, you can see the values when we submit the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to save those value into the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We do this to `Write` the `Form` data object to Firebase Realtime Database;
    `firebase.database.Reference` is an asynchronous listener to retrieve the data
    from Firebase. This listener will be triggered once on the initial state of that
    and when data gets changed.
  prefs: []
  type: TYPE_NORMAL
- en: We can `Read` and `Write` the data from Firebase Database if we have access
    for that, because, by default, the database is restricted and no one can access
    it without setting up the authentication.
  prefs: []
  type: TYPE_NORMAL
- en: '`firebaseDb.ref().child(''helpdesk'').child(''tickets'').push(data);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, we used the `push()` method to save the data into the
    Firebase Database. It generates a unique key every time a new child is added to
    the specified Firebase reference. We can also use the `set()` method to save the
    data for specified reference; it will replace the existing data at that node path:'
  prefs: []
  type: TYPE_NORMAL
- en: '`firebaseDb.ref().child(''helpdesk'').child(''tickets'').set(data);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To `Retrieve` the update results when data is added, we need to attach the
    listener using the `on()` method, or in any case, if we want to detach the listener
    on the specific node, then we can do that by calling the `off()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if we want to read them once without listening to the changes, we
    can use the `once()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This is useful when we don't expect any changes in the data or any active listening.
    For example, loading the user profile data on the initial load when it gets successfully
    authenticated in our app.
  prefs: []
  type: TYPE_NORMAL
- en: To update the data, we have the `update()` method and for deleting, we just
    need to call the `delete()` method at the location of that data.
  prefs: []
  type: TYPE_NORMAL
- en: Both the `update()` and `set()` methods return a Promise, so we can use that
    to know when the write is committed to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s submit the form and see the output in the browser console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/622b4050-3082-45e9-8003-dd4fc0510600.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That looks great; now, let''s take a look our Firebase database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dc50aee5-ca2d-4d27-a179-6668239912f8.png)'
  prefs: []
  type: TYPE_IMG
- en: We are able to see the data that we have submitted from the ReactJS form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll display this data in a table format; for this, we need to create
    another React component and set the initial state of our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using the `componentDidMount()` method, we will call the database by `ref()`,
    iterate the object, and set the state of the component with `this.setState()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will iterate the state of tickets in a table inside the render method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the user can view the tickets'' list on Realtime whenever a new ticket
    is added to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/872c1d5d-a530-40d8-9087-87092a62647b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the markup of our HTML page: `viewTickets.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the list of tickets added in Firebase Realtime Database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7c74b96e-598d-4ff0-9dc5-c3a8be9f1d3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how JSX plays an important role in making custom components
    in React as well as making them very simple to visualize, understand, and write.
    We also saw how props and state play an important role in making components interactive
    as well as in DOM interaction to get the value from form fields. With the help
    of `refs`, we can call any public method and send a message to our particular
    child instance.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we explored the React-Bootstrap components by creating an `Add Ticket
    form`, which works well on all expected devices as well as on desktop browsers.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we saw how easy it is to use Firebase Realtime Database with a
    ReactJS application. With just a few lines of code, we can save the data to the
    Realtime Database and retrieve the list of tickets from the database in Realtime
    to make our application Realtime.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will do React and Firebase setup on node.js environment
    and how we can use the Firebase OAuth Providers to add authentication in our application. we'll
    also explore the react routing for navigation
  prefs: []
  type: TYPE_NORMAL
