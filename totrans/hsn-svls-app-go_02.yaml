- en: Getting Started with AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter supplies guidelines for setting up an AWS environment alongside
    Go runtime and development environments. You'll be introduced to the powerful
    AWS CLI, which will make deploying serverless applications more efficient and
    increase your productivity immensely.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you will be given a set of tips and recommendations on how to choose
    your Go **Integrated Development Environment** (**IDE**).
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before proceeding with the installation and configuration of the AWS and Go
    environments, it is recommended that you follow along with this chapter with on
    a laptop (Windows, Linux, or macOS X) with Python 2 version 2.6.5+ or Python 3
    version 3.3+ preinstalled and an AWS account set up so you can easily execute
    the given commands. The code bundle for this chapter is hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-serverless-Applications-with-Go](https://github.com/PacktPublishing/Hands-On-Serverless-Applications-with-Go).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the AWS environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will walk you through how to install and configure the AWS command
    line. The CLI is a solid and mandatory tool and it will be covered in upcoming
    chapters; it will save us substantial time by automating the deployment and configuration
    of Lambda functions and other AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS CLI is a powerful tool for managing your AWS services and resources
    from a terminal session. It was built on top of the AWS API, and hence everything
    that can be done through the AWS Management Console can be done with the CLI;
    this makes it a handy tool that can be used to automate and control your AWS infrastructure
    through scripts. Later chapters will provide information on the use of the CLI
    to manage Lambda functions and create other AWS services around Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through the installation process for the AWS CLI; you can find information
    on its configuration and testing in the *AWS Management Console* section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, open a new terminal session and then use the `pip` Python package
    manager to install the latest stable release of `awscli`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have the CLI installed, it''s recommended you upgrade to the latest
    version for security purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Windows users can also use MSI Installer ([https://s3.amazonaws.com/aws-cli/AWSCLI64.msi](https://s3.amazonaws.com/aws-cli/AWSCLI64.msi)
    or [https://s3.amazonaws.com/aws-cli/AWSCLI32.msi](https://s3.amazonaws.com/aws-cli/AWSCLI32.msi)*)*,
    which doesn't require Python to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, you need to add the AWS binary path to the `PATH` environment
    variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, press the Windows key and type Environment Variables. In the Environment
    Variables window, highlight the `PATH` variable in the **System variables** section. Edit
    it and add a path by placing a semicolon right after the last path, enter the
    complete path to the folder where the CLI binary is installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Linux, Mac, or any Unix system, open your shell''s profile script (`.bash_profile`,
    `.profile`, or `.bash_login`) and add the following line to the end of the file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, load the profile into your current session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the CLI is correctly installed by opening a new terminal session
    and typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to see the AWS CLI version; in my case, 1.14.60 is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec6f5ad5-48fa-455f-8bd9-d3f3ecb385b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s test it out and list Lambda functions in the Frankfurt region as an
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will display the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9f5051f-6af0-4e26-8073-ac6fc7e97ad1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When using the CLI, you''ll generally need your AWS credentials to authenticate
    with AWS services. There are multiple ways to configure AWS credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Environment Credentials**: The `AWS_ACCESS_KEY_ID` and `AWS_SECRET_KEY` variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Shared Credentials file**: The `~/.aws/credentials` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IAM Roles**: If you''re using the CLI in an EC2 instance, these remove the
    need to manage credential files in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, I will show you how to create a new user for CLI with the
    **AWS Identity and Access Management** (**IAM**) service.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Management Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IAM is a service that allows you to manage users, groups, and their level of
    access to AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s strongly recommended that you do not use the AWS root account for any
    task except billing tasks, as it has the ultimate authority to create and delete
    IAM users, change billing, close the account, and perform all other actions on
    your AWS account. Hence, we will create a new IAM user and grant it the permissions
    it needs to access the right AWS resources following the *Principle of least privilege*. In
    this case, the user will have full access to AWS Lambda services:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign into AWS Management Console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)) using
    your AWS email address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **IAM** console from the **Security, Identity & Compliance** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c79c822-802f-4e49-95c5-338317005bb3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the navigation pane, choose Users and click on the Add user button, then
    set a name for the user and select Programmatic access (also select AWS Management
    Console access if you want the same user to have access to the console):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cb3470b-5390-4319-bb8e-6f9ed5b00332.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Set permissions section, assign the AWSLambdaFullAccess policy to the
    user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a04d00d8-8f99-4eb3-ac17-5de986f12b32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the final page, you should see the user''s AWS credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/767571a7-8d64-4bec-be8b-048f47b7922a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure you save the access keys in a safe location as you won''t be able
    to see them again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6919348-6e5b-4968-a63d-09a3426d3e09.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our IAM user has been created. Let''s provide the access key and secret key
    along with a default region. This can be done using the `aws configure` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cd29640-c603-455c-803a-90d51132785c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The CLI will store credentials specified in the preceding command in a local
    file under `~/.aws/credentials` (or in `%UserProfile%\.aws/credentials` on Windows)
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That should be it; try out the following command and, if you have any Lambda
    functions, you should be able to see them listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc8c86f5-0db3-4547-8da4-cbb7db791d1f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The default output is JSON. You can change the output format for commands by
    adding the `--output` option (supported values: *json*, *table*, *text*). The
    following are the results shown in a table format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07bcdb7f-2e39-4fce-b308-c7bdd5de8aca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Moreover, you can use the `--query` option to extract the output elements from
    this JSON document. For example, to output the function name attribute, the following
    command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bacc9024-c0f8-4e4b-a722-0b2c670ee374.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A tool such as `jq` can be used to manipulate JSON. It enables us to filter,
    map, count, and perform other advanced JSON processes against the JSON returned
    by the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The Console will display the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65fd55d9-0655-478f-a6be-6e856aad12b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the Go environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will walk you through how to download and install Go on multiple
    platforms, how to build a simple Hello World application, and how to use an IDE
    to speed up your Go development. Along the way, you will become familiar with
    the Go commands that you will need to write Lambda functions in Go.
  prefs: []
  type: TYPE_NORMAL
- en: The runtime environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the appropriate package for your operating system and architecture
    from the Go download page ([https://golang.org/dl/](https://golang.org/dl/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '**For macOS X: **Download the `goVersion.darwin.amd64.pkg` file and follow
    the installation prompt. You may need to restart any open Terminal sessions for
    the change to take effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For Windows**: Download the MSI installer and follow the wizard. The installer
    will set up environment variables for you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For Linux**:Open a new terminal session and type the following commands (at
    the time of writing, the current version is 1.10):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous commands will download the latest Go package using `curl`*.* Then,
    it will use `tar` to unpack the package. Next, add the `/usr/local/go/bin` to the
    `PATH` environment variable by adding the following line to your shell''s profile
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you install Go in a custom directory, rather than `/usr/local`, you must
    set the `GOROOT` environment variable to point to the directory in which it was
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you have to reload the user profile to apply the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that Go is properly installed and the paths are set for your machine, let''s
    test it out. Create a workspace on which we will build our serverless applications
    throughout the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The Go source code lives in a workspace; by default, it should be `$HOME/go`.
    If you'd like to use a different directory, you will need to set the `GOPATH`
    environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To validate that the Go workspace is configured correctly,  you can run the
    `go env` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e73dbc4f-41ce-49e3-acc5-37b55ef37028.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the `GOPATH` variable is set, you''re ready to go. Within the workspace,
    create a `main.go` file using `vim` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the file with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The file will show `Welcome to 'Hands-On serverless Applications with Go'` if
    it runs successfully; this shows that Go is compiling files correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go is a compiled language, and hence you can generate a single binary for your
    application using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to build an executable for a specific OS and architecture, you
    can override the `GOOS` and `GOARCH` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Editing Go using the vim text editor is not optimal; therefore, in the next
    section, I will show you how to use VSCode as a Go editor to enhance your development
    productivity/experience.
  prefs: []
  type: TYPE_NORMAL
- en: The development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having an IDE can increase your development velocity and save a lot of time,
    which could be spent debugging and searching for the correct syntax. Plus, you
    can navigate and search your Lambda function code with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'But which one should we use? There are many solutions out there; these solutions
    can be divided into three main categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IDEs**: GoLand, Eclipse, Komodo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editors**: Atom, VSCode, Sublime Text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud-based IDEs**: Cloud9, Codeanywhere, CodeEnvy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Go ecosystem provides a variety of editors and IDEs; ensure you play around
    with them to find the one that suits you best.
  prefs: []
  type: TYPE_NORMAL
- en: 'I opted to go with Visual Studio Code (VS Code) as it meets all my criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports multiple languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin-driven tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great community and support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VSCode has strong support for Go development, including syntax-highlighting
    out of the box, built-in GIT integration, integration of all Go tools, and the
    Delve Debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the native support of Go, the open source community has built
    some useful and powerful plugins that you can install from VSCode Marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb1dfa15-617b-41cc-abb5-404d208f4fce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'VSCode is also cross-platform, and hence you can use it with Mac, Linux, or
    Windows. With Visual Studio Code, you can extend functionalities with the array
    of available plugins that come with so many powerful and robust additions, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Autocompletion**:As you type in a Go file, you can see IntelliSense providing
    you with suggested completions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0bbd3ee9-32bc-44e2-bda7-87c539cb1e96.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Signature help**: Hovering on any variable, function, or struct will give
    you information on that item, such as documentation, signature, expected input,
    and output parameters. For example, the following screenshot shows the information
    on `Println`, which was acquired from hovering on the `main.go` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ab28ea9a-b336-4d88-b0a9-76e02fa4ffc7.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Code formatting:** It automatically formats your Go source code on save,
    using the **gofmt** tool so your code becomes easier to write, read, and maintain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrated debugger: **You can set breakpoints and conditional breakpoints,
    and view the stack trace and local and global variables in each frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto-import Go packages**: It automatically imports required Go packages
    on save.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test runner**: It lets you run, stop, and restart unit tests as well as integration
    tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I''m looking forward to the stable release of GoLand by JetBrains: it looks
    like a very promising Go IDE and I''m excited to see where it goes.'
  prefs: []
  type: TYPE_NORMAL
- en: And that's all it takes! You're ready to start building and deploying serverless
    applications in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install, configure, and use the AWS CLI.
    This tool will be very helpful when it comes to managing AWS services and automating
    the deployment of Lambda functions. Then, we covered how to create a user and
    generate AWS credentials from IAM with the least amount of privilege necessary.
    That way, if your access keys end up in the wrong hands, there is a limited capability
    to do harm. Also, we learned how to set up the Go environment, with a step-by-step
    installation of Go for multiple platforms (Windows, macOS X, and Linux) and compiled
    our first Hello World application in Go. Along the way, we covered the most important
    commands in Go, which will help you follow later chapters with ease.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will finally get our hands dirty and write our first
    Lambda function in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which format is not supported by the AWS CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it recommended to use the AWS root account for everyday interaction with
    AWS? If yes, why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What environment variables do you need to set to use the AWS CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you use the AWS CLI with named profiles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the GOPATH environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command-line command compiles a program in Go?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`go build`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go run`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go fmt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`go doc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the Go workspace?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
