- en: Chapter 2. Marking Our Content with HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many consider that HTML is *code*. Well, it's not. HTML—any version of it—is
    a *markup* language.
  prefs: []
  type: TYPE_NORMAL
- en: A markup language is a computer language that can be read and understood by
    humans. It uses tags to define the parts of the content. HTML and XML are markup
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: To further help the differentiation, a coding language involves much more complex
    abstractions, scripting, database connections, transmission of data in some shape
    or form via complex protocols, and so on. Coding is truly a magical world.
  prefs: []
  type: TYPE_NORMAL
- en: HTML can do all these, but it's way less complex and a lot easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to focus on the science behind marking up content.
    Content can come in many different forms: text, images, videos, forms, error messages,
    success messages, iconography, and so on. Also, the way a type of content behaves
    in the browser or the way the user interacts with it will tell us what type of
    HTML element that specific content should be marked as.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, many web designers make an anchor link `<a href="#">Start 30 day
    trial</a>` *look like* a button. Many web developers make the same anchor link
    *behave like* a button. Why not just use the `<input type="button" value="Start
    30 day trial">` element? Better yet, use the `<button>Start 30 day trial</button>`
    element that behaves exactly the same, is a lot easier to style, and allows the
    addition of HTML content if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is to keep our markup as semantic as possible. Semantic markup basically
    means that we use HTML tags to describe what a specific piece of content is. Keeping
    a semantic markup has a lot of benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: It's very helpful for other web designers or developers who inherit our work,
    because they will spend less time reverse engineering what we have done and more
    time enhancing it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s also extremely helpful in terms of accessibility, because it allows assistive
    technologies to name the elements as they are: a button is actually a `<button>`
    and not a link `<a href="#">` styled to look like a button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEO benefits greatly from semantic markup, because it allows search engines
    to index the content faster and more accurately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paying close attention to the content will go a long way for everyone in the
    chain—helping us during the project, helping the project itself, and eventually
    helping our users with and without assistive technology.
  prefs: []
  type: TYPE_NORMAL
- en: The best recommendation I can give you when marking up your content is *listen
    to the content*; it talks to you. It really does.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 elements in action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Web Accessibility Initiative - Accessible Rich Internet Applications**
    (**WAI-ARIA**) landmark roles to increase accessibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important meta tags to consider for RWD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full HTML5 example page with ARIA roles and meta tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, which HTML elements can we use now so we're sure our websites/apps look
    fine in all browsers? The answer is *all elements*.
  prefs: []
  type: TYPE_NORMAL
- en: On October 28, 2014, the W3C finalized the HTML5 standard. However, all major
    browsers had been supporting HTML5 elements for several years.
  prefs: []
  type: TYPE_NORMAL
- en: What this means for us is that even way before the W3C finalized the HTML5 standard,
    we could already use any HTML5 element. So if you've been building websites/apps
    with HTML5, keep doing it; if you haven't started to use HTML5 yet for any specific
    reason, this is the time to start.
  prefs: []
  type: TYPE_NORMAL
- en: The <main> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the **Mozilla** **Developer Network** (**MDN**) definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The HTML Main Element (`<main>`) can be used as a container for the dominant
    contents of the document. The main content area consists of content that is directly
    related to, or expands upon the central topic of a section or the central functionality
    of an application. This content should be unique to the document, excluding any
    content that is repeated across a set of documents such as sidebars, navigation
    links, copyright information, site logos, and search forms (unless, of course,
    the document''s main function is as a search form). Unlike `<article>` and `<section>`,
    this element does not contribute to the document outline.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember about the `<main>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: The top-level content of a page should be included in the `<main>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content should be exclusive and unique to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<main>` element should never be included inside the `<header>`, `<footer>`,
    `<nav>`, `<aside>`, or `<article>` elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can only be one `<main>` element per page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For good measure, use HTML entities for special characters, for example, the
    ampersand character (&) is `&amp;` and the ellipsis character (…) is `&hellip;`.
  prefs: []
  type: TYPE_NORMAL
- en: The <article> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MDN definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The HTML Article Element (`<article>`) represents a self-contained composition
    in a document, page, application, or site, which is intended to be independently
    distributable or reusable, e.g., in syndication. This could be a forum post, a
    magazine or newspaper article, a blog entry, or any other independent item of
    content. Each `<article>` should be identified, typically by including a heading
    (`h1`-`h6` element) as a child of the `<article>` element.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember about the `<article>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: Any self-contained content should be placed inside the `<article>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Self-contained* means that if we take the `<article>` element and everything
    inside it out into another context, all the content is self-explanatory and does
    not need anything else around it to be understood.'
  prefs: []
  type: TYPE_NORMAL
- en: An `<article>` can be nested inside another `<article>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `<article>` element in a single page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The <section> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MDN definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The HTML Section Element (`<section>`) represents a generic section of a document,
    i.e., a thematic grouping of content, typically with a heading. Each `<section>`
    should be identified, typically by including a heading `(<h1>`-`<h6>` element)
    as a child of the `<section>` element.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember about the `<section>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<section>` element can be used to encapsulate a group of related content.
    This related content doesn't necessarily have to make sense if we take it out
    of the page's context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A safe and valid way to use the `<section>` element is to place it inside an
    `<article>` element. You can certainly use the `<article>` element without a `<section>`
    element. It's recommended, although not required, to include a heading element
    `(<h1>`, `<h2>`, `<h3>`, and so on) when using the `<section>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be confusing to know when to use the `<section>` element and when to
    use the `<article>` element. If you're in doubt, you can choose either element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `<section>` in a single page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The <aside> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MDN definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The HTML `<aside>` element represents a section of the page with content connected
    tangentially to the rest, which could be considered separate from that content.
    These sections are often represented as sidebars or inserts. They often contain
    the definitions on the sidebars, such as definitions from the glossary; there
    may also be other types of information, such as related advertisements; the biography
    of the author; web applications; profile information or related links on the blog.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember about the `<aside>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: Content that is tangential to the main content can be included in an `<aside>`
    element. If this content was to be separated from the main content, it would still
    make sense on its own.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `<aside>` in a single page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Tangential content* means that the content refers to the subject at hand,
    but it''s not part of the main message. If this content inside the `<aside>` element
    is removed, the main message is not affected.'
  prefs: []
  type: TYPE_NORMAL
- en: The <header> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, we think that the top section of our site/app is the header, and this
    is correct. The editorial name for that top section is the *masthead*.
  prefs: []
  type: TYPE_NORMAL
- en: However, from an HTML5 standpoint, there's a difference between a *masthead*
    and a *header*.
  prefs: []
  type: TYPE_NORMAL
- en: The masthead is the main header of our site/app and there can be only one. It
    usually contains the logo, some navigation, maybe a search field, and so on. The
    header can be considered the top area of any section and there can be more than
    one header.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we're not talking about the `<header>` element, at least not yet.
  prefs: []
  type: TYPE_NORMAL
- en: The masthead can be built using the `<header>` element, but the `<header>` element
    can also be used in other parts of the same page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the definition from MDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The HTML `<header>` Element represents a group of introductory or navigational
    aids. It may contain some heading elements but also other elements like a logo,
    wrapped section''s header, a search form, and so on.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember about the `<header>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: A good rule of thumb is to use a `<header>` element inside a `<section>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can wrap a heading (`h1` to `h6`) inside a `<header>` element if we think
    it is necessary, but this is not really a common practice or required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `<header>` element in a single page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, there are two highlighted `<header>` sections, the
    masthead and a header inside a `<section>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The <footer> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MDN definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The HTML Footer Element (`<footer>`) represents a footer for its nearest sectioning
    content or sectioning root element. A footer typically contains information about
    the author of the section, copyright data or links to related documents.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember about the `<footer>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: It should always contain any information about its containing parent element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the term *footer* implies the *bottom section* of a page, article,
    or app, the `<footer>` element doesn't necessarily have to be at the bottom.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `<footer>` element in a single page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The <nav> element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MDN definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '*The HTML Navigation Element (`<nav>`) represents a section of a page that
    links to other pages or to parts within the page: a section with navigation links.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember about the `<nav>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: It is used to group a list or collection of links. The links can either point
    to external resources or to other pages within the site/app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's common practice to use an unordered list `<ul>` inside the `<nav>` element
    to structure the links, because it's easier to style.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including a `<nav>` in the `<header>` element is also a common practice but
    not required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all groups of links have to be inside a `<nav>` element. If we have a list
    of links inside a `<footer>` tag, then its isn't really necessary to include those
    links in a `<nav>` as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `<nav>` element in a single page, for example, a
    main navigation, a utility navigation, and a `<footer>` navigation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using WAI-ARIA landmark roles to increase accessibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most neglected aspects of the web is accessibility, unless you are
    part of a group dedicated to this subject. As web designers and web developers,
    we rarely think about handicapped users accessing the web and using our websites
    or apps with screen readers and other assistive technologies. We actually think
    first about supporting legacy browsers rather than increasing the accessibility
    of our products.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to touch on what **WAI-ARIA landmark roles** are
    and how they can be easily implemented in our markup, enhancing the semantics
    of our documents to provide those users with assistive technology a better and
    pleasant experience when they navigate our websites/apps with their keyboards
    on any modern browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**WAI-ARIA** stands for **Web Accessibility Initiative – Accessible Rich Internet
    Applications**.'
  prefs: []
  type: TYPE_NORMAL
- en: WAI-ARIA landmark roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WAI-ARIA landmark roles can also be referred to as *ARIA roles*, so that's the
    term we're going to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ARIA role looks like this when implemented in an HTML5 element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There are really multiple ARIA roles at our disposal, but in this book we're
    going to focus on the ones that are easier to implement and that will enhance
    the accessibility of our websites/apps efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: The banner role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This role is usually applied to the top `<header>` of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The header region contains the most prominent heading or title of a page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually, the content that has `role="banner"` appears constantly across the
    site rather than in a single specific page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only one `role="banner"` is allowed per page/document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The navigation role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This role is usually applied to the `<nav>` element, but it can also be applied
    to other containers such as `<div>` or `<ul>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It describes a group of navigational elements/links. These links can be either
    to navigate the site or the page they appear on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `role="navigation"` per page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example where the role is applied to the main `<nav>`
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example where the role is applied to the `<ul>` element
    of the footer navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There is no particular preference as to which element we add the `navigation`
    role to. It's the same if we add it to the `<nav>` element or the `<ul>` element.
  prefs: []
  type: TYPE_NORMAL
- en: The main role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This role is usually applied to the `<main>` element of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The container of the main/central subject of the page should be marked with
    this role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only one `role="main"` is allowed per page/document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The contentinfo role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This role is usually applied to the main `<footer>` element of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the section that contains information about the document/site/app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the section contains, for example, a copyright link, footnotes, links to
    privacy statement, or terms and conditions, it's a good candidate for `role="contentinfo".`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only one `role="contentinfo"` is allowed per page/document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The search role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This role is usually applied to the `<form>` element that belongs to the search
    feature of the page/app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the search form is wrapped inside a `<div>` element, this role can also be
    applied to that `<div>` element. If this is the case, then there's no need to
    add it to the child `<form>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `role="search"` per page as long as the control is
    an actual search feature. For example, using the `role="search"` on a contact
    form is incorrect and unsemantic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example where the role is applied to the site''s search
    `<form>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The form role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This role is usually applied to a `<div>` element that contains some type of
    form, *except* the main search form of the site/app, for example, contact forms,
    registration forms, payment forms, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should *not* be applied to the actual `<form>` element, because this element
    already has default role semantics that assist technology support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The complementary role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This role is usually applied to an `<aside>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be used on a region that contains supporting content; if separated
    from the content, it can still make sense on its own. This is pretty much the
    description of the `<aside>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be more than one `role="complementary"` per page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**WAI-ARIA roles explained**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re curious about the list of ARIA roles, you can visit the Web Platform
    website where the explanations are simple and very easy to understand: [https://specs.webplatform.org/html-aria/webspecs/master/#docconformance](https://specs.webplatform.org/html-aria/webspecs/master/#docconformance)'
  prefs: []
  type: TYPE_NORMAL
- en: Important meta tags to consider for RWD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways web designers and developers use meta tags, but those extensive
    explanations are outside the scope of this book, so we're going to focus on the
    bits and pieces that are relevant and work as intended for RWD.
  prefs: []
  type: TYPE_NORMAL
- en: The following meta tags are very important for our responsive site/app. These
    meta tags are not just for HTML5 pages, they will work with any version of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: The viewport meta tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `viewport` meta tag is the most important meta tag for RWD. It was introduced
    by Apple in their mobile Safari browser. Now, other mobile browsers support it
    as well. Oddly enough, this meta tag is not part of any web standards of any kind,
    yet it is mandatory if we want our responsive sites/apps to display correctly
    on small screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recommended syntax of this meta tag is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: The `name="viewport"` directive describes the type of meta tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `content="width=device-width, initial-scale=1"` directive does several
    things:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `width` property defines the size of the `viewport` meta tag. We can also
    use specific pixel widths, for example, `width=960`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `device-width` value is the width of the screen at 100 percent zoom in CSS
    pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `initial-scale` value defines the zoom level the page should be shown at
    when it's first loaded. 1 equals 100 percent zoom and 1.5 equals 150 percent zoom.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this syntax, users will be able to zoom in if they want to. This is a UX
    best practice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This book strongly discourages the use of the following `viewport` properties:
    `maximum-scale=1` and `user-scalable=no`. By using these `viewport` properties,
    we deny the users the ability to zoom in our website/app. We never know when zooming
    may be important for anyone, so it''s best to steer away from including those
    viewport properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To help websites that are not responsive (yet) display a bit better on small
    screens, add the specific pixel width the site was built at. For example, if a
    website is as wide as 960px, add this `viewport` meta tag to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re interested in reading in more detail about the `viewport` meta tag,
    MDN explains it very well: [https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag](https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag).'
  prefs: []
  type: TYPE_NORMAL
- en: The X-UA-Compatible meta tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `X-UA-Compatible` meta tag targets only Internet Explorer and its Compatibility
    View feature. As we all know, Microsoft introduced Compatibility View in IE8.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recommended syntax of this meta tag looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: The `http-equiv="X-UA-Compatible"` directive tells IE that a certain rendering
    engine needs to be used to render a page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `content="IE=edge"` directive tells IE that it should use its latest rendering
    HTML and JavaScript engines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this meta tag to trigger IE's latest HTML and JavaScript engines is very
    good, because the latest version of IE always has the latest security updates
    and support for many more features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's no need to use the `chrome=1` value anymore, since Chrome Frame was
    retired in February 2014.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Chrome Frame was a plugin for old versions of IE. When installed, it
    would replace certain modules within IE, such as rendering and JavaScript engines,
    thus improving the user experience. In other words, it was like installing a small
    version of Google Chrome on top of IE.
  prefs: []
  type: TYPE_NORMAL
- en: The charset meta tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `charset` meta tag tells the browser which character set to use to interpret
    the content. Some say it isn't that important to include because the server itself
    sends the character set to the browsers via HTTP headers anyway. But it's always
    a good measure to include it in our pages as well.
  prefs: []
  type: TYPE_NORMAL
- en: If `charset` is not declared in the HTML and the server doesn't send the character
    set to the browser, it's likely that some special characters may display incorrectly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recommended syntax of this meta tag in HTML5 is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: This meta tag was created exclusively for HTML5 documents. The main benefit
    is that there's less code to write.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For HTML 4 and XHTML, you should use the following syntax`:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Another common value is `ISO-8859-1`, but `UTF-8` is more widely used because
    there is a better chance of the browser interpreting the content correctly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**UTF-8** stands for **Unicode Transformation** **Format-8**.'
  prefs: []
  type: TYPE_NORMAL
- en: A full HTML5 example page with ARIA roles and meta tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have gone through a few essential HTML5 elements, the ARIA roles
    they can be applied to, and the proper meta tags for display, let''s visualize
    all of them in a full HTML5 page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As a bonus, let's take a look at the SCSS that ties all this together into a
    nice responsive page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following SCSS code was built using a desktop-first approach, since we are
    going to progress methodically into mobile-first as we move along in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Output screenshots for desktop and mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following screenshots represent a prototype/demo both in the wireframe and
    styled modes. You'll be able to see both the desktop (980-pixels wide) as well
    as mobile (320-pixels wide) outputs.
  prefs: []
  type: TYPE_NORMAL
- en: In the wireframe screenshots, the white outlines and the gray backgrounds in
    different tones are basically visual cues to help you understand where the boundaries
    of each element are without having to use a browser's DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: The styled screenshots, on the other hand, show you what can be accomplished
    with a small does of CSS. Both the wireframe and styled pages use exactly the
    same markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'The demos of the pages can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://codepen.io/ricardozea/pen/717c6ab2dab9646f814f0429153a6777](http://codepen.io/ricardozea/pen/717c6ab2dab9646f814f0429153a6777)
    for the wireframe page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit [http://codepen.io/ricardozea/pen/244886bac2434369bd038294df72fdda](http://codepen.io/ricardozea/pen/244886bac2434369bd038294df72fdda)
    for the styled page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see the screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'The desktop output [wireframe] is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output screenshots for desktop and mobile](img/B02102_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The desktop output [styled] is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output screenshots for desktop and mobile](img/B02102_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The mobile output [wireframe] is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output screenshots for desktop and mobile](img/B02102_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The mobile output [styled] is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output screenshots for desktop and mobile](img/B02102_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was a short chapter but it was certainly full of important information.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that HTML is markup and not code. We also saw various HTML5 elements
    in action. This will help us understand which HTML5 elements can be used to markup
    the content we are provided with.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to mark your HTML with ARIA roles to make our sites/apps
    more accessible for users with assistive technologies.
  prefs: []
  type: TYPE_NORMAL
- en: We also addressed a few important meta tags that will help your pages and markup
    display correctly on different devices, and trigger the latest HTML and JavaScript
    engines in Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we saw all the aforementioned topics implemented in an actual full
    HTML5 example together with its SCSS. The example was built using the desktop-first
    approach; this will allow us to methodically transition our mental model to the
    mobile-first technique.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is going to be about *demystifying* when and how to use the
    mobile-first and/or desktop-first approaches, and how to work with each methodology.
    Take out your crystal balls!
  prefs: []
  type: TYPE_NORMAL
