- en: Chapter 6. Performing Spatial and Attribute Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using ArcGIS Server Query tasks, you can perform attribute and spatial queries
    against data layers in a map service that has been exposed. You can also combine
    these query types to perform combined attribute and spatial queries. For example,
    you might need to find all land parcels with an appraised value greater than $100,000
    and that intersect the 100-year floodplain. This would be an example of a combined
    query that includes both spatial and attribute components. In this chapter, you
    will learn how to perform attribute and spatial queries using the `Query`, `QueryTask`,
    and `FeatureSet` objects in the ArcGIS API for JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introducing tasks in ArcGIS Server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of attribute and spatial queries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Query object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing the query with QueryTask
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice with spatial queries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing tasks in ArcGIS Server
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next few chapters of the book, we will discuss the many types of tasks
    that can be performed with the ArcGIS API for JavaScript. Tasks give you the ability
    to perform spatial and attribute queries, find features based on text searches,
    geocode addresses, identify features, and perform various geometry operations
    including buffering and distance measurements. All tasks are accessed through
    the `esri/tasks` resource.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: All tasks in the ArcGIS API for JavaScript follow the same pattern. This pattern
    is easily recognizable once you've worked with one or more tasks for any length
    of time. An input object is used to supply input parameters to the task. Using
    these input parameters, the task performs its specific function and then an output
    object is returned containing the results of the task.The following diagram illustrates
    how each task accepts an input parameter object and returns an output object that
    can be used in your application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing tasks in ArcGIS Server](graphics/7965_06_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: An overview of attribute and spatial queries
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you'll see with other tasks, queries are performed using a sequence of objects
    that typically include the input to the task, execution of the task, and a result
    set returned from the task. The input parameters for an attribute or spatial query
    are stored in a `Query` object which contains various parameters that can be set
    for the query. The `QueryTask` object executes the task using the input provided
    in the `Query` object, and a result set is returned in the form of a `FeatureSet`
    object, which contains an array of `Graphic` features that you can then plot on
    the map.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The `Query` object, used as input to a `QueryTask`, is defined by properties
    that include `geometry`, `where`, and `text`. The `geometry` property is used
    to input a geometry that will be used in a spatial query and will be a point,
    line, or polygon geometry. The `where` property is used to define an attribute
    query, while the `text` property is used to perform a `where` clause containing
    a `like` operator. The `Query` object can also contain a number of optional properties
    including the ability to define the fields that will be returned as a result of
    the query, the output spatial reference for the returned geometry, and the actual
    geometry of the features that meet the query conditions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of attribute and spatial queries](graphics/7965_06_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: The preceding diagram defines the object sequence you will use when creating
    attribute and spatial queries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The Query object
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for the `QueryTask` object to execute a query against a layer in a
    map service, it needs input parameters that are defined with a `Query` object.
    Input parameters define whether the query will be spatial, attribute, or a combination
    of the two. Attribute queries can be defined by either the `where` or `text` properties.
    These properties are used to define a SQL attribute query. We'll look at the difference
    between `Query.where` and `Query.text` in a later section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Spatial queries require that you set the `Query.geometry` property to define
    the input geometric shape to be used in a spatial query.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'A new instance of the `Query` object can be created through the use of a constructor
    as seen in the following code example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Defining the query properties
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As I mentioned in the introduction to this section, you can set various parameters
    on the `Query` object. It is required that you either define the properties for
    an attribute query (`Query.where` or `Query.text`) or the `Query.geometry` property
    for a spatial query. You can also use a combination of attribute and spatial query
    properties.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Attribute queries
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `Query` object provides two properties that can be used in an attribute
    query: `Query.where` and `Query.text`. In the following code example, I''m setting
    the `Query.where` property so that only records where the `STATE_NAME` field equal
    to `''Texas''` are returned. This is just a standard SQL query. Notice that I''ve
    enclosed the word Texas with quotes. When performing an attribute query against
    a text column, you need to enclose the text being evaluated with either single
    or double quotes. This isn''t needed if you are performing an attribute query
    against a column containing other data types such as numbers or Booleans:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can also use the `Query.text` property to perform an attribute query. This
    is a shorthand way for creating a `where` clause using `like`. The field used
    in the query is the display field for the layer defined in the map document. You
    can determine the display field for a layer in the services directory. This is
    illustrated in the following screenshot where `ZONING_NAME` is the display field.
    It is this display field that is queried using the `Query.text` property.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![Attribute queries](graphics/7965_06_06.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the following code example, we use `query.text` to perform an attribute
    query that returns all fields where the state name is entered by the user in a
    form field on the web page:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Spatial queries
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To perform a spatial query against a layer, you''ll need to pass in a valid
    geometry object to be used in the spatial filter along with a spatial relationship.
    Valid geometries include instances of `Extent`, `Point`, `Polyline`, and `Polygon`.
    The spatial relationship is set through the `Query.spatialRelationship` property
    and is applied during the query. The spatial relationship is defined through the
    use of one of the following constant values: `SPATIAL_REL_INTERESECTS`, `SPATIAL_REL_CONTAINS`,
    `SPATIAL_REL_CROSSES`, `SPATIAL_REL_ENVELOPE_INTERSECTS`, `SPATIAL_REL_OVERLAPS`,
    `SPATIAL_REL_TOUCHES`, `SPATIAL_REL_WITHIN`, and `SPATIAL_REL_RELATION`. The table
    in the following screenshot describes each of the spatial relationship values:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Spatial queries](graphics/7965_06_10.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: 'The following code example sets a `Point` object as the geometry passed into
    the spatial filter in addition to setting the spatial relationship:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Limiting the fields returned
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For performance reasons, you should limit the fields that are returned in the
    `FeatureSet` object to only those fields that are needed in your application.
    Every column of information attached to the `FeatureSet` object is additional
    data that must be passed from the server to the browser, which can cause your
    application to perform slower than it should. To limit the returned fields, you
    assign an array containing a list of fields that should be returned to the `Query.outFields`
    property as seen in the following code example. To return all fields you can use
    `outFields = ['*']`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, you can control the return of the geometry for each feature through
    the `Query.returnGeometry` property. By default, the geometry will be returned;
    however, in some cases, your application may not need the geometry. For example,
    if you need to populate a table with the attribute information from a layer, you
    don''t necessarily need the geometry. In this case, you can set `Query.returnGeometry
    = false`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Executing the query with QueryTask
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve defined the input properties in a `Query` object, you can use
    `QueryTask` to execute the query. Before the query can be executed, you must first
    create an instance of the `QueryTask` object. A `QueryTask` object is created
    by passing a URL to the layer against which the query will be executed inside
    the constructor for the object. The following code example shows how a `QueryTask`
    object is created. Notice that it includes an index number at the end of the URL
    that references a specific layer in the map service to be queried:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After creation, the `QueryTask` object can be used to execute a query against
    the layer with an input `Query` object using the `QueryTask.execute()` method.
    `QueryTask.execute()` accepts three parameters including an input `Query` object
    along with success and error callback functions. The syntax for `QueryTask.execute()`
    is provided in the following code. The input `Query` object is passed as the first
    parameter:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Assuming that the query executes without any error, the success callback function
    will be called and a `FeatureSet` object is passed into the function. If an error
    occurs during the execution of the query, then an error callback function is executed.
    Both the success and error callback functions are optional; however, you should
    always define functions to handle both cases.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you may be wondering about these `callback` and `errback` functions.
    Most tasks in ArcGIS Server return an instance of `dojo/Deferred`. A `Deferred`
    object is a class that is used as the foundation for managing asynchronous threads
    in `Dojo`. Tasks in ArcGIS Server can be either synchronous or asynchronous.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous and synchronous define how the client (the application using the
    task) interacts with the server and gets the result from the task. When a service
    is set to synchronous, the client waits for the task to complete. Typically, a
    synchronous task executes quickly (several seconds or lesser). An asynchronous
    task typically takes longer to execute, and the client doesn't wait for the task
    to complete. The end user is free to continue using the application while the
    task executes. When a task completes on the server, it calls the callback function
    and passes the results into this function where they can then be used in some
    way. They are often displayed on the map.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a more complete code example. In the following code example,
    notice that we first create a new variable called `myQueryTask`, which points
    to layer 6 (the index numbers are `0` based) in the `ESRI_CENSUS_USA` map service.
    We then create the `Query` object containing the input properties of the query
    and finally, we use the `execute()` method on `QueryTask` to perform the query.
    The `execute()` method returns a `FeatureSet` object that contains the results
    of the query and these features are processed through a callback function called
    `showResults`, which is specified in the `execute()` method. If an error occurs
    during the execution of the task, the `errorCallback()` function will be called:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Getting query results
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I mentioned earlier, the results of a query are stored in a `FeatureSet`
    object that includes an array of graphics, which you can then plot on your map
    if you wish.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Each feature (graphic) in the array can contain geometry, attributes, symbology,
    and an InfoTemplate as described in [Chapter 3](ch03.html "Chapter 3. Adding Graphics
    to the Map"), *Adding Graphics to the Map*. Typically, these features are plotted
    on the map as graphics. The following code example shows a callback function that
    is executed when a query has completed execution. A `FeatureSet` object is passed
    into the callback function and the graphics are drawn on the map:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Time to practice with spatial queries
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, you will learn how to perform spatial queries using the `Query`,
    `QueryTask`, and `FeatureSet` objects in the ArcGIS API for JavaScript. Using
    a Zoning layer from the City of Portland, you will query parcel records and display
    the results on a map.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将学习如何使用ArcGIS API for JavaScript中的`Query`、`QueryTask`和`FeatureSet`对象执行空间查询。使用波特兰市的Zoning图层，您将查询地块记录并在地图上显示结果。
- en: 'Perform the following steps to complete the exercise:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成练习：
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)上打开JavaScript沙盒。
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code snippet:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下代码片段中我标记的`<script>`标签中删除JavaScript内容：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create the variables that you'll use in the application.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序中将使用的变量。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the `require()` function as seen in the following highlighted code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加如下标记的`require()`函数：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Inside the `require()` function, create the `Map` object that you''ll use in
    the application. The map will be centered on the Louisville, KY, area:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`require()`函数内部，创建将在应用程序中使用的`Map`对象。地图将以肯塔基州路易斯维尔市为中心：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the symbol that will be used to display the results of the query:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建将用于显示查询结果的符号：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, inside the `require()` function, we are going to initialize the `queryTask`
    variable and then register the `QueryTask.complete` event. Add the following highlighted
    lines of code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`require()`函数内部，我们将初始化`queryTask`变量，然后注册`QueryTask.complete`事件。添加以下标记的代码行：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The constructor for `QueryTask` must be a valid URL pointer to a data layer
    exposed through a map service. In this case, we are creating a reference to the
    Zoning layer in the LOJIC_LandRecords_Louisville map service. What this indicates
    is that we are going to perform a query against this layer. If you will remember
    from a previous chapter, `dojo.on()` is used to register events. In this case,
    we are registering the `complete` event for our new `QueryTask` object. This event
    fires when the query has been completed, and in this case will call the `addToMap()`
    function specified as a parameter to `on()`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryTask`的构造函数必须是指向通过地图服务公开的数据图层的有效URL指针。在这种情况下，我们正在创建对LOJIC_LandRecords_Louisville地图服务中的Zoning图层的引用。这表明我们将对该图层执行查询。如果您还记得之前的章节，`dojo.on()`用于注册事件。在这种情况下，我们正在为我们的新`QueryTask`对象注册`complete`事件。当查询完成时，此事件将触发，并且在这种情况下将调用作为`on()`参数指定的`addToMap()`函数。'
- en: 'Now we''ll define the input parameters for the task by creating a `Query` object.
    In the first line, we create a new `Query` instance, and then we set the `Query.returnGeometry`
    and `Query.outFields` properties. Setting `Query.returnGeometry` equal to `true`
    indicates that ArcGIS Server should return the geometric definition of the features
    that matched the query, while in `Query.outFields` we''ve specified a wildcard
    indicating that all fields associated with the Zoning layer should be returned
    for the features returned as a result of the query. Add the following highlighted
    lines of code just below the code you entered in the previous step:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将通过创建`Query`对象来定义任务的输入参数。在第一行中，我们创建一个新的`Query`实例，然后设置`Query.returnGeometry`和`Query.outFields`属性。将`Query.returnGeometry`设置为`true`表示ArcGIS
    Server应返回与查询匹配的要素的几何定义，而在`Query.outFields`中，我们指定了一个通配符，表示应返回与查询结果相关的Zoning图层的所有字段。在上一步中输入的代码下面添加以下标记的代码行：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add a line of code that registers the `Map.click` event to a `doQuery` function.
    The `doQuery` function will be passed the point on the map that was clicked by
    the user. This map point will be used as the geometry in the spatial query. In
    the next step, we will create the `doQuery` function that will accept the point
    clicked on the map:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一行代码，将`Map.click`事件注册到`doQuery`函数。`doQuery`函数将接收用户在地图上点击的点。这个地图点将被用作空间查询中的几何体。在下一步中，我们将创建`doQuery`函数，该函数将接受地图上点击的点：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we''ll create the `doQuery` function that executes the `QueryTask` using
    the `Query` properties we set in the `require( )` function along with the map
    point clicked by the user, which is used in the `Query.geometry` function. The
    `doQuery` function accepts a point that was clicked on the map, which can be retrieved
    using the `mapPoint` property. The `mapPoint` property returns a `Point` object,
    which is then used to set the `Query.geometry` property that will be used to find
    the zoning parcel the user has clicked on the map. Finally, the `QueryTask.execute()`
    method is executed. After the task has executed, a `FeatureSet` object containing
    the records that match the query will be returned. The question now is where are
    the results returned? Add the following code block just below the closing brace
    for the `require()` function:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建`doQuery`函数，该函数使用在`require()`函数中设置的`Query`属性以及用户在地图上点击的地图点执行`QueryTask`。`doQuery`函数接受在地图上点击的点，可以使用`mapPoint`属性检索。`mapPoint`属性返回一个`Point`对象，然后用于设置`Query.geometry`属性，该属性将用于查找用户在地图上点击的分区地块。最后，执行`QueryTask.execute()`方法。任务执行后，将返回包含与查询匹配的记录的`FeatureSet`对象。现在的问题是结果返回在哪里？在`require()`函数的闭合大括号下面添加以下代码块：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Remember that we registered the `QueryTask.complete` event to run the `addToMap()`
    function. We haven''t created this function yet. Add the following code to create
    the `addToMap()` function. This function will accept a `FeatureSet` object returned
    as a result of the query and plot the features on the map. Also notice that an
    info template is defined for the feature. This will create an `InfoWindow` object
    to display the attributes of the returned feature:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can view the solution code for this exercise in the `spatialquery.html`
    file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Run** button to execute the code. You should see the map in the
    following screenshot. If not, you may need to recheck your code for accuracy.![Time
    to practice with spatial queries](graphics/7965_06_07.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click anywhere on the map to run the query. You should see the highlighted
    zoning polygon there, similar to what you can see in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to practice with spatial queries](graphics/7965_06_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Now, click on the highlighted zoning polygon to display an Info Window that
    details the attributes associated with the polygon.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to practice with spatial queries](graphics/7965_06_09.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: In the task just completed, you learned how to use the `Query` and `QueryTask`
    objects to create a spatial query that locates the zoning polygon that intersects
    the point the user has clicked on the map.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we introduced the concept of tasks in ArcGIS Server. ArcGIS
    Server provides a number of tasks for commonly used operations in a web mapping
    application. Attribute and spatial queries are common operations in web mapping
    applications. To support these queries, the ArcGIS API for JavaScript provides
    a `QueryTask` object that can be used to execute these queries on the server.
    When created, the `QueryTask` object accepts a URL that points to a layer that
    will be queried in a map server. Various input parameters to the `QueryTask` are
    provided through the `Query` object. Input parameters can include a `where` property
    to perform attribute queries, a `geometry` property to perform spatial queries,
    an `outFields` property to define the set of fields that should be returned, and
    several other supporting properties. After the query has completed on the server,
    a `FeatureSet` object is returned to a callback function defined in the application.
    The callback function can then display the `FeatureSet` (which is just an array
    of `Graphic` objects) on the map. In the next chapter, you will learn how to use
    two additional tasks: `IdentifyTask` and `FindTask`. Both can be used to return
    the attributes of features.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
