- en: '*Chapter 6*: Data Visualization with Danfo.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding chapter, you learned how to use Plotly.js to create rich and
    interactive plots that can be embedded in any web application. We also mentioned
    how Danfo.js uses Plotly internally to make plots directly on a DataFrame or Series.
    In this chapter, we''ll show you how to easily create these charts using the Danfo.js
    plotting API. Specifically, in this chapter, we''ll cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Danfo.js for plotting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating line charts with Danfo.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating scatter plots with Danfo.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating box and violin plots with Danfo.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating histograms with Danfo.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating bar charts with Danfo.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to follow along with this chapter, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A modern browser such as Chrome, Safari, Opera, or Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js, Danfo.js, and optionally Dnotebook installed on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A stable internet connection for downloading the datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation instructions for Danfo.js can be found in [*Chapter 3*](B17076_03_ePub_RK.xhtml#_idTextAnchor066),
    *Getting Started with Danfo.js*, while installation steps for Dnotebook can be
    found in [*Chapter 2*](B17076_02_ePub_RK.xhtml#_idTextAnchor045), *Dnotebook –
    An Interactive Computing Environment for JavaScript*.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Danfo.js for plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Danfo.js provides some basic chart types. These charts can be called
    on any DataFrame or Series object and, if the correct arguments are passed, it
    will display the corresponding chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, Danfo.js comes with the following charts:'
  prefs: []
  type: TYPE_NORMAL
- en: Line charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Box and violin plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatter plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These charts are exposed via the `plot` function. That is, if you have a DataFrame
    or Series object, calling the `plot` function on them exposes these charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `plot` method requires a `div` ID where the plot is to be shown. For example,
    assuming `df` is a DataFrame, we can call the `plot` function as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The chart type can be `line`, `bar`, `scatter`, `hist`, `pie`, `box`, `violin`,
    or `table`.
  prefs: []
  type: TYPE_NORMAL
- en: Each plot type will accept plot-specific arguments, but they all share a common
    argument called `config`. The `config` object is used to customize the plot as
    well as the layout. Think of the `config` argument as a combination of the layout
    and configuration properties we used in [*Chapter 5*](B17076_05_ePub_RK.xhtml#_idTextAnchor099),
    *Data Visualization with Plotly.js*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `config` argument is an object with the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the following section, we will show some examples of using the different
    chart types, as well as showing you how to configure them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We'll be downloading and using two real-world datasets in the following sections.
    This means you'll need an internet connection to download the datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Danfo.js to your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use Danfo.js for plotting, you need to add it to your project. If you''re
    working in Dnotebook, which we''ll be using for our examples, then use the `load_package`
    function to load Danfo.js and Plotly.js as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will install Danfo.js and Plotly.js in Dnotebook. Danfo.js
    uses the installed Plotly.js to make plots. Plots won't work unless Plotly is
    explicitly loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Older versions of Danfo.js (pre-0.2.3) ship with Plotly.js. It has been removed
    in newer versions as stated in the release notes shown here: [https://danfo.jsdata.org/release-notes#latest-release-node-v-0-2-5-browser-0-2-4](https://danfo.jsdata.org/release-notes#latest-release-node-v-0-2-5-browser-0-2-4).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re making plots in an HTML file, ensure to add the `script` tags to
    your header as demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Finally, in UI libraries such as React or Vue, ensure to install Danfo.js and
    Plotly.js via package managers such as npm or yarn.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading a dataset for plotting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we''ll be downloading a real-world financial dataset, and
    this dataset will be used for all our examples. In Dnotebook, you can download
    the dataset once in a top cell and have it available to other cells as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Ensure to declare `financial_df` with `var`. This makes `financial_df` available
    to every cell in your Dnotebook. If working in React or plain HTML, then it is
    recommended to use `let` or `const`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can show the top five rows of `financial_df` using the `head` function and
    `table` as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Table showing the top five rows of the financial dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Table showing the top five rows of the financial dataset
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our datasets, we can start making some interesting plots. First,
    we'll start with a simple line chart.
  prefs: []
  type: TYPE_NORMAL
- en: Creating line charts with Danfo.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Line charts are simple chart types mostly used on Series data or single columns.
    They can show trends in data points. To make a line chart on a single column –
    say, `AAPL.Open` in `financial_df` – we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 - Top five rows of the financial dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 - Top five rows of the financial dataset
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are using DataFrame subsetting (`financial_df["column name"]`)
    to get a single column – `AAPl.Open` – as a Series. Then, we call the `.line`
    chart type and pass in a `config` object. The `config` object accepts the `layout`
    property as well as other arguments used by Danfo.js and Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to plot specific columns, you can pass an array of column names
    to the `config` parameter, as demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Plotting two columns as a line chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Plotting two columns as a line chart
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the *x* axis of the chart is the index of the DataFrame or Series.
    In the case of the `financial_df` DataFrame, the index was auto-generated when
    we downloaded the dataset with the `read_csv` function. If you want to change
    the index, you can use the `set_index` function as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Table showing the top five rows with the index set to date'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Table showing the top five rows with the index set to date
  prefs: []
  type: TYPE_NORMAL
- en: 'If we make the same plot as earlier, we see that the *x* axis is automatically
    formatted to dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Chart of two columns (AAPL.open, AAPL.close) against the date
    index'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Chart of two columns (AAPL.open, AAPL.close) against the date index
  prefs: []
  type: TYPE_NORMAL
- en: 'You can specify other Plotly configuration options such as the width, fonts,
    and so on, by passing them to either the `layout` property or in the body of the
    `config` object. For example, to configure properties such as fonts, text size,
    layout width, and as far as even adding custom buttons to your plots, you can
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – A line plot with various configurations as well as layout properties
    specified'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – A line plot with various configurations as well as layout properties
    specified
  prefs: []
  type: TYPE_NORMAL
- en: With the preceding information, you can get started making nice line charts
    from your dataset. In the next section, we'll cover another type of plot – a scatter
    plot – available in Danfo.js.
  prefs: []
  type: TYPE_NORMAL
- en: Creating scatter plots with Danfo.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can easily make scatter plots by specifying the plot type to be `scatter`.
    For example, using the code from the preceding section, *Creating line charts
    with Danfo.js*, we can just change the plot type from `line` to `scatter`, and
    we get a scatter plot of the selected columns, as demonstrated in the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – A scatter plot on two columns'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – A scatter plot on two columns
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to make a scatter plot between two specific columns in the DataFrame,
    you can specify `x` and `y` values in the `config` object, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – A scatter plot on explicitly specified x and y columns'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – A scatter plot on explicitly specified x and y columns
  prefs: []
  type: TYPE_NORMAL
- en: To customize the layout or set `config`, you can pass the corresponding options
    to the `config` object just like we did in the *Creating line charts with Danfo.js*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll briefly look at two similar types of plots – box
    and violin plots.
  prefs: []
  type: TYPE_NORMAL
- en: Creating box and violin plots with Danfo.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The box and violin plots are similar and will generally use the same parameters.
    So, we will cover them both in this section.
  prefs: []
  type: TYPE_NORMAL
- en: In the following examples, we will first make a box plot and then change it
    to a violin plot by changing only the plot type option.
  prefs: []
  type: TYPE_NORMAL
- en: Making box and violin plots for a Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make a box plot for a Series or a single column in a DataFrame, first, we
    subset to get the Series, and then we''ll call the plot type on it, as demonstrated
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – A box plot on a Series'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_9.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – A box plot on a Series
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in order to change the preceding plot to a violin plot, you can just change
    the plot type to `violin`, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – A violin plot on a Series'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – A violin plot on a Series
  prefs: []
  type: TYPE_NORMAL
- en: What about when we need to make a box plot for more than one column at a time?
    Well, in the next section, we'll show you how.
  prefs: []
  type: TYPE_NORMAL
- en: Box and violin plots for multiple columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to make box/violin plots for more than one column in a DataFrame,
    you can pass an array of column names to the plot, as we demonstrate in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Box plots of multiple columns at a time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – Box plots of multiple columns at a time
  prefs: []
  type: TYPE_NORMAL
- en: 'Reusing the previous code, we can easily change the box plot to a violin plot
    by changing the plot type, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Violin plots of multiple columns at a time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.12 – Violin plots of multiple columns at a time
  prefs: []
  type: TYPE_NORMAL
- en: Finally, what if we want to specify the `x` and `y` values? We will show this
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Box and violin plots with specific x and y values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can make box and violin plots with specific `x` and `y` values. The `x` and
    `y` values are column names that must be present in the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that the `x` value of a box plot is categorical, that is,
    has a fixed number of classes. This ensures interpretability.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we show you how to explicitly specify `x` and `y`
    values to a plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Box plots from specific x and y values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – Box plots from specific x and y values
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `x` value is a categorical variable called `direction`. This
    column has two fixed classes – `Increasing` and `Decreasing`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, we can get the corresponding violin plot by changing the type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Violin plot from specific x and y values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – Violin plot from specific x and y values
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what would happen if we specified both continuous values for `x` and `y`?
    Well, let''s find out in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Box plot on two continuous variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.15 – Box plot on two continuous variables
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding output, you can see that the chart becomes almost uninterpretable
    and the goal of using a box/violin plot is not achieved. So, therefore, it is
    recommended to use box/violin plots for categorical `x` values.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll introduce the `hist` plot type for making histograms.
  prefs: []
  type: TYPE_NORMAL
- en: Creating histograms with Danfo.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A histogram, as we explained earlier, is a representation of the spread of data.
    The `hist` function exposed by the plot namespace can be used to make histograms
    from DataFrames or Series, as we'll demonstrate in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a histogram from a Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create a histogram from a Series, you can call the `hist` function
    on the Series, or if plotting on a DataFrame, you can subset the DataFrame with
    the column name, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Histogram on Series data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.16 – Histogram on Series data
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll make a histogram for more than one column in a DataFrame at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a histogram from multiple columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to make a histogram for more than one column in a DataFrame, you
    can pass the names of the columns as an array of column names, as we show in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – Histogram on two columns'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.17 – Histogram on two columns
  prefs: []
  type: TYPE_NORMAL
- en: If you need to specify the single value `x` or `y` from which to generate the
    histogram, you can pass the `x` or `y` value to the `config` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can only specify one of `x` or `y` at a time. This is because a histogram
    is a univariate chart. So, if you specify `x` values, the histogram will be a
    vertical one, and if `y` is specified, it will be a horizontal histogram.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we make a horizontal histogram by specifying `y`
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – A horizontal histogram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.18 – A horizontal histogram
  prefs: []
  type: TYPE_NORMAL
- en: By default, histograms are vertical and that is equivalent to setting the `x`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll introduce bar charts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating bar charts with Danfo.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bar chart presents categorical data with rectangular bars where the lengths
    are proportional to the values that they represent.
  prefs: []
  type: TYPE_NORMAL
- en: The `bar` function can also be called on the `plot` namespace and various configuration
    options can also be applied. In the following sections, we'll demonstrate how
    to create bar charts from a Series as well as a DataFrame with multiple columns.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar chart from a Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make a simple bar chart from a Series, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – A bar chart on a Series'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.19 – A bar chart on a Series
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the preceding figure, you'll notice that we have a large number of
    bars. This is because the `AAPL.Volume` column is a continuous variable and a
    bar is created for each point.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid such uninterpretable charts, it is recommended to use bar charts for
    variables with a fixed number of numeric classes. We can demonstrate this by creating
    a simple Series, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20 – A bar chart on a Series with fixed values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.20 – A bar chart on a Series with fixed values
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll show you how to make grouped bar charts from a list
    of specified column names.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bar chart from multiple columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create grouped bar charts from a list of column names, you can pass the
    names of the columns to the `config` object, as we demonstrate in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code cell gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.21 – A bar chart on two columns'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_6_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.21 – A bar chart on two columns
  prefs: []
  type: TYPE_NORMAL
- en: Notice that in the preceding example, we created a new DataFrame. This is because
    the financial dataset does not contain the required data types for bar charts
    as we said earlier.
  prefs: []
  type: TYPE_NORMAL
- en: That brings us to the end of this chapter. Congratulations on making it this
    far! We are sure you have learned a lot and can use the knowledge gained here
    in your personal projects.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered plotting and visualization with Danfo.js. First,
    we showed you how to set up Danfo.js and Plotly in a new project, and then moved
    on to downloading a dataset, which we loaded into a DataFrame. Next, we showed
    you how to create basic charts such as line, bar, and scatter plots, and then
    statistical charts such as histograms and box and violin plots. Finally, we showed
    you how to configure plots created with Danfo.js.
  prefs: []
  type: TYPE_NORMAL
- en: The knowledge you have gained in this and [*Chapter 5*](B17076_05_ePub_RK.xhtml#_idTextAnchor099),
    *Data Visualization with Plotly.js*, will be of practical use when creating data-driven
    apps as well as custom dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about data aggregation and group-by operations,
    thereby understanding how to perform data transformations such as merging, joining,
    and concatenation.
  prefs: []
  type: TYPE_NORMAL
