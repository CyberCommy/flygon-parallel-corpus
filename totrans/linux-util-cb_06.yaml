- en: Chapter 6. Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining processes with ps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining processes using top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing priorities with nice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observing a process using the /proc filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the programs running in Linux are processes. In this chapter, you’ll learn
    how to view their status by using ps and top, how to set the priority at which
    they run, and how to view the internals of a process by using the /proc filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every process has a unique identifier called a **Process Identifier** (**PID**).
    Also, every process has a **Parent Process Identifier** (**PPID**). There is an
    exception, `init` (or `systemd`). The `init` process starts all other processes
    and has a PID of 1\. This process is special because it cannot be killed (and
    any attempt to do so is often fatal).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to files, a process also has access permissions. These are referred
    to as the Real user and Group IDs. This provides a level of protection by not
    allowing unprivileged users to access critical operating system tasks. Memory,
    open files, and other resources are owned by the process and are kept separate
    from other processes (in most cases).
  prefs: []
  type: TYPE_NORMAL
- en: From the user’s perspective, a process is typically started from the command
    line or desktop. Take editing a file with `vi`, for example. The user starts the
    session and works interactively with the editor. He can save the file or edit
    another one. As long as the session is active, there is a PID associated with
    it. When the user terminates `vi`, the PID and all the associated resources are
    terminated as well. That PID will be recycled and used by the OS again later.
    A program run is this way is called a foreground process.
  prefs: []
  type: TYPE_NORMAL
- en: A process can also be run in the background. For example, in [Chapter 4](ch04.html
    "Chapter 4. Networking and the Internet"), *Networking and the Internet*, we ran
    the browser with the `firefox &` command. The ampersand puts the process into
    the background, freeing up that terminal for more input/output. Note that messages
    coming from the application (Firefox in this example) will still be output to
    that terminal. This can really be helpful when debugging. Also note that a process
    run in the background tends to run at a lower priority than a foreground task
    (more on priorities later). In the old days, background processes were also commonly
    referred to as jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some special file handles associated with each process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard input** (`stdin`): A process takes its normal input from here (Handle
    0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard output** (`stdout`): A process writes its normal output to here
    (Handle 1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard error** (`stderr`): A process writes its error output to here (Handle
    2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a screenshot showing the standard handles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding processes](img/3008OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Other files opened by a process start at handle 3\. There are some processes
    that have been given special names. For example, many of the processes on a Linux
    system are run in the background and, in most cases, are never meant to be run
    from the command line. These are called services or daemons. The **Hypertext Transfer
    Protocol Daemon** (**HTTPD)** web process is a good example of a service.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a service waits for an event or events to occur, performs an action
    or some actions, and then goes back to waiting again. If a service logs any activity,
    it will generally do so to the `/var/log/<service-name>` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the terminal a background job was started from is terminated, the background
    job will end as well. Some Linux distributions will attempt to warn the user of
    this condition.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a brief list of commands one can use to look at processes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see a snapshot of the processes currently running on the system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the processes in real-time run:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To see all the types of process directories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A process can spin off other processes. It can also spin off threads. A thread
    inherits all the handles and resources of the parent. It is generally used in
    programming to perform a small task concurrently, while the main task is running,
    and return quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Are there limits on the resources? Yes. The `ulimit` command is used to view
    and set the hard and soft limits on a process. It is not normally needed by the
    user; however, if you’re curious, run `ulimit -a` on your system. You should see
    an output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There’s more...](img/3008OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For more information on `ulimit`, consult the man page.
  prefs: []
  type: TYPE_NORMAL
- en: Examining processes with ps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ps` program allows the user to see a snapshot of the processes running
    on the system. By using the appropriate parameters, the output can be changed
    to include more or less information. For this section we will run as root, and
    use the BSD style `ps`. The options may be grouped, and no dash is used.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to run `ps`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running just `ps` with no parameters will give something like the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this is not very informative, let’s show every process that has a TTY:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, include the processes that don’t have a TTY:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the output in a more user-oriented format: `ps aux`. Note the change
    in the header.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the lines are cut off at the end on your system, add the wide option using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There sure is a lot of output. Here are some ideas on how to deal with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can redirect the output to a file as well: `ps auxw > ps-output.txt` and
    then view it with `more` or `vi`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also use `grep` to find a particular process ID. In another terminal,
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now back in your original terminal, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You should see a line containing the text `vi file1.txt`. This is the PID you
    are looking for and one of the most common uses of `ps`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also show a tree view of the processes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ps` command gets its information from the `/proc` file system. Every running
    process has an associated entry here. We will discuss `/proc` in more detail later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The BSD style header will look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The definitions of each of the terms are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`USER`: It is the owner of the process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PID`: It is the process identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%CPU`: It gives the CPU time divided by the time the process has been running
    for'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%MEM`: It gives the ratio of the process memory to the physical memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VSZ`: It contains the virtual memory size of the process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RSS`: It contains real memory resident set size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TTY`: It represents the terminal associated with this process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STAT`: It represents the process state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`START`: It gives the time the process started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIME`: It gives the total CPU time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COMMAND`: It is the name of the command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ps` command has quite a few other options to it. You can view threads,
    get security (`SELinux`) info, tighten what is displayed by the username, and
    change the output format. You can even modify some environment variables to change
    how `ps` works. See the man page for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot gives an idea of what `ps - auxw` looks like on my
    Fedora 17 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There’s more...](img/3008OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Examining processes using top
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `top` program is similar to `ps` except that it shows the state of the system
    in real time. You can control how it operates using command line switches and/or
    its interactive interface. It can also use a configuration file. You can do quite
    a bit with `top`. The following are some examples of what is possible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No special setup is needed. These commands will be run as root.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get help for `top`, you can run the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These are equivalent and show the library version and usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax for `top` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of `top` running on Fedora 17:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3008OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are some examples using the command line switches:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the screen every 2 seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the screen every half second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To update 10 times and then quit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To do both:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To update the screen immediately, press Spacebar or *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To monitor a specific PID, use the `-p` option. This will show the `init` (or
    `systemd`) process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let’s monitor a few processes. First, run `ps auxw` and remember the PIDs for
    four processes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then run `top`, substituting the PIDs obtained previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To omit showing idle processes, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To also show threads, run `top -H`. To monitor only the processes for a certain
    user, the syntax is `top -u <username>`. Try it with root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run `top` in the batch mode. For example, to save the output to a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some examples using the interactive commands. Start `top`
    and follow along:'
  prefs: []
  type: TYPE_NORMAL
- en: To show just the processes owned by a particular user (root in this example),
    press `U` and then enter `root`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To change the delay time, press `D` and then enter a time by pressing *D* followed
    by *1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To show all the CPUs on a multi-core machine, press *1* (press *1* again to
    toggle back).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To toggle the showing of the command line versus the program name, press *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To change the nice setting on a process, press *R* and then enter the priority
    desired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To activate Secure Mode, press *S* (see Secure Mode explained afterwards).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To send a signal to a process, press *K* and then enter the signal to send.
    Be sure you have the correct PID and signal before performing this action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To write the configuration file, press `W`. This will create the file `.toprc`
    in the user’s home directory and will use the settings in it on the next startup
    of `top`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To display the Help screen, press *H*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To quit top, press *Q*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a description of the first five lines shown in the previous
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`top`: It contains the time of day, machine uptime, number of users, and load
    average'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tasks`: It gives the number of total tasks, number currently running, sleeping,
    stopped, and zombie'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cpu(s)`: The different types of CPU states are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**us**: It represents the user time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sy**: It represents the system time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ni**: It represents the nice time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**id**: It represents the idle time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wa**: It represents the I/O wait time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hi**: It gives the time spent servicing hardware interrupts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**si**: It gives the time spent servicing software interrupts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**st**: It represents the stolen CPU time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mem`: It gives the total memory in machine; used, free, and buffers in KBs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Swap`: It gives the total swap space; used, free, and cached in KBs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the definitions for the standard header. Note that these
    can change based on command line options or interactive commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PID`: It defines the process identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USER`: It holds the username of the owner of this task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PR`: It holds the priority of this task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NI`: It consists of the nice value (more on priorities in the next section)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VIRT`: It exhibits the total amount of virtual memory used by this task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RES`: It gives the physical memory used by this task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHR`: It gives the shared memory used by this task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S`: It stands for the process status, which will be one of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**S**: It stands for sleeping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**D**: It means uninterruptible sleep'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R**: It shows the process is running (or ready to run)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**T**: It shows that the process has been traced or stopped'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Z**: It signifies the zombie status'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%CPU`: It gives the share of the elapsed CPU time since the last update, expressed
    as a percentage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%MEM`: It holds the currently used share of available physical memory, expressed
    as a percentage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIME+`: It gives the total CPU time used by this task since it began running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COMMAND`: It is the command used to start this task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the user configuration file, there can also be a global file.
    It is named `/etc/toprc` and consists of only two lines given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This file is created manually by the root user. If this file exists, it activates
    the Secure Mode and changes how `top` operates:'
  prefs: []
  type: TYPE_NORMAL
- en: A different version of the Help screen is shown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user cannot kill a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user cannot renice a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user cannot change the delay interval of `top`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `top` doesn’t appear to be working as you expected, check for the existence
    of the configuration files both for the users and root. There are plenty of other
    things you can do with `top`. You can change how the fields are arranged and sorted.
    You can change the color and highlighting. There is a multiple window option too.
    For more information, see the man page for `top`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of`top` on my Fedora 17 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There’s more...](img/3008OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing priorities with nice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `nice` command allows you to adjust the priority a process runs at. Modern-day
    operating systems usually do a great job of task scheduling. However, a particular
    process may require some tweaking on occasions. Here, we will show how to use
    `nice`.
  prefs: []
  type: TYPE_NORMAL
- en: The priority is referred to as the niceness level. The range of niceness a process
    can have goes from 19, which is the least favorable, down to a maximum of -20,
    which is the most favorable (if this seems backwards to you, it does to me as
    well).
  prefs: []
  type: TYPE_NORMAL
- en: Most favorable________________________Least favorable
  prefs: []
  type: TYPE_NORMAL
- en: 20 __________________________________19
  prefs: []
  type: TYPE_NORMAL
- en: Highest priority________________________Lowest priority
  prefs: []
  type: TYPE_NORMAL
- en: You may recall the NI column from the previous section on `top`. This is the
    niceness setting and on Fedora, several services run at the most favorable setting
    of -20.
  prefs: []
  type: TYPE_NORMAL
- en: Note that changing the niceness setting of a process is not a guarantee that
    the OS will honor it. It is simply a suggestion to the scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that the command given to nice must not be a built-in command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for `nice` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s run a few `nice` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the current nice value, run nice by itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run nice on itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See the output of 10? That’s the default adjustment if none is given.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now set it to the maximum value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'For the minimum value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s try something else. In another terminal, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then find its PID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run `top` on the previous PID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The nice column (NI) should show a niceness of 15.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a screenshot showing `nice` running on Fedora 17:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike most other Linux programs, there isn’t anything more to nice. If you
    try to set it above the maximum of 20, it will still use 20 and if you try to
    set it lower than the minimum of -19, it will use -19\. Also, the `top` program
    allows you to adjust the niceness level of a process dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Observing a process using the /proc filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `/proc` filesystem is where Linux stores the data related to the currently
    running processes. In most cases, a casual user would probably never (hopefully
    never) need to know this information. However, it can be really helpful during
    debugging, or if you just want to know about some of the internals of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps explain how to see the information contained in `/proc`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try an experiment in `/proc` as root run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'It shows `uptime: empty`, right? So if we cat it, there should be no output
    ideally, right? Try it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Wow, so how did that happen? The files in `/proc` are special because the information
    is read out of them in real time. Let’s try some more and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now run `cat version` and `cat meminfo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In another session, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s find its PID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to that directory in `/proc`: `cd /proc/<pid-from-above>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now change the directory to the **File Descriptor** (**FD**) directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `ls -la` command. You should see something like the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You can see this is indeed our session of `vi` editing the `test5.txt` file.
    Note that the file shown is a temporary file created by `vi` and left open during
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows a listing of the `/proc` directory on the Fedora
    17 system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There’s more...](img/3008OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So what does all of that mean? The numbers are, as you may have guessed, process
    IDs. Every process will have a number here, which are actually directories that
    contain practically everything you would ever want to know about that process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are what some of those files are for. I didn’t list each one
    but covered the ones that I think are the most interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`buddyinfo`: It contains data about nodes and memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cgroups`: It contains data about CPU groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmdline`: It is the command line given to start the process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`consoles`: It gives information about consoles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cpuinfo`: It has a very informative listing of the CPUs in your system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crypto`: It contains information about the crytographic routines available
    in the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devices`: It has a list of the devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diskstats`: It has a list of the disk statistics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dma`: It has a list of DMA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filesystems`: It gives a list of the filesystems available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`interrupts`: It contains a very detailed listing of the interrupts being used
    by the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iomem`: It gives the I/O memory information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ioports`: It gives the I/O port information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kallsyms`: It consists of a list of the OS symbols'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kcore`: It represents the memory image of this machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meminfo`: It contains a very detailed list of how memory is being used by
    the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modules`: It contains a list of the modules used by the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mounts`: It contains a list of the mounted filesystems (real and virtual)
    in the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`partitions`: It contains a list of the partitions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slabinfo`: It consists of a list of the slab memory objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`softirqs`: It is another IRQ listing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uptime`: It gives the amount of time the machine has been up (see the `uptime`
    command)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: It is the kernel version (see the `uname` command)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vmstat`: It gives the virtual memory statistics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoneinfo`: It is another rather detailed memory listing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With a few exceptions, you can cat most of these files to get at important internal
    data. Note, do not cat (or do anything else with) the `kcore` file. Do not try
    to edit these files. Also, if you cat a file and nothing seems to happen, pressing
    *Ctrl* and *C* should make you back out.
  prefs: []
  type: TYPE_NORMAL
- en: Programs written in a language such as C can take advantage of the information
    in `/proc` to do some pretty cool things. For example, I have developed code that
    can allow a program to determine if it was run normally to the screen, or redirected
    to a file. The program can then take appropriate action, for example, clear the
    screen if run normally, and not clear it if redirected to a file. This way, control
    codes don’t get embedded in the file. I have another C code that can determine
    the full path and filename of any file currently opened by the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is another screenshot of `top`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There’s more...](img/3008OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This was created by running `top` and then pressing *Z*. You can customize `top`
    quite a bit. See the man page for more information.
  prefs: []
  type: TYPE_NORMAL
