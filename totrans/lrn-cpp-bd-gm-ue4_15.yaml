- en: Virtual Reality and Beyond
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unless you've been living in a cave, you've probably heard about **Virtual Reality**
    (**VR**). VR is one of the hottest trends in gaming right now, along with **Augmented
    Reality** (**AR**), which will be covered later in this chapter. And thanks to
    such innovations as the ultra-cheap Google Cardboard and similar devices that
    let you view basic VR on recent smartphones, it's pretty easy to get access to
    VR technology.
  prefs: []
  type: TYPE_NORMAL
- en: Whether all you have is a Google Cardboard, or you have a higher-end device,
    such as the Oculus Rift or HTC VIVE, UE4 makes it easy to program for VR. Of course,
    if you have the PlayStation VR, you would need to become an official Sony developer
    to program for that (just like if you were programming anything else for PlayStation),
    so you probably won't be able to do that unless you're working for a company that's
    doing a PSVR title.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you''ll get an overview of VR and UE4 that should help you get started.
    Here''s what we will be covering:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready for VR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using VR Preview and VR Mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controls in VR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips on VR development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I''m also going to introduce some more advanced features of UE4\. We''ll start
    by looking at the other big, hot technology right now, AR, and move on to other
    technologies. Here is what we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: AR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procedural programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending functionality with plugins and add-ons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile, console, and other platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready for VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's an exciting time to be getting in to VR development. Maybe you're trying
    to get into the latest hot technology. Or maybe, like me, you've been reading
    about VR for decades in cyberpunk books by authors such as William Gibson, Neal
    Stephenson, Wilhelmina Baird, and Bruce Bethke, and are excited that it's finally
    here. In either case, here's how you can prepare yourself for your journey into
    VR programming.
  prefs: []
  type: TYPE_NORMAL
- en: To get started in VR with the Oculus Rift or HTC Vive, first you need a VR-ready
    computer. Oculus has a free program you can download from their website at [https://ocul.us/compat-tool](https://ocul.us/compat-tool),
    or go to their support page, and it will tell you if there's a problem with your
    graphics card.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you have a recent computer, unless you specifically got one that was
    marked as VR-ready, there's a good chance you might need a new graphics card.
    VR is extremely graphics-intensive, so it requires a pretty high-end (and usually
    pretty expensive) graphics card.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if all you want to do is VR on a phone, you may be able to get by
    without it, but you'll have to do all your testing on the phone and won't have
    access to a lot of UE4's cool features, such as VR editing.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a computer that can handle it, you will probably want either an
    Oculus Rift or an HTC Vive (or both, if you're really serious and have plenty
    of money to put into it, since neither one is cheap). Whichever device you get
    will install all the drivers you'll need as part of the setup process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go into UE4, go to Edit | Plugins, and make sure you have the plugins
    for whatever device you own (you can search for them). It should look something
    like this, depending on your VR hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/566d5501-f7d1-476d-94bd-bd88596fd6df.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, make sure you have your VR software running (it may start up automatically
    when you open UE4, depending on your VR hardware).
  prefs: []
  type: TYPE_NORMAL
- en: Using VR Preview and VR Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to view something in VR, the good news is you don''t need to write
    anything new! Just go into the existing project, click the arrow next to the Play
    button, and choose VR Preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c5602ad-8138-4d8f-bdfd-3f4299a861c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, just put on your VR headset and you should be able to see the game in VR!
  prefs: []
  type: TYPE_NORMAL
- en: Once you run the game, you can see the game world. You won't be able to move
    around (you can't see your keyboard or mouse while you're in VR) but you will
    be able to turn your head to look around you in every direction.
  prefs: []
  type: TYPE_NORMAL
- en: Be very careful if you're prone to motion sickness. This is a serious problem
    in VR, although there are ways to minimize the effects in your game, which we
    will talk about later. You might not want to be in  VR mode for too long until
    you get used to it and know how it affects you.
  prefs: []
  type: TYPE_NORMAL
- en: UE4 also has another tool that will really help you out, VR Mode. This allows
    you to actually view and edit the game in VR, so you can see how the changes will
    look as you make them. This could be very helpful, since many things don't look
    the same in VR as they do in a non-VR game.
  prefs: []
  type: TYPE_NORMAL
- en: 'To activate VR Mode either click VR Mode in the toolbar or hit *Alt* + *V*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35549f17-a3f4-4eab-9206-20c89a971d69.png)'
  prefs: []
  type: TYPE_IMG
- en: You can look around, and in VR Mode you will be able to use your motion controllers
  prefs: []
  type: TYPE_NORMAL
- en: in the game. You will probably want to look up the controls you need before
    you go
  prefs: []
  type: TYPE_NORMAL
- en: 'into VR Mode for the first time. There are detailed instructions on VR Mode
    and the controls you can use within it on the Unreal website at: [https://docs.unrealengine.com/en-us/Engine/Editor/VR](https://docs.unrealengine.com/en-us/Engine/Editor/VR).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to go further, by programming for specific VR systems, such as
    the Oculus Rift, Vive, Steam VR, or others, there are detailed instructions on
    working with many different VR systems on the Unreal website. You can find them
    here: [https://docs.unrealengine.com/en-us/Platforms/VR](https://docs.unrealengine.com/en-us/Platforms/VR).'
  prefs: []
  type: TYPE_NORMAL
- en: Controls in VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may notice that, in VR mode, the usual controls won't work. You won't even
    be able to see the keyboard and mouse with a VR headset on, which makes it extremely
    difficult to use them. Fortunately, higher-end devices have their own controllers
    available, and UE4 has a Motion Controller component you can add to your player
    pawn, which will allow you to point to things with that instead of a mouse.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you know from the beginning that you are aiming for VR, UE4 has VR-specific
    classes and templates available that will add some of the functionality you need
    automatically. There is also a VR expansion plugin that is extremely helpful,
    and if you''re not on a big team of developers, you should really look into it.
    You can find it here: [https://forums.unrealengine.com/development-discussion/vr-ar-development/89050-vr-expansion-plugin](https://forums.unrealengine.com/development-discussion/vr-ar-development/89050-vr-expansion-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: UI is very tricky in VR, and many people are still trying to work out the best
    way of doing it. Your best bet is probably to play a lot of existing games and
    see what you think works best for you. And make sure you experiment as much as
    possible, because that's the best way to see what works!
  prefs: []
  type: TYPE_NORMAL
- en: Tips on VR development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VR is a new and exciting technology. People are still figuring out what works,
    so there is plenty of room for experimentation, and there is plenty of that going
    on. But you still need to keep some best practices in mind, because you don't
    want people playing your game to have a bad experience or even to get sick playing
    your game. If they do, they might not play it again, and would be unlikely to
    buy your next game. So, you want the experience to be good for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest problem with VR is simulation sickness (or motion sickness). Some
    people are affected by this more than others, but if you're not careful, even
    people who are normally not prone to motion sickness will still have problems.
    So, it's very important to be careful. And make sure you have other people test
    your game, because while you might get used to it, that doesn't mean other people
    won't have trouble.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important considerations is keeping a very high frame rate.
    Different devices have different recommendations for minimum frame rates, and
    if you drop below those, people are likely to start having problems.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the quality as high as possible is important in general. Anything that
    looks fake or bad could throw someone out and cause motion sickness. So, if any
    effects you are trying to achieve don't look as you expected, try doing something
    else.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that many VR games don't have the player move around within the
    game much, if at all, or have them sitting in a moving vehicle. This is another
    way of avoiding simulation sickness. It's the movement that is the biggest problem,
    particularly vertical movements such as jumping, or rotating by controller instead
    of just turning your head. Basically, your mind thinks you're moving, but your
    body gets conflicting messages because it's not feeling the movement. If you think
    you're sitting in a car, your body doesn't expect to feel movement, so that's
    why it seems to work better. Although, if the player is standing while playing,
    they are likely to have less problems.
  prefs: []
  type: TYPE_NORMAL
- en: There is plenty of information about VR and best practices for it online. The
    Unreal site has a page about best practices with some very good UE4-specific information
    at [https://docs.unrealengine.com/en-us/Platforms/VR/ContentSetup](https://docs.unrealengine.com/en-us/Platforms/VR/ContentSetup)
    . I recommend going through that before you start your project, because keeping
    best practices in mind from the beginning is better than finding out at the end
    of the project that some things don't work or won't work well.
  prefs: []
  type: TYPE_NORMAL
- en: And as I said before, getting people to test it is very important. VR technology
    is so new
  prefs: []
  type: TYPE_NORMAL
- en: that you'll want to make sure it will work for as many people as possible.
  prefs: []
  type: TYPE_NORMAL
- en: AR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AR is similar to VR, only, instead of being completely surrounded by a virtual
    world, in this case, you see virtual objects placed in the real world (as viewed
    through a camera). This could be through a headset, such as Microsoft's HoloLens,
    or the Magic Leap. But since those are new and only available as expensive devices
    aimed at developers right now, you will primarily see AR through mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Popular AR games on mobile devices include Pokemon Go, where you can catch Pokemon
    and view them in front of the world around you. In AR mode, you have to look around
    you until you find a Pokemon (it shows what direction to turn) and catch it. You
    can even take pictures, which makes for some interesting images. Its precursor,
    Ingress, let you go to real-world locations in the game, but Pokemon Go really
    expanded on that.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the success of that game, mobile AR games are very popular right now.
    Since you're dealing with real-world objects you can't control, this could involve
    some complex computer vision, but fortunately, UE4 has built-in functionality
    to help you out.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two primary mobile AR systems UE4 supports are ARKit for iOS and ARCore
    for Android. You can find more detailed information about AR programming and the
    prerequisites for each type on the Unreal site at [https://docs.unrealengine.com/en-us/Platforms/AR](https://docs.unrealengine.com/en-us/Platforms/AR).
    To start either one, you will want to create a new project using the handheld
    AR template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18e0180d-0637-4b27-b536-badb415b48eb.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, your settings should be Mobile / Tablet,
    Scalable 3D or 2D, and No Starter Content. Once you create the project, you can
    connect your phone to your computer, and if that is fully set up (depending on
    your phone, you might need to install software on your computer to see it), you
    should see it under devices when you click the arrow next to Launch. Otherwise,
    you can still use Mobile Preview ES2 (PIE) under Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'While you''re not likely to be programming for Magic Leap anytime soon, there
    is early access documentation on it available on the Unreal site at: [https://docs.unrealengine.com/en-us/Platforms/AR/MagicLeap](https://docs.unrealengine.com/en-us/Platforms/AR/MagicLeap).'
  prefs: []
  type: TYPE_NORMAL
- en: Procedural programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Procedural programming in games has been very popular lately. If you've played
    games such as Minecraft, No Man's Sky, or Spore, you've played a procedural game.
    The history of procedural games goes back decades, to old text-based games such
    as Moria, Angband, and NetHack. Rogue like games (named after the original, Rogue)
    are still a popular genre of game that use procedural techniques to generate random
    levels, so every time you play, you get a completely different game. So, procedural
    programming adds replayability that's hard to get when levels have to be built
    by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Procedural programming lets you create parts of a game, whether it's the environment,
    levels, or even the audio, through rules and algorithms in code. Basically, instead
    of having a human being set up every detail, the code does it for you.
  prefs: []
  type: TYPE_NORMAL
- en: The results can be unpredictable, especially in 3D, which is a lot more complicated
    than drawing out rooms and pathways in 2D text characters. Because of this, sometimes,
    the procedural levels are created ahead of time, so the designer can choose the
    ones they like before adding them to the game.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different techniques that help with procedural programming. One
    is the use of **volumetric pixels** (**voxels**), which let you refer to points
    in 3D space in a simple way, based on their relation to other voxels. Voxels have
    been used in many projects, including the now defunct game Landmark (which I worked
    on), and were supposed to be used in the now canceled EverQuest Next. UE4 supports
    voxels through plugins, such as Voxel Plugin ([https://voxelplugin.com/](https://voxelplugin.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Procedural programming can also be used for music. There are projects that have
    trained neural networks on specific types of music and come up with some pretty
    impressive music in similar style. You can also modify the music that plays based
    on what is happening in the game. Spore did some very impressive things with this.
  prefs: []
  type: TYPE_NORMAL
- en: If you're interested in learning more, look up David Cope, a researcher who
    has written several books on the topic. Or, you can see what Unreal's developers
    have been doing with procedural audio here: [http://proceduralaudionow.com/aaron-mcleran-and-dan-reynolds-procedural-audio-in-the-new-unreal-audio-engine/](http://proceduralaudionow.com/aaron-mcleran-and-dan-reynolds-procedural-audio-in-the-new-unreal-audio-engine/).
    You can also find UE4 add-ons, such as a procedural MIDI plugin that I've worked
    with in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Extending functionality with plugins and add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already seen a few examples of plugins and other add-ons, and how they
    can extend UE4, from adding VR functionality for your specific VR headset to adding
    functionality to support voxels, or procedural music. But there are a lot more
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'For plugins, you can go to Edit | Plugins and view everything that''s already
    available by category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e98ff7d3-2450-4583-bf19-640225a53e22.png)'
  prefs: []
  type: TYPE_IMG
- en: Those are the built-in plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you''re looking for more, you will want to check the Marketplace in
    the Epic Game''s Launcher:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a651bb48-ffdc-4cd3-8032-fab9709bb77e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While a lot of what you''ll see is graphics and models, there is plenty of
    functionality available that you can add on. Some of it is free, and some you
    need to pay for. For example, here''s a search for Procedural:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca744b78-3900-4962-947e-fcff46050c11.png)'
  prefs: []
  type: TYPE_IMG
- en: UE4 is a very popular game engine, so if there's anything you need, there is
    a good chance that someone else has already developed an add-on for it. You can
    also find many projects elsewhere on the internet, many of which are open source
    with developers happy to help you out with their implementation. But these could
    take extra work to implement and you need to be careful and know exactly what
    you're downloading and installing.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile, console, and other platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw when we mentioned AR, you can develop in UE4 for mobile devices and
    preview your game either on your computer or on a phone. One of the great things
    about UE4 is that it supports many different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Many AAA game studios use UE4, so it definitely supports all the major game
    consoles (Xbox One, PS4, Switch, and even mobile consoles such as the 3DS and
    Vita). The trick to those is you can't usually just develop for them—you need
    to become an authorized developer and usually need to spend a lot of money on
    a DevKit (a specialized version of the console meant for development, that lets
    you debug on the console).
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, with the development of indie game marketplaces on the console,
    the bar to getting developer access is much lower now than it used to be. But
    you will still probably want a lot more experience and published game titles before
    you start looking into this.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, you still have many different options and platforms for your games.
    And once you've built a game for one platform, it's a lot easier to port that
    game to a different platform (UE4 makes that very easy!).
  prefs: []
  type: TYPE_NORMAL
- en: The main difference will be the controls, since you may be using a touchscreen,
    controller, motion controllers (in VR), or a keyboard and mouse. Each of these
    will have different requirements and will change gameplay slightly. But as long
    as you keep in mind which platforms you're aiming for from the very beginning,
    you will be able to plan your game in a way that will work for them all.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered a lot in this book, but we've come to the end. We've learned the
    basics of C++, and created a really simple game in UE4 with some basic AI, a partial
    UI including inventory, and the ability to cast spells using particle systems.
    We also learned about VR, AR, and other up-and-coming new technologies that UE4
    can help you out with.
  prefs: []
  type: TYPE_NORMAL
- en: You've now learned enough to start working on your own games. There are many
    other advanced books and websites you can look at if you need more information
    on specific topics, but you should have a much better idea of what you're looking
    at for now.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you've enjoyed the journey. Good luck on your future projects!
  prefs: []
  type: TYPE_NORMAL
