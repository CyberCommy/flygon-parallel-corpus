- en: Chapter 5. Proxy Operations with OWASP ZAP and Burp Suite
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5章。使用OWASP ZAP和Burp Suite进行代理操作
- en: 'Web servers and applications are exposed to the internet more than most other
    enterprise applications: they have to be available andÂ serveÂ their end customers.
    Because of this, defenders have been taught to view user traffic (surfing the
    site, interacting with the dynamic content, and so on) as normal, so long as it
    follows behavioral norms. Their defenses will focus on broad-based interactions
    while letting the slow trickle of *normal* user activity slide. Effective pen
    testers will mimic this behavior whenever possible to learn as much as they can
    about their target before launching later, more intrusive stages of the Kill Chain.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务器和应用程序比大多数其他企业应用程序更容易暴露在互联网上：它们必须可用并为最终客户提供服务。因此，防御者已经被教导将用户流量（浏览网站，与动态内容交互等）视为正常，只要它遵循行为规范。他们的防御将专注于广泛的交互，同时让*正常*用户活动的缓慢渗漏。有效的渗透测试人员将尽可能模仿这种行为，以在启动后更具侵入性的Kill
    Chain的阶段之前尽可能多地了解他们的目标。
- en: As we noted in [Chapter 4](000.html#), *Scanning for Vulnerabilities with Arachni*,
    specialized scanning tools can be a double-edged sword. For one thing, most scanners,
    Arachni included, specialize in looking for vulnerabilities by both passive and
    active means. Both are helpful, but as you are probably well aware, they come
    at the expense of cost in time and stealth in the case of active scans. In addition
    to the resource needs and timing required, we must also consider our own workflows
    versus the level of stealth required. Significant intelligence can be gleaned,
    but if the tailoring of the profiles isn't precise, you risk alerting your target's
    operators and being detected. Too often, early-in-career pen testers will unleash
    an Nmap scan or some other active recon tool only to discover that their noise
    has ruined their chances of going further.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第4章](000.html#)中指出的，使用Arachni进行漏洞扫描，专门的扫描工具可能是一把双刃剑。首先，大多数扫描器，包括Arachni在内，专门通过被动和主动手段寻找漏洞。这两种方法都有帮助，但正如您可能很清楚的，它们会以时间成本和主动扫描的隐蔽性为代价。除了资源需求和所需的时间之外，我们还必须考虑我们自己的工作流程与所需的隐蔽级别。可以获得重要的情报，但如果配置文件的调整不精确，您就有可能警告目标的操作人员并被发现。在职业早期的渗透测试人员经常会释放Nmap扫描或其他主动侦察工具，然后发现他们的噪音破坏了他们进一步前进的机会。
- en: Scanning-focused tools also require some conversion of findings into later-phase
    operations, and they also have holes in their ability to detect. Most scanning
    tools will not take action on your behalf. These caveats may be okay in a white-box
    testing scenario where you are handed carte blanche to test a web application
    without the fear of being caught. In black-box scenarios, where the pen test is
    more likely to be conducted by a Red Team (acting as an outside attacker), more
    surgical precision is warranted. Many of you may have noticed that most scanning
    or *spidering* tools have blind spots, especially around new content delivery
    paradigms such as those encountered with JavaScript or Ajax,which Â dynamically
    create the content rather than relying on stored HTML. For these cases and many
    others, it makes sense for us all to to have an alternative toolset or two in
    your arsenal.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以扫描为重点的工具还需要将发现转化为后期操作，并且它们在检测能力上也存在漏洞。大多数扫描工具不会代表您采取行动。这些警告可能在白盒测试场景中是可以接受的，在这种场景中，您可以毫无顾忌地测试Web应用程序，而不必担心被发现。在黑盒场景中，渗透测试更有可能由红队（作为外部攻击者）进行，更需要更精确的手术技术。你们中的许多人可能已经注意到，大多数扫描或*蜘蛛*工具存在盲点，特别是在遇到JavaScript或Ajax等新内容交付范式时，这些范式动态创建内容而不是依赖存储的HTML。对于这些情况和许多其他情况，我们都有必要在您的武器库中拥有一两个备用工具集。
- en: The Proxy-based tools offers us a complimentary tool that cannot only conduct
    scans but also pivot into exploits and access within the same tool. These products
    act as a proxy between the client-side (browser) and server-side (the web tier)
    elements . By sitting in the middle of this critical link, we're able to scour
    the message traffic between the two sides and observe or even modify and attack.
    Proxy tools have the added benefit of allowing us to modify requests after they
    have passed some validation, so we can evade some of the basic JavaScript and
    HTML restrictions the application may have in place.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 基于代理的工具为我们提供了一个补充工具，不仅可以进行扫描，还可以在同一个工具中进行漏洞利用和访问。这些产品充当客户端（浏览器）和服务器端（Web层）元素之间的代理。通过坐在这个关键链接的中间，我们能够搜索两侧之间的消息流量，并观察甚至修改和攻击。代理工具的额外好处是允许我们在通过一些验证后修改请求，这样我们就可以规避应用程序可能存在的一些基本JavaScript和HTML限制。
- en: You may already be using some of these tools in your arsenal; there is no doubt
    that the market is saturated with both open source and commercial alternatives.
    Our goal in this chapter will be to go a little further with two of the most popular
    alternatives included with Kali Linux â�� **Burp Suite** by [https://portswigger.net/](https://portswigger.net/)Â and
    OWASPs own **Zed Attack Proxy** (**ZAP**). Both tools are free to use with the
    included binaries, but we'll also see just how much the Burp Suite Professional
    version can add to the mix. It is my hope that we'll cover some more advanced
    techniques for leveraging these proxy-based tools that you can then use to improve
    your own process, deliver better results, and help secure your customers more
    effectively.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经在您的武器库中使用了其中一些工具；毫无疑问，市场上充斥着开源和商业替代品。我们在本章中的目标将是进一步研究Kali Linux附带的两种最受欢迎的替代品——**Burp
    Suite**（[https://portswigger.net/](https://portswigger.net/)）和OWASP自己的**Zed Attack
    Proxy**（**ZAP**）。这两个工具都可以免费使用，但我们还将看到Burp Suite专业版可以为混合增加多少。我希望我们将涵盖一些更高级的技术，以利用这些基于代理的工具，然后您可以使用这些技术来改进您自己的流程，提供更好的结果，并更有效地帮助您的客户保护安全。
- en: 'Keeping these high-level goals in mind, in this chapter we''ll cover the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这些高层次的目标，在本章中，我们将涵盖以下内容：
- en: Contrasting the differences between the two leading proxy tools, Burp Suite,
    and OWASP ZAP (formerly zaproxy) with Paros
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diving into using Burp's Proxy and Scanner and ZAP to scope and detect vulnerabilities
    in the OWASP Top 10
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to leverage Burp's Active tools to enumerate information and exploit
    vulnerabilities
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing access control and session management through fuzzing and Burp Repeater
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncovering and exploiting injection flaws, input validation, and applicationÂ logicÂ vulnerabilities
    using Burp Suite
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling back the curtain withÂ ZAP
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: OWASP's suite of tools are well worth learning â�� their platform-agnostic approach
    means you can use these tools anytime, anywhere without worrying about which operating
    system you are on. Luckily for us, Kali bundles it by default. Even more helpful
    to us as testers is OWASP's leadership in the Web Application Security arena.
    Their insights and guidance make it into each iteration of the ZAP ([https://www.owasp.org/index.php/ZAP](https://www.owasp.org/index.php/ZAP))
    tool, so we can be certain that we're getting leading edge vulnerability and exploit
    information incorporatedÂ into the tool as it is discovered.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: As with any tool in Kali, you've likely already used ZAP in your studies or
    work, but there are some advanced techniques that can be employed to improve the
    reach and efficacy of ZAP in your toolset. ZAP can either actively scan the target
    (which is the approach used by their **`Quick Start`** tab) or can be used as
    a proxy tool to capture, iterate, and fuzz sites.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'ZAP''s proxy functionality scan can be extended through its **`Tools`** menu
    to scan, spider, or fuzz applications as well. ZAP is acting as a web proxy, typically
    on the same host as the tester''s browser. Â  The following screenshot shows how
    ZAP fits into the architecture:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: OWASP's ZAP is our MITM that can slow down and replay server-client interactions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: While most web application black-box scenarios can be tackled by deploying our
    proxy MITM on the same host, it should be noted that with the advent of the internet
    of Things and a move toward using web applications to serve these devices, we
    may use ZAP or Burp in proxy mode, where the client is actually an embedded web
    client on a smart device (for example, television, camera, thermostat, SCADA sensor,
    pump or motor, and so on). Some companies are predicting that the internet will
    seeÂ 50 billion devices connected by the year 2020, and while that was initially
    dismissed as overzealous, it may actually be quite understated. Given just how
    many manufacturers seem to be having mixed luck in securing them (see the **Mirai
    Botnet**, for instance), it is worth considering this use case for when the opportunity
    arises. Hackers are nothing if not entrepreneurial!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Quick refresher on launching ZAP scans
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can get into the more advanced functions of ZAP, let's quickly get
    a baseline project up-and-running with a persistent project (which saves data
    between sessions). Assuming you have already configured your browser to point
    to ZAP as the proxy (mine is configured for `localhost:8080`), we'll target the
    **Mutillidae**Â application, which is similar to the **DVWA** but offers some
    greater depth, located at `http://172.16.30.129/mutillidae/`. I have also configured
    my client to trust certificates from ZAP by importing its Root certificate to
    ensure that I do not run into issues with **SSL/TLS**, although this is not likely
    in this test scenario.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: There are a host of training and archived applications available on the **OWASP
    Broken Web Application** VM, including **DVWA**, **WebGoat**, **Multillidae**,
    and so on.Â  If you can only run one on your next trip alongside your Kali VM,
    then it would be the best one to have. For more focused testing, I recommend finding
    the latest vulnerable VMs at [http://www.vulnhub.com/](http://www.vulnhub.com/).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Going active with ZAP
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If we want to run an active scan, we can simply enter the DVWA's address in
    the URL to attack the application and click **`Attack`**. Many use this feature,
    but understanding the scans can help you better use the tool and pick the correct
    combination of functions to use.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_02.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: A quick scan reveals tons of vectors, but one of the most pressing is those
    pesky passwords.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The Sites panel maps the site, showing files and the directory structure, as
    seen in the previous screenshot. In the lower window, we'll notice that **`Alerts`**
    are grouped according to their type, and ZAP makes pivoting into follow-up actions
    pretty easy. We can see differently colored flags for each URL corresponding to
    the concern level of the associated vulnerability and a spider symbol denoting
    it was learned via the automated **`Spider`** function. As we visit these locations
    through our browser, the spider will disappear as we get greater fidelity while
    interacting with the site. Scanning can save time, but the automated spidering,
    as with any active technique, tends to be a blunt tool rather than a fine-tuned
    instrument. If you already have some ideas as to what you are after, focusing
    these scans on smaller portions of the target will pay dividends in stealth.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'In either case, we see more web-based security issues in Mutillidae than the
    other applications on the BWA image, and one of the most egregious is the **path
    traversal** issue that seems to allow us to expose the `/etc/passwd/` contents.
    We can use the contextual menu to highlight and readÂ about the vulnerability
    or even launch the flagged URL in our browser, as seen in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_03.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Oh boy, we need to have a talk with the customer about some passwords â�� after
    we finish the test.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, this treasure trove of password information came with minimal
    effort, not always the case (once can hope),Â but every alert provided by ZAP
    offers a thread we should pursue in our penetration testing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Passive ZAP scanning
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Passive scanning** is a non-obtrusive means by which we can map out and learn
    about the structure of the site and the code that results in interacting with
    it. Passive scanning does not allow for an in-line modification of the HTTP messages,
    but a full inspection of the unmodified headers and content allows ZAP to provide
    insights. And it will build alerts and tags just as if they were generated through
    active scanning.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'We have only two areas for configuration with Passive scanning:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The first one focuses on the sensitivity of the scanning engine. We can visit
    theÂ options, the**Â ****`Passive Scan Rules`** screen****`,`**** as seen in the
    following screenshot and select **`Off`**, **`Low`**, **`Medium`**, or **`High`**Â to
    alter the threshold for alerting on each type of vulnerability. **`Off`** disables
    scanning and alerting entirely, **`Low`** provides the highest level of sensitivity,
    while **`High`** focuses only on the most definiteÂ vulnerabilities to flag.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B03918_05_04.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: Passive scanning can omit or scrutinize a myriad of test types, depending on
    our need.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: The second area of configuration for passive scanning is our ability to tag
    according to specific regex expressions or header information, seen in the following
    screenshot. Why is this useful to us?Â  When we have some idea as to what we are
    looking for in a particular page, we can create custom tags that allow ZAP to
    identify patterns we are after. The default tag pattern for passwords in ZAP,
    as shown in the following screenshot, may work just fine for passwords, but what
    about when we discover that our target changed things up by replacing the field
    name with *passphrase*Â or *secret*? This tagging customization can be used to
    glean other interesting information as well, and it gives us all a good reason
    to brush up on our regular expressions or **regex**Â syntax.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B03918_05_05.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: Tags can be added or modified to help us uncover our target's own secrets.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Getting fuzzy with ZAP
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: ZAP has the ability to modify or **fuzz**Â requests on their way to the web
    application, and this can be a great tool for testing input validation, application
    logic, a multitude of injection vulnerabilities, and error handling. Fuzzing attacks
    add some automation to otherwise tedious, laborious, and iterative tests, focusing
    on bugs applying toÂ how requests are processed. The built-in Fuzzing payloads
    are reasonably straightforward but can be extended through the use of add-ons
    or even custom scripts. A great resource for advancing your fuzzing skills on
    ZAP is the **OWASP's OTG Appendix C** located atÂ [https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors](https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors).
    We can launch the fuzz action from almost anywhere within ZAP, simply by right
    clicking on **`Alert`**, **`History`**, or **`Request`** entry for the link you
    plan to fuzz, as seen in the followingÂ screenshotÂ when we hit the Mutillidae
    site again (the application is taking some serious abuse!). Your objective should
    be to look for any spider results or browsing operations that result in requests
    or responses where variables are passed between a client and a server and look
    for opportunities to test the limits of what is accepted. In this case, we think
    we might have some opportunities to tackle the login application and test for
    some SQL injection/input validation vulnerabilities.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_06.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Kicking off a fuzz attack can be done from almost anywhere in ZAP.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: We can then pick a field to fuzz and add a location for the payload we want
    to deploy (Mutillidae points out several test vectors in their *practice* mode,
    so I would encourage trying others as well).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: To read on the multitude of vulnerabilities that OWASP's Mutillidae web application
    provides, you can read the SANS guide that explains the origins, purpose, and
    inner workings of the applicationÂ atÂ [https://www.sans.org/reading-room/whitepapers/application/introduction-owasp-mutillidae-ii-web-pen-test-training-environment-34380](https://www.sans.org/reading-room/whitepapers/application/introduction-owasp-mutillidae-ii-web-pen-test-training-environment-34380).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: To start, we're going to use the **JBroFuzz** add-on to provide a file fuzzer,
    meaning that JBroFuzz will bring a bunch of lists in various categories to try.Â 
    Password, directory, and username lists are common, but so are handy strings for
    various SQL queries that might be useful to try. These steps are shown in the
    followingÂ screenshot.Â When testing robust web applications, it is also useful
    to test against common browser URIs and HTTP versions to see if there is a point
    where you can force a downgrade in posture so that the application can accommodate
    your *out-of-date* browser or operating system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_07.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Configuring the fuzzing payload is a simple process.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Depending on what boxes you check and fields you highlight, you will see that
    ZAP begins to exhaustively test these vectors against the page or field. In the
    **`Fuzzer`** tab, you'll notice all of the results. If you see one that is of
    interest, by all means, right-click on it and attempt to launch it in your browser.
    What we are looking for here are differences. Why did entry **`41`** in the followingÂ screenshotÂ result
    in a **`302`** response and a larger byte count? It would seem that the fuzzing
    process resulted in a different result for that test string.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_08.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Fuzzing Results quickly focus our attention on a small set of strings.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: In the top right-hand side panel, you can review both the header and the body
    code or information, and as we see in following figure,Â we have some interesting
    differences that we can record for future testing and analysis. We can see a seemingly
    harmless payload `1 exec sp_ (or exec xp_)` result on the left, and the result
    of passing the payload `â�� or username is not NULL or username = â��` on the
    right.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_09.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Fuzzing Results quickly focus our attention on a small set of strings.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: As we can see now, this would seem to indicate that something about the right-hand
    side's payload found a different response--these cracks in the application's armor
    can be all thatÂ we need to get a foothold and compromise our target. Once you
    have fuzzed any field of interest, it is common to fuzz combinations of fields
    as well to conduct a brute force attack for simple credential-based authentication.
    OWASP's ZAP can certainly help with these follow-up tests as well. Similar capabilities
    can be found in other Kali-bundled testing toolsets such asÂ **w3af,****WebScarab**,
    and the venerable classic, **Paros**. It is worth our time as practicing penetration
    testers to have at least a couple of these well understood.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Taking it to a new level with Burp Suite
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP is a great open source introduction to proxy-based scanning and fuzzing.
    That being said, most testers have already found that additional tools are necessary
    to carry out a complete test, for reasons like having the ability to cover more
    input vectors, cover additional content types like Flash and Webservice vulnerabilities,
    and automate more report and audit processes.Â More can be learned about the many
    toolsets at **SecToolMarket.com** ([http://www.sectoolmarket.com/price-and-feature-comparison-of-web-application-scanners-unified-list.html](http://www.sectoolmarket.com/price-and-feature-comparison-of-web-application-scanners-unified-list.html)
    ).Â The effort to coordinate with outside toolsets to complete anything more than
    a small penetration test is more trouble that is worth. A large number of newer
    proxy-based **Dynamic Application Security Testing** (**DAST**) frameworks have
    sprung up to answer the call. These solutions range from free to extremely costly,
    likely to be used by large enterprises or those pen testers that they hire. Many
    of these platforms run on Linux, Windows, and even Mac OS.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux conveniently bundles the free version of one of the leading tools
    in the Linux realm;Â **Burp Suite** ([https://portswigger.net/burp/](https://portswigger.net/burp/))
    was created by *Daffyd Studdard* and maintained by his company called **PortSwigger**.
    Burp Suite's architecture includes the proxy and fuzzing capabilities of the other
    toolsets, but extends those functions through built-in tools that more completely
    scan, fuzz, and otherwise interact with the target environment. Burp Suite can
    compare site maps and automate many other tasks that are manual for ZAP, w3af,
    and other Kali-bundled tools, and it covers almost the entire OWASP OTG. Some
    of these tools, which we'll discuss at length, are either disabled or limited
    in the free version, as seen in the following screenshot**.**Â I would highly
    recommend obtaining a subscription to Burp Suite Pro ($349 per user per year as
    of the time of this writing) as at this price, you receive frequent updates, outstanding
    support, and one of the most cost-effective web pen test tools on the market,
    and you can use it on Kali (or other forms of Linux), Windows, and Mac OS as needed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_10.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: A comparison of Burp Suite Free and Professional Editions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the user-driven workflow that Burp Suite is geared to support
    helps testers understand theÂ differences between editions and decide how Burp
    Suite will support their own tailored processes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is adapted from the figure located atÂ  [https://portswigger.net/burp/help/suite_usingburp.html](https://portswigger.net/burp/help/suite_usingburp.html)
    but presented here to more clearly outline the portions the **Professional Edition**
    adds:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_11.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Burp Suite's architecture supports a full pen test workflow.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about the pieces preceding, we'll quickly review the setup and configuration
    of the Proxy and Spider, and then quickly move into the more advanced capabilities
    that Burp offers that provide automation across the entire pen test process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Recon with Burp Suite
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with any proxy tool, we'll need to configure our browser's settings to use
    the appropriate IP address and port number (typically using IP address `127.0.0.1`
    and port `8080`). Luckily for us, the same configuration works for both ZAP and
    Burp, unless you are planning to chain the proxies. This might be necessary if
    you have the need to pass traffic through multiple tools or use an external proxy,
    and details of how you can do this with Burp in the picture are discussed atÂ [https://portswigger.net/burp/help/options_connections.html](https://portswigger.net/burp/help/options_connections.html).Â The
    OWASP **Broken Web Application Virtual Machine** (**BWA VM**)Â includes multiple
    applications for testing and training, and we want to focus on just the OWASP
    Mutillidae application, which provides plenty of fodder for our practice.Â
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Stay on target!
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As you are already probably aware, the recommended approach to beginning recon
    is to manually map the target with the Proxy's Intercept function turned off to
    begin with.Â  As we click through various pages and submit gibberish in forms,
    we'll populate the **`Target`** tab's **`Site map`** subtab. Right-clicking on
    any domains or IP addresses of interest here allows us to add the host to the
    scope of our analysis. We can also add targets manually toÂ **`Target Scope`**
    (have a look at the following screenshot), but both methods give us the opportunity
    to focus the analysis on just that application, as shown in the green box--anything
    that is defined within the scope, you need to understand Burp will be attacking
    for you! You can also omit certain types of content from the scope (inside the
    red box), but in this case, we'll just leave the defaults in.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: These defaults will ensure we aren't wasting our time looking into the logout
    pages.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_12.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Target Scopes are a huge productivity enhancement.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Why are we going through this trouble? Automated tools need some help.Â  If
    you turn them lose without constraints, you run the risk of breaking your target
    with unnecessary traffic or inflicting collateral damage to sites outside of your
    charter--both are bad for business! Manual mapping is akin to a walk through,
    and it allows you and your team to better understand what technologies might be
    in play and how the site's workflow impacts the user interaction. We need to do
    a better job answering some questions up front that can ensure more relevant results
    later on. Where is the site trying to funnel users? What services are offered?
    What forms can we flag as interesting for deeper analysis? You get the idea and
    probably gain an understanding of this in your own work. It is important that
    Burp Suite also understands this to be more effective on your behalf.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'As you come to the close of your passive and manual mapping, you can certainly
    gain some assistance from Burp in finishing the exploration. Gray sites in the
    **`Target`** tab and theÂ **`Site map`**Â subtab are the links that have been
    learned but not visited, so if there is anything you believe to be gained by visiting
    them, by all means go for it!Â  You can also activate **`Content discovery`**
    to allow Burp to try to discover directories, templates, or other latent hidden
    files and folders that may have gone unlinked or are no longer active but are
    still stored on the server. This is done simply by right-clicking on the host,
    selecting **`Engagement Tools`**, and then **`Discover Content`**, as seenÂ here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您接近被动和手动映射的结束时，您可以从Burp中获得一些帮助来完成探索。**`目标`**选项卡和**`站点地图`**子选项卡中的灰色站点是已经了解但尚未访问的链接，因此如果您认为访问它们可能会有所收获，那就尽管去做吧！您还可以激活**`内容发现`**，让Burp尝试发现可能已经断开链接或不再活跃但仍存储在服务器上的目录、模板或其他潜在隐藏的文件和文件夹。只需右键单击主机，选择**`参与工具`**，然后**`发现内容`**，如下所示：
- en: '![](img/B03918_05_13.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_13.png)'
- en: Content Discovery can help find the hidden or forgotten content.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 内容发现可以帮助找到隐藏或被遗忘的内容。
- en: Once you have kicked off **`Content Discovery`**, you have the opportunity to
    select the built-in or custom word lists that are used for the automated discovery
    action (look at the following screenshot). Content discovery is really a special
    spidering function, which is in effect looking for pages and folders that aren't
    linked, whereas a Spider session is focused on following all links until the site
    is fully mapped. Here weÂ can decide whether case sensitivity is observed (which
    increases the number of operations to fully enumerate all possibilities. We can
    also specify the file types and extensions of interest, the number of threads
    and connections to be used, and even whether we want Burp's content discovery
    to Spider out from those hidden artifacts and dive into anything those links may
    point to.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启动了**`内容发现`**，您就有机会选择用于自动发现操作的内置或自定义单词列表（请参阅下图）。内容发现实际上是一种特殊的蜘蛛功能，其目的是寻找未链接的页面和文件夹，而蜘蛛会专注于跟踪所有链接，直到网站被完全映射。在这里，我们可以决定是否遵守大小写敏感性（这会增加完全枚举所有可能性的操作次数）。我们还可以指定感兴趣的文件类型和扩展名，要使用的线程和连接数，甚至是否希望Burp的内容发现从这些隐藏的工件中蜘蛛出来，并深入到这些链接可能指向的任何内容。
- en: I highly recommend using the **annotating** features in Burp. The left-most
    field of any finding in a content window can be color coded using a dropdown,
    and you can also double-click to add comments. When working a complex target or
    as part of a team, these tools can keep you organized and prevent unnecessary
    rework.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议在Burp中使用**注释**功能。内容窗口中任何发现的最左侧字段都可以使用下拉菜单进行颜色编码，您还可以双击添加评论。在处理复杂目标或作为团队的一部分时，这些工具可以帮助您保持组织，避免不必要的重复工作。
- en: '![](img/B03918_05_14.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_14.png)'
- en: Tailoring Content Discovery's options.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 调整内容发现的选项。
- en: The **`Content discovery`** tool will then exhaustively test for all potentially
    untapped or hidden content meeting the criteria you've established (look at the
    figure following), and you can view this in the **`Site map`** subtab of the **`Content
    discovery`** dialog box.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**`内容发现`** 工具将会全面测试所有潜在未开发或隐藏的内容，满足您设定的标准（参见下图），您可以在**`内容发现`**对话框的**`站点地图`**子选项卡中查看这些内容。'
- en: I recommend using the filters at any chance you can get. Site maps, in particular,
    are a fantastic tool for reducing your information into only that which is of
    interest to you. Simply click on the ****`Filter:`**** dialog and adjust settings
    to ensure you are filtering all of the non-essential information out.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您在任何机会都使用过滤器。特别是站点地图，它是将您的信息减少到只有您感兴趣的内容的绝佳工具。只需点击**`过滤器：`**对话框，并调整设置以确保过滤掉所有非必要的信息。
- en: '![](img/B03918_05_15.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_15.png)'
- en: Content Discovery helps complete the Site map.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 内容发现有助于完成站点地图。
- en: Getting particular with proxy
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用代理进行特定设置
- en: Now, we are ready to begin to use the more automated tools.Â  You may have a
    preference as to whether you activate the Proxy Intercept or pivot into the **Burp
    Spider** first, but I tend toward using **Burp Proxy** and avoiding *spider* unless
    it is a white-box test and the customer is expecting us. With the passive and
    manual mapping in the target phase, proxy should be able to help us now focus
    on those areas of the application that we've flagged as potential soft spots in
    the target's armor. Proxy can be activated by simply toggling to *Intercept is
    on*Â in the **`Proxy`** tab's **`Intercept`** subtab.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始使用更自动化的工具。您可能更喜欢首先激活代理拦截或进入**Burp Spider**，但我倾向于首先使用**Burp Proxy**，避免使用*蜘蛛*，除非这是一个白盒测试，客户期望我们这样做。在目标阶段进行被动和手动映射后，代理应该能够帮助我们集中精力解决我们已经标记为目标软点的应用程序领域。只需在**`代理`**选项卡的**`拦截`**子选项卡中切换到*拦截已开启*即可激活代理。
- en: As you surf your sites,Â **`Proxy`** will intercept these requests and allow
    you to change any of the fields for your own use. This can be pretty labor intensive,
    so be sure to limit this hands-on process to only those portions of the application
    that you believe need a human's touch or as a means by which to familiarize yourself.Â 
    As soon as you believe the further analysis or investigation, right-click on the
    Proxy's **`HTTP history`** tab (look at the following screenshot) and hand the
    form or URL over the task to another tool in the Burp Suite to make better use
    of your time. If, for example, you needed to attempt multiple iterations of a
    form modification, **Burp Repeater** can offer that and track multiple such requests
    all at once. If you would prefer to launch automated attacks, Burp Intruder can
    tackle those on your behalf. **`Sequencer`** and **`Comparer`** can also be launched
    here.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你浏览网站时，**`Proxy`**会拦截这些请求，并允许你更改任何字段以供你自己使用。这可能非常费力，所以一定要将这种亲自操作的过程限制在你认为需要人工干预的应用程序部分，或者作为熟悉自己的手段。一旦你认为需要进一步分析或调查，右键单击代理的**`HTTP
    history`**标签（查看下面的截图），并将表单或URL交给Burp Suite中的另一个工具，以更好地利用你的时间。例如，如果你需要尝试多次修改表单，**Burp
    Repeater**可以提供这个功能，并同时跟踪多个这样的请求。如果你想发起自动攻击，Burp Intruder可以代表你处理这些攻击。**`Sequencer`**和**`Comparer`**也可以在这里启动。
- en: '![](img/B03918_05_16.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_16.png)'
- en: Burp Suite makes pivoting from Proxy analysis easy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite使得从代理分析转移变得容易。
- en: Going active with Spider
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用Spider进行主动操作
- en: '**Burp Spider** is a quick and convenient tool, but I recommend caution. Spidering
    can help speed up any pen testing processes, but the tool''s own author recommends
    using it only for portions of very large applications or where time is of the
    essence and the risk is outweighed by schedule.Â  That said, it is well worth
    understanding and having in your repertoire in case it is needed.Â  The good news
    is that all of us have plenty of time to master it.Â'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Burp Spider**是一个快速方便的工具，但我建议谨慎使用。Spidering可以帮助加快任何渗透测试过程，但该工具的作者建议仅在非常庞大的应用程序的部分或时间紧迫且风险被时间表所抵消的情况下使用。也就是说，了解并掌握这个工具是非常值得的，以备不时之需。好消息是，我们都有足够的时间来掌握它。'
- en: Spider's configuration is located on a single tab (look at the following screenshot),
    and gives us access to settings that can help us limit the impact of this noisy
    tool on our targets, automatically generate form filling data, attempt login,
    and pass special browser request headers.Â  The one setting I would avoid altering
    is the **`Passive Spidering`** settings. Unchecking the **`Passively spider as
    you browse`**Â box prevents Burp from automatically identifying links and content,
    as you use other tools in the suite like proxy or target. Assuming you have all
    of your settings how you like them, you can kick off the active spidering session
    in the **`Control`** tab.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Spider的配置位于一个选项卡上（查看下面的截图），并且让我们可以访问一些设置，这些设置可以帮助我们限制这个喧闹工具对我们目标的影响，自动生成填充数据，尝试登录，并传递特殊的浏览器请求头。我建议不要更改的一个设置是**`Passive
    Spidering`**设置。取消选中**`Passively spider as you browse`**框会阻止Burp在你使用套件中的其他工具时自动识别链接和内容。假设你已经将所有设置调整到你喜欢的状态，你可以在**`Control`**选项卡中启动主动的Spidering会话。
- en: '![](img/B03918_05_17.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_17.png)'
- en: Spidering Settings are useful, but leave Passive alone unless you are certain!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Spidering设置很有用，但除非你确定，否则不要碰被动设置！
- en: Burp's **`Target`**, **`Spide`****`r`**, and **`Proxy`** tools all provide fantastic
    reconnaissance of the target and contribute to a consolidated site-map and catalog
    of potential vulnerabilities for us to investigate. Though site maps and organized
    lists of issues can assist in the latter phases of our testing, you can't test
    what you can't see or don't know exists! Now that you've gathered all of this
    information, you probably want to do something with it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Burp的**`Target`**、**`Spider`**和**`Proxy`**工具都提供了目标的出色侦察，并为我们提供了一个整合的站点地图和潜在漏洞的目录，供我们调查。尽管站点地图和问题的有序列表可以帮助我们在测试的后期阶段，但你无法测试你看不到或不知道存在的东西！现在你已经收集了所有这些信息，你可能想对它们做些什么。
- en: Activating Burp Suite
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活Burp Suite
- en: What makes Burp Suite so valuable to us as a primary tool is that we can quickly
    move from the recon phase and into the exploitation phase of the testing, allowing
    us to validate our findings without having to manually coordinate with an outside
    tool. In this section, we'll see how Burp's **`Scanner`**, **`Intruder`**, **`Repeater`**,
    and **`Sequencer`** can help dig into the working list of vulnerabilities and
    help us scope the damage (or potential damage) to our targets. The problem with
    some pen testing methodologies is that those developing them are under the impression
    that more tools indicate better results. Peers of mine who have years of experience
    in smaller firms or teams, however, find that they see greater coverage, more
    coherent reports, and much fewer errors and heartache when using fully integrated
    tool suites. Your mileage may vary, but the integration and operation of a collection
    of tools where a consolidated toolset already exists is probably a task best suited
    for larger pen test teams.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite对我们来说如此宝贵的原因在于，我们可以快速从侦察阶段转入测试的利用阶段，这样我们就可以验证我们的发现，而不必手动协调外部工具。在这一部分，我们将看到Burp的**`Scanner`**、**`Intruder`**、**`Repeater`**和**`Sequencer`**如何帮助我们深入挖掘漏洞的工作列表，并帮助我们确定对我们目标的损害（或潜在的损害）。一些渗透测试方法的问题在于，开发这些方法的人认为更多的工具意味着更好的结果。然而，我认识的一些有多年经验的同行发现，他们在较小的公司或团队中使用完全集成的工具套件时，能够获得更广泛的覆盖、更一致的报告，以及更少的错误和痛苦。你的情况可能有所不同，但在已经存在集成工具集的情况下，集成和操作一系列工具可能更适合较大的渗透测试团队。
- en: All four of the tools in this section can be initiated from almost any site
    map or menu in Burp, and it is likely you have used Intruder and Repeater in the
    past. We'll review them here with some recommendations for the best way to deploy
    them for your testing. Keep in mind though â�� some of the fun specifics of going
    after a specific attack vector (**SQL Injection**, **Cross-site Scripting** and
    **Request Forgeries**, and so on) will be covered later in focused chapters on
    each subject, with Burp Suite as one of the tools we'll use to pursue them.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的四种工具几乎可以从Burp的任何站点地图或菜单中启动，很可能您以前已经使用过Intruder和Repeater。我们将在这里对它们进行审查，并提出一些建议，以便为您的测试部署它们的最佳方式。请记住，一些特定攻击向量（如SQL注入、跨站脚本和请求伪造等）的有趣细节将在后面专门章节中进行讨论，Burp
    Suite将作为我们用来追踪它们的工具之一。
- en: Scanning for life (or vulnerabilities)
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 寻找生命（或漏洞）
- en: '**`Proxy`** and **`Spider`** help build the site map, but what about testing
    pages, forms, and the like for whether they are vulnerable?Â  The most broad-brush
    tool we can employ is **Burp****Scanner**.Â  Make no mistake--scanner can take
    a very active role and initiates what amounts to an attack on the targets in its
    active modes. For these reasons, please ensure you have narrowed your scopes and
    are cognizant of exactly what hosts you are unleashing Burp Scanner to do, especially
    when engaging the active scanning capability. I am convinced that it is for these
    far-reaching implications that Scanner was reserved for the professional license.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 代理和蜘蛛有助于构建站点地图，但是用于测试页面、表单等是否存在漏洞的工具是什么呢？最广泛的工具是Burp Scanner。毫无疑问——扫描器可以起到非常积极的作用，并在其主动模式下对目标发起攻击。因此，请确保您已经缩小了范围，并且清楚地知道您正在释放Burp
    Scanner去执行的确切主机，尤其是在使用主动扫描功能时。我相信正是因为这些深远的影响，扫描器才被保留给专业许可证用户。
- en: If you are not using Burp Suite Professional Edition, I still recommend understanding
    the capabilities and value Scanner offers to possibly help justify its expense;
    but at the very least, provide a bar with which you can measure your chosen scanning
    alternative, whether it be Accunetix, w3af, ZAP, or something else.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用Burp Suite专业版，我仍然建议您了解扫描器提供的功能和价值，以帮助证明其费用的合理性；但至少，它可以为您提供一个衡量您选择的扫描替代方案的标准，无论是Accunetix、w3af、ZAP还是其他工具。
- en: For what it is worth, it is impossible to cover all of the alternatives in a
    single tome and still make a useful book. Pen testing, much like any other technical
    field, sees multiple solutions to the same problem; and as with those other fields,
    the tools selected and methods used will vary based on the backgrounds and proficiencies
    of the users and requirements of the job. I encourage you to practice with the
    tools discussed in depth here and entertain alternatives as your own needs dictate.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，不可能在一本书中涵盖所有的替代方案并且仍然能够制作出一本有用的书。渗透测试，就像任何其他技术领域一样，针对同一个问题有多种解决方案；并且与其他领域一样，所选的工具和方法将根据用户的背景和能力以及工作的要求而有所不同。我鼓励您深入研究这里讨论的工具，并根据自己的需求考虑其他选择。
- en: 'A quick survey of colleagues conducting regular pen tests showed that while
    many use Burp Suite and Scanner, in particular, most had not stopped to think
    about what each tool was doing in the grand scheme of things. A quick review:
    Scanner works by taking cached requests that have been observed in the recon phase
    and modifying them to test for disclosed vulnerabilities that may exist in the
    underlying code. Through expressed behavior, scanner can verify the absence or
    presence of a vulnerability. In the process of these many operations, it is likely
    that the target will be compromised, so it is imperative that we have permission,
    understand the implications, and have taken steps to both warn the customer and
    secure the server should any testing prove detrimental to their posture.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对进行定期渗透测试的同事进行的快速调查显示，虽然许多人使用Burp Suite和扫描器，但大多数人并没有停下来思考每个工具在整个方案中的作用。简单回顾一下：扫描器通过获取在侦察阶段观察到的缓存请求，并修改它们以测试底层代码中可能存在的漏洞。通过表现行为，扫描器可以验证漏洞的存在或不存在。在这些操作过程中，目标很可能会受到影响，因此我们必须获得许可，了解影响，并采取措施警告客户并保护服务器，以防测试对其姿态产生不利影响。
- en: 'Burp''s Scanner tool is also different from others in the market, in that,
    while those scanners often crawl and scan at the same time, Burp Scanner offers
    two distinct modes:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Burp的扫描器工具也与市场上的其他工具不同，因为这些扫描器通常同时爬行和扫描，而Burp扫描器提供了两种不同的模式：
- en: '**Passive mode**: Scanner is typically working behind the scenes in passive
    mode, observing the traffic we are generating, and evaluating the requests and
    responses in real time. Why is this a good thing? First, it allows us to drive
    the scanning and interact with the application when a dialog (credentials, form
    entry, and so on.) is required, and thus goes further into the application''s
    inner reaches.Â  Second, it requires no work on our part--simply interacting via
    the browser engages the passive scanning mode.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被动模式：扫描器通常在被动模式下在后台工作，观察我们生成的流量，并实时评估请求和响应。这有什么好处呢？首先，它允许我们驱动扫描并与应用程序进行交互，当需要对话（凭据、表单输入等）时，它可以进一步进入应用程序的内部。其次，它不需要我们做任何工作——只需通过浏览器进行交互即可启动被动扫描模式。
- en: '**Active mode**: In an active mode, a scanner can both conduct live active
    scans as you surf the website and can be initiated manually through the context
    menu to pursue vulnerabilities on a page or fork of the application after some
    configuration via the wizard.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主动模式：在主动模式下，扫描器可以在您浏览网站时进行实时主动扫描，并可以通过上下文菜单手动启动，通过向导进行一些配置后，对页面或应用程序的分支进行漏洞追踪。
- en: We should also note that a scanner is capable of testing against known vulnerabilities
    of both the server and client-side code; and this is very useful, in that, it
    allows us to prove a comprehensive report to our customers that helps them see
    the application's performance holistically.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该注意，扫描器能够测试服务器端和客户端代码的已知漏洞；这非常有用，因为它允许我们向客户提供全面的报告，帮助他们全面了解应用程序的性能。
- en: 'Scanner''s capabilities help set Burp apart from other DAST tools for three
    key reasons:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner的功能有三个关键原因使Burp与其他DAST工具有所不同：
- en: Server-side vulnerabilities can be much less accurate with other tools because
    many of these errors stay local to the server-side environment and are never reflected
    in the client, thereby avoiding detection by testers
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他工具对服务器端漏洞的准确性可能会低得多，因为许多这些错误局限于服务器端环境，并且不会反映在客户端上，从而避免了测试人员的检测。
- en: Scanner also focuse on testing for vulnerabilities that it has a good shot of
    actually testing with authority, such that those vulnerabilities that are, at
    best, inaccurately discovered here are omitted to ensure Burp's output can be
    trusted and free of false positives
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scanner还专注于测试它有权威实际测试的漏洞，因此那些最多在这里被错误发现的漏洞被省略，以确保Burp的输出是可信的，没有误报。
- en: Scanners can quickly allow pivots into the other tools in the suite (without
    a need to configure or transfer data) such that there is always another path available
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描器可以快速地允许切换到套件中的其他工具（无需配置或传输数据），因此总是有另一条路径可用。
- en: So now that we understand scanner's strengths and our responsibilities, let's
    take a look at using it more effectively.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了扫描器的优势和我们的责任，让我们更有效地使用它。
- en: Passive scans are a no brainer
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 被动扫描是一个不费脑筋的选择。
- en: 'Chances are you have all been using this aspect of scanner in your own work,
    but just in case it was turned off or misconfigured, we can first check to see
    if the Passive scanning is turned on by visiting the **`Scanner`** tab''s **`Live
    scanning`** subtab, as seen inÂ here:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能您在自己的工作中一直在使用扫描器的这个功能，但以防它被关闭或配置错误，我们可以首先检查被动扫描是否已打开，方法是访问**`Scanner`**选项卡的**`Live
    scanning`**子选项卡，如下图所示：
- en: '![](img/B03918_05_18.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_18.png)'
- en: Passive Scanning configured to scan all traffic.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 被动扫描配置为扫描所有流量。
- en: To select which aspects of that traffic are scanned by the passive mode **`Scanner`**,
    you visit the **`Options`** subtab and turn on or off eleven categories as shown
    inÂ the following screenshot. I recommend leaving all of them checked unless a
    category is outside of the scope. Passive scanning is only implemented on pages
    you are visiting and interacting with, and there is minimal risk that the scan
    will result in collateral damage.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 选择被动模式**`Scanner`**扫描的流量方面，您可以访问**`Options`**子选项卡，并打开或关闭十一个类别，如下截图所示。我建议除非某个类别超出范围，否则都保持选中。被动扫描仅在您访问和交互的页面上实施，并且几乎没有风险会导致附带损害的扫描结果。
- en: '![](img/B03918_05_19.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_19.png)'
- en: Passive Scanning can observe most areas of the interesting traffic.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 被动扫描可以观察到大部分有趣的流量区域。
- en: As you can see in the following screenshot, passive scanning captures several
    potential vulnerabilities and provides both an explanation of the issue and potential
    remediation steps as well as the original request and corresponding response information,
    including the headers, any associated HTML or XML, and so on.Â Not too shabby
    for what amounts to a free scan that poses no additional time requirements or
    resources!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，被动扫描捕获了几个潜在的漏洞，并提供了问题的解释和潜在的补救步骤，以及原始请求和相应的响应信息，包括标头、任何相关的HTML或XML等。对于一个免费的扫描来说，这并不算太糟糕，而且不需要额外的时间要求或资源！
- en: '![](img/B03918_05_20.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_20.png)'
- en: Scanner's results are descriptive and complete and offer remediation steps.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Scanner的结果是描述性和完整的，并提供了补救步骤。
- en: Active scanning â�� Use with care!
  id: totrans-125
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 主动扫描——谨慎使用！
- en: As mentioned earlier, active scanning is an attack on the target.Â  Please be
    certain of your target, the permission to actively scan and compromise it, and
    of your ethical and legal responsibilities should you find something unexpected
    or serious enough to warrant immediate disclosure to the customer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，主动扫描是对目标的攻击。请确保您的目标、主动扫描和妥协的许可，并且了解如果发现意外或足够严重以至于需要立即向客户披露的情况下，您的道德和法律责任。
- en: 'Much like Passive scanning, you can first check to see if the Active scanning
    is turned on by visiting the **`Scanner`** tab''s **`Live Scanning`** subtab.Â You
    can choose to deactivate it, run it using the target scope, or even a custom scope.
    You can then configure the many potential vulnerability types and engine tweaks
    on the **`Options`** subtab as seen in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与被动扫描类似，您可以首先检查主动扫描是否已打开，方法是访问**`Scanner`**选项卡的**`Live Scanning`**子选项卡。您可以选择停用它，使用目标范围运行，甚至使用自定义范围。然后，您可以在**`Options`**子选项卡上配置许多潜在的漏洞类型和引擎调整，如下截图所示：
- en: '![](img/B03918_05_21.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_21.png)'
- en: Active scanning options cover the engine, optimization, and vulnerability areas.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 主动扫描选项涵盖了引擎、优化和漏洞领域。
- en: The ****`Active Scanning Areas`**** section allows you to deselect vulnerability
    types in the event you have already covered them in another toolset. You can also
    select subsets of events to concentrate on a specific set (common in white-box
    testing) or to conduct an incremental test.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Active Scanning Areas`** 部分允许您取消漏洞类型，如果您已经在另一个工具集中涵盖了它们。您还可以选择事件的子集，集中在特定集合上（在白盒测试中很常见），或进行增量测试。'
- en: Manual active scans can follow the same path, but are initiated by us rather
    than automatically engaged, as in the following screenshot. This might be the
    best middle ground--all of the power of an active scan, but only aimed at explicit
    paths or pages.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 手动主动扫描可以遵循相同的路径，但是由我们发起，而不是自动进行，如下截图所示。这可能是最好的折中方案——拥有主动扫描的所有功能，但只针对明确的路径或页面。
- en: '![](img/B03918_05_22.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_05_22.png)'
- en: Manual Active scans can be explicitly focused on any host, page, or folder.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: In both the active scanning techniques, the scans will be added to the **`Scan
    Queue`** subtab; and when you are satisfied that you have queued enough active
    actions, you can select as many scans as you desire, right-click, and resume the
    scanning.Â  The **`Scan Queue`** subtab will report all the progress (look at
    the following screenshot), and you will see considerable resource demands as your
    **`Scanner`** processes iterations against all selected pages to fully qualify
    any vulnerabilities on those pages.Â
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_23.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: Active Scan progress against all queued actions.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: The results ofÂ **`Scanner`** are what we came for (as shown in the following
    screenshot). Burp provides us with the listing, and each one is available with
    a description and follow-up actions.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_24.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: Active Scanner results are shown with all relevant information at our fingertips.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: The flight of the intruder
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Burp Suite also includes some more focused tools and the Intruder is one that
    allows for some serious automation of field manipulation, which is really useful
    for things like injection attempts and brute-force attacks. **Intruder** is a
    fuzzer on steroids. When we find an HTTP request that looks like a good candidate
    for any of these sorts of attacks, we can identify the fields (Burp calls them
    **positions**) we think can be tweaked and then ask Intruder to apply what Burp
    calls **payloads** to each of them, which are either from prebuilt lists or generated
    through some tried-and-true algorithms. Because intruder can do this across multiple
    positions, it is a huge time saver for us and provides exhaustive test coverage.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Intruder's versatility is a huge help. It can assist us in revealing account
    names (usually by running potential lists and observing varied responses). Intruder
    can also apply these techniques to iterate for a wide variety of fields on each
    account such as address, phone number, social security numbers, banking information,
    and so on, which they may associate with the user's account or profile. Lastly,
    just to be sure we're getting all we can out of the tool, Intruder is also a fully-featured
    fuzzer for vulnerability hunting, such as injection attacks or input validation
    issues. Mastering intruder's capabilities can be a huge force multiplier for us
    in our own testing, and luckily for us, it is a pretty straightforward tool.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Stop, enumerate, and listen!
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If we're using intruder to enumerate single fields, most commonly, usernames
    or account IDs, the process is pretty straightforward. I'll try and hit Mutillidae's
    login page (shown in thefollowing screenshot) and see if we can figure out what
    sorts of usernames we can unearth. I'll slap in some gibberish, just to trigger
    a request/response pair in Burp Proxy (the intercept is on), and unless I am really
    lucky, get an *Account does not exist*Â message.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_25.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: Anything will do in these fields to start, we just need to see the request!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **`Proxy`** tab and theÂ **`HTTP History`** subtab, I can see my **`Request,`**
    complete with the gibberish that I filled in before clicking send. I can right-click
    on this request as shown in following figureÂ andÂ clickÂ **`Send to Intruder`**
    for some serious enumeration kung-fu:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_26.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Let's Send this request to Intruder for Enumeration awesomeness.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: We should see the **`Intruder`** tab's name turn a shade of orange-â��this means
    a new intruder request is queued up and ready for action! In the first tab (not
    shown) we can see that the IP address and port of the server are pre-filled.Â 
    Moving to the **`Positions`** subtab, you'll select the **`Sniper Mode`**; and
    you'll want to clear all fields (intruder, asÂ helpful as it maybe, wants to volunteer
    to guess all of the Positions),Â and then just select the username gibberish and
    click **`Add,`** as seen in in the following screenshot.Â You'll notice that any
    field you add will now add `Â§` to the beginning and end of each position (`asdf`
    now reads `Â§asdfÂ§`) and highlight it in orange. If we were going to try and
    fuzz a field for vulnerability scans, we'd instead select a suitable position
    for that (similar to the cookie information, the POST page name, and so on). This
    will give us a position with which we canÂ align a payload. If we were looking
    to brute force guess the credentials, we could add a second field (password) and
    thus have two positions to apply payloads to. Pretty slick, eh?
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'So what does the mode mean, anyways? Well, here is a quick synopsis:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '**Sniper**:**Â **Using a single set of payloads, intruder just inserts each
    in the position in turn, and reports back. This is great for a simple guessing
    game or single-field focus.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Battering ram**:**Â **This uses a single set of payloads, but applies the
    same payload to multiple fields at the same time. This is our preferred mode for
    when we''re working with certain header positions like cookies.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pitchfork**:**Â **Later fuzzing attacks may see us armed with correlated
    information, but needing to apply matching sets to multiple fields at the same
    time. Pitchfork allows us to send those matched sets (such as credential pairs,
    username and ID number, and so on)Â to their respective fields.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cluster bomb**:**Â **Unlike Pitchfork, cluster bomb iterates multiple payload
    sets in every combination across their associated field. So, if you need to try
    a username with a list of IDs and another with all those same IDs, then this is
    the mode for you!'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B03918_05_27.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: Payload positions identify the areas we want Intruder to fuzz
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can push on into the **`Payloads`** subtab as shown in the following
    screenshot,Â which allows us to decide how we'll alter each of the positions with
    each request. From the picklist of field types, we'll wantÂ **`Simple list`**,
    and we can then pick usernames from the **`Add from list â�¦`** dropdown menu.
    More info on these is available in the outstanding Burp Suite documentation at
    [https://portswigger.net/burp/help/intruder_payloads_types.html](https://portswigger.net/burp/help/intruder_payloads_types.html).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: In lieu of a wordlist in password or username fuzzing, social engineering and
    OSINT can save serious time for you here.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_28.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: Payloads can be generated, pulled from files, or manually inputted.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Now, we'll get to see what the results of all of this are. The **`Results`**
    tab will show you how every iteration went, and this can be sorted on the payload
    itself, but what is most useful is to sort based on the **status** type (standard
    web status) or the **length** of the response, both of which can help identify
    any strange behavior that we should take a closer look at. The example in the
    following screenshotÂ shows that the user list was pretty uneventful, which means
    we'll need to look for non-standard usernames or create more elaborate or tailored
    lists to enumerate users.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_29.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: In this Intruder run, only one event stands out â�� a great place to start exploring!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Select, attack, highlight, and repeat!
  id: totrans-165
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The last tool we'll discuss in this chapter is the Burp Suite's **`Repeater`**
    tool, whereÂ Intruder allows you to focus on one or more fields and apply specific
    payload sets.Â Repeater focuses more on applying field modification for input
    validation checking and can even reply requests in different orders to test business
    logic.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Repeater is a great utility to augment other tools in the suite, and just like
    the other tools, it can be called by right-clicking and selecting theÂ **`Send
    to Repeater`** option, which will automatically spawn a **`Repeater`** task tab
    (look at the following screenshot) and preconfigure all of the basics.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_30.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Repeater allows us to take a request we've captured and play with it.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve got our message, we can then decide how to modify any or all fields
    in each iteration, and then modify the order with which these are deployed, as
    seen in the following screenshot.:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_05_31.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: Repeater gives us fine control to queue any combination of variables in any
    order.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Repeater is pretty simple, really.Â  But the power to craft our own replay of
    events is something that will be very helpful in later business-logic based attacks,
    and we'll discuss these in the later chapters.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: OWASP's ZAP tool and Burp Suite form the bulk of many web application security
    test methodologies, and for good reason. Proxy-based tools are able to observe
    the transactions between the client and server without worrying about losing the
    context of session information. Proxies can thus do what outside analysis cannot,
    which is *see* the application working end to end. When we are looking at how
    attackers commonly disrupt or exploit modern applications, they are using these
    same techniques to either capture the data back and forth or insert their own
    malicious intent. ZAP and Burp give us a means toÂ preempt that MITM approach
    and fully test applications against these attacks.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we covered some of the more general toolsÂ used forÂ both of
    these packages. My hope is that this investment in a foundation will help us actually
    accomplish many of the more advanced tasks in later chapters without rehashing
    the basics covered here. The best approach for practicing pen testers is to practice.
    Using the many available vulnerable target VMs in the space, you can work out
    the kinks and determine which tools fit your style and process best.Â
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll actually get into the nitty gritty details of our
    first focused attack-â��**Cross Site Scripting** (or **XSS**). Â We will also
    discuss the various forms of XSS**,** what they target, and where they are most
    applicable. We'll also see how to execute these attacks using Burp and some complimentary
    tools such asÂ **BeEF**, **XSSer**, **Webslpoit**, and **Metasploit**. It is fair
    to assume we'll be doing some fun things, so hold on tight!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
