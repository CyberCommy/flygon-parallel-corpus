- en: Developing Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will go into detail about plugins in Jenkins, and we will first
    look at how to get Maven set up in Windows, Linux, and macOS. We will then look
    at plugin development by creating a `Hello World` plugin for Jenkins, and then
    we will briefly look at the Jenkins plugin site and how to navigate and use it
    to find a wide array of plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins plugins explained
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple Jenkins plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins plugin development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins plugin ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building plugins in Jenkins and you will need to have
    a basic understanding of the Java programming language and understand what a build
    tool such as Maven is intended for.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins plugins explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins CI already provides certain functionality, including building, deploying,
    and automating software projects. Any additional behavior that you want out of
    Jenkins is generally provided by the large plugin ecosystem in Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Why are plugins useful?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of plugins/extensions in software is to add specific functionality
    to a software component. Web browsers such as Chrome have extensions that extend
    the functionality of the browser and Firefox has add-ons that serve the same purpose
    as extensions in Chrome. There also exist plugins in other software systems, but
    we will specifically focus on plugins in Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins plugin documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the Plugin Index to find any plugins that you need, and we will look at
    this in a later section of this chapter. If you visit the plugin tutorial in the
    Jenkins wiki, you will get complete instructions on creating Jenkins plugins.
    There are also tutorials outside of the Jenkins wiki that you can use. You can
    go to Jenkins archetypes repo for the `Hello World` plugin example.
  prefs: []
  type: TYPE_NORMAL
- en: Installing plugins in Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to navigate to the Manage Jenkins link in the Jenkins dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8d5edc4e-282a-4130-a934-5ccb2f40894b.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you click the Manage Jenkins link, you will be routed to a URL path that
    ends with `manage`, such as  `http://localhost:8080/manage`, or some other domain
    depending on whether you are running Jenkins locally or not. You will need to
    click the Manage Plugins link, and then make sure to click the Installed tab and/or
    filter for any plugins that you wish to install. We have already covered this
    before, but we will be installing our own Jenkins plugin by installing it just
    as any other Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Building a simple Jenkins plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of prerequisites to creating a Jenkins plugin. You will need
    to have Java installed, which should already be installed if you have been following
    along. You will also need to install the Maven software project management tool
    ([https://maven.apache.org/](https://maven.apache.org/)) as well.
  prefs: []
  type: TYPE_NORMAL
- en: Java installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to make sure that you have Java 1.6 or higher installed, and
    I would recommend installing Java 1.9 if you can. To install Java, please go to
    the Java downloads page ([http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c1f224e1-39ec-4509-9c44-ec2a30df5a24.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to click the Accept License Agreement radio button and then click
    Windows. Download and make sure to pick the right architecture; namely, a 32-bit
    or 64-bit operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Java is installed, just verify the installation with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This should return the current version of Java that has been installed.
  prefs: []
  type: TYPE_NORMAL
- en: Maven installation instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Maven, please go to the Maven install page ([https://maven.apache.org/install.html](https://maven.apache.org/install.html)) and
    make sure to follow the instructions for your given operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Windows installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can install Maven in a couple of different ways on Windows, but make sure
    that you have at least the Windows 7 operating system and the Java **Software
    Development Kit** (**SDK**) 1.7 or higher installed. If you followed along in
    [Chapter 5](3e1059c7-00d0-48a6-882b-7d7dbdf8aa50.xhtml), *Installation and Basics
    of Jenkins*, then you should have Java already installed.
  prefs: []
  type: TYPE_NORMAL
- en: Maven installation through the Chocolatey package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have the Chocolatey package manager already installed at Chocolatey
    installation ([https://chocolatey.org/install](https://chocolatey.org/install)), then
    you can simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also download the Maven binary executable from the Maven install page
    ([https://maven.apache.org/install.html](https://maven.apache.org/install.html)) and
    you will need to additionally find the value of the Java environment variable.
    You can find this by running the following command in Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you will need to run add this Maven binary executable to the Windows path
    by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on My Computer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Properties
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Advanced System Setting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Environment Variable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New user variable and add Maven_Home with value `C:\apache-maven-3.5.3`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add it to the path variable with `%Maven_Home%\bin`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Command Prompt and ask for `mvn -version` on your desktop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven installation through the Maven source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First make sure that you have the Java SDK installed, which you can confirm
    in Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This should print out the current version of Java that you have installed. Next,
    download the Maven source code from the Maven source repository ([https://gitbox.apache.org/repos/asf?p=maven-sources.git](https://gitbox.apache.org/repos/asf?p=maven-sources.git)) and
    then unpack the Maven source code in a suitable location in your Windows operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Program Files\Apache\maven` is a possible location that you could use.'
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables setup for the Windows operating system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to add both the `M2_HOME` and `MAVEN_HOME` variables to your Windows
    environment using system properties, and you will need to point the environment
    variables to your Maven folder.
  prefs: []
  type: TYPE_NORMAL
- en: Update the PATH variable by appending the Maven `bin` folder, `%M2_HOME%\bin`,
    so that you can run the Maven executable anywhere in your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that Maven is running correctly, run the following command in Command
    Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This command should display the current Maven version, Java version, and the
    operating system information.
  prefs: []
  type: TYPE_NORMAL
- en: macOS installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to make sure that the Java SDK is installed in the macOS operating
    system. If you followed along in [Chapter 5](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Jenkins*, then you should have Java already installed.
  prefs: []
  type: TYPE_NORMAL
- en: Maven installation through the Homebrew package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First make sure that Java is installed by running the following command in
    the Mac Terminal application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will need to have Java 1.7 or higher installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, if you have the Homebrew package manager installed ([https://brew.sh/](https://brew.sh/)), then
    you can easily install Maven by issuing the following command in your Mac Terminal
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you set the following environment variable in your `.bashrc`,
    or `.zshrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that Maven has been properly installed by running the following command
    in your Mac Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice here that the `mvn` binary executable printed out the installed Maven
    version, the Java version, and OS-specific information.
  prefs: []
  type: TYPE_NORMAL
- en: Unix installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will install Maven on a Ubuntu 16.04 Digital Ocean Droplet, but you should
    be able to run similar commands on other Linux distributions. Please follow the
    instructions to install Maven on your specific Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Maven installation through the apt-get package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure that Java is installed in your Linux distribution, which you can
    check by running the following command in a Terminal shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If Java has not been installed, then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install Maven by running the following command in your Terminal application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will need to make sure that your `JAVA_HOME` environment variable
    has been set. Since we installed Java 1.9 in a Ubuntu Linux operating system,
    we will run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The directory that you use could be different, but if you do not set this environment
    variable, then Maven will report this as a warning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check that Maven has been installed correctly by running the following command
    in your Terminal application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice here that the Maven binary executable printed out the current Maven version
    installed, the current Java version installed, and OS-specific information, just
    like the Windows and Mac operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins plugin development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several steps necessary to get a Jenkins plugin set up, running, and
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: Maven settings file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on your current operating system, you will need to create/edit the
    `.m2/settings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows users will find the `settings.xml` file by issuing the following command
    in Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Mac operating system users can edit/create the `settings.xml` file in `~/.m2/settings.xml`*.*
  prefs: []
  type: TYPE_NORMAL
- en: The settings element in the `settings.xml` file contains elements used to define
    values that configure Maven execution in various ways, such as `pom.xml`, but
    should not be bundled to any specific project, or distributed to an audience.
    These include values such as the local repository location, alternate remote repository
    servers, and authentication information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the following content into the `settings.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f67a39b5-671b-442c-9157-1a328ac8b5fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that we entered specific information related to Jenkins plugins.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly encouraged that you set your `settings.xml` file to get your Jenkins
    plugins working correctly!
  prefs: []
  type: TYPE_NORMAL
- en: HelloWorld Jenkins plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create a Jenkins plugin, you will need to use Maven archetypes,
    which you can read about here ([https://maven.apache.org/guides/introduction/introduction-to-archetypes.html](https://maven.apache.org/guides/introduction/introduction-to-archetypes.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will issue the following command in order to generate a Jenkins `Hello World`
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a sample running session that I did to create the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/156ecbd6-a22c-4918-91d7-2d11e8054e0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice here that I entered `1` for the archetype, then I chose a plugin version
    of `4`, and defined a value of `jenkins-helloworld-example-plugin`, and then hit
    *Enter* for the default values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7831b6b1-77c7-4368-a9a4-2c6a160f3b27.png)'
  prefs: []
  type: TYPE_IMG
- en: If all goes successfully, you should get the output of `BUILD SUCCESS` in Command
    Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to make sure that you can build your Jenkins plugin, so make sure
    to run the following command in Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mvn package` command will create a `target` directory and will run any
    tests that you have created in the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d3c7aa73-4239-44d8-973b-9eab44c1a8da.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that the Jenkins archetype actually created some tests for our `Hello
    World` Jenkins plugin example.
  prefs: []
  type: TYPE_NORMAL
- en: Folder layout explanation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the newly created `jenkins-helloworld-example-plugin`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5c2a0f92-5b5a-4360-81e1-3dbf7827ae2b.png)'
  prefs: []
  type: TYPE_IMG
- en: The `src` directory contains the source files for the Jenkins plugin as well
    as tests for the plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The target directory is generated with the `mvn` package. There is also a `pom.xml`
    file, which Maven created when we ran the archetype sub-command.
  prefs: []
  type: TYPE_NORMAL
- en: A **Project Object Model** (**POM**) is the fundamental unit of work in Maven.
    It is an XML file that contains information about the project and configuration
    details used by Maven to build the project. It contains default values for most
    projects. Examples for this include the build directory, which is `target`, the
    source directory, which is `src/main/java`, and the test source directory, which
    is `src/test/java`.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins plugin source code explanation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned earlier, the `src` directory contains the source files for the
    Jenkins plugin. In order to build plugins in Jenkins, you will need to write in
    the Java programming language. Teaching the Java programming language is out of
    the scope of this book but we will briefly discuss some of the files that Maven
    created for us.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that Maven created a rather long directory structure, which is common,
    and, as such, the directory structure for the `helloworld` plugin is `./src/main/java/io/jenkins/plugins/sample/HelloWorldBuilder.java`. The
    test file itself is in `./src/test/java/io/jenkins/plugins/sample/HelloWorldBuilderTest.java`.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have included the source code for the `HelloWorldBuild.java` class here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `HelloWorldBuilder` class extends the `Builder` class, which
    is a Jenkins core class; and also notice that we are using a class called `BuildStepDescriptor`,
    which is also a Jenkins class. The source code for this file can be seen in my
    GitHub repository called `jenkins-plugin-example` in the `HelloWorldBuilder.java`
    ([https://github.com/jbelmont/jenkins-plugin-example/blob/master/src/main/java/io/jenkins/plugins/sample/HelloWorldBuilder.java](https://github.com/jbelmont/jenkins-plugin-example/blob/master/src/main/java/io/jenkins/plugins/sample/HelloWorldBuilder.java))
    file.
  prefs: []
  type: TYPE_NORMAL
- en: For the test cases in `HelloWorldBuilderTest.java`,we use JUnit, which is a
    popular unit testing library for the Java programming language.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding Java test file has annotations such as `@Rule`, `@Override`, `@Test`,
    and `@DataBoundSetter`, which are a form of metadata that provide data about a
    program that is not part of the program itself. Annotations have no direct effect
    on the operation of the code they annotate. The source code for this file can
    be seen in my GitHub repository called `jenkins-plugin-example` in the `HelloWorldBuilderTest.java`
    file ([https://github.com/jbelmont/jenkins-plugin-example/blob/master/src/test/java/io/jenkins/plugins/sample/HelloWorldBuilderTest.java](https://github.com/jbelmont/jenkins-plugin-example/blob/master/src/test/java/io/jenkins/plugins/sample/HelloWorldBuilderTest.java)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: Building a Jenkins plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build a Jenkins plugin, you need to run the `mvn install` command
    in the plugin directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `mvn install`command will both build and test the Jenkins plugin and, more
    importantly, create a file called `pluginname.hpi`; or, in our case, it will create
    a file called `jenkins-helloworld-example-plugin.hpi` in the `target` directory
    that we can use to deploy to Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have attached a sample install run in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a072204-e02c-4354-a3f9-bb7506882086.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that this run finished by installing our Jenkins plugin into several
    locations, which we will use to install our Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Jenkins plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, in order to install a newly built and installed `HelloWorld` example plugin,
    we will need to go to the Jenkins Dashboard | Manage Jenkins | Manage Plugins
    view and then click the Advanced tab. Please refer to [Chapter 6](77945112-d3fe-4859-b814-d00fd09aa225.xhtml), *Writing
    Freestyle Scripts*, in the *EnvInject Plugin* section, for more details if necessary.
    You can also directly go to the plugin section by going to `scheme://domain/pluginManager`; or,
    if you are running Jenkins locally, just go to `http://localhost:8080/pluginManager/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then make sure to click the Advanced tab or go to `http://localhost:8080/pluginManager/advanced`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b7a8ae60-2363-4a3c-b19e-9385ca841d9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then need to go to the *Upload Plugin* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f331b2f7-d8c8-4ed1-aedc-4034dcf2c77a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Choose File and then find our newly created `Helloworld` Jenkins plugin,
    which should be in the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Then make sure to click the Upload button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the newly installed `Helloworld` example plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e98d3de-40f3-4dcd-a4bb-2c77b7ae6432.png)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins plugin ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a wide array of plugins available for Jenkins, and you can find the
    full list at the Jenkins plugins site ([https://plugins.jenkins.io/](https://plugins.jenkins.io/)).
  prefs: []
  type: TYPE_NORMAL
- en: List of available plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following screenshot shows a plugins search related to JSON in Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fa5e2c7f-f823-4b27-b1bc-b970c8b122d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that the Jenkins plugin site has multiple views that you can utilize
    besides this default view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/816f5e50-aaf0-4297-bb4d-ad498b155d6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that I clicked the middle icon, but you can also click the rightmost
    icon to get a small outline view. The search defaults to relevant search items,
    but you can choose different search criteria, such as Most Installed, Trending
    and Release Date.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the Maven build tool for Java and how to
    install it for Windows, Linux, and macOS. You also learned about how to create
    a Jenkins plugin by using the Maven build tool, and we briefly discussed some
    Java syntax and how to install a Jenkins plugin by using the Advanced Options
    in the manage plugins UI in the Jenkins dashboard. We also looked at the Jenkins
    plugin ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the build tool that we used to create a Jenkins plugin?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which package manager did we use to install Maven in the Windows operating system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which package manager did we use to install Maven in the macOS operating system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What was the name of the configuration file that we briefly discussed in our
    `HelloWorld` plugin?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the URL we can directly navigate to in order to manage plugins in Jenkins?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What was the command we used to build and install a Jenkins plugin in Maven?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of file does Maven create for us so that we can install a Jenkins
    plugin?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please check out the book *Extending Jenkins* ([https://www.amazon.com/dp/B015CYBP2A/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1](https://www.amazon.com/dp/B015CYBP2A/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)),
    by Packt Publishing, to learn more about Jenkins plugins.
  prefs: []
  type: TYPE_NORMAL
