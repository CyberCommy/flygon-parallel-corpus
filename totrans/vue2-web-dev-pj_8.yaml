- en: Project 6 - Real-time Dashboard with Meteor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we will use Vue with an entirely different stack--Meteor!
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discover this full-stack JavaScript framework and build a real-time
    dashboard monitoring the production of some products. We will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Meteor and setting up a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing data into a Meteor collection with a Meteor method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscribing to the collection and using the data in our Vue components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The app will have a main page with some indicators, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/87e90c9d-e0be-4583-8a92-58d4612d3ad7.png)'
  prefs: []
  type: TYPE_IMG
- en: It will also have another page with buttons to generate fake measures since
    we won't have real sensors available.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first part, we will cover Meteor and get a simple app up and running
    on this platform.
  prefs: []
  type: TYPE_NORMAL
- en: What is Meteor?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meteor is a full-stack JavaScript framework for building web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mains elements of the Meteor stacks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Web client (can use any frontend library, such as React or Vue); it has a client-side
    database called Minimongo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server based on nodejs; it supports the modern ES2015+ features, including the
    `import/export` syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time database on the server using MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication between clients and the server is abstracted; the client-side
    and server-side databases can be easily synchronized in real-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional hybrid mobile app (Android and iOS), built in one command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated developer tools, such as a powerful command-line utility and an easy-to-use
    build tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meteor-specific packages (but you can also use npm packages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, JavaScript is used everywhere. Meteor also encourages you to
    share code between the client and the server.
  prefs: []
  type: TYPE_NORMAL
- en: Since Meteor manages the entire stack, it offers very powerful systems that
    are easy to use. For example, the entire stack is fully reactive and real-time--if
    a client sends an update to the server, all the other clients will receive the
    new data and their UI will automatically be up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Meteor has its own build system called "IsoBuild" and doesn't use Webpack. It
    focuses on ease of use (no configuration), but is, as a result, also less flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Meteor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have Meteor on your system, you need to open the Installation Guide
    on the official Meteor website at [https://www.meteor.com/install](https://www.meteor.com/install).
    Follow the instructions there for your OS to install Meteor.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are done, you can check whether Meteor was correctly installed with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The current version of Meteor should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that Meteor is installed, let''s set up a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our first Meteor project with the `meteor create` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `--bare` argument tells Meteor we want an empty project. By default, Meteor
    will generate some boilerplate files we don't need, so this keeps us from having
    to delete them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need two Meteor-specific packages--one for compiling the Vue components,
    and one for compiling Stylus inside those components. Install them with the `meteor
    add` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also install the `vue` and `vue-router` package from npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that we use the `meteor npm` command instead of just `npm`. This is to
    have the same environment as Meteor (nodejs and npm versions).
  prefs: []
  type: TYPE_NORMAL
- en: 'To start our Meteor app in development mode, just run the `meteor` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Meteor should start an HTTP proxy, a MongoDB, and the nodejs server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f841197f-6922-486c-85ed-664cec9bd2af.png)'
  prefs: []
  type: TYPE_IMG
- en: It also shows the URL where the app is available; however, if you open it right
    now, it will be blank.
  prefs: []
  type: TYPE_NORMAL
- en: Our first Vue Meteor app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will display a simple Vue component in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `index.html` file inside the project directory and tell Meteor
    we want `div` in the page body with the `app` id:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is not a real HTML file. It is a special format where we can inject additional
    elements to the `head` or `body` section of the final HTML page. Here, Meteor
    will add a `title` into the `head` section and the `<div>` into the `body` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `client` folder, new `components` subfolder, and a new `App.vue`
    component with a simple template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Download ([https://github.com/Akryum/packt-vue-project-guide/tree/master/chapter8-full/client](https://github.com/Akryum/packt-vue-project-guide/tree/master/chapter8-full/client))
    this stylus file in the `client` folder and add it to the main `App.vue` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main.js` file in the `client` folder that starts the Vue application
    inside the `Meteor.startup` hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In a Meteor app, it is recommended that you create the Vue app inside the `Meteor.startup`
    hook to ensure that all the Meteor systems are ready before starting the frontend.This
    code will only be run on the client because it is located in a `client` folder.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a simple app displayed in your browser. You can also open
    the Vue devtools and check whether you have the `App` component present on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add some routing to the app; we will have two pages--the dashboard with
    indicators and a page with buttons to generate fake data:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `client/components` folder, create two new components--`ProductionGenerator.vue`
    and `ProductionDashboard.vue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next to the `main.js` file, create the router in a `router.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then, import the router in the `main.js` file and inject it into the app, like
    we did in [Chapter 5](2ec000b2-cfbd-4da5-af9c-974dec1813a2.xhtml), *Project 3
    - Support Center*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `App.vue` main component, add the navigation menu and the router view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic structure of our app is now done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bdae787e-a9df-4bf1-b0b1-5d6dd5646740.png)'
  prefs: []
  type: TYPE_IMG
- en: Production measures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first page we will make is the Measures page, where we will have two buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one will generate a fake production measure with current `date` and
    random `value`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one will also generate a measure, but with the `error` property set
    to `true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these measures will be stored in a collection called "Measures".
  prefs: []
  type: TYPE_NORMAL
- en: Meteor collections integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Meteor collection is a reactive list of objects, similar to a MongoDB collection
    (in fact, it uses MongoDB under the hood).
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to use a Vue plugin to integrate the Meteor collections into our Vue
    app in order to update it automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `vue-meteor-tracker` npm package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the library into Vue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Restart Meteor with the `meteor` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app is now aware of the Meteor collection and we can use them in our components,
    as we will do in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is setting up the Meteor collection where we will store our measures
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will store our measures into a `Measures` Meteor collection. Create a new
    `lib` folder in the project directory. All the code in this folder will be executed
    first, both on the client and the server. Create a `collections.js` file, where
    we will declare our `Measures` collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Adding a Meteor method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `Meteor` method is a special function that will be called both on the client
    and the server. This is very useful for updating collection data and will improve
    the perceived speed of the app--the client will execute on minimongo without waiting
    for the server to receive and process it.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is called "Optimistic Update" and is very effective when the
    network quality is poor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to the `collections.js` file in the `lib` folder, create a new `methods.js`
    file. Then, add a `measure.add` method that inserts a new measure into the `Measures`
    collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now call this method with the `Meteor.call` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The method will be run on both the client (using the client-side database called
    minimongo) and on the server. That way, the update will be instant for the client.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating measures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Without further delay, let''s build the simple component that will call this
    `measure.add` Meteor method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two buttons in the template of `ProductionGenerator.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the component script, create the `generateMeasure` method that generates
    some dummy data and then call the `measure.add` Meteor method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The component should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2ba275af-0171-4c26-8ec4-01b2671f1217.png)'
  prefs: []
  type: TYPE_IMG
- en: If you click on the buttons, nothing visible should happen.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is an easy way to check whether our code works and to verify that you
    can add items in the `Measures` collection. We can connect to the `MongoDB` database
    in a single command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In another terminal, run the following command to connect to the app''s database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, enter this MongoDB query to fetch the documents of the `measures` collection
    (the argument used when creating the `Measures` Meteor collection):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you clicked on the buttons, a list of measure documents should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fb0cc09c-1e40-4e00-971f-f56144f113da.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that our Meteor method worked and objects were inserted in our MongoDB
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard and reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our first page is done, we can continue with the real-time dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Progress bars library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display some pretty indicators, let''s install another Vue library that
    allows drawing progress bars along SVG paths; that way, we can have semi-circular
    bars:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `vue-progress-path` npm package to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We need to tell the Vue compiler for Meteor not to process the files in `node_modules`
    where the package is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `.vueignore` file in the project root directory. This file works
    like a `.gitignore`: each line is a rule to ignore some paths. If it ends with
    a slash `/`, it will ignore only corresponding folders. So, the content of `.vueignore`
    should be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, install the `vue-progress-path` plugin in the `client/main.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Meteor publication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To synchronize data, the client must subscribe to a publication declared on
    the server. A Meteor publication is a function that returns a Meteor collection
    query. It can take arguments to filter the data that will be synchronized.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our app, we will only need a simple `measures` publication that sends all
    the documents of the `Measures` collection:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This code should only be run on the server. So, create a new `server` in the
    `project` folder and a new `publications.js` file inside that folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This code will only run on the server because it is located in a folder called
    `server`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Dashboard component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are ready to build our `ProductionDashboard` component. Thanks to the `vue-meteor-tracker`
    we installed earlier, we have a new component definition option--`meteor`. This
    is an object that describes the publications that need to be subscribed to and
    the collection data that needs to be retrieved for that component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following script section with the `meteor` definition option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `meteor` option, subscribe to the `measures` publication with the
    `$subscribe` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The empty array means we pass no parameter to the publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieve the measures with a query on the `Measures` Meteor collection inside
    the `meteor` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The second parameter of the `find` method is an options object very similar
    to the MongoDB JavaScript API. Here, we are sorting the documents by their date
    in descending order, thanks to the `sort` property of the options object.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, create the `measures` data property and initialize it to an empty array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The script of the component should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the browser devtools, you can now check whether the component has retrieved
    the items from the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a separate component for the dashboard indicators, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `components` folder, create a new `ProductionIndicator.vue` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a template that displays a progress bar, a title, and additional info
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `value`, `title`, and `info` props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in our `ProductionDashboard` component, let''s compute the average of
    the values and the rate of errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we cached the length of the `measures` array
    in a `length` computed property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two indicators in the templates - one for the average value and one for
    the error rate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to import `ProductionIndicator` into the component!
  prefs: []
  type: TYPE_NORMAL
- en: 'The indicators should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/250ed504-0d91-419f-aecc-b1c4fe0495e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing the measures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we will display a list of the measures below the indicators:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a simple list of `<div>` elements for each measure, displaying the date
    if it has an error and the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The app should now look as follows, with a navigation toolbar, two indicators,
    and the measures list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3b986909-83ed-4486-bcad-ee0d70125eb8.png)'
  prefs: []
  type: TYPE_IMG
- en: If you open the app in another window and put your windows side by side, you
    can see the full-stack reactivity of Meteor in action. Open the dashboard in one
    window and the generator page in the other window. Then, add fake measures and
    watch the data update on the other window in real time.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about Meteor, check out the official website ([https://www.meteor.com/developers](https://www.meteor.com/developers))
    and the Vue integration repository ([https://github.com/meteor-vue/vue-meteor](https://github.com/meteor-vue/vue-meteor)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we created a project using a new full-stack framework
    called Meteor. We integrated Vue into the app and set up a Meteor reactive collection.
    Using a Meteor method, we inserted documents into the collection and displayed
    in real-time the data in a dashboard component.
  prefs: []
  type: TYPE_NORMAL
- en: This book may be over, but your journey using Vue is only beginning. We started
    with very basic concepts around templates and reactive data, writing simple applications
    without any build tools. Even with not much baggage, we were able to make a Mardown
    Notebook and even a browser Card Game with animations. Then, we started using
    the full set of tools at our disposal to make larger apps. The official command-line
    tool--vue-cli--was a great help in scaffolding our projects. The Single-File-Components
    (`.vue` files) make the components easy to maintain and evolve. We can even use
    preprocessing languages, such as stylus, very easily. The vue-router official
    library is mandatory for managing multiple pages, like we did in [Chapter 5](2ec000b2-cfbd-4da5-af9c-974dec1813a2.xhtml),
    *Project 3 - Support Center*, with a nice user system and private routes. Next,
    we went to a whole other level with advanced features, such as Google OAuth and
    Google Maps, while architecturing our Geolocated Blog in a scalable and safe way
    using the official Vuex library. Then, we improved the quality of our Online Shop
    code with ESLint and wrote unit tests for our component. We even added localization
    and server-side rendering to the app, so now it has a very professional feeling.
  prefs: []
  type: TYPE_NORMAL
- en: You can now practice on the projects we built by improving them, and you can
    even start your own. Using Vue will improve your skills, but you can also attend
    events, chat online with the community, get involved ([https://github.com/vuejs/vue](https://github.com/vuejs/vue)),
    or help others in learning Vue. Sharing your knowledge will only increase your
    own, and you will become better at what you do.
  prefs: []
  type: TYPE_NORMAL
