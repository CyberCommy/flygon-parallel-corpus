- en: Privilege Escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned about the various aspects of web application
    security. In this chapter, we are going to discuss various concepts related to
    privilege escalation. We will get familiar with various privilege-escalation concepts
    along with practical techniques of escalating privileges on compromised Windows
    and Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal versus vertical privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is privilege escalation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into any technical details about privilege escalation, let's first
    get a basic understanding of privileges. The literal dictionary meaning of the
    word *privilege* is a special right, advantage, or immunity granted or available
    only to a particular person or group. When it comes to the computing world, privileges
    are something that are managed by the operating system. There might be ten users
    on a single system, but not all may have the same level of privileges. As per
    security best practices, the principle of least privilege is often followed. That
    means each user is assigned only those bare-minimum privileges that are absolutely
    essential to perform their tasks. This principle helps eliminate the possibility
    of the abuse of unnecessary, excessive privileges.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of security assessments, privilege escalation becomes an important
    factor. Let's assume you have managed to successfully exploit a vulnerability
    in a remote system and got SSH access. However, your actions are restricted because
    the user you have compromised doesn't have high privileges. Now, you would certainly
    want to have the highest level of privileges so that you can explore various aspects
    of the compromised system. Privilege escalation would elevate privileges of a
    normal user to that of the user with the highest privileges. Once done, you have
    complete control over the compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand some basics of how privileges work, the following diagram shows
    various protection rings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e6b2097-2f41-49ae-bbd9-a5486745d594.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This diagram shows four rings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ring 0**: Belongs to the kernel of the operating system and has the highest
    privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ring 1 and Ring 2**:  Mostly used by the device drivers that interface between
    the operating system and various hardware devices. These rings certainly have
    good privileges but less than **Ring 0**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ring 3**: Where most of our end applications operate. They have the lowest
    privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, in the case of privilege escalation, if you want to exploit an application
    vulnerability and get access to **Ring 3**, then you need to find a way to elevate
    privileges to higher rings. In a Windows environment, a user with the highest
    privileges is commonly referred to as an **administrator**, while in a Linux environment,
    a user with highest privileges is referred to as **root**.
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal versus vertical privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the previous section, privilege escalation means gaining privileges
    that you are not authorized to have. Privilege escalation can be one of two types:
    horizontal or vertical.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7acdb54-474e-4268-ab6b-af1b8fc3d1d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Horizontal privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the preceding diagram; there are four users in total: three normal
    users and one administrator. The users are shown as per their hierarchy. Now,
    if **Normal User 1** is able to access the data of **Normal User 2**, it would
    be referred to as horizontal privilege escalation since both the users are on
    the same level in the hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: Vertical privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With reference to the preceding diagram, if **Normal User 1** is able to access
    the data and gain the privileges of the **Administrator**, it would be referred
    to as vertical privilege escalation. **Normal User 1** and the **Administrator**
    are both at different levels in the hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous section, on a Windows system, the user with the highest
    privileges is known as the **administrator**. Once we compromise a system using
    any of the available exploits, our aim should be to elevate the user privileges
    to that of the administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an exploitation of the `ms08_067_netapi` vulnerability
    with Windows XP as the target. Metasploit successfully exploited the vulnerability
    and gave a meterpreter session, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/727e96bb-8f37-40c2-937d-82ba2794e9ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The meterpreter provides us with the ability to escalate privileges. The `getsystem`
    command is specifically used for privilege escalation on the compromised Windows
    system. The following screenshot shows the use of the `getsystem` command in order
    to get the administrator-level privileges on the target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8ecb3ab-e892-4a6e-8308-2c6bc0a68e24.png)'
  prefs: []
  type: TYPE_IMG
- en: Privilege escalation on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll see how we can exploit a vulnerability in a Linux system
    and then escalate our privileges. We'll be using Metasploitable 2 as our target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can even think of privilege escalation, we must have at least normal-level
    access to the target system. In this case, our target system''s IP address is
    `192.168.25.129`. We start by initiating SPARTA in order to gather some quick
    information about our target. We add the target IP in the scope of the SPARTA
    scan, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/172b285b-f4c1-4034-bfc3-1359c8b8d845.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the SPARTA scan is complete, we get to know what services are running
    on our target system. Now we find out that the target system is running one service,
    `distccd` (as shown in the following screenshot), that is a distributed computing
    application used for source-code compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85a5c835-ce30-48ee-a9ad-555b680d763f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we know the service to be exploited, we''ll open up the Metasploit
    console to look for any exploits related to `distcc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d12e255e-05cc-43bf-9c9b-6a370e251855.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We get an exploit named `distcc_exec` readily available in Metasploit. We now
    look for parameters that we need to configure using the `show options` command.
    Then we set the value of the `RHOST` (target) parameter and fire the `exploit` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38874d81-4c43-4c23-bea7-fee0e81e9a57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The exploit succeeds and presents us with a remote command shell. However,
    the shell has limited privileges and now we need to escalate privileges to that
    of root. Using the `uname` command, we get to know that the target is based on
    Linux kernel 2.6.X. So, we need to find out which privilege-escalation exploit
    would suit this kernel version. We can search for specific exploits using the
    `searchsploit` utility. The following command will list the exploit we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use the `wget` command on our target system to download the exploit,
    as shown in the following screenshot. Once downloaded, we use the following command
    to compile the exploit locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/11ccd073-b969-45ca-b3b6-d22fac1f374a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On our Kali Linux system, we start a Netcat listener on port `12345` using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as the exploit is executed on the target system, we get a reverse shell
    on our Kali system, as shown in the following screenshot, with root privileges.
    Hence we have succeeded in escalating the privileges from normal user to root:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b996677-1aec-49e6-a422-aba2bce85f56.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the importance of privileges across various
    platforms, such as Windows and Linux, and the relevance of escalating privileges
    during penetration testing.
  prefs: []
  type: TYPE_NORMAL
