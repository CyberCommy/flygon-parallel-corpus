- en: Basics of Motors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right then! We have made a robot that takes care of your garden and I hope
    it's working fine. It's time to take things to another level.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: We have always thought that robots are like WALL-E, moving around and doing
    things for us. Well, my friend, now that dream is not far away. In fact, in this
    chapter we will be going ahead and making one. Let's see how it's done.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The basics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting it rolling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the speed
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever we talk about moving from one place to another, we think about wheels
    and similarly whenever we think about moving the wheels of a robot, we think about
    motors. There are various different types of motors that exist. So let''s firstly
    look at the most basic type of motor, which is called a brushed DC motor. As the
    name suggests, it works on a direct current. You may find such motors like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/26c23b65-5462-4425-8a43-2fb80b68f11b.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: Trust me, these things are omnipresent, from the Christmas gift you bought for
    your neighbor to the biggest baddest machines out there—you will find these motors
    hiding under the hood. These motors are common for a reason and that is because
    they are very, very simple. So simple that powering them up only requires a battery
    and two wires. Simply connect the positive to one terminal and negative to the
    other, and the motor will start spinning. Interchange those connections and the
    direction of the rotation will change. Take two cells and double the voltage and
    the motor will spin even faster. It is that simple.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Now you might assume that we would simply connect this motor to Raspberry Pi
    and that we would be good to go. But unfortunately this is not going to be the
    case. As you may remember from the previous chapters, Raspberry Pi can only supply
    around 50 milliamps, but the consumption of a motor can be much higher. Hence,
    to run one we need an intermediate device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that will come to your mind will be to use a relay, and why
    not? They can channel a huge amount of current and can handle high voltages. This
    should be the ideal choice. You would be right if you thought so, but only to
    some extent, and that is because a relay is simply a switch we can use to turn
    the motor on or off. We would not be able to control the speed or the direction
    of rotation of the motor. Now, you would think that this problem is not new and
    that we can very easily solve it by using **pulse width modulation** (**PWM**),
    right? Well, the answer is no! Because these relays are mechanical devices, and
    due to their mechanical nature, there are some maximum limits in terms of it being
    switched on or off in a second. Hence, it would not be able to cope with the frequency
    of PWM. Finally, we would still be left with the problem of changing the direction
    and the speed of the motor. So what do we do now?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'As I always say, the beauty of a problem is that it always has a solution,
    and the solution here is called a motor driver. A motor driver is primarily a
    set of electronic relays—a switch that can allow high currents yet is not mechanical.
    Hence, we can switch it hundreds of times every second. These electronic relays
    are either made of simple transistors or, in high power applications, they can
    even use MOSFETs for switching. We can simply give PWM to these electronic switches
    and get the voltage to modulate while making sure that enough current is being
    delivered to the circuit. Further, as I mentioned earlier, the motor driver is
    made of a set of these electronic relays. The most common and workable fashion
    in which they are arranged is called a full bridge or an H Bridge. Before I explain
    any further, let''s see what this is, exactly:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cb5f143f-da6d-42e1-b00c-d9002026ffdf.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'In a full bridge we have four switching circuits across the connected motor;
    these can be independently switched on or off based on the requirements. In the
    off state, all of these switching circuits are in an open state, hence keeping
    the motor switched off. Now, whenever we want to start the motor, we will have
    to switch on two switches in such a way that the circuit is complete and the motor
    starts working. So let''s see what it would look like:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在全桥中，我们有四个与连接的电机相连的开关电路；根据需求，这些可以独立地打开或关闭。在关闭状态下，所有这些开关电路都处于断开状态，因此保持电机关闭。现在，每当我们想要启动电机时，我们将不得不打开两个开关，使电路完整，电机开始工作。让我们看看它会是什么样子：
- en: '![](Images/c3062e8b-6130-4808-8472-9261adebbef7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c3062e8b-6130-4808-8472-9261adebbef7.png)'
- en: 'Here, we have switched on the switching circuit **S2** and **S3**; this in
    turn completes the circuit and lets the current flow in the motor. Now, to control
    the speed, these same switching circuits can be switched on and off at a very
    high frequency at varying duty cycles to achieve a specific mean voltage. Now
    that we can achieve a specific speed for the motor by changing the voltage via
    these two switching circuits, let''s see how we are going to change the direction  of
    rotation of the motor:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们打开了开关电路**S2**和**S3**；这反过来完成了电路，让电流在电机中流动。现在，为了控制速度，这些相同的开关电路可以以非常高的频率以不同的占空比打开和关闭，以实现特定的平均电压。现在我们可以通过这两个开关电路改变电压来实现电机的特定速度，让我们看看如何改变电机的旋转方向：
- en: '![](Images/d153e5f3-0d5d-42d7-91c9-32884022816a.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d153e5f3-0d5d-42d7-91c9-32884022816a.png)'
- en: 'In this circuit we have switched off the previously connected **S2** and **S3**
    and instead switched on **S1** and **S4**, hence the polarity to the motor is
    reversed. As we discussed earlier, whenever the polarity of a DC-brushed motor
    is changed, the direction also changes subsequently. There are various types of
    motor drivers you can find on the market. What we have understood here is called
    a brushed DC H-bridge motor driver; there are other types of motor drivers as
    well for controlling other types of motors, but currently we will stick to the
    brushed motor only. While selecting a motor driver, you should examine the specification
    sheet of the motor driver very carefully. Some of the key specifications that
    will be mentioned are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个电路中，我们关闭了之前连接的**S2**和**S3**，而是打开了**S1**和**S4**，因此电机的极性被颠倒了。正如我们之前讨论的，每当直流刷电机的极性改变时，方向也随之改变。市场上有各种类型的电机驱动器。我们在这里理解的是称为刷式直流H桥电机驱动器；还有其他类型的电机驱动器用于控制其他类型的电机，但目前我们只会专注于刷式电机。在选择电机驱动器时，您应该非常仔细地检查电机驱动器的规格表。将提到的一些关键规格如下：
- en: '**Voltage rating**: There will be a minimum and maximum limit to the voltage
    that the motor driver can handle and modulate between. Make sure your motor lies
    in between this specific voltage range.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电压等级**：电机驱动器可以处理和调制的电压将有最小和最大限制。确保您的电机位于特定电压范围之间。'
- en: '**Current rating**: There will be an absolute maximum current that the motor
    driver can handle; going anywhere beyond it will burn or damage the motor driver.
    This can be a little deceptive. Let''s see why. Except for the absolute maximum,
    there will be many other current ratings that might be specified. These might
    be:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电流评级**：电机驱动器可以处理的绝对最大电流；超出这个范围将烧毁或损坏电机驱动器。这可能有点误导。让我们看看为什么。除了绝对最大值，可能会指定许多其他电流评级。这些可能是：'
- en: '**Repetitive maximum current**: This is the current rating that can be the
    maximum current the motor driver can handle, but not continuously. This rating
    is given because at times the load on the motor might increase and there might
    be a higher current requirement for a brief moment. The motor driver will provide
    the adequate current on a repetitive basis without getting damaged. But this current
    requirement should not be continuous.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复最大电流**：这是电机驱动器可以处理的最大电流，但不是持续的。给出这个评级是因为有时电机的负载可能会增加，可能会在短暂时刻需要更高的电流。电机驱动器将在重复的基础上提供足够的电流而不会损坏。但这种电流需求不应该是持续的。'
- en: '**Burst maximum current**: This is the absolute maximum current that the motor
    driver can handle; anything beyond it will damage the motor driver. The DC motors
    might have a very high current requirement when it starts from a standstill. Hence,
    the motor drivers are designed to handle these currents. But this surge of current
    should not be repetitive, otherwise heating and subsequent damage can happen.
    Often, burst maximum current is referred to as the maximum current by the manufacturers.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**突发最大电流**：这是电机驱动器能够处理的绝对最大电流；超过这个电流将损坏电机驱动器。直流电机在从静止状态启动时可能需要非常高的电流。因此，电机驱动器被设计为处理这些电流。但是这种电流的突发性不应该是重复的，否则会发生加热和随后的损坏。通常，制造商将突发最大电流称为最大电流。'
- en: '**Continuous maximum current**: This is the real deal; the continuous maximum
    current is the maximum continuous current that the motor driver can mange on a
    continuous basis.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续最大电流**：这是真正的问题；持续最大电流是电机驱动器可以持续处理的最大电流。'
- en: '**Supply voltage**: This is the operating voltage of the motor driver—this
    voltage must be given to the motor driver for its own internal workings.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**供电电压**：这是电机驱动器的工作电压——必须将这个电压提供给电机驱动器进行内部工作。'
- en: '**Logic supply voltage**: This is the control signal given to the motor driver,
    and can be given at various voltages such as 5V, 3.3V, and 12V. Hence, the motor
    driver will specify the maximum logical voltage that it can accept in the signal
    line.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑供电电压**：这是提供给电机驱动器的控制信号，可以以5V、3.3V和12V等不同电压给出。因此，电机驱动器将规定它可以接受信号线上的最大逻辑电压。'
- en: 'Now, let''s see what we have got. During the course of this book, we will be
    using the L298N motor driver module, which currently is one of the most common
    motor driver modules available on the market. It has two channels—you have two
    H-bridges and hence you can connect two motors onto it. Further, the specifications
    for this motor driver are also decent for the price. Here are the specifications:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '**Voltage rating**: 2.5V to 46V'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repetitive maximum current**: 2.5 amp'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Burst maximum current**: 3 amp'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous maximum current**: 2 amp'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supply voltage**: 4.5V to 7V'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logic supply voltage**: 4.5V to 7V'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have the physical motor driver with you, you will notice the following
    pins:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**Motor A**: This is channel 1 of the motor driver. You can connect the first
    motor to this port.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motor B**: This is channel 2 of the motor driver. You can connect a second
    motor to this port. If you only have one motor, you can simply leave this port
    unconnected.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GND**: This is the ground of the power supply that you will attach for the
    motor. It is very important that you not only connect the ground of the power
    supply but also connect the ground of Raspberry Pi to this port so that the circuit
    is complete between Raspberry Pi and the motor driver.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VCC**: This is the positive port of the motor driver. This is where the positive
    terminal of your battery or power adapter will go.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IN 1 and IN 2**: These are the two logical inputs that we need to provide
    from the microcontroller for motor A. Whenever IN 1 receives the signal, one part
    of the H-bridge is activated—the motor starts spinning in one direction. Whenever
    IN 2 receives the signal, the other part of the H-bridge is activated, making
    the motor spin in the opposite direction.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IN 3 and IN 4**: This is the logical input of the motor B, which will work
    in exactly the same way as IN 1 and IN 2.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EN A and EN B**: These are the enable pins for both the channels. If these
    pins are not high, the respective channels will not work despite any signal that
    you give over the input ports. You might notice that there is a small cap on the
    EN ports. This is called a shunt. What it does is that it makes contact between
    the two pins that it has been connected on. This cap, when present over the EN
    pin, means that it would permanently be high as long as this shunt is connected.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting it rolling
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OK, that''s a lot of theory, so now let''s fire up one of our motors via Raspberry
    Pi. To do that, go ahead and connect the motor and the motor driver as shown:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8fde20dc-270d-47ec-8957-b4d0bbac3662.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'Now, once you are done with it, let''s upload the code and see what happens:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s understand the code a bit:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Pin number `20` is connected to IN 1 of the motor driver. For convenience,
    we have changed motor 1 right to `Motor1R`; in reality, the motor can spin in
    any direction but we have just written this for convenience and understanding.
    Similarly, we have done this for `Motor1L` as well. This is connected to IN 2,
    hence this will lead to the motor spinning in the other direction:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, we are making the `Motor1R` or the pin number `20` high, which means
    that the input motor driver is getting is:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '| **Motor** | **Pin** | **Input** | **State** |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| `Motor 1R` | Pin number 20 of Raspberry Pi | IN 1 | `HIGH` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| `Motor 1L` | Pin number 21 of Raspberry Pi | IN 2 | `LOW` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: 'Now, after a delay of 5 seconds, the following code will run, which will change
    the state of the pins as depicted in the below table:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| **Motor** | **Pin** | **Input** | **State** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: '| `Motor 1R` | Pin number 20 of Raspberry Pi | IN 1 | `LOW` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| `Motor 1L` | Pin number 21 of Raspberry Pi | IN 2 | `HIGH` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: Now, let's see what happens once we run it. The motor will spin firstly in one
    direction and then it will go in the other direction. The code is very straightforward
    and I don't think there is any need for explanation. All we are doing here is
    simply turning either of the two GPIOs connected to the motor driver on and off.
    Once the input IN 1 of the motor driver is activated, a part of the H-bridge is
    switched on, causing the motor to spin in one direction. Whenever the IN 2 of
    the motor driver is high, then the opposite part of H-bridge is turned on, causing
    the polarity at the output end of the motor driver to change, and hence the motor
    turns in the other direction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一旦我们运行它会发生什么。电机首先会以一个方向旋转，然后会以另一个方向旋转。代码非常简单直接，我认为没有必要解释。我们在这里所做的就是简单地打开或关闭连接到电机驱动器的两个GPIO中的一个。一旦激活电机驱动器的IN
    1输入，H桥的一部分就会打开，导致电机朝一个方向旋转。每当电机驱动器的IN 2输入高时，那么H桥的另一部分就会打开，导致电机驱动器输出端的极性发生变化，因此电机朝另一个方向旋转。
- en: Changing the speed
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变速度
- en: Now that we have understood how to change the direction of the motor using the
    motor driver, it's time to take it a step further and control the speed of the
    motor using the motor driver. To do this, we don't really have to do much. The
    motor drivers are built to understand the PWM signals. Once the PWM signal to
    the motor driver is provided, then the motor driver in turn adjusts the output
    voltage for the motor and hence changes the speed of the motor driver. The PWM
    has to be provided on the same input ports IN 1 and IN 2 for motor A, and IN 3
    and IN 4 for motor B. It is obvious that the pin on which the PWM is provided
    will decide the direction in which the motor will move, and the duty cycle of
    the PWM will decide the speed at which the motor will be spinning.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用电机驱动器改变电机的方向，是时候更进一步，使用电机驱动器控制电机的速度了。要做到这一点，我们实际上不需要做太多。电机驱动器是为了理解PWM信号而构建的。一旦向电机驱动器提供PWM信号，那么电机驱动器将调整电机的输出电压，从而改变电机驱动器的速度。PWM必须在电机A的相同输入端口IN
    1和IN 2上提供，并在电机B的输入端口IN 3和IN 4上提供。很明显，提供PWM的引脚将决定电机的移动方向，而PWM的占空比将决定电机旋转的速度。
- en: 'Now we have understood how speed control in motor driver works. It''s time
    to do it by ourselves. To do so, we do not need to make any changes to the connections;
    all we need to do is to upload the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了电机驱动器中的速度控制是如何工作的。现在是时候自己动手了。为此，我们不需要对连接进行任何更改；我们需要做的就是上传以下代码：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What happened after you ran this code? I''m sure the motor started slowly and
    then started increasing its speed and, upon reaching its top speed, it eventually
    stopped—exactly what we wanted it to do. If you remember, this code looks very
    familiar. Remember changing the brightness of the LED in the first chapter? It
    is almost the same; there are a few differences, though, so let''s see what they
    are:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你运行这段代码后发生了什么？我肯定电机开始缓慢转动，然后加速，最终达到最高速度，最终停止——这正是我们想要的。如果你记得，这段代码看起来非常熟悉。还记得在第一章中改变LED的亮度吗？它几乎是一样的；虽然有一些区别，所以让我们看看它们是什么：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this line, we are simply defining the pin we have to give the PWM on—as
    in, on `Motor1R`, which corresponds to pin number `20`. Also, we are are defining
    the frequency of the PWM as `100` hertz or 100 times in a second:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们只是定义了我们需要在上面提供PWM的引脚——就是`Motor1R`，对应的是引脚号`20`。此外，我们定义了PWM的频率为`100`赫兹或每秒100次：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you remember, the preceding command from the previous chapters, `pwm.start()`,
    is primarily used for defining the duty cycle of the  signal. Here, we are giving
    it the duty cycle as `0` that is the pin would be off:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得，前几章的先前命令`pwm.start()`主要用于定义信号的占空比。在这里，我们将占空比设置为`0`，即引脚将关闭：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we are running motor in one specific direction and which is `1R` hence the
    other half of the H bridge should be turned off. this would be done by the above
    line by putting the line `1L` LOW. If we don''t do this then the pin `21` can
    be in an arbitrary state, hence it can be either on or off. This might conflict
    with the direction in which the motor is moving and the hardware would not work
    properly:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只在一个特定方向上运行电机，即`1R`，因此H桥的另一半应该关闭。通过上面的代码行，通过将`1L`置为LOW来实现。如果我们不这样做，那么引脚`21`可能处于任意状态，因此它可能是打开或关闭的。这可能会与电机移动的方向发生冲突，硬件将无法正常工作：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here comes the real deal; this line, `for i in range(0,101):`, will keep on
    running the program contained in it until the time the value of `i` is between
    `0` to `101`. It will also increment the value of `i` every time this loop runs.
    Here, every time, the value will increase by one:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，真正的问题来了；这一行，`for i in range(0,101):`将一直运行其中包含的程序，直到`i`的值在`0`到`101`之间。它还会在每次循环运行时增加`i`的值。在这里，每次值都会增加一：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, this is a slightly new command. Previously, we have used the line `pwm.start(0)`
    to assign a duty cycle to the PWM. As we have already assigned a duty cycle value
    to the PWM, to change it we would use the previously mentioned command. The duty
    cycle would be the same as the value of `i`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是一个稍微新的命令。以前，我们使用了`pwm.start(0)`来为PWM分配占空比。由于我们已经为PWM分配了占空比值，要更改它，我们将使用先前提到的命令。占空比将与`i`的值相同。
- en: Hence, every time the code passes through the `for` loop, the value or the duty
    cycle will increase by one. Super easy, isn't it?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次代码通过`for`循环时，值或占空比将增加一。非常简单，不是吗？
- en: Everything in robotics is very easy if you do it right. The idea is to break
    your problem into small pieces and solve them one by one; trust me, once you do
    that, nothing will look difficult to you.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做对了，机器人学中的一切都很容易。关键是将问题分解成小块并逐个解决；相信我，一旦你做到了，没有什么会让你觉得困难。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we worked on the various aspects of a motor. Moving on, by
    using all the basics, we will study the interaction of Bluetooth with mobile devices
    and build a Bluetooth-controlled robotic car.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了电机的各个方面。接下来，通过使用所有的基础知识，我们将学习蓝牙与移动设备的交互，并构建一个蓝牙控制的机器人汽车。
