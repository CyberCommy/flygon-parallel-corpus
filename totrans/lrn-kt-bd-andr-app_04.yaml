- en: Classes and Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue to work on our TicTacToe game whilst learning
    about classes and objects in Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of the chapter, we will have:'
  prefs: []
  type: TYPE_NORMAL
- en: Learned about classes and objects in Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Worked on part of the logic for the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structure of a class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like Java, classes in Kotlin are declared using the `class` keyword. The
    basic structure of a class consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: The `class` keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The body of the class enclosed in curly braces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The header can consist of a primary constructor, a parent class if applicable,
    and an interface to implement if applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Of all four parts, only the first two are compulsory. If the class has no body,
    you can skip the curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: Constructors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like in Java, a class can have multiple constructors but, in Kotlin, the
    primary constructor can be added as part of the header of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s add a constructor to the `HelloKotlin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, the `HelloKotlin` class has a primary constructor that
    takes a string called `message`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the constructor does not have any modifiers, we can rid it of the `constructor`
    keyword altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In Kotlin, secondary constructors have to call the primary constructor. Let''s
    take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A few things to note about the secondary constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: It does not take any parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It calls the primary constructor with a default message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not make use of the curly braces. This is because it has no body and
    therefore has no use for the curly braces. If we add a body, we'll be required
    to make use of the curly braces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if the `displayKotlinMessage()` method wants to make use of the `message`
    parameter passed in the constructor?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to go about this. You can create a field in `HelloKotlin`
    and initialize it with the `message` parameter passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add the appropriate keyword to the `message` parameter to make
    it a field of the class as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take the changes we''ve made for a spin. In the `onCreate()` method
    in the `MainActivity` class, let''s replace the `HelloKotlin` initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll replace it with an initialization that passes a message as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/cfb906c5-b284-4f86-846e-1f1ea1bb9db6.png)'
  prefs: []
  type: TYPE_IMG
- en: The message passed is shown at the bottom when we click on the FloatingActionButton.
  prefs: []
  type: TYPE_NORMAL
- en: Data classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building apps, most of the time we require classes whose only function
    is to store data. In Java, we usually use a POJO for this. In Kotlin, there's
    a special class for that known as the **data class**.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we want to keep a scoreboard for our TicTacToe game. How will we store
    the data for each game session?
  prefs: []
  type: TYPE_NORMAL
- en: 'In Java, we''ll create a POJO that will store data about the game session (the
    board at the end of the game and the winner of that game):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In Kotlin, this is greatly simplified to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The previous single line of code does the same thing as the previous 26 lines
    of Java code. It declares a `Game` class that takes two parameters in its primary
    constructor. As stated earlier, the `getters` and `setters` are not needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data class in Kotlin also comes with a number of other methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`equals()`/`hashCode()` pair'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toString()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`copy()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you've ever written any Java code, you should be familiar with `equals()`,
    `hashCode()`, and `toString()`. Let's go ahead and discuss `copy()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `copy()` method comes in handy when you want to create a copy of an object
    but with part of its data altered, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: We declare a data class called `Student`. It takes three parameters in its primary
    constructor: `name`, `classRoomNo`, and `studentId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `anna` variable is an instance of the `Student` with the following properties:
    `name:Anna`, `classRoomNo:5`, and `studentId:1`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The variable `joseph` is created from copying `anna` and changing two of the
    properties—`name` and `studentId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we delve into a discussion about objects, let''s make some additions
    to the TicTacToe game. Let''s initialize our views. Add the following lines of
    code to the `onCreate()` method in the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following methods to the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In one and two, we initialize `turnTextView` and `tableLayout` with their corresponding
    views in the XML layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `startNewGame()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We re-initialize `turn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We set `turnTextView` to show the value of `turn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We reset all the values of `gameBoard`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We reset all the cells of the `tableLayout` to an empty string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `cellClickListener()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set the value of `turn` to a specific element of `gameBoard` based on the
    parameters passed to `cellClickListener()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also change the value of the corresponding cell on the `tableLayout` to `turn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We change the value of `turn` to the next player, depending on the previous
    value of `turn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We change the value shown on `turnTextView` to the new value of `turn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to call `cellClickListener()` every time any of the cells are clicked.
    To do this, we need to add a click listener to each one of them. In Android, we
    use the `View.OnClickListener`. Since `View.OnClickListener` is an interface,
    we normally create a class that implements its methods and set that class as our
    click listener.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both Java and Kotlin have a way of simplifying this. In Java, you can get around
    it by using an **Anonymous Inner Class**. An Anonymous Inner Class allows you
    to declare and create an instance of a class at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we declare and create an instance of a class that implements
    the `View.OnClickListener` interface.
  prefs: []
  type: TYPE_NORMAL
- en: In Kotlin, this is done using **Object Expressions**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the following lines of code in the body of the `if (setClickListener)` statement
    in the `startNewGame()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Kotlin allows us to further simplify the previous lines of code. We'll discuss
    this in [Chapter 6](57bf460e-81b3-4efe-9a42-d783a0d15b12.xhtml), *Functions and
    Lambdas*, when we talk about **Lambdas**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run. Now, when you click on any of the cells, the text in it will
    change to that of the `turnTextView` and the `turnTextView` value will also change
    to that of the next player:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da55dc44-f34e-4334-9a05-80533dcae777.png)               ![](img/a841870d-23cd-4b56-9c44-a4dd9e6b791e.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about classes, data classes, and object expressions,
    while initializing our views and adding extra logic to our game app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve into the topic of type checks and null safety
    and why these features of Kotlin make it one of the safest languages.
  prefs: []
  type: TYPE_NORMAL
