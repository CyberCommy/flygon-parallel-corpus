- en: Using Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn to use Google Maps in Python applications and
    explore the different advantages provided by Google. You will learn to do the
    following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Find out details of a location or landmark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get complete information from latitude and longitude values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find out the distance between a two locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a location on Google Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps API is a set of methods and tools that can be used to find out
    complete information, including longitude and latitude values, for any location.
    You can use the Google Maps API methods to find distances between two locations
    or directions to any location; you can even display Google Maps, marking that
    location, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'More precisely, there is a Python `client` library for Google Maps Services.
    There are several Google Maps APIs, including the Directions API, Distance Matrix
    API, Geocoding API, Geolocation API, and many more. To use any Google Maps web
    services, your Python script sends a request to Google; to serve that request,
    you need an API key. You need to follow these steps to get an API key:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://console.developers.google.com](https://console.developers.google.com)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the console using your Google account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select one of your existing projects or create a new project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the API(s) you want to use
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the API key and use it in your Python script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to visit the Google API Console, [https://console.developers.google.com](https://console.developers.google.com/apis/dashboard),
    and get API keys so that your application is authenticated to work with Google
    Maps API web services.
  prefs: []
  type: TYPE_NORMAL
- en: API keys help in several ways; first of all, they help identify your application.
    The API key is included with every request, hence it helps Google monitor your
    application's API usage, know if your application has consumed its free daily
    quota, and consequently bill your application too
  prefs: []
  type: TYPE_NORMAL
- en: So, in order to use Google Maps API web services in your Python application,
    you just need to enable the desired API and get a API key for use in your Python
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Finding out details of a location or a landmark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will be prompted to enter a location or landmark whose details
    you want to know. For example, if you enter `Buckingham Palace`, the recipe will
    display the city and postal code of the location where the palace is situated,
    along with its longitude and latitude values.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The search method of the `GoogleMaps` class is the key player in this recipe.
    The landmark or location entered by the user is passed to the search method. The
    `city`, `postal_code`, `lat`, and `lng` properties of the object returned from
    the search method are used to display the city, postal code, latitude, and longitude
    of the location, respectively. Let''s see how it is done through the following
    step-by-step procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an application based on the Dialog without Buttons template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add six `QLabel`, a `QLineEdit`, and a `QPushButton` widget to the form by dragging
    and dropping six Label, one Line Edit, and a Push Button widget onto the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the first Label widget to `Find out the City, Postal
    Code, Longitude and Latitude` and that of the second Label widget to `Enter location`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the text property of the third, fourth, fifth, and sixth Label widgets,
    because their text properties will be set through code; that is, the city, postal
    code, longitude, and latitude of the entered location will be fetched through
    code and will be displayed through these four Label widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the Push Button widget to `Search`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the Line Edit widget to `lineEditLocation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the Push Button widget to `pushButtonSearch`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the rest of the four Label widgets to `labelCity`,
    `labelPostalCode`, `labelLongitude`, and `labelLatitude`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the application by name as `demoGoogleMap1.ui`. The form will now appear
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2178b7ed-d1b5-4dac-8323-bdd54599223a.png)'
  prefs: []
  type: TYPE_IMG
- en: The user interface created with Qt Designer is stored in a `.ui` file and it
    is an XML file. The XML file is converted into Python code by applying the `pyuic5`
    utility. You can find the generated Python code, `demoGoogleMap1.py`, in the source
    code bundle for the book.
  prefs: []
  type: TYPE_NORMAL
- en: Treat the `demoGoogleMap1.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another Python file with the name `callGoogleMap1.pyw` and import the
    `demoGoogleMap1.py` code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can see in the script that the click event of the push button with the objectName
    property `pushButtonSearch` s connected to the `displayDetails` method. This means
    that, whenever the push button is clicked, the `displayDetails` method will be
    invoked. In the `displayDetails` method, you access the location entered by the
    user in the Line Edit widget and assign that location to the address variable.
    You define a Google Maps instance by passing the API key that you got on registering
    with Google. Invoke the `search` method on the Google Maps instance, passing the
    location entered by the user in this method. The result of the `search` method
    is assigned to the `my_location` structure. The city member of the `my_location`
    structure contains the city entered by the user. Similarly, the `postal_code`,
    `lng`, and `lat` members of the `my_location` structure contain the postal code,
    longitude, and latitude information of the location entered by the user, respectively.
    The city, postal code, longitude, and latitude information are displayed via the
    last four Label widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the application, you will be prompted to enter a location you want
    to find information about. Suppose you enter `Taj Mahal` in the location, followed
    by clicking the Search button. The city, postal code, longitude, and latitude
    information of the Taj Mahal landmark will be displayed on the screen, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/82952079-989a-4c5e-9c83-87569e794297.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting complete information from latitude and longitude values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to find out the complete details of a location
    whose longitude and latitude values you know. This process of converting a point
    location, that is, latitude and longitude values, into a readable address (the
    place name, city, country name, and so on) is known as **reverse geocoding**.
  prefs: []
  type: TYPE_NORMAL
- en: The application will prompt you to enter longitude and latitude values, and
    then it will display the matching location name, city, country, and postal code
    for that location.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create an application based on the Dialog without Buttons template by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add seven `QLabel`, two `QLineEdit`, and a `QPushButton` widget to the form
    by dragging and dropping seven Label, two Line Edit, and a Push Button widget
    onto the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the first Label widget to `Find out the Location, City,
    Country and Postal Code`, that of the second Label widget to `Enter Longitude`,
    and that of the third Label widget to `Enter Latitude`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the text properties of the fourth, fifth, sixth, and seventh Label widgets
    because their text properties will be set through code; that is, the location,
    city, country, and postal code of the location whose longitude and latitude are
    entered by the user will be accessed through code and will be displayed through
    these four Label widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the Push Button widget to `Search`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the two Line Edit widgets to `lineEditLongitude`
    and `lineEditLatitude`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the Push Button widget to `pushButtonSearch`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the other four Label widgets to `labelLocation`,
    `labelCity`, `labelCountry`, and `labelPostalCode`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the application by name as `demoGoogleMap2.ui`. The form will now appear
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7427070b-7dd9-400e-9ac7-7ca614a6ee62.png)'
  prefs: []
  type: TYPE_IMG
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted into Python code. The `pyuic5` utility
    is used to convert the XML file into Python code. The generated Python script, `demoGoogleMap2.py`, can
    be seen in the source code bundle for the book.
  prefs: []
  type: TYPE_NORMAL
- en: Treat the `demoGoogleMap2.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another Python file with the name `callGoogleMap2.pyw` and import the
    `demoGoogleMap2.py` code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the script, you can see that the click() event of the push button with the
    objectName property `pushButtonSearch` is connected to the `displayLocation` method.
    This means that, whenever the push button is clicked, the `displayLocation` method
    will be invoked. In the `displayLocation` method, you access the longitude and
    latitude entered by the user through the two Line Edit widgets and assign them
    to two variables, `lng` and `lat`, respectively. A Google Maps instance is defined
    by passing the API key that you got on registering with Google. Invoke the `search`
    method on the Google Maps instance, passing the longitude and latitude values
    that were supplied by the user. The `first` method is invoked on the retrieved
    search and the first location that matches the supplied longitude and latitude
    values is assigned to the `my_location` structure. The location name is displayed
    through the Label widget. To display the city, country, and postal code of the
    location, the `city`, `country`, and `postal_code` members of the `my_location`
    structure are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the application, you will be prompted to enter longitude and latitude
    values. The location name, city, country, and postal code related to the supplied
    longitude and latitude will be displayed on the screen through the four Label
    widgets, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9931f5fa-74a4-432d-b0e4-7d1910828e4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Finding out the distance between two locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to find out the distance in kilometers between
    the two locations entered by the user. The recipe will simply prompt the user
    to enter two locations, followed by clicking the Find Distance button, and the
    distance between the two will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create an application based on the Dialog without Buttons template by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add four `QLabel`, two `QLineEdit`, and a `QPushButton` widget to the form by
    dragging and dropping four Label, two Line Edit, and a Push Button widget onto
    the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the first Label widget to `Find out the distance between
    two locations`, that of the second Label widget to `Enter first location`, and
    that of the third Label widget to `Enter second location`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the text property of the fourth Label widget because its text property
    will be set through code; that is, the distance between the two entered locations
    will be computed through code and displayed in the fourth Label widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the Push Button widget to `Find Distance`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName properties of the two Line Edit widgets to `lineEditFirstLocation`
    and `lineEditSecondLocation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the Push Button widget to `pushButtonFindDistance`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the fourth Label widget to `labelDistance`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the application by name as `demoGoogleMap3.ui`. The form will now appear
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fba0fce7-d01a-4b48-b271-0149a0f77bc4.png)'
  prefs: []
  type: TYPE_IMG
- en: The user interface created with Qt Designer is stored in a `.ui` file and it
    is an XML file. The XML file is converted into Python code by applying the `pyuic5`
    utility. You can find the generated Python code, `demoGoogleMap3.py`, in the source
    code bundle for the book.
  prefs: []
  type: TYPE_NORMAL
- en: To use the GUI created in the `demoGoogleMap3.py` file, we need to create another
    Python script and import `demoGoogleMap3.py` file in that script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another Python file with the name `callGoogleMap3.pyw` and import the
    `demoGoogleMap3.py` code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You create an instance of the `Client` class and name it `gmaps`. While creating
    the `Client` instance, you need to pass the API key that you got on registering
    with Google. The click() event of the push button with objectName, `pushButtonFindDistance`,
    is connected to the `displayDistance` method. This means that, whenever the push
    button is clicked, the `displayDistance` method will be invoked. In the `displayDistance` method,
    you invoke the `distance_matrix` method, passing the `Client` instance and the
    two locations entered by the user, to find out the distance between them. The
    `distance_matrix` method returns a multidimensional array that is assigned to
    the data array. From the data array, the distance between the two locations is
    accessed and assigned to the `distance` variable. The value in the `distance`
    variable is finally displayed through the Label widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the application, you will be prompted to enter the two locations
    whose intervening distance you want to know. After entering the two locations,
    when you click the Find Distance button, the distance between the two locations
    will be displayed on the screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b51275e5-c2e1-4667-899f-94028d2c718b.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying location on Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to display a location on Google Maps if you
    know the longitude and latitude values of that location. You will be prompted
    to simply enter longitude and latitude values and, when you click the Show Map
    button, that location will appear on Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create an application based on the Dialog without Buttons template by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add two `QLabel`, two `QLineEdit`, a `QPushButton`, and a `QWidget` widget to
    the form by dragging and dropping two Label, two Line Edit, a Push Button, and
    a Widget container onto the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the two Label widgets to `Longitude` and `Latitude`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the text property of the Push Button widget to `Show Map`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the two Line Edit widgets to `lineEditLongitude`
    and `lineEditLatitude`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the objectName property of the Push Button widget to `pushButtonShowMap`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the application by name as `showGoogleMap.ui`. The form will now appear
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5ae4fa15-157c-4c1d-9ff0-0f443d60e9a6.png)'
  prefs: []
  type: TYPE_IMG
- en: The next step is to promote the `QWidget` widget to `QWebEngineView` because,
    to display Google Maps, `QWebEngineView` is required. Because Google maps is a
    web application, we need a QWebEngineView to display and interact with Google
    maps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Promote the `QWidget` widget by right-clicking on it and selecting the Promote
    to ... option from the menu that pops up. In the dialog box that appears, leave
    the Base class name option as the default, QWidget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Promoted class name box, enter `QWebEngineView` and, in the header file
    box, type `PyQT5.QtWebEngineWidgets`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Promote button to promote the `QWidget` widget to the `QWebEngineView`
    class, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cef6a3a1-49b1-4336-8cc0-eedfadf522fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Close button to close the Promoted Widgets dialog box. The user
    interface created with Qt Designer is stored in a `.ui` file, which is an XML
    file and needs to be converted into Python code. The `pyuic5` utility is used
    to convert the XML file into Python code. The generated Python script, `showGoogleMap.py`,
    can be seen in the source code bundle for the book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Treat the `showGoogleMap.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another Python file with the name `callGoogleMap.pyw` and import the
    `showGoogleMap.py` code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the script, you can see that the click event of the push button with the
    objectName property `pushButtonShowMap` is connected to the `dispSite ()` method.
    This means that, whenever the push button is clicked, the `dispSite()` method
    will be invoked. In the `dispSite ()` method, you access the longitude and latitude
    entered by the user through the two Line Edit widgets, and assign them to two
    variables, `lng` and `lat`, respectively. Thereafter, you create a URL that invokes
    Google Maps from [google.com](https://www.google.com/) and passes the latitude
    and longitude values entered by the user.
  prefs: []
  type: TYPE_NORMAL
- en: The URL is initially in text form and is typecast to a `QUrl` instance and passed
    to the widget that is promoted to `QWebEngineView` to display the website. The
    `QUrl` is a class from Qt that provides several methods and properties to manage
    URLs. Google Maps, with the specified latitude and longitude values, is then displayed
    via the `QWebEngineView` widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the application, you will be prompted to enter the longitude and
    latitude values of the location you want to see on Google Maps. After entering
    the longitude and latitude values, when you click on the Show Map button, Google
    Maps will display that location, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/15c43a7b-76f1-4c6f-84a3-72240cfc43ec.png)'
  prefs: []
  type: TYPE_IMG
