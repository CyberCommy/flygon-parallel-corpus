- en: Chapter 1. Getting Started with Qt Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Qt Creator is the integrated software development environment that supports
    both traditional C++ application development, as well as development using the
    Qt project''s libraries (collectively called "Qt", pronounced "cute"). In this
    chapter, we will see everything we need to get started with Qt Creator:'
  prefs: []
  type: TYPE_NORMAL
- en: Where to download Qt Creator for Linux, Mac OS X, or Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to ensure that your basic configuration is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick look at a simple Qt GUI application, as well as a Qt Quick application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Qt Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt, the cross-platform toolkit behind Qt Creator, has had a long and illustrious
    history. Presently, a project of Digia, it has its own URL at [qt-project.org](http://qt-project.org)
    and has both commercial and noncommercial licenses available.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with the noncommercial version for free, head over to [http://bit.ly/13G4Jfr](http://bit.ly/13G4Jfr)
    to see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Qt Creator](img/2319OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Downloading Qt Creator
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most popular platforms for application development with Qt is Linux.
    On many Linux variants—notably Ubuntu, my personal favorite—you can get Qt Creator
    using the package manager. On my Ubuntu box, Qt Creator is just a `sudo apt-get
    install qtcreator` command away. You'll get a version of Qt matched with your
    flavor of Linux, although it might not be the latest and greatest build from Digia.
  prefs: []
  type: TYPE_NORMAL
- en: We can also download bits and pieces of Qt, such as just the runtime libraries,
    or build Qt Creator from source. This typically requires that you already have
    a compiler and basic development tools installed, and a basic understanding of
    `qmake` and Qt's build configuration management system.
  prefs: []
  type: TYPE_NORMAL
- en: Some downloads include the C++ compiler and linker you need for your development;
    others don't. For example, on Windows there's a variant that includes the MinGW
    tool chain, so you have everything you need to build applications. However, you
    can also download Qt Creator for Windows that uses the Microsoft Visual Studio
    compilers, so, if you prefer using Visual Studio for your compilation and Qt Creator
    as your IDE, that's also an option. On Mac OS X, you'll need to have Xcode and
    the command-line development tools installed first; you can download Xcode from
    the Mac OS X App Store, and then use Xcode to download the command-line development
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Once the installer is downloaded, run it in the usual way. It'll launch an installation
    wizard for your platform, and typically the installation takes about three or
    four minutes. You'll want to have plenty of disk space. Qt Creator doesn't consume
    that much disk space, but software development typically does; figure at least
    500 megabytes for the tools and libraries, and budget a few gigabytes free on
    your main drive for your source code, intermediate object files, debug symbols,
    and of course, your compiled application. (This is especially important to plan
    for if you're running Qt Creator on a virtual machine; make sure that the virtual
    hard drive for your virtual machine image has plenty of disk space.) You should
    also ensure that your development box has plenty of RAM; the more, the better.
    Qt Creator runs happily in 2 GB of RAM, but the compiler and linker used by Qt
    Creator can run a lot faster if it has more RAM available.
  prefs: []
  type: TYPE_NORMAL
- en: Finding your way around Qt Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following screenshot shows what you see the first time you launch Qt Creator.
    Let''s take a closer look at each portion of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding your way around Qt Creator](img/2319OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The landing page of Qt Creator
  prefs: []
  type: TYPE_NORMAL
- en: 'The main window, which currently shows the icons for **IDE Overview**, **User
    Interface**, **Building and Running an Example Application**, and **Start Developing**,
    is your workspace. Under normal conditions, this will be where you''ll see the
    source code for your application. Along the left-hand side are a series of icons
    that let you select various views into your application. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Welcome** view shows basic information about Qt Creator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Edit** view lets you edit the files that make up your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Design** view lets you use the Qt Designer to design the user interface
    for your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Debug** view lets you debug your application while it's running, including
    doing things like viewing memory and variables, setting breakpoints, and stepping
    through your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Projects** view lets you adjust the build and link settings for your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Analyze** view lets you profile your application's runtime performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Help** view provides documentation about Qt Creator and the Qt Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below the **Help** view button in the previous screenshot you can see the active
    project; when I took this screenshot, I had already created our first application.
    Let's do that now.
  prefs: []
  type: TYPE_NORMAL
- en: Your first application – Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Qt Creator, choose **New File or Project…** from the **File** menu. Qt Creator
    will present you with the **New** project wizard, which lets you choose the kind
    of project you want to create, give it a name and so forth. To create our first
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **New File or Project…** if you haven't already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Qt Creator presents you with a dialog that has a dizzying array of project choices.
    Choose **Application**, then **Qt Console Application**, and click on **Choose…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Qt Creator asks you for a name and a path to the directory where you want to
    store the files for the project. For the name, enter `HelloWorldConsole`, and
    choose a path that makes sense for you (or accept the default). Then, click on
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Qt Creator can support various kits and libraries against which to build an
    application. Select the desktop Qt kit that should have been installed by default,
    leaving both the **Release** and **Debug** choices checked. Then, click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next step, Qt Creator prompts you about version control for your project.
    Qt Creator can use your installed version control clients to perform change tracking
    for your project. For now, skip this and leave **Add to version control** set
    to **None** and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Qt Creator creates your project and switches to the **Edit** view. In the source
    code editor for the file `main.cpp`, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `QCoreApplication` task handles the system startup for an application, and
    every Qt Console app needs to create one and call its `exec` method, as part of
    the `main` method. It sets up Qt's event handler and provides a bunch of porting
    helpers to determine things such as your application directory, library paths,
    and other details.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a console application, that''s all you need: you can freely mix and match
    Qt classes with the C++ standard library and **Standard Template Library** (although
    once you master Qt''s foundation classes, many STL constructs feel somewhat limiting).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s compile and run the application. There are several ways you can
    do this. You can use any one of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Hit *F5* to build and run your application in the debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose **Start Debugging…** from the **Debug** menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the green **Run** arrow below the **Help** view button on the left
    to run the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the green **Run** arrow with the bug over the arrow to debug the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If all you want to do is build the application, you can click on the hammer
    icon below the **Run** and **Debug** icons.
  prefs: []
  type: TYPE_NORMAL
- en: When you choose one of these options, Qt Creator invokes the compiler and linker
    to build your application. If you chose a debug option, Qt Creator switches to
    the **Debug** view (which I will discuss in detail in the next chapter) as it
    starts your application.
  prefs: []
  type: TYPE_NORMAL
- en: Once the application starts, you'll see the `Hello world!` message in the console
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World using the Qt GUI library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of Qt''s strengths is its rich collection of GUI elements you can use to
    create windowed applications. Making a GUI application is similar, in principle,
    to making a console application; instead of choosing **Qt Console Application**,
    choose **Qt Gui Application** from the **New** dialog presented when you choose
    **New File or Project…**. Try that now:'
  prefs: []
  type: TYPE_NORMAL
- en: First, close the current file and project by choosing **Close All Projects and
    Editors** from the **File** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose **New File or Project…** again, and choose **Qt Gui Application**
    from the first step of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Walk through the wizard again, naming your project `HelloWorldGui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **New** project wizard will prompt you for the name of the class implementing
    your main window. Stick with the defaults given to you: leave the subclass as
    `QMainWindow`, and the name as `MainWindow`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Qt Creator creates a default subclass of the class providing the platform''s
    basic window handling in the `mainform.h` and `mainform.cpp` files, and creates
    a form that will contain the widgets for your application''s window. If you run
    the application at this point, you''ll see an empty window. Instead, double-click
    on the **Forms** folder in the second pane of Qt Creator, and then double-click
    on the file `mainwindow.ui`. Qt Creator switches to the **Design** view, and you''ll
    see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World using the Qt GUI library](img/2319OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Qt Creator's Design view
  prefs: []
  type: TYPE_NORMAL
- en: To the left, is a list of layouts you can choose to organize widgets such as
    spacers, views, containers, buttons, and other widgets. In the middle, is a view
    of the layout of your application's main window, and to the right are panes with
    a hierarchy of the objects in your main window and the properties of any item
    you click in the main window.
  prefs: []
  type: TYPE_NORMAL
- en: 'While I explore Qt Designer more in [Chapter 3](ch03.html "Chapter 3. Designing
    Your Application with Qt Designer"), *Designing Your Application with Qt Designer*,
    you can get a feel for using it to build a simple UI:'
  prefs: []
  type: TYPE_NORMAL
- en: Where it says **Type Here**, right-click and choose **Remove menu bar**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a label (under **Display Widgets** in the left-hand pane) and drop it on
    the window preview in the center pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the label that appears and type, `Hello world!`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grab a corner of the label and resize it, so the entire text is shown. You can
    also move it around in the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that when you click on the label, the properties field in the lower right
    corner updates to show the properties of your new label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a button (under **Buttons** in the left-hand pane) and drop it on the window
    preview in the center pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the button and change its text to `Exit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the new button selected, change the **objectName** field in the property
    browser to `exitButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the button and choose **Go to slot…**. A window appears with
    a list of slots (for now, you can think of a slot as something that is triggered
    on an action).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **clicked()** from the list that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Qt Creator returns to the **Edit** view for your `mainindow.cpp` file. Change
    it to read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before running your application, let's be sure we understand the implementation
    of the `MainWindow` class. The `MainWindow` class's constructor loads the description
    of the user interface for the main window and sets it up using the Qt Creator-generated
    class `Ui::MainWindow`. The destructor deletes the implementation of the code
    layout, and the `on_pushButton_clicked` method simply terminates the application
    by calling the static method `exit` implemented by the `QApplication` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have to add the `on_pushButton_clicked` method declaration to `MainWindow.h`.
    Double-click on that file in the browser on the left and make sure it reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The key lines you need to add are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We'll learn more about signals and slots in the next chapter; for now, it's
    enough to know that you're declaring a private function to be triggered when you
    click on the button.
  prefs: []
  type: TYPE_NORMAL
- en: Run the application. It should open a single window with the text **Hello World**;
    clicking on the **Exit** button in the window (or the close box on the upper-right
    corner) should close the application. At this point, if you think you want to
    learn more about Qt GUI widget applications, go ahead and try dragging other GUI
    items to the window, or explore the help for Qt GUI applications by switching
    to the **Help** view and choosing **Qt Gui** from the list of help items.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World using Qt Quick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt Quick is Qt's newer declarative framework for the user interface, and with
    it it's incredibly easy to create fluid applications with animated transitions
    and flowing user interfaces. Using Qt Quick, you describe your user interface
    using QML, a JavaScript-like language that lets you declare the user interface
    elements and how they relate; the Qt Quick runtime does most of the heavy lifting
    in the implementation of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, you can guess how to create a Qt Quick project: choose **New File or
    Project…** from the **File** menu, and then click on **Qt Quick 2 Application
    (Built-in Types)** and follow the wizard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The wizard will ask no additional questions, and if you just walk through the
    wizard, you end up with a simple application that actually displays `Hello World`
    in its own window. Here''s the code it supplies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you know JavaScript, the syntax of this may look a little familiar, but it's
    still different. The first line is an import statement; it indicates to the QML
    runtime what classes should be available. At a minimum, all of your Qt Quick applications
    must import QtQuick Version 2.0, as this one does.
  prefs: []
  type: TYPE_NORMAL
- en: 'The QML itself follows. It declares a parent rectangle of 360 × 360 pixels—that
    determines the size of the application window. Inside the rectangle are two objects:
    **Text** and **MouseArea**. The **Text** object is just a label with the text
    `Hello World`, placed in the center of the rectangle. Note that the value of the
    text property is actually the result of a function call, a call to the function
    `qsTr`, Qt''s built-in localization function, which looks at application resources
    to return the localized version of `Hello World` if it''s been provided.'
  prefs: []
  type: TYPE_NORMAL
- en: The **MouseArea** object takes user input and can execute functions based on
    that input; it's sized to fit the parent (`anchors.fill` is set to `parent`) and
    responds when clicked by executing the function assigned to the `onClicked` property.
    This `onClicked` function just exits the application by calling the Qt class's
    `quit` function.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you can run the application in the usual way, and you'll see
    a window with the text **Hello World** centered in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the principles are similar, the Qt Quick Designer is very different from
    the Qt GUI Designer; have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World using Qt Quick](img/2319OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Qt Quick Designer
  prefs: []
  type: TYPE_NORMAL
- en: There are some obvious similarities. Both designers show a list of things you
    can add to a view, along with a hierarchy of objects in the view and the properties
    of individual objects. However, there are far fewer Qt Quick widgets than Qt GUI
    widgets, and the widgets in Qt Quick don't match the look and feel of the native
    platform to nearly the same extent. By design, Qt GUI is meant for building conventional
    applications that match the native platform, while Qt Quick is used for creating
    device-independent applications with their own look and feel. For example, you'd
    probably write an enterprise data collection application using Qt GUI, while you'd
    create a media center application using Qt Quick.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the designer is the same in both cases, however. Let''s add another **MouseArea**
    to the main view, and give it something to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `main.qml` in the list of files in Qt Creator and click on **Design**
    to see the **Design** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Library** pane, select items and scroll down until you see **Rectangle**.
    Drag the rectangle to the center pane and drop it somewhere above the `Hello World`
    label. You may need to resize the rectangle so that the label is still visible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the rectangle selected in the window pane, under **Colors**, enter a color
    for your rectangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now drag a **MouseArea** object out of the **Library** pane, and drop it on
    your new rectangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **MouseArea** selected, choose **Layout** and mouse over the layouts
    until you see **Fill to Parent**. Click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to the **Edit** view and modify `main.qml` to look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You should see that most of the changes were made by the **Design** view; it
    added a rectangle inside the original **MouseArea** object, and another **MouseArea**
    inside that. You should need to add the line giving the `text` element an ID of
    text, and the `onClicked` handler to the new **MouseArea** object that you dragged
    out in the **Design** view. The `id` property lets other QML access the text field
    by name (in this case, its name is simply text), and the `onClicked` handler changes
    the contents of the text item's `text` property to the text `Hi there!`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s worth making an observation about `qsTr` here: you don''t have to add
    any text to the application resources to get basic localization working. This
    is unlike most other platforms, where localization occurs by providing keys to
    values in local files for strings with a default value for the unlocalized strings.'
  prefs: []
  type: TYPE_NORMAL
- en: Run the application. You'll see your rectangle above the text **Hello World**,
    and clicking on the rectangle changes the text to read **Hi there!**.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Qt Creator is easy; it's just a web download away, or on most Linux
    platforms, it's an optional installation through the native package manager (although
    the versions delivered by a package manager may be slightly older than what you
    get from the Qt Project's website).
  prefs: []
  type: TYPE_NORMAL
- en: Qt Creator organizes its source code for you in projects; when you first launch
    it you can either create a default project, or create a new project to contain
    the source code and resources for your application. Inside Qt Creator are all
    the options you need to compile and debug your application. In addition, it supports
    designer tools for developing both Qt GUI and Qt Quick applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next, chapter we'll dig into the details of how to configure Qt Creator
    for compiling and editing your code, including how to add source files to your
    project, configure compiler and linker options, add dependencies to third-party
    libraries, and so on.
  prefs: []
  type: TYPE_NORMAL
