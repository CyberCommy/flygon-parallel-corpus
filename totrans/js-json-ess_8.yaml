- en: Chapter 8. Debugging JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON has grown leaps and bounds in the last few years, due to which there is
    an abundance of freely available resources to understand the JSON object we are
    working with. As we have discussed earlier, JSON can be used for multiple purposes,
    and it is important to understand the simple things that might break JSON, such
    as ignoring double quotes, or a trailing comma on the last item in the JSON object,
    or the wrong content-type being sent over by the web server. In this chapter,
    let us go over the different ways, in which we can debug, validate, and format
    JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Using the developer tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost all of the top browsers, such as Mozilla Firefox, Google Chrome, Safari,
    and Internet Explorer, have powerful debugging tools that help us understand the
    requests that are being made, and the responses that are coming back. JSON could
    either be part of the request, or be part of the response. Google Chrome, Safari
    and newer versions of Internet Explorer are shipped out with built-in developer
    tools. Firebug is a very popular web development toolkit that is available for
    Mozilla Firefox. Firebug is an external plugin and has to be installed on the
    browser; it is one of the earliest web development toolkits that was built to
    assist web developers while using Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install Firebug, please visit [http://getfirebug.com/](http://getfirebug.com/),
    and click on **Install Firebug** on the landing page.
  prefs: []
  type: TYPE_NORMAL
- en: 'These developer tools provide access to the HTML DOM tree, and give us a real-time
    understanding of how the HTML elements are arranged on the page. The developer
    tools come with a network (or **Net**) tab that allows us to keep a track of all
    the resources such as the images, JavaScript files, CSS files, flash media, and
    any asynchronous calls that the client is making. The console window is another
    popular feature that is built into the developer tools. As the name suggests,
    this window provides us a runtime JavaScript console to test any on-the-fly scripts.
    To fire up the developer tools on Firefox, load the web page into a web browser,
    and right-click on the web page; this will give us a list of options, choose **Inspect
    Element** **with Firebug**. To load the developer tools on Google Chrome and Safari,
    right-click on a web page and click on **Inspect Element** from the list of the
    options. When working on Safari, keep in mind that the developer tools have to
    be enabled; to enable the developer tools, click on the **Safari** menu item,
    choose **Preferences** and click on the **Advanced** tab, and check **Show develop
    menu in menu Bar** to view the developer tools. On Internet Explorer, hit the
    *F12* key on your keyboard to fire up the developer tools window. In [Chapter
    4](ch04.xhtml "Chapter 4. AJAX Calls with JSON Data"), *AJAX Calls with JSON Data*,
    we made our first asynchronous call to a live web server to request the JSON data
    using jQuery. Let us use that program and debug the data using developer tools;
    for this example we will be using the Firefox web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the developer tools](img/6034OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: jquery-ajax.html
  prefs: []
  type: TYPE_NORMAL
- en: 'On page load, when a user right-clicks and chooses the **Inspect Element with
    Firebug** option, the **HTML** tab is loaded up by default and the user gets to
    see the HTML DOM. In our example, we had bound a `click` event handler to the
    **Get Feed** button. Let us look at the console output after the button was clicked;
    to view the output in the console window, click on the **Console** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the developer tools](img/6034OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the response is retrieved, the JSON feed is logged into the **Response**
    tab on the console window. It is important to understand the JSON feed in order
    to parse it, and the developer tools'' console window provides us a simple way
    to analyze the JSON feed. Let us continue our research on the developer tools
    and visit the **Net** tab in Firefox, to understand how the client and the server
    communicate the content type of data that the client is expecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the developer tools](img/6034OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the Net window, we should begin by clicking on the URL for the asynchronous
    call, which is being made to `index.php`. Once that link is clicked, in the **Headers**
    section we should observe the **Accept** header, which is expecting the `application/json`
    **Multipurpose Internet Mail Extensions** (**MIME**) type, and the **X-Requested-With**
    header is **XMLHttpRequest**, which notifies that this is an asynchronous request.
    The **Response** tab in the Net window is the same as the **Response** tab in
    the console window, and it will display the JSON feed for this request. Throughout
    this book, we have extensively used the `console.log` method that prints the data
    onto the console window, which is another helpful feature of the developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: Validating JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to our debugging resources, there are a lot of popular web tools that
    help us with validating JSON that we build. **JSONLint** is one of the most popular
    web tools that are available for validating our JSON feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we are using a server-side program such as PHP, Python, or Java, the built-in
    JSON encoding libraries generate the JSON feed, and normally the feed will be
    a valid JSON feed.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSONLint has a very straightforward interface that allows the user to paste
    the JSON they want to validate, and returns either a success message or an error
    message based on the JSON feed that we paste. Let us begin by validating a bad
    piece of JSON to see the error message that would be returned, and then let us
    fix it to view the success message. For this example, I will copy the `students`
    feed from the previous example, and add a trailing comma at the end of the second
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Validating JSON](img/6034OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we have added a trailing comma to the last item in our JSON object,
    and the best part about JSONLint is the descriptive error message. We have encountered
    a **Parse error**, and to make life simple, the message also gives us the line
    number where the error could be. The parser is expecting a string, or a number,
    or a null, or a Boolean value, and because we have supplied none, we are encountering
    this error. In order to fix this error, we will either have to add a new item
    to that JSON object to justify the comma, or we will have to get rid of the comma,
    as there are no items ahead.
  prefs: []
  type: TYPE_NORMAL
- en: '![Validating JSON](img/6034OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As soon as we remove the trailing comma and validate it, we get the success
    message. Ease of use and descriptive messages have made JSONLint one of the goto
    websites for JSON validation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To work with JSONLint, please visit [http://www.jsonlint.com](http://www.jsonlint.com).
  prefs: []
  type: TYPE_NORMAL
- en: Formatting JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSONLint is not just an online JSON validator, it also helps us format JSON
    and makes it look pretty. Often JSON feeds are big in size, and an online editor
    that provides a tree structure to traverse through the JSON object is always helpful.
    **JSON Editor Online** is one of my favorite online editors to work with and format
    the big JSON objects, as it provides an easy to navigate tree structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Formatting JSON](img/6034OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To work with JSON Editor Online, please visit [http://www.jsoneditoronline.org](http://www.jsoneditoronline.org).
  prefs: []
  type: TYPE_NORMAL
- en: We begin by pasting our JSON example code into the window on the left-hand side,
    and click on the right arrow button in the middle to generate our tree structure.
    Once we make the changes to the tree structure, we can click on the left arrow
    button to format our data, making it ready to use elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging, validating, and formatting are three things that developers can never
    ignore. In this chapter, we have looked at resources such as the developer tool
    kits for the browsers for debugging, how we can utilize these developer tool kits,
    and also saw how to use JSONLint for validation and JSON Editor Online for formatting.
  prefs: []
  type: TYPE_NORMAL
- en: This is the end of *JavaScript and JSON Essentials*, targeted to provide you
    with an in-depth insight of how data can be stored and transferred in the JSON
    data format. We have had hands-on experience of transferring JSON via HTTP asynchronous
    requests within the same domain, and HTTP asynchronous requests across domains.
    We have also looked at alternative implementations of how the JSON data format
    can be used. This is a solid start to a long journey of understanding JSON to
    develop interactive and responsive web applications.
  prefs: []
  type: TYPE_NORMAL
