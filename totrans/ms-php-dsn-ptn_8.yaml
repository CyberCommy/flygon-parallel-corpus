- en: Chapter 8. How to Write Better Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the final chapter in this book. We've discussed a lot of patterns, but
    in this final chapter I want us to discuss how these patterns can be applied.
  prefs: []
  type: TYPE_NORMAL
- en: I want us here to talk about the bigger picture about how our code fits together,
    and what the key takeaways are for us to write great code.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, I would like to discuss where patterns are suited to our
    application in the development phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: The nature of an HTTP request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful API design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep It Simple, Stupid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software development life cycle and engineering practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A light introduction to BDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nature of a HTTP request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developers find HTTP requests are abstracted away from them; indeed, many
    PHP developers will never need to understand how an HTTP request actually works
    under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: PHP developers often work with HTTP networks when developing. Indeed, PHP contains
    some core functions that are great when working with HTTP communication.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at an HTTP request at a high-level using a tool called **curl**.
    The curl is essentially a command-line tool that allows us to simulate network
    requests. It allows you to simulate the transfer of data using various protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of *cURL* originally stood for *see URL*.
  prefs: []
  type: TYPE_NORMAL
- en: The curl projects produce both the `libcurl` and `curl` command line tool. Libcurl
    is a library that PHP supports, allowing you to connect and communicate over a
    list of protocols in PHP, providing your installation has it installed.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, however, we will be using the command-line tool to simulate requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start off by making a simple `curl` request to a given website, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the site you query in the command you will notice that the Terminal
    output is blank:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What's going on here? In order to find out, we need to dig a little further.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `-v` argument in the `curl` command so we see a verbose output
    of what''s going on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This output of this is substantially different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this output we can see the headers that are sent and the headers that are
    received.
  prefs: []
  type: TYPE_NORMAL
- en: 'The block starting with asterisks `*` indicates the connection being established.
    We can see how curl has rebuilt the URL so it is correct (containing a forward
    slash at the end), then resolved the IP address of the server (in my case, an
    IPv6 address), and then finally established the connection to the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The hostname is turned into an IP address by querying the DNS server; we'll
    go into more detail about this later on. But at this point, it is important to
    remember that, after this point, the connection to the server is established using
    an IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to get rid of the forward slash at the end, we can actually see
    that in the first line, rebuilding the URL will disappear, as it will already
    be in the correct format before we even make the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next let's look at the succeeding lines the asterisks. We see the outbound headers
    in the greater than signs `>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These headers look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So the first message we see is the request method `GET`, followed by the endpoint
    `/` and the protocol `HTTP/1.1`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we see the `Host` header, which tells us the domain name of the server
    and can also contain the TCP port number on which the server is listening, but
    this is often amended if the port is standard for the service requested. Why is
    this needed, though? Suppose a server contains many VirtualHosts; this is what
    actually allows the server to determine between VirtualHosts using the header.
    VirtualHosting essentially allows a server to host more than one domain name.
    In order to do this, we need this header; when a server sees a HTTP request coming
    in they won't see the header.
  prefs: []
  type: TYPE_NORMAL
- en: Remember when I said a connection is established using an IP address? This `Host`
    header is what allows us to send through that hostname variable indicating what
    an IP address is.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we see the `User-Agent` header, indicating what browser the client is
    using; our `User-Agent` header in this request indicates we are sending our HTTP
    request using curl command. Remember not to trust any HTTP headers from the client,
    as they can be manipulated to contain whatever data a malicious adversary wants
    to put into them. They can contain everything from a fake browser identifier to
    a SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `Accept` header indicates the `Content-Type` headers that are
    acceptable for the response. Here, we see a wildcard acceptance, indicating we
    are happy to receive whatever the server is sending us. In other cases, we can
    use `Accept: text/plain` to indicate that we want to see plaintext, or `Accept:application/json`
    for JSON. We can even specify if we want to receive a JPG image by using `Accept:
    image/jpg`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various parameters that can also be sent to over an `Accept` header;
    for example, we can request HTML using a UTF-8 charset with Accept: `text/html`;
    `charset=UTF-8`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At a basic level, the syntax that is permissible in this header looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The server can indicate the content type being returned to the user using a
    `Content-Type` header in the response. So the server can send a header back to
    the end user as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving onto the topic of the response, let''s take a look at the response.
    These are prefixed with <:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So the first thing we get in the response indicating the format and the status
    code. HTTP/1.1 indicates that we are receiving a `HTTP/1.1` response, and a `301
    Moved Permanently` message indicates a permanent redirect. Accordingly, we also
    receive a `Location: https://junade.com/ header`, which tells us where to go next.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Server` header indicates the signature of the web server that is supplying
    our request. It could be Apache or Nginx; in this case, it's the modified version
    of Nginx that CloudFlare use for their network.
  prefs: []
  type: TYPE_NORMAL
- en: The Set-Cookie header is used to indicate what cookies the browser should set;
    the standard for this is in a document known as RFC 6265.
  prefs: []
  type: TYPE_NORMAL
- en: '**RFC** stands for **Request for Comments**; there are a number of types of
    RFC. Standards Track RFCs are those intending to become Internet Standards (STDs),
    whereas Informational RFCs can be anything. There are a number of other types
    of RFC, such as Experimental, Best Current Practice, Historic, and even an Unknown
    RFC type for those where the status is unclear if they were to be published today.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Transfer-Encoding` header indicates the encoding used to transfer the entity
    to the user, which could be anything from chunked even to something such as gzip,
    which is a compressed entity.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the `HTTP/2` protocol that was published in RFC 7540 in May 2015
    actually allows header compression. Nowadays, we send more in header data than
    was originally transmitted when the `HTTP/1` protocol was created (the original
    `HTTP` protocol didn't even contain a `Host` header!).
  prefs: []
  type: TYPE_NORMAL
- en: The `Connection` header provides control options for the connection. It allows
    the sender to specify the options that are desired for the current connection.
    Finally, the `Date` header indicates the date and time when the message was sent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this: can an HTTP request/response contain more than one of the same
    header of the name?'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, this is particularly useful in some headers, such as the `Link` header.
    This header is used to perform `HTTP/2` Server Push; Server Push allows the server
    to push requests to the client before they are requested. One asset can be specified
    per header; therefore, multiple headers are needed to push multiple assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is something we can do in PHP. Take the following `header` function call
    in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: While the first argument is the string of the actual header we're sending, the
    second argument (`false`) states that we don't want to replace a previous header
    of the same, instead we want to send this one as well but not replace it. By setting
    this flag to `true` we instead state that we want to override the previous header;
    this is the default option if the flag isn't specified at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, when the request is closed you will see a final asterisk indicating
    the connection was closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Typically, this will become below the body if there is one. In this request,
    there wasn't one as it was merely a redirect.
  prefs: []
  type: TYPE_NORMAL
- en: 'I now make a `curl` request to where that `Location` header is pointing using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now notice that the connection close message came after the end of
    the HTML body:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's now try exploring a few HTTP methods. In REST APIs you will frequently
    use `GET`, `POST`, `PUT`, and `DELETE`; but first we'll start by exploring two
    others, `HEAD` and `OPTIONS`.
  prefs: []
  type: TYPE_NORMAL
- en: An `HTTP OPTIONS` request details which requests methods you can use on a given
    endpoint. It provides information about which communication options are available
    to that particular endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Let me demonstrate this. I'm going to be using a service called `HTTPBin`, which
    allows me to make requests to over curl to get some responses back from a real
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an `OPTIONS` request I''m making using curl:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `-X` option allows us to specify a particular HTTP request type instead
    of just defaulting to curl.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what this looks like once executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Firstly, you'll notice that, given the request is over HTTP, you will see some
    extra information in the asterisk; this information contains the TLS certificate
    information that is used to encrypt the connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`TLS 1.2` indicates the version of transport layer security we''re dealing
    with; the second part, which states `TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`, indicates
    the cipher suite for the connection.'
  prefs: []
  type: TYPE_NORMAL
- en: The cipher suite starts by detailing that we're dealing with `TLS. ECDHE_RSA`
    indicates that the key exchange is done using elliptic curve Diffie-Hellman. The
    key exchange essentially allows the encryption keys to be transmitted securely.
    By using elliptic curve cryptography, a particular key can be shared, which can
    then be used to encrypt data later on. `ECDHE_RSA` means that we use elliptic
    curve Diffie-Hellman to share a key based on an RSA key that the server has gotten.
    There are a number of other key exchange algorithms; for example, `ECDH_ECDSA`
    uses Fixed ECDH with ECDSA-signed certificates.
  prefs: []
  type: TYPE_NORMAL
- en: The access-control prefixed headers are used for a mechanism called CORS, which
    essentially allows JavaScript to make cross-origin API requests; let's not worry
    about this here.
  prefs: []
  type: TYPE_NORMAL
- en: The header we do need to worry about with an `OPTIONS` request is the `Allow`
    header. This details what request methods we're allowed to submit back to that
    particular endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, this is the request we get when we query the `/get` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the endpoint I use here uses the `/get` endpoint. Instead, let''s
    make another `OPTIONS` request to the `/post` endpoint using the following `curl`
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the response we get back:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You'll notice that the `Allow` header now contains `POST` and `OPTIONS`. Also
    note that the `HEAD` option has gone.
  prefs: []
  type: TYPE_NORMAL
- en: You'll soon find out that a `HEAD` request is very similar to a `GET` request
    except without a message body. It merely returns the headers of a HTTP request
    but not the body of a request. Thus, it allows you to get the meta information
    about an entity without needing to get the complete response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a HEAD request to a `/get` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of using the `-v` (verbose) option in this request, I''m using the
    `-I` option, which will merely get the `HTTP` header. This is well suited to making
    an HTTP request using the `HEAD` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we get the type of the response in the `Content-Type` header.
    Alongside this, you'll get the length of the request in the `Content-Length` header.
    The length is measured in octets (8 bits); you might think that is is the same
    as a byte, but a byte is not necessarily 8 bits on all architectures.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of other headers that can be sent to express meta information.
    This may include standard headers or non-standard headers to express other information
    that you can't express in standardized RFC-backed headers.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP ETags** (**entity tags**) are a mechanism that provide cache validation.
    You can use them in the context of RESTful APIs for optimistic concurrency control;
    this basically allows multiple requests to complete without needing to interfere
    with each other. This is quite an advanced API concept, so I won''t go into too
    much detail here.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that in both our `HTTP HEAD` and `OPTIONS` request we both got `200 OK`
    header messages. A `200` status code indicates a successful HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many different types of status code. They are categorized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1xx messages**: Informational'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2xx messages**: Success'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3xx messages**: Redirect'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**4xx messages**: Client Error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5xx messages**: Server Error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An informational header could be a `101` response, which indicates the client
    is switching protocols and the server has agreed to do so. You probably won't
    encounter informational header messages if you're developing RESTful APIs; these
    are most likely things that will be sent by the web server, which is abstracted
    away from you as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Correct use of the other HTTP status codes is vital for correct development
    of a API, particularly one that is RESTful.
  prefs: []
  type: TYPE_NORMAL
- en: Success status codes aren't just limited to a `200 OK` message; 201 Created
    indicates a request has been fulfilled that has created a new resource. This is
    particularly useful when a `PUT` request is made to create a new resource or using
    `POST` to create a subsidiary resource. `202 Accepted` indicates a request has
    been accepted for processing but processing has not been completed, which is useful
    in a distributed system. `204 No Content` indicates the server has processed the
    request and is not returning any information; a `205 Reset Content` header does
    the same but asks the requester to reset their document view. These are just a
    few 200's messages; there are obviously many more.
  prefs: []
  type: TYPE_NORMAL
- en: Redirection messages include `301 Moved Permanently`, which we showed in our
    first `curl` example, whereas `302 Found` can be used for more temporary redirects.
    Again, there are other message codes.
  prefs: []
  type: TYPE_NORMAL
- en: Client error codes include the infamous `404 Not Found` message when a resource
    cannot be found. Alongside this, we have `401 Unauthorized` when authentication
    is required but not provided, `403 Forbidden` is where a server refuses to respond
    to a request at all (for example, incorrect permissions). `405 Method Not Allowed`
    allows us to deny requests on the basis of them being submitted using an invalid
    request method, which is, again, very useful for RESTful APIs. `405 Not Acceptable`
    is a response where the server cannot generate a response in accordance with the
    `Accept` header sent to it. Again, there are numerous other 4xx HTTP codes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTTP code 451 indicates a request is unavailable for legal reasons. The code
    chosen after *Fahrenheit 451*, a novel named after the author claimed 451 Fahrenheit
    was the auto-ignition temperature of paper.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `Server Errors` allow the server to indicate they failed to fulfill
    a request that was apparently valid. These messages included the `500 Internal
    Server Error`, which is a generic error message given when an unexpected condition
    is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now look at making a `GET` request. The `curl`, by default will make
    a `GET` request if we don''t specify any data to send or a particular method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also specify that we want a `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see we get the same headers as we did in the `HEAD` request, with
    the addition of a body; some JSON data of whatever resource we're trying to access.
  prefs: []
  type: TYPE_NORMAL
- en: 'There we get a `200 Success` message, but let''s make a HTTP request to an
    endpoint that doesn''t exist so we can trigger a 404 message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we get a header stating `404 NOT FOUND` instead of our usual
    `200 OK` message.
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTP 404` responses can also come without a body:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While `GET` requests merely show an existing resource, `POST` requests allow
    us to modify and update a resource. `PUT` requests instead allow us to create
    a new resource or override one, but specifically at a given endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: What's the difference? `PUT` is idempotent, while `POST` is not idempotent.
    A `PUT` is like setting a variable, `$x = 3`. You can do it over and over again,
    but the output is the same, `$x` is `3`.
  prefs: []
  type: TYPE_NORMAL
- en: '`POST` is, instead, a lot like running `$x++`; it causes a change that is not
    idempotent, the same way as `$x++` can''t be repeated over and over to give the
    same exact variable. `POST` updates a resource, adds a subsidiary resource, or
    causes a change. `PUT` is instead used when you know the URL you want to create.'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST` can be used to create when you know the URL of the factory that creates
    the resource for you.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, if the endpoint/user wants to generate a user account with
    a unique ID, we would use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'But if we wanted to create a user account at a particular endpoint, we would
    use `PUT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if we want to overwrite `tom` at the given endpoint, we can put
    another `PUT` request there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'But suppose we don''t know Tom''s endpoint; instead, we just want to `PUT`
    to an endpoint with a user ID argument and some information will be updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully that makes sense!
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at a given`HTTP POST` request.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create a request using URL encoded data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note that if we specify data but not a request type in `curl` it will default
    to `POST`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute this, you can see the `Content-Type` is `x-www-form-urlencoded`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, we can also submit JSON data to the endpoint if the API allows us
    to and accepts that format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This provides the following output, noting the `Content-Type` is now JSON instead
    of `x-www-form-urlencoded` form it was before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now make a HTTP request using `PUT` by sending the same data to the
    `/put` endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change the request type over to `PUT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make the same request to a `DELETE` endpoint using the following `curl`
    request (in this example, we will submit data):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This has the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nature of a HTTP request](graphics/image_08_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the real world, you might not necessarily need to submit back any information
    related to the fact we've just deleted a resource (that's what `DELETE` is for).
    Instead, we may simply want to submit a `204 No Content` message. Typically, I
    would not pass a message back.
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTP/2` at a high level maintains this request structure. Remember that most
    `HTTP/2` implementations require TLS (`h2`) and most browsers do not support `HTTP/2`
    over cleartext (`h2c`), even though it is de facto possible in the RFC standard.
    If using `HTTP/2` you realistically need TLS encryption on the request.'
  prefs: []
  type: TYPE_NORMAL
- en: Woo! That was a mouthful, but that is everything you will need to know about
    an HTTP request, at a very high level. We didn't go into network detail, but this
    understanding is necessary for API architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good understanding of HTTP requests and the methods used
    in HTTP communication, we can move on to understanding what makes an API RESTful.
  prefs: []
  type: TYPE_NORMAL
- en: RESTful API design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developers use and build REST APIs without understanding what makes them
    RESTful. So what actually is *REpresentational State Transfer*? Moreover, why
    is it important that an API is *RESTful*?
  prefs: []
  type: TYPE_NORMAL
- en: There are some key architectural constraints to an API being RESTful, the first
    of these is being stateless in nature.
  prefs: []
  type: TYPE_NORMAL
- en: Stateless nature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RESTful APIs are stateless; the client's context is not stored on the server
    between requests.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you create a basic PHP app that has login functionality. After validating
    the user credentials that are put into the login form, you may then go ahead and
    use a session to store a state of the logged in user as they proceed to their
    next state to carry out the next task.
  prefs: []
  type: TYPE_NORMAL
- en: This is unacceptable when it comes to a REST API; REST is a stateless protocol.
    The *ST* in REST stand for *State Transfer*; the state of a request should be
    transferred around rather than merely stored on the server. By transferring sessions
    instead of storing them you avoid having *sticky sessions* or *session affinity*.
  prefs: []
  type: TYPE_NORMAL
- en: In order for this to be implemented well the HTTP request happens in total isolation.
    Everything the server needs to carry out a `GET`, `POST`, `PUT`, or `DELETE` request
    is in the HTTP request itself. The server never relies on information from a previous
    request.
  prefs: []
  type: TYPE_NORMAL
- en: What are the benefits of doing this? Well, firstly it scales so much better;
    the most obvious benefit is that you don't need to store sessions on the server
    at all. This comes with additional functionalities too, when you put your API
    webservers behind a load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering is difficult; clustering a web server with states either means you
    need to have sticky load balancing or you need to have a common store when it
    comes to sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Version your API, you will need to make changes and you don't want them breaking
    your client implementations. This can be done either using headers or in a URL
    itself. For example instead of `/api/resource.json`, you can have space for a
    version tag such as `/api/v1/resource.json`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also implement the `HTTP Accept` header to perform this behavior or
    even put in place your own header. The client could send a request with the `API-Version`
    header set to `2` and the server will know to communicate to the client using
    version 2 of the API.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a parameter query, we can filter a given by using a parameter. If we're
    dealing with an ordering system on the `/orders` endpoint, it is fairly easy to
    implement basic filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we filter for open orders using the `state` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also add a `sort` parameter to sort by field. The `sort` field in turn
    contains a list of comma separated columns to sort on; the first in the list is
    the highest sort priority. In order to negatively sort you prefix a column with
    a negative sign `-`
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /tickets?sort=-amount`: sort orders by descending order of amount (highest
    first).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /tickets?sort=-amount,created_at`: sort orders by descending order of
    amount (highest first). Within those amounts (with orders of equal amounts), older
    orders are listed first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can then search using a simple parameter that applies a search query that
    can then be routed through a search service (for example, ElasticSearch).
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to search orders for the phrase refund, we can define a field
    for search queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Limiting fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Additionally, using a `fields` parameter we can query for specific fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Returning new fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `PUT`, `POST`, or `PATCH` can change other criteria than the fields we update.
    This might be new timestamps or newly generated IDs. Accordingly, we should return
    the new resource representation on update.
  prefs: []
  type: TYPE_NORMAL
- en: In a `POST` request that has created a resource, you can send an `HTTP 201 CREATED`
    message back, alongside a `Location` header that points to the resource.
  prefs: []
  type: TYPE_NORMAL
- en: When in doubt – KISS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**KISS** is an acronym for **Keep it simple, stupid**.'
  prefs: []
  type: TYPE_NORMAL
- en: The KISS principle states that most systems work best if they are kept simple
    rather than complicated. Throughout your programming journey, it is vital that
    this principle in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding to write a program with some predefined design patterns is often a
    poor idea. Code should never be forced into patterns. While writing code for a
    design pattern may work for a *Hello World* demonstration pattern, it doesn't
    usually work well the other way around.
  prefs: []
  type: TYPE_NORMAL
- en: Design patterns exist to resolve common recurring problems in code. It is vital
    they are used to address problems and not implemented where no such problems actually
    exist. By keeping your code as simple as possible and reducing the complexity
    of the overall program you are able to reduce the chance of failure.
  prefs: []
  type: TYPE_NORMAL
- en: The British Computer Society has published advice called *Senior Management
    in IT Projects* demonstrating that it is vital that the project, people, benefit,
    complexity, and progress are all thoroughly understood; beyond this, it is vital
    the project is fully understood upfront. Why is the project being completed? What
    are the risks? What is the recovery mechanism should the project derail?
  prefs: []
  type: TYPE_NORMAL
- en: Complex systems must handle errors gracefully to be robust. Redundancy must
    be balanced with complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Software development life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chart is an open source diagram that describes the steps of software development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software development life cycle](graphics/image_08_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are many different types of process to produce software, but all must
    contain the steps shown in the chart as they are fundamental to the software engineering
    process.
  prefs: []
  type: TYPE_NORMAL
- en: While nowadays it almost universally agreed that waterfall software engineering
    methodologies are no longer fit for purpose, the Agile counterparts that replace
    it still require some design (albeit smaller and more iterative) alongside strong
    testing practices.
  prefs: []
  type: TYPE_NORMAL
- en: It is vital that software development is not seen through a microscope and it's
    seen in the broader vision of software engineering.
  prefs: []
  type: TYPE_NORMAL
- en: On Scrum, and real Agility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Scrum is an iterative software development framework that claims to be Agile,
    based on the process published by the Scrum Alliance. It is graphed out as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![On Scrum, and real Agility](graphics/image_08_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Many of us see the disasters left by the Certified Scrum Masters within software
    development teams, who largely use Agile as a buzzword to deliver some simply
    inane processes for writing software.
  prefs: []
  type: TYPE_NORMAL
- en: The Agile manifesto starts with the words, *individuals and interactions over
    processes and tools*. Scrum is a process, and a tightly defined process at that.
    Scrum is often implemented in a way where the development process is emphasized
    over the team. If there is one takeaway from this section, remember the phrase
    *people over processes*. If you choose to implement Scrum, you must be willing
    to adapt and change its processes to cope with change.
  prefs: []
  type: TYPE_NORMAL
- en: The whole point of Agile is to be agile; we want to adapt to changing requirements
    rapidly. We want flexibility, we don't want a tightly defined process that restricts
    us from adapting to rapidly changing requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Filling in a time sheet, a purchase order, and dealing with bureaucratic governance
    processes do not help put software in customers' hands, so it has to be made as
    light as possible if it cannot go.
  prefs: []
  type: TYPE_NORMAL
- en: Time sheets are the perfect idea of something that is entirely wasteful. They
    are simply used to monitor developer performance, though in some those in management
    will pretend they have some magical agile benefit. They certainly will not help
    you make better software estimations, in any regard; Agile environments should
    seek to use projections over predictions.
  prefs: []
  type: TYPE_NORMAL
- en: I've seen Scrum Masters who endlessly repeat the quote: *no battle plan ever
    survives contact with the enemy*; while simultaneously enforcing rigid prediction
    schemes.
  prefs: []
  type: TYPE_NORMAL
- en: Accurate predictions are an oxymoron in the real world. You can't predict accurately
    for things that aren't certain, and in almost all cases, developers won't know
    the systems they are dealing with fully enough. Moreover, they don't know their
    own personal efficiency from day to day; it just can't be foreseen accurately.
  prefs: []
  type: TYPE_NORMAL
- en: I've even encountered environments where these strict predictions (often not
    even made by the developers themselves) are enforced by strict disciplinary procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing complexity by dividing problems and addressing them in small chunks
    is great practice; reducing your huge teams of programmers into smaller teams
    is also amazing practice.
  prefs: []
  type: TYPE_NORMAL
- en: Between the systems that developers are building in these small teams (commonly
    known as *tribes*), a system architect is often needed to ensure there is consistency
    between the teams.
  prefs: []
  type: TYPE_NORMAL
- en: Spotify use this tribe architecture to develop software; indeed, I would highly
    recommend reading the paper *Scaling Agile @ Spotify with Tribes, Squads*, *Chapters
    & Guilds* by Henrik Kniberg and Anders Ivarsson.
  prefs: []
  type: TYPE_NORMAL
- en: This system architect ensures there is consistency between all the different
    services that are built.
  prefs: []
  type: TYPE_NORMAL
- en: Turning to specifically Scrum, Scrum is an Agile process. The Scrum Guide (yes,
    it is even a trademark) defines the rules of Scrum in a 16-page document.
  prefs: []
  type: TYPE_NORMAL
- en: Agile, however, contains many different processes alongside many other methodologies;
    Agile is a very broad knowledge base.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum Masters like to pretend Agile happens in an isolated environment in a
    development team. This is far from the truth; the entire organization structure
    plays into Scrum.
  prefs: []
  type: TYPE_NORMAL
- en: '**Extreme Programming** (**XP**) is a very broad process and it is largely
    understood the interactions between these processes. By cherry-picking these processes,
    you end up with an ineffective process; this is why Scrum struggles.'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements change; this includes them changing mid-Sprint. When Scrum Masters
    insist on no changes after a Sprint has started, which leaves the team more ineffective
    to respond to real change.
  prefs: []
  type: TYPE_NORMAL
- en: When developing in an Agile mechanism, we must remember that our software must
    be resilient enough to cope with the ever-changing requirements (resulting in
    ever-changing software design). Your software architecture must be able to cope
    with the stress of change. It is therefore vital that developers also understand
    and engage with the technical processes required to achieve software resilient
    enough to cope with the pace of change.
  prefs: []
  type: TYPE_NORMAL
- en: Companies that can't be flexible and respond to change are less effective than
    those who can; accordingly, they have a significant edge in the business world.
    When picking a company, them being Agile is not merely about the quality of the
    job you do but it is also vital to your job security.
  prefs: []
  type: TYPE_NORMAL
- en: My message is simple here; take technical practices seriously when implementing
    a process, and remember not to blindly follow obscene processes as it can harm
    an entire business.
  prefs: []
  type: TYPE_NORMAL
- en: Developers shouldn't be treated like children. If they can't code or write bad
    code they can't continue to be employed as developers.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, in order to manage risk, it's best to look at your backlog and use
    historical progress to create projections as to where your project will be. The
    role of the manager should be to take away obstacles that stop developers doing
    their jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you ever are in a team with a Scrum Master with a terrible understanding
    of software development (and Agile for that matter), remind them strongly that
    people must come above process and that true agility is aided by code that can
    withstand the stresses of change.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum Masters will sometimes will argue that Agile means no upfront design.
    This is untrue, Agile means no *big* upfront design.
  prefs: []
  type: TYPE_NORMAL
- en: You need to sack people sometimes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have worked in development environments where managers are too scared to sack,
    they either just torture developers by punishing them for a job they evidently
    can't do by trying to put perverse restrictions on development teams or let them
    wreak havoc on the development processes.
  prefs: []
  type: TYPE_NORMAL
- en: Talented developers get disillusioned by the production of bad code or the unequal
    skill-basis. Other developers get away with poor code when they are often forced
    into a maintenance nightmare. Faced with the prospect of a maintenance nightmare
    (or in all likelihood, an increasing maintenance nightmare), they then resign.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the restrictive work conditions imposed to compensate for bad
    developers disillusion talented developers. Sick of being treated like idiots
    (because the other developers are idiots), they then take a job offer at a far
    better firm that offers them far better career prospects, and a better working
    environment with happier, more talented staff. They accept this offer as the company
    they are moving to will probably also have better business prospects and better
    compensation alongside happier engineers in a better work environment.
  prefs: []
  type: TYPE_NORMAL
- en: There is one more extreme to this scenario; the business gains such an adverse
    reputation they cannot hire permanent developers; they then pay exorbitant fees
    for expensive contract developers while taking chances on their skillsets. While
    hemorrhaging money on contract developers, the business out of desperation will
    then probably pick up anyone who is willing to work on these projects. Interviewers
    of these developers will probably have not asked the right questions for the systems
    they will be building, leading to a big gamble on the quality of contractors being
    hired. The company decreases its chances of hiring good permanent staff, and the
    business enters tailspin as the company's demise gets worse. I have seen this
    exact scenario multiple times; each time the company has faced a slow and painful
    recession. If you are ever invited to work for a company which is similar to this,
    I strongly advise you to look elsewhere, unless you truly believe you are able
    to bring reform to such an organization.
  prefs: []
  type: TYPE_NORMAL
- en: If you ever take a management job in an organization such as this, ensure you
    have the powers to make meaningful change, the powers to hire the right people
    and fire the wrong people. If not, your tenure at such an organization will merely
    be spent trying to shift the deckchairs while suffering from a high staff churn
    rate.
  prefs: []
  type: TYPE_NORMAL
- en: Talented staff can be trusted; those passionate about what they are doing will
    not need restrictions to prevent them from slacking off.
  prefs: []
  type: TYPE_NORMAL
- en: If there are talented staff who can't perform their duties, it is highly unlikely
    your developers are merely slackers; you need to remove the bureaucratic processes
    that are restrictions to development.
  prefs: []
  type: TYPE_NORMAL
- en: Compulsively performing rituals that add nothing to putting software in users'
    hands adds nothing of value to the development team.
  prefs: []
  type: TYPE_NORMAL
- en: Lean project management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lean project management allows you to regularly deliver business value without
    being based on lists of requirements, features, and functions.
  prefs: []
  type: TYPE_NORMAL
- en: The book *The Machine That Changed the World* was based on the Massachusetts
    Institute of Technology's $5 million 5-year study on the automotive industry,
    making the term lean production world famous.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book proposed the following principles of lean:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify customers and specify values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify and map the value stream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create flow by eliminating waste
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respond to customer pull
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persue perfection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From this, there are the following Lean Principles when it comes to software
    development, which are largely based on the manufacturing principles of lean production:'
  prefs: []
  type: TYPE_NORMAL
- en: Eliminate waste
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amplify learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decide as late as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliver as fast as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empower the team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build integrity in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the whole
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good architecture through reusable components, automated deployments, and good
    architecture can all assist in attaining this goal.
  prefs: []
  type: TYPE_NORMAL
- en: YAGNI and defering decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*You aren''t going to need it* – you don''t need to add functionality until
    it''s necessary. Only add things that are vital to the success of your project.
    You probably won''t need a lot of functionality for the first version of your
    web app; it''s best to defer this until necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: By deferring unnecessary functionality, you are able to keep your software design
    as simple as it needs to be. This helps you cope with the pace of change. Later
    in the software development process you will be more educated regarding the requirements,
    and more importantly, your client will have a more precise projection as to where
    they want the product to head.
  prefs: []
  type: TYPE_NORMAL
- en: When you make decisions on software later, you have more data and more education.
    Some decisions have to be made upfront, but if you can defer them, that's often
    a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring systems become critical as you scale. Effective monitoring can drastically
    ease the maintenance of services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having spoken to multiple experts in this field, this is the advice I have
    collected on the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose your key statistics carefully. Users don't care if your machine is low
    on CPU but they do care if your API is slow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use aggregators; think about services, not machines. If you have more than a
    handful of machines, you should treat them as an amorphous blob.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid the Wall of Graphs. They are slow and it's information overload for a
    human. Each dashboard should have five graphs with no more than five lines per
    graphs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantiles aren't aggregable, they're hard to get meaningful information from.
    However, averages are easy to reason. A response time of 10 ms in the first quartile
    isn't really useful as information, but a 400 ms average response time shows a
    clear problem that needs to be addressed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to this, averages are far easier to calculate than quantiles. They
    are computationally easy, and especially useful as soon as you need scale the
    monitoring system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring has a cost. Consider whether the resources are really worth it. Is
    a 1 second monitoring frequency really better than 10 second monitoring? Is the
    cost worth it? Monitoring isn't free, it has a computational cost.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That said, the Nyquist-Shannon sampling theorem demonstrates that if you sample
    every 20 seconds you can't reconstruct patterns at 10 seconds apart. Let's suppose
    there is a service that is crashing or reducing the speed of your computer system
    every 10 seconds - it can't be detected. Bear this in mind throughout your data
    analysis process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correlation not causation - beware of conformation bias. Be sure to achieve
    a formal relationship of what is causing a particular issue before doing anything
    drastic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both logs and metrics are good. Logs let you figure out details, metrics give
    you the high level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a way to deal with non-critical alerts. What do you do with all those 404
    errors in your web server log files?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember the KISS principle mentioned earlier; keep your monitoring as simple
    as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests fight legacy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automated tests are the best tool to fight legacy code.
  prefs: []
  type: TYPE_NORMAL
- en: By having automated tests such as unit tests or behavioral tests, you are able
    to refactor legacy code effectively with confidence that little can be broken.
  prefs: []
  type: TYPE_NORMAL
- en: Badly written systems often consist of tightly coupled functions. One change
    to a function in one class may well break a function in a completely different
    class, leading to a domino effect of more classes being broken until the entire
    application is broken.
  prefs: []
  type: TYPE_NORMAL
- en: In order to decouple classes and follow practices such as the Single Responsibility
    Principle, refactoring must be carried out. Any refactoring effort must be sure
    not to break code elsewhere in an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us onto the topic of test coverage: is it a truly meaningful figure?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alberto Savoia answered this question best in an amusing anecdote he placed
    online on artima.com; let''s take a read:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Early one morning, a programmer asked the great master: "I am ready to write
    some unit tests. What code coverage should I aim for?"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The great master replied: "Don''t worry about coverage, just write some good
    tests."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The programmer smiled, bowed, and left.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*...*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Later that day, a second programmer asked the same question. The great master
    pointed at a pot of boiling water and said: "How many grains of rice should I
    put in that pot?"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The programmer, looking puzzled, replied: "How can I possibly tell you? It
    depends on how many people you need to feed, how hungry they are, what other food
    you are serving, how much rice you have available, and so on."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Exactly," said the great master.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The second programmer smiled, bowed, and left.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*...*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Toward the end of the day, a third programmer came and asked the same question
    about code coverage.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Eighty percent and no less!" Replied the master in a stern voice, pounding
    his fist on the table.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The third programmer smiled, bowed, and left.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*...*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*After this last reply, a young apprentice approached the great master:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Great master, today I overheard you answer the same question about code coverage
    with three different answers. Why?"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The great master stood up from his chair: "Come get some fresh tea with me
    and let''s talk about it."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*After they filled their cups with smoking hot green tea, the great master
    began to answer: "The first programmer is new and just getting started with testing.
    Right now he has a lot of code and no tests. He has a long way to go; focusing
    on code coverage at this time would be depressing and quite useless. He''s better
    off just getting used to writing and running some tests. He can worry about coverage
    later."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The second programmer, on the other hand, is quite experienced both at programming
    and testing. When I replied by asking her how many grains of rice I should put
    in a pot, I helped her realize that the amount of testing necessary depends on
    a number of factors, and she knows those factors better than I do - it''s her
    code after all. There is no single, simple, answer, and she''s smart enough to
    handle the truth and work with that."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*"I see," said the young apprentice, "but if there is no single simple answer,
    then why did you answer the third programmer ''Eighty percent and no less''?"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The great master laughed so hard and loud that his belly, evidence that he
    drank more than just green tea, flopped up and down.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The third programmer wants only simple answers - even when there are no simple
    answers ... and then does not follow them anyway."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*The young apprentice and the grizzled great master finished drinking their
    tea in contemplative silence.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Alberto is portraying a simple message: focusing on having as much business
    logic and functionality is the best way forward. Test coverage is not something
    you should follow an arbitrary figure for.'
  prefs: []
  type: TYPE_NORMAL
- en: There are things which it makes sense not to test, and there are different logical
    paths even of code that has already been tested.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, in distributed systems the communication between APIs or systems can
    be what breaks the system. In distributed architectures, testing code may not
    be enough. Strong monitoring systems become vital. Infrastructure as code to ensure
    consistent deployments and upgrades comes to the foreground. Moreover, achieving
    loosely coupled services and proper inter-process communication is more beneficial
    to the overall architecture than some unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: There is an alternative approach to Test-Driven Development (TDD). Behavior-Driven
    Development (BDD) provides us a different mechanism of testing our code; let's
    discuss it.
  prefs: []
  type: TYPE_NORMAL
- en: Behavior-Driven Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BDD works by implementing tests using human-readable stories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cucumber is a tool that implements a BDD workflow by using human-readable feature
    files written in plain English language, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, this section is going to be an incredibly simple exploration of Behat to
    pique your curiosity. If you want to learn more, please head to [http://www.behat.org](http://www.behat.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Behat guide contains an example of a user story for the `ls` command. It''s
    quite a respectable example, so here it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to install Behat, you can amend your `composer.json` file so that
    it is required in your development environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This will install Behat version 2.5, there is also Behat version 3, which contains
    a whole suite of new features without losing too much backward compatibility.
    That said, many projects out there are still utilizing Behat 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you can run Behat using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Behavior-Driven Development](graphics/image_08_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By using the `init` flag we can then create a features directory with some
    basic information to get us started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Behavior-Driven Development](graphics/image_08_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Accordingly, let''s write our `feature/ls.feature` file with the following
    feature and scenario, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Behavior-Driven Development](graphics/image_08_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we now run Behat we''ll find the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Behavior-Driven Development](graphics/image_08_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Behat accordingly returns some code snippets so we can implement the undefined
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the feature directory that was created for us is a bootstrap folder
    that contains a `FeatureContext.php` file. Within this file, you will be able
    to find the body of your class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Behavior-Driven Development](graphics/image_08_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You may have noticed this block in the class body. We can put the generated
    methods here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve done this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Behavior-Driven Development](graphics/image_08_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You may notice the body is full of `PendingException` messages. We need to
    replace these bodies with the actual functionality; fortunately, the Behat documentation
    contains functions with these methods populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run Behat and we should see our scenario and its various steps completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Behavior-Driven Development](graphics/image_08_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By using Mink with Behat we are able to accordingly use Selenium to run browser
    tests. Selenium will spin up a browser using Mink and we can then run Behat tests
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I've sought to tie up some loose ends. We've discussed some
    of the networking side of web development by learning about HTTP. In addition
    to this, we've learned about how RESTful APIs can be effectively designed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is now coming to an end; let''s revisit some core values that make
    our code great:'
  prefs: []
  type: TYPE_NORMAL
- en: Favor composition over inheritance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid repetitive coding (the DRY principle means Don't Repeat Yourself)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep It Simple, Stupid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't use design patterns just for using design patterns, introduce design patterns
    when you identify a recurring issue that they can solve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstraction is awesome, interfaces help you abstract
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code in line with good standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate responsibilities throughout your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use dependency management and dependency injection; Composer is now available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests save development time; they are critical for any refactoring effort and
    reduce breakages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thank you for making it through this book; this book is a collection of my rants
    about software development; having had an incredibly diverse career, there are
    many lessons I have learned brutally and lot of eyesore code I have had to refactor.
    I have seen some of the worst, but also been a part of some of the most exciting
    PHP projects around. I hope in this book I have been able to share some of my
    experiences in this field.
  prefs: []
  type: TYPE_NORMAL
- en: It is easy for developers to hide themselves away from the reality of development;
    there are few people who know best practices when it comes to software design
    and architecture, and a very limited set of those choose PHP as their development
    language of choice.
  prefs: []
  type: TYPE_NORMAL
- en: For many of us, the code we produce is more than a hobby or a job, it is the
    limit of our expression as software engineers. Accordingly, writing it in a poetic,
    expressive, and a lasting fashion is our duty.
  prefs: []
  type: TYPE_NORMAL
- en: Think about the code you would love to maintain; that is the code you have a
    duty to produce. Minimalism, reducing complexity, and separating concerns are
    key to achieving this.
  prefs: []
  type: TYPE_NORMAL
- en: Computer science may be grounded in mathematics and theorems, but our code sits
    above this. By utilizing the basis of a Turing complete language we are able to
    write code that is creative and functional.
  prefs: []
  type: TYPE_NORMAL
- en: This locates software engineering in an odd vacuum compared to many other disciplines;
    while being very metricized, it also must be appealing to humans. I hope this
    book has helped you achieve these ends.
  prefs: []
  type: TYPE_NORMAL
