- en: 'Chapter 4: Managing Azure'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 2*, *Getting Started with the Azure Cloud*, we took our first steps
    on a journey into the world of Azure. We discovered that there are many ways to
    manage an Azure environment and that these include the Azure portal and command-line
    interfaces. You can use the command-line interfaces within the Azure portal to
    run them on your workstation. Later in this book, we'll see that there are other
    great possibilities using automation and orchestration solutions. At the end of
    *Chapter 3*, *Basic Linux Administration*, we created a Linux VM and explored
    the basics of the Linux environment.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue our journey, covering more advanced topics, this chapter
    covers components of the Azure infrastructure that are needed for our workloads,
    VMs, and containers. We discussed the filesystem in Linux, but how will we add
    more data disks to the VM? As a system administrator, you might need to allow
    or deny traffic to your VM based on your business requirements, but how this can
    be done in Azure? There will be scenarios where you need to have multiple network
    interfaces attached to the VM. How will you accomplish that? This section will
    answer all your questions on how to manage Azure resources that are related to
    your VM. We're talking about components that we've already used in previous chapters,
    sometimes even without knowing that we did.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, this chapter is about Azure resources. And, remember, they are all
    part of a resource group, a logical container into which resources are deployed
    and managed. The following are some of the key takeaways from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing storage resources in Azure and different storage options available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing networking resources in Azure and understanding their role in VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using handy commands in PowerShell and the Azure CLI to manage resources in Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this book, we try to be as agnostic as possible regarding the available interfaces.
    Because this chapter is more about the theory than the interfaces, we'll use PowerShell
    as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Azure Resources Using the Azure CLI and PowerShell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we will see how we can manage Azure resources using PowerShell
    and the Azure CLI. Every task that we are going to do here can also be done from
    the Azure portal. However, as a system administrator who is performing day-to-day
    tasks from the terminal, you should be able to manage your resources using the
    CLI or PowerShell. Almost every command in this chapter is written in PowerShell;
    however, at the end of this chapter, you will find the Azure CLI equivalent command
    for every command in PowerShell. The list of commands is way too long, so it's
    better to refer to the official Microsoft documentation or use the respective
    help commands.
  prefs: []
  type: TYPE_NORMAL
- en: In some instances, even in upcoming chapters, we will use the Azure portal.
    This is to simplify the process and to get you all introduced to an alternate
    method. You can use the portal if you prefer, but when it comes to automating
    tasks and orchestrating deployment, the CLI or PowerShell experience is a prerequisite.
    So, we would encourage you all to follow the PowerShell commands in this chapter
    and invest your time in testing the equivalent commands using the Azure CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some of the technical requirements to complete the tasks in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this chapter, basic knowledge of storage and networking is required. In
    the *Further reading* section, you can find some suggestions to prepare yourself.
  prefs: []
  type: TYPE_NORMAL
- en: It's not necessary, but it's a good idea to have at least one VM up and running.
    This way, you will not only be able to create new resources in this chapter but
    also look at the properties of an existing VM. In this section, we will create
    an Ubuntu VM named `ubuntu01` in the `chapter4` resource group for the examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the variables for the resource group and the location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For now, the parameters used in this example are not important; at the end of
    this chapter, you'll be able to understand them all.
  prefs: []
  type: TYPE_NORMAL
- en: Not a real requirement, but nice to have, is the Azure Storage Explorer utility,
    which is available for free at [https://azure.microsoft.com/en-us/features/storage-explorer](https://azure.microsoft.com/en-us/features/storage-explorer).
    This is a standalone utility to install on your workstation. This utility will
    help you upload, download, and manage Azure blobs, files, queues, and tables.
    It also supports Azure Cosmos DB and Azure Data Lake. Another advantage is you
    can access the disks attached to VMs. Storage Explorer is also available as an
    option in the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Storage Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft''s cloud solution for handling data storage is Azure Storage. Azure
    Storage offers high availability, security, scalability, and accessibility. In
    Azure, we have different types of data or storage services. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Blobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at each of these and understand what they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Blobs**: Optimized objects for storing massive amounts of unstructured
    data, such as text or binary data. They''re often used to make data available
    to other resources, for instance, to store VHD files that can be used to create
    virtual disks. Another use case is to use them as storage for audio and video
    files. Making a blob publicly accessible, it''s even possible to stream data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Files**: Azure Files are file shares hosted in Azure that can be accessed
    via **Server Message Block** (**SMB**) and can be mounted to your local computer.
    You might wonder how these are different from normal file shares. The added advantage
    here is that the URL that will be generated will include a **shared access signature**
    (**SAS**) and the file share will be able to be accessed from anywhere in the
    world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Queue**: Used for passing messages from one resource to another, especially
    for serverless services such as Azure Web Apps and Functions. It can also be used
    to create a backlog of work to process asynchronously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Table**: This is for the Azure Cosmos DB service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Disk**: This is for managed disk storage and unmanaged disks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will only cover Blob storage, Azure Files, and disk storage,
    because Queue and Table storage are for specific solutions that are only important
    for application developers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have an enormous amount of data you want to store in the cloud, uploading
    can take too much time. Microsoft has a service called Azure Data Box Disk. It
    lets you send encrypted SSDs to your datacenter, copy the data, and send it back.
    For more information, visit [https://docs.microsoft.com/en-gb/azure/databox/data-box-disk-overview](https://docs.microsoft.com/en-gb/azure/databox/data-box-disk-overview).
  prefs: []
  type: TYPE_NORMAL
- en: Storage Accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A storage account provides a namespace that is unique across Azure to contain
    storage objects such as blobs, files, tables, queues, and so on. An account is
    needed to access the storage. It also defines the type of storage that is being
    used.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three different kinds of storage accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Storage**: This old type of deprecated storage account doesn''t support all
    features (for instance, there is no archive option). It''s often more expensive
    than the newer V2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**StorageV2**: This is a newer type of storage account. It supports all types
    of storage and the latest features for blobs, files, queues, and tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BlobStorage**: This has not been deprecated yet, but there is no reason to
    use it any longer. The biggest problem with this account type is that you can''t
    store files such as VHDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You don't need to create a storage account for managed disks. However, if you
    want to store VM boot diagnostic data, you'll need one. A boot diagnostic account
    is very useful if your VMs go to non-bootable state. The logs stored in this account
    can be used to find the root cause for the non-booting state of the VM. For testing,
    this is not a mandatory option, but for production workloads it is recommended
    to enable boot diagnostics, which will help you to understand what went wrong
    during a failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another property is the SKU, as covered in *Chapter 2, Getting Started with
    the Azure Cloud*. It specifies what type of replication applies to the storage
    account. Here are the available types and, if you recall, we''ve already discussed
    what they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard_LRS**: Locally redundant storage accounts storage accounts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium_LRS**: The same as LRS but supports FileStorage and BlockBlobStorage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard_GRS**: Geo-redundant storage accounts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard_RAGRS**: Read-access geo-redundant storage accounts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard_ZRS**: Zone-redundant storage accounts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last important property is the access tier; it specifies the optimization
    of the storage. There are three types available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hot storage tier**: Data that needs to be accessed frequently will be stored
    in the hot tier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cool storage tier**: Data that is accessed infrequently and is stored for
    at least 30 days.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Archive storage tier**: Data that is rarely accessed and is stored for a
    period of at least 180 days with flexible latency requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting an object-level access tier is only supported for Standard LRS, GRS,
    RA-GRS BlobStorage, and General Purpose V2 accounts. **General Purpose V1** (**GPv1**)
    accounts don't support tiering.
  prefs: []
  type: TYPE_NORMAL
- en: The choice made for the access tier also affects the cost; for instance, archive
    storage offers the lowest storage costs but also the highest access costs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The storage account name must be between three and 24 characters in length
    and must use only numbers and lowercase letters. Storage account names must be
    unique in Azure. Microsoft suggests using a globally unique name and a random
    number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a storage account with redundancy as Standard_LRS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the available storage accounts in your subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![To check the available storage accounts, its name and location.](img/B15455_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Available storage accounts'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the screenshot, you can see that there are three storage accounts available
    in three different regions for this subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'Storage accounts are protected by keys. You''ll need the key if you want access
    to a storage account. A set of two keys are automatically created during the creation
    of an account. If you are still in the same session as when you created the account,
    you can receive the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, the `chapter42298` storage account available in
    the `$MyRG` resource group has a set of protected keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '![To fetch protected keys for chapter 42298 storage account that is present
    in $MyRG resource group.](img/B15455_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Fetching keys for chapter42298 storage account'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Managed Disks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Earlier, when we deployed a VM, we needed to create a storage account where
    we could save the **virtual hard disk** (**VHD**) of the VM. Later, Microsoft
    introduced **Managed Disks** where we can simply create a disk and Microsoft takes
    care of the underlying storage account. On top of that, customers get added advantages
    such as easy resizing, more encryption options, and better performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a VM with a managed disk, two disks will be attached to the
    VM: an OS disk and a temporary disk. All the disks are in VHD format. The data
    stored on the temporary disk will be cleared when you restart the VM, so Microsoft
    doesn''t recommend storing important data on the temporary disk as it is not persistent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also add extra managed data disks. First, create the disk configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how to create a sample disk configuration with a size of 5 GB and
    redundancy as Standard_LRS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can create the actual disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, here''s an implementation of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'By executing the `$Disk01` command, you''ll see the newly created disk. In
    the following screenshot, the output is limited to make it more readable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new disk using $Disk01 command](img/B15455_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Output of the $Disk01 command'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The next step is to attach the managed datadisk. To do this, we''ll need the
    disk ID. So, we''ll run the following command using the disk name to find the
    ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the data disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A **Logical Unit Number** (**LUN**) is a number used to identify the storage
    in the VM. You can start numbering at zero. Finally, update the VM settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now add the data disk to the VM. To summarize with a complete example,
    first you''ll need all the properties of the VM. To get the properties of the
    VM, we will use the following command and save the properties to a variable, `$myVM`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The next command is to add the disk that was created earlier on to the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will show you the configured properties of the VM, as
    shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The configured properties of the VM, by adding the disk created on the VM.](img/B15455_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Adding the created disk on the VM'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see from the output, the information is added to the `StorageProfile`,
    but the change is not active yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it active, use `Update-AzVM`. The output should give you the `StatusCode`
    as `OK`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, `IsSuccessStatusCode` is telling
    you that the request was received. `StatusCode` is the result of the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![To make the StorageProfile active, update StatusCode using Update-AzVM command.](img/B15455_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: Using the Update-AzVM command to update the StatusCode'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Verify the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, even better, instead of reusing the variables, just query all the information
    in this one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the name, size, and LUN:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The output representing the name, size, and LUN of Disk StorageProfile.](img/B15455_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: Disk storage profile'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Azure Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of adding data disks to a VM, you can use **Azure Files**. If you recall,
    we discussed Azure Files at the very beginning of this chapter and mentioned that
    it's different from a normal file share. Azure Files is a fully managed file shares
    in the cloud, which can be accessed via **Server Message Block** (**SMB**), and
    this can be mounted to Linux, Windows, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Files needs a storage account and supports Standard_LRS, Standard_ZRS,
    Standard_GRS, and Standard_ZRS (only on selected regions) SKU types. There are
    no premium storage or other access tiers than the standard (hot) available. (At
    the time of writing this book, sources at Microsoft state that there is no timeline
    available for the introduction of these features.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that you will really require the SMB 3.0 protocol for performance
    reasons. This means that you need a recent Linux distribution such as one of these
    listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: RHEL-based distributions 7.5 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu 16.04 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debian 9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SUSE SLE 12 SP3 / OpenSUSE LEAP 42.3 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You also need to force version 3 with the mount option: **vers=3.0**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step involves creating the Azure Files share:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For the storage account context, you can use the variable that was used to
    create the storage account or create the variable again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s implement this and create a new file share:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the value of `$myShare01`. The output clearly shows you the URL
    of the storage, when you created it, and whether snapshots are available or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The URL of the storage displaying the values of myShare01](img/B15455_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: Output of myShare01'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To review the properties of the created share, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, it will give you the same output
    with a little bit more information, which is not important at all for our purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The properties of the created share with more details](img/B15455_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: Properties of the created share'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In Linux, you can mount the file share manually with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Please note that we're not using the HTTPS scheme because CIFS is not using
    URIs. Azure will take care of the mapping between the different schemes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and mount the file share. Your password and storage file share
    will be different from the example as the name is unique across Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can use the connect option in the Azure portal ([https://portal.azure.com/](https://portal.azure.com/))
    for the file share and Azure will generate the commands for mounting the share
    to Linux as well as Windows and macOS systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see that upon clicking `Connect`, Azure
    generates the code to connect the file share to the Linux system. You can copy
    this code and paste this to your Linux system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure generates the code to connect the file share to the Linux system on
    the click of Connect tab](img/B15455_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.9: Connecting the file share to the Linux system'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'More information about Azure Files about mounting shares is available in *Chapter
    5, Advanced Linux Administration*, in the *Mounting Remote Filesystems* section.
    The following is an example of a mount unit for Azure Files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `/root/.staffs` file contains the following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Another great way to verify the share and manage the content is with Azure
    Storage Explorer. Start Azure Storage Explorer on your workstation and connect
    your Azure account. If you don''t want to add the entire account, you also have
    the option to add just the storage account using the SAS key. Storage Explorer
    will show different types of resources on the left side, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Azure storage Explorer window displaying the different types of resources](img/B15455_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: Azure Storage Explorer'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Azure Blob
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Azure Blob storage** is a storage service that stores unstructured data (images,
    video, audio, backup data, and so on that doesn''t adhere to a data model) in
    the cloud as objects. Blob is object-based storage that can store any type of
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: Inside a storage account, you can have containers; containers are very similar
    to directories or folders on your computer. For example, if you are storing your
    favorite music files in Azure, you can set the account name as *Music* and inside
    that, you can create a container based on the genre or artists, and the actual
    music files are the blobs. A storage account can have an unlimited number of containers
    and a container can have an unlimited number of blobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure file shares are a great way to keep your data out of a VM. But they''re
    file-based, and that''s not the fastest choice for every data type. For instance,
    streaming from Azure Files, while possible, does not perform very well; uploading
    very big files can also be very challenging. Blob storage is a solution for this
    problem, and it scales much better: 5 TB for an Azure file share and 500 TB for
    a single blob container.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to upload a blob, you have to create a container first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of creating a container list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![Output displaying the creation of the container list](img/B15455_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.11: Creating a container list'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'There are three types of permissions available when creating a container:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Container**: Provides full read access to a container and its blobs. Clients
    can enumerate blobs in the container through anonymous requests; other containers
    are not visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blob**: Provides read access to blob data throughout a container through
    anonymous requests but does not provide access to container data. Other blobs
    are not visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Off**: Restricts access to just the storage account owner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use Azure Storage Explorer again to view the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Azure storage Explorer window to view containers.](img/B15455_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.12: Viewing container using Azure storage explorer'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Using PowerShell, you can create a blob:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify the result using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can upload a file to the container, making it into a blob, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also list the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: All these operations can be performed from Bash as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can mount the blob from the Linux Blobfuse reference link using **Blobfuse**;
    for more information, visit [https://github.com/Azure/azure-storage-fuse](https://github.com/Azure/azure-storage-fuse)
    and [https://docs.microsoft.com/en-us/azure/storage/blobs/storage-how-to-mount-container-linux](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-how-to-mount-container-linux).
  prefs: []
  type: TYPE_NORMAL
- en: An alternative solution to copy data into a blob is **AzCopy** (more information
    on this is available at [https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-linux](https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-linux)).
  prefs: []
  type: TYPE_NORMAL
- en: But, honestly, most of the time, this is not the way you will use Blob storage.
    Blob storage is not something you want access to on an operating system level,
    but rather on an application level, to store objects such as images and to make
    them publicly available. Microsoft provides great examples for getting started
    at [https://github.com/Azure-Samples?q=storage-blobs](https://github.com/Azure-Samples?q=storage-blobs).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Chapter 7, Deploying Your Virtual Machine*, there is a good example of
    an exception: uploading a VHD file to create a custom image using that VHD.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing Network Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As discussed earlier, in *Chapter 3 Basic Linux Administration*, networking
    is very important. Azure Virtual Network is an Azure service that provides the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connectivity to your workload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity from your workload to the outside world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity between VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other connectivity options, such as VPN tunnels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced routing options, including BGP routes through a VPN tunnel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Azure, the most important component of virtual networking is the **virtual
    network**, or **VNet** for short. A virtual network is crucial as it provides
    a highly secure isolated environment for your VMs to run in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following process might appear a little confusing and lengthy, but the
    intent here is to make you understand the process and commands. Let''s start with
    the creation of a virtual network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if we wanted to create a virtual network with the name `MyVirtualNetwork`
    with the address space `10.0.0.0/16`, we would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the variable you just created will show you all the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output displaying the properties of the Virtual network.](img/B15455_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.13: Virtual network properties'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `AddressSpace` or address is the network that can be used by one or more
    subnets. It's possible to add additional address spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Subnets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As stated, a subnet is created in a virtual network. All traffic between different
    subnets in the same network is routed in Azure so the subnets are able to reach
    one another. Of course, you can modify that behavior, for instance, when you want
    to use a load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we''ll take the simplest command possible for the same reason as for
    virtual networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a subnet with the name `MySubnet` with the address pool as `10.0.1.0/24`,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is possible that you'll get a warning that some objects are deprecated. You
    can safely ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you execute `$mysubnet`, you''ll see that the subnet is added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output displaying the details of the subnet using $myVnet.Subnets](img/B15455_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.14: Subnet details'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, we didn't use the full network,
    only a part of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, verification can be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The output will be exactly the same as the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first IP address of the subnet is the gateway for network traffic coming
    from the VM; it provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A default gateway, with **Source Network Address Translation** (**SNAT**) to
    gain internet access. To be able to do so, a public IP address must be configured.
    SNAT allows you to send the traffic generated from your VM (or any resource) in
    the private network to the internet via the gateway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DNS server, if not configured otherwise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DHCP server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last part of the virtual network configuration involves attaching the newly
    created subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'From the output, among some other information, you can see the address space
    and the subnet within:'
  prefs: []
  type: TYPE_NORMAL
- en: '![By attaching the newly created subnet you can see the address space and the
    subnet](img/B15455_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.15: Attaching the newly created subnet'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Network Security Group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Network security group** (**NSG**) is the next component we need to take
    care of. It is essentially access control lists that are associated with a subnet.
    It also provides port forwarding to the VMs or containers. The rules are applied
    to all interfaces that are attached to the subnet.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create an NSG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you can create an NSG this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the enormous output, you will find several sections; one of the sections
    is named `Default Security Rules`. This section contains a set of rules, given
    in order of priority:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow inbound traffic from all VMs in the virtual network (`AllowVnetInBound`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow inbound traffic from Azure Load Balancer (`AllowAzureLoadBalancerInBound`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deny all inbound traffic (`DenyAllInBound`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow outbound traffic from all VMs to all VMs in the virtual network (`AllowVnetOutBound`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow outbound traffic from all VMs to the internet (`AllowInternetOutBound`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deny all outbound traffic (`DenyAllOutBound`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before going into the rules, let''s associate the subnet with the NSG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, here''s an implementation of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s possible that you''ll get the same deprecation warnings as you saw before.
    You can ignore them again. Attach the NSG to the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command will be in JSON and is lengthy because of all the
    parameters. If you look at the output, you will see that `NetworkSecurityGroup`
    is mentioned as `myNSG1`, which is the NSG we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attaching NetworkSecurityGroup to the network ](img/B15455_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.16: NSG attached to the network'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If we want access to our VM using SSH, then we need to add a security rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-SourceAddressPrefix` parameter is a sort of a shorthand for everything
    that is outside the virtual network and reachable by public internet. Other values
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VirtualNetwork`: Everything within this virtual network and other connected
    networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AzureLoadBalancer`: If you are using Azure Load Balancer, this provides access
    to your VMs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*`: Everything.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Priority` ranges from `100` to `4096`. Higher numbers are created by Azure
    and can be overruled. The lower the priority number, the higher is the priority
    of the rule.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the previous command may have too much information, which is
    a bit confusing to interpret. In order to confirm whether port `22` traffic is
    allowed, we will filter the output using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output, as shown in the following screenshot, verifies that TCP port `22`
    is open for inbound traffic. This port has a priority of `100`, but since it''s
    the only rule, that doesn''t matter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output to verify that TCP port 22 is open for inbound traffic](img/B15455_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.17: Listing the security rules set for the NSG'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the output is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Public IP Address and Network Interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be able to access the VM from the internet, a public IP address is needed
    along with a DNS label, which is the DNS name given to our VM.
  prefs: []
  type: TYPE_NORMAL
- en: The public IP can be static or dynamic. In the case of a dynamic public IP,
    whenever you deallocate and then restart the VM, the IP will be released and disassociated
    from the VM. Next time you start the VM, a new public IP will be associated with
    the VM. So, every time you deallocate and then restart the VM, you have to check
    the public IP from the CLI or the portal to connect to the VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here comes the important part about the DNS label: if you have already added
    a DNS label to your VM, you can always use that to connect to the VM, irrespective
    of the public IP the VM has. The DNS label doesn''t change when you deallocate
    and restart the VM. Also, the DNS label is unique across Azure.'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a static public IP, the IP will be reserved for you. Even if
    you deallocate and then restart the VM, the IP will not change. Having a static
    IP assigned to the VM will not stop you from adding a DNS label. If that's needed,
    you can add the label as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new dynamic public IP with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify it by viewing the content of the `$pip` variable. If the allocation
    method is `Dynamic`, the IP address is not allocated until the IP address is assigned
    to a network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Verifying the new dynamic public IP by viewing the content of the $pip variable.](img/B15455_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.18: Verifying the new dynamic public IP'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: So, that's why in the preceding screenshot, the `IpAddress` field states `Not
    Assigned`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the network interface, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get an error on the `SubnetId`, try to set the `myVnet` variable again
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the result, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '![Checking the IP address alloted to the network interface ](img/B15455_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.19: Checking the IP address allocated to the network interface'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the output, as you can see in the preceding screenshot, an IP address is
    allocated, which is `10.0.1.4` this time.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Compute Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's sum up the components covered in this chapter that you need as a requirement,
    before you can deploy a VM. In the case of the storage account, it's not a real
    requirement, but do you want to work without being able to receive boot diagnostics
    in times of trouble? As mentioned earlier, a boot diagnostics account is very
    useful if your VMs go into a non-bootable state. The logs stored in this account
    can be used to find the root cause of the non-booting state of the VM. For testing,
    this is not a mandatory option, but for production workloads, it is recommended
    to enable boot diagnostics, which will help you understand what went wrong during
    a failure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every resource mentioned here is also used by Azure Container Service and Azure
    Kubernetes Service.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember, in the *Technical requirements* section, we looked at PowerShell
    code to create a new VM, where most of the variables were not defined. Here is
    the code again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now, I hope you are able to understand what each of these parameters stands
    for and how they are crucial for your VM.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Machine Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll provide a few tables with the necessary components and
    the corresponding commands in PowerShell and Bash. It can be used together with
    the help available in PowerShell (`help <cmdlet>`), the Azure CLI (add the `--help`
    parameter to the command), or the Azure online documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Profile**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Azure profile comprises the settings needed to describe your Azure environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list of commands for Azure profile settings required to describe the Azure
    environment](img/B15455_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.20: Azure profile settings commands'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Resource Group**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The resource group is needed to contain and manage resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list of commands to create and view the Azure resource groups](img/B15455_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.21: Azure resource group commands'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Storage Account**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The storage account is needed if you want to store data outside your VM/container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list of commands for Azure storage account](img/B15455_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.22: Azure storage account commands'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Virtual Networks**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Virtual networking is needed for communication between VMs/containers and communication
    with the outside world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list of commands that can be used to create and view Azure virtual network
    and subnet.](img/B15455_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.23: Azure virtual network commands'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Network Security Group**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The NSG consists of **Access Control Lists** (**ACL**) to protect your workloads
    and allow access where needed. It is, together with the public IP address, also
    needed for port forwarding to the VM/container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list of commands for the Azure Network Security Group.](img/B15455_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.24: Azure NSG commands'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Public IP Address and Network Interface**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The public IP address provides access from the outside world into the VM/container.
    It''s necessary for Port Address Translation (PAT) and SNAT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A list of commands for the Azure public IP address and network interface.](img/B15455_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.25: Azure public IP address and network interface commands'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the knowledge gained in this chapter, you should now have a better understanding
    of the things you encountered in *Chapter 2, Getting Started with the Azure Cloud*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we explored all the Azure components that are needed before
    you can create your workload in Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: You'll need a storage account for the VM boot diagnostic extension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll want a storage account to store data outside your VM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking components are needed to be able to communicate with your VM, enable
    communication between your machines, and for the VM to be able to reach the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The steps we have discussed so far will be very useful for you to understand
    the components related to VMs and also how each of those components is deployed
    in Azure. We started with storage solutions in Azure and then covered networking
    as well. We hope this gave you an idea of how these components come together to
    provide service delivery.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be using the knowledge we gained from this chapter
    to identify and configure network and storage components in the Linux operating
    system. Besides network and storage topics, we'll explore other system administration
    tasks, such as software and service management.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which resources are required before you can create your VM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which resources are recommended for a VM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the examples, a random number generator was used several times—why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of `AddressPrefix` on a network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of `AddressPrefix` on a subnet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the NSG?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is the public IP address needed for communication with the outside world?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a static and a dynamically allocated public IP
    address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The book *Implementing Microsoft Azure Infrastructure Solutions* from Microsoft
    Press is intended as a reference guide for studying the 70-533 exam; even though
    the exam is deprecated, the content is still good for reference. It explains every
    part of the Azure infrastructure in detail, using the Azure portal and the command-line
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to networking, another recommended book, which is also written
    as a study guide for an exam, is the *Comptia Network+ Certification Guide* by
    Glen D. Singh and Rishi Latchmepersad.
  prefs: []
  type: TYPE_NORMAL
- en: Much older and more difficult to read is the freely available *TCP/IP Redbook*
    from IBM ([https://www.redbooks.ibm.com/redbooks/pdfs/gg243376.pdf](https://www.redbooks.ibm.com/redbooks/pdfs/gg243376.pdf));
    it covers much more than you need to know, but if you are interested in the topic,
    it's a must-read. Even if you are not interested in taking the Cisco ICND1 exam,
    Neil Anderson recorded a video at [https://www.packtpub.com](https://www.packtpub.com),
    which provides, besides the Cisco part, a very good introduction to networking.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Please be aware that the Azure environment is continuously changing, especially
    regarding storage and networking; it is important to validate sources against
    the documentation available on the Microsoft website. The date of publishing is
    perhaps the first thing you will want to check.
  prefs: []
  type: TYPE_NORMAL
