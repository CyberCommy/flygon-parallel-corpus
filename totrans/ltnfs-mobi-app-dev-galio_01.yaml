- en: '*Chapter 1*:Introduction to React Native and Galio'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by understanding what this book is about and how it can help you
    learn how to use React Native and Galio. By reading this book, you'll understand
    how to install React Native and all the necessary tools for using it with both
    macOS and Windows. You will then understand how to create an Expo project and
    why we're using Expo, the difference between the template workflows and how they
    come in handy, and also how to start your new project on both a physical device
    and a simulator. Things should be really easy to follow, so you might find the
    experience rewarding.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the world of cross-platform mobile programming isn't an easy task
    but it sure is a doable one. You made the first step by purchasing this book –
    the second one is currently in progress since you're reading this book to discover
    how React Native works and how Galio is meant to help you build apps faster. The
    main purpose of this book is for you to get accustomed to how React Native works,
    how to use it for your projects, and how Galio comes in handy and could potentially
    save a lot of your time.
  prefs: []
  type: TYPE_NORMAL
- en: I can understand this might not be an easy task at first but I strongly recommend
    going over each section as many times as needed. If there is something that might
    not be entirely easy to understand at first, you can always ask questions in places
    such as Stack Overflow or different subreddits. We'll look at places to ask for
    help in depth later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: At first, most programmers, myself included, thought cross-platform mobile programming
    frameworks might be much slower than the native ones. This was just a thought
    as we're going to see that React Native is a really good way of creating mobile
    apps as they're not at all that slow compared to the native ones.
  prefs: []
  type: TYPE_NORMAL
- en: As you'll understand soon enough, this book is strongly connected to Galio,
    which I believe to be one of the best-looking UI libraries out there. Galio is
    going to help us build a React Native app faster and with more style than we would've
    been able to do on our own.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also learn lots of ways to develop your own UIs and how to start thinking
    outside of the box while developing your applications. This is important as it
    could make the difference between a successful app and an unsuccessful one.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the basic rules of design and programming is only the first step in
    the process of being a complete frontend developer. Learning how to break those
    rules will develop your skills even further.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, there are going to be tips showing up in places where they're most
    needed, and following them will benefit anyone trying to get into a programmer
    mindset.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this book, you'll find exercises and lots of tips on how to develop
    a more complex UI for your mobile applications. All these have a great purpose
    in mind and that is to develop a programming style while having a good base.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly believe that by the end of this book, anyone should be able to create
    at least a basic cross-platform mobile app that'll serve as a good MVP for a personal
    project. Learning and experiencing all that is written in this book should play
    an important role not only for you as you learn to use React Native and Galio
    but also for you as a programmer.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why React Native?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Galio – the best UI alternative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring your React Native environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first React Native project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why React Native?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you may be wondering, "Why React Native?". There are so many cross-platform
    frameworks available out there such as Flutter, Xamarin, and Cordava, to name
    a few, so we need to understand why React Native is a great choice for mobile
    application development.
  prefs: []
  type: TYPE_NORMAL
- en: You need to understand that there is no right choice. This is only based on
    the current context of the market and personal appreciation.
  prefs: []
  type: TYPE_NORMAL
- en: Programming frameworks are like a painter's brush. A painter has multiple brushes,
    each of them with a different purpose. You need to understand as much as you can
    about the tool that you're using because the better the painter knows the brush,
    the better they can paint and bring their vision to life.
  prefs: []
  type: TYPE_NORMAL
- en: You need to learn how to use React Native to develop cross-platform apps quickly
    and easily. So, let's go a bit more in depth into why React Native is such a great
    choice for app development.
  prefs: []
  type: TYPE_NORMAL
- en: You only learn it once
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, React Native is based on React, which means you only learn it
    once and you can develop everywhere. This is a really good way of expanding your
    skills. By learning React Native, you'll be ready to write React code for your
    website.
  prefs: []
  type: TYPE_NORMAL
- en: This should make it easy for you to understand why this is such a great choice.
    Imagine that you have already created an app. Your application is cool – people
    are starting to download it from the App Store or Google Play – but what would
    help even more is a landing page. Because you've already learned React Native,
    using your skills with React is going to be a piece of cake.
  prefs: []
  type: TYPE_NORMAL
- en: Bigger talent pool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Back in the old days of programming, when you had an app idea and you wanted
    to develop it, you had to search for a backend developer with some C# or Java
    skills, an iOS developer with Objective-C skills, an Android developer that had
    to know Java, and maybe even some web frontend developers for your application's
    website.
  prefs: []
  type: TYPE_NORMAL
- en: This requires a lot of effort and a pretty big budget. At the end of the project,
    your idea might not work in today's market, and you will have lost a lot of time
    and money.
  prefs: []
  type: TYPE_NORMAL
- en: Now, all those specific jobs could be handled by JavaScript engineers – we have
    multiple alternatives to the native frameworks that work just as good but they're
    written in JavaScript, which is one of the most used languages right now. JavaScript
    developers are even more available on the market and transferring from one framework
    to another is easier than ever. By hiring a JavaScript developer, the budget is
    cut in half, the app is developed even faster, and they can help each other even
    though they have different jobs.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript developers can easily change teams. A backend developer can help
    a frontend developer or even the mobile app team. They can go and help out wherever
    you need more manpower to push the development even faster. This is especially
    valuable when one of your developers is missing due to resignation or illness.
  prefs: []
  type: TYPE_NORMAL
- en: Having a bigger pool of people to choose from is a big plus for any app development.
  prefs: []
  type: TYPE_NORMAL
- en: React's popularity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You''d think that React''s popularity has nothing to do with React Native but
    actually, React and React Native are close in terms of writing code and methodology.
    My recommendation is to always look at Google Trends because it can help us understand
    whether a framework is popular or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Google Trends showing the popularity of React at this moment'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.01_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Google Trends showing the popularity of React at this moment
  prefs: []
  type: TYPE_NORMAL
- en: React makes it easy for developers to build a great web UI, but the components-based
    approach also makes the app a lot easier to maintain. React Native brings all
    those advantages to the mobile app development universe.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does this show us? There's a pretty big community of people searching
    for React, and React Native has one of the biggest and most active communities.
    For almost every little issue that you might encounter, there's someone that has
    already written an article or opened up an issue for it on GitHub. The community
    is really big on GitHub as well, which will be helpful as you can get in contact
    with more developers, ask for help regarding any of the libraries that you might
    be using inside your app, and get more help for any open source ideas that you
    might have, which could potentially help a lot of developers.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend that everyone contributes to open source projects because this will
    help develop your skills and expand your way of thinking like a programmer. The
    community is so helpful and friendly that you might find it hard to switch to
    any other framework as this seems like the best choice for most of your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React Native gets close to a native app from a performance standpoint but you
    have to use it in the right way. Technically, you have a JavaScript thread running,
    which is pretty slow compared to native code such as Kotlin for Android or Swift
    for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: React Native shines because it creates a bridge between the JavaScript thread
    and the native one. It was designed to move the most expensive and powerful tasks
    such as rendering to the native side. This is used asynchronously so that the
    JavaScript thread will not have to wait on the native computations.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say the user presses a button – React Native will translate this into
    an event that JavaScript can handle. After that, by sending messages between a
    native platform such as iOS or Android and a JavaScript code base, the React Native
    bridge translates native events into ones that React components can understand
    and respond to.
  prefs: []
  type: TYPE_NORMAL
- en: There are certain challenges here, such as default components – which are built-in
    elements provided by React Native – not looking or responding the same on both
    platforms since there are so many platform-specific events. There's nothing to
    worry about though because this bridging architecture allows us to use all the
    existing native views from platforms, SDKs, and JavaScript libraries.
  prefs: []
  type: TYPE_NORMAL
- en: The language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript was created as a client-side language. It was built to make websites
    interactive. If you think of a basic website layout, you have your HTML, which
    describes the basic content and the website's structure, and then you have your
    CSS, which styles the HTML and makes it pretty. This is a static website that
    doesn't do much, so we needed a programming language that could add functionality
    to our website and bring it to life. This is where JavaScript came into the game.
  prefs: []
  type: TYPE_NORMAL
- en: Time passed and people realized they could do a lot more with JavaScript. The
    most popular use of JavaScript is client side but ever since Node.js appeared
    in the programming scene, the language has evolved so much that this is not the
    case anymore. JavaScript is now an all-purpose programming language, meaning you
    can use it to build almost anything. You can even have typed JavaScript with TypeScript
    or Flow. The support inside code editors got a lot better as well.
  prefs: []
  type: TYPE_NORMAL
- en: Having said all this, React Native uses JavaScript as its main programming language.
    *As we learn more, we'll see that React Native can also use native code to run
    faster and do better computations*.
  prefs: []
  type: TYPE_NORMAL
- en: Stack Overflow (one of the biggest communities of programmers) does a survey
    each year where they try to understand more about developers and the people using
    their platform. You can ask any developer about their platform and almost anyone
    could tell you they've browsed it at least once. Their 2020 study showed that
    almost 70% of their user base was formed of professional developers using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Being such a versatile language, learning it for React Native or another framework
    can only help you expand your territory as a programmer. The fact that React Native
    uses it is a big plus as it shows how easy this allows you to move between technologies.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about Stack Overflow statistics regarding the 2020 study
    by going to [https://insights.stackoverflow.com/survey/2020](https://insights.stackoverflow.com/survey/2020).
  prefs: []
  type: TYPE_NORMAL
- en: Drawing conclusions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After reading all this about React Native, we need to understand that even though
    React Native is not exactly as fast as a native app, it can be almost as fast
    as one. And if we throw in the fact that the language has so many opportunities
    for us developers and also that the community is so strong and friendly, we might
    see React Native as one of the best frameworks for cross-platform mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: To pick the library that suits your needs, you need to take what's the most
    important to you into account. I hope you know a little bit more about React Native
    and that you're confident that this framework is a good choice for **you**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll understand more about what a UI library is and how Galio comes in
    like a great sidekick to help us out when we're writing our code.
  prefs: []
  type: TYPE_NORMAL
- en: Galio – the best UI alternative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you've learned a thing or two about how React Native works and now you're
    wondering how Galio can help you. Well, first of all, what exactly is Galio?
  prefs: []
  type: TYPE_NORMAL
- en: To put it simply, Galio is a React Native UI library, so it's a collection of
    resources meant to help developers write code faster and easier. The thing is...
    React Native doesn't have that many components. We'll come back to what exactly
    a component is later in this book, but for now, just think of them as puzzle pieces.
  prefs: []
  type: TYPE_NORMAL
- en: React Native has a certain amount of puzzle pieces, each of which is as simple
    as possible. Galio comes in as a wrapper around those puzzle pieces and adds a
    bit of color and functionality. Sometimes, you can even find different pieces
    that are built by combining more basic pieces into a really big one for specific
    reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go over the reasons why Galio might be the best UI library for you
    in your cross-platform mobile development journey.
  prefs: []
  type: TYPE_NORMAL
- en: Time-effective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All right, too many metaphors. The thing is, React Native only has basic-looking
    components, which makes developers build their own. This is time-consuming as
    you would always have to build new components for your new app.
  prefs: []
  type: TYPE_NORMAL
- en: This is where Galio comes in handy! Packed with a lot of already beautiful components,
    it eases the pain of creating your own all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Also, all the components are easier to customize and still fit the whole design
    layout, without putting too much pressure on the developer to think about how
    to do it and where to start. The process of customizing a component from Galio
    is straightforward and usually, it revolves around using props, which make the
    whole thing a lot more readable.
  prefs: []
  type: TYPE_NORMAL
- en: I know that words such as "component" and "props" are completely or maybe just
    somewhat alien to you right now, but all that matters is that they save you a
    lot of time. We'll learn more about these keywords shortly, but we need to understand
    a bit of the overall image of what all these technologies mean in the grand scheme
    of things.
  prefs: []
  type: TYPE_NORMAL
- en: Building an app with Galio is usually more about the way you choose to create
    your layout than it is about actually programming the UI. It is using a direct
    way of creating a mobile screen by placing each component under the previous one.
    This allows us to be more efficient and waste as little time as possible as we
    code and think about what the final screen should look like.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the basic program structure you can create using
    the pieces of the puzzle we were discussing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Representation of how adding more components helps build a mobile
    screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.02_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Representation of how adding more components helps build a mobile
    screen
  prefs: []
  type: TYPE_NORMAL
- en: This is a great way of thinking because it makes you understand some of the
    best principles of atomic design. It also creates a more organized code base that
    you can expand into a more complex and fuller app.
  prefs: []
  type: TYPE_NORMAL
- en: It's really beautiful
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The fact that Galio comes already packed with a design system in mind means
    that all the components will follow the same design principles, so there's never
    going to be any discrepancies between the components.
  prefs: []
  type: TYPE_NORMAL
- en: A consistent design is what makes an app complete. A consistent design will
    help the user understand your app flow better, all the symbols that you wish to
    incorporate in your app, and how to use it. It's all about being consistent with
    your buttons, texts, and design.
  prefs: []
  type: TYPE_NORMAL
- en: You might not necessarily like the colors at first, which is OK because you
    can always change them easily with the help of `<GalioProvider>`. We will look
    at this later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, we've learned about why React Native is such a great choice and why
    Galio is a great UI library for us to start building apps. The next step is to
    understand how to configure a good environment so that we can start building cross-platform
    mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your React Native environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two things that we need to know about: **Expo** and **the React Native
    CLI**.'
  prefs: []
  type: TYPE_NORMAL
- en: Both of them are easy to install and we'll go over both of them to make sure
    we cover all possible ground. I recommend not skipping over this part as it will
    help you make a good choice when you start developing your mobile project.
  prefs: []
  type: TYPE_NORMAL
- en: Things are going to be much easier to install on macOS compared to Windows as
    macOS is a UNIX-based system, so the terminal is a lot more powerful. But worry
    not – we will solve this problem for Windows as well.
  prefs: []
  type: TYPE_NORMAL
- en: We have some requirements we must consider before we move on. These are going
    to help us create a good environment for both Expo and the React Native CLI, and
    also for JavaScript programming in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll need the following technologies installed for either system:'
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew – macOS only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chocolatey – Windows only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode – macOS only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start by installing Node.js, which is one of the most important technologies
    we need for JavaScript to run outside the browser. Node.js is built on Chrome's
    V8 JavaScript engine, which means you would be able to run any JavaScript code
    that runs on the latest Chrome version (the web browser).
  prefs: []
  type: TYPE_NORMAL
- en: The recommended way of installing Node.js depends on your operating system.
    For macOS users, the best way would be by using Homebrew, while for Windows users,
    you would use Chocolatey. Homebrew and Chocolatey are package managers that enable
    you to install different packages such as Node.js easier and faster, all via the
    command line or terminal. You can also install it via the official website at
    [https://nodejs.org](https://nodejs.org), but we're going to use Homebrew or Chocolatey
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For macOS, we have Homebrew, which is easy to install. You can find more information
    on it on their official website at [https://brew.sh](https://brew.sh).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, you should open **Terminal** and write the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After writing the command, press *Enter*. More information regarding everything
    that is going to be installed will appear; just press *Enter* again and you should
    be ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: Chocolatey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For Windows, we have Chocolatey, which is a bit more complicated than Homebrew
    to install but by following the steps here, you should be all set. You can find
    out more about Chocolatey by going to their official website at [https://chocolatey.org](https://chocolatey.org).
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to use PowerShell with administrative rights. All you
    have to do to access it is to press the *Windows logo + X* on your keyboard. A
    new menu will appear in the bottom-left corner of your screen. Here, select **Windows
    Powershell (Admin)**. A new window will open.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to verify that `Get-ExecutionPolicy` is not Restricted, so
    write the following in PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If it returns `Restricted`, then you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you''re all set to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, wait for a few minutes for everything to be installed. If you didn't encounter
    any errors during installation, just type `choco` to return your Chocolatey version.
    If it does return it, then you're all set and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'All we need to do right now is install Node.js so that we can learn about Expo
    and the React Native CLI. Having installed Homebrew or Chocolatey makes this easy
    as all you have to do is write the following commands and Node.js will start installing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command on macOS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command on Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! We're now ready to move forward! With that, we have installed
    Node.js. Before setting up our environment, let's discuss text editors for a second
    – I promise you it won't take long.
  prefs: []
  type: TYPE_NORMAL
- en: I bet you're thinking *Wait, did he say we can write code in a Word document?*.
    Well, not really. Microsoft Word is not a plain text editor, but you can use something
    such as Notepad to write code. Just because we can use Notepad doesn't mean we
    will use it; it doesn't look very professional, does it?
  prefs: []
  type: TYPE_NORMAL
- en: The type of text editor we're going to use is going to have cool features such
    as a color scheme for our code syntax, as well as different add-ons that will
    help us write code faster and prettier.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different free text editors out there, including Sublime, Atom,
    Visual Studio Code, Notepad++, and Brackets. They're all equally good and I recommend
    that you download at least two or three of them and check them out. My personal
    preference is Visual Studio Code, and I am going to use it throughout this book.
    You don't need to use the same text editor if you don't like the way it looks
    because you can follow this book by using any of the aforementioned editors.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Visual Studio Code (or just VSCode) from [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have got some necessities out of the way, it is time to move on
    and learn about Expo and the React Native CLI. Both of them can be used to get
    to the same outcome – they're just different ways of creating a React Native app
    and we'll try to understand them as much as we can. Knowing everything about them
    is going to help us choose the right one for us and our app.
  prefs: []
  type: TYPE_NORMAL
- en: The React Native CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The React Native CLI is the official and first method of creating a React Native
    project. It is usually harder to configure and it takes a lot more time than Expo,
    but it is worth it. After all, you need a simulator to test your app on different
    phones. I recommend not skipping this section.
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good thing about having macOS is the fact that you can simulate an iPhone
    and see what your project looks like on different Apple technologies. This is
    something that you can't do on Windows but Android works on both, so macOS has
    an advantage in being able to simulate all types of platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should get going and install all of the necessary dependencies; open Terminal
    and write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Watchman is a tool developed by Facebook to watch the changes inside the filesystem.
    It also offers better performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you need to install Xcode. Go ahead and open the Mac App Store, search
    for Xcode, and click on **Install**. This will also install the iOS Simulator
    and the rest of the tools we need to build our iOS apps. Your Xcode version needs
    to be at least 9.4 for React Native to work with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need the Xcode Command Line Tools package. Once Xcode has finished
    downloading and installing, open it up and go to **Preferences** (it''s under
    the Xcode menu in the navbar; alternatively, just press *Cmd + ,*). A new window
    should open. Go to **Locations** and install Command Line Tools by selecting the
    most recent version from the dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Preferences window in Xcode'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.03_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – Preferences window in Xcode
  prefs: []
  type: TYPE_NORMAL
- en: Now, go to the **Components** tab and install the latest simulators that you
    wish to use.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: There is a simulator for each iOS version supported by Apple. You should try
    to install the last two major versions since your app users might always be on
    a previous iOS version.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you need to do now is install CocoaPods by writing the following in Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is a Ruby gem that manages dependencies for your Xcode projects.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you're all set to create your first project on macOS! We'll do this
    in just a bit!
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we know, we can't install any simulators for iOS on Windows, so we might
    as well just install the Android one.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already installed Node.js, so all that''s left to do is install JDK
    by going to our admin PowerShell (we explained how to open it earlier when we
    installed Node.js and Chocolatey). Once you''ve opened it, write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you already have JDK installed, make sure it's at least v8.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to install our Android development environment, which can be
    a bit tedious. However, it's worth it as we're going to be able to run our React
    Native apps right on our virtual Android simulator.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and download Android Studio by going to [https://developer.android.com/studio](https://developer.android.com/studio).
    Once it has finished installing, start Android Studio. Once you've opened it,
    choose the theme that you like and all the preferences that are good for your
    computer. At one point, the **SDK Components Setup** page will appear. Make sure
    you have selected the **Android SDK**, **Android SDK Platform**, and **Android
    Virtual Device** checkboxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation has been completed, it is time to move on. Android Studio
    is always installing the latest Android SDK by default. However, building a React
    Native app with native Android code requires the **Android 10 (Q) SDK**. To install
    it, open Android Studio, click on **Configure** at the bottom-right corner of
    the window, and select **SDK Manager**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Android Studio and the positioning of the buttons'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.04_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Android Studio and the positioning of the buttons
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select the **SDK Platforms** tab and check the box in the bottom-right
    corner that states **Show package details**. Look for and expand Android 10 (Q)
    and make sure the following are checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android SDK Platform 29**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intel x86 Atom_64 System Image or Google APIs Intel x86 Atom System Image**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next thing you should select is the **SDK Tools** tab and check the box
    next to **Show Package details**. Look for **Android SDK Build-Tools** and select
    **29.0.2**.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Apply** and download all the necessary files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to configure the `ANDROID_HOME` environment variable so that
    we can use native code. Open **Control Panel**, click on **User Accounts**, and
    then on **User Accounts** once more. On the left-hand side, you''ll find **Change
    my environment variables**; click on it. Now, click on **New…** and write the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variable name**: `ANDROID_HOME`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variable value**: `C:\Users\{name}\AppData\Local\Android\Sdk`, where `{name}`
    is the username of your PC:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Windows showing my user variable'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.05_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Windows showing my user variable
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether the environment variable has been loaded, go to your PowerShell
    environment and write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You should see a list, and `ANDROID_HOME` should be part of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we need to add `platform-tools` to **Path**. We can do that by
    going to **Control Panel**, clicking **User Accounts**, and then clicking on **User
    Accounts** once more. Click on **Change my environment variables** and look for
    **Path**. Select **Path** and click **Edit**. A new window will appear where we
    can click **New**. Now, use the same variable value that we did previously but
    this time, go into the `Sdk` folder – more precisely, the `platform-tools` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Users\{name}\AppData\Local\Android\Sdk\platform-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: We're now ready to start developing React Native apps on Windows!
  prefs: []
  type: TYPE_NORMAL
- en: Expo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Expo is the easiest way to start a React Native project for a beginner. It comes
    packed with a big set of tools built for React Native, but we're not interested
    in that right now. We're only interested in the fact that Expo can get you up
    and running in a few minutes and it doesn't require you to have a simulator installed,
    so you can play with your app in a matter of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: They also came up with something called Snack ([https://snack.expo.io/](https://snack.expo.io/)),
    which is helpful if you wish to try out different code ideas directly in your
    browser! This is cool as you don't even need to start a project if just want to
    sketch something quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install it and see whether this is as easy as I make it out to be. Open
    a terminal or command line and write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Expo is now ready to go! Easy, right?
  prefs: []
  type: TYPE_NORMAL
- en: Ready to go even further?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we've installed all the necessary technologies, we're ready to create
    our own React Native project and create some awesome apps!
  prefs: []
  type: TYPE_NORMAL
- en: But first, let's understand the difference between the React Native CLI and
    Expo. Previously, I told you not to skip the React Native CLI part, even though
    it's a lot bigger than the Expo one. That's because we need to install Xcode or
    Android Studio to have some control over our app directly from our PC.
  prefs: []
  type: TYPE_NORMAL
- en: We haven't created a project with either the React Native CLI or Expo yet because
    they're both created differently. However, we've installed the requirements for
    both of them. Creating a project with the React Native CLI leaves the developer
    with the job of fully creating an app from 0\. You have complete control over
    the app and there's nothing but your imagination that can limit what you can do.
    You can even use native code – Kotlin/Java for Android or Swift/Objective-C for
    iOS – and create your own completely native components. This is all very advanced,
    though, and we don't need it.
  prefs: []
  type: TYPE_NORMAL
- en: Expo comes packed with a lot of tools for people who want to create a fast and
    powerful app, without the struggle of having to think about all the little details
    regarding how the app works and connects with each specific platform.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, we'll use Expo to create the projects in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first React Native project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're ready to go! Let's open up a terminal and head right into it!
  prefs: []
  type: TYPE_NORMAL
- en: Once the terminal is open, just move to your `Desktop` folder or any folder
    you wish to create your project in. You can move between folders by using the
    `cd` command. So, just by writing `cd Desktop`, we've arrived at the **Desktop**
    directory and we're ready to create our Expo project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create a new React Native project with Expo by writing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon pressing *Enter*, Expo tells us we can choose between a multitude of templates.
    The biggest two categories are **Managed workflow** and **Bare workflow**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – A representation of what you will see after initializing a project'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.06_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – A representation of what you will see after initializing a project
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll explain what both are in a few seconds. For now, pick **blank** under
    **Managed workflow**. Wait a few seconds and you''ll see a message in your terminal
    stating the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''re ready to start it. Write the following command in the terminal;
    this will move us into our project''s folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now that we're here, let's understand how each type of template works so that
    we can start playing with our first React Native app.
  prefs: []
  type: TYPE_NORMAL
- en: Managed workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The managed workflow tries to take care of almost all the complex actions you
    would have to do. This is usually for complete beginners who don't want to complicate
    things with Xcode or Android Studio, which is exactly why we've started by creating
    a project with this type of workflow. You can change all the app's information,
    such as its icon or splash screen, through `app.json` and have direct, easy access
    to different services such as push notifications.
  prefs: []
  type: TYPE_NORMAL
- en: This workflow has some limitations, though. Let's say you want to use a specific
    device capability that the Expo SDK doesn't offer through their API. This means
    that you would need to run `eject` and `expo-cli` will do all the work and transfer
    you to the **bare workflow**.
  prefs: []
  type: TYPE_NORMAL
- en: Bare workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The bare workflow presents the developer with complete control over the app.
    However, this comes with all the complexity of having to take care of every little
    detail regarding your app. Now, the ability to easily configure `app.json` has
    disappeared and you're left with only Expo SDK installed and no pre-configuration
    done.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to use native code and manage your dependencies however you
    want. You might be wondering, "*Well… isn't this the same thing as using the React
    Native CLI?*". Well, not really, because you get instant access to the Expo SDK
    and Expo framework, which within itself represents a big plus for a developer
    as it still eases your development process.
  prefs: []
  type: TYPE_NORMAL
- en: Opening our project files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've understood what each template does and why we chose the managed
    workflow, let's see what the code looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Remember when we discussed text editors? Go ahead and open the text editor you
    chose. I'll use VSCode as I prefer the design compared to the others.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **File** | **Open Folder** and search for the project's folder. Mine's
    in the `Desktop` folder. Opening it lets us see all the files and folders inside
    our project.
  prefs: []
  type: TYPE_NORMAL
- en: I'm pretty sure you're confused about the purpose of each of these files. We'll
    look at this shortly, but for now, take a look around for a few minutes and see
    whether you can pick up anything by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Investigating any piece of code that you find and create is the best way to
    ensure you're learning the stuff that you're reading or coding. The best programmers
    are always the ones that use their deductive skills.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our physical device for preview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's time to prepare our phone so that it can preview our app because it's always
    cool to show off to our friends with our new skills.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's go to the App Store or Google Play and search for Expo. Install it
    and you'll be ready to go. This app allows us to test our apps right on our phones,
    so let's test it out!
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your terminal and make your way to the project''s folder, if you''re
    not already there. Write the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After that, press *Enter*. A new window should open in your default browser.
    A server has been created and your app can now be previewed on your physical device
    or even a simulator. On the sidebar, there is a QR code, and on top of that, a
    link and some buttons. What is this and how can we make use of it?
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Preview of all the buttons shown on the screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.07_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – Preview of all the buttons shown on the screen
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can open your smartphone and either scan the QR code or paste the link
    above the QR code into a browser. A message will appear, asking you whether you're
    OK with opening the link with Expo. Press **Yes** and there you have it – your
    first React Native app on your physical device.
  prefs: []
  type: TYPE_NORMAL
- en: Pretty cool, right?
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what happens if we press **Run on Android device/emulator** or **Run
    on iOS simulator**. A message will appear in the top-right corner, letting you
    know Expo is **attempting to open a simulator**. Depending on which operating
    system you've started your project on and which simulator you have installed,
    choose the appropriate button.
  prefs: []
  type: TYPE_NORMAL
- en: For the Android simulator, you'll have to open Android Studio first. Then, you
    must go to the top-right corner, where it says **Configure**, and choose **AVD
    Manager**. Now, a new window will appear, displaying all the available virtual
    devices. If you don't see any, go to the bottom-left corner and click **Create
    virtual device**.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you will see a list of Android devices. I picked the Pixel 3a
    but you can choose an older one if your CPU is not very strong. After that, click
    **Next**; you will be asked to pick a system image. Locate the **x86 images**
    tab next to **Recommended** and pick the image that doesn't need to be downloaded
    called **Q**. If all of them need to be downloaded, then you need to go back to
    the Android Studio installation part and repeat that process. After selecting
    the image, click **Next** and name the AVD; it can be called anything, so be creative.
    Click **Finish**; you should see your device in the **AVD Manager** list. On the
    same row, to the right, you'll find a little green button that looks like the
    **play** symbol. Click it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new Android Simulator will open, so let''s head back to the browser tab where
    we have our Expo server running and click on **Run on Android device/emulator**.
    If you look inside the terminal, you''ll see that some writing has appeared. We
    just need to wait a second for the Expo client to be downloaded and installed
    on our simulator. It should say something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your Android simulator should show a preview of your first React Native
    app. How does it feel? You''ve been through quite a lot but in the end, being
    able to correctly initialize a project is quite rewarding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Android Simulator displaying a fresh new React Native project'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/Figure_1.08_B17074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – Android Simulator displaying a fresh new React Native project
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on, I think we should learn how to close a project in the terminal/command
    line. Go back to the terminal window and click on it so that it's in focus. Now,
    if you press *Ctrl + C*, the server should stop and you should be able to use
    that window of the terminal again.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter started with a brief introduction to React Native and Galio, and
    then we understood the main focus points as to why those libraries are good for
    your next personal cross-platform mobile app project. After fully understanding
    why learning about those libraries will help them become great assets in the future,
    we started setting up our React Native environment and learning everything there
    is to learn about testing and utilizing our soon-to-be-created mobile app.
  prefs: []
  type: TYPE_NORMAL
- en: We then created and tested our first React Native app! This has all been quite
    the journey for a newcomer into this beautiful world of programming and, trust
    me, it was all worth it. Everything you've learned here will serve as a base for
    what's coming up next. Isn't this all exciting? In the next chapter, it's time
    for us to learn the basics of React Native code writing and create even cooler
    apps.
  prefs: []
  type: TYPE_NORMAL
