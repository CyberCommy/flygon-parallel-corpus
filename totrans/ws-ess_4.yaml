- en: Chapter 4. Using WebSockets in Real Scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen in the last chapter that how to create a real-time presentation
    sharing application. We understood how real-time data transfer works and how to
    set up the server. Now we will go to the next step, where we will see what more
    elements we need to add to strengthen our application in terms of structure with
    the use of a framework. In this chapter, we will see the different steps to create
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: The real scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The question here is what is a real scenario? We have already seen an application
    which is a real-world scenario application, but then what we are referring to
    here? A properly structured application is incomplete without a framework in place.
    In the last application, we used a JavaScript server and a JavaScript library,
    did the integration, and built our application. But do you think that the application
    structure is good enough to support extensibility or reusability? The answer is
    NO, it is not, because we have not used any framework which will provide better
    structuring to our application. In this chapter, let's talk about the real scenario
    where we implement different structures or frameworks for our application.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the growth of HTML5, JavaScript frameworks are coming into the picture.
    And the scenario is that we have a lot of them to choose from. Some of the commonly
    used frameworks are AngularJS, Ember.js, Knockout.js, Backbone.js, and a lot more.
    We will be using AngularJS in our next example. AngularJS is developed by Google
    developers and is quite a powerful framework with a lot of needed features.
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AngularJS is an open source framework developed by Google. It is based on a
    very famous design pattern: **Model-View-ViewModel** (**MVVM**). Along with that
    it gives features that work seamlessly with HTML5, such as directives, bindings,
    and controllers. It mainly handles the problems of single-page applications providing
    features to implement dynamic views and routing mechanisms to simplify navigation
    between pages without loading the complete webpage. This feature makes this framework
    very beneficial for developers. It not only solves the problems of development,
    but also has made testing very easy.'
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of details available on the Web about the AngularJS framework.
  prefs: []
  type: TYPE_NORMAL
- en: Learn by doing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learn by doing is one of the best way of learning. Sometimes you learn about
    something and then implement it. But because you have already read the scenarios,
    you can implement it easily. One of the best methods is to start doing, and when
    you face a problem try to find a solution. This will improve your problem-solving
    skills and will help you explore more. On similar lines, let's start with an application
    and we will see where we encounter problems and where can we see the need for
    a framework.
  prefs: []
  type: TYPE_NORMAL
- en: The collaborative drawing application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's build a drawing application in which the user can draw on a canvas and
    other users can also do the same at the same time. Basically, we are creating
    a collaborative drawing application. Before building the application, let's gather
    the requirements and do some analysis, which is necessarily required to build
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, our main requirement is that we need to make an application which provides
    collaborative drawing. So what we need is a client application which is connected
    to a server and which delivers the data from one user to another in real time.
    Along with that, we need to make a mechanism using HTML to draw. Instead of spending
    a lot of time on coding for a drawing feature, we can use a good readymade library
    that provides us with the features we need for drawing.
  prefs: []
  type: TYPE_NORMAL
- en: 'So if we make a list of the items needed to build the application, it will
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Client application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of real-time data transfer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we know what to create. The next step is to divide the tasks for the application.
  prefs: []
  type: TYPE_NORMAL
- en: The drawing library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We chose to go for a library instead of coding the whole thing. There are a
    few libraries available, but one of best is the **Fabric**.**js** library. You
    can download the library from [http://fabricjs.com/](http://fabricjs.com/). You
    can even build a custom library file with selected features to make it lightweight.
    There are many features that this library provides, all of which you can see on
    the aforementioned website. Let us see a demo code for the Fabric.js library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can see in this code how simple this library is. You just need to add the
    canvas tag and start adding the objects to it, and it will display in the application.
    This library is quite easy to implement which will help us a lot because we are
    already dealing with a lot of different things here. Try the code to see what
    you get in the output and play around the library to get used to it.
  prefs: []
  type: TYPE_NORMAL
- en: The client application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to make a client application. Here is the code for the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we have created a canvas and made some buttons to add different
    shapes onto the canvas. One important feature added is that of free drawing. Copy
    and paste the code into the `index.html` file and try running it. If you read
    the Fabric.js library, you will come to know how it works. Don't forget to download
    the library file and include the library in the code.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have done the coding for the basic client feature, we now have to integrate
    the application with the server using WebSockets. For that, we need to first find
    out what data we need to send to the server. For collaboration, we have to send
    data about the shapes we need to create on the other user's canvas. Let's list
    the set of actions we need to carry out on the client and server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Client:'
  prefs: []
  type: TYPE_NORMAL
- en: Capture the event for the add shape button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send the object to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a WebSocket connection to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capture server data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle and add the objects received from the server to the canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Server:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a WebSocket server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass the data to all the connected clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the basis of the preceding list of items, we have made some changes to the
    code from both the server and the client side.
  prefs: []
  type: TYPE_NORMAL
- en: The client code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will now implement the code as per the listed items for server communication
    in our client-side code, which will have code to communicate with the server.
    Following is the client code which has been changed according to the client items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Code explanation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We have already seen in the previous chapter how to send and receive data from
    the WebSocket server. One of the methods we coded here to send the data is `sendObject`,
    which sends the type and the properties of the object to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here one of the main methods is `addObject`. Once we get the data from the
    server, we get two properties: one is type and other is the object which has the
    property''s values. These are the values we send to the server and then check
    the type of the object and add it to the canvas using respective methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the code is pretty simple and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: The server code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s now see what needs to be done on the server side. The following code
    will show what we need to write on the server side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Code explanation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On the server side, we have not done much coding. It is almost the same as the
    last chapter's server code. We received the data and broadcast it to all connected
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Do it yourself
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This application is a very simple and easy-to-build application. We have seen
    how to create a simple application with some limited features. Many additions
    can be added to this application to make it more powerful. Let's give you some
    tips and information on features that you can develop.
  prefs: []
  type: TYPE_NORMAL
- en: User registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever the user opens the URL, a log-in/sign-up dialog box will open. User
    details such as his/her name will be displayed in the top-left corner of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This scenario will need a database connection. There are some databases available
    which can be easily connected to our Node.js server, such as **MongoDB**. I will
    leave its method of implementation to you. For help in connecting Node.js and
    MongoDB, visit [http://mongodb.github.io/node-mongodb-native/](http://mongodb.github.io/node-mongodb-native/).
  prefs: []
  type: TYPE_NORMAL
- en: The list of users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make a button which will show you a list of users that are currently online.
    This scenario needs code changes both on the client as well as the server side.
    Let me list down some key points that you need to implement this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: We are already saving the list of users in the database once you have developed
    the user registration functionality. We can maintain a list of all online users
    or we can just keep the list on the server. The problem with persisting the data
    on the server is that it will be erased once the server restarts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch the list of users from the server as soon as we join the server. This
    can be achieved by sending a particular message, such as `getOnlineUsers`, and
    adding another entry to the message event handler returning the list of users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the list of users on the screen so that you can see a proper online
    users list. This needs changes on the client side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share with specific users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have already implemented a list of users, we can now implement user-based
    drawing sharing. In this, we can share our drawings with some specific users only.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This can be achieved by adding another parameter to the object we are sending
    to the server to add the object: the target user ID. This user id is unique for
    users and used to identify a user. This will help us in identifying and send the
    data to a specific user only.'
  prefs: []
  type: TYPE_NORMAL
- en: Save drawings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we are done with the drawing, we can save it and make it available for
    future use.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have to connect our application to a database which can hold the values that
    we have already achieved in earlier scenario. Now we need to add another table
    in the database just to store the drawing. Fabric.js gives us an object of all
    the drawing elements that we have drawn, and we can make a JSON string and store
    it in the database for future use.
  prefs: []
  type: TYPE_NORMAL
- en: The application structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Structuring the application is a really important part. If we look at the code
    we have written, we can see that it does not have a good structure. The structure
    has to be such that in the future if we want add some features to it, it should
    be easy to do so. And code should be written in such a way that it is easily maintainable.
    To achieve this, we need to use some sort of a structure, which is called a framework.
    Frameworks are designed to give a sense of structure to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Restructure the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know about frameworks, let's restructure our application using the
    AngularJS framework. Let's see what we can restructure here; we will divide everything
    into model, view, controller, and service layers. Let's see what these terms are
    and where they fit in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our application, we have not seen the need to store data, but if we want
    to extend our application and add more features, then there will be a need for
    a **Model**. As we have seen in some scenarios where we have a list of users and
    drawings, we need the Model to store the data on the client side so that it is
    easily accessible for use. AngularJS provides good features to store the data
    and the binding helps in showing the list data very easily in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An application is normally divided into different views, but in our application
    we just have one view. As we have seen in the scenarios, we need a login screen
    for users. In that scenario, we need a different view to be set up, and here Views
    come into the picture. AngularJS provides us a very easy way to maintain our Views.
    The routing mechanism of AngularJS also helps us in navigating between different
    views providing browser history as well as maintaining a single-page application.
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the application is divided into different views, we also need different controllers
    which basically control the UI behavior and help in communicating with the services.
    AngularJS controllers are very powerful and implement **Dependency Injection**
    (**DI**), which helps in injecting services, models, and so on to the controller
    to be operated in the View.
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Service is very important when we have an application that connects to a server.
    Maintaining one place for server communication is a good approach as it creates
    different layers in the application, which can be manipulated without affecting
    the other layers of the application.
  prefs: []
  type: TYPE_NORMAL
- en: As we read and understand about the different patterns of structuring application
    using the AngularJS framework, I would highly recommend that you start implementing
    the same application using AngularJS. It is an excellent framework which fulfills
    all the needs of a developer and it is a fully loaded framework.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how HTML5-based JavaScript libraries can be utilized.
    We have combined WebSockets with the Fabric.js library for a collaborative application.
    We have also seen how an application can be divided into parts and created. We
    have seen the development flow and learned about the structuring of the application
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see the behavior of WebSocket and its implementation
    on mobile and tablets.
  prefs: []
  type: TYPE_NORMAL
