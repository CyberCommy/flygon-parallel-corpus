- en: Lab Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to set up an isolated lab to use for the rest
    of this book. We will see how to install tools such as Metasploit Framework in
    order to create shellcodes and exploit development. We will also see how to install
    C language IDE and a compiler for Microsoft Windows, before looking at the Python
    programming language for Windows and Linux. Then, we will look at installing and
    getting familiar with debugger interfaces
  prefs: []
  type: TYPE_NORMAL
- en: Primarily, we will need three machines. The first is an attacker to simulate
    remote attacking, and that will be Linux OS. Here, I prefer Kali Linux because
    it contains all the tools we will need, along with which we will be going to install
    some extra tools. The second will be Ubuntu 14.04 LTS x64, and the third will
    be Windows 7 x64.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the attacker machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Linux victim machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Windows victim machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Linux victim machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Ubuntu for assembly x86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use VMware, KVM, or VirtualBox, but make sure you select the host-only
    network because we don't want to expose those vulnerable machines to the outside
    world.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the attacker machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I said earlier, the attacker machine will be our main base and I prefer
    Kali Linux, but if you are going to use another distribution, then you have to
    install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to make sure that the C compiler is installed; use the `gcc
    -v` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If not, just install it using `$ sudo apt-get install gcc` (Debian distributions)
    or `$ sudo yum install gcc` (Red Hat distributions). Accept and install `gcc`
    with its dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, we are going to use the Python programming language in exploit development.
    Python comes by default with most Linux distributions, and to make sure that it''s
    installed, just use `$ python -V` or just `python`. Then, the Python interpreter
    will start (hit *Ctrl* + *D* to exit):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For text editors, I use `nano` as my CLI text editor and `atom` as my GUI text
    editor; `nano` also comes with most Linux distributions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to install `atom`, go to [https://github.com/atom/atom/releases/](https://github.com/atom/atom/releases/),
    and you will find a beta release and stable release. Then, download the Atom package
    for your system, `.deb` or `.rpm` and install it using `$ sudo dpkg -i package-name.deb`
    (Debian distribution) or `$ sudo rpm -i package-name.rpm` (Red Hat distribution).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what the Atom interface looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to use the Metasploit Framework when creating shellcode and also
    in exploit development. To install Metasploit, I recommend you use the all-in-one
    installer via [https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers](https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers).
    This script is going to install Metasploit along with its dependencies (Ruby and
    PostgreSQL). Look at the next example (installing Metasploit on ARM, but it''s
    the same as Intel):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we fetch the installer using the `curl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we give it an appropriate permission using the `chmod` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, start the installer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: And now it will start downloading Metasploit Framework along with its dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create a database for Metasploit Framework, just use `msfconsole` and follow
    the instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, it will set up a new database and Metasploit Framework starts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we are going to use assembly programming language, let's take a look at the
    assembler (`nasm`) and the linker (`ld`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we need to install `nasm` by using `$ sudo apt-get install nasm` (Debian
    distributions). For Red Hat distributions, according to NASM''s website, you first need
    to add this repository to your `/etc/yum/yum.repos.d` as `nasm.repo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, use `$ sudo yum update && sudo yum install nasm` to update and install
    `nasm` and `$ nasm -v` to get NASM''s version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the command `$ ld -v` to get the linker''s version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Linux victim machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This machine will be Ubuntu 14.04 x64\. You can download it from  [http://releases.ubuntu.com/14.04/](http://releases.ubuntu.com/14.04/).
    Also, we have to follow previous instructions for `gcc`, Python, and `nasm`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's install a very friendly GUI named edb-debugger. You can follow this
    page, [https://github.com/eteran/edb-debugger/wiki/Compiling-(Ubuntu)](https://github.com/eteran/edb-debugger/wiki/Compiling-(Ubuntu))
    or follow the next instruction.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install dependencies, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, clone and compile Capstone 3.0.4, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, clone and compile edb-debugger, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, start edb-debugger using the `$ sudo ./edb` command, which opens the
    following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, edb-debugger has the following four windows:'
  prefs: []
  type: TYPE_NORMAL
- en: The disassembler window converts the machine language into assembly language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Registers window contains all the current contents of all registers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Data Dump window contains the memory dump for the current process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Stack window contains the contents of the stack for the current process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now to the final step. It's necessary to disable **Address Space Layout Randomization** (**ASLR**)
    for learning purposes. It's a security mechanism in Linux, and we will talk about
    it later.
  prefs: []
  type: TYPE_NORMAL
- en: Just execute the `$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we are going to disable the stack protector and NX when using `gcc` when
    compiling is done, using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Windows victim machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we are going to configure a Windows machine as a victim machine, which
    is Windows 7 x64.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to install C compiler and IDE, I suggest *Code::Blocks*, and
    to install it, download the binary from [http://www.codeblocks.org/downloads/binaries.](http://www.codeblocks.org/downloads/binaries) Here,
    I'm going to install `codeblocks-16.01mingw-setup.exe` (the latest version). Download
    and install the `mingw` version.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the first boot of *Code::Blocks*, a window will pop up to configure the
    compiler. Select GNU GCC Compiler, click Set as default, and then click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, the IDE interface will pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a C compiler and IDE. Now, let's move to installing debuggers.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need *Immunity Debugger* for x86; download Immunity from [https://debugger.immunityinc.com/ID_register.py](https://debugger.immunityinc.com/ID_register.py).
    Fill this form in, download, and then install it using the default settings, and
    it will ask you to confirm installing Python. After that we need to install a
    plugin for a debugger named `mona`, created by the Corelan team, [https://www.corelan.be](https://www.corelan.be).
    It''s a wonderful plugin that will help us in exploit development. Download the `mona.py`
    file from their GitHub repository, [https://github.com/corelan/mona](https://github.com/corelan/mona),
    then copy it to `C:\Program Files (x86)\Immunity Inc\Immunity Debugger\Immunit\PyCommands`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is what the Immunity Debugger looks like, and it consists of four major
    windows, exactly as explained in edb-debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we now have Python, and to confirm, just navigate to `C:\Python27\`.
    Then, click on Python, and the Python interpreter will pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's install x64dbg. It's also a debugger for Windows x86 and also x64,
    but when it comes to x86 Windows, there is nothing better than Immunity Debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://sourceforge.net/projects/x64dbg/files/snapshots/](https://sourceforge.net/projects/x64dbg/files/snapshots/),
    then download the latest version. Uncompress it and then navigate to `/release`
    to start **x96dbg**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click x64dbg:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we are looking at the x64dbg interface, which also contains four major
    windows, exactly as explained in edb-debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Ubuntu for assembly x86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is not mandatory for this book, but has been included for if you want to
    try assembly for x86\. The machine used will be Ubuntu 14.04 x86, and you can
    download it from [http://releases.ubuntu.com/14.04/](http://releases.ubuntu.com/14.04/).
  prefs: []
  type: TYPE_NORMAL
- en: We have to follow the previous instructions to install NASM, GCC, the text editor,
    and I'm going to use GDB as my debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are going to run vulnerable applications for doing exploit research on
    our victim machines and injecting shellcodes, we have to set up a secure network
    after configuring each machine. This is done using a host-only network mode to
    make sure that all machines are connected together, but that they will still be
    offline and not exposed to the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using VirtualBox, then go to Preferences | Network and set up Host-only
    Networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, set up an IP range that doesn''t conflict with your external IP, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IP address**: `192.168.100.1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Netmask**: `255.255.255.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, you can activate the DHCP server from the DHCP Server tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see it in your `ifconfig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, activate this network (for example, `vboxnet0`) on your guest machine''s
    adapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are using VMware Workstation, go to Edit | Virtual Network Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you can make sure that the host-only network is up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, from the guest machine settings, go to Network Adapter, and select Host-only:
    A private network shared with the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we went through installing three major operating systems:
    one to simulate the attacker machine to try remote exploitation, the second was
    Ubuntu x64, and the third was Windows 7 the last two operating systems being victims.
    Also, there was an extra machine to try assembly x86.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, we went through disabling some security mechanisms in Linux, only for
    learning purposes, then we went through network configuration.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, let's take a big step by learning assembly, which will
    enable us to write our own shellcodes and make you really understand how a computer
    executes every command.
  prefs: []
  type: TYPE_NORMAL
