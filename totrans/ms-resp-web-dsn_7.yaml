- en: Chapter 7. Meaningful Typography for Responsive Web Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I said in one of my talks at the Dayton Web Developers meeting:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"With a solid typographic scale you might even get away with not using a single
    image on your website."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The power of typography has got to be one of the most underappreciated assets
    in web design. Admittedly, we are seeing more and more designs where typography
    has been strongly considered, playing a major role in creating the intended atmosphere
    of a website or app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, our focus is going to be on a few aspects, tips, and tricks
    about the things we need to consider for RWD from a typography stand point.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to talk about:'
  prefs: []
  type: TYPE_NORMAL
- en: Pixels, ems or rems for typography?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating relative font sizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Modular Scale for a harmonious typography.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Modular Scale for typography.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web fonts and how they affect RWD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `FitText.js` for fluid-size headings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `FlowType.js` to improve legibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixels, ems, or rems for typography?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is difficult to decide whether to use pixels, ems, or rems for typography.
    It's a matter of style. Some web designers/developers still use pixels as their
    unit to declare font sizes. It's just a lot easier to wrap our heads around the
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: The issues with setting font sizes in pixels were basically on legacy IEs, where,
    if the user wanted to zoom in on the page for whatever reason, the text would
    stay fixed at the pixel size it was given.
  prefs: []
  type: TYPE_NORMAL
- en: Now, that's a thing of the past as far as modern browsers are concerned. When
    you zoom in any modern browser, if it's zoomed in enough, it will trigger the
    media queries, hence showing the mobile version of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem with pixel-based font sizing is that it's hard to scale and
    maintain. What this basically means is that we'd have to declare the font sizes
    of many more elements in every media query, over and over and over.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, we have relative units, ems and rems, which are pretty much
    the recommended way of setting our font sizes.
  prefs: []
  type: TYPE_NORMAL
- en: However, the problem with ems is that we have to keep track (mentally, in CSS/HTML
    comments, or in a text file somewhere) of the sizes of the parent containers,
    which can easily turn into a font management nightmare. A font size in ems depends
    on the font size of its parent container. So if we have different levels of nested
    containers, things could get ugly really fast because keeping track of the parent
    container's font sizes is not easy.
  prefs: []
  type: TYPE_NORMAL
- en: But then *rem*s came along. Rem means *root em*. The *root* is the `<html>`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rems bring pretty much the best of both worlds: we can declare font sizes in
    rems with the same mental model that we declare pixels, but with the benefit of
    using relative units like ems. The only problem with using rems is that legacy
    browsers don''t support this unit, so a pixel-based, font size fallback value
    needs to be accounted for. This is where a short Sass mixin comes and saves the
    day.'
  prefs: []
  type: TYPE_NORMAL
- en: But let's start with the core strategy of this chapter before trying any Sass
    tricks.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating relative font sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember the RWD magic formula we mentioned in [Chapter 3](ch03.html "Chapter 3. Mobile-first
    or Desktop-first?"), *Mobile-first or Desktop-first?*:'
  prefs: []
  type: TYPE_NORMAL
- en: (target ÷ context) x 100 = result %
  prefs: []
  type: TYPE_NORMAL
- en: There's also another similar magic formula to calculate relative font sizes
    (ems) when the font size has been set in pixels. The only difference is that we
    don't multiply by 100.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is that formula:'
  prefs: []
  type: TYPE_NORMAL
- en: target ÷ context = result
  prefs: []
  type: TYPE_NORMAL
- en: The *target* is the font size defined in pixels. The *context* is the font size
    defined in the parent container. The *result* is the value defined in ems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example considering that the font size in the parent container,
    the body in this example, is 16px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To calculate the relative font size, we use the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*30px ÷ 16px = 1.875em*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So our CSS rule will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We would have to do this for every font size in our design.
  prefs: []
  type: TYPE_NORMAL
- en: This is fine in terms of understanding the math. However, the real value is
    in the thought process that goes into creating those pixel-based values in the
    first place. This is where the Modular Scale comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Modular Scale for a harmonious typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Modular Scale was created by Tim Brown. There are different ways to create
    a Modular Scale for typography. In our example, we're going to create a Modular
    Scale using two base numbers and one ratio. The multiplication of these numbers
    creates a scale that's harmonious and proportional between all the values.
  prefs: []
  type: TYPE_NORMAL
- en: The most well-known ratio is the *golden ratio* also known as the *golden section*,
    *divine proportion*, and so on. Its value is *1.618*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to avoid unnecessary mathematics, the golden ratio is based on the Fibonacci
    sequence: 1, 1, 2, 3, 5, 8, 13, 21, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These numbers have the following pattern: the next number is the result of
    adding up the two numbers before it. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: 0 + **1** = 1 + **1** = 2 + **1** = 3 + **2** = 5 + **3** = 8 + **5** = 13 +
    **8** = 21…
  prefs: []
  type: TYPE_NORMAL
- en: The idea here is to understand the intent of creating a set of numbers that
    are harmonious when used together. We are going to do the same to create a typographic
    scale to use in our projects with the Modular Scale web app and forget about *manually*
    calculating the relative font sizes for your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s check out the Modular Scale web app built by Tim Brown and Scott
    Kellum: [http://www.modularscale.com/](http://www.modularscale.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the web app opens, there are three steps we need to do in order to create
    our Modular Scale:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the first base number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the second base number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a ratio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Modular Scale can be used in anything that uses a value of some sort, not
    only typography. It can be used for `padding`, `margin`, `line-height`, and so
    on. Our focus in this chapter is, however, on typography.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the first base number
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recommended way to define this first number is to use the body text size,
    that is, the font size that is used in the paragraphs. But keep in mind that using
    the body text size as the first base number is not mandatory. We can use our typeface's
    x-height, or some other length within that typeface, that we think could be a
    good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Although we can choose any font size, let's start with the default one we all
    know all browsers use, 16px. So we type `16px` in the first base field.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the plus icon and add a second base field.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't worry about the font size preview of the app yet, as you can see, as we
    type numbers for our base values, the font sizes on the right preview pane change.
    We'll get to that in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the second base number
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second base field is what I call a *magic number* because this number is
    completely subjective and arbitrary, however, it's tightly related to the project
    we're working on.
  prefs: []
  type: TYPE_NORMAL
- en: When I say *tightly related* I mean something like using the width of the main
    container, for example, 960px, 980px, 1140px, and so on. Alternatively, it can
    also be the number of columns used in the grid, such as 12 or 16\. It can also
    be the width of a column at the maximum width of the site, such as 60px, or even
    the gutter spacing, say 20px.
  prefs: []
  type: TYPE_NORMAL
- en: This *magic number* is anything we want it to be, but it's directly related
    to our project in one way or another. For this example, let's say we're going
    to target screens at a maximum width of 1280px, so our main container is going
    to have a maximum width of 1140px. So let's type `1140px` in the second base field.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a ratio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is where the magic takes place. Choosing a ratio means that this ratio
    will be multiplied by the base numbers creating a scale of values that are proportionally
    related.
  prefs: []
  type: TYPE_NORMAL
- en: The ratios are based on musical scales, and in that list is the golden ratio
    (1.618) as well, if we decide to use it. From the **Ratios** dropdown, select
    **1:1.618 – golden section** ratio.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! We have now created our first Modular Scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'The font sizes provided by this Modular Scale are totally harmonious because
    they are proportionate to each other based on relevant values that are directly
    related to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: The ideal body font size is 16px
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum width of our main container is 1140px
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Golden Ratio is 1.618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our typography now has a solid modular foundation, let's use it.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Modular Scale for typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you click on the **Table** view, all the text is now gone and we're left
    with a list of font sizes—ranging from ridiculously small values to just as ridiculously
    large values. But that's ok. That's the power of a modular scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what we see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Modular Scale for typography](img/B02102_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding image, there are three columns:'
  prefs: []
  type: TYPE_NORMAL
- en: The first column shows the font size in pixels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second column shows the font size in ems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third column shows the font size if the base was 16px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we need to do is focus on the first and second columns only. The highlighted
    row that says 16px, or 1em, is going to be the font size of our paragraphs. 16px
    is the default font size in most browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we define our header elements. Let''s say we define only `h1`, `h2` and
    `h3`. This means that we''re going to select the rows above 16px that have larger
    font sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<h1>`: **39.269px** that is 2.454em'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<h2>`: **25.888px** that is 1.618em'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<h3>`: **24.57px** that is 1.517em'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the `<small>` element, if we have any disclaimers on our site, we select
    the font size right below 16px:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<small>`: **9.889px** that is 0.618em'
  prefs: []
  type: TYPE_NORMAL
- en: That's it! All the numbers in this Modular Scale are harmonious and when used
    together will provide a clear visual hierarchy, and a relationship difficult to
    obtain through other methods.
  prefs: []
  type: TYPE_NORMAL
- en: Here's an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice how I'm including the mobile-first Sass mixin as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The Modular Scale looks like this on small screens (510px wide):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Modular Scale for typography](img/B02102_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And like this on large screens (850px wide):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Modular Scale for typography](img/B02102_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The only potential problem we have here is what I mentioned before about using
    ems: keeping track of the font size of the parent elements can turn into a font
    management nightmare.'
  prefs: []
  type: TYPE_NORMAL
- en: Using pixels is a no-go because of its scalability issues in legacy browsers.
    Using rems, however, keeps things in the "relative font size" realm, while providing
    a pixel-based mentality but without the scalability problems. This allows us to
    support legacy browsers that do not support rems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a demo I created for this in CodePen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://codepen.io/ricardozea/pen/0b781bef63029bff6155c00ff3caed85](http://codepen.io/ricardozea/pen/0b781bef63029bff6155c00ff3caed85)'
  prefs: []
  type: TYPE_NORMAL
- en: The rems-to-pixels Sass mixin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we need is a Sass mixin that allows us to set the font values without a
    specific unit and the mixin takes care of adding the font sizes for both rem-based
    for modern browsers, and the pixel-based for legacy browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the Sass mixin created by Chris Coyer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I made a small modification to the original name of the mixin from using dash-separated
    to camelCase. The reason I did this is because it's easier to spot the name of
    a mixin from a class name when scanning the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This example uses the same markup used in an earlier chapter, so I'm going to
    show you only the SCSS and some screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SCSS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: We're setting the root font size to 62.5 percent, which reduces the font size
    to 10px. This makes declaring the font values a lot easier. For example, a font
    size of 1.2rem is the same as 12px, .8rem is 8px, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to move the decimal dot from the pixel-based values one spot to the
    left when declaring the font size in rems. For example, according to our Modular
    Scale the `<h1>` pixel size is 39.269px, so when declaring the font size in rems,
    we declare it as 3.9269, *without a unit*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The compiled CSS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the Modular Scale using the rems-to-pixels mixin looks like on
    small screens (510px wide):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The rems-to-pixels Sass mixin](img/B02102_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what it looks like on large screens (850px wide):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The rems-to-pixels Sass mixin](img/B02102_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s a demo I created for this in CodePen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://codepen.io/ricardozea/pen/8a95403db5b73c995443720475fdd900](http://codepen.io/ricardozea/pen/8a95403db5b73c995443720475fdd900)'
  prefs: []
  type: TYPE_NORMAL
- en: The examples we just saw are using the system font Arial. Let's go ahead and
    spruce these examples up with some web fonts to give them a bit more *character*.
  prefs: []
  type: TYPE_NORMAL
- en: Web fonts and how they affect RWD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web fonts are almost mandatory to use nowadays, and I say *almost* because we
    need to be mindful of the implications they bring to our projects, and if necessary,
    we may actually not use them at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get into the nitty gritty of how to work with web fonts, here are
    a few web font resources that may be helpful for many of you:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Font Squirrel** ([http://www.fontsquirrel.com/](http://www.fontsquirrel.com/)):
    I''ve used this service extensively with great success. To use the fonts, you
    need to download the file(s) and then use with `@font-face` in your CSS. They
    have the best web font generator tool you''ll ever find ([http://www.fontsquirrel.com/tools/webfont-generator](http://www.fontsquirrel.com/tools/webfont-generator))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Fonts** ([https://www.google.com/fonts](https://www.google.com/fonts)):
    I can''t talk about web font resources without mentioning Google Fonts. If I can''t
    find it on Font Squirrel I come here, and vice versa. You can either download
    the font file(s) or use JavaScript. The fonts used in the following examples were
    downloaded from Google Fonts ([https://github.com/google/fonts/tree/master/ofl/oswald](https://github.com/google/fonts/tree/master/ofl/oswald)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adobe Edge Web Fonts** ([https://edgewebfonts.adobe.com/](https://edgewebfonts.adobe.com/)):
    This is also a great tool. This service is powered by TypeKit (the first web font
    service). I''ve used TypeKit extensively as well. You can''t download the fonts
    though, you have to use JavaScript instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s see the pros and cons of using web fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: They help accentuate the brand and create consistency across different media.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When used correctly, they make designs look more appealing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no need to use image replacement techniques anymore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This keeps the text as HTML making the content more accessible and *indexable*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy browsers support web fonts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great resources for free fonts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these in turn help keep the markup cleaner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: They slow down the website/app due to HTTP requests or their dependency on third-party
    servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all web fonts are legible at small and/or large sizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If legacy browsers are required to support, there are more files to manage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Licensing the use of a font requires some sort of payment: monthly, per font
    family, per font style, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some free fonts are not well built.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are rendering side effects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flash Of Unstyled Text** (**FOUT**): On modern browsers, when the page loads,
    the text is first rendered on the screen with a system font, and then a second
    later it''s swapped and styled with the web font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flash Of Invisible Text** (**FOIT**): On legacy browsers, when the page loads,
    the text is not visible but a second later it''s rendered with the web font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are others not worth getting into, such as **Flash Of Fallback Text**
    and **Flash Of Faux Text** (**FOFT**).
  prefs: []
  type: TYPE_NORMAL
- en: How to tackle all the "flash-of-whatever-texts" is not part of the scope of
    this section. However, I encourage you to read about Font Load Events in Zach
    Leatherman's article on the Opera blog called *Better @font-face with Font Load
    Events* ([https://dev.opera.com/articles/better-font-face/](https://dev.opera.com/articles/better-font-face/)).
  prefs: []
  type: TYPE_NORMAL
- en: Sass mixin for implementing web fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To implement web fonts, we need to use the `@font-face` directive in our CSS…
    well, SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@font-face` declaration block looks like this in its vanilla CSS form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you're using more than one style or font family, you need to repeat
    the whole `@font-face` declaration block for each font file. This is not very
    DRY (Don't Repeat Yourself).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Web fonts are expensive in terms of file size and server requests, so please
    use web fonts moderately. The more you use, the slower your website/web app will
    become.
  prefs: []
  type: TYPE_NORMAL
- en: Yes that's a pretty hefty piece of CSS to handle web fonts, oh man.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep our sanity, let''s turn the prior `@font-face` CSS declaration block
    to a Sass mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The usage is a single line of code to call the font file. Let''s use the typeface
    Oswald:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Using it on any element is a matter of adding the font name at the beginning
    of the font stack, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need to include more than one font file, just add another line calling
    the mixin but specifying the other font name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding two lines of code will compile to the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s a pretty nifty way of creating all that CSS with a mere two lines of
    code, eh? However, if we want to make things right, let''s analyze what we''re
    doing here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re supporting legacy browsers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IE8 and below with a `.eot` font.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Old Safari on Android in iOS with a `.ttf` font.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Old iOS for the, practically forgotten, iPhone 3 and below with a `.svg` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modern browsers only need a `.woff` font. According to CanIUse.com, `.woff`
    font files are 99 percent supported, with the exception of Opera Mini at the time
    of writing this book ([http://caniuse.com/#search=woff](http://caniuse.com/#search=woff)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So the question is: Can we gracefully degrade the experience for legacy browsers
    and OS''s and let them use a system font instead?'
  prefs: []
  type: TYPE_NORMAL
- en: Sure we can!
  prefs: []
  type: TYPE_NORMAL
- en: 'After optimizing the mixin to use only `.woff` fonts, this is what it looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The usage is exactly the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiled CSS is much shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Using it on a couple of elements looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Serving only the `.woff` font puts a lot less file management on our plate,
    which helps free our brains from unnecessary tasks and allow us to focus on what
    matters most: building a memorable experience. Not to mention, it makes our CSS
    code more streamlined and scalable.'
  prefs: []
  type: TYPE_NORMAL
- en: But wait, we're letting legacy browsers gracefully degrade to system fonts,
    and we still need to define the font sizes in pixels for them!
  prefs: []
  type: TYPE_NORMAL
- en: Pixels-to-rems Sass mixin to the rescue!
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to see the base-10 model in the `<html>` tag for easier calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let''s declare the font sizes and font families:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiled CSS looks to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We're declaring two separate font sizes in the same rule, therefore we can't
    use the font shorthand in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, by harnessing the superpowers of two simple Sass mixins, we can easily
    embed web fonts and use rems for our font-sizes while providing pixel-based font
    sizes for legacy browsers.
  prefs: []
  type: TYPE_NORMAL
- en: This is a great example of robust scalability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a demo I created for this in CodePen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://codepen.io/ricardozea/pen/9c93240a3404f12ffad83fa88f14d6ef](http://codepen.io/ricardozea/pen/9c93240a3404f12ffad83fa88f14d6ef)'
  prefs: []
  type: TYPE_NORMAL
- en: Without losing any momentum, let's change gears and talk about how to improve
    the legibility of our pages by accomplishing a minimum line length with the awesome
    FlowType.js jQuery plugin by Simple Focus.
  prefs: []
  type: TYPE_NORMAL
- en: Using FlowType.js for increased legibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most compelling editorial principles states that the ideal line length
    for the most legible typography is between 45 and 75 characters.
  prefs: []
  type: TYPE_NORMAL
- en: That's a pretty decent range if you ask me. However, actually making your paragraphs
    long enough, or short enough for that matter, is like a "blind leading the blind"
    game. How can we tell whether the combination of the width of a container and
    its font size actually meet the 45 to 75 characters recommendation? Also, on small
    or medium screens, how can you tell this is the case?
  prefs: []
  type: TYPE_NORMAL
- en: Tricky one, eh?
  prefs: []
  type: TYPE_NORMAL
- en: Well, no need to worry because with FlowType.js, we can address these issues.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the plugin from [http://simplefocus.com/flowtype/](http://simplefocus.com/flowtype/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need is the HTML, so here''s the markup we''re going to
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once you get comfortable with FlowType.js, you might actually start thinking,
    "If FlowType automatically modifies the font size at pretty much any viewport
    width, I don't think I need to declare any font sizes in my SCSS! After all, they
    are going to get overwritten by FlowType."
  prefs: []
  type: TYPE_NORMAL
- en: Well, we do need to set the font size regardless, because if FlowType.js doesn't
    load, we'd be left at the mercy of the browser's default styles, and we designers
    do not want that.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that being said, here''s the SCSS to declare the necessary font sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This will compile to the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This is where the magic happens. We create a jQuery function where we can specify
    which element(s) to target. This function can be placed either inside a separate
    JavaScript file or within the markup.
  prefs: []
  type: TYPE_NORMAL
- en: In our example we're telling FlowType.js to apply the resizing of the font to
    the `<html>` element. Since we're using relative font size units, rems, all the
    text will automatically resize/adjust at any screen width, maintaining the ideal
    line length.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the jQuery function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Defining thresholds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There''s a potential problem with the solution we just saw: FlowType.js will
    modify the font size of the paragraphs indefinitely. In other words, on small
    screens the text will be extremely small and on large screens it will be way too
    big.'
  prefs: []
  type: TYPE_NORMAL
- en: We can solve this issue with two separate threshold approaches or a combination
    of both.
  prefs: []
  type: TYPE_NORMAL
- en: Now, one thing we need to make clear is that this part will require some tweaking
    and adjusting in order to get the best results, there aren't specific values that
    will work for all situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use the following approach:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the minimum and maximum widths of the container or element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the minimum and maximum font sizes of the container or element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threshold widths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Defining the minimum and maximum widths will tell FlowType.js at which points
    it should stop resizing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the width thresholds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The thresholds I selected work specifically for this example and it may not
    necessarily work for other situations. Tweak and test until you get the ideal
    widths that work with the recommended 45-75 characters per line recommendation.
  prefs: []
  type: TYPE_NORMAL
- en: Threshold font sizes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like with the width thresholds, defining the minimum and maximum font sizes
    will tell FlowType.js what the smallest and largest font sizes it should scale
    the text to.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re also going to declare our own font size using the `fontRatio` variable;
    the higher the number, the smaller the font, and the lower the number, the larger
    the font. If this feels counterintuitive, look at it this way: the higher the
    number, the higher the compression (thus making it small) and the lower the number,
    the lower the compression (thus making it large).'
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the `fontRatio` value is an *eyeballing* exercise, so tweak and test
    like there's no tomorrow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the font sizes values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's no need to include a comma after the last value in the list.
  prefs: []
  type: TYPE_NORMAL
- en: FlowType.js just plain rocks man!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a demo I created for this in CodePen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://codepen.io/ricardozea/pen/c2e6abf545dbaa82a16ae84718c79d34](http://codepen.io/ricardozea/pen/c2e6abf545dbaa82a16ae84718c79d34)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So here we are, levelled up in typography for RWD. Is there more about typography?
    You bet! This amazing subject is a whole industry in itself, without it we wouldn't
    be reading this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now say that we understand why using relative units for typography is
    a good approach: scalability. Also, using our little magic formula, we can calculate
    relative font sizes for each of our text elements in our design, but why go through
    all that trouble? Modular Scale for typography saves the day in that regard, and
    it injects our projects with awesome typographic harmony. Who knows, maybe we
    may not need to use images at all!'
  prefs: []
  type: TYPE_NORMAL
- en: Brands can now be extended to the web via web fonts, but we need to be careful
    and consider the impact of using them on our sites/apps. Also, as far as modern
    browsers go, we only need to use a single file type (WOFF font files), which make
    things a lot easier to manage—for browsers to download and for users to enjoy.
  prefs: []
  type: TYPE_NORMAL
- en: FlowType.js enhances our headers and body text while maintaining a good level
    of legibility.
  prefs: []
  type: TYPE_NORMAL
- en: Now, an important part of RWD is (believe it or not) doing things like we did
    many, many years ago. In the next chapter, we're going to keep things simple and
    we're going to talk about RWD in e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Time to go back in time!
  prefs: []
  type: TYPE_NORMAL
