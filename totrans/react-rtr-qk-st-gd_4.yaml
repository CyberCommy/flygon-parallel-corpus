- en: Using the Redirect and Switch Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redirecting the user from one route to the other can be achieved using React-Router's
    `<Redirect>` component. In traditional websites, where pages are rendered on the
    server side, the web server hosting the application is configured with rewrite
    rules that redirect the user to a different URL. This redirection could be used
    when the content has moved to a new page, and in cases where certain pages of
    the site are still under construction. HTTP redirection is an expensive operation
    and thus the application's performance is also affected.
  prefs: []
  type: TYPE_NORMAL
- en: In **single–page application **(**SPA**), the redirection occurs on the browser,
    where the user is redirected to a different route based on a certain condition.
    This redirection is faster, since there's no HTTP roundtrip involved, and the
    transition is similar to navigating from one route to the other using the `<Link>`
    or `<NavLink>` components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics are discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Redirect>` component: Redirecting the user from one route to the other route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Protecting routes and authorization: A use case where the user is redirected
    to the login page when an attempt is made to access a protected route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Switch>` component:  Rendering the first matching `<Route>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adding a 404 Page Not Found page: A use case where `<Switch>` and `<Route>`
    or `<Switch>` and `<Redirect>` components are used to render a 404 page when none
    of the `<Route>` components match the browser''s URL path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The <Redirect> component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<Redirect>` component is included in the `react-router-dom` package. It
    helps in redirecting the user from the component where it''s included to the route
    specified in the `''to''` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding scenario, when `HomeComponent` is rendered (based on a `<Route>`
    match), the user is redirected to the `'/dashboard'` route. For example, when
    the user accesses the home page (at path `'/'`), the `<Route>` with the path `'/'`
    renders the previous component and then the user is immediately redirected to
    the `<Route>` with its path value as `'/dashboard'`. This is similar to how a
    `<Link>` or `<NavLink>` component with a `'to'` prop is used to navigate the user
    to a different route. Here, instead of triggering the navigation as a result of
    a user action, the redirection happens when the component is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: The redirection example mentioned previously is ideal in scenarios where certain
    pages in the application have moved to a different directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `<Redirect>` component is similar to other components in React-Router, such
    as `<Route>` and `<Link>`. As observed previously, it's a React component that
    can be included in the render function. Also, the `<Redirect>` component accepts
    a similar set of props to the `<Link>` component.
  prefs: []
  type: TYPE_NORMAL
- en: The to prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The to prop is used to specify the route to which the user should be redirected.
    If a matching `<Route>` is found, the user is redirected to the specified path
    and the corresponding component is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The to prop can also accept an object that specifies the values for the `pathname`,
    `search`, `hash`, and `state` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the `<Link>` component, the previously mentioned properties are
    specified in the to prop of the `<Redirect>` component. Notice that the state
    property has the value `{ from: match.url }`.  Here, `match.url` provides the
    current value of the browser''s URL path and this value is then provided to the
    rendered component when the redirection occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The rendered component can then read the state information using `this.props.location.state`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `DashboardComponent` is rendered as a result of a
    redirection from the `HomeComponent`. The value of `location.state.from` shares
    the path information to the redirected component about the page from which the
    redirection occurred. This is useful when you have a generic page to which you
    want to be redirected and the redirected page has to display information about
    the path from which the redirection occurred. For example, when an error occurs
    in the application, the user should be redirected to a page that renders the error
    message, providing information on the page where the error occurred. In this case,
    the state information could include properties—`errorMessage` and `from`; the
    latter's value as `match.url` that is the page where the error occurred.
  prefs: []
  type: TYPE_NORMAL
- en: If the redirected `<Route>` is not found, the browser's URL is updated and no
    errors are thrown. This is by design; ideally, if there is no matching route,
    the user should be redirected to a `404` or a `Page Not Found` page. The `<Route>`
    to render when there's no match is discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the component, when you try to redirect to the same route, React-Router
    throws a warning message Warning: You tried to redirect to the same route you''re
    currently on: `"/home"`. This check ensures that the redirect does not lead to
    an infinite loop.'
  prefs: []
  type: TYPE_NORMAL
- en: It's also possible to run into a situation where the redirected component includes
    a `<Redirect>` in its render method, redirecting back to the same route, that
    is, following this route redirect `path: /home => /dashboard => /home`. This runs
    into a loop until React stops rendering the component; React then throws an error
    Maximum update depth exceeded. This can happen when a component repeatedly calls
    `setState` inside `componentWillUpdate` or `componentDidUpdate`. React limits
    the number of nested updates to prevent infinite loops. React-Router uses state
    to keep track of the user's location in the application journey and thus the preceding
    error occurs when React tries to update the state several times because of redirection.
    When working with redirection, you need to ensure that it does not lead to an
    infinite loop of redirection.
  prefs: []
  type: TYPE_NORMAL
- en: The push prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<Redirect>` component redirects the user to the given path by calling
    `history.replace(<path>)`, that is, replacing the current entry in the history
    stack with the new path. By specifying the push prop in the `<Redirect>` component, history.push
    is called instead of `history.replace`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Protecting routes and authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The routes defined using the `<Route>` component can be accessed through the
    browser's URL, by navigating to the route using `<Link>` or `<NavLink>`, or by
    redirecting the user with the `<Redirect>` component. However, in most applications,
    some of the routes should be accessible only to authorized or logged-in users.
    For example, say the `/user` path displays the logged-in user's data; this path
    should be protected and only the logged-in user should be allowed to access the
    route. In these cases, the `<Redirect>` component comes in handy for redirecting
    the user to the login page (at the path `/login`) when you try to access the path
    `/user`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, let''s create a component called `UserComponent`, which
    will be rendered when you try to access the path `/user`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code snippet, we can see that `UserComponent` displays state
    information available in t`his.props.location` and the LOGOUT button.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether the user has logged in, a request to the server should be
    made to check if the user''s session exists. However, in our case, a check to
    see if the user is logged in would be made by referring to a variable in the browser''s
    `localStorage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, the component's state property, `isUserLoggedIn`, will be updated with
    the value stored in the localStorage variable of the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to use this state information in the render function of the
    `UserComponent` class and redirect the user using the `<Redirect>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, the value of the state property, `isUserLoggedIn`, is checked, and, if
    it evaluates to false, or if it's not found, then the user is redirected to the
    route with the path `'/login'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step would be to implement the `logout` function, which is called
    when the user clicks the LOGOUT button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Logging the user out involves removing the `localStorage` variable and updating
    the state property `isUserLoggedIn` to `'false'`.
  prefs: []
  type: TYPE_NORMAL
- en: With these changes, when the state property—`isUserLoggedIn`—is set to false,
    the `UserComponent` is rerendered and the user is redirected to the path `/login`,
    asking the user to provide credentials to access the page. Also, now when you
    try to access the path `/user` by the entering the same in the browser's address
    bar, the `<Route>` with its path prop `/user` would match. However, when `UserComponent`
    is rendered, the state property `isUserLoggedIn` would evaluate to false, redirecting
    the user to the `/login` page.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting with a callback route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you try to access a protected `<Route>`, you will be redirected to the
    login page to provide credentials. After providing credentials, you should be
    redirected to the page that you tried to access earlier. For example, when you
    try to access the protected route at the path `/stocks`, you would be redirected
    to the path `/login`, and then, on providing correct credentials, you should be
    redirected to the same path `/stocks` that you tried to access earlier. However,
    from the previous example, you would be redirected to the path `/user` and the
    user's profile information would be displayed. The desired behavior is to be redirected
    to the protected route `/stocks` instead of the path `/user`.
  prefs: []
  type: TYPE_NORMAL
- en: This can be accomplished by providing state information when redirecting the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `StocksComponent` (a component rendered as a result of a `<Route>` match, `/stocks`),
    when you redirect the user to the login page, provide the state information in
    the to prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the component's render function, the user is redirected to the login page
    using the `<Redirect>` component. The `<Redirect>` component here includes a to
    prop specifying the `pathname` to which the user should be redirected, and it
    also includes a state object mentioning the `callbackURL` property. The value
    of the `callbackURL` property is `match.url`, that is, the current browser URL
    path `/stocks`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This state information can then be used in the `LoginComponent` to redirect
    the user to the path `/stocks`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, when the user provides credentials to access the protected route, the
    `<Redirect>` component redirects the user to the path mentioned in the `state.callbackURL`.
    If `callbackURL` is not available, the user would be redirected to the default
    route, which is redirected to the path `/user`.
  prefs: []
  type: TYPE_NORMAL
- en: A combination of Route component props, `match.url`, and location.state can
    be used to redirect the user to the protected route that was requested earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Exclusive routing with the <Switch> component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a URL is presented to `<BrowserRouter>`, it will look for routes created
    with `<Route>` components and render all the routes that match the browser''s
    URL path. For example, consider the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, both the routes with the paths `/login` and `/:id` match the `/login` URL
    path. React-Router renders all the `<Route>` components that match the URL path.
    However, to render only the first matching route, the library provides the `<Switch>`
    component.  The `<Switch>` component accepts a list of `<Route>` components as
    its children and it renders only the first `<Route>` that matches the browser''s
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By wrapping a list of <Route> components inside a <Switch> component, React-Router
    sequentially searches for a <Route> matching the browser's URL path. Once a matching  <Route>
    is found, <Switch> stops the search and renders the matching <Route>.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the first <Route> in <Switch> is rendered only if
    the browser's URL path is /login and paths other than /login (/123, /products,
    /stocks and so on) would match the second route and render the corresponding component.
  prefs: []
  type: TYPE_NORMAL
- en: If the order of the previous two <Route> components is swapped (that is, the
    <Route> with path /:id is listed above the <Route> with path /login), the <Route>
    with path /login would never get rendered because <Switch> allows only one and
    the first matching route to be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering of the <Route> components in <Switch>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ordering of the `<Route>` components inside `<Switch>` matters because
    the `<Switch>` component looks for a matching `<Route>` sequentially, and once
    a `<Route>` matching the browser''s URL is found, it stops the search. This behavior
    may not be desired and you may want to render another route listed inside `<Switch>`.
    However, it can be corrected by changing the order in which `<Route>` are listed
    in `<Switch>`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following examples, some of the common mistakes in listing the <Route>
    components in `<Switch>` are mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: <Route> with path '/' as the first child in <Switch>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If the browser's URL path is `/dashboard`, it would match the first `<Route>`
    with path `/` and the `<Route>` with path `/dashboard` would never be matched
    and rendered. To fix this, either include the exact prop or list the `<Route>`
    with path `/` as the last entry in `<Switch>`.
  prefs: []
  type: TYPE_NORMAL
- en: <Route> with path params
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following code snippet, a `<Route>` with a path param is listed as the
    second entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, `<Route>` with path `/github` would match the URL path
    `/github` as well as path `/github/mjackson`; thus, the first `<Route>` is rendered
    even when a `<Route>` with a specific path is available. To fix this, either provide
    the exact prop or list the `<Route>` with path `/github` below the `<Route>` with
    path `/github/:userId`.
  prefs: []
  type: TYPE_NORMAL
- en: From both cases mentioned in the previous paragraph, listing `<Route>` components
    with specific paths above `<Route>` components with generic paths would avoid
    undesirable results.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a 404 – Page Not Found
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, the `<Switch>` component looks through all the `<Route>` components
    sequentially for a match and stops the search once a `<Route>` with its path matching
    the browser's URL is found. This is unlike a list `<Route>` in a page, where every
    matched `<Route>` is rendered. The `<Switch>` thus becomes a good fit for rendering
    a `Page Not Found` page, that is, rendering a component when none of the `<Route>` mentioned
    as children to `<Switch>` match the browser's URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s include a `<Route>` with no path prop as the last entry in `<Switch>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code snippet, we can see that when none of the `<Route>` with
    a path prop match the browser's URL, the last `<Route>` without the path prop
    would match and render.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to include the `Page Not Found <Route>` as the last entry because
    the `<Switch>` component stops the search once a matching `<Route>` is found.
    In the preceding case, if the `<Route>` with no prop is included above other `<Route>`,
    then the `Page Not Found` route would be rendered even if a `<Route>` matching
    the browser's URL was present in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could also specify a `<Route>` with its path prop value as `*` instead
    of `<Route>` with no path prop, to render a `Page Not Found` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In both cases, the path would match the browser's URL and render the `Page Not
    Found` page.
  prefs: []
  type: TYPE_NORMAL
- en: Using <Redirect> in <Switch> to redirect to a Page Not Found page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<Switch>` component''s children can include a list of `<Route>` and `<Redirect>`
    components as well. The `<Redirect>` component, when included as the last entry
    in `<Switch>`, will redirect the user to the given path if none of the `<Route>` mentioned
    above the `<Redirect>` component match the browser''s URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<Redirect>` component mentioned previously redirects the user to the `<Route>`
    with path `/home`. This is similar to displaying a `404: Page Not Found page`;
    instead of displaying the component in line, the user is redirected to a different
    route.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the browser's URL path is `/dashboard`, the first two routes
    (with the paths `/login` and `/user`) wouldn't match, and thus the user is redirected
    using the `<Redirect>` component mentioned as the last entry in `<Switch>`.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting from an old path to a new path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<Redirect>` component can also be used to redirect the user from a given
    path to a new path. The `<Redirect>` component accepts a prop,  from, which can
    be used to specify the path that should match the browser''s URL from which the
    user should be redirected. Also, the path that the user should be redirected to
    should be specified in the to prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding example, we can see that when the browser's URL path is `/home`,
    the `<Redirect>` component with the from prop would match the given path and redirect
    the user to the `<Route>` with the path `/login`.
  prefs: []
  type: TYPE_NORMAL
- en: The `<Redirect>` component's from prop is useful when some of the pages on the
    site have been moved to a new directory. For example, if the user page has been
    moved to a new directory path, `settings/user`, then `<Redirect from="/user" to="/settings/user"
    />` will redirect the user to the new path.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `<Redirect>` component can be used to redirect the user from the current
    rendered route to a new route. The component accepts props: to and push. This
    redirection could be used when the components in the application have moved to
    a different directory, or when the user is not authorized to visit the page. The
    `<Redirect>` component is helpful when a user visits a protected route and only
    authorized users are allowed to view the page.
  prefs: []
  type: TYPE_NORMAL
- en: The `<Switch>` component is used when only one `<Route>` out of a list of `<Route>`
    should be rendered. The `<Switch>` component accepts a list of `<Route>` and `<Redirect>`
    components as its children, and sequentially searches for a matching `<Route>`
    or a `<Redirect>` component. When a match is found, `<Switch>` renders the component
    and stops looking for a matching path.
  prefs: []
  type: TYPE_NORMAL
- en: 'This behavior of `<Switch>` can be leveraged to build a `404: Page Not Found`,
    which would be rendered when none of the `<Route>` components listed in `<Switch>`
    match the browser''s URL path. By listing a `<Route>` without any path prop as
    the last entry in `<Switch>`, the `<Route>` is rendered if none of the `<Route>`
    components listed above match the browser''s URL path. Alternatively, the `<Redirect>`
    component can be listed as the last entry to redirect the user to a page when
    none of the `<Route>` components in the `<Switch>` match.'
  prefs: []
  type: TYPE_NORMAL
