- en: Building RESTful Web Services in Spring 5 with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will build a simple REST web service that returns `Aloha`.
    Before moving to the implementation, we will focus on what components are involved
    in creating a RESTful web service. In this chapter, we will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a RESTful web service with Apache Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Eclipse IDE or STS for Spring REST project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new project in Eclipse/STS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and testing our REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While building the Jakarta Turbine project, engineers found that managing the
    Ant build tool is hard. They needed a simple tool to build the projects with a
    clear definition that is easy to understand. Their attempt shaped Apache Maven,
    and the JARs can be shared across several projects in the central place.
  prefs: []
  type: TYPE_NORMAL
- en: More information on Maven can be found at [https://maven.apache.org](https://maven.apache.org).
  prefs: []
  type: TYPE_NORMAL
- en: Apache Maven was created to support Java project and build management. Also,
    its simplified definition makes Java developers' lives easy while building and
    deploying Java projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this book, Apache Maven''s latest version is 3.5.0,
    and it can be downloaded from their website: [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi).'
  prefs: []
  type: TYPE_NORMAL
- en: Maven 3.3+ requires JDK 1.7 or above. So please make sure of your Java version
    when you use Maven 3.3.
  prefs: []
  type: TYPE_NORMAL
- en: You can get the binary or source ZIP files (or whatever the desired format for
    your operating system is) from the preceding link and install Maven on to your
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven installation can be verified by entering the `mvn --version` command
    in your console/command prompt. If it is installed successfully, it will show
    the following details (only on a Windows operating system):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51a26efb-2c2f-4b4a-bb44-8f65723646c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For clarity, the following image shows a Maven version check performed on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c8368cf-d7f7-4308-8453-863ffa94a82b.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a project with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once Maven is installed and verified, you will have to create a project with
    Maven. This you can do in the command prompt itself. Just run the following command
    in your desired location, then the project will be created automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you face any problems while creating the project, use the `â€“X` option in
    Maven, shown as follows. It will point out the location where the error has occurred:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following points, we go through each part of the command that is used
    to create a Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`archetype:generate`: Use this if the goal is to create a new project on a
    specified archetype, in our case `maven-archetype-quickstart`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Dgroupid=com.packtpub.restapp`: This part defines a project with a group
    identifier such as a package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-DartifcatId=ticket-management`: This part defines our project name (folder).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-DarchetypeArtifactId=maven-archetype-quickstart`: This part will be used
    to select the archetype on the `archetype:generate` goal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Dversion=1.0.0-SNAPSHOT`: The project version can be mentioned in this part.
    It will be helpful when you deploy the project and distribute it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing a POM file after creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have created a project, we can see the `pom.xml` file in our project
    folder. It will have all the basic details, such as `groupId`, `name`, and so
    on. Also, you can see the default `Junit` dependency under the `dependencies`
    configuration part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Maven artifacts belong to a group (typically `com.organization.product`), and
    must have a unique identifier.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding POM file, the `SNAPSHOT` suffix in `version` tells Maven that
    this project is still in development.
  prefs: []
  type: TYPE_NORMAL
- en: POM file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we will check the **Project Object Model** (**POM**) file structure, looking
    into how it''s organized and what parts are available inside the `pom.xml` file.
    The POM file can have `properties`, `dependencies`, `build`, and `profiles`. However,
    these parts will vary for different projects. We might not need some of them in
    other projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Understanding POM dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven helps manage the third-party libraries in your operating system. In the
    olden days, you might have had to copy each third-party library into your project
    manually. This could be a big problem when you had more than one project. Maven
    avoids this third-party libraries management confusion by keeping all libraries
    in a central place for each operating system. Regardless of your project count,
    the third-party libraries will be downloaded to the system only once.
  prefs: []
  type: TYPE_NORMAL
- en: Maven repositories can be found at [https://mvnrepository.com/](https://mvnrepository.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Every operating system has their own local Maven repository location:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows Maven central repository location:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\Users\<username>\.m2\repository\`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux Maven central repository location:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/home/<username>/.m2/repository`'
  prefs: []
  type: TYPE_NORMAL
- en: 'MAC Maven central repository location:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Users/<username>/.m2/repository`'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you add a third-party library to your POM dependency, the specified
    JAR and related files will be copied into the location `\.m2\repository`.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn about the Maven dependency structure by looking at one sample.
    Let's assume that we need to use Log4j version 2.9.1 in our application. In order
    to use it, we need to add the dependency to our project. We can search the `log4j-core`
    dependency from [https://mvnrepository.com](https://mvnrepository.com) and copy
    the dependency into our POM under `dependencies`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample Maven dependency is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25dd845e-90ef-497b-bcea-fca8e661adf2.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding Log4j 2.9.1 to POM dependency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the dependency is added and the project is updated on your IDE, the corresponding
    library will be copied into `\.m2\repository`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding dependency, `log4j-core`, will be added under POM. In this dependency,
    you can see `groupId`, `artifactId`, and `version` explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`groupId` is used to make the JAR/WAR file unique across all projects. As it
    will be used globally, Maven recommends that the package names follow the same
    rules as that of domain names with subgroups. A sample `groupId` is `com.google.appengine`.
    However, some third-party dependencies don''t follow the `groupId` package-naming
    policy. Check the following sample:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`artifactId` is just the name of the JAR/WAR file without the extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version` comes with number to show the JAR file version. Some JAR files come
    with extra information, such as `RELEASE`, for example, `3.1.4.RELEASE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code will download the `spring-security-web` library `3.1.4`
    JAR file to the repository location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Log4j-core` files (in Windows) will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6885c0ed-5235-46c9-84e7-90a5a307da1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes, you may see the `.jar` file missing when you update the project on
    IDE. In such cases, delete the whole folder (in our case `log4j-core` folder)
    and update them once again. In order to update the missing JAR file, after you
    delete the folder, just update your IDE (STS /Eclipse in our case) by right clicking
    the project and select Maven | Update Project . Finally, make sure you have the
    `.jar` file available under the folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample repositories in `.m2\repository` should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/daa56abc-3dd9-4bf6-9d32-7ef734d980e2.png)'
  prefs: []
  type: TYPE_IMG
- en: When you update a project (in Eclipse or any other IDE), it will get the JAR
    and related files from a remote Maven repository to your system's central repository.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency trees can be used in projects to locate specific dependencies. If
    you are wondering about any specific libraries, such as why it's used, you can
    check by executing a dependency tree. Also, a dependency tree can be expanded
    to display dependency conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows the dependency libraries and how they''re organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By executing the command on your project folder (or wherever the `pom.xml`
    file is available), you can view the dependency tree, and its structure is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot is a quick and easily configurable Spring application. Unlike other
    Spring applications, we don't need much configuration to build a Spring Boot application,
    so you can start building it very quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot helps us to create a standalone application, which can be embedded
    with Tomcat or another container quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Developing RESTful web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a new project, we can use a Maven command prompt or an online tool,
    such as Spring Initializr ([http://start.spring.io](http://start.spring.io)),
    to generate the project base. This website comes in handy for creating a simple
    Spring Boot-based web project to start the ball rolling.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go to [http://start.spring.io](http://start.spring.io) in our browser
    and configure our project by filling in the following parameters to create a project
    base:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Group: `com.packtpub.restapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Artifact: `ticket-management`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Search for dependencies: `Web` (full-stack web development with Tomcat and
    Spring MVC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After configuring our project, it will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24789d0f-bbfb-4c62-bae2-715482399bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can generate the project by clicking Generate Project. The project
    (ZIP file) should be downloaded to your system. Unzip the `.zip` file and you
    should see the files as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/084f460e-ba43-4322-9ba4-9aa6de5ae3e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Copy the entire folder (`ticket-management`) and keep it in your desired location.
  prefs: []
  type: TYPE_NORMAL
- en: Working with your favorite IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now is the time to pick the IDE. Though there are many IDEs used for Spring
    Boot projects, I would recommend using **Spring Tool Suite** (**STS**), as it
    is open source and easy to manage projects with. In my case, I use `sts-3.8.2.RELEASE`.
    You can download the latest STS from this link: [https://spring.io/tools/sts/all](https://spring.io/tools/sts/all).
    In most cases, you may not need to install; just unzip the file and start using
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8cf1fb7-89c3-447b-8c29-374679aa4c27.png)'
  prefs: []
  type: TYPE_IMG
- en: After extracting the STS, you can start using the tool by running `STS.exe`
    (shown in the preceding screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: 'In STS, you can import the project by selecting Existing Maven Projects, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b25c35d-504f-4bb6-a797-e23840c2714c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After importing the project, you can see the project in Package Explorer, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42fe82b7-6ab5-4e24-9ff7-eae535635a13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the main Java file (`TicketManagementApplication`) by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab8d382c-e66c-4361-8be3-254c23e99d24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To simplify the project, we will clean up the existing POM file and update
    the required dependencies. Add this file configuration to `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding configuration, you can check that we have used the following
    libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-web`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-boot-starter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-boot-starter-tomcat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring-bind`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jackson-databind`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the preceding dependencies are needed for the project to run, we have added
    them to our `pom.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far we have got the base project ready for Spring Web Service. Let''s add
    a basic REST code to the application. First, remove the `@SpringBootApplication`
    annotation from the `TicketManagementApplication` class and add the following
    annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'These annotations will help the class to act as a web service class. I am not
    going to talk much about what these configurations will do in this chapter. After
    adding the annotations, please add a simple method to return a string as our basic
    web service method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, your code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all the coding changes are done, just run the project on Spring Boot App
    (Run As | Spring Boot App). You can verify the application has loaded by checking
    this message in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once verified, you can check the API on the browser by simply typing `localhost:8080`.
    Check out the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfd51df8-24ba-4696-837e-e7742d1ec64b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to change the port number, you can configure a different port number
    in `application.properties`, which is in `src/main/resources/application.properties`.
    Check out the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36d406d2-b55b-433d-888f-713d1a011ef2.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to set up a Maven build to support the basic
    implementation of a web service. Also, we have learned how Maven is helpful in
    third-party library management as well as Spring Boot and basic Spring REST projects.
    In the coming chapters, we will discuss more about Spring REST endpoints and Reactor
    support.
  prefs: []
  type: TYPE_NORMAL
