- en: Targeting Multiple Distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned at the end of the last chapter, so far we have been targeting a
    single operating system with our playbook. While this is great if we are only
    going to run our playbook against CentOS 7 hosts, that might not always be the
    case.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to look at adapting our WordPress installation
    playbook to target an Ubuntu 17.04 server instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Look at and implement core modules that are operating system-dependent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss and apply best practices for targeting multiple distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See how we can target multiple hosts with an Ansible inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to be launching two Vagrant boxes so you will
    need Vagrant installed and access to the internet; the boxes themselves are around
    a 300 to 500 MB download each.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to make a copy of the `lemp` folder from the last chapter and
    call it `lemp-multi` if you are going to follow along, adapting the roles as we
    work through them. If you are not following along, you can find a complete version
    of `lemp-multi` at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter06/lemp-multi](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter06/lemp-multi).
  prefs: []
  type: TYPE_NORMAL
- en: Launching multiple Vagrant boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start to look at the changes we need to make to our Ansible playbook,
    we should look at how we are going to launch two Vagrant boxes running different
    operating systems side by side. It is possible to launch two Vagrant boxes from
    a single `Vagrantfile`; we will be using the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are defining two different boxes, one called `centos` and
    the other `ubuntu`, you should replace the `Vagrantfile` in the `lemp` folder
    you copied earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can launch the two machines using just one command; to use VirtualBox, we
    should run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or to use VMware, we can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the Terminal output here, this launched the two boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the boxes are up and running, you can SSH to them using the machine name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our two boxes running on two different operating systems,
    we can discuss the changes we need to make to our playbook. First of all, let''s
    look at how the changes to the `Vagrantfile` will affect our host inventory file,
    as you can see from this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We now have two hosts, one called `centos` and the other `ubuntu`, and we are
    putting them in a group called `wordpress` where we are setting some common variables.
    You should update your `production` file, as we will be using it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-operating system considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at each of the core Ansible modules used in the three roles, `stack-install`,
    `stack-config`, and `wordpress`, we are using a few that will not work on our
    newly introduced Ubuntu box. Let''s quickly work through each one and see what
    we need to take into account when targeting two very different operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yum`: The `yum` module is the package manager used for Red Hat-based machines
    such as CentOS, as Ubuntu is based on Debian, which uses `apt`. We will need to
    break out the parts of our playbook that uses the `yum` module to use the `apt`
    module instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yum_repository`: As mentioned, we will need to use an `apt` equivalent module,
    which is `apt_repository`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user`: The `user` module works pretty much the same on both operating systems,
    as we are not giving our user escalated privileges. There aren''t any special
    considerations we need to make, other than double-checking the correct group is
    available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template`, `file`, `copy`, and `lineinfile`: All four of these modules will
    work as expected; the only consideration we need to make is checking that we are
    copying the files to the correct location on the boxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service`: The service module should be the same on both operating systems,
    so we should be fine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_user` and `mysql_db`: As you would expect, once MySQL is installed and
    started, both of these will work across both operating systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selinux_permissive`: SELinux is primarily for operating systems based on Red
    Hat, so we will need to find an alternative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_url`, `stat`, `shell`, and `set_fact`: These should all work consistently
    across both of our target operating systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we know which parts of our existing playbook we need to review when running
    on Ubuntu versus running CentOS, we can make a start on making our roles work
    on both of the operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Adapting the roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So how do we go about building the logic into our roles to only execute certain
    parts of the roles on different operating systems, and also as we know that package
    names will be different? How do we define different sets of variables per operating
    system?
  prefs: []
  type: TYPE_NORMAL
- en: Operating system family
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have looked at the `setup` module in previous chapters; this is the module
    that gathers facts about our target hosts. One of these facts is `ansible_os_family`;
    this tells us the type of operating system we are running. Let''s check on both
    of our boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following Terminal output, the CentOS box returns Red
    Hat, which is expected. However, the Ubuntu box does not return any information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7c8406e2-020d-43e1-a04c-7b7619cad888.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at why this is. First of all, we can rerun the command,
    but this time minus the `grep` so we can see the full output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give you something like the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de2eeb93-5e27-4e48-8cee-4b1d12533a27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Oh, we are getting an error. Why is it reporting there is no Python installed?
    Running the following will SSH into the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once logged in using SSH, running `which python` will show us the path to the
    Python binary. As you can see, there isn''t one installed as we get no path returned.
    So what about Python 3? Running `which python3` does return a binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86d18150-7b81-4a08-83eb-215806581388.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's close our SSH session by running `exit`.
  prefs: []
  type: TYPE_NORMAL
- en: What should we do about this? As we are running a version of Ansible that is
    later than 2.2, we can tell Ansible to use `/usr/bin/python3` rather than its
    default of `/usr/bin/python`. To do this, we need to update our host inventory
    file so that just the Ubuntu host gets the `ansible_python_interpreter` variable
    added along with the updated path.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few ways to achieve this; however, for now, let''s just update
    the following line in the `production` host inventory file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So it reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once updated, we should be able to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows an output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f74756fe-258e-4e9b-b72b-ec3925f3ca78.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we are targeting the host group of `wordpress`, which contains
    both of our boxes in it, and, as expected, we get `RedHat` for the CentOS box
    and the Ubuntu box is now returning `Debian`. Now that we have a way of identifying
    which operating system is in use on each host, we can make a start adapting the
    roles.
  prefs: []
  type: TYPE_NORMAL
- en: The stack-install role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may have already guessed the bulk of this role, it is only tasks that
    call `yum` related modules and we have already mentioned that this is going to
    be changed.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the role we are going to look at is the content of `roles/stack-install/tasks/main.yml`.
    At the moment, this file contains the tasks that install our desired repositories
    and packages using the `yum` and `yum_repository` modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to update the file, but first, take the existing content and save it
    as a file called `roles/stack-install/tasks/install-centos.yml`. Once you have
    the copied the content, update `roles/stack-install/tasks/main.yml` so it has
    this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are are using the `ansible_os_family` variable to include
    variables and also different tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task will include one of the following files, depending on which operating
    system the task is being executed on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`roles/stack-install/vars/RedHat.yml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`roles/stack-install/vars/Debian.yml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It will then include one of the following two files, which contain the tasks
    for the operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`install-centos.yml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install-ubuntu.yml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We already know that `install-centos.yml` contains old content of our `main.yml`
    file; as the package name and repository URLs will also be changing, we should
    move the content of `roles/stack-install/default/main.yml` to `roles/stack-install/vars/RedHat.yml`,
    leaving `roles/stack-install/default/main.yml` empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the CentOS portion of our role defined, we can look at the
    Ubuntu parts, starting with the content of `roles/stack-install/vars/Debian.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, while we are keeping the `system_packages`, `stack_packages`,
    and `extra_packages` variables, we have different package names in there. We have
    a similar situation with `repo_packages`, where we have updated URLs, as the CentOS
    repositories will not work with Ubuntu. Finally, we have introduced two new variables,
    `repo_keys`, and `repo_keys_urls`; we will look at what these are used for shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The final file we need to cover for our new role is `roles/stack-install/tasks/install-ubuntu.yml`.
    Like `install-centos.yml`, this contains the tasks to add the additional repositories
    we need and install the packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to install a few of the tools we need to continue with
    the rest of the tasks; these have been defined in the `system_packages` variable,
    so we simply have to add the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have basic prerequisites installed, we can add the keys for the
    repositories we will be adding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The first task adds keys from the official Ubuntu key store, and the second
    task downloads the keys from a URL. In our case, we are adding one key for the
    official MariaDB repository and one for the NGINX mainline repository; without
    these keys, we would not be able to add the repositories without generating an
    error about them not being trusted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task for adding repositories looks like the following; it cycles through
    the repository URLs in the `repo_packages` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The final part of the playbook installs the remaining packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now we have updated our `stack-install` role, we need to do the same for the
    `stack-config` one.
  prefs: []
  type: TYPE_NORMAL
- en: The stack-config role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A lot of the modules we are using in this role will work fine on both of our
    target operating systems, so in this role, we are tweaking things like paths to
    configuration files and so on. Rather than list out the entire content of the
    `roles/stack-config/tasks/main.yml` file, I will just highlight the changes that
    need to be made, starting with the following task that should be right at the
    top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This will load in the variables that contain the paths we need to use later
    in the role; the content of `roles/stack-config/vars/RedHat.yml` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And the content of `roles/stack-config/vars/Debian.yml` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, most of the changes we need to make are around the location
    of the PHP configuration files. Before we get those, we need to create the WordPress
    user back in our  `roles/stack-config/tasks/main.yml` file. Because PHP-FPM runs
    under a different group by default on Ubuntu, there is no PHP-FPM group created,
    so let''s create one, making sure we add these tasks before the `add the wordpress
    user` task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, there is no `/var/www/` folder created on Ubuntu, so we will need
    to create the folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Both the group and folder are already there on the CentOS box, so these tasks
    should just say `ok`. Once they have been created, the user will be created without
    errors on both boxes with no changes to the `add the wordpress user` task.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the tasks that deploy the NGINX configuration will work without any
    changes, so we can move on to the PHP configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, both of these tasks have been updated to include the paths relevant
    to the operating system the playbook is currently targeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `restart php-fpm` handler has also been updated as the PHP-FPM service
    on the two operating systems has a different name; this task should replace the
    existing one in `roles/stack-config/handlers/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, back in `roles/stack-config/tasks/main.yml` the task that starts
    PHP-FPM should be updated as per this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The next two changes are to make the following tasks only run on CentOS boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because the default configuration on Ubuntu for MariaDB does not contain
    `bind-address`, so we are skipping it; the next and final task is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We are skipping this on the Ubuntu box because SELinux is not installed and
    does not work with Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: The wordpress role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There a few small changes to the `wordpress` role; the first change is an update
    to `roles/wordpress/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have updated the `wordpress.domain` to include the `wordpress_domain`
    variable, and `wordpress.title` now includes the `os_family` variable; we are
    setting both of these in the `roles/wordpress/tasks/main.yml` file by adding the
    following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The reason we are doing this here is that Vagrant does not correctly set the
    hostname of our Ubuntu box to the fully qualified domain name, such as `192.168.50.7.nip.io`,
    so we are using the host we are SSHing to, which is defined in the `production`
    inventory hosts file. The remainder of this role remains as is.
  prefs: []
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are no changes to our `site.yml` file, meaning that we just need to run
    the following command to start the playbook run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run through the playbook, giving the following output; please note
    that I have trimmed a few parts of the playbook output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the playbook has finished, you should be able to access `http://192.168.50.6.nip.io/`
    in your browser, and you should see WordPress showing that it is installed on
    a Red Hat-based operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0e2f891d-2df3-4a23-847b-6f7c10c73198.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Going to `http://192.168.50.7.nip.io/` will show the same theme, but it should
    state that it is running in a Debian-based operating system, as in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f299f262-5804-43ee-bfe8-7df80942b997.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can try rerunning your playbook to see what results are returned, and also
    you can remove the Vagrant boxes by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You will be asked if you want to remove each machine one at a time; just answer
    `yes` to each of the two prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have adapted our WordPress installation playbook to target
    multiple operating systems. We did this by using Ansible's inbuilt auditing module
    to determine which operating system the playbook is running against and running
    just the tasks that will work on the target operating system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to make a start at looking at some core Ansible
    modules that deal with networking.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: We need to double-check every task in our playbook so it will
    work on both operating systems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which configuration option allows us to define the path to Python, Ansible will
    use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why we need to make changes to the tasks that configured and interact
    with the PHP-FPM service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: The package names for each of the operating systems correspond
    exactly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the playbook so that a different theme is installed on each of the different
    hosts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find out more about the Ubuntu operating system at [https://www.ubuntu.com](https://www.ubuntu.com).
  prefs: []
  type: TYPE_NORMAL
